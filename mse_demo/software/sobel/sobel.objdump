
sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00012a94 memsz 0x00012a94 flags r-x
    LOAD off    0x00013ab4 vaddr 0x00012ab4 paddr 0x000145a0 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x0001608c vaddr 0x0001608c paddr 0x0001608c align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000120b0  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007c0  000122f4  000122f4  000132f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  00012ab4  000145a0  00013ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  0001608c  0001608c  0001608c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  0001621c  0001621c  000155a0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000155a0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001038  00000000  00000000  000155c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00024ef8  00000000  00000000  00016600  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009942  00000000  00000000  0003b4f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c442  00000000  00000000  00044e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002718  00000000  00000000  0005127c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003ded  00000000  00000000  00053994  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000178c0  00000000  00000000  00057781  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0006f044  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018d8  00000000  00000000  0006f098  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00074352  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00074355  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00074361  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00074362  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00074363  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00074367  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007436b  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0007436f  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00074378  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00074381  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0007438a  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000049  00000000  00000000  00074395  2**0
                  CONTENTS, READONLY
 29 .jdi          00005ad8  00000000  00000000  000743de  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000723e4  00000000  00000000  00079eb6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
000122f4 l    d  .rodata	00000000 .rodata
00012ab4 l    d  .rwdata	00000000 .rwdata
0001608c l    d  .bss	00000000 .bss
0001621c l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/olivi/master/embHard/mse_embHard_phase2/mse_demo/software/sobel_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00012802 l     O .rodata	00000010 zeroes.4404
00005d94 l     F .text	000000bc __sbprintf
00012812 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00005fa4 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00007ad4 l     F .text	00000008 __fp_unlock
00007ae8 l     F .text	0000019c __sinit.part.1
00007c84 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00012ebc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00013300 l     O .rwdata	00000020 lc_ctype_charset
000132e0 l     O .rwdata	00000020 lc_message_charset
00013320 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00012844 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000a820 l     F .text	000000fc __sprint_r.part.0
00012978 l     O .rodata	00000010 blanks.4348
00012968 l     O .rodata	00000010 zeroes.4349
0000bdac l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000f8b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000f9c0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000f9ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000fad8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000fbb8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000fca4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000fe78 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00014590 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
000100f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010228 l     F .text	00000034 alt_dev_reg
00013500 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00010534 l     F .text	0000020c altera_avalon_jtag_uart_irq
00010740 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00010d78 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00011228 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001169c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000117dc l     F .text	0000003c alt_get_errno
00011818 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000160f0 g     O .bss	00000004 alt_instruction_exception_handler
00009eb8 g     F .text	00000074 _mprec_log10
00009fa4 g     F .text	0000008c __any_on
0000c348 g     F .text	00000054 _isatty_r
00012850 g     O .rodata	00000028 __mprec_tinytens
0000fdb4 g     F .text	0000007c alt_main
000039c0 g     F .text	000000c0 _puts_r
0001611c g     O .bss	00000100 alt_irq
0000c39c g     F .text	00000060 _lseek_r
000127b1 g     O .rodata	00000009 gy_array
000145a0 g       *ABS*	00000000 __flash_rwdata_start
0000e3e0 g     F .text	00000088 .hidden __eqdf2
0001621c g       *ABS*	00000000 __alt_heap_start
00003984 g     F .text	0000003c printf
0000c5b4 g     F .text	0000009c _wcrtomb_r
0000a6e0 g     F .text	0000005c __sseek
00007e24 g     F .text	00000010 __sinit
0000c45c g     F .text	00000140 __swbuf_r
000088ec g     F .text	0000007c _setlocale_r
00007c8c g     F .text	00000068 __sfmoreglue
0000fe54 g     F .text	00000024 __malloc_unlock
00000ea4 g     F .text	00000044 LCD_Write_Command
0001609c g     O .bss	00000004 sobel_width
000160e0 g     O .bss	00000004 altera_avalon_timer_ts_freq
00008db0 g     F .text	0000015c memmove
00000ee8 g     F .text	00000044 LCD_Write_Data
00007e0c g     F .text	00000018 _cleanup
00009034 g     F .text	000000a8 _Balloc
0000e468 g     F .text	000000dc .hidden __gtdf2
00011bd4 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000764 g     F .text	0000004c cam_get_xsize
0000c2ec g     F .text	0000005c _fstat_r
000160c0 g     O .bss	00000004 errno
0000a65c g     F .text	00000008 __seofread
000160d4 g     O .bss	00000004 alt_argv
0001c560 g       *ABS*	00000000 _gp
000100c4 g     F .text	00000030 usleep
000008a4 g     F .text	000000a8 cam_set_image_pointer
00013380 g     O .rwdata	00000180 alt_fd_list
00002f00 g     F .text	00000034 vga_set_pointer
00011bf8 g     F .text	00000090 alt_find_dev
00008c68 g     F .text	00000148 memcpy
00007adc g     F .text	0000000c _cleanup_r
0000f6cc g     F .text	000000dc .hidden __floatsidf
00011760 g     F .text	0000007c alt_io_redirect
0000e544 g     F .text	000000f4 .hidden __ltdf2
000122f4 g       *ABS*	00000000 __DTOR_END__
00003a80 g     F .text	00000014 puts
00011ec4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000a594 g     F .text	00000074 __fpclassifyd
00009e14 g     F .text	000000a4 __ratio
0000bd90 g     F .text	0000001c __vfiprintf_internal
00010938 g     F .text	0000021c altera_avalon_jtag_uart_read
00003120 g     F .text	00000014 malloc
00003954 g     F .text	00000030 _printf_r
00000c70 g     F .text	00000020 get_grayscale_picture
00003064 g     F .text	00000064 .hidden __udivsi3
00000280 g     F .text	000004e4 init_camera
0001254c g     O .rodata	00000128 lens_roll_off_tbl
0000fb14 g     F .text	000000a4 isatty
000128a0 g     O .rodata	000000c8 __mprec_tens
00008968 g     F .text	0000000c __locale_charset
00011e34 g     F .text	00000090 alt_icache_flush
000160bc g     O .bss	00000004 __malloc_top_pad
00014570 g     O .rwdata	00000004 __mb_cur_max
00008998 g     F .text	0000000c _localeconv_r
00001fb4 g     F .text	000005c0 sobel_x
00009440 g     F .text	0000003c __i2b
000082a8 g     F .text	000004bc __sfvwrite_r
00000f2c g     F .text	00000240 init_LCD
00003a94 g     F .text	00000054 _sbrk_r
000007fc g     F .text	000000a8 cam_get_profiling
0000c3fc g     F .text	00000060 _read_r
000160a0 g     O .bss	00000004 sobel_result
00014588 g     O .rwdata	00000004 alt_max_fd
0000bfe0 g     F .text	000000f0 _fclose_r
00007aa4 g     F .text	00000030 fflush
000160b8 g     O .bss	00000004 __malloc_max_sbrked_mem
00016094 g     O .bss	00000004 grayscale_array
0000d24c g     F .text	000008ac .hidden __adddf3
000007b0 g     F .text	0000004c cam_get_ysize
00009bbc g     F .text	0000010c __b2d
0000cd14 g     F .text	00000538 .hidden __umoddi3
0000fce0 g     F .text	000000d4 lseek
00000d80 g     F .text	000000a0 i2c_short_read
00014568 g     O .rwdata	00000004 _global_impure_ptr
0000a030 g     F .text	00000564 _realloc_r
0001621c g       *ABS*	00000000 __bss_end
000115ac g     F .text	000000f0 alt_iic_isr_register
00011acc g     F .text	00000108 alt_tick
0000c79c g     F .text	00000578 .hidden __udivdi3
0000c248 g     F .text	00000024 _fputwc_r
00012878 g     O .rodata	00000028 __mprec_bigtens
00009224 g     F .text	00000104 __s2b
0000f7a8 g     F .text	000000a8 .hidden __floatunsidf
000098fc g     F .text	00000060 __mcmp
00007e44 g     F .text	00000018 __fp_lock_all
00011560 g     F .text	0000004c alt_ic_irq_enabled
00016090 g     O .bss	00000004 grayscape_height
00011a30 g     F .text	0000009c alt_alarm_stop
000160e4 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00013358 g     O .rwdata	00000028 alt_dev_null
00001210 g     F .text	000000c8 transfer_LCD_with_dma
00011208 g     F .text	00000020 alt_dcache_flush_all
00009328 g     F .text	00000068 __hi0bits
0000f64c g     F .text	00000080 .hidden __fixdfsi
000145a0 g       *ABS*	00000000 __ram_rwdata_end
00014580 g     O .rwdata	00000008 alt_dev_list
00010130 g     F .text	000000f8 write
00010f64 g     F .text	00000020 alt_timestamp_freq
00012ab4 g       *ABS*	00000000 __ram_rodata_end
0000fa28 g     F .text	000000b0 fstat
0000e544 g     F .text	000000f4 .hidden __ledf2
00009674 g     F .text	00000140 __pow5mult
0000a934 g     F .text	0000145c ___vfiprintf_internal_r
000160cc g     O .bss	00000004 __nlocale_changed
000030c8 g     F .text	00000058 .hidden __umodsi3
00002ec0 g     F .text	00000020 GetSobel_rgb
0001621c g       *ABS*	00000000 end
00002ee0 g     F .text	00000020 GetSobelResult
000009ac g     F .text	00000050 take_picture_blocking
00000a84 g     F .text	00000030 DIPSW_get_value
00002c70 g     F .text	0000013c sobel_y_with_rgb
00010474 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00000984 g     F .text	00000028 current_image_pointer
000122f4 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00010df0 g     F .text	0000007c alt_avalon_timer_sc_init
0000f850 g     F .text	00000064 .hidden __clzsi2
00010b54 g     F .text	00000224 altera_avalon_jtag_uart_write
00007e34 g     F .text	00000004 __sfp_lock_acquire
00008b84 g     F .text	000000e4 memchr
00003b80 g     F .text	000021f8 ___vfprintf_internal_r
00007f98 g     F .text	00000310 _free_r
00008974 g     F .text	00000010 __locale_mb_cur_max
000026b0 g     F .text	000005c0 sobel_y
0001240c g     O .rodata	00000140 noise_reduction_reg_settings_array
00012140 g     F .text	00000180 __call_exitprocs
000160c8 g     O .bss	00000004 __mlocale_changed
00014560 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
000160e8 g     O .bss	00000004 _alt_tick_rate
000097b4 g     F .text	00000148 __lshift
000160ec g     O .bss	00000004 _alt_nticks
0000feb4 g     F .text	000000fc read
00010294 g     F .text	0000007c alt_sys_init
00002574 g     F .text	0000013c sobel_x_with_rgb
00012028 g     F .text	00000118 __register_exitproc
0000947c g     F .text	000001f8 __multiply
000107e0 g     F .text	00000068 altera_avalon_jtag_uart_close
00012ab4 g       *ABS*	00000000 __ram_rwdata_start
000122f4 g       *ABS*	00000000 __ram_rodata_start
000160f4 g     O .bss	00000028 __malloc_current_mallinfo
00009cc8 g     F .text	0000014c __d2b
000160a4 g     O .bss	00000004 sobel_height
000009fc g     F .text	00000030 enable_continues_mode
00010310 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000187c g     F .text	00000170 init_sobel_arrays
00011d90 g     F .text	000000a4 alt_get_fd
000110b0 g     F .text	00000158 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000bec8 g     F .text	00000054 _close_r
00011fac g     F .text	0000007c memcmp
000103d0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001621c g       *ABS*	00000000 __alt_stack_base
00010420 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00005e50 g     F .text	00000154 __swsetup_r
0000daf8 g     F .text	000008e8 .hidden __divdf3
00007cf4 g     F .text	00000118 __sfp
00009f2c g     F .text	00000078 __copybits
00012ab4 g     O .rwdata	00000408 __malloc_av_
00007e40 g     F .text	00000004 __sinit_lock_release
0000e638 g     F .text	00000718 .hidden __muldf3
0000a608 g     F .text	00000054 __sread
00011c88 g     F .text	00000108 alt_find_file
00011264 g     F .text	000000a4 alt_dev_llist_insert
0000fe30 g     F .text	00000024 __malloc_lock
00010014 g     F .text	000000b0 sbrk
00007a48 g     F .text	0000005c _fflush_r
0000bf1c g     F .text	000000c4 _calloc_r
0001608c g       *ABS*	00000000 __bss_start
00008f0c g     F .text	00000128 memset
000012d8 g     F .text	000005a4 main
000160d8 g     O .bss	00000004 alt_envp
000160b4 g     O .bss	00000004 __malloc_max_total_mem
00000c30 g     F .text	00000020 get_grayscale_width
00010370 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000c59c g     F .text	00000018 __swbuf
000160a8 g     O .bss	00000004 sobel_x_result
0000a73c g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000c0d0 g     F .text	00000014 fclose
00010e6c g     F .text	00000078 alt_timestamp_start
000061a4 g     F .text	00001688 _dtoa_r
00003148 g     F .text	0000080c _malloc_r
0000c710 g     F .text	00000030 __ascii_wctomb
0001458c g     O .rwdata	00000004 alt_errno
00008764 g     F .text	000000c4 _fwalk
00002f6c g     F .text	00000084 .hidden __divsi3
00007e74 g     F .text	00000124 _malloc_trim_r
000122f4 g       *ABS*	00000000 __CTOR_END__
0001608c g     O .bss	00000004 grayscale_width
0000a744 g     F .text	000000dc strcmp
0000116c g     F .text	000000a4 transfer_LCD_no_dma
000122f4 g       *ABS*	00000000 __flash_rodata_start
000122f4 g       *ABS*	00000000 __DTOR_LIST__
0000e3e0 g     F .text	00000088 .hidden __nedf2
000122f4 g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0001025c g     F .text	00000038 alt_irq_init
0000ffb0 g     F .text	00000064 alt_release_fd
00000ccc g     F .text	000000b4 i2c_auto_detect
00012988 g     O .rodata	00000100 .hidden __clz_tab
0000094c g     F .text	00000038 current_image_valid
000160c4 g     O .bss	00000004 _PathLocale
00000c90 g     F .text	0000003c i2c_busy_wait
00011f60 g     F .text	00000014 atexit
0000be68 g     F .text	00000060 _write_r
000089a4 g     F .text	00000018 setlocale
0001456c g     O .rwdata	00000004 _impure_ptr
000160d0 g     O .bss	00000004 alt_argc
0000782c g     F .text	0000021c __sflush_r
000160dc g     O .bss	00000004 altera_avalon_timer_ts_base
00011368 g     F .text	00000060 _do_dtors
00008990 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00009b58 g     F .text	00000064 __ulp
00007e5c g     F .text	00000018 __fp_unlock_all
00014578 g     O .rwdata	00000008 alt_fs_list
000160ac g     O .bss	00000004 sobel_y_result
00000e20 g     F .text	00000084 i2c_short_write
00000020 g       *ABS*	00000000 __ram_exceptions_start
00016098 g     O .bss	00000002 LCD_height
000089bc g     F .text	0000000c localeconv
00010ee4 g     F .text	00000080 alt_timestamp
00002f34 g     F .text	00000038 vga_set_swap
000113fc g     F .text	00000050 alt_ic_isr_register
00002dac g     F .text	00000114 sobel_threshold
000145a0 g       *ABS*	00000000 _edata
0001621c g       *ABS*	00000000 _end
0000c0e4 g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
00010848 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000127a8 g     O .rodata	00000009 gx_array
000114d4 g     F .text	0000008c alt_ic_irq_disable
0000a664 g     F .text	0000007c __swrite
00014564 g     O .rwdata	00000004 __malloc_trim_threshold
0001609a g     O .bss	00000002 LCD_width
00000ab4 g     F .text	0000017c conv_grayscale
00008984 g     F .text	0000000c __locale_msgcharset
00011f74 g     F .text	00000038 exit
00008828 g     F .text	000000c4 _fwalk_reent
0000995c g     F .text	000001fc __mdiff
00002ff0 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00007e38 g     F .text	00000004 __sfp_lock_release
00000c50 g     F .text	00000020 get_grayscale_height
000122c0 g     F .text	00000034 _exit
000019ec g     F .text	000005c8 sobel_mac
00010f84 g     F .text	0000012c alt_alarm_start
000089c8 g     F .text	000001bc __smakebuf_r
000160b0 g     O .bss	00000004 sobel_rgb565
00003ae8 g     F .text	00000098 strlen
000118dc g     F .text	00000154 open
0000e468 g     F .text	000000dc .hidden __gedf2
00014574 g     O .rwdata	00000004 __wctomb
0000a91c g     F .text	00000018 __sprint_r
000113c8 g     F .text	00000034 alt_icache_flush_all
00014594 g     O .rwdata	00000004 alt_priority_mask
0001144c g     F .text	00000088 alt_ic_irq_enable
00005d78 g     F .text	0000001c __vfprintf_internal
0000c740 g     F .text	0000005c _wctomb_r
0000ed50 g     F .text	000008fc .hidden __subdf3
00009390 g     F .text	000000b0 __lo0bits
00014598 g     O .rwdata	00000008 alt_alarm_list
00011308 g     F .text	00000060 _do_ctors
0000c650 g     F .text	000000c0 wcrtomb
0000f8f0 g     F .text	000000d0 close
0000fc20 g     F .text	00000084 alt_load
0000c26c g     F .text	00000080 fputwc
00003134 g     F .text	00000014 free
00007e3c g     F .text	00000004 __sinit_lock_acquire
00009104 g     F .text	00000120 __multadd
000090dc g     F .text	00000028 _Bfree
00000a2c g     F .text	00000058 new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10984704 	addi	r2,r2,24860
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10984704 	addi	r2,r2,24860
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a6e417 	ldw	r2,-25712(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a6e417 	ldw	r2,-25712(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     250:	d6b15814 	ori	gp,gp,50528
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     258:	10982314 	ori	r2,r2,24716

    movhi r3, %hi(__bss_end)
     25c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     260:	18d88714 	ori	r3,r3,25116

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_data_end+0xff000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	000fc200 	call	fc20 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	000fdb40 	call	fdb4 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_data_end+0xff00027c>

00000280 <init_camera>:
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     280:	defffd04 	addi	sp,sp,-12
     284:	dfc00215 	stw	ra,8(sp)
     288:	df000115 	stw	fp,4(sp)
     28c:	df000104 	addi	fp,sp,4
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     290:	00c00084 	movi	r3,2
     294:	00804034 	movhi	r2,256
     298:	10842744 	addi	r2,r2,4253
     29c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     2a0:	00c00044 	movi	r3,1
     2a4:	00804034 	movhi	r2,256
     2a8:	10841304 	addi	r2,r2,4172
     2ac:	10c00025 	stbio	r3,0(r2)
	for (i=0; i < 1000000 ; i++)
     2b0:	e03fff15 	stw	zero,-4(fp)
     2b4:	00000406 	br	2c8 <init_camera+0x48>
		asm volatile ("nop");
     2b8:	0001883a 	nop

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     2bc:	e0bfff17 	ldw	r2,-4(fp)
     2c0:	10800044 	addi	r2,r2,1
     2c4:	e0bfff15 	stw	r2,-4(fp)
     2c8:	e0ffff17 	ldw	r3,-4(fp)
     2cc:	008003f4 	movhi	r2,15
     2d0:	10908fc4 	addi	r2,r2,16959
     2d4:	10fff80e 	bge	r2,r3,2b8 <__alt_data_end+0xff0002b8>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     2d8:	0007883a 	mov	r3,zero
     2dc:	00804034 	movhi	r2,256
     2e0:	10841304 	addi	r2,r2,4172
     2e4:	10c00025 	stbio	r3,0(r2)
	for (i=0; i < 1000000 ; i++)
     2e8:	e03fff15 	stw	zero,-4(fp)
     2ec:	00000406 	br	300 <init_camera+0x80>
		asm volatile ("nop");
     2f0:	0001883a 	nop
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     2f4:	e0bfff17 	ldw	r2,-4(fp)
     2f8:	10800044 	addi	r2,r2,1
     2fc:	e0bfff15 	stw	r2,-4(fp)
     300:	e0ffff17 	ldw	r3,-4(fp)
     304:	008003f4 	movhi	r2,15
     308:	10908fc4 	addi	r2,r2,16959
     30c:	10fff80e 	bge	r2,r3,2f0 <__alt_data_end+0xff0002f0>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     310:	01800044 	movi	r6,1
     314:	014ce184 	movi	r5,13190
     318:	01001e04 	movi	r4,120
     31c:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     320:	000d883a 	mov	r6,zero
     324:	014ce184 	movi	r5,13190
     328:	01001e04 	movi	r4,120
     32c:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 1000000 ; i++)
     330:	e03fff15 	stw	zero,-4(fp)
     334:	00000406 	br	348 <init_camera+0xc8>
		asm volatile ("nop");
     338:	0001883a 	nop
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     33c:	e0bfff17 	ldw	r2,-4(fp)
     340:	10800044 	addi	r2,r2,1
     344:	e0bfff15 	stw	r2,-4(fp)
     348:	e0ffff17 	ldw	r3,-4(fp)
     34c:	008003f4 	movhi	r2,15
     350:	10908fc4 	addi	r2,r2,16959
     354:	10fff80e 	bge	r2,r3,338 <__alt_data_end+0xff000338>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     358:	01803104 	movi	r6,196
     35c:	014c0684 	movi	r5,12314
     360:	01001e04 	movi	r4,120
     364:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     368:	01800204 	movi	r6,8
     36c:	014c8084 	movi	r5,12802
     370:	01001e04 	movi	r4,120
     374:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     378:	0180c744 	movi	r6,797
     37c:	014cfd04 	movi	r5,13300
     380:	01001e04 	movi	r4,120
     384:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     388:	e03fff15 	stw	zero,-4(fp)
     38c:	00000406 	br	3a0 <init_camera+0x120>
		asm volatile ("nop");
     390:	0001883a 	nop
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     394:	e0bfff17 	ldw	r2,-4(fp)
     398:	10800044 	addi	r2,r2,1
     39c:	e0bfff15 	stw	r2,-4(fp)
     3a0:	e0ffff17 	ldw	r3,-4(fp)
     3a4:	008000b4 	movhi	r2,2
     3a8:	10a1a7c4 	addi	r2,r2,-31073
     3ac:	10fff80e 	bge	r2,r3,390 <__alt_data_end+0xff000390>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     3b0:	01a3c254 	movui	r6,36617
     3b4:	014d0784 	movi	r5,13342
     3b8:	01001e04 	movi	r4,120
     3bc:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     3c0:	01805404 	movi	r6,336
     3c4:	014d0704 	movi	r5,13340
     3c8:	01001e04 	movi	r4,120
     3cc:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     3d0:	01a3c254 	movui	r6,36617
     3d4:	014d0784 	movi	r5,13342
     3d8:	01001e04 	movi	r4,120
     3dc:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     3e0:	e03fff15 	stw	zero,-4(fp)
     3e4:	00000406 	br	3f8 <init_camera+0x178>
		asm volatile ("nop");
     3e8:	0001883a 	nop
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     3ec:	e0bfff17 	ldw	r2,-4(fp)
     3f0:	10800044 	addi	r2,r2,1
     3f4:	e0bfff15 	stw	r2,-4(fp)
     3f8:	e0ffff17 	ldw	r3,-4(fp)
     3fc:	008000b4 	movhi	r2,2
     400:	10a1a7c4 	addi	r2,r2,-31073
     404:	10fff80e 	bge	r2,r3,3e8 <__alt_data_end+0xff0003e8>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     408:	01a3c214 	movui	r6,36616
     40c:	014d0784 	movi	r5,13342
     410:	01001e04 	movi	r4,120
     414:	0000e200 	call	e20 <i2c_short_write>
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     418:	e03fff15 	stw	zero,-4(fp)
     41c:	00001806 	br	480 <init_camera+0x200>
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
     420:	00800074 	movhi	r2,1
     424:	1088bd04 	addi	r2,r2,8948
     428:	e0ffff17 	ldw	r3,-4(fp)
     42c:	18c7883a 	add	r3,r3,r3
     430:	18c7883a 	add	r3,r3,r3
     434:	10c5883a 	add	r2,r2,r3
     438:	1080000b 	ldhu	r2,0(r2)
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     43c:	113fffcc 	andi	r4,r2,65535
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
     440:	00800074 	movhi	r2,1
     444:	1088bd04 	addi	r2,r2,8948
     448:	e0ffff17 	ldw	r3,-4(fp)
     44c:	18c7883a 	add	r3,r3,r3
     450:	18c7883a 	add	r3,r3,r3
     454:	10c5883a 	add	r2,r2,r3
     458:	10800084 	addi	r2,r2,2
     45c:	1080000b 	ldhu	r2,0(r2)
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     460:	10bfffcc 	andi	r2,r2,65535
     464:	100d883a 	mov	r6,r2
     468:	200b883a 	mov	r5,r4
     46c:	01001e04 	movi	r4,120
     470:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     474:	e0bfff17 	ldw	r2,-4(fp)
     478:	10800044 	addi	r2,r2,1
     47c:	e0bfff15 	stw	r2,-4(fp)
     480:	e0bfff17 	ldw	r2,-4(fp)
     484:	108011b0 	cmpltui	r2,r2,70
     488:	103fe51e 	bne	r2,zero,420 <__alt_data_end+0xff000420>
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     48c:	e03fff15 	stw	zero,-4(fp)
     490:	00001806 	br	4f4 <init_camera+0x274>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
     494:	00800074 	movhi	r2,1
     498:	10890304 	addi	r2,r2,9228
     49c:	e0ffff17 	ldw	r3,-4(fp)
     4a0:	18c7883a 	add	r3,r3,r3
     4a4:	18c7883a 	add	r3,r3,r3
     4a8:	10c5883a 	add	r2,r2,r3
     4ac:	1080000b 	ldhu	r2,0(r2)
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     4b0:	113fffcc 	andi	r4,r2,65535
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
     4b4:	00800074 	movhi	r2,1
     4b8:	10890304 	addi	r2,r2,9228
     4bc:	e0ffff17 	ldw	r3,-4(fp)
     4c0:	18c7883a 	add	r3,r3,r3
     4c4:	18c7883a 	add	r3,r3,r3
     4c8:	10c5883a 	add	r2,r2,r3
     4cc:	10800084 	addi	r2,r2,2
     4d0:	1080000b 	ldhu	r2,0(r2)
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     4d4:	10bfffcc 	andi	r2,r2,65535
     4d8:	100d883a 	mov	r6,r2
     4dc:	200b883a 	mov	r5,r4
     4e0:	01001e04 	movi	r4,120
     4e4:	0000e200 	call	e20 <i2c_short_write>
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     4e8:	e0bfff17 	ldw	r2,-4(fp)
     4ec:	10800044 	addi	r2,r2,1
     4f0:	e0bfff15 	stw	r2,-4(fp)
     4f4:	e0bfff17 	ldw	r2,-4(fp)
     4f8:	10801430 	cmpltui	r2,r2,80
     4fc:	103fe51e 	bne	r2,zero,494 <__alt_data_end+0xff000494>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     500:	018164c4 	movi	r6,1427
     504:	014d6904 	movi	r5,13732
     508:	01001e04 	movi	r4,120
     50c:	0000e200 	call	e20 <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     510:	0189e644 	movi	r6,10137
     514:	014ce304 	movi	r5,13196
     518:	01001e04 	movi	r4,120
     51c:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     520:	01991004 	movi	r6,25664
     524:	014ce404 	movi	r5,13200
     528:	01001e04 	movi	r4,120
     52c:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     530:	e03fff15 	stw	zero,-4(fp)
     534:	00000406 	br	548 <init_camera+0x2c8>
		asm volatile ("nop");
     538:	0001883a 	nop
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     53c:	e0bfff17 	ldw	r2,-4(fp)
     540:	10800044 	addi	r2,r2,1
     544:	e0bfff15 	stw	r2,-4(fp)
     548:	e0ffff17 	ldw	r3,-4(fp)
     54c:	008000b4 	movhi	r2,2
     550:	10a1a7c4 	addi	r2,r2,-31073
     554:	10fff80e 	bge	r2,r3,538 <__alt_data_end+0xff000538>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     558:	0189e6c4 	movi	r6,10139
     55c:	014ce304 	movi	r5,13196
     560:	01001e04 	movi	r4,120
     564:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     568:	01991004 	movi	r6,25664
     56c:	014ce404 	movi	r5,13200
     570:	01001e04 	movi	r4,120
     574:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     578:	e03fff15 	stw	zero,-4(fp)
     57c:	00000406 	br	590 <init_camera+0x310>
		asm volatile ("nop");
     580:	0001883a 	nop
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     584:	e0bfff17 	ldw	r2,-4(fp)
     588:	10800044 	addi	r2,r2,1
     58c:	e0bfff15 	stw	r2,-4(fp)
     590:	e0ffff17 	ldw	r3,-4(fp)
     594:	008000b4 	movhi	r2,2
     598:	10a1a7c4 	addi	r2,r2,-31073
     59c:	10fff80e 	bge	r2,r3,580 <__alt_data_end+0xff000580>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     5a0:	01a840d4 	movui	r6,41219
     5a4:	014ce304 	movi	r5,13196
     5a8:	01001e04 	movi	r4,120
     5ac:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     5b0:	01800144 	movi	r6,5
     5b4:	014ce404 	movi	r5,13200
     5b8:	01001e04 	movi	r4,120
     5bc:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     5c0:	e03fff15 	stw	zero,-4(fp)
     5c4:	00000406 	br	5d8 <init_camera+0x358>
		asm volatile ("nop");
     5c8:	0001883a 	nop
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     5cc:	e0bfff17 	ldw	r2,-4(fp)
     5d0:	10800044 	addi	r2,r2,1
     5d4:	e0bfff15 	stw	r2,-4(fp)
     5d8:	e0ffff17 	ldw	r3,-4(fp)
     5dc:	008000b4 	movhi	r2,2
     5e0:	10a1a7c4 	addi	r2,r2,-31073
     5e4:	10fff80e 	bge	r2,r3,5c8 <__alt_data_end+0xff0005c8>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     5e8:	01a840d4 	movui	r6,41219
     5ec:	014ce304 	movi	r5,13196
     5f0:	01001e04 	movi	r4,120
     5f4:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     5f8:	01800184 	movi	r6,6
     5fc:	014ce404 	movi	r5,13200
     600:	01001e04 	movi	r4,120
     604:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     608:	e03fff15 	stw	zero,-4(fp)
     60c:	00000406 	br	620 <init_camera+0x3a0>
		asm volatile ("nop");
     610:	0001883a 	nop
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     614:	e0bfff17 	ldw	r2,-4(fp)
     618:	10800044 	addi	r2,r2,1
     61c:	e0bfff15 	stw	r2,-4(fp)
     620:	e0ffff17 	ldw	r3,-4(fp)
     624:	008000b4 	movhi	r2,2
     628:	10a1a7c4 	addi	r2,r2,-31073
     62c:	10fff80e 	bge	r2,r3,610 <__alt_data_end+0xff000610>
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     630:	e03fff15 	stw	zero,-4(fp)
     634:	00001806 	br	698 <init_camera+0x418>
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
     638:	00800074 	movhi	r2,1
     63c:	10895304 	addi	r2,r2,9548
     640:	e0ffff17 	ldw	r3,-4(fp)
     644:	18c7883a 	add	r3,r3,r3
     648:	18c7883a 	add	r3,r3,r3
     64c:	10c5883a 	add	r2,r2,r3
     650:	1080000b 	ldhu	r2,0(r2)
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     654:	113fffcc 	andi	r4,r2,65535
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
     658:	00800074 	movhi	r2,1
     65c:	10895304 	addi	r2,r2,9548
     660:	e0ffff17 	ldw	r3,-4(fp)
     664:	18c7883a 	add	r3,r3,r3
     668:	18c7883a 	add	r3,r3,r3
     66c:	10c5883a 	add	r2,r2,r3
     670:	10800084 	addi	r2,r2,2
     674:	1080000b 	ldhu	r2,0(r2)
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     678:	10bfffcc 	andi	r2,r2,65535
     67c:	100d883a 	mov	r6,r2
     680:	200b883a 	mov	r5,r4
     684:	01001e04 	movi	r4,120
     688:	0000e200 	call	e20 <i2c_short_write>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     68c:	e0bfff17 	ldw	r2,-4(fp)
     690:	10800044 	addi	r2,r2,1
     694:	e0bfff15 	stw	r2,-4(fp)
     698:	e0bfff17 	ldw	r2,-4(fp)
     69c:	108012b0 	cmpltui	r2,r2,74
     6a0:	103fe51e 	bne	r2,zero,638 <__alt_data_end+0xff000638>
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     6a4:	e03fff15 	stw	zero,-4(fp)
     6a8:	00000406 	br	6bc <init_camera+0x43c>
		asm volatile ("nop");
     6ac:	0001883a 	nop
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     6b0:	e0bfff17 	ldw	r2,-4(fp)
     6b4:	10800044 	addi	r2,r2,1
     6b8:	e0bfff15 	stw	r2,-4(fp)
     6bc:	e0ffff17 	ldw	r3,-4(fp)
     6c0:	008003f4 	movhi	r2,15
     6c4:	10908fc4 	addi	r2,r2,16959
     6c8:	10fff80e 	bge	r2,r3,6ac <__alt_data_end+0xff0006ac>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     6cc:	01800804 	movi	r6,32
     6d0:	014ccb84 	movi	r5,13102
     6d4:	01001e04 	movi	r4,120
     6d8:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 1000000 ; i++)
     6dc:	e03fff15 	stw	zero,-4(fp)
     6e0:	00000406 	br	6f4 <init_camera+0x474>
		asm volatile ("nop");
     6e4:	0001883a 	nop
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     6e8:	e0bfff17 	ldw	r2,-4(fp)
     6ec:	10800044 	addi	r2,r2,1
     6f0:	e0bfff15 	stw	r2,-4(fp)
     6f4:	e0ffff17 	ldw	r3,-4(fp)
     6f8:	008003f4 	movhi	r2,15
     6fc:	10908fc4 	addi	r2,r2,16959
     700:	10fff80e 	bge	r2,r3,6e4 <__alt_data_end+0xff0006e4>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     704:	01800884 	movi	r6,34
     708:	014d0104 	movi	r5,13316
     70c:	01001e04 	movi	r4,120
     710:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 1000000 ; i++)
     714:	e03fff15 	stw	zero,-4(fp)
     718:	00000406 	br	72c <init_camera+0x4ac>
		asm volatile ("nop");
     71c:	0001883a 	nop
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     720:	e0bfff17 	ldw	r2,-4(fp)
     724:	10800044 	addi	r2,r2,1
     728:	e0bfff15 	stw	r2,-4(fp)
     72c:	e0ffff17 	ldw	r3,-4(fp)
     730:	008003f4 	movhi	r2,15
     734:	10908fc4 	addi	r2,r2,16959
     738:	10fff80e 	bge	r2,r3,71c <__alt_data_end+0xff00071c>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     73c:	018009c4 	movi	r6,39
     740:	014c1004 	movi	r5,12352
     744:	01001e04 	movi	r4,120
     748:	0000e200 	call	e20 <i2c_short_write>
}
     74c:	0001883a 	nop
     750:	e037883a 	mov	sp,fp
     754:	dfc00117 	ldw	ra,4(sp)
     758:	df000017 	ldw	fp,0(sp)
     75c:	dec00204 	addi	sp,sp,8
     760:	f800283a 	ret

00000764 <cam_get_xsize>:

unsigned short cam_get_xsize(){
     764:	defffe04 	addi	sp,sp,-8
     768:	df000115 	stw	fp,4(sp)
     76c:	df000104 	addi	fp,sp,4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     770:	00804034 	movhi	r2,256
     774:	10841304 	addi	r2,r2,4172
     778:	10800023 	ldbuio	r2,0(r2)
     77c:	10803fcc 	andi	r2,r2,255
     780:	e0bfff05 	stb	r2,-4(fp)
	} while ((control_reg&CAM_Profile_valid)==0);
     784:	e0bfff03 	ldbu	r2,-4(fp)
     788:	1080010c 	andi	r2,r2,4
     78c:	103ff826 	beq	r2,zero,770 <__alt_data_end+0xff000770>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     790:	00804034 	movhi	r2,256
     794:	10841004 	addi	r2,r2,4160
     798:	1080002b 	ldhuio	r2,0(r2)
     79c:	10bfffcc 	andi	r2,r2,65535
}
     7a0:	e037883a 	mov	sp,fp
     7a4:	df000017 	ldw	fp,0(sp)
     7a8:	dec00104 	addi	sp,sp,4
     7ac:	f800283a 	ret

000007b0 <cam_get_ysize>:

unsigned short cam_get_ysize() {
     7b0:	defffe04 	addi	sp,sp,-8
     7b4:	df000115 	stw	fp,4(sp)
     7b8:	df000104 	addi	fp,sp,4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     7bc:	00804034 	movhi	r2,256
     7c0:	10841304 	addi	r2,r2,4172
     7c4:	10800023 	ldbuio	r2,0(r2)
     7c8:	10803fcc 	andi	r2,r2,255
     7cc:	e0bfff05 	stb	r2,-4(fp)
	} while ((control_reg&CAM_Profile_valid)==0);
     7d0:	e0bfff03 	ldbu	r2,-4(fp)
     7d4:	1080010c 	andi	r2,r2,4
     7d8:	103ff826 	beq	r2,zero,7bc <__alt_data_end+0xff0007bc>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     7dc:	00804034 	movhi	r2,256
     7e0:	10841104 	addi	r2,r2,4164
     7e4:	1080002b 	ldhuio	r2,0(r2)
     7e8:	10bfffcc 	andi	r2,r2,65535
}
     7ec:	e037883a 	mov	sp,fp
     7f0:	df000017 	ldw	fp,0(sp)
     7f4:	dec00104 	addi	sp,sp,4
     7f8:	f800283a 	ret

000007fc <cam_get_profiling>:

void cam_get_profiling() {
     7fc:	defffd04 	addi	sp,sp,-12
     800:	dfc00215 	stw	ra,8(sp)
     804:	df000115 	stw	fp,4(sp)
     808:	df000104 	addi	fp,sp,4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     80c:	00804034 	movhi	r2,256
     810:	10841304 	addi	r2,r2,4172
     814:	10800023 	ldbuio	r2,0(r2)
     818:	10803fcc 	andi	r2,r2,255
     81c:	e0bfff05 	stb	r2,-4(fp)
	} while ((control_reg&CAM_Profile_valid)==0);
     820:	e0bfff03 	ldbu	r2,-4(fp)
     824:	1080010c 	andi	r2,r2,4
     828:	103ff826 	beq	r2,zero,80c <__alt_data_end+0xff00080c>
	printf("Nr. of bytes each line    : %d\n",
     82c:	00804034 	movhi	r2,256
     830:	10841004 	addi	r2,r2,4160
     834:	1080002b 	ldhuio	r2,0(r2)
     838:	10bfffcc 	andi	r2,r2,65535
     83c:	100b883a 	mov	r5,r2
     840:	01000074 	movhi	r4,1
     844:	21099d04 	addi	r4,r4,9844
     848:	00039840 	call	3984 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     84c:	00804034 	movhi	r2,256
     850:	10841104 	addi	r2,r2,4164
     854:	1080002b 	ldhuio	r2,0(r2)
     858:	10bfffcc 	andi	r2,r2,65535
     85c:	100b883a 	mov	r5,r2
     860:	01000074 	movhi	r4,1
     864:	2109a504 	addi	r4,r4,9876
     868:	00039840 	call	3984 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     86c:	00804034 	movhi	r2,256
     870:	10841204 	addi	r2,r2,4168
     874:	1080002b 	ldhuio	r2,0(r2)
     878:	10bfffcc 	andi	r2,r2,65535
     87c:	100b883a 	mov	r5,r2
     880:	01000074 	movhi	r4,1
     884:	2109ad04 	addi	r4,r4,9908
     888:	00039840 	call	3984 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     88c:	0001883a 	nop
     890:	e037883a 	mov	sp,fp
     894:	dfc00117 	ldw	ra,4(sp)
     898:	df000017 	ldw	fp,0(sp)
     89c:	dec00204 	addi	sp,sp,8
     8a0:	f800283a 	ret

000008a4 <cam_set_image_pointer>:

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
     8a4:	defffd04 	addi	sp,sp,-12
     8a8:	df000215 	stw	fp,8(sp)
     8ac:	df000204 	addi	fp,sp,8
     8b0:	2005883a 	mov	r2,r4
     8b4:	e17fff15 	stw	r5,-4(fp)
     8b8:	e0bffe05 	stb	r2,-8(fp)
	switch (pointer_id) {
     8bc:	e0bffe07 	ldb	r2,-8(fp)
     8c0:	10c00060 	cmpeqi	r3,r2,1
     8c4:	18000e1e 	bne	r3,zero,900 <cam_set_image_pointer+0x5c>
     8c8:	10c00088 	cmpgei	r3,r2,2
     8cc:	1800021e 	bne	r3,zero,8d8 <cam_set_image_pointer+0x34>
     8d0:	10000626 	beq	r2,zero,8ec <cam_set_image_pointer+0x48>
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
                break;
	   default: return;
     8d4:	00001906 	br	93c <cam_set_image_pointer+0x98>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     8d8:	10c000a0 	cmpeqi	r3,r2,2
     8dc:	18000d1e 	bne	r3,zero,914 <cam_set_image_pointer+0x70>
     8e0:	108000e0 	cmpeqi	r2,r2,3
     8e4:	1000101e 	bne	r2,zero,928 <cam_set_image_pointer+0x84>
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
                break;
	   default: return;
     8e8:	00001406 	br	93c <cam_set_image_pointer+0x98>
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     8ec:	e0ffff17 	ldw	r3,-4(fp)
     8f0:	00804034 	movhi	r2,256
     8f4:	10841404 	addi	r2,r2,4176
     8f8:	10c00035 	stwio	r3,0(r2)
	            break;
     8fc:	00000f06 	br	93c <cam_set_image_pointer+0x98>
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     900:	e0ffff17 	ldw	r3,-4(fp)
     904:	00804034 	movhi	r2,256
     908:	10841504 	addi	r2,r2,4180
     90c:	10c00035 	stwio	r3,0(r2)
                break;
     910:	00000a06 	br	93c <cam_set_image_pointer+0x98>
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     914:	e0ffff17 	ldw	r3,-4(fp)
     918:	00804034 	movhi	r2,256
     91c:	10841604 	addi	r2,r2,4184
     920:	10c00035 	stwio	r3,0(r2)
                break;
     924:	00000506 	br	93c <cam_set_image_pointer+0x98>
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     928:	e0ffff17 	ldw	r3,-4(fp)
     92c:	00804034 	movhi	r2,256
     930:	10841704 	addi	r2,r2,4188
     934:	10c00035 	stwio	r3,0(r2)
                break;
     938:	0001883a 	nop
	   default: return;
	}
}
     93c:	e037883a 	mov	sp,fp
     940:	df000017 	ldw	fp,0(sp)
     944:	dec00104 	addi	sp,sp,4
     948:	f800283a 	ret

0000094c <current_image_valid>:

short current_image_valid() {
     94c:	defffe04 	addi	sp,sp,-8
     950:	df000115 	stw	fp,4(sp)
     954:	df000104 	addi	fp,sp,4
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     958:	00804034 	movhi	r2,256
     95c:	10841304 	addi	r2,r2,4172
     960:	1080002b 	ldhuio	r2,0(r2)
     964:	10bfffcc 	andi	r2,r2,65535
     968:	e0bfff0d 	sth	r2,-4(fp)
	return (value&CAM_Current_Image_Valid);
     96c:	e0bfff0b 	ldhu	r2,-4(fp)
     970:	1080800c 	andi	r2,r2,512
}
     974:	e037883a 	mov	sp,fp
     978:	df000017 	ldw	fp,0(sp)
     97c:	dec00104 	addi	sp,sp,4
     980:	f800283a 	ret

00000984 <current_image_pointer>:

void *current_image_pointer() {
     984:	deffff04 	addi	sp,sp,-4
     988:	df000015 	stw	fp,0(sp)
     98c:	d839883a 	mov	fp,sp
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     990:	00804034 	movhi	r2,256
     994:	10841404 	addi	r2,r2,4176
     998:	10800037 	ldwio	r2,0(r2)
}
     99c:	e037883a 	mov	sp,fp
     9a0:	df000017 	ldw	fp,0(sp)
     9a4:	dec00104 	addi	sp,sp,4
     9a8:	f800283a 	ret

000009ac <take_picture_blocking>:

void take_picture_blocking() {
     9ac:	defffe04 	addi	sp,sp,-8
     9b0:	df000115 	stw	fp,4(sp)
     9b4:	df000104 	addi	fp,sp,4
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     9b8:	00c00204 	movi	r3,8
     9bc:	00804034 	movhi	r2,256
     9c0:	10841304 	addi	r2,r2,4172
     9c4:	10c0002d 	sthio	r3,0(r2)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     9c8:	00804034 	movhi	r2,256
     9cc:	10841304 	addi	r2,r2,4172
     9d0:	1080002b 	ldhuio	r2,0(r2)
     9d4:	10bfffcc 	andi	r2,r2,65535
     9d8:	e0bfff0d 	sth	r2,-4(fp)
	} while ((value&CAM_Busy)!= 0);
     9dc:	e0bfff0b 	ldhu	r2,-4(fp)
     9e0:	1080020c 	andi	r2,r2,8
     9e4:	103ff81e 	bne	r2,zero,9c8 <__alt_data_end+0xff0009c8>
}
     9e8:	0001883a 	nop
     9ec:	e037883a 	mov	sp,fp
     9f0:	df000017 	ldw	fp,0(sp)
     9f4:	dec00104 	addi	sp,sp,4
     9f8:	f800283a 	ret

000009fc <enable_continues_mode>:

void enable_continues_mode() {
     9fc:	deffff04 	addi	sp,sp,-4
     a00:	df000015 	stw	fp,0(sp)
     a04:	d839883a 	mov	fp,sp
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     a08:	00c00404 	movi	r3,16
     a0c:	00804034 	movhi	r2,256
     a10:	10841304 	addi	r2,r2,4172
     a14:	10c0002d 	sthio	r3,0(r2)
}
     a18:	0001883a 	nop
     a1c:	e037883a 	mov	sp,fp
     a20:	df000017 	ldw	fp,0(sp)
     a24:	dec00104 	addi	sp,sp,4
     a28:	f800283a 	ret

00000a2c <new_image_available>:

char new_image_available() {
     a2c:	defffe04 	addi	sp,sp,-8
     a30:	df000115 	stw	fp,4(sp)
     a34:	df000104 	addi	fp,sp,4
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     a38:	00804034 	movhi	r2,256
     a3c:	10841304 	addi	r2,r2,4172
     a40:	1080002b 	ldhuio	r2,0(r2)
     a44:	10bfffcc 	andi	r2,r2,65535
     a48:	e0bfff0d 	sth	r2,-4(fp)
	if ((value&CAM_IRQ_Generated)!=0) {
     a4c:	e0bfff0b 	ldhu	r2,-4(fp)
     a50:	1080200c 	andi	r2,r2,128
     a54:	10000626 	beq	r2,zero,a70 <new_image_available+0x44>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     a58:	00c04004 	movi	r3,256
     a5c:	00804034 	movhi	r2,256
     a60:	10841304 	addi	r2,r2,4172
     a64:	10c0002d 	sthio	r3,0(r2)
		return 1;
     a68:	00800044 	movi	r2,1
     a6c:	00000106 	br	a74 <new_image_available+0x48>
	} else return 0;
     a70:	0005883a 	mov	r2,zero
}
     a74:	e037883a 	mov	sp,fp
     a78:	df000017 	ldw	fp,0(sp)
     a7c:	dec00104 	addi	sp,sp,4
     a80:	f800283a 	ret

00000a84 <DIPSW_get_value>:
 */

#include <system.h>
#include <io.h>

unsigned char DIPSW_get_value() {
     a84:	deffff04 	addi	sp,sp,-4
     a88:	df000015 	stw	fp,0(sp)
     a8c:	d839883a 	mov	fp,sp
	return IORD_8DIRECT(PIO_0_BASE,0)^0xFF;
     a90:	00804034 	movhi	r2,256
     a94:	10842804 	addi	r2,r2,4256
     a98:	10800023 	ldbuio	r2,0(r2)
     a9c:	10803fcc 	andi	r2,r2,255
     aa0:	0084303a 	nor	r2,zero,r2
}
     aa4:	e037883a 	mov	sp,fp
     aa8:	df000017 	ldw	fp,0(sp)
     aac:	dec00104 	addi	sp,sp,4
     ab0:	f800283a 	ret

00000ab4 <conv_grayscale>:
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
		            int width,
		            int height) {
     ab4:	defff604 	addi	sp,sp,-40
     ab8:	dfc00915 	stw	ra,36(sp)
     abc:	df000815 	stw	fp,32(sp)
     ac0:	df000804 	addi	fp,sp,32
     ac4:	e13ffd15 	stw	r4,-12(fp)
     ac8:	e17ffe15 	stw	r5,-8(fp)
     acc:	e1bfff15 	stw	r6,-4(fp)
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture , rgb;
     ad0:	e0bffd17 	ldw	r2,-12(fp)
     ad4:	e0bffa15 	stw	r2,-24(fp)
	grayscale_width = width;
     ad8:	e0bffe17 	ldw	r2,-8(fp)
     adc:	d0a6cb15 	stw	r2,-25812(gp)
	grayscape_height = height;
     ae0:	e0bfff17 	ldw	r2,-4(fp)
     ae4:	d0a6cc15 	stw	r2,-25808(gp)
	if (grayscale_array != NULL)
     ae8:	d0a6cd17 	ldw	r2,-25804(gp)
     aec:	10000326 	beq	r2,zero,afc <conv_grayscale+0x48>
		free(grayscale_array);
     af0:	d0a6cd17 	ldw	r2,-25804(gp)
     af4:	1009883a 	mov	r4,r2
     af8:	00031340 	call	3134 <free>
	grayscale_array = (unsigned char *) malloc(width*height);
     afc:	e0fffe17 	ldw	r3,-8(fp)
     b00:	e0bfff17 	ldw	r2,-4(fp)
     b04:	1885383a 	mul	r2,r3,r2
     b08:	1009883a 	mov	r4,r2
     b0c:	00031200 	call	3120 <malloc>
     b10:	d0a6cd15 	stw	r2,-25804(gp)
	for (y = 0 ; y < height ; y++) {
     b14:	e03ff915 	stw	zero,-28(fp)
     b18:	00003c06 	br	c0c <conv_grayscale+0x158>
		for (x = 0 ; x < width ; x++) {
     b1c:	e03ff815 	stw	zero,-32(fp)
     b20:	00003406 	br	bf4 <conv_grayscale+0x140>
			rgb = pixels[y*width+x];
     b24:	e0fff917 	ldw	r3,-28(fp)
     b28:	e0bffe17 	ldw	r2,-8(fp)
     b2c:	1887383a 	mul	r3,r3,r2
     b30:	e0bff817 	ldw	r2,-32(fp)
     b34:	1885883a 	add	r2,r3,r2
     b38:	1085883a 	add	r2,r2,r2
     b3c:	1007883a 	mov	r3,r2
     b40:	e0bffa17 	ldw	r2,-24(fp)
     b44:	10c5883a 	add	r2,r2,r3
     b48:	1080000b 	ldhu	r2,0(r2)
     b4c:	e0bffb0d 	sth	r2,-20(fp)
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
     b50:	e0bffb0b 	ldhu	r2,-20(fp)
     b54:	1004d2fa 	srli	r2,r2,11
     b58:	10bfffcc 	andi	r2,r2,65535
     b5c:	100490fa 	slli	r2,r2,3
     b60:	10803fcc 	andi	r2,r2,255
     b64:	10800564 	muli	r2,r2,21
     b68:	e0bffc15 	stw	r2,-16(fp)
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
     b6c:	e0bffb0b 	ldhu	r2,-20(fp)
     b70:	1004d17a 	srli	r2,r2,5
     b74:	10bfffcc 	andi	r2,r2,65535
     b78:	1085883a 	add	r2,r2,r2
     b7c:	1085883a 	add	r2,r2,r2
     b80:	10803fcc 	andi	r2,r2,255
     b84:	10801224 	muli	r2,r2,72
     b88:	e0fffc17 	ldw	r3,-16(fp)
     b8c:	1885883a 	add	r2,r3,r2
     b90:	e0bffc15 	stw	r2,-16(fp)
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
     b94:	e0bffb0b 	ldhu	r2,-20(fp)
     b98:	100490fa 	slli	r2,r2,3
     b9c:	10803fcc 	andi	r2,r2,255
     ba0:	108001e4 	muli	r2,r2,7
     ba4:	e0fffc17 	ldw	r3,-16(fp)
     ba8:	1885883a 	add	r2,r3,r2
     bac:	e0bffc15 	stw	r2,-16(fp)
			gray /= 100; //>> 6; // do a decalage 2^6=64 depend result /= 100
     bb0:	e0bffc17 	ldw	r2,-16(fp)
     bb4:	01401904 	movi	r5,100
     bb8:	1009883a 	mov	r4,r2
     bbc:	0002f6c0 	call	2f6c <__divsi3>
     bc0:	e0bffc15 	stw	r2,-16(fp)
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     bc4:	d0a6cd17 	ldw	r2,-25804(gp)
     bc8:	e13ff917 	ldw	r4,-28(fp)
     bcc:	e0fffe17 	ldw	r3,-8(fp)
     bd0:	20c9383a 	mul	r4,r4,r3
     bd4:	e0fff817 	ldw	r3,-32(fp)
     bd8:	20c7883a 	add	r3,r4,r3
     bdc:	10c5883a 	add	r2,r2,r3
     be0:	e0fffc03 	ldbu	r3,-16(fp)
     be4:	10c00025 	stbio	r3,0(r2)
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
     be8:	e0bff817 	ldw	r2,-32(fp)
     bec:	10800044 	addi	r2,r2,1
     bf0:	e0bff815 	stw	r2,-32(fp)
     bf4:	e0fff817 	ldw	r3,-32(fp)
     bf8:	e0bffe17 	ldw	r2,-8(fp)
     bfc:	18bfc916 	blt	r3,r2,b24 <__alt_data_end+0xff000b24>
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
     c00:	e0bff917 	ldw	r2,-28(fp)
     c04:	10800044 	addi	r2,r2,1
     c08:	e0bff915 	stw	r2,-28(fp)
     c0c:	e0fff917 	ldw	r3,-28(fp)
     c10:	e0bfff17 	ldw	r2,-4(fp)
     c14:	18bfc116 	blt	r3,r2,b1c <__alt_data_end+0xff000b1c>
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray /= 100; //>> 6; // do a decalage 2^6=64 depend result /= 100
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
		}
	}
}
     c18:	0001883a 	nop
     c1c:	e037883a 	mov	sp,fp
     c20:	dfc00117 	ldw	ra,4(sp)
     c24:	df000017 	ldw	fp,0(sp)
     c28:	dec00204 	addi	sp,sp,8
     c2c:	f800283a 	ret

00000c30 <get_grayscale_width>:


int get_grayscale_width() {
     c30:	deffff04 	addi	sp,sp,-4
     c34:	df000015 	stw	fp,0(sp)
     c38:	d839883a 	mov	fp,sp
	return grayscale_width;
     c3c:	d0a6cb17 	ldw	r2,-25812(gp)
}
     c40:	e037883a 	mov	sp,fp
     c44:	df000017 	ldw	fp,0(sp)
     c48:	dec00104 	addi	sp,sp,4
     c4c:	f800283a 	ret

00000c50 <get_grayscale_height>:

int get_grayscale_height() {
     c50:	deffff04 	addi	sp,sp,-4
     c54:	df000015 	stw	fp,0(sp)
     c58:	d839883a 	mov	fp,sp
	return grayscape_height;
     c5c:	d0a6cc17 	ldw	r2,-25808(gp)
}
     c60:	e037883a 	mov	sp,fp
     c64:	df000017 	ldw	fp,0(sp)
     c68:	dec00104 	addi	sp,sp,4
     c6c:	f800283a 	ret

00000c70 <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
     c70:	deffff04 	addi	sp,sp,-4
     c74:	df000015 	stw	fp,0(sp)
     c78:	d839883a 	mov	fp,sp
	return grayscale_array;
     c7c:	d0a6cd17 	ldw	r2,-25804(gp)
}
     c80:	e037883a 	mov	sp,fp
     c84:	df000017 	ldw	fp,0(sp)
     c88:	dec00104 	addi	sp,sp,4
     c8c:	f800283a 	ret

00000c90 <i2c_busy_wait>:

#include <system.h>
#include <io.h>
#include "i2c.h"

void i2c_busy_wait() {
     c90:	defffe04 	addi	sp,sp,-8
     c94:	df000115 	stw	fp,4(sp)
     c98:	df000104 	addi	fp,sp,4
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     c9c:	00804034 	movhi	r2,256
     ca0:	10842704 	addi	r2,r2,4252
     ca4:	10800037 	ldwio	r2,0(r2)
     ca8:	e0bfff15 	stw	r2,-4(fp)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     cac:	e0bfff17 	ldw	r2,-4(fp)
     cb0:	108000cc 	andi	r2,r2,3
     cb4:	103ff91e 	bne	r2,zero,c9c <__alt_data_end+0xff000c9c>
}
     cb8:	0001883a 	nop
     cbc:	e037883a 	mov	sp,fp
     cc0:	df000017 	ldw	fp,0(sp)
     cc4:	dec00104 	addi	sp,sp,4
     cc8:	f800283a 	ret

00000ccc <i2c_auto_detect>:

void i2c_auto_detect() {
     ccc:	defffb04 	addi	sp,sp,-20
     cd0:	dfc00415 	stw	ra,16(sp)
     cd4:	df000315 	stw	fp,12(sp)
     cd8:	df000304 	addi	fp,sp,12
	int nrdef,loop,value;
    i2c_busy_wait();
     cdc:	0000c900 	call	c90 <i2c_busy_wait>
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     ce0:	00c00104 	movi	r3,4
     ce4:	00804034 	movhi	r2,256
     ce8:	10842704 	addi	r2,r2,4252
     cec:	10c00035 	stwio	r3,0(r2)
    i2c_busy_wait();
     cf0:	0000c900 	call	c90 <i2c_busy_wait>
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     cf4:	00804034 	movhi	r2,256
     cf8:	10842504 	addi	r2,r2,4244
     cfc:	10800037 	ldwio	r2,0(r2)
     d00:	e0bffe15 	stw	r2,-8(fp)
    printf("Number of I2C devices detected: %d\n",nrdef);
     d04:	e17ffe17 	ldw	r5,-8(fp)
     d08:	01000074 	movhi	r4,1
     d0c:	2109b504 	addi	r4,r4,9940
     d10:	00039840 	call	3984 <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     d14:	e03ffd15 	stw	zero,-12(fp)
     d18:	00001006 	br	d5c <i2c_auto_detect+0x90>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     d1c:	00804034 	movhi	r2,256
     d20:	10842404 	addi	r2,r2,4240
     d24:	e0fffd17 	ldw	r3,-12(fp)
     d28:	10c00035 	stwio	r3,0(r2)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
     d2c:	00804034 	movhi	r2,256
     d30:	10842404 	addi	r2,r2,4240
     d34:	10800037 	ldwio	r2,0(r2)
     d38:	e0bfff15 	stw	r2,-4(fp)
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     d3c:	e1bfff17 	ldw	r6,-4(fp)
     d40:	e17ffd17 	ldw	r5,-12(fp)
     d44:	01000074 	movhi	r4,1
     d48:	2109be04 	addi	r4,r4,9976
     d4c:	00039840 	call	3984 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     d50:	e0bffd17 	ldw	r2,-12(fp)
     d54:	10800044 	addi	r2,r2,1
     d58:	e0bffd15 	stw	r2,-12(fp)
     d5c:	e0fffd17 	ldw	r3,-12(fp)
     d60:	e0bffe17 	ldw	r2,-8(fp)
     d64:	18bfed16 	blt	r3,r2,d1c <__alt_data_end+0xff000d1c>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     d68:	0001883a 	nop
     d6c:	e037883a 	mov	sp,fp
     d70:	dfc00117 	ldw	ra,4(sp)
     d74:	df000017 	ldw	fp,0(sp)
     d78:	dec00204 	addi	sp,sp,8
     d7c:	f800283a 	ret

00000d80 <i2c_short_read>:

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address) {
     d80:	defffc04 	addi	sp,sp,-16
     d84:	dfc00315 	stw	ra,12(sp)
     d88:	df000215 	stw	fp,8(sp)
     d8c:	df000204 	addi	fp,sp,8
     d90:	2007883a 	mov	r3,r4
     d94:	2805883a 	mov	r2,r5
     d98:	e0fffe05 	stb	r3,-8(fp)
     d9c:	e0bfff0d 	sth	r2,-4(fp)
	i2c_busy_wait();
     da0:	0000c900 	call	c90 <i2c_busy_wait>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     da4:	e0fffe03 	ldbu	r3,-8(fp)
     da8:	00804034 	movhi	r2,256
     dac:	10842404 	addi	r2,r2,4240
     db0:	10c00025 	stbio	r3,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     db4:	e0ffff0b 	ldhu	r3,-4(fp)
     db8:	00804034 	movhi	r2,256
     dbc:	10842504 	addi	r2,r2,4244
     dc0:	10c0002d 	sthio	r3,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     dc4:	00c010c4 	movi	r3,67
     dc8:	00804034 	movhi	r2,256
     dcc:	10842704 	addi	r2,r2,4252
     dd0:	10c00025 	stbio	r3,0(r2)
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
     dd4:	0000c900 	call	c90 <i2c_busy_wait>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     dd8:	e0bffe03 	ldbu	r2,-8(fp)
     ddc:	10c00044 	addi	r3,r2,1
     de0:	00804034 	movhi	r2,256
     de4:	10842404 	addi	r2,r2,4240
     de8:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     dec:	00c00884 	movi	r3,34
     df0:	00804034 	movhi	r2,256
     df4:	10842704 	addi	r2,r2,4252
     df8:	10c00025 	stbio	r3,0(r2)
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
     dfc:	0000c900 	call	c90 <i2c_busy_wait>
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     e00:	00804034 	movhi	r2,256
     e04:	10842604 	addi	r2,r2,4248
     e08:	10800037 	ldwio	r2,0(r2)
}
     e0c:	e037883a 	mov	sp,fp
     e10:	dfc00117 	ldw	ra,4(sp)
     e14:	df000017 	ldw	fp,0(sp)
     e18:	dec00204 	addi	sp,sp,8
     e1c:	f800283a 	ret

00000e20 <i2c_short_write>:

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data) {
     e20:	defffb04 	addi	sp,sp,-20
     e24:	dfc00415 	stw	ra,16(sp)
     e28:	df000315 	stw	fp,12(sp)
     e2c:	df000304 	addi	fp,sp,12
     e30:	2807883a 	mov	r3,r5
     e34:	3005883a 	mov	r2,r6
     e38:	e13ffd05 	stb	r4,-12(fp)
     e3c:	e0fffe0d 	sth	r3,-8(fp)
     e40:	e0bfff0d 	sth	r2,-4(fp)
	i2c_busy_wait();
     e44:	0000c900 	call	c90 <i2c_busy_wait>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     e48:	e0fffd03 	ldbu	r3,-12(fp)
     e4c:	00804034 	movhi	r2,256
     e50:	10842404 	addi	r2,r2,4240
     e54:	10c00025 	stbio	r3,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     e58:	e0fffe0b 	ldhu	r3,-8(fp)
     e5c:	00804034 	movhi	r2,256
     e60:	10842504 	addi	r2,r2,4244
     e64:	10c0002d 	sthio	r3,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
     e68:	e0ffff0b 	ldhu	r3,-4(fp)
     e6c:	00804034 	movhi	r2,256
     e70:	10842604 	addi	r2,r2,4248
     e74:	10c0002d 	sthio	r3,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     e78:	00c01084 	movi	r3,66
     e7c:	00804034 	movhi	r2,256
     e80:	10842704 	addi	r2,r2,4252
     e84:	10c00025 	stbio	r3,0(r2)
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
     e88:	0000c900 	call	c90 <i2c_busy_wait>
}
     e8c:	0001883a 	nop
     e90:	e037883a 	mov	sp,fp
     e94:	dfc00117 	ldw	ra,4(sp)
     e98:	df000017 	ldw	fp,0(sp)
     e9c:	dec00204 	addi	sp,sp,8
     ea0:	f800283a 	ret

00000ea4 <LCD_Write_Command>:
#include "lcd_simple.h"

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
     ea4:	defffd04 	addi	sp,sp,-12
     ea8:	dfc00215 	stw	ra,8(sp)
     eac:	df000115 	stw	fp,4(sp)
     eb0:	df000104 	addi	fp,sp,4
     eb4:	e13fff15 	stw	r4,-4(fp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     eb8:	00804034 	movhi	r2,256
     ebc:	10841804 	addi	r2,r2,4192
     ec0:	e0ffff0b 	ldhu	r3,-4(fp)
     ec4:	10c0002d 	sthio	r3,0(r2)
	usleep(10);
     ec8:	01000284 	movi	r4,10
     ecc:	00100c40 	call	100c4 <usleep>
}
     ed0:	0001883a 	nop
     ed4:	e037883a 	mov	sp,fp
     ed8:	dfc00117 	ldw	ra,4(sp)
     edc:	df000017 	ldw	fp,0(sp)
     ee0:	dec00204 	addi	sp,sp,8
     ee4:	f800283a 	ret

00000ee8 <LCD_Write_Data>:

void LCD_Write_Data(int data) {
     ee8:	defffd04 	addi	sp,sp,-12
     eec:	dfc00215 	stw	ra,8(sp)
     ef0:	df000115 	stw	fp,4(sp)
     ef4:	df000104 	addi	fp,sp,4
     ef8:	e13fff15 	stw	r4,-4(fp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     efc:	00804034 	movhi	r2,256
     f00:	10841904 	addi	r2,r2,4196
     f04:	e0ffff0b 	ldhu	r3,-4(fp)
     f08:	10c0002d 	sthio	r3,0(r2)
	usleep(10);
     f0c:	01000284 	movi	r4,10
     f10:	00100c40 	call	100c4 <usleep>
}
     f14:	0001883a 	nop
     f18:	e037883a 	mov	sp,fp
     f1c:	dfc00117 	ldw	ra,4(sp)
     f20:	df000017 	ldw	fp,0(sp)
     f24:	dec00204 	addi	sp,sp,8
     f28:	f800283a 	ret

00000f2c <init_LCD>:


void init_LCD() {
     f2c:	defffe04 	addi	sp,sp,-8
     f30:	dfc00115 	stw	ra,4(sp)
     f34:	df000015 	stw	fp,0(sp)
     f38:	d839883a 	mov	fp,sp
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f3c:	00c00084 	movi	r3,2
     f40:	00804034 	movhi	r2,256
     f44:	10841a04 	addi	r2,r2,4200
     f48:	10c0002d 	sthio	r3,0(r2)
			         LCD_Sixteen_Bit|LCD_Reset|
			         LCD_RGB565_Mode|LCD_Color_Image); // Set 16 bit transfer mode and reset
	LCD_Write_Command(0x0028); 	//display OFF
     f4c:	01000a04 	movi	r4,40
     f50:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Command(0x0011); 	//exit SLEEP mode
     f54:	01000444 	movi	r4,17
     f58:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
     f5c:	0009883a 	mov	r4,zero
     f60:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00CB); 	//Power Control A
     f64:	010032c4 	movi	r4,203
     f68:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0039); 	//always 0x39
     f6c:	01000e44 	movi	r4,57
     f70:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x002C); 	//always 0x2C
     f74:	01000b04 	movi	r4,44
     f78:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0000); 	//always 0x00
     f7c:	0009883a 	mov	r4,zero
     f80:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0034); 	//Vcore = 1.6V
     f84:	01000d04 	movi	r4,52
     f88:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0002); 	//DDVDH = 5.6V
     f8c:	01000084 	movi	r4,2
     f90:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00CF); 	//Power Control B
     f94:	010033c4 	movi	r4,207
     f98:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0000); 	//always 0x00
     f9c:	0009883a 	mov	r4,zero
     fa0:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0081); 	//PCEQ off
     fa4:	01002044 	movi	r4,129
     fa8:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0030); 	//ESD protection
     fac:	01000c04 	movi	r4,48
     fb0:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00E8); 	//Driver timing control A
     fb4:	01003a04 	movi	r4,232
     fb8:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0085); 	//non - overlap
     fbc:	01002144 	movi	r4,133
     fc0:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0001); 	//EQ timing
     fc4:	01000044 	movi	r4,1
     fc8:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0079); 	//Pre-chargetiming
     fcc:	01001e44 	movi	r4,121
     fd0:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Command(0x00EA); 	//Driver timing control B
     fd4:	01003a84 	movi	r4,234
     fd8:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0000);		//Gate driver timing
     fdc:	0009883a 	mov	r4,zero
     fe0:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0000);		//always 0x00
     fe4:	0009883a 	mov	r4,zero
     fe8:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0064);		//soft start 
     fec:	01001904 	movi	r4,100
     ff0:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0003);		//power on sequence 
     ff4:	010000c4 	movi	r4,3
     ff8:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0012);		//power on sequence 
     ffc:	01000484 	movi	r4,18
    1000:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0081);		//DDVDH enhance on 
    1004:	01002044 	movi	r4,129
    1008:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00F7); 	//Pump ratio control 
    100c:	01003dc4 	movi	r4,247
    1010:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0020); 	//DDVDH=2xVCI 
    1014:	01000804 	movi	r4,32
    1018:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00C0);	//power control 1 
    101c:	01003004 	movi	r4,192
    1020:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0026);
    1024:	01000984 	movi	r4,38
    1028:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0004); 	//second parameter for ILI9340 (ignored by ILI9341) 
    102c:	01000104 	movi	r4,4
    1030:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00C1); 	//power control 2 
    1034:	01003044 	movi	r4,193
    1038:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0011);
    103c:	01000444 	movi	r4,17
    1040:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00C5); 	//VCOM control 1 
    1044:	01003144 	movi	r4,197
    1048:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0035);
    104c:	01000d44 	movi	r4,53
    1050:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x003E);
    1054:	01000f84 	movi	r4,62
    1058:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00C7); 	//VCOM control 2 
    105c:	010031c4 	movi	r4,199
    1060:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x00BE);
    1064:	01002f84 	movi	r4,190
    1068:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00B1); 	//frame rate control 
    106c:	01002c44 	movi	r4,177
    1070:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
    1074:	0009883a 	mov	r4,zero
    1078:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0010);
    107c:	01000404 	movi	r4,16
    1080:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x003A);	//pixel format = 16 bit per pixel 
    1084:	01000e84 	movi	r4,58
    1088:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0055);
    108c:	01001544 	movi	r4,85
    1090:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00B6); 	//display function control 
    1094:	01002d84 	movi	r4,182
    1098:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x000A);
    109c:	01000284 	movi	r4,10
    10a0:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x00A2);
    10a4:	01002884 	movi	r4,162
    10a8:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00F2); 	//3G Gamma control 
    10ac:	01003c84 	movi	r4,242
    10b0:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0002);	 	//off 
    10b4:	01000084 	movi	r4,2
    10b8:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x0026); 	//Gamma curve 3 
    10bc:	01000984 	movi	r4,38
    10c0:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0001);
    10c4:	01000044 	movi	r4,1
    10c8:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x0036); 	//memory access control = BGR 
    10cc:	01000d84 	movi	r4,54
    10d0:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
    10d4:	0009883a 	mov	r4,zero
    10d8:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x002A); 	//column address set 
    10dc:	01000a84 	movi	r4,42
    10e0:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
    10e4:	0009883a 	mov	r4,zero
    10e8:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0000);		//start 0x0000 
    10ec:	0009883a 	mov	r4,zero
    10f0:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0000);
    10f4:	0009883a 	mov	r4,zero
    10f8:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x00EF);		//end 0x00EF 
    10fc:	01003bc4 	movi	r4,239
    1100:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x002B);	//page address set 
    1104:	01000ac4 	movi	r4,43
    1108:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
    110c:	0009883a 	mov	r4,zero
    1110:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0000);		//start 0x0000 
    1114:	0009883a 	mov	r4,zero
    1118:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0001);
    111c:	01000044 	movi	r4,1
    1120:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x003F);		//end 0x013F 
    1124:	01000fc4 	movi	r4,63
    1128:	0000ee80 	call	ee8 <LCD_Write_Data>
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
    112c:	00c03c04 	movi	r3,240
    1130:	00804034 	movhi	r2,256
    1134:	10841d04 	addi	r2,r2,4212
    1138:	10c00035 	stwio	r3,0(r2)
	LCD_width = 240;
    113c:	00803c04 	movi	r2,240
    1140:	d0a6ce8d 	sth	r2,-25798(gp)
	LCD_height = 320;
    1144:	00805004 	movi	r2,320
    1148:	d0a6ce0d 	sth	r2,-25800(gp)


	LCD_Write_Command(0x0029);
    114c:	01000a44 	movi	r4,41
    1150:	0000ea40 	call	ea4 <LCD_Write_Command>

}
    1154:	0001883a 	nop
    1158:	e037883a 	mov	sp,fp
    115c:	dfc00117 	ldw	ra,4(sp)
    1160:	df000017 	ldw	fp,0(sp)
    1164:	dec00204 	addi	sp,sp,8
    1168:	f800283a 	ret

0000116c <transfer_LCD_no_dma>:

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
    116c:	defff904 	addi	sp,sp,-28
    1170:	dfc00615 	stw	ra,24(sp)
    1174:	df000515 	stw	fp,20(sp)
    1178:	df000504 	addi	fp,sp,20
    117c:	e13ffd15 	stw	r4,-12(fp)
    1180:	e17ffe15 	stw	r5,-8(fp)
    1184:	e1bfff15 	stw	r6,-4(fp)
	unsigned short *data_array = (unsigned short *)array;
    1188:	e0bffd17 	ldw	r2,-12(fp)
    118c:	e0bffc15 	stw	r2,-16(fp)
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
    1190:	00804034 	movhi	r2,256
    1194:	10841e04 	addi	r2,r2,4216
    1198:	e0fffe17 	ldw	r3,-8(fp)
    119c:	10c00035 	stwio	r3,0(r2)
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
    11a0:	01000b04 	movi	r4,44
    11a4:	0000ea40 	call	ea4 <LCD_Write_Command>
	for (pixels = 0 ; pixels < width*height ; pixels++)
    11a8:	e03ffb15 	stw	zero,-20(fp)
    11ac:	00000c06 	br	11e0 <transfer_LCD_no_dma+0x74>
		LCD_Write_Data(data_array[pixels]);
    11b0:	e0bffb17 	ldw	r2,-20(fp)
    11b4:	1085883a 	add	r2,r2,r2
    11b8:	1007883a 	mov	r3,r2
    11bc:	e0bffc17 	ldw	r2,-16(fp)
    11c0:	10c5883a 	add	r2,r2,r3
    11c4:	1080000b 	ldhu	r2,0(r2)
    11c8:	10bfffcc 	andi	r2,r2,65535
    11cc:	1009883a 	mov	r4,r2
    11d0:	0000ee80 	call	ee8 <LCD_Write_Data>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
    11d4:	e0bffb17 	ldw	r2,-20(fp)
    11d8:	10800044 	addi	r2,r2,1
    11dc:	e0bffb15 	stw	r2,-20(fp)
    11e0:	e0fffe17 	ldw	r3,-8(fp)
    11e4:	e0bfff17 	ldw	r2,-4(fp)
    11e8:	1885383a 	mul	r2,r3,r2
    11ec:	1007883a 	mov	r3,r2
    11f0:	e0bffb17 	ldw	r2,-20(fp)
    11f4:	10ffee36 	bltu	r2,r3,11b0 <__alt_data_end+0xff0011b0>
		LCD_Write_Data(data_array[pixels]);
}
    11f8:	0001883a 	nop
    11fc:	e037883a 	mov	sp,fp
    1200:	dfc00117 	ldw	ra,4(sp)
    1204:	df000017 	ldw	fp,0(sp)
    1208:	dec00204 	addi	sp,sp,8
    120c:	f800283a 	ret

00001210 <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
    1210:	defffa04 	addi	sp,sp,-24
    1214:	df000515 	stw	fp,20(sp)
    1218:	df000504 	addi	fp,sp,20
    121c:	e13ffc15 	stw	r4,-16(fp)
    1220:	e17ffd15 	stw	r5,-12(fp)
    1224:	e1bffe15 	stw	r6,-8(fp)
    1228:	3805883a 	mov	r2,r7
    122c:	e0bfff05 	stb	r2,-4(fp)
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
    1230:	d0a6ce0b 	ldhu	r2,-25800(gp)
    1234:	10bfffcc 	andi	r2,r2,65535
    1238:	e0fffe17 	ldw	r3,-8(fp)
    123c:	1880010e 	bge	r3,r2,1244 <transfer_LCD_with_dma+0x34>
    1240:	1805883a 	mov	r2,r3
    1244:	e0bffb0d 	sth	r2,-20(fp)
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
    1248:	d0a6ce8b 	ldhu	r2,-25798(gp)
    124c:	10bfffcc 	andi	r2,r2,65535
    1250:	e0fffd17 	ldw	r3,-12(fp)
    1254:	1880010e 	bge	r3,r2,125c <transfer_LCD_with_dma+0x4c>
    1258:	1805883a 	mov	r2,r3
    125c:	e0bffb8d 	sth	r2,-18(fp)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
    1260:	00804034 	movhi	r2,256
    1264:	10841e04 	addi	r2,r2,4216
    1268:	e0fffd17 	ldw	r3,-12(fp)
    126c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
    1270:	e0fffc17 	ldw	r3,-16(fp)
    1274:	00804034 	movhi	r2,256
    1278:	10841b04 	addi	r2,r2,4204
    127c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
    1280:	e0fffb8b 	ldhu	r3,-18(fp)
    1284:	e0bffb0b 	ldhu	r2,-20(fp)
    1288:	1887383a 	mul	r3,r3,r2
    128c:	00804034 	movhi	r2,256
    1290:	10841c04 	addi	r2,r2,4208
    1294:	10c00035 	stwio	r3,0(r2)
	if (grayscale==0)
    1298:	e0bfff07 	ldb	r2,-4(fp)
    129c:	1000051e 	bne	r2,zero,12b4 <transfer_LCD_with_dma+0xa4>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
    12a0:	00c04004 	movi	r3,256
    12a4:	00804034 	movhi	r2,256
    12a8:	10841a04 	addi	r2,r2,4200
    12ac:	10c0002d 	sthio	r3,0(r2)
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_GrayScale_Image);
}
    12b0:	00000406 	br	12c4 <transfer_LCD_with_dma+0xb4>
	if (grayscale==0)
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
    12b4:	00c04404 	movi	r3,272
    12b8:	00804034 	movhi	r2,256
    12bc:	10841a04 	addi	r2,r2,4200
    12c0:	10c0002d 	sthio	r3,0(r2)
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_GrayScale_Image);
}
    12c4:	0001883a 	nop
    12c8:	e037883a 	mov	sp,fp
    12cc:	df000017 	ldw	fp,0(sp)
    12d0:	dec00104 	addi	sp,sp,4
    12d4:	f800283a 	ret

000012d8 <main>:
#include "sys/alt_timestamp.h"
#include "alt_types.h"

// check makefile tohave -O1,-O2,-O3
int main()
{
    12d8:	deffea04 	addi	sp,sp,-88
    12dc:	dfc01515 	stw	ra,84(sp)
    12e0:	df001415 	stw	fp,80(sp)
    12e4:	dc401315 	stw	r17,76(sp)
    12e8:	dc001215 	stw	r16,72(sp)
    12ec:	df001404 	addi	fp,sp,80
  alt_u32 start_sobel_threshold;
  alt_u32 end_sobel_threshold;
  alt_u32 start_sobel_conv_graycale;
  alt_u32 end_sobel_conv_graycale;
  //init time
  alt_timestamp_start();
    12f0:	0010e6c0 	call	10e6c <alt_timestamp_start>
  init_LCD();
    12f4:	0000f2c0 	call	f2c <init_LCD>
  init_camera();
    12f8:	00002800 	call	280 <init_camera>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    12fc:	01000604 	movi	r4,24
    1300:	0002f340 	call	2f34 <vga_set_swap>
  printf("Hello from Nios II!\n");
    1304:	01000074 	movhi	r4,1
    1308:	2109c704 	addi	r4,r4,10012
    130c:	0003a800 	call	3a80 <puts>
  cam_get_profiling();
    1310:	00007fc0 	call	7fc <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1314:	00007640 	call	764 <cam_get_xsize>
    1318:	143fffcc 	andi	r16,r2,65535
    131c:	00007b00 	call	7b0 <cam_get_ysize>
    1320:	10bfffcc 	andi	r2,r2,65535
    1324:	8085383a 	mul	r2,r16,r2
    1328:	1009883a 	mov	r4,r2
    132c:	00031200 	call	3120 <malloc>
    1330:	e0bff715 	stw	r2,-36(fp)
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1334:	00007640 	call	764 <cam_get_xsize>
    1338:	143fffcc 	andi	r16,r2,65535
    133c:	00007b00 	call	7b0 <cam_get_ysize>
    1340:	10bfffcc 	andi	r2,r2,65535
    1344:	8085383a 	mul	r2,r16,r2
    1348:	1009883a 	mov	r4,r2
    134c:	00031200 	call	3120 <malloc>
    1350:	e0bff815 	stw	r2,-32(fp)
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1354:	00007640 	call	764 <cam_get_xsize>
    1358:	143fffcc 	andi	r16,r2,65535
    135c:	00007b00 	call	7b0 <cam_get_ysize>
    1360:	10bfffcc 	andi	r2,r2,65535
    1364:	8085383a 	mul	r2,r16,r2
    1368:	1009883a 	mov	r4,r2
    136c:	00031200 	call	3120 <malloc>
    1370:	e0bff915 	stw	r2,-28(fp)
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1374:	00007640 	call	764 <cam_get_xsize>
    1378:	143fffcc 	andi	r16,r2,65535
    137c:	00007b00 	call	7b0 <cam_get_ysize>
    1380:	10bfffcc 	andi	r2,r2,65535
    1384:	8085383a 	mul	r2,r16,r2
    1388:	1009883a 	mov	r4,r2
    138c:	00031200 	call	3120 <malloc>
    1390:	e0bffa15 	stw	r2,-24(fp)
  cam_set_image_pointer(0,buffer1);
    1394:	e17ff717 	ldw	r5,-36(fp)
    1398:	0009883a 	mov	r4,zero
    139c:	00008a40 	call	8a4 <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
    13a0:	e17ff817 	ldw	r5,-32(fp)
    13a4:	01000044 	movi	r4,1
    13a8:	00008a40 	call	8a4 <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
    13ac:	e17ff917 	ldw	r5,-28(fp)
    13b0:	01000084 	movi	r4,2
    13b4:	00008a40 	call	8a4 <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
    13b8:	e17ffa17 	ldw	r5,-24(fp)
    13bc:	010000c4 	movi	r4,3
    13c0:	00008a40 	call	8a4 <cam_set_image_pointer>
  enable_continues_mode();
    13c4:	00009fc0 	call	9fc <enable_continues_mode>
  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
    13c8:	00007640 	call	764 <cam_get_xsize>
    13cc:	10bfffcc 	andi	r2,r2,65535
    13d0:	1004d07a 	srli	r2,r2,1
    13d4:	143fffcc 	andi	r16,r2,65535
    13d8:	00007b00 	call	7b0 <cam_get_ysize>
    13dc:	10bfffcc 	andi	r2,r2,65535
    13e0:	100b883a 	mov	r5,r2
    13e4:	8009883a 	mov	r4,r16
    13e8:	000187c0 	call	187c <init_sobel_arrays>
  do {
	  if (new_image_available() != 0) {
    13ec:	0000a2c0 	call	a2c <new_image_available>
    13f0:	10803fcc 	andi	r2,r2,255
    13f4:	1080201c 	xori	r2,r2,128
    13f8:	10bfe004 	addi	r2,r2,-128
    13fc:	103ffb26 	beq	r2,zero,13ec <__alt_data_end+0xff0013ec>
		  if (current_image_valid()!=0) {
    1400:	000094c0 	call	94c <current_image_valid>
    1404:	10bfffcc 	andi	r2,r2,65535
    1408:	10a0001c 	xori	r2,r2,32768
    140c:	10a00004 	addi	r2,r2,-32768
    1410:	1000f426 	beq	r2,zero,17e4 <main+0x50c>
			  current_mode = DIPSW_get_value();
    1414:	0000a840 	call	a84 <DIPSW_get_value>
    1418:	e0bffb05 	stb	r2,-20(fp)
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
    141c:	e0bffb03 	ldbu	r2,-20(fp)
    1420:	108001cc 	andi	r2,r2,7
    1424:	e0bfec05 	stb	r2,-80(fp)
			  image = (unsigned short*)current_image_pointer();
    1428:	00009840 	call	984 <current_image_pointer>
    142c:	e0bffc15 	stw	r2,-16(fp)
		      switch (mode) {
    1430:	e0bfec03 	ldbu	r2,-80(fp)
    1434:	10c00060 	cmpeqi	r3,r2,1
    1438:	1800211e 	bne	r3,zero,14c0 <main+0x1e8>
    143c:	10c00088 	cmpgei	r3,r2,2
    1440:	1800021e 	bne	r3,zero,144c <main+0x174>
    1444:	10000626 	beq	r2,zero,1460 <main+0x188>
    1448:	0000a206 	br	16d4 <main+0x3fc>
    144c:	10c000a0 	cmpeqi	r3,r2,2
    1450:	1800421e 	bne	r3,zero,155c <main+0x284>
    1454:	108000e0 	cmpeqi	r2,r2,3
    1458:	10006c1e 	bne	r2,zero,160c <main+0x334>
    145c:	00009d06 	br	16d4 <main+0x3fc>
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1460:	e0fffc17 	ldw	r3,-16(fp)
    1464:	00a04414 	movui	r2,33040
    1468:	18a1883a 	add	r16,r3,r2
		                	cam_get_xsize()>>1,
    146c:	00007640 	call	764 <cam_get_xsize>
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1470:	10bfffcc 	andi	r2,r2,65535
    1474:	1004d07a 	srli	r2,r2,1
    1478:	147fffcc 	andi	r17,r2,65535
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
    147c:	00007b00 	call	7b0 <cam_get_ysize>
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1480:	10bfffcc 	andi	r2,r2,65535
    1484:	000f883a 	mov	r7,zero
    1488:	100d883a 	mov	r6,r2
    148c:	880b883a 	mov	r5,r17
    1490:	8009883a 	mov	r4,r16
    1494:	00012100 	call	1210 <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1498:	e0bffb03 	ldbu	r2,-20(fp)
    149c:	10803fcc 	andi	r2,r2,255
    14a0:	1080201c 	xori	r2,r2,128
    14a4:	10bfe004 	addi	r2,r2,-128
    14a8:	1000c50e 	bge	r2,zero,17c0 <main+0x4e8>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    14ac:	01000204 	movi	r4,8
    14b0:	0002f340 	call	2f34 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    14b4:	e13ffc17 	ldw	r4,-16(fp)
    14b8:	0002f000 	call	2f00 <vga_set_pointer>
		      	  	   }
		      	  	   break;
    14bc:	0000c006 	br	17c0 <main+0x4e8>
		      case 1 : 
			  			start_sobel_conv_graycale =  alt_timestamp();
    14c0:	0010ee40 	call	10ee4 <alt_timestamp>
    14c4:	e0bff515 	stw	r2,-44(fp)
						conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    14c8:	00007640 	call	764 <cam_get_xsize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : 
			  			start_sobel_conv_graycale =  alt_timestamp();
						conv_grayscale((void *)image,
    14cc:	10bfffcc 	andi	r2,r2,65535
    14d0:	1004d07a 	srli	r2,r2,1
    14d4:	143fffcc 	andi	r16,r2,65535
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
    14d8:	00007b00 	call	7b0 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : 
			  			start_sobel_conv_graycale =  alt_timestamp();
						conv_grayscale((void *)image,
    14dc:	10bfffcc 	andi	r2,r2,65535
    14e0:	100d883a 	mov	r6,r2
    14e4:	800b883a 	mov	r5,r16
    14e8:	e13ffc17 	ldw	r4,-16(fp)
    14ec:	0000ab40 	call	ab4 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
						end_sobel_conv_graycale = alt_timestamp();
    14f0:	0010ee40 	call	10ee4 <alt_timestamp>
    14f4:	e0bff615 	stw	r2,-40(fp)
		               grayscale = get_grayscale_picture();
    14f8:	0000c700 	call	c70 <get_grayscale_picture>
    14fc:	e0bffd15 	stw	r2,-12(fp)
		               transfer_LCD_with_dma(&grayscale[16520],
    1500:	e0bffd17 	ldw	r2,-12(fp)
    1504:	14102204 	addi	r16,r2,16520
		      		                	cam_get_xsize()>>1,
    1508:	00007640 	call	764 <cam_get_xsize>
						conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
						end_sobel_conv_graycale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    150c:	10bfffcc 	andi	r2,r2,65535
    1510:	1004d07a 	srli	r2,r2,1
    1514:	147fffcc 	andi	r17,r2,65535
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
    1518:	00007b00 	call	7b0 <cam_get_ysize>
						conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
						end_sobel_conv_graycale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    151c:	10bfffcc 	andi	r2,r2,65535
    1520:	01c00044 	movi	r7,1
    1524:	100d883a 	mov	r6,r2
    1528:	880b883a 	mov	r5,r17
    152c:	8009883a 	mov	r4,r16
    1530:	00012100 	call	1210 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1534:	e0bffb03 	ldbu	r2,-20(fp)
    1538:	10803fcc 	andi	r2,r2,255
    153c:	1080201c 	xori	r2,r2,128
    1540:	10bfe004 	addi	r2,r2,-128
    1544:	1000a00e 	bge	r2,zero,17c8 <main+0x4f0>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    1548:	01000604 	movi	r4,24
    154c:	0002f340 	call	2f34 <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    1550:	e13ffd17 	ldw	r4,-12(fp)
    1554:	0002f000 	call	2f00 <vga_set_pointer>
		      	  	   }
		      	  	   break;
    1558:	00009b06 	br	17c8 <main+0x4f0>
		      case 2 : 
			  			start_sobel_conv_graycale =  alt_timestamp();
    155c:	0010ee40 	call	10ee4 <alt_timestamp>
    1560:	e0bff515 	stw	r2,-44(fp)
						conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    1564:	00007640 	call	764 <cam_get_xsize>
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : 
			  			start_sobel_conv_graycale =  alt_timestamp();
						conv_grayscale((void *)image,
    1568:	10bfffcc 	andi	r2,r2,65535
    156c:	1004d07a 	srli	r2,r2,1
    1570:	143fffcc 	andi	r16,r2,65535
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
    1574:	00007b00 	call	7b0 <cam_get_ysize>
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : 
			  			start_sobel_conv_graycale =  alt_timestamp();
						conv_grayscale((void *)image,
    1578:	10bfffcc 	andi	r2,r2,65535
    157c:	100d883a 	mov	r6,r2
    1580:	800b883a 	mov	r5,r16
    1584:	e13ffc17 	ldw	r4,-16(fp)
    1588:	0000ab40 	call	ab4 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
						end_sobel_conv_graycale = alt_timestamp();
    158c:	0010ee40 	call	10ee4 <alt_timestamp>
    1590:	e0bff615 	stw	r2,-40(fp)
		               grayscale = get_grayscale_picture();
    1594:	0000c700 	call	c70 <get_grayscale_picture>
    1598:	e0bffd15 	stw	r2,-12(fp)
					   //start_sobel_x_m2 =  alt_timestamp();
		               sobel_x_with_rgb(grayscale);
    159c:	e13ffd17 	ldw	r4,-12(fp)
    15a0:	00025740 	call	2574 <sobel_x_with_rgb>
					   //end_sobel_x_m2 = alt_timestamp();
		               image = GetSobel_rgb();
    15a4:	0002ec00 	call	2ec0 <GetSobel_rgb>
    15a8:	e0bffc15 	stw	r2,-16(fp)
		               transfer_LCD_with_dma(&image[16520],
    15ac:	e0fffc17 	ldw	r3,-16(fp)
    15b0:	00a04414 	movui	r2,33040
    15b4:	18a1883a 	add	r16,r3,r2
		      		                	cam_get_xsize()>>1,
    15b8:	00007640 	call	764 <cam_get_xsize>
		               grayscale = get_grayscale_picture();
					   //start_sobel_x_m2 =  alt_timestamp();
		               sobel_x_with_rgb(grayscale);
					   //end_sobel_x_m2 = alt_timestamp();
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    15bc:	10bfffcc 	andi	r2,r2,65535
    15c0:	1004d07a 	srli	r2,r2,1
    15c4:	147fffcc 	andi	r17,r2,65535
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
    15c8:	00007b00 	call	7b0 <cam_get_ysize>
		               grayscale = get_grayscale_picture();
					   //start_sobel_x_m2 =  alt_timestamp();
		               sobel_x_with_rgb(grayscale);
					   //end_sobel_x_m2 = alt_timestamp();
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    15cc:	10bfffcc 	andi	r2,r2,65535
    15d0:	000f883a 	mov	r7,zero
    15d4:	100d883a 	mov	r6,r2
    15d8:	880b883a 	mov	r5,r17
    15dc:	8009883a 	mov	r4,r16
    15e0:	00012100 	call	1210 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    15e4:	e0bffb03 	ldbu	r2,-20(fp)
    15e8:	10803fcc 	andi	r2,r2,255
    15ec:	1080201c 	xori	r2,r2,128
    15f0:	10bfe004 	addi	r2,r2,-128
    15f4:	1000760e 	bge	r2,zero,17d0 <main+0x4f8>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    15f8:	01000204 	movi	r4,8
    15fc:	0002f340 	call	2f34 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    1600:	e13ffc17 	ldw	r4,-16(fp)
    1604:	0002f000 	call	2f00 <vga_set_pointer>
		      	  	   }
		      	  	   break;
    1608:	00007106 	br	17d0 <main+0x4f8>
		      case 3 : 
			  			
						start_sobel_conv_graycale =  alt_timestamp();
    160c:	0010ee40 	call	10ee4 <alt_timestamp>
    1610:	e0bff515 	stw	r2,-44(fp)
						conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    1614:	00007640 	call	764 <cam_get_xsize>
		      	  	   }
		      	  	   break;
		      case 3 : 
			  			
						start_sobel_conv_graycale =  alt_timestamp();
						conv_grayscale((void *)image,
    1618:	10bfffcc 	andi	r2,r2,65535
    161c:	1004d07a 	srli	r2,r2,1
    1620:	143fffcc 	andi	r16,r2,65535
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
    1624:	00007b00 	call	7b0 <cam_get_ysize>
		      	  	   }
		      	  	   break;
		      case 3 : 
			  			
						start_sobel_conv_graycale =  alt_timestamp();
						conv_grayscale((void *)image,
    1628:	10bfffcc 	andi	r2,r2,65535
    162c:	100d883a 	mov	r6,r2
    1630:	800b883a 	mov	r5,r16
    1634:	e13ffc17 	ldw	r4,-16(fp)
    1638:	0000ab40 	call	ab4 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
						end_sobel_conv_graycale = alt_timestamp();
    163c:	0010ee40 	call	10ee4 <alt_timestamp>
    1640:	e0bff615 	stw	r2,-40(fp)
		               	grayscale = get_grayscale_picture();
    1644:	0000c700 	call	c70 <get_grayscale_picture>
    1648:	e0bffd15 	stw	r2,-12(fp)
					   	start_sobel_x_m2 =  alt_timestamp();
    164c:	0010ee40 	call	10ee4 <alt_timestamp>
    1650:	e0bfed15 	stw	r2,-76(fp)
		               	sobel_x(grayscale);
    1654:	e13ffd17 	ldw	r4,-12(fp)
    1658:	0001fb40 	call	1fb4 <sobel_x>
						end_sobel_x_m2 = alt_timestamp();
    165c:	0010ee40 	call	10ee4 <alt_timestamp>
    1660:	e0bfee15 	stw	r2,-72(fp)
		               	sobel_y_with_rgb(grayscale);
    1664:	e13ffd17 	ldw	r4,-12(fp)
    1668:	0002c700 	call	2c70 <sobel_y_with_rgb>
		               	image = GetSobel_rgb();
    166c:	0002ec00 	call	2ec0 <GetSobel_rgb>
    1670:	e0bffc15 	stw	r2,-16(fp)
		               	transfer_LCD_with_dma(&image[16520],
    1674:	e0fffc17 	ldw	r3,-16(fp)
    1678:	00a04414 	movui	r2,33040
    167c:	18a1883a 	add	r16,r3,r2
		      		                	cam_get_xsize()>>1,
    1680:	00007640 	call	764 <cam_get_xsize>
					   	start_sobel_x_m2 =  alt_timestamp();
		               	sobel_x(grayscale);
						end_sobel_x_m2 = alt_timestamp();
		               	sobel_y_with_rgb(grayscale);
		               	image = GetSobel_rgb();
		               	transfer_LCD_with_dma(&image[16520],
    1684:	10bfffcc 	andi	r2,r2,65535
    1688:	1004d07a 	srli	r2,r2,1
    168c:	147fffcc 	andi	r17,r2,65535
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
    1690:	00007b00 	call	7b0 <cam_get_ysize>
					   	start_sobel_x_m2 =  alt_timestamp();
		               	sobel_x(grayscale);
						end_sobel_x_m2 = alt_timestamp();
		               	sobel_y_with_rgb(grayscale);
		               	image = GetSobel_rgb();
		               	transfer_LCD_with_dma(&image[16520],
    1694:	10bfffcc 	andi	r2,r2,65535
    1698:	000f883a 	mov	r7,zero
    169c:	100d883a 	mov	r6,r2
    16a0:	880b883a 	mov	r5,r17
    16a4:	8009883a 	mov	r4,r16
    16a8:	00012100 	call	1210 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   	if ((current_mode&DIPSW_SW8_MASK)!=0) {
    16ac:	e0bffb03 	ldbu	r2,-20(fp)
    16b0:	10803fcc 	andi	r2,r2,255
    16b4:	1080201c 	xori	r2,r2,128
    16b8:	10bfe004 	addi	r2,r2,-128
    16bc:	1000460e 	bge	r2,zero,17d8 <main+0x500>
		      	  			  vga_set_swap(VGA_QuarterScreen);
    16c0:	01000204 	movi	r4,8
    16c4:	0002f340 	call	2f34 <vga_set_swap>
		      	  			  vga_set_pointer(image);
    16c8:	e13ffc17 	ldw	r4,-16(fp)
    16cc:	0002f000 	call	2f00 <vga_set_pointer>
		      	  	   	}
		      	  	   	break;
    16d0:	00004106 	br	17d8 <main+0x500>
		      default: 
			  			start_sobel_conv_graycale =  alt_timestamp();
    16d4:	0010ee40 	call	10ee4 <alt_timestamp>
    16d8:	e0bff515 	stw	r2,-44(fp)
						conv_grayscale((void *)image,
	                                  cam_get_xsize()>>1,
    16dc:	00007640 	call	764 <cam_get_xsize>
		      	  			  vga_set_pointer(image);
		      	  	   	}
		      	  	   	break;
		      default: 
			  			start_sobel_conv_graycale =  alt_timestamp();
						conv_grayscale((void *)image,
    16e0:	10bfffcc 	andi	r2,r2,65535
    16e4:	1004d07a 	srli	r2,r2,1
    16e8:	143fffcc 	andi	r16,r2,65535
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
    16ec:	00007b00 	call	7b0 <cam_get_ysize>
		      	  			  vga_set_pointer(image);
		      	  	   	}
		      	  	   	break;
		      default: 
			  			start_sobel_conv_graycale =  alt_timestamp();
						conv_grayscale((void *)image,
    16f0:	10bfffcc 	andi	r2,r2,65535
    16f4:	100d883a 	mov	r6,r2
    16f8:	800b883a 	mov	r5,r16
    16fc:	e13ffc17 	ldw	r4,-16(fp)
    1700:	0000ab40 	call	ab4 <conv_grayscale>
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
						end_sobel_conv_graycale = alt_timestamp();
    1704:	0010ee40 	call	10ee4 <alt_timestamp>
    1708:	e0bff615 	stw	r2,-40(fp)
                       	grayscale = get_grayscale_picture();
    170c:	0000c700 	call	c70 <get_grayscale_picture>
    1710:	e0bffd15 	stw	r2,-12(fp)
					   	start_sobel_x =  alt_timestamp();
    1714:	0010ee40 	call	10ee4 <alt_timestamp>
    1718:	e0bfef15 	stw	r2,-68(fp)
                       	sobel_x(grayscale);
    171c:	e13ffd17 	ldw	r4,-12(fp)
    1720:	0001fb40 	call	1fb4 <sobel_x>
						end_sobel_x = alt_timestamp();
    1724:	0010ee40 	call	10ee4 <alt_timestamp>
    1728:	e0bff015 	stw	r2,-64(fp)
                       	start_sobel_y =  alt_timestamp();
    172c:	0010ee40 	call	10ee4 <alt_timestamp>
    1730:	e0bff115 	stw	r2,-60(fp)
						sobel_y(grayscale);
    1734:	e13ffd17 	ldw	r4,-12(fp)
    1738:	00026b00 	call	26b0 <sobel_y>
                       	end_sobel_y = alt_timestamp();
    173c:	0010ee40 	call	10ee4 <alt_timestamp>
    1740:	e0bff215 	stw	r2,-56(fp)
                       	start_sobel_threshold =  alt_timestamp();
    1744:	0010ee40 	call	10ee4 <alt_timestamp>
    1748:	e0bff315 	stw	r2,-52(fp)
						sobel_threshold(128);
    174c:	01002004 	movi	r4,128
    1750:	0002dac0 	call	2dac <sobel_threshold>
		               	end_sobel_threshold = alt_timestamp();
    1754:	0010ee40 	call	10ee4 <alt_timestamp>
    1758:	e0bff415 	stw	r2,-48(fp)
						grayscale=GetSobelResult();
    175c:	0002ee00 	call	2ee0 <GetSobelResult>
    1760:	e0bffd15 	stw	r2,-12(fp)
						transfer_LCD_with_dma(&grayscale[16520],
    1764:	e0bffd17 	ldw	r2,-12(fp)
    1768:	14102204 	addi	r16,r2,16520
		      		   	             	cam_get_xsize()>>1,
    176c:	00007640 	call	764 <cam_get_xsize>
                       	end_sobel_y = alt_timestamp();
                       	start_sobel_threshold =  alt_timestamp();
						sobel_threshold(128);
		               	end_sobel_threshold = alt_timestamp();
						grayscale=GetSobelResult();
						transfer_LCD_with_dma(&grayscale[16520],
    1770:	10bfffcc 	andi	r2,r2,65535
    1774:	1004d07a 	srli	r2,r2,1
    1778:	147fffcc 	andi	r17,r2,65535
		      		   	             	cam_get_xsize()>>1,
		      		   	             	cam_get_ysize(),1);
    177c:	00007b00 	call	7b0 <cam_get_ysize>
                       	end_sobel_y = alt_timestamp();
                       	start_sobel_threshold =  alt_timestamp();
						sobel_threshold(128);
		               	end_sobel_threshold = alt_timestamp();
						grayscale=GetSobelResult();
						transfer_LCD_with_dma(&grayscale[16520],
    1780:	10bfffcc 	andi	r2,r2,65535
    1784:	01c00044 	movi	r7,1
    1788:	100d883a 	mov	r6,r2
    178c:	880b883a 	mov	r5,r17
    1790:	8009883a 	mov	r4,r16
    1794:	00012100 	call	1210 <transfer_LCD_with_dma>
		      		   	             	cam_get_xsize()>>1,
		      		   	             	cam_get_ysize(),1);
		      	  	   	if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1798:	e0bffb03 	ldbu	r2,-20(fp)
    179c:	10803fcc 	andi	r2,r2,255
    17a0:	1080201c 	xori	r2,r2,128
    17a4:	10bfe004 	addi	r2,r2,-128
    17a8:	10000d0e 	bge	r2,zero,17e0 <main+0x508>
							vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    17ac:	01000604 	movi	r4,24
    17b0:	0002f340 	call	2f34 <vga_set_swap>
							vga_set_pointer(grayscale);
    17b4:	e13ffd17 	ldw	r4,-12(fp)
    17b8:	0002f000 	call	2f00 <vga_set_pointer>
		      	  	   	}
		      	  	   	break;
    17bc:	00000806 	br	17e0 <main+0x508>
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
    17c0:	0001883a 	nop
    17c4:	00000706 	br	17e4 <main+0x50c>
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
    17c8:	0001883a 	nop
    17cc:	00000506 	br	17e4 <main+0x50c>
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
    17d0:	0001883a 	nop
    17d4:	00000306 	br	17e4 <main+0x50c>
		      		                	cam_get_ysize(),0);
		      	  	   	if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  			  vga_set_swap(VGA_QuarterScreen);
		      	  			  vga_set_pointer(image);
		      	  	   	}
		      	  	   	break;
    17d8:	0001883a 	nop
    17dc:	00000106 	br	17e4 <main+0x50c>
		      		   	             	cam_get_ysize(),1);
		      	  	   	if ((current_mode&DIPSW_SW8_MASK)!=0) {
							vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
							vga_set_pointer(grayscale);
		      	  	   	}
		      	  	   	break;
    17e0:	0001883a 	nop
		      }
		  }
		  printf(" sobel x m2 %lu\n",start_sobel_x_m2-end_sobel_x_m2);
    17e4:	e0ffed17 	ldw	r3,-76(fp)
    17e8:	e0bfee17 	ldw	r2,-72(fp)
    17ec:	1885c83a 	sub	r2,r3,r2
    17f0:	100b883a 	mov	r5,r2
    17f4:	01000074 	movhi	r4,1
    17f8:	2109cc04 	addi	r4,r4,10032
    17fc:	00039840 	call	3984 <printf>
		  printf(" sobel x def %lu\n",start_sobel_x-end_sobel_x);
    1800:	e0ffef17 	ldw	r3,-68(fp)
    1804:	e0bff017 	ldw	r2,-64(fp)
    1808:	1885c83a 	sub	r2,r3,r2
    180c:	100b883a 	mov	r5,r2
    1810:	01000074 	movhi	r4,1
    1814:	2109d104 	addi	r4,r4,10052
    1818:	00039840 	call	3984 <printf>
		  printf(" sobel y %lu\n",start_sobel_y-end_sobel_y);
    181c:	e0fff117 	ldw	r3,-60(fp)
    1820:	e0bff217 	ldw	r2,-56(fp)
    1824:	1885c83a 	sub	r2,r3,r2
    1828:	100b883a 	mov	r5,r2
    182c:	01000074 	movhi	r4,1
    1830:	2109d604 	addi	r4,r4,10072
    1834:	00039840 	call	3984 <printf>
		  printf(" sobel threshold %lu\n",start_sobel_threshold-end_sobel_threshold);
    1838:	e0fff317 	ldw	r3,-52(fp)
    183c:	e0bff417 	ldw	r2,-48(fp)
    1840:	1885c83a 	sub	r2,r3,r2
    1844:	100b883a 	mov	r5,r2
    1848:	01000074 	movhi	r4,1
    184c:	2109da04 	addi	r4,r4,10088
    1850:	00039840 	call	3984 <printf>
		  printf(" sobel conv grayscale in mode %d : %lu\n",mode,start_sobel_conv_graycale-end_sobel_conv_graycale);
    1854:	e13fec03 	ldbu	r4,-80(fp)
    1858:	e0fff517 	ldw	r3,-44(fp)
    185c:	e0bff617 	ldw	r2,-40(fp)
    1860:	1885c83a 	sub	r2,r3,r2
    1864:	100d883a 	mov	r6,r2
    1868:	200b883a 	mov	r5,r4
    186c:	01000074 	movhi	r4,1
    1870:	2109e004 	addi	r4,r4,10112
    1874:	00039840 	call	3984 <printf>
	  }
  } while (1);
    1878:	003edc06 	br	13ec <__alt_data_end+0xff0013ec>

0000187c <init_sobel_arrays>:
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    187c:	defffb04 	addi	sp,sp,-20
    1880:	dfc00415 	stw	ra,16(sp)
    1884:	df000315 	stw	fp,12(sp)
    1888:	df000304 	addi	fp,sp,12
    188c:	e13ffe15 	stw	r4,-8(fp)
    1890:	e17fff15 	stw	r5,-4(fp)
	int loop;
	sobel_width = width;
    1894:	e0bffe17 	ldw	r2,-8(fp)
    1898:	d0a6cf15 	stw	r2,-25796(gp)
	sobel_height = height;
    189c:	e0bfff17 	ldw	r2,-4(fp)
    18a0:	d0a6d115 	stw	r2,-25788(gp)
	if (sobel_x_result != NULL)
    18a4:	d0a6d217 	ldw	r2,-25784(gp)
    18a8:	10000326 	beq	r2,zero,18b8 <init_sobel_arrays+0x3c>
		free(sobel_x_result);
    18ac:	d0a6d217 	ldw	r2,-25784(gp)
    18b0:	1009883a 	mov	r4,r2
    18b4:	00031340 	call	3134 <free>
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    18b8:	e0fffe17 	ldw	r3,-8(fp)
    18bc:	e0bfff17 	ldw	r2,-4(fp)
    18c0:	1885383a 	mul	r2,r3,r2
    18c4:	1085883a 	add	r2,r2,r2
    18c8:	1009883a 	mov	r4,r2
    18cc:	00031200 	call	3120 <malloc>
    18d0:	d0a6d215 	stw	r2,-25784(gp)
	if (sobel_y_result != NULL)
    18d4:	d0a6d317 	ldw	r2,-25780(gp)
    18d8:	10000326 	beq	r2,zero,18e8 <init_sobel_arrays+0x6c>
		free(sobel_y_result);
    18dc:	d0a6d317 	ldw	r2,-25780(gp)
    18e0:	1009883a 	mov	r4,r2
    18e4:	00031340 	call	3134 <free>
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    18e8:	e0fffe17 	ldw	r3,-8(fp)
    18ec:	e0bfff17 	ldw	r2,-4(fp)
    18f0:	1885383a 	mul	r2,r3,r2
    18f4:	1085883a 	add	r2,r2,r2
    18f8:	1009883a 	mov	r4,r2
    18fc:	00031200 	call	3120 <malloc>
    1900:	d0a6d315 	stw	r2,-25780(gp)
	if (sobel_result != NULL)
    1904:	d0a6d017 	ldw	r2,-25792(gp)
    1908:	10000326 	beq	r2,zero,1918 <init_sobel_arrays+0x9c>
		free(sobel_result);
    190c:	d0a6d017 	ldw	r2,-25792(gp)
    1910:	1009883a 	mov	r4,r2
    1914:	00031340 	call	3134 <free>
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    1918:	e0fffe17 	ldw	r3,-8(fp)
    191c:	e0bfff17 	ldw	r2,-4(fp)
    1920:	1885383a 	mul	r2,r3,r2
    1924:	1009883a 	mov	r4,r2
    1928:	00031200 	call	3120 <malloc>
    192c:	d0a6d015 	stw	r2,-25792(gp)
	if (sobel_rgb565 != NULL)
    1930:	d0a6d417 	ldw	r2,-25776(gp)
    1934:	10000326 	beq	r2,zero,1944 <init_sobel_arrays+0xc8>
		free(sobel_rgb565);
    1938:	d0a6d417 	ldw	r2,-25776(gp)
    193c:	1009883a 	mov	r4,r2
    1940:	00031340 	call	3134 <free>
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
    1944:	e0fffe17 	ldw	r3,-8(fp)
    1948:	e0bfff17 	ldw	r2,-4(fp)
    194c:	1885383a 	mul	r2,r3,r2
    1950:	1085883a 	add	r2,r2,r2
    1954:	1009883a 	mov	r4,r2
    1958:	00031200 	call	3120 <malloc>
    195c:	d0a6d415 	stw	r2,-25776(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    1960:	e03ffd15 	stw	zero,-12(fp)
    1964:	00001606 	br	19c0 <init_sobel_arrays+0x144>
		sobel_x_result[loop] = 0;
    1968:	d0e6d217 	ldw	r3,-25784(gp)
    196c:	e0bffd17 	ldw	r2,-12(fp)
    1970:	1085883a 	add	r2,r2,r2
    1974:	1885883a 	add	r2,r3,r2
    1978:	1000000d 	sth	zero,0(r2)
		sobel_y_result[loop] = 0;
    197c:	d0e6d317 	ldw	r3,-25780(gp)
    1980:	e0bffd17 	ldw	r2,-12(fp)
    1984:	1085883a 	add	r2,r2,r2
    1988:	1885883a 	add	r2,r3,r2
    198c:	1000000d 	sth	zero,0(r2)
		sobel_result[loop] = 0;
    1990:	d0e6d017 	ldw	r3,-25792(gp)
    1994:	e0bffd17 	ldw	r2,-12(fp)
    1998:	1885883a 	add	r2,r3,r2
    199c:	10000005 	stb	zero,0(r2)
		sobel_rgb565[loop] = 0;
    19a0:	d0e6d417 	ldw	r3,-25776(gp)
    19a4:	e0bffd17 	ldw	r2,-12(fp)
    19a8:	1085883a 	add	r2,r2,r2
    19ac:	1885883a 	add	r2,r3,r2
    19b0:	1000000d 	sth	zero,0(r2)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    19b4:	e0bffd17 	ldw	r2,-12(fp)
    19b8:	10800044 	addi	r2,r2,1
    19bc:	e0bffd15 	stw	r2,-12(fp)
    19c0:	e0fffe17 	ldw	r3,-8(fp)
    19c4:	e0bfff17 	ldw	r2,-4(fp)
    19c8:	1885383a 	mul	r2,r3,r2
    19cc:	e0fffd17 	ldw	r3,-12(fp)
    19d0:	18bfe516 	blt	r3,r2,1968 <__alt_data_end+0xff001968>
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
    19d4:	0001883a 	nop
    19d8:	e037883a 	mov	sp,fp
    19dc:	dfc00117 	ldw	ra,4(sp)
    19e0:	df000017 	ldw	fp,0(sp)
    19e4:	dec00204 	addi	sp,sp,8
    19e8:	f800283a 	ret

000019ec <sobel_mac>:

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    19ec:	defff904 	addi	sp,sp,-28
    19f0:	df000615 	stw	fp,24(sp)
    19f4:	df000604 	addi	fp,sp,24
    19f8:	e13ffc15 	stw	r4,-16(fp)
    19fc:	e17ffd15 	stw	r5,-12(fp)
    1a00:	e1bffe15 	stw	r6,-8(fp)
    1a04:	e1ffff15 	stw	r7,-4(fp)
   short dy=-1;
    1a08:	00bfffc4 	movi	r2,-1
    1a0c:	e0bffa0d 	sth	r2,-24(fp)
   short dx=-1;
    1a10:	00bfffc4 	movi	r2,-1
    1a14:	e0bffa8d 	sth	r2,-22(fp)
   short result = 0;
    1a18:	e03ffb0d 	sth	zero,-20(fp)
   //unrolling inner loop
   // unrolling all loops
   result += filter[0]*
    1a1c:	e0bfff17 	ldw	r2,-4(fp)
    1a20:	10800003 	ldbu	r2,0(r2)
    1a24:	10c03fcc 	andi	r3,r2,255
    1a28:	18c0201c 	xori	r3,r3,128
    1a2c:	18ffe004 	addi	r3,r3,-128
         pixels[(y)*width+(x)];
    1a30:	e13ffe17 	ldw	r4,-8(fp)
    1a34:	e0800117 	ldw	r2,4(fp)
    1a38:	2089383a 	mul	r4,r4,r2
    1a3c:	e0bffd17 	ldw	r2,-12(fp)
    1a40:	2085883a 	add	r2,r4,r2
    1a44:	e13ffc17 	ldw	r4,-16(fp)
    1a48:	2085883a 	add	r2,r4,r2
    1a4c:	10800003 	ldbu	r2,0(r2)
   short dy=-1;
   short dx=-1;
   short result = 0;
   //unrolling inner loop
   // unrolling all loops
   result += filter[0]*
    1a50:	10803fcc 	andi	r2,r2,255
    1a54:	1885383a 	mul	r2,r3,r2
    1a58:	1007883a 	mov	r3,r2
    1a5c:	e0bffb0b 	ldhu	r2,-20(fp)
    1a60:	1885883a 	add	r2,r3,r2
    1a64:	e0bffb0d 	sth	r2,-20(fp)
         pixels[(y)*width+(x)];
   result += filter[1]*
    1a68:	e0bfff17 	ldw	r2,-4(fp)
    1a6c:	10800044 	addi	r2,r2,1
    1a70:	10800003 	ldbu	r2,0(r2)
    1a74:	10c03fcc 	andi	r3,r2,255
    1a78:	18c0201c 	xori	r3,r3,128
    1a7c:	18ffe004 	addi	r3,r3,-128
         pixels[(y)*width+(x+1)];
    1a80:	e13ffe17 	ldw	r4,-8(fp)
    1a84:	e0800117 	ldw	r2,4(fp)
    1a88:	2089383a 	mul	r4,r4,r2
    1a8c:	e0bffd17 	ldw	r2,-12(fp)
    1a90:	2085883a 	add	r2,r4,r2
    1a94:	10800044 	addi	r2,r2,1
    1a98:	e13ffc17 	ldw	r4,-16(fp)
    1a9c:	2085883a 	add	r2,r4,r2
    1aa0:	10800003 	ldbu	r2,0(r2)
   short result = 0;
   //unrolling inner loop
   // unrolling all loops
   result += filter[0]*
         pixels[(y)*width+(x)];
   result += filter[1]*
    1aa4:	10803fcc 	andi	r2,r2,255
    1aa8:	1885383a 	mul	r2,r3,r2
    1aac:	1007883a 	mov	r3,r2
    1ab0:	e0bffb0b 	ldhu	r2,-20(fp)
    1ab4:	1885883a 	add	r2,r3,r2
    1ab8:	e0bffb0d 	sth	r2,-20(fp)
         pixels[(y)*width+(x+1)];
   result += filter[2]*
    1abc:	e0bfff17 	ldw	r2,-4(fp)
    1ac0:	10800084 	addi	r2,r2,2
    1ac4:	10800003 	ldbu	r2,0(r2)
    1ac8:	10c03fcc 	andi	r3,r2,255
    1acc:	18c0201c 	xori	r3,r3,128
    1ad0:	18ffe004 	addi	r3,r3,-128
         pixels[(y)*width+(x+2)];
    1ad4:	e13ffe17 	ldw	r4,-8(fp)
    1ad8:	e0800117 	ldw	r2,4(fp)
    1adc:	2089383a 	mul	r4,r4,r2
    1ae0:	e0bffd17 	ldw	r2,-12(fp)
    1ae4:	2085883a 	add	r2,r4,r2
    1ae8:	10800084 	addi	r2,r2,2
    1aec:	e13ffc17 	ldw	r4,-16(fp)
    1af0:	2085883a 	add	r2,r4,r2
    1af4:	10800003 	ldbu	r2,0(r2)
   // unrolling all loops
   result += filter[0]*
         pixels[(y)*width+(x)];
   result += filter[1]*
         pixels[(y)*width+(x+1)];
   result += filter[2]*
    1af8:	10803fcc 	andi	r2,r2,255
    1afc:	1885383a 	mul	r2,r3,r2
    1b00:	1007883a 	mov	r3,r2
    1b04:	e0bffb0b 	ldhu	r2,-20(fp)
    1b08:	1885883a 	add	r2,r3,r2
    1b0c:	e0bffb0d 	sth	r2,-20(fp)
         pixels[(y)*width+(x+2)];
   result += filter[3]*
    1b10:	e0bfff17 	ldw	r2,-4(fp)
    1b14:	108000c4 	addi	r2,r2,3
    1b18:	10800003 	ldbu	r2,0(r2)
    1b1c:	10c03fcc 	andi	r3,r2,255
    1b20:	18c0201c 	xori	r3,r3,128
    1b24:	18ffe004 	addi	r3,r3,-128
         pixels[(y)*width+(x+3)];
    1b28:	e13ffe17 	ldw	r4,-8(fp)
    1b2c:	e0800117 	ldw	r2,4(fp)
    1b30:	2089383a 	mul	r4,r4,r2
    1b34:	e0bffd17 	ldw	r2,-12(fp)
    1b38:	2085883a 	add	r2,r4,r2
    1b3c:	108000c4 	addi	r2,r2,3
    1b40:	e13ffc17 	ldw	r4,-16(fp)
    1b44:	2085883a 	add	r2,r4,r2
    1b48:	10800003 	ldbu	r2,0(r2)
         pixels[(y)*width+(x)];
   result += filter[1]*
         pixels[(y)*width+(x+1)];
   result += filter[2]*
         pixels[(y)*width+(x+2)];
   result += filter[3]*
    1b4c:	10803fcc 	andi	r2,r2,255
    1b50:	1885383a 	mul	r2,r3,r2
    1b54:	1007883a 	mov	r3,r2
    1b58:	e0bffb0b 	ldhu	r2,-20(fp)
    1b5c:	1885883a 	add	r2,r3,r2
    1b60:	e0bffb0d 	sth	r2,-20(fp)
         pixels[(y)*width+(x+3)];
         
   result += filter[(1)*3]*
    1b64:	e0bfff17 	ldw	r2,-4(fp)
    1b68:	108000c4 	addi	r2,r2,3
    1b6c:	10800003 	ldbu	r2,0(r2)
    1b70:	10c03fcc 	andi	r3,r2,255
    1b74:	18c0201c 	xori	r3,r3,128
    1b78:	18ffe004 	addi	r3,r3,-128
         pixels[(y+1)*width+(x)];
    1b7c:	e0bffe17 	ldw	r2,-8(fp)
    1b80:	10800044 	addi	r2,r2,1
    1b84:	1009883a 	mov	r4,r2
    1b88:	e0800117 	ldw	r2,4(fp)
    1b8c:	2089383a 	mul	r4,r4,r2
    1b90:	e0bffd17 	ldw	r2,-12(fp)
    1b94:	2085883a 	add	r2,r4,r2
    1b98:	e13ffc17 	ldw	r4,-16(fp)
    1b9c:	2085883a 	add	r2,r4,r2
    1ba0:	10800003 	ldbu	r2,0(r2)
   result += filter[2]*
         pixels[(y)*width+(x+2)];
   result += filter[3]*
         pixels[(y)*width+(x+3)];
         
   result += filter[(1)*3]*
    1ba4:	10803fcc 	andi	r2,r2,255
    1ba8:	1885383a 	mul	r2,r3,r2
    1bac:	1007883a 	mov	r3,r2
    1bb0:	e0bffb0b 	ldhu	r2,-20(fp)
    1bb4:	1885883a 	add	r2,r3,r2
    1bb8:	e0bffb0d 	sth	r2,-20(fp)
         pixels[(y+1)*width+(x)];
   result += filter[(1)*3+(1)]*
    1bbc:	e0bfff17 	ldw	r2,-4(fp)
    1bc0:	10800104 	addi	r2,r2,4
    1bc4:	10800003 	ldbu	r2,0(r2)
    1bc8:	10c03fcc 	andi	r3,r2,255
    1bcc:	18c0201c 	xori	r3,r3,128
    1bd0:	18ffe004 	addi	r3,r3,-128
         pixels[(y+1)*width+(2)];
    1bd4:	e0bffe17 	ldw	r2,-8(fp)
    1bd8:	10800044 	addi	r2,r2,1
    1bdc:	1009883a 	mov	r4,r2
    1be0:	e0800117 	ldw	r2,4(fp)
    1be4:	2085383a 	mul	r2,r4,r2
    1be8:	10800084 	addi	r2,r2,2
    1bec:	e13ffc17 	ldw	r4,-16(fp)
    1bf0:	2085883a 	add	r2,r4,r2
    1bf4:	10800003 	ldbu	r2,0(r2)
   result += filter[3]*
         pixels[(y)*width+(x+3)];
         
   result += filter[(1)*3]*
         pixels[(y+1)*width+(x)];
   result += filter[(1)*3+(1)]*
    1bf8:	10803fcc 	andi	r2,r2,255
    1bfc:	1885383a 	mul	r2,r3,r2
    1c00:	1007883a 	mov	r3,r2
    1c04:	e0bffb0b 	ldhu	r2,-20(fp)
    1c08:	1885883a 	add	r2,r3,r2
    1c0c:	e0bffb0d 	sth	r2,-20(fp)
         pixels[(y+1)*width+(2)];
   result += filter[(1)*3+(3)]*
    1c10:	e0bfff17 	ldw	r2,-4(fp)
    1c14:	10800184 	addi	r2,r2,6
    1c18:	10800003 	ldbu	r2,0(r2)
    1c1c:	10c03fcc 	andi	r3,r2,255
    1c20:	18c0201c 	xori	r3,r3,128
    1c24:	18ffe004 	addi	r3,r3,-128
         pixels[(y+1)*width+(x+2)];
    1c28:	e0bffe17 	ldw	r2,-8(fp)
    1c2c:	10800044 	addi	r2,r2,1
    1c30:	1009883a 	mov	r4,r2
    1c34:	e0800117 	ldw	r2,4(fp)
    1c38:	2089383a 	mul	r4,r4,r2
    1c3c:	e0bffd17 	ldw	r2,-12(fp)
    1c40:	2085883a 	add	r2,r4,r2
    1c44:	10800084 	addi	r2,r2,2
    1c48:	e13ffc17 	ldw	r4,-16(fp)
    1c4c:	2085883a 	add	r2,r4,r2
    1c50:	10800003 	ldbu	r2,0(r2)
         
   result += filter[(1)*3]*
         pixels[(y+1)*width+(x)];
   result += filter[(1)*3+(1)]*
         pixels[(y+1)*width+(2)];
   result += filter[(1)*3+(3)]*
    1c54:	10803fcc 	andi	r2,r2,255
    1c58:	1885383a 	mul	r2,r3,r2
    1c5c:	1007883a 	mov	r3,r2
    1c60:	e0bffb0b 	ldhu	r2,-20(fp)
    1c64:	1885883a 	add	r2,r3,r2
    1c68:	e0bffb0d 	sth	r2,-20(fp)
         pixels[(y+1)*width+(x+2)];
   result += filter[(1)*3+(4)]*
    1c6c:	e0bfff17 	ldw	r2,-4(fp)
    1c70:	108001c4 	addi	r2,r2,7
    1c74:	10800003 	ldbu	r2,0(r2)
    1c78:	10c03fcc 	andi	r3,r2,255
    1c7c:	18c0201c 	xori	r3,r3,128
    1c80:	18ffe004 	addi	r3,r3,-128
         pixels[(y+1)*width+(x+3)];
    1c84:	e0bffe17 	ldw	r2,-8(fp)
    1c88:	10800044 	addi	r2,r2,1
    1c8c:	1009883a 	mov	r4,r2
    1c90:	e0800117 	ldw	r2,4(fp)
    1c94:	2089383a 	mul	r4,r4,r2
    1c98:	e0bffd17 	ldw	r2,-12(fp)
    1c9c:	2085883a 	add	r2,r4,r2
    1ca0:	108000c4 	addi	r2,r2,3
    1ca4:	e13ffc17 	ldw	r4,-16(fp)
    1ca8:	2085883a 	add	r2,r4,r2
    1cac:	10800003 	ldbu	r2,0(r2)
         pixels[(y+1)*width+(x)];
   result += filter[(1)*3+(1)]*
         pixels[(y+1)*width+(2)];
   result += filter[(1)*3+(3)]*
         pixels[(y+1)*width+(x+2)];
   result += filter[(1)*3+(4)]*
    1cb0:	10803fcc 	andi	r2,r2,255
    1cb4:	1885383a 	mul	r2,r3,r2
    1cb8:	1007883a 	mov	r3,r2
    1cbc:	e0bffb0b 	ldhu	r2,-20(fp)
    1cc0:	1885883a 	add	r2,r3,r2
    1cc4:	e0bffb0d 	sth	r2,-20(fp)
         pixels[(y+1)*width+(x+3)];

   result += filter[(2)*3]*
    1cc8:	e0bfff17 	ldw	r2,-4(fp)
    1ccc:	10800184 	addi	r2,r2,6
    1cd0:	10800003 	ldbu	r2,0(r2)
    1cd4:	10c03fcc 	andi	r3,r2,255
    1cd8:	18c0201c 	xori	r3,r3,128
    1cdc:	18ffe004 	addi	r3,r3,-128
         pixels[(y+2)*width+(x)];
    1ce0:	e0bffe17 	ldw	r2,-8(fp)
    1ce4:	10800084 	addi	r2,r2,2
    1ce8:	1009883a 	mov	r4,r2
    1cec:	e0800117 	ldw	r2,4(fp)
    1cf0:	2089383a 	mul	r4,r4,r2
    1cf4:	e0bffd17 	ldw	r2,-12(fp)
    1cf8:	2085883a 	add	r2,r4,r2
    1cfc:	e13ffc17 	ldw	r4,-16(fp)
    1d00:	2085883a 	add	r2,r4,r2
    1d04:	10800003 	ldbu	r2,0(r2)
   result += filter[(1)*3+(3)]*
         pixels[(y+1)*width+(x+2)];
   result += filter[(1)*3+(4)]*
         pixels[(y+1)*width+(x+3)];

   result += filter[(2)*3]*
    1d08:	10803fcc 	andi	r2,r2,255
    1d0c:	1885383a 	mul	r2,r3,r2
    1d10:	1007883a 	mov	r3,r2
    1d14:	e0bffb0b 	ldhu	r2,-20(fp)
    1d18:	1885883a 	add	r2,r3,r2
    1d1c:	e0bffb0d 	sth	r2,-20(fp)
         pixels[(y+2)*width+(x)];
   result += filter[(2)*3+(1)]*
    1d20:	e0bfff17 	ldw	r2,-4(fp)
    1d24:	108001c4 	addi	r2,r2,7
    1d28:	10800003 	ldbu	r2,0(r2)
    1d2c:	10c03fcc 	andi	r3,r2,255
    1d30:	18c0201c 	xori	r3,r3,128
    1d34:	18ffe004 	addi	r3,r3,-128
         pixels[(y+2)*width+(x+1)];
    1d38:	e0bffe17 	ldw	r2,-8(fp)
    1d3c:	10800084 	addi	r2,r2,2
    1d40:	1009883a 	mov	r4,r2
    1d44:	e0800117 	ldw	r2,4(fp)
    1d48:	2089383a 	mul	r4,r4,r2
    1d4c:	e0bffd17 	ldw	r2,-12(fp)
    1d50:	2085883a 	add	r2,r4,r2
    1d54:	10800044 	addi	r2,r2,1
    1d58:	e13ffc17 	ldw	r4,-16(fp)
    1d5c:	2085883a 	add	r2,r4,r2
    1d60:	10800003 	ldbu	r2,0(r2)
   result += filter[(1)*3+(4)]*
         pixels[(y+1)*width+(x+3)];

   result += filter[(2)*3]*
         pixels[(y+2)*width+(x)];
   result += filter[(2)*3+(1)]*
    1d64:	10803fcc 	andi	r2,r2,255
    1d68:	1885383a 	mul	r2,r3,r2
    1d6c:	1007883a 	mov	r3,r2
    1d70:	e0bffb0b 	ldhu	r2,-20(fp)
    1d74:	1885883a 	add	r2,r3,r2
    1d78:	e0bffb0d 	sth	r2,-20(fp)
         pixels[(y+2)*width+(x+1)];
   result += filter[(2)*3+(2)]*
    1d7c:	e0bfff17 	ldw	r2,-4(fp)
    1d80:	10800204 	addi	r2,r2,8
    1d84:	10800003 	ldbu	r2,0(r2)
    1d88:	10c03fcc 	andi	r3,r2,255
    1d8c:	18c0201c 	xori	r3,r3,128
    1d90:	18ffe004 	addi	r3,r3,-128
         pixels[(y+2)*width+(x+2)];
    1d94:	e0bffe17 	ldw	r2,-8(fp)
    1d98:	10800084 	addi	r2,r2,2
    1d9c:	1009883a 	mov	r4,r2
    1da0:	e0800117 	ldw	r2,4(fp)
    1da4:	2089383a 	mul	r4,r4,r2
    1da8:	e0bffd17 	ldw	r2,-12(fp)
    1dac:	2085883a 	add	r2,r4,r2
    1db0:	10800084 	addi	r2,r2,2
    1db4:	e13ffc17 	ldw	r4,-16(fp)
    1db8:	2085883a 	add	r2,r4,r2
    1dbc:	10800003 	ldbu	r2,0(r2)

   result += filter[(2)*3]*
         pixels[(y+2)*width+(x)];
   result += filter[(2)*3+(1)]*
         pixels[(y+2)*width+(x+1)];
   result += filter[(2)*3+(2)]*
    1dc0:	10803fcc 	andi	r2,r2,255
    1dc4:	1885383a 	mul	r2,r3,r2
    1dc8:	1007883a 	mov	r3,r2
    1dcc:	e0bffb0b 	ldhu	r2,-20(fp)
    1dd0:	1885883a 	add	r2,r3,r2
    1dd4:	e0bffb0d 	sth	r2,-20(fp)
         pixels[(y+2)*width+(x+2)];
   result += filter[(2)*3+(3)]*
    1dd8:	e0bfff17 	ldw	r2,-4(fp)
    1ddc:	10800244 	addi	r2,r2,9
    1de0:	10800003 	ldbu	r2,0(r2)
    1de4:	10c03fcc 	andi	r3,r2,255
    1de8:	18c0201c 	xori	r3,r3,128
    1dec:	18ffe004 	addi	r3,r3,-128
         pixels[(y+2)*width+(x+3)];
    1df0:	e0bffe17 	ldw	r2,-8(fp)
    1df4:	10800084 	addi	r2,r2,2
    1df8:	1009883a 	mov	r4,r2
    1dfc:	e0800117 	ldw	r2,4(fp)
    1e00:	2089383a 	mul	r4,r4,r2
    1e04:	e0bffd17 	ldw	r2,-12(fp)
    1e08:	2085883a 	add	r2,r4,r2
    1e0c:	108000c4 	addi	r2,r2,3
    1e10:	e13ffc17 	ldw	r4,-16(fp)
    1e14:	2085883a 	add	r2,r4,r2
    1e18:	10800003 	ldbu	r2,0(r2)
         pixels[(y+2)*width+(x)];
   result += filter[(2)*3+(1)]*
         pixels[(y+2)*width+(x+1)];
   result += filter[(2)*3+(2)]*
         pixels[(y+2)*width+(x+2)];
   result += filter[(2)*3+(3)]*
    1e1c:	10803fcc 	andi	r2,r2,255
    1e20:	1885383a 	mul	r2,r3,r2
    1e24:	1007883a 	mov	r3,r2
    1e28:	e0bffb0b 	ldhu	r2,-20(fp)
    1e2c:	1885883a 	add	r2,r3,r2
    1e30:	e0bffb0d 	sth	r2,-20(fp)
         pixels[(y+2)*width+(x+3)];

   result += filter[(3)*3]*
    1e34:	e0bfff17 	ldw	r2,-4(fp)
    1e38:	10800244 	addi	r2,r2,9
    1e3c:	10800003 	ldbu	r2,0(r2)
    1e40:	10c03fcc 	andi	r3,r2,255
    1e44:	18c0201c 	xori	r3,r3,128
    1e48:	18ffe004 	addi	r3,r3,-128
         pixels[(y+3)*width+(x)];
    1e4c:	e0bffe17 	ldw	r2,-8(fp)
    1e50:	108000c4 	addi	r2,r2,3
    1e54:	1009883a 	mov	r4,r2
    1e58:	e0800117 	ldw	r2,4(fp)
    1e5c:	2089383a 	mul	r4,r4,r2
    1e60:	e0bffd17 	ldw	r2,-12(fp)
    1e64:	2085883a 	add	r2,r4,r2
    1e68:	e13ffc17 	ldw	r4,-16(fp)
    1e6c:	2085883a 	add	r2,r4,r2
    1e70:	10800003 	ldbu	r2,0(r2)
   result += filter[(2)*3+(2)]*
         pixels[(y+2)*width+(x+2)];
   result += filter[(2)*3+(3)]*
         pixels[(y+2)*width+(x+3)];

   result += filter[(3)*3]*
    1e74:	10803fcc 	andi	r2,r2,255
    1e78:	1885383a 	mul	r2,r3,r2
    1e7c:	1007883a 	mov	r3,r2
    1e80:	e0bffb0b 	ldhu	r2,-20(fp)
    1e84:	1885883a 	add	r2,r3,r2
    1e88:	e0bffb0d 	sth	r2,-20(fp)
         pixels[(y+3)*width+(x)];
   result += filter[(3)*3+(1)]*
    1e8c:	e0bfff17 	ldw	r2,-4(fp)
    1e90:	10800284 	addi	r2,r2,10
    1e94:	10800003 	ldbu	r2,0(r2)
    1e98:	10c03fcc 	andi	r3,r2,255
    1e9c:	18c0201c 	xori	r3,r3,128
    1ea0:	18ffe004 	addi	r3,r3,-128
         pixels[(y+3)*width+(x+1)];
    1ea4:	e0bffe17 	ldw	r2,-8(fp)
    1ea8:	108000c4 	addi	r2,r2,3
    1eac:	1009883a 	mov	r4,r2
    1eb0:	e0800117 	ldw	r2,4(fp)
    1eb4:	2089383a 	mul	r4,r4,r2
    1eb8:	e0bffd17 	ldw	r2,-12(fp)
    1ebc:	2085883a 	add	r2,r4,r2
    1ec0:	10800044 	addi	r2,r2,1
    1ec4:	e13ffc17 	ldw	r4,-16(fp)
    1ec8:	2085883a 	add	r2,r4,r2
    1ecc:	10800003 	ldbu	r2,0(r2)
   result += filter[(2)*3+(3)]*
         pixels[(y+2)*width+(x+3)];

   result += filter[(3)*3]*
         pixels[(y+3)*width+(x)];
   result += filter[(3)*3+(1)]*
    1ed0:	10803fcc 	andi	r2,r2,255
    1ed4:	1885383a 	mul	r2,r3,r2
    1ed8:	1007883a 	mov	r3,r2
    1edc:	e0bffb0b 	ldhu	r2,-20(fp)
    1ee0:	1885883a 	add	r2,r3,r2
    1ee4:	e0bffb0d 	sth	r2,-20(fp)
         pixels[(y+3)*width+(x+1)];
   result += filter[(3)*3+(2)]*
    1ee8:	e0bfff17 	ldw	r2,-4(fp)
    1eec:	108002c4 	addi	r2,r2,11
    1ef0:	10800003 	ldbu	r2,0(r2)
    1ef4:	10c03fcc 	andi	r3,r2,255
    1ef8:	18c0201c 	xori	r3,r3,128
    1efc:	18ffe004 	addi	r3,r3,-128
         pixels[(y+3)*width+(x+2)];
    1f00:	e0bffe17 	ldw	r2,-8(fp)
    1f04:	108000c4 	addi	r2,r2,3
    1f08:	1009883a 	mov	r4,r2
    1f0c:	e0800117 	ldw	r2,4(fp)
    1f10:	2089383a 	mul	r4,r4,r2
    1f14:	e0bffd17 	ldw	r2,-12(fp)
    1f18:	2085883a 	add	r2,r4,r2
    1f1c:	10800084 	addi	r2,r2,2
    1f20:	e13ffc17 	ldw	r4,-16(fp)
    1f24:	2085883a 	add	r2,r4,r2
    1f28:	10800003 	ldbu	r2,0(r2)

   result += filter[(3)*3]*
         pixels[(y+3)*width+(x)];
   result += filter[(3)*3+(1)]*
         pixels[(y+3)*width+(x+1)];
   result += filter[(3)*3+(2)]*
    1f2c:	10803fcc 	andi	r2,r2,255
    1f30:	1885383a 	mul	r2,r3,r2
    1f34:	1007883a 	mov	r3,r2
    1f38:	e0bffb0b 	ldhu	r2,-20(fp)
    1f3c:	1885883a 	add	r2,r3,r2
    1f40:	e0bffb0d 	sth	r2,-20(fp)
         pixels[(y+3)*width+(x+2)];
   result += filter[(3)*3+(3)]*
    1f44:	e0bfff17 	ldw	r2,-4(fp)
    1f48:	10800304 	addi	r2,r2,12
    1f4c:	10800003 	ldbu	r2,0(r2)
    1f50:	10c03fcc 	andi	r3,r2,255
    1f54:	18c0201c 	xori	r3,r3,128
    1f58:	18ffe004 	addi	r3,r3,-128
         pixels[(y+3)*width+(x+3)];
    1f5c:	e0bffe17 	ldw	r2,-8(fp)
    1f60:	108000c4 	addi	r2,r2,3
    1f64:	1009883a 	mov	r4,r2
    1f68:	e0800117 	ldw	r2,4(fp)
    1f6c:	2089383a 	mul	r4,r4,r2
    1f70:	e0bffd17 	ldw	r2,-12(fp)
    1f74:	2085883a 	add	r2,r4,r2
    1f78:	108000c4 	addi	r2,r2,3
    1f7c:	e13ffc17 	ldw	r4,-16(fp)
    1f80:	2085883a 	add	r2,r4,r2
    1f84:	10800003 	ldbu	r2,0(r2)
         pixels[(y+3)*width+(x)];
   result += filter[(3)*3+(1)]*
         pixels[(y+3)*width+(x+1)];
   result += filter[(3)*3+(2)]*
         pixels[(y+3)*width+(x+2)];
   result += filter[(3)*3+(3)]*
    1f88:	10803fcc 	andi	r2,r2,255
    1f8c:	1885383a 	mul	r2,r3,r2
    1f90:	1007883a 	mov	r3,r2
    1f94:	e0bffb0b 	ldhu	r2,-20(fp)
    1f98:	1885883a 	add	r2,r3,r2
    1f9c:	e0bffb0d 	sth	r2,-20(fp)
         pixels[(y+3)*width+(x+3)];
   return result;
    1fa0:	e0bffb0b 	ldhu	r2,-20(fp)
}
    1fa4:	e037883a 	mov	sp,fp
    1fa8:	df000017 	ldw	fp,0(sp)
    1fac:	dec00104 	addi	sp,sp,4
    1fb0:	f800283a 	ret

00001fb4 <sobel_x>:

void sobel_x( unsigned char *source ) {
    1fb4:	defffb04 	addi	sp,sp,-20
    1fb8:	df000415 	stw	fp,16(sp)
    1fbc:	df000404 	addi	fp,sp,16
    1fc0:	e13fff15 	stw	r4,-4(fp)
   int x,y;
   int idx;
   //unrolling loop

   short result = 0;
    1fc4:	e03ffe0d 	sth	zero,-8(fp)
   #pragma unroll
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1fc8:	00800044 	movi	r2,1
    1fcc:	e0bffd15 	stw	r2,-12(fp)
    1fd0:	00015f06 	br	2550 <sobel_x+0x59c>
      #pragma unroll
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1fd4:	00800044 	movi	r2,1
    1fd8:	e0bffc15 	stw	r2,-16(fp)
    1fdc:	00015506 	br	2534 <sobel_x+0x580>
            result += *gx_array[0]*
    1fe0:	00bfffc4 	movi	r2,-1
    1fe4:	10c03fcc 	andi	r3,r2,255
    1fe8:	18c0201c 	xori	r3,r3,128
    1fec:	18ffe004 	addi	r3,r3,-128
                  source[(y)*sobel_width+(x)];//;//*
    1ff0:	d126cf17 	ldw	r4,-25796(gp)
    1ff4:	e0bffd17 	ldw	r2,-12(fp)
    1ff8:	2089383a 	mul	r4,r4,r2
    1ffc:	e0bffc17 	ldw	r2,-16(fp)
    2000:	2085883a 	add	r2,r4,r2
    2004:	1009883a 	mov	r4,r2
    2008:	e0bfff17 	ldw	r2,-4(fp)
    200c:	1105883a 	add	r2,r2,r4
    2010:	10800003 	ldbu	r2,0(r2)
   short result = 0;
   #pragma unroll
   for (y = 1 ; y < (sobel_height-1) ; y++) {
      #pragma unroll
      for (x = 1 ; x < (sobel_width-1) ; x++) {
            result += *gx_array[0]*
    2014:	10803fcc 	andi	r2,r2,255
    2018:	1885383a 	mul	r2,r3,r2
    201c:	1007883a 	mov	r3,r2
    2020:	e0bffe0b 	ldhu	r2,-8(fp)
    2024:	1885883a 	add	r2,r3,r2
    2028:	e0bffe0d 	sth	r2,-8(fp)
                  source[(y)*sobel_width+(x)];//;//*
            result += *gx_array[1]*
    202c:	00bfff84 	movi	r2,-2
    2030:	10c03fcc 	andi	r3,r2,255
    2034:	18c0201c 	xori	r3,r3,128
    2038:	18ffe004 	addi	r3,r3,-128
                  source[(y)*sobel_width+(x+1)];
    203c:	d126cf17 	ldw	r4,-25796(gp)
    2040:	e0bffd17 	ldw	r2,-12(fp)
    2044:	2089383a 	mul	r4,r4,r2
    2048:	e0bffc17 	ldw	r2,-16(fp)
    204c:	10800044 	addi	r2,r2,1
    2050:	2085883a 	add	r2,r4,r2
    2054:	1009883a 	mov	r4,r2
    2058:	e0bfff17 	ldw	r2,-4(fp)
    205c:	1105883a 	add	r2,r2,r4
    2060:	10800003 	ldbu	r2,0(r2)
   for (y = 1 ; y < (sobel_height-1) ; y++) {
      #pragma unroll
      for (x = 1 ; x < (sobel_width-1) ; x++) {
            result += *gx_array[0]*
                  source[(y)*sobel_width+(x)];//;//*
            result += *gx_array[1]*
    2064:	10803fcc 	andi	r2,r2,255
    2068:	1885383a 	mul	r2,r3,r2
    206c:	1007883a 	mov	r3,r2
    2070:	e0bffe0b 	ldhu	r2,-8(fp)
    2074:	1885883a 	add	r2,r3,r2
    2078:	e0bffe0d 	sth	r2,-8(fp)
                  source[(y)*sobel_width+(x+1)];
            result += *gx_array[2]*
    207c:	00bfffc4 	movi	r2,-1
    2080:	10c03fcc 	andi	r3,r2,255
    2084:	18c0201c 	xori	r3,r3,128
    2088:	18ffe004 	addi	r3,r3,-128
                  source[(y)*sobel_width+(x+2)];
    208c:	d126cf17 	ldw	r4,-25796(gp)
    2090:	e0bffd17 	ldw	r2,-12(fp)
    2094:	2089383a 	mul	r4,r4,r2
    2098:	e0bffc17 	ldw	r2,-16(fp)
    209c:	10800084 	addi	r2,r2,2
    20a0:	2085883a 	add	r2,r4,r2
    20a4:	1009883a 	mov	r4,r2
    20a8:	e0bfff17 	ldw	r2,-4(fp)
    20ac:	1105883a 	add	r2,r2,r4
    20b0:	10800003 	ldbu	r2,0(r2)
      for (x = 1 ; x < (sobel_width-1) ; x++) {
            result += *gx_array[0]*
                  source[(y)*sobel_width+(x)];//;//*
            result += *gx_array[1]*
                  source[(y)*sobel_width+(x+1)];
            result += *gx_array[2]*
    20b4:	10803fcc 	andi	r2,r2,255
    20b8:	1885383a 	mul	r2,r3,r2
    20bc:	1007883a 	mov	r3,r2
    20c0:	e0bffe0b 	ldhu	r2,-8(fp)
    20c4:	1885883a 	add	r2,r3,r2
    20c8:	e0bffe0d 	sth	r2,-8(fp)
                  source[(y)*sobel_width+(x+2)];
            result += *gx_array[3]*
    20cc:	0005883a 	mov	r2,zero
    20d0:	10c03fcc 	andi	r3,r2,255
    20d4:	18c0201c 	xori	r3,r3,128
    20d8:	18ffe004 	addi	r3,r3,-128
                  source[(y)*sobel_width+(x+3)];
    20dc:	d126cf17 	ldw	r4,-25796(gp)
    20e0:	e0bffd17 	ldw	r2,-12(fp)
    20e4:	2089383a 	mul	r4,r4,r2
    20e8:	e0bffc17 	ldw	r2,-16(fp)
    20ec:	108000c4 	addi	r2,r2,3
    20f0:	2085883a 	add	r2,r4,r2
    20f4:	1009883a 	mov	r4,r2
    20f8:	e0bfff17 	ldw	r2,-4(fp)
    20fc:	1105883a 	add	r2,r2,r4
    2100:	10800003 	ldbu	r2,0(r2)
                  source[(y)*sobel_width+(x)];//;//*
            result += *gx_array[1]*
                  source[(y)*sobel_width+(x+1)];
            result += *gx_array[2]*
                  source[(y)*sobel_width+(x+2)];
            result += *gx_array[3]*
    2104:	10803fcc 	andi	r2,r2,255
    2108:	1885383a 	mul	r2,r3,r2
    210c:	1007883a 	mov	r3,r2
    2110:	e0bffe0b 	ldhu	r2,-8(fp)
    2114:	1885883a 	add	r2,r3,r2
    2118:	e0bffe0d 	sth	r2,-8(fp)
                  source[(y)*sobel_width+(x+3)];
                  
            result += *gx_array[3]*
    211c:	0005883a 	mov	r2,zero
    2120:	10c03fcc 	andi	r3,r2,255
    2124:	18c0201c 	xori	r3,r3,128
    2128:	18ffe004 	addi	r3,r3,-128
                  source[(y+1)*sobel_width+(x)];
    212c:	e0bffd17 	ldw	r2,-12(fp)
    2130:	11000044 	addi	r4,r2,1
    2134:	d0a6cf17 	ldw	r2,-25796(gp)
    2138:	2089383a 	mul	r4,r4,r2
    213c:	e0bffc17 	ldw	r2,-16(fp)
    2140:	2085883a 	add	r2,r4,r2
    2144:	1009883a 	mov	r4,r2
    2148:	e0bfff17 	ldw	r2,-4(fp)
    214c:	1105883a 	add	r2,r2,r4
    2150:	10800003 	ldbu	r2,0(r2)
            result += *gx_array[2]*
                  source[(y)*sobel_width+(x+2)];
            result += *gx_array[3]*
                  source[(y)*sobel_width+(x+3)];
                  
            result += *gx_array[3]*
    2154:	10803fcc 	andi	r2,r2,255
    2158:	1885383a 	mul	r2,r3,r2
    215c:	1007883a 	mov	r3,r2
    2160:	e0bffe0b 	ldhu	r2,-8(fp)
    2164:	1885883a 	add	r2,r3,r2
    2168:	e0bffe0d 	sth	r2,-8(fp)
                  source[(y+1)*sobel_width+(x)];
            result += *gx_array[3+1]*
    216c:	0005883a 	mov	r2,zero
    2170:	10c03fcc 	andi	r3,r2,255
    2174:	18c0201c 	xori	r3,r3,128
    2178:	18ffe004 	addi	r3,r3,-128
                  source[(y+1)*sobel_width+(x+1)];
    217c:	e0bffd17 	ldw	r2,-12(fp)
    2180:	11000044 	addi	r4,r2,1
    2184:	d0a6cf17 	ldw	r2,-25796(gp)
    2188:	2089383a 	mul	r4,r4,r2
    218c:	e0bffc17 	ldw	r2,-16(fp)
    2190:	10800044 	addi	r2,r2,1
    2194:	2085883a 	add	r2,r4,r2
    2198:	1009883a 	mov	r4,r2
    219c:	e0bfff17 	ldw	r2,-4(fp)
    21a0:	1105883a 	add	r2,r2,r4
    21a4:	10800003 	ldbu	r2,0(r2)
            result += *gx_array[3]*
                  source[(y)*sobel_width+(x+3)];
                  
            result += *gx_array[3]*
                  source[(y+1)*sobel_width+(x)];
            result += *gx_array[3+1]*
    21a8:	10803fcc 	andi	r2,r2,255
    21ac:	1885383a 	mul	r2,r3,r2
    21b0:	1007883a 	mov	r3,r2
    21b4:	e0bffe0b 	ldhu	r2,-8(fp)
    21b8:	1885883a 	add	r2,r3,r2
    21bc:	e0bffe0d 	sth	r2,-8(fp)
                  source[(y+1)*sobel_width+(x+1)];
            result += *gx_array[3+2]*
    21c0:	0005883a 	mov	r2,zero
    21c4:	10c03fcc 	andi	r3,r2,255
    21c8:	18c0201c 	xori	r3,r3,128
    21cc:	18ffe004 	addi	r3,r3,-128
                  source[(y+1)*sobel_width+(x+2)];
    21d0:	e0bffd17 	ldw	r2,-12(fp)
    21d4:	11000044 	addi	r4,r2,1
    21d8:	d0a6cf17 	ldw	r2,-25796(gp)
    21dc:	2089383a 	mul	r4,r4,r2
    21e0:	e0bffc17 	ldw	r2,-16(fp)
    21e4:	10800084 	addi	r2,r2,2
    21e8:	2085883a 	add	r2,r4,r2
    21ec:	1009883a 	mov	r4,r2
    21f0:	e0bfff17 	ldw	r2,-4(fp)
    21f4:	1105883a 	add	r2,r2,r4
    21f8:	10800003 	ldbu	r2,0(r2)
                  
            result += *gx_array[3]*
                  source[(y+1)*sobel_width+(x)];
            result += *gx_array[3+1]*
                  source[(y+1)*sobel_width+(x+1)];
            result += *gx_array[3+2]*
    21fc:	10803fcc 	andi	r2,r2,255
    2200:	1885383a 	mul	r2,r3,r2
    2204:	1007883a 	mov	r3,r2
    2208:	e0bffe0b 	ldhu	r2,-8(fp)
    220c:	1885883a 	add	r2,r3,r2
    2210:	e0bffe0d 	sth	r2,-8(fp)
                  source[(y+1)*sobel_width+(x+2)];
            result += *gx_array[3+3]*
    2214:	0005883a 	mov	r2,zero
    2218:	10c03fcc 	andi	r3,r2,255
    221c:	18c0201c 	xori	r3,r3,128
    2220:	18ffe004 	addi	r3,r3,-128
                  source[(y+1)*sobel_width+(x+3)];
    2224:	e0bffd17 	ldw	r2,-12(fp)
    2228:	11000044 	addi	r4,r2,1
    222c:	d0a6cf17 	ldw	r2,-25796(gp)
    2230:	2089383a 	mul	r4,r4,r2
    2234:	e0bffc17 	ldw	r2,-16(fp)
    2238:	108000c4 	addi	r2,r2,3
    223c:	2085883a 	add	r2,r4,r2
    2240:	1009883a 	mov	r4,r2
    2244:	e0bfff17 	ldw	r2,-4(fp)
    2248:	1105883a 	add	r2,r2,r4
    224c:	10800003 	ldbu	r2,0(r2)
                  source[(y+1)*sobel_width+(x)];
            result += *gx_array[3+1]*
                  source[(y+1)*sobel_width+(x+1)];
            result += *gx_array[3+2]*
                  source[(y+1)*sobel_width+(x+2)];
            result += *gx_array[3+3]*
    2250:	10803fcc 	andi	r2,r2,255
    2254:	1885383a 	mul	r2,r3,r2
    2258:	1007883a 	mov	r3,r2
    225c:	e0bffe0b 	ldhu	r2,-8(fp)
    2260:	1885883a 	add	r2,r3,r2
    2264:	e0bffe0d 	sth	r2,-8(fp)
                  source[(y+1)*sobel_width+(x+3)];

            result += *gx_array[6]*
    2268:	0005883a 	mov	r2,zero
    226c:	10c03fcc 	andi	r3,r2,255
    2270:	18c0201c 	xori	r3,r3,128
    2274:	18ffe004 	addi	r3,r3,-128
                  source[(y+2)*sobel_width+(x)];
    2278:	e0bffd17 	ldw	r2,-12(fp)
    227c:	11000084 	addi	r4,r2,2
    2280:	d0a6cf17 	ldw	r2,-25796(gp)
    2284:	2089383a 	mul	r4,r4,r2
    2288:	e0bffc17 	ldw	r2,-16(fp)
    228c:	2085883a 	add	r2,r4,r2
    2290:	1009883a 	mov	r4,r2
    2294:	e0bfff17 	ldw	r2,-4(fp)
    2298:	1105883a 	add	r2,r2,r4
    229c:	10800003 	ldbu	r2,0(r2)
            result += *gx_array[3+2]*
                  source[(y+1)*sobel_width+(x+2)];
            result += *gx_array[3+3]*
                  source[(y+1)*sobel_width+(x+3)];

            result += *gx_array[6]*
    22a0:	10803fcc 	andi	r2,r2,255
    22a4:	1885383a 	mul	r2,r3,r2
    22a8:	1007883a 	mov	r3,r2
    22ac:	e0bffe0b 	ldhu	r2,-8(fp)
    22b0:	1885883a 	add	r2,r3,r2
    22b4:	e0bffe0d 	sth	r2,-8(fp)
                  source[(y+2)*sobel_width+(x)];
            result += *gx_array[6+1]*
    22b8:	0005883a 	mov	r2,zero
    22bc:	10c03fcc 	andi	r3,r2,255
    22c0:	18c0201c 	xori	r3,r3,128
    22c4:	18ffe004 	addi	r3,r3,-128
                  source[(y+2)*sobel_width+(x+1)];
    22c8:	e0bffd17 	ldw	r2,-12(fp)
    22cc:	11000084 	addi	r4,r2,2
    22d0:	d0a6cf17 	ldw	r2,-25796(gp)
    22d4:	2089383a 	mul	r4,r4,r2
    22d8:	e0bffc17 	ldw	r2,-16(fp)
    22dc:	10800044 	addi	r2,r2,1
    22e0:	2085883a 	add	r2,r4,r2
    22e4:	1009883a 	mov	r4,r2
    22e8:	e0bfff17 	ldw	r2,-4(fp)
    22ec:	1105883a 	add	r2,r2,r4
    22f0:	10800003 	ldbu	r2,0(r2)
            result += *gx_array[3+3]*
                  source[(y+1)*sobel_width+(x+3)];

            result += *gx_array[6]*
                  source[(y+2)*sobel_width+(x)];
            result += *gx_array[6+1]*
    22f4:	10803fcc 	andi	r2,r2,255
    22f8:	1885383a 	mul	r2,r3,r2
    22fc:	1007883a 	mov	r3,r2
    2300:	e0bffe0b 	ldhu	r2,-8(fp)
    2304:	1885883a 	add	r2,r3,r2
    2308:	e0bffe0d 	sth	r2,-8(fp)
                  source[(y+2)*sobel_width+(x+1)];
            result += *gx_array[6+2]*
    230c:	0005883a 	mov	r2,zero
    2310:	10c03fcc 	andi	r3,r2,255
    2314:	18c0201c 	xori	r3,r3,128
    2318:	18ffe004 	addi	r3,r3,-128
                  source[(y+2)*sobel_width+(x+2)];
    231c:	e0bffd17 	ldw	r2,-12(fp)
    2320:	11000084 	addi	r4,r2,2
    2324:	d0a6cf17 	ldw	r2,-25796(gp)
    2328:	2089383a 	mul	r4,r4,r2
    232c:	e0bffc17 	ldw	r2,-16(fp)
    2330:	10800084 	addi	r2,r2,2
    2334:	2085883a 	add	r2,r4,r2
    2338:	1009883a 	mov	r4,r2
    233c:	e0bfff17 	ldw	r2,-4(fp)
    2340:	1105883a 	add	r2,r2,r4
    2344:	10800003 	ldbu	r2,0(r2)

            result += *gx_array[6]*
                  source[(y+2)*sobel_width+(x)];
            result += *gx_array[6+1]*
                  source[(y+2)*sobel_width+(x+1)];
            result += *gx_array[6+2]*
    2348:	10803fcc 	andi	r2,r2,255
    234c:	1885383a 	mul	r2,r3,r2
    2350:	1007883a 	mov	r3,r2
    2354:	e0bffe0b 	ldhu	r2,-8(fp)
    2358:	1885883a 	add	r2,r3,r2
    235c:	e0bffe0d 	sth	r2,-8(fp)
                  source[(y+2)*sobel_width+(x+2)];
            result += *gx_array[6+3]*
    2360:	0005883a 	mov	r2,zero
    2364:	10c03fcc 	andi	r3,r2,255
    2368:	18c0201c 	xori	r3,r3,128
    236c:	18ffe004 	addi	r3,r3,-128
                  source[(y+2)*sobel_width+(x+3)];
    2370:	e0bffd17 	ldw	r2,-12(fp)
    2374:	11000084 	addi	r4,r2,2
    2378:	d0a6cf17 	ldw	r2,-25796(gp)
    237c:	2089383a 	mul	r4,r4,r2
    2380:	e0bffc17 	ldw	r2,-16(fp)
    2384:	108000c4 	addi	r2,r2,3
    2388:	2085883a 	add	r2,r4,r2
    238c:	1009883a 	mov	r4,r2
    2390:	e0bfff17 	ldw	r2,-4(fp)
    2394:	1105883a 	add	r2,r2,r4
    2398:	10800003 	ldbu	r2,0(r2)
                  source[(y+2)*sobel_width+(x)];
            result += *gx_array[6+1]*
                  source[(y+2)*sobel_width+(x+1)];
            result += *gx_array[6+2]*
                  source[(y+2)*sobel_width+(x+2)];
            result += *gx_array[6+3]*
    239c:	10803fcc 	andi	r2,r2,255
    23a0:	1885383a 	mul	r2,r3,r2
    23a4:	1007883a 	mov	r3,r2
    23a8:	e0bffe0b 	ldhu	r2,-8(fp)
    23ac:	1885883a 	add	r2,r3,r2
    23b0:	e0bffe0d 	sth	r2,-8(fp)
                  source[(y+2)*sobel_width+(x+3)];

            result += *gx_array[12]*
    23b4:	0005883a 	mov	r2,zero
    23b8:	10c03fcc 	andi	r3,r2,255
    23bc:	18c0201c 	xori	r3,r3,128
    23c0:	18ffe004 	addi	r3,r3,-128
                  source[(y+3)*sobel_width+(x)];
    23c4:	e0bffd17 	ldw	r2,-12(fp)
    23c8:	110000c4 	addi	r4,r2,3
    23cc:	d0a6cf17 	ldw	r2,-25796(gp)
    23d0:	2089383a 	mul	r4,r4,r2
    23d4:	e0bffc17 	ldw	r2,-16(fp)
    23d8:	2085883a 	add	r2,r4,r2
    23dc:	1009883a 	mov	r4,r2
    23e0:	e0bfff17 	ldw	r2,-4(fp)
    23e4:	1105883a 	add	r2,r2,r4
    23e8:	10800003 	ldbu	r2,0(r2)
            result += *gx_array[6+2]*
                  source[(y+2)*sobel_width+(x+2)];
            result += *gx_array[6+3]*
                  source[(y+2)*sobel_width+(x+3)];

            result += *gx_array[12]*
    23ec:	10803fcc 	andi	r2,r2,255
    23f0:	1885383a 	mul	r2,r3,r2
    23f4:	1007883a 	mov	r3,r2
    23f8:	e0bffe0b 	ldhu	r2,-8(fp)
    23fc:	1885883a 	add	r2,r3,r2
    2400:	e0bffe0d 	sth	r2,-8(fp)
                  source[(y+3)*sobel_width+(x)];
            result += *gx_array[12+1]*
    2404:	0005883a 	mov	r2,zero
    2408:	10c03fcc 	andi	r3,r2,255
    240c:	18c0201c 	xori	r3,r3,128
    2410:	18ffe004 	addi	r3,r3,-128
                  source[(y+3)*sobel_width+(x+1)];
    2414:	e0bffd17 	ldw	r2,-12(fp)
    2418:	110000c4 	addi	r4,r2,3
    241c:	d0a6cf17 	ldw	r2,-25796(gp)
    2420:	2089383a 	mul	r4,r4,r2
    2424:	e0bffc17 	ldw	r2,-16(fp)
    2428:	10800044 	addi	r2,r2,1
    242c:	2085883a 	add	r2,r4,r2
    2430:	1009883a 	mov	r4,r2
    2434:	e0bfff17 	ldw	r2,-4(fp)
    2438:	1105883a 	add	r2,r2,r4
    243c:	10800003 	ldbu	r2,0(r2)
            result += *gx_array[6+3]*
                  source[(y+2)*sobel_width+(x+3)];

            result += *gx_array[12]*
                  source[(y+3)*sobel_width+(x)];
            result += *gx_array[12+1]*
    2440:	10803fcc 	andi	r2,r2,255
    2444:	1885383a 	mul	r2,r3,r2
    2448:	1007883a 	mov	r3,r2
    244c:	e0bffe0b 	ldhu	r2,-8(fp)
    2450:	1885883a 	add	r2,r3,r2
    2454:	e0bffe0d 	sth	r2,-8(fp)
                  source[(y+3)*sobel_width+(x+1)];
            result += *gx_array[12+2]*
    2458:	0005883a 	mov	r2,zero
    245c:	10c03fcc 	andi	r3,r2,255
    2460:	18c0201c 	xori	r3,r3,128
    2464:	18ffe004 	addi	r3,r3,-128
                  source[(y+3)*sobel_width+(x+2)];
    2468:	e0bffd17 	ldw	r2,-12(fp)
    246c:	110000c4 	addi	r4,r2,3
    2470:	d0a6cf17 	ldw	r2,-25796(gp)
    2474:	2089383a 	mul	r4,r4,r2
    2478:	e0bffc17 	ldw	r2,-16(fp)
    247c:	10800084 	addi	r2,r2,2
    2480:	2085883a 	add	r2,r4,r2
    2484:	1009883a 	mov	r4,r2
    2488:	e0bfff17 	ldw	r2,-4(fp)
    248c:	1105883a 	add	r2,r2,r4
    2490:	10800003 	ldbu	r2,0(r2)

            result += *gx_array[12]*
                  source[(y+3)*sobel_width+(x)];
            result += *gx_array[12+1]*
                  source[(y+3)*sobel_width+(x+1)];
            result += *gx_array[12+2]*
    2494:	10803fcc 	andi	r2,r2,255
    2498:	1885383a 	mul	r2,r3,r2
    249c:	1007883a 	mov	r3,r2
    24a0:	e0bffe0b 	ldhu	r2,-8(fp)
    24a4:	1885883a 	add	r2,r3,r2
    24a8:	e0bffe0d 	sth	r2,-8(fp)
                  source[(y+3)*sobel_width+(x+2)];
            result += *gx_array[12+3]*
    24ac:	0005883a 	mov	r2,zero
    24b0:	10c03fcc 	andi	r3,r2,255
    24b4:	18c0201c 	xori	r3,r3,128
    24b8:	18ffe004 	addi	r3,r3,-128
                  source[(y+3)*sobel_width+(x+3)];
    24bc:	e0bffd17 	ldw	r2,-12(fp)
    24c0:	110000c4 	addi	r4,r2,3
    24c4:	d0a6cf17 	ldw	r2,-25796(gp)
    24c8:	2089383a 	mul	r4,r4,r2
    24cc:	e0bffc17 	ldw	r2,-16(fp)
    24d0:	108000c4 	addi	r2,r2,3
    24d4:	2085883a 	add	r2,r4,r2
    24d8:	1009883a 	mov	r4,r2
    24dc:	e0bfff17 	ldw	r2,-4(fp)
    24e0:	1105883a 	add	r2,r2,r4
    24e4:	10800003 	ldbu	r2,0(r2)
                  source[(y+3)*sobel_width+(x)];
            result += *gx_array[12+1]*
                  source[(y+3)*sobel_width+(x+1)];
            result += *gx_array[12+2]*
                  source[(y+3)*sobel_width+(x+2)];
            result += *gx_array[12+3]*
    24e8:	10803fcc 	andi	r2,r2,255
    24ec:	1885383a 	mul	r2,r3,r2
    24f0:	1007883a 	mov	r3,r2
    24f4:	e0bffe0b 	ldhu	r2,-8(fp)
    24f8:	1885883a 	add	r2,r3,r2
    24fc:	e0bffe0d 	sth	r2,-8(fp)
                  source[(y+3)*sobel_width+(x+3)];
            sobel_x_result[y*sobel_width+x] = result;//sobel_mac(source,x,y,gx_array,sobel_width);
    2500:	d0e6d217 	ldw	r3,-25784(gp)
    2504:	d126cf17 	ldw	r4,-25796(gp)
    2508:	e0bffd17 	ldw	r2,-12(fp)
    250c:	2089383a 	mul	r4,r4,r2
    2510:	e0bffc17 	ldw	r2,-16(fp)
    2514:	2085883a 	add	r2,r4,r2
    2518:	1085883a 	add	r2,r2,r2
    251c:	1885883a 	add	r2,r3,r2
    2520:	e0fffe0b 	ldhu	r3,-8(fp)
    2524:	10c0000d 	sth	r3,0(r2)

   short result = 0;
   #pragma unroll
   for (y = 1 ; y < (sobel_height-1) ; y++) {
      #pragma unroll
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    2528:	e0bffc17 	ldw	r2,-16(fp)
    252c:	10800044 	addi	r2,r2,1
    2530:	e0bffc15 	stw	r2,-16(fp)
    2534:	d0a6cf17 	ldw	r2,-25796(gp)
    2538:	10bfffc4 	addi	r2,r2,-1
    253c:	e0fffc17 	ldw	r3,-16(fp)
    2540:	18bea716 	blt	r3,r2,1fe0 <__alt_data_end+0xff001fe0>
   int idx;
   //unrolling loop

   short result = 0;
   #pragma unroll
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    2544:	e0bffd17 	ldw	r2,-12(fp)
    2548:	10800044 	addi	r2,r2,1
    254c:	e0bffd15 	stw	r2,-12(fp)
    2550:	d0a6d117 	ldw	r2,-25788(gp)
    2554:	10bfffc4 	addi	r2,r2,-1
    2558:	e0fffd17 	ldw	r3,-12(fp)
    255c:	18be9d16 	blt	r3,r2,1fd4 <__alt_data_end+0xff001fd4>
            result += *gx_array[12+3]*
                  source[(y+3)*sobel_width+(x+3)];
            sobel_x_result[y*sobel_width+x] = result;//sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}
    2560:	0001883a 	nop
    2564:	e037883a 	mov	sp,fp
    2568:	df000017 	ldw	fp,0(sp)
    256c:	dec00104 	addi	sp,sp,4
    2570:	f800283a 	ret

00002574 <sobel_x_with_rgb>:

void sobel_x_with_rgb( unsigned char *source ) {
    2574:	defff904 	addi	sp,sp,-28
    2578:	dfc00615 	stw	ra,24(sp)
    257c:	df000515 	stw	fp,20(sp)
    2580:	df000504 	addi	fp,sp,20
    2584:	e13fff15 	stw	r4,-4(fp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    2588:	00800044 	movi	r2,1
    258c:	e0bffd15 	stw	r2,-12(fp)
    2590:	00003d06 	br	2688 <sobel_x_with_rgb+0x114>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    2594:	00800044 	movi	r2,1
    2598:	e0bffc15 	stw	r2,-16(fp)
    259c:	00003306 	br	266c <sobel_x_with_rgb+0xf8>
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
    25a0:	d0a6cf17 	ldw	r2,-25796(gp)
    25a4:	d8800015 	stw	r2,0(sp)
    25a8:	01c00074 	movhi	r7,1
    25ac:	39c9ea04 	addi	r7,r7,10152
    25b0:	e1bffd17 	ldw	r6,-12(fp)
    25b4:	e17ffc17 	ldw	r5,-16(fp)
    25b8:	e13fff17 	ldw	r4,-4(fp)
    25bc:	00019ec0 	call	19ec <sobel_mac>
    25c0:	e0bffe0d 	sth	r2,-8(fp)
          sobel_x_result[y*sobel_width+x] = result;
    25c4:	d0e6d217 	ldw	r3,-25784(gp)
    25c8:	d126cf17 	ldw	r4,-25796(gp)
    25cc:	e0bffd17 	ldw	r2,-12(fp)
    25d0:	2089383a 	mul	r4,r4,r2
    25d4:	e0bffc17 	ldw	r2,-16(fp)
    25d8:	2085883a 	add	r2,r4,r2
    25dc:	1085883a 	add	r2,r2,r2
    25e0:	1885883a 	add	r2,r3,r2
    25e4:	e0fffe0b 	ldhu	r3,-8(fp)
    25e8:	10c0000d 	sth	r3,0(r2)
          if (result < 0) {
    25ec:	e0bffe0f 	ldh	r2,-8(fp)
    25f0:	10000e0e 	bge	r2,zero,262c <sobel_x_with_rgb+0xb8>
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    25f4:	d0e6d417 	ldw	r3,-25776(gp)
    25f8:	d126cf17 	ldw	r4,-25796(gp)
    25fc:	e0bffd17 	ldw	r2,-12(fp)
    2600:	2089383a 	mul	r4,r4,r2
    2604:	e0bffc17 	ldw	r2,-16(fp)
    2608:	2085883a 	add	r2,r4,r2
    260c:	1085883a 	add	r2,r2,r2
    2610:	1885883a 	add	r2,r3,r2
    2614:	e0fffe0f 	ldh	r3,-8(fp)
    2618:	00c7c83a 	sub	r3,zero,r3
    261c:	1807d0ba 	srai	r3,r3,2
    2620:	1806917a 	slli	r3,r3,5
    2624:	10c0000d 	sth	r3,0(r2)
    2628:	00000d06 	br	2660 <sobel_x_with_rgb+0xec>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    262c:	d0e6d417 	ldw	r3,-25776(gp)
    2630:	d126cf17 	ldw	r4,-25796(gp)
    2634:	e0bffd17 	ldw	r2,-12(fp)
    2638:	2089383a 	mul	r4,r4,r2
    263c:	e0bffc17 	ldw	r2,-16(fp)
    2640:	2085883a 	add	r2,r4,r2
    2644:	1085883a 	add	r2,r2,r2
    2648:	1885883a 	add	r2,r3,r2
    264c:	e0fffe0f 	ldh	r3,-8(fp)
    2650:	1807d0fa 	srai	r3,r3,3
    2654:	18ffffcc 	andi	r3,r3,65535
    2658:	180692fa 	slli	r3,r3,11
    265c:	10c0000d 	sth	r3,0(r2)
void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    2660:	e0bffc17 	ldw	r2,-16(fp)
    2664:	10800044 	addi	r2,r2,1
    2668:	e0bffc15 	stw	r2,-16(fp)
    266c:	d0a6cf17 	ldw	r2,-25796(gp)
    2670:	10bfffc4 	addi	r2,r2,-1
    2674:	e0fffc17 	ldw	r3,-16(fp)
    2678:	18bfc916 	blt	r3,r2,25a0 <__alt_data_end+0xff0025a0>

void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    267c:	e0bffd17 	ldw	r2,-12(fp)
    2680:	10800044 	addi	r2,r2,1
    2684:	e0bffd15 	stw	r2,-12(fp)
    2688:	d0a6d117 	ldw	r2,-25788(gp)
    268c:	10bfffc4 	addi	r2,r2,-1
    2690:	e0fffd17 	ldw	r3,-12(fp)
    2694:	18bfbf16 	blt	r3,r2,2594 <__alt_data_end+0xff002594>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
          }
      }
   }
}
    2698:	0001883a 	nop
    269c:	e037883a 	mov	sp,fp
    26a0:	dfc00117 	ldw	ra,4(sp)
    26a4:	df000017 	ldw	fp,0(sp)
    26a8:	dec00204 	addi	sp,sp,8
    26ac:	f800283a 	ret

000026b0 <sobel_y>:

void sobel_y( unsigned char *source ) {
    26b0:	defffb04 	addi	sp,sp,-20
    26b4:	df000415 	stw	fp,16(sp)
    26b8:	df000404 	addi	fp,sp,16
    26bc:	e13fff15 	stw	r4,-4(fp)
   int x,y;
   short result = 0;
    26c0:	e03ffe0d 	sth	zero,-8(fp)
   #pragma unroll
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    26c4:	00800044 	movi	r2,1
    26c8:	e0bffd15 	stw	r2,-12(fp)
    26cc:	00015f06 	br	2c4c <sobel_y+0x59c>
      #pragma unroll
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    26d0:	00800044 	movi	r2,1
    26d4:	e0bffc15 	stw	r2,-16(fp)
    26d8:	00015506 	br	2c30 <sobel_y+0x580>
            result += *gy_array[0]*
    26dc:	00800044 	movi	r2,1
    26e0:	10c03fcc 	andi	r3,r2,255
    26e4:	18c0201c 	xori	r3,r3,128
    26e8:	18ffe004 	addi	r3,r3,-128
                  source[(y)*sobel_width+(x)];
    26ec:	d126cf17 	ldw	r4,-25796(gp)
    26f0:	e0bffd17 	ldw	r2,-12(fp)
    26f4:	2089383a 	mul	r4,r4,r2
    26f8:	e0bffc17 	ldw	r2,-16(fp)
    26fc:	2085883a 	add	r2,r4,r2
    2700:	1009883a 	mov	r4,r2
    2704:	e0bfff17 	ldw	r2,-4(fp)
    2708:	1105883a 	add	r2,r2,r4
    270c:	10800003 	ldbu	r2,0(r2)
   short result = 0;
   #pragma unroll
   for (y = 1 ; y < (sobel_height-1) ; y++) {
      #pragma unroll
      for (x = 1 ; x < (sobel_width-1) ; x++) {
            result += *gy_array[0]*
    2710:	10803fcc 	andi	r2,r2,255
    2714:	1885383a 	mul	r2,r3,r2
    2718:	1007883a 	mov	r3,r2
    271c:	e0bffe0b 	ldhu	r2,-8(fp)
    2720:	1885883a 	add	r2,r3,r2
    2724:	e0bffe0d 	sth	r2,-8(fp)
                  source[(y)*sobel_width+(x)];
            result += *gy_array[0]*
    2728:	00800044 	movi	r2,1
    272c:	10c03fcc 	andi	r3,r2,255
    2730:	18c0201c 	xori	r3,r3,128
    2734:	18ffe004 	addi	r3,r3,-128
                  source[(y)*sobel_width+(x+1)];
    2738:	d126cf17 	ldw	r4,-25796(gp)
    273c:	e0bffd17 	ldw	r2,-12(fp)
    2740:	2089383a 	mul	r4,r4,r2
    2744:	e0bffc17 	ldw	r2,-16(fp)
    2748:	10800044 	addi	r2,r2,1
    274c:	2085883a 	add	r2,r4,r2
    2750:	1009883a 	mov	r4,r2
    2754:	e0bfff17 	ldw	r2,-4(fp)
    2758:	1105883a 	add	r2,r2,r4
    275c:	10800003 	ldbu	r2,0(r2)
   for (y = 1 ; y < (sobel_height-1) ; y++) {
      #pragma unroll
      for (x = 1 ; x < (sobel_width-1) ; x++) {
            result += *gy_array[0]*
                  source[(y)*sobel_width+(x)];
            result += *gy_array[0]*
    2760:	10803fcc 	andi	r2,r2,255
    2764:	1885383a 	mul	r2,r3,r2
    2768:	1007883a 	mov	r3,r2
    276c:	e0bffe0b 	ldhu	r2,-8(fp)
    2770:	1885883a 	add	r2,r3,r2
    2774:	e0bffe0d 	sth	r2,-8(fp)
                  source[(y)*sobel_width+(x+1)];
            result += *gy_array[0]*
    2778:	00800044 	movi	r2,1
    277c:	10c03fcc 	andi	r3,r2,255
    2780:	18c0201c 	xori	r3,r3,128
    2784:	18ffe004 	addi	r3,r3,-128
            		source[(y)*sobel_width+(x+2)];
    2788:	d126cf17 	ldw	r4,-25796(gp)
    278c:	e0bffd17 	ldw	r2,-12(fp)
    2790:	2089383a 	mul	r4,r4,r2
    2794:	e0bffc17 	ldw	r2,-16(fp)
    2798:	10800084 	addi	r2,r2,2
    279c:	2085883a 	add	r2,r4,r2
    27a0:	1009883a 	mov	r4,r2
    27a4:	e0bfff17 	ldw	r2,-4(fp)
    27a8:	1105883a 	add	r2,r2,r4
    27ac:	10800003 	ldbu	r2,0(r2)
      for (x = 1 ; x < (sobel_width-1) ; x++) {
            result += *gy_array[0]*
                  source[(y)*sobel_width+(x)];
            result += *gy_array[0]*
                  source[(y)*sobel_width+(x+1)];
            result += *gy_array[0]*
    27b0:	10803fcc 	andi	r2,r2,255
    27b4:	1885383a 	mul	r2,r3,r2
    27b8:	1007883a 	mov	r3,r2
    27bc:	e0bffe0b 	ldhu	r2,-8(fp)
    27c0:	1885883a 	add	r2,r3,r2
    27c4:	e0bffe0d 	sth	r2,-8(fp)
            		source[(y)*sobel_width+(x+2)];
            result += *gy_array[0]*
    27c8:	00800044 	movi	r2,1
    27cc:	10c03fcc 	andi	r3,r2,255
    27d0:	18c0201c 	xori	r3,r3,128
    27d4:	18ffe004 	addi	r3,r3,-128
                  source[(y)*sobel_width+(x+3)];
    27d8:	d126cf17 	ldw	r4,-25796(gp)
    27dc:	e0bffd17 	ldw	r2,-12(fp)
    27e0:	2089383a 	mul	r4,r4,r2
    27e4:	e0bffc17 	ldw	r2,-16(fp)
    27e8:	108000c4 	addi	r2,r2,3
    27ec:	2085883a 	add	r2,r4,r2
    27f0:	1009883a 	mov	r4,r2
    27f4:	e0bfff17 	ldw	r2,-4(fp)
    27f8:	1105883a 	add	r2,r2,r4
    27fc:	10800003 	ldbu	r2,0(r2)
                  source[(y)*sobel_width+(x)];
            result += *gy_array[0]*
                  source[(y)*sobel_width+(x+1)];
            result += *gy_array[0]*
            		source[(y)*sobel_width+(x+2)];
            result += *gy_array[0]*
    2800:	10803fcc 	andi	r2,r2,255
    2804:	1885383a 	mul	r2,r3,r2
    2808:	1007883a 	mov	r3,r2
    280c:	e0bffe0b 	ldhu	r2,-8(fp)
    2810:	1885883a 	add	r2,r3,r2
    2814:	e0bffe0d 	sth	r2,-8(fp)
                  source[(y)*sobel_width+(x+3)];
                  
            result += *gy_array[1]*
    2818:	0005883a 	mov	r2,zero
    281c:	10c03fcc 	andi	r3,r2,255
    2820:	18c0201c 	xori	r3,r3,128
    2824:	18ffe004 	addi	r3,r3,-128
                  source[(y+1)*sobel_width+(x)];
    2828:	e0bffd17 	ldw	r2,-12(fp)
    282c:	11000044 	addi	r4,r2,1
    2830:	d0a6cf17 	ldw	r2,-25796(gp)
    2834:	2089383a 	mul	r4,r4,r2
    2838:	e0bffc17 	ldw	r2,-16(fp)
    283c:	2085883a 	add	r2,r4,r2
    2840:	1009883a 	mov	r4,r2
    2844:	e0bfff17 	ldw	r2,-4(fp)
    2848:	1105883a 	add	r2,r2,r4
    284c:	10800003 	ldbu	r2,0(r2)
            result += *gy_array[0]*
            		source[(y)*sobel_width+(x+2)];
            result += *gy_array[0]*
                  source[(y)*sobel_width+(x+3)];
                  
            result += *gy_array[1]*
    2850:	10803fcc 	andi	r2,r2,255
    2854:	1885383a 	mul	r2,r3,r2
    2858:	1007883a 	mov	r3,r2
    285c:	e0bffe0b 	ldhu	r2,-8(fp)
    2860:	1885883a 	add	r2,r3,r2
    2864:	e0bffe0d 	sth	r2,-8(fp)
                  source[(y+1)*sobel_width+(x)];
            result += *gy_array[1]*
    2868:	0005883a 	mov	r2,zero
    286c:	10c03fcc 	andi	r3,r2,255
    2870:	18c0201c 	xori	r3,r3,128
    2874:	18ffe004 	addi	r3,r3,-128
                  source[(y+1)*sobel_width+(x+1)];
    2878:	e0bffd17 	ldw	r2,-12(fp)
    287c:	11000044 	addi	r4,r2,1
    2880:	d0a6cf17 	ldw	r2,-25796(gp)
    2884:	2089383a 	mul	r4,r4,r2
    2888:	e0bffc17 	ldw	r2,-16(fp)
    288c:	10800044 	addi	r2,r2,1
    2890:	2085883a 	add	r2,r4,r2
    2894:	1009883a 	mov	r4,r2
    2898:	e0bfff17 	ldw	r2,-4(fp)
    289c:	1105883a 	add	r2,r2,r4
    28a0:	10800003 	ldbu	r2,0(r2)
            result += *gy_array[0]*
                  source[(y)*sobel_width+(x+3)];
                  
            result += *gy_array[1]*
                  source[(y+1)*sobel_width+(x)];
            result += *gy_array[1]*
    28a4:	10803fcc 	andi	r2,r2,255
    28a8:	1885383a 	mul	r2,r3,r2
    28ac:	1007883a 	mov	r3,r2
    28b0:	e0bffe0b 	ldhu	r2,-8(fp)
    28b4:	1885883a 	add	r2,r3,r2
    28b8:	e0bffe0d 	sth	r2,-8(fp)
                  source[(y+1)*sobel_width+(x+1)];
            result += *gy_array[1]*
    28bc:	0005883a 	mov	r2,zero
    28c0:	10c03fcc 	andi	r3,r2,255
    28c4:	18c0201c 	xori	r3,r3,128
    28c8:	18ffe004 	addi	r3,r3,-128
            		source[(y+1)*sobel_width+(x+2)];
    28cc:	e0bffd17 	ldw	r2,-12(fp)
    28d0:	11000044 	addi	r4,r2,1
    28d4:	d0a6cf17 	ldw	r2,-25796(gp)
    28d8:	2089383a 	mul	r4,r4,r2
    28dc:	e0bffc17 	ldw	r2,-16(fp)
    28e0:	10800084 	addi	r2,r2,2
    28e4:	2085883a 	add	r2,r4,r2
    28e8:	1009883a 	mov	r4,r2
    28ec:	e0bfff17 	ldw	r2,-4(fp)
    28f0:	1105883a 	add	r2,r2,r4
    28f4:	10800003 	ldbu	r2,0(r2)
                  
            result += *gy_array[1]*
                  source[(y+1)*sobel_width+(x)];
            result += *gy_array[1]*
                  source[(y+1)*sobel_width+(x+1)];
            result += *gy_array[1]*
    28f8:	10803fcc 	andi	r2,r2,255
    28fc:	1885383a 	mul	r2,r3,r2
    2900:	1007883a 	mov	r3,r2
    2904:	e0bffe0b 	ldhu	r2,-8(fp)
    2908:	1885883a 	add	r2,r3,r2
    290c:	e0bffe0d 	sth	r2,-8(fp)
            		source[(y+1)*sobel_width+(x+2)];
            result += *gy_array[1]*
    2910:	0005883a 	mov	r2,zero
    2914:	10c03fcc 	andi	r3,r2,255
    2918:	18c0201c 	xori	r3,r3,128
    291c:	18ffe004 	addi	r3,r3,-128
                  source[(y+1)*sobel_width+(x+3)];
    2920:	e0bffd17 	ldw	r2,-12(fp)
    2924:	11000044 	addi	r4,r2,1
    2928:	d0a6cf17 	ldw	r2,-25796(gp)
    292c:	2089383a 	mul	r4,r4,r2
    2930:	e0bffc17 	ldw	r2,-16(fp)
    2934:	108000c4 	addi	r2,r2,3
    2938:	2085883a 	add	r2,r4,r2
    293c:	1009883a 	mov	r4,r2
    2940:	e0bfff17 	ldw	r2,-4(fp)
    2944:	1105883a 	add	r2,r2,r4
    2948:	10800003 	ldbu	r2,0(r2)
                  source[(y+1)*sobel_width+(x)];
            result += *gy_array[1]*
                  source[(y+1)*sobel_width+(x+1)];
            result += *gy_array[1]*
            		source[(y+1)*sobel_width+(x+2)];
            result += *gy_array[1]*
    294c:	10803fcc 	andi	r2,r2,255
    2950:	1885383a 	mul	r2,r3,r2
    2954:	1007883a 	mov	r3,r2
    2958:	e0bffe0b 	ldhu	r2,-8(fp)
    295c:	1885883a 	add	r2,r3,r2
    2960:	e0bffe0d 	sth	r2,-8(fp)
                  source[(y+1)*sobel_width+(x+3)];

            result += *gy_array[2]*
    2964:	00bfffc4 	movi	r2,-1
    2968:	10c03fcc 	andi	r3,r2,255
    296c:	18c0201c 	xori	r3,r3,128
    2970:	18ffe004 	addi	r3,r3,-128
                  source[(y+2)*sobel_width+(x)];
    2974:	e0bffd17 	ldw	r2,-12(fp)
    2978:	11000084 	addi	r4,r2,2
    297c:	d0a6cf17 	ldw	r2,-25796(gp)
    2980:	2089383a 	mul	r4,r4,r2
    2984:	e0bffc17 	ldw	r2,-16(fp)
    2988:	2085883a 	add	r2,r4,r2
    298c:	1009883a 	mov	r4,r2
    2990:	e0bfff17 	ldw	r2,-4(fp)
    2994:	1105883a 	add	r2,r2,r4
    2998:	10800003 	ldbu	r2,0(r2)
            result += *gy_array[1]*
            		source[(y+1)*sobel_width+(x+2)];
            result += *gy_array[1]*
                  source[(y+1)*sobel_width+(x+3)];

            result += *gy_array[2]*
    299c:	10803fcc 	andi	r2,r2,255
    29a0:	1885383a 	mul	r2,r3,r2
    29a4:	1007883a 	mov	r3,r2
    29a8:	e0bffe0b 	ldhu	r2,-8(fp)
    29ac:	1885883a 	add	r2,r3,r2
    29b0:	e0bffe0d 	sth	r2,-8(fp)
                  source[(y+2)*sobel_width+(x)];
            result += *gy_array[2]*
    29b4:	00bfffc4 	movi	r2,-1
    29b8:	10c03fcc 	andi	r3,r2,255
    29bc:	18c0201c 	xori	r3,r3,128
    29c0:	18ffe004 	addi	r3,r3,-128
                  source[(y+2)*sobel_width+(x+1)];
    29c4:	e0bffd17 	ldw	r2,-12(fp)
    29c8:	11000084 	addi	r4,r2,2
    29cc:	d0a6cf17 	ldw	r2,-25796(gp)
    29d0:	2089383a 	mul	r4,r4,r2
    29d4:	e0bffc17 	ldw	r2,-16(fp)
    29d8:	10800044 	addi	r2,r2,1
    29dc:	2085883a 	add	r2,r4,r2
    29e0:	1009883a 	mov	r4,r2
    29e4:	e0bfff17 	ldw	r2,-4(fp)
    29e8:	1105883a 	add	r2,r2,r4
    29ec:	10800003 	ldbu	r2,0(r2)
            result += *gy_array[1]*
                  source[(y+1)*sobel_width+(x+3)];

            result += *gy_array[2]*
                  source[(y+2)*sobel_width+(x)];
            result += *gy_array[2]*
    29f0:	10803fcc 	andi	r2,r2,255
    29f4:	1885383a 	mul	r2,r3,r2
    29f8:	1007883a 	mov	r3,r2
    29fc:	e0bffe0b 	ldhu	r2,-8(fp)
    2a00:	1885883a 	add	r2,r3,r2
    2a04:	e0bffe0d 	sth	r2,-8(fp)
                  source[(y+2)*sobel_width+(x+1)];
            result += *gy_array[2]*
    2a08:	00bfffc4 	movi	r2,-1
    2a0c:	10c03fcc 	andi	r3,r2,255
    2a10:	18c0201c 	xori	r3,r3,128
    2a14:	18ffe004 	addi	r3,r3,-128
            		source[(y+2)*sobel_width+(x+2)];
    2a18:	e0bffd17 	ldw	r2,-12(fp)
    2a1c:	11000084 	addi	r4,r2,2
    2a20:	d0a6cf17 	ldw	r2,-25796(gp)
    2a24:	2089383a 	mul	r4,r4,r2
    2a28:	e0bffc17 	ldw	r2,-16(fp)
    2a2c:	10800084 	addi	r2,r2,2
    2a30:	2085883a 	add	r2,r4,r2
    2a34:	1009883a 	mov	r4,r2
    2a38:	e0bfff17 	ldw	r2,-4(fp)
    2a3c:	1105883a 	add	r2,r2,r4
    2a40:	10800003 	ldbu	r2,0(r2)

            result += *gy_array[2]*
                  source[(y+2)*sobel_width+(x)];
            result += *gy_array[2]*
                  source[(y+2)*sobel_width+(x+1)];
            result += *gy_array[2]*
    2a44:	10803fcc 	andi	r2,r2,255
    2a48:	1885383a 	mul	r2,r3,r2
    2a4c:	1007883a 	mov	r3,r2
    2a50:	e0bffe0b 	ldhu	r2,-8(fp)
    2a54:	1885883a 	add	r2,r3,r2
    2a58:	e0bffe0d 	sth	r2,-8(fp)
            		source[(y+2)*sobel_width+(x+2)];
            result += *gy_array[2]*
    2a5c:	00bfffc4 	movi	r2,-1
    2a60:	10c03fcc 	andi	r3,r2,255
    2a64:	18c0201c 	xori	r3,r3,128
    2a68:	18ffe004 	addi	r3,r3,-128
                  source[(y+2)*sobel_width+(x+3)];
    2a6c:	e0bffd17 	ldw	r2,-12(fp)
    2a70:	11000084 	addi	r4,r2,2
    2a74:	d0a6cf17 	ldw	r2,-25796(gp)
    2a78:	2089383a 	mul	r4,r4,r2
    2a7c:	e0bffc17 	ldw	r2,-16(fp)
    2a80:	108000c4 	addi	r2,r2,3
    2a84:	2085883a 	add	r2,r4,r2
    2a88:	1009883a 	mov	r4,r2
    2a8c:	e0bfff17 	ldw	r2,-4(fp)
    2a90:	1105883a 	add	r2,r2,r4
    2a94:	10800003 	ldbu	r2,0(r2)
                  source[(y+2)*sobel_width+(x)];
            result += *gy_array[2]*
                  source[(y+2)*sobel_width+(x+1)];
            result += *gy_array[2]*
            		source[(y+2)*sobel_width+(x+2)];
            result += *gy_array[2]*
    2a98:	10803fcc 	andi	r2,r2,255
    2a9c:	1885383a 	mul	r2,r3,r2
    2aa0:	1007883a 	mov	r3,r2
    2aa4:	e0bffe0b 	ldhu	r2,-8(fp)
    2aa8:	1885883a 	add	r2,r3,r2
    2aac:	e0bffe0d 	sth	r2,-8(fp)
                  source[(y+2)*sobel_width+(x+3)];

            result += *gy_array[3]*
    2ab0:	0005883a 	mov	r2,zero
    2ab4:	10c03fcc 	andi	r3,r2,255
    2ab8:	18c0201c 	xori	r3,r3,128
    2abc:	18ffe004 	addi	r3,r3,-128
                  source[(y+3)*sobel_width+(x)];
    2ac0:	e0bffd17 	ldw	r2,-12(fp)
    2ac4:	110000c4 	addi	r4,r2,3
    2ac8:	d0a6cf17 	ldw	r2,-25796(gp)
    2acc:	2089383a 	mul	r4,r4,r2
    2ad0:	e0bffc17 	ldw	r2,-16(fp)
    2ad4:	2085883a 	add	r2,r4,r2
    2ad8:	1009883a 	mov	r4,r2
    2adc:	e0bfff17 	ldw	r2,-4(fp)
    2ae0:	1105883a 	add	r2,r2,r4
    2ae4:	10800003 	ldbu	r2,0(r2)
            result += *gy_array[2]*
            		source[(y+2)*sobel_width+(x+2)];
            result += *gy_array[2]*
                  source[(y+2)*sobel_width+(x+3)];

            result += *gy_array[3]*
    2ae8:	10803fcc 	andi	r2,r2,255
    2aec:	1885383a 	mul	r2,r3,r2
    2af0:	1007883a 	mov	r3,r2
    2af4:	e0bffe0b 	ldhu	r2,-8(fp)
    2af8:	1885883a 	add	r2,r3,r2
    2afc:	e0bffe0d 	sth	r2,-8(fp)
                  source[(y+3)*sobel_width+(x)];
            result += *gy_array[3]*
    2b00:	0005883a 	mov	r2,zero
    2b04:	10c03fcc 	andi	r3,r2,255
    2b08:	18c0201c 	xori	r3,r3,128
    2b0c:	18ffe004 	addi	r3,r3,-128
                  source[(y+3)*sobel_width+(x+1)];
    2b10:	e0bffd17 	ldw	r2,-12(fp)
    2b14:	110000c4 	addi	r4,r2,3
    2b18:	d0a6cf17 	ldw	r2,-25796(gp)
    2b1c:	2089383a 	mul	r4,r4,r2
    2b20:	e0bffc17 	ldw	r2,-16(fp)
    2b24:	10800044 	addi	r2,r2,1
    2b28:	2085883a 	add	r2,r4,r2
    2b2c:	1009883a 	mov	r4,r2
    2b30:	e0bfff17 	ldw	r2,-4(fp)
    2b34:	1105883a 	add	r2,r2,r4
    2b38:	10800003 	ldbu	r2,0(r2)
            result += *gy_array[2]*
                  source[(y+2)*sobel_width+(x+3)];

            result += *gy_array[3]*
                  source[(y+3)*sobel_width+(x)];
            result += *gy_array[3]*
    2b3c:	10803fcc 	andi	r2,r2,255
    2b40:	1885383a 	mul	r2,r3,r2
    2b44:	1007883a 	mov	r3,r2
    2b48:	e0bffe0b 	ldhu	r2,-8(fp)
    2b4c:	1885883a 	add	r2,r3,r2
    2b50:	e0bffe0d 	sth	r2,-8(fp)
                  source[(y+3)*sobel_width+(x+1)];
            result += *gy_array[3]*
    2b54:	0005883a 	mov	r2,zero
    2b58:	10c03fcc 	andi	r3,r2,255
    2b5c:	18c0201c 	xori	r3,r3,128
    2b60:	18ffe004 	addi	r3,r3,-128
            		source[(y+3)*sobel_width+(x+2)];
    2b64:	e0bffd17 	ldw	r2,-12(fp)
    2b68:	110000c4 	addi	r4,r2,3
    2b6c:	d0a6cf17 	ldw	r2,-25796(gp)
    2b70:	2089383a 	mul	r4,r4,r2
    2b74:	e0bffc17 	ldw	r2,-16(fp)
    2b78:	10800084 	addi	r2,r2,2
    2b7c:	2085883a 	add	r2,r4,r2
    2b80:	1009883a 	mov	r4,r2
    2b84:	e0bfff17 	ldw	r2,-4(fp)
    2b88:	1105883a 	add	r2,r2,r4
    2b8c:	10800003 	ldbu	r2,0(r2)

            result += *gy_array[3]*
                  source[(y+3)*sobel_width+(x)];
            result += *gy_array[3]*
                  source[(y+3)*sobel_width+(x+1)];
            result += *gy_array[3]*
    2b90:	10803fcc 	andi	r2,r2,255
    2b94:	1885383a 	mul	r2,r3,r2
    2b98:	1007883a 	mov	r3,r2
    2b9c:	e0bffe0b 	ldhu	r2,-8(fp)
    2ba0:	1885883a 	add	r2,r3,r2
    2ba4:	e0bffe0d 	sth	r2,-8(fp)
            		source[(y+3)*sobel_width+(x+2)];
            result += *gy_array[3]*
    2ba8:	0005883a 	mov	r2,zero
    2bac:	10c03fcc 	andi	r3,r2,255
    2bb0:	18c0201c 	xori	r3,r3,128
    2bb4:	18ffe004 	addi	r3,r3,-128
                  source[(y+3)*sobel_width+(x+3)];
    2bb8:	e0bffd17 	ldw	r2,-12(fp)
    2bbc:	110000c4 	addi	r4,r2,3
    2bc0:	d0a6cf17 	ldw	r2,-25796(gp)
    2bc4:	2089383a 	mul	r4,r4,r2
    2bc8:	e0bffc17 	ldw	r2,-16(fp)
    2bcc:	108000c4 	addi	r2,r2,3
    2bd0:	2085883a 	add	r2,r4,r2
    2bd4:	1009883a 	mov	r4,r2
    2bd8:	e0bfff17 	ldw	r2,-4(fp)
    2bdc:	1105883a 	add	r2,r2,r4
    2be0:	10800003 	ldbu	r2,0(r2)
                  source[(y+3)*sobel_width+(x)];
            result += *gy_array[3]*
                  source[(y+3)*sobel_width+(x+1)];
            result += *gy_array[3]*
            		source[(y+3)*sobel_width+(x+2)];
            result += *gy_array[3]*
    2be4:	10803fcc 	andi	r2,r2,255
    2be8:	1885383a 	mul	r2,r3,r2
    2bec:	1007883a 	mov	r3,r2
    2bf0:	e0bffe0b 	ldhu	r2,-8(fp)
    2bf4:	1885883a 	add	r2,r3,r2
    2bf8:	e0bffe0d 	sth	r2,-8(fp)
                  source[(y+3)*sobel_width+(x+3)];
            sobel_x_result[y*sobel_width+x] = result;//sobel_mac(source,x,y,gx_array,sobel_width);
    2bfc:	d0e6d217 	ldw	r3,-25784(gp)
    2c00:	d126cf17 	ldw	r4,-25796(gp)
    2c04:	e0bffd17 	ldw	r2,-12(fp)
    2c08:	2089383a 	mul	r4,r4,r2
    2c0c:	e0bffc17 	ldw	r2,-16(fp)
    2c10:	2085883a 	add	r2,r4,r2
    2c14:	1085883a 	add	r2,r2,r2
    2c18:	1885883a 	add	r2,r3,r2
    2c1c:	e0fffe0b 	ldhu	r3,-8(fp)
    2c20:	10c0000d 	sth	r3,0(r2)
   int x,y;
   short result = 0;
   #pragma unroll
   for (y = 1 ; y < (sobel_height-1) ; y++) {
      #pragma unroll
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    2c24:	e0bffc17 	ldw	r2,-16(fp)
    2c28:	10800044 	addi	r2,r2,1
    2c2c:	e0bffc15 	stw	r2,-16(fp)
    2c30:	d0a6cf17 	ldw	r2,-25796(gp)
    2c34:	10bfffc4 	addi	r2,r2,-1
    2c38:	e0fffc17 	ldw	r3,-16(fp)
    2c3c:	18bea716 	blt	r3,r2,26dc <__alt_data_end+0xff0026dc>

void sobel_y( unsigned char *source ) {
   int x,y;
   short result = 0;
   #pragma unroll
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    2c40:	e0bffd17 	ldw	r2,-12(fp)
    2c44:	10800044 	addi	r2,r2,1
    2c48:	e0bffd15 	stw	r2,-12(fp)
    2c4c:	d0a6d117 	ldw	r2,-25788(gp)
    2c50:	10bfffc4 	addi	r2,r2,-1
    2c54:	e0fffd17 	ldw	r3,-12(fp)
    2c58:	18be9d16 	blt	r3,r2,26d0 <__alt_data_end+0xff0026d0>
            result += *gy_array[3]*
                  source[(y+3)*sobel_width+(x+3)];
            sobel_x_result[y*sobel_width+x] = result;//sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}
    2c5c:	0001883a 	nop
    2c60:	e037883a 	mov	sp,fp
    2c64:	df000017 	ldw	fp,0(sp)
    2c68:	dec00104 	addi	sp,sp,4
    2c6c:	f800283a 	ret

00002c70 <sobel_y_with_rgb>:
//change here,
void sobel_y_with_rgb( unsigned char *source ) {
    2c70:	defff904 	addi	sp,sp,-28
    2c74:	dfc00615 	stw	ra,24(sp)
    2c78:	df000515 	stw	fp,20(sp)
    2c7c:	df000504 	addi	fp,sp,20
    2c80:	e13fff15 	stw	r4,-4(fp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    2c84:	00800044 	movi	r2,1
    2c88:	e0bffd15 	stw	r2,-12(fp)
    2c8c:	00003d06 	br	2d84 <sobel_y_with_rgb+0x114>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    2c90:	00800044 	movi	r2,1
    2c94:	e0bffc15 	stw	r2,-16(fp)
    2c98:	00003306 	br	2d68 <sobel_y_with_rgb+0xf8>
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
    2c9c:	d0a6cf17 	ldw	r2,-25796(gp)
    2ca0:	d8800015 	stw	r2,0(sp)
    2ca4:	01c00074 	movhi	r7,1
    2ca8:	39c9ec44 	addi	r7,r7,10161
    2cac:	e1bffd17 	ldw	r6,-12(fp)
    2cb0:	e17ffc17 	ldw	r5,-16(fp)
    2cb4:	e13fff17 	ldw	r4,-4(fp)
    2cb8:	00019ec0 	call	19ec <sobel_mac>
    2cbc:	e0bffe0d 	sth	r2,-8(fp)
         sobel_y_result[y*sobel_width+x] = result;
    2cc0:	d0e6d317 	ldw	r3,-25780(gp)
    2cc4:	d126cf17 	ldw	r4,-25796(gp)
    2cc8:	e0bffd17 	ldw	r2,-12(fp)
    2ccc:	2089383a 	mul	r4,r4,r2
    2cd0:	e0bffc17 	ldw	r2,-16(fp)
    2cd4:	2085883a 	add	r2,r4,r2
    2cd8:	1085883a 	add	r2,r2,r2
    2cdc:	1885883a 	add	r2,r3,r2
    2ce0:	e0fffe0b 	ldhu	r3,-8(fp)
    2ce4:	10c0000d 	sth	r3,0(r2)
         if (result < 0) {
    2ce8:	e0bffe0f 	ldh	r2,-8(fp)
    2cec:	10000e0e 	bge	r2,zero,2d28 <sobel_y_with_rgb+0xb8>
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    2cf0:	d0e6d417 	ldw	r3,-25776(gp)
    2cf4:	d126cf17 	ldw	r4,-25796(gp)
    2cf8:	e0bffd17 	ldw	r2,-12(fp)
    2cfc:	2089383a 	mul	r4,r4,r2
    2d00:	e0bffc17 	ldw	r2,-16(fp)
    2d04:	2085883a 	add	r2,r4,r2
    2d08:	1085883a 	add	r2,r2,r2
    2d0c:	1885883a 	add	r2,r3,r2
    2d10:	e0fffe0f 	ldh	r3,-8(fp)
    2d14:	00c7c83a 	sub	r3,zero,r3
    2d18:	1807d0ba 	srai	r3,r3,2
    2d1c:	1806917a 	slli	r3,r3,5
    2d20:	10c0000d 	sth	r3,0(r2)
    2d24:	00000d06 	br	2d5c <sobel_y_with_rgb+0xec>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    2d28:	d0e6d417 	ldw	r3,-25776(gp)
    2d2c:	d126cf17 	ldw	r4,-25796(gp)
    2d30:	e0bffd17 	ldw	r2,-12(fp)
    2d34:	2089383a 	mul	r4,r4,r2
    2d38:	e0bffc17 	ldw	r2,-16(fp)
    2d3c:	2085883a 	add	r2,r4,r2
    2d40:	1085883a 	add	r2,r2,r2
    2d44:	1885883a 	add	r2,r3,r2
    2d48:	e0fffe0f 	ldh	r3,-8(fp)
    2d4c:	1807d0fa 	srai	r3,r3,3
    2d50:	18ffffcc 	andi	r3,r3,65535
    2d54:	180692fa 	slli	r3,r3,11
    2d58:	10c0000d 	sth	r3,0(r2)
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    2d5c:	e0bffc17 	ldw	r2,-16(fp)
    2d60:	10800044 	addi	r2,r2,1
    2d64:	e0bffc15 	stw	r2,-16(fp)
    2d68:	d0a6cf17 	ldw	r2,-25796(gp)
    2d6c:	10bfffc4 	addi	r2,r2,-1
    2d70:	e0fffc17 	ldw	r3,-16(fp)
    2d74:	18bfc916 	blt	r3,r2,2c9c <__alt_data_end+0xff002c9c>
//change here,
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    2d78:	e0bffd17 	ldw	r2,-12(fp)
    2d7c:	10800044 	addi	r2,r2,1
    2d80:	e0bffd15 	stw	r2,-12(fp)
    2d84:	d0a6d117 	ldw	r2,-25788(gp)
    2d88:	10bfffc4 	addi	r2,r2,-1
    2d8c:	e0fffd17 	ldw	r3,-12(fp)
    2d90:	18bfbf16 	blt	r3,r2,2c90 <__alt_data_end+0xff002c90>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
         }
      }
   }
}
    2d94:	0001883a 	nop
    2d98:	e037883a 	mov	sp,fp
    2d9c:	dfc00117 	ldw	ra,4(sp)
    2da0:	df000017 	ldw	fp,0(sp)
    2da4:	dec00204 	addi	sp,sp,8
    2da8:	f800283a 	ret

00002dac <sobel_threshold>:

void sobel_threshold(short threshold) {
    2dac:	defffa04 	addi	sp,sp,-24
    2db0:	df000515 	stw	fp,20(sp)
    2db4:	df000504 	addi	fp,sp,20
    2db8:	2005883a 	mov	r2,r4
    2dbc:	e0bfff0d 	sth	r2,-4(fp)
	int x,y,arrayindex;
	short sum,value;
   //unrolling loop
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    2dc0:	00800044 	movi	r2,1
    2dc4:	e0bffc15 	stw	r2,-16(fp)
    2dc8:	00003406 	br	2e9c <sobel_threshold+0xf0>
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    2dcc:	00800044 	movi	r2,1
    2dd0:	e0bffb15 	stw	r2,-20(fp)
    2dd4:	00002a06 	br	2e80 <sobel_threshold+0xd4>
			arrayindex = (y*sobel_width)+x;
    2dd8:	d0e6cf17 	ldw	r3,-25796(gp)
    2ddc:	e0bffc17 	ldw	r2,-16(fp)
    2de0:	1887383a 	mul	r3,r3,r2
    2de4:	e0bffb17 	ldw	r2,-20(fp)
    2de8:	1885883a 	add	r2,r3,r2
    2dec:	e0bffd15 	stw	r2,-12(fp)
			value = sobel_x_result[arrayindex];
    2df0:	d0e6d217 	ldw	r3,-25784(gp)
    2df4:	e0bffd17 	ldw	r2,-12(fp)
    2df8:	1085883a 	add	r2,r2,r2
    2dfc:	1885883a 	add	r2,r3,r2
    2e00:	1080000b 	ldhu	r2,0(r2)
    2e04:	e0bffe0d 	sth	r2,-8(fp)
			sum = (value < 0) ? -value : value;
    2e08:	e0bffe0f 	ldh	r2,-8(fp)
    2e0c:	1000010e 	bge	r2,zero,2e14 <sobel_threshold+0x68>
    2e10:	0085c83a 	sub	r2,zero,r2
    2e14:	e0bffe8d 	sth	r2,-6(fp)
			value = sobel_y_result[arrayindex];
    2e18:	d0e6d317 	ldw	r3,-25780(gp)
    2e1c:	e0bffd17 	ldw	r2,-12(fp)
    2e20:	1085883a 	add	r2,r2,r2
    2e24:	1885883a 	add	r2,r3,r2
    2e28:	1080000b 	ldhu	r2,0(r2)
    2e2c:	e0bffe0d 	sth	r2,-8(fp)
			sum += (value < 0) ? -value : value;
    2e30:	e0bffe0f 	ldh	r2,-8(fp)
    2e34:	1000010e 	bge	r2,zero,2e3c <sobel_threshold+0x90>
    2e38:	0085c83a 	sub	r2,zero,r2
    2e3c:	1007883a 	mov	r3,r2
    2e40:	e0bffe8b 	ldhu	r2,-6(fp)
    2e44:	1885883a 	add	r2,r3,r2
    2e48:	e0bffe8d 	sth	r2,-6(fp)
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    2e4c:	d0e6d017 	ldw	r3,-25792(gp)
    2e50:	e0bffd17 	ldw	r2,-12(fp)
    2e54:	1887883a 	add	r3,r3,r2
    2e58:	e0bffe8f 	ldh	r2,-6(fp)
    2e5c:	e13fff0f 	ldh	r4,-4(fp)
    2e60:	2080020e 	bge	r4,r2,2e6c <sobel_threshold+0xc0>
    2e64:	00bfffc4 	movi	r2,-1
    2e68:	00000106 	br	2e70 <sobel_threshold+0xc4>
    2e6c:	0005883a 	mov	r2,zero
    2e70:	18800005 	stb	r2,0(r3)
void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
   //unrolling loop
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    2e74:	e0bffb17 	ldw	r2,-20(fp)
    2e78:	10800044 	addi	r2,r2,1
    2e7c:	e0bffb15 	stw	r2,-20(fp)
    2e80:	d0a6cf17 	ldw	r2,-25796(gp)
    2e84:	10bfffc4 	addi	r2,r2,-1
    2e88:	e0fffb17 	ldw	r3,-20(fp)
    2e8c:	18bfd216 	blt	r3,r2,2dd8 <__alt_data_end+0xff002dd8>

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
   //unrolling loop
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    2e90:	e0bffc17 	ldw	r2,-16(fp)
    2e94:	10800044 	addi	r2,r2,1
    2e98:	e0bffc15 	stw	r2,-16(fp)
    2e9c:	d0a6d117 	ldw	r2,-25788(gp)
    2ea0:	10bfffc4 	addi	r2,r2,-1
    2ea4:	e0fffc17 	ldw	r3,-16(fp)
    2ea8:	18bfc816 	blt	r3,r2,2dcc <__alt_data_end+0xff002dcc>
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
		}
	}
}
    2eac:	0001883a 	nop
    2eb0:	e037883a 	mov	sp,fp
    2eb4:	df000017 	ldw	fp,0(sp)
    2eb8:	dec00104 	addi	sp,sp,4
    2ebc:	f800283a 	ret

00002ec0 <GetSobel_rgb>:

unsigned short *GetSobel_rgb() {
    2ec0:	deffff04 	addi	sp,sp,-4
    2ec4:	df000015 	stw	fp,0(sp)
    2ec8:	d839883a 	mov	fp,sp
	return sobel_rgb565;
    2ecc:	d0a6d417 	ldw	r2,-25776(gp)
}
    2ed0:	e037883a 	mov	sp,fp
    2ed4:	df000017 	ldw	fp,0(sp)
    2ed8:	dec00104 	addi	sp,sp,4
    2edc:	f800283a 	ret

00002ee0 <GetSobelResult>:

unsigned char *GetSobelResult() {
    2ee0:	deffff04 	addi	sp,sp,-4
    2ee4:	df000015 	stw	fp,0(sp)
    2ee8:	d839883a 	mov	fp,sp
	return sobel_result;
    2eec:	d0a6d017 	ldw	r2,-25792(gp)
}
    2ef0:	e037883a 	mov	sp,fp
    2ef4:	df000017 	ldw	fp,0(sp)
    2ef8:	dec00104 	addi	sp,sp,4
    2efc:	f800283a 	ret

00002f00 <vga_set_pointer>:
 */

#include <system.h>
#include <io.h>

void vga_set_pointer( void* image ) {
    2f00:	defffe04 	addi	sp,sp,-8
    2f04:	df000115 	stw	fp,4(sp)
    2f08:	df000104 	addi	fp,sp,4
    2f0c:	e13fff15 	stw	r4,-4(fp)
	IOWR_32DIRECT(VGA_DMA_0_BASE,0,(int)image);
    2f10:	e0ffff17 	ldw	r3,-4(fp)
    2f14:	00804034 	movhi	r2,256
    2f18:	10843404 	addi	r2,r2,4304
    2f1c:	10c00035 	stwio	r3,0(r2)
}
    2f20:	0001883a 	nop
    2f24:	e037883a 	mov	sp,fp
    2f28:	df000017 	ldw	fp,0(sp)
    2f2c:	dec00104 	addi	sp,sp,4
    2f30:	f800283a 	ret

00002f34 <vga_set_swap>:

void vga_set_swap(char swap) {
    2f34:	defffe04 	addi	sp,sp,-8
    2f38:	df000115 	stw	fp,4(sp)
    2f3c:	df000104 	addi	fp,sp,4
    2f40:	2005883a 	mov	r2,r4
    2f44:	e0bfff05 	stb	r2,-4(fp)
	IOWR_8DIRECT(VGA_DMA_0_BASE,4,swap);
    2f48:	e0ffff07 	ldb	r3,-4(fp)
    2f4c:	00804034 	movhi	r2,256
    2f50:	10843504 	addi	r2,r2,4308
    2f54:	10c00025 	stbio	r3,0(r2)
}
    2f58:	0001883a 	nop
    2f5c:	e037883a 	mov	sp,fp
    2f60:	df000017 	ldw	fp,0(sp)
    2f64:	dec00104 	addi	sp,sp,4
    2f68:	f800283a 	ret

00002f6c <__divsi3>:
    2f6c:	20001b16 	blt	r4,zero,2fdc <__divsi3+0x70>
    2f70:	000f883a 	mov	r7,zero
    2f74:	28001616 	blt	r5,zero,2fd0 <__divsi3+0x64>
    2f78:	200d883a 	mov	r6,r4
    2f7c:	29001a2e 	bgeu	r5,r4,2fe8 <__divsi3+0x7c>
    2f80:	00800804 	movi	r2,32
    2f84:	00c00044 	movi	r3,1
    2f88:	00000106 	br	2f90 <__divsi3+0x24>
    2f8c:	10000d26 	beq	r2,zero,2fc4 <__divsi3+0x58>
    2f90:	294b883a 	add	r5,r5,r5
    2f94:	10bfffc4 	addi	r2,r2,-1
    2f98:	18c7883a 	add	r3,r3,r3
    2f9c:	293ffb36 	bltu	r5,r4,2f8c <__alt_data_end+0xff002f8c>
    2fa0:	0005883a 	mov	r2,zero
    2fa4:	18000726 	beq	r3,zero,2fc4 <__divsi3+0x58>
    2fa8:	0005883a 	mov	r2,zero
    2fac:	31400236 	bltu	r6,r5,2fb8 <__divsi3+0x4c>
    2fb0:	314dc83a 	sub	r6,r6,r5
    2fb4:	10c4b03a 	or	r2,r2,r3
    2fb8:	1806d07a 	srli	r3,r3,1
    2fbc:	280ad07a 	srli	r5,r5,1
    2fc0:	183ffa1e 	bne	r3,zero,2fac <__alt_data_end+0xff002fac>
    2fc4:	38000126 	beq	r7,zero,2fcc <__divsi3+0x60>
    2fc8:	0085c83a 	sub	r2,zero,r2
    2fcc:	f800283a 	ret
    2fd0:	014bc83a 	sub	r5,zero,r5
    2fd4:	39c0005c 	xori	r7,r7,1
    2fd8:	003fe706 	br	2f78 <__alt_data_end+0xff002f78>
    2fdc:	0109c83a 	sub	r4,zero,r4
    2fe0:	01c00044 	movi	r7,1
    2fe4:	003fe306 	br	2f74 <__alt_data_end+0xff002f74>
    2fe8:	00c00044 	movi	r3,1
    2fec:	003fee06 	br	2fa8 <__alt_data_end+0xff002fa8>

00002ff0 <__modsi3>:
    2ff0:	20001716 	blt	r4,zero,3050 <__modsi3+0x60>
    2ff4:	000f883a 	mov	r7,zero
    2ff8:	2005883a 	mov	r2,r4
    2ffc:	28001216 	blt	r5,zero,3048 <__modsi3+0x58>
    3000:	2900162e 	bgeu	r5,r4,305c <__modsi3+0x6c>
    3004:	01800804 	movi	r6,32
    3008:	00c00044 	movi	r3,1
    300c:	00000106 	br	3014 <__modsi3+0x24>
    3010:	30000a26 	beq	r6,zero,303c <__modsi3+0x4c>
    3014:	294b883a 	add	r5,r5,r5
    3018:	31bfffc4 	addi	r6,r6,-1
    301c:	18c7883a 	add	r3,r3,r3
    3020:	293ffb36 	bltu	r5,r4,3010 <__alt_data_end+0xff003010>
    3024:	18000526 	beq	r3,zero,303c <__modsi3+0x4c>
    3028:	1806d07a 	srli	r3,r3,1
    302c:	11400136 	bltu	r2,r5,3034 <__modsi3+0x44>
    3030:	1145c83a 	sub	r2,r2,r5
    3034:	280ad07a 	srli	r5,r5,1
    3038:	183ffb1e 	bne	r3,zero,3028 <__alt_data_end+0xff003028>
    303c:	38000126 	beq	r7,zero,3044 <__modsi3+0x54>
    3040:	0085c83a 	sub	r2,zero,r2
    3044:	f800283a 	ret
    3048:	014bc83a 	sub	r5,zero,r5
    304c:	003fec06 	br	3000 <__alt_data_end+0xff003000>
    3050:	0109c83a 	sub	r4,zero,r4
    3054:	01c00044 	movi	r7,1
    3058:	003fe706 	br	2ff8 <__alt_data_end+0xff002ff8>
    305c:	00c00044 	movi	r3,1
    3060:	003ff106 	br	3028 <__alt_data_end+0xff003028>

00003064 <__udivsi3>:
    3064:	200d883a 	mov	r6,r4
    3068:	2900152e 	bgeu	r5,r4,30c0 <__udivsi3+0x5c>
    306c:	28001416 	blt	r5,zero,30c0 <__udivsi3+0x5c>
    3070:	00800804 	movi	r2,32
    3074:	00c00044 	movi	r3,1
    3078:	00000206 	br	3084 <__udivsi3+0x20>
    307c:	10000e26 	beq	r2,zero,30b8 <__udivsi3+0x54>
    3080:	28000516 	blt	r5,zero,3098 <__udivsi3+0x34>
    3084:	294b883a 	add	r5,r5,r5
    3088:	10bfffc4 	addi	r2,r2,-1
    308c:	18c7883a 	add	r3,r3,r3
    3090:	293ffa36 	bltu	r5,r4,307c <__alt_data_end+0xff00307c>
    3094:	18000826 	beq	r3,zero,30b8 <__udivsi3+0x54>
    3098:	0005883a 	mov	r2,zero
    309c:	31400236 	bltu	r6,r5,30a8 <__udivsi3+0x44>
    30a0:	314dc83a 	sub	r6,r6,r5
    30a4:	10c4b03a 	or	r2,r2,r3
    30a8:	1806d07a 	srli	r3,r3,1
    30ac:	280ad07a 	srli	r5,r5,1
    30b0:	183ffa1e 	bne	r3,zero,309c <__alt_data_end+0xff00309c>
    30b4:	f800283a 	ret
    30b8:	0005883a 	mov	r2,zero
    30bc:	f800283a 	ret
    30c0:	00c00044 	movi	r3,1
    30c4:	003ff406 	br	3098 <__alt_data_end+0xff003098>

000030c8 <__umodsi3>:
    30c8:	2005883a 	mov	r2,r4
    30cc:	2900122e 	bgeu	r5,r4,3118 <__umodsi3+0x50>
    30d0:	28001116 	blt	r5,zero,3118 <__umodsi3+0x50>
    30d4:	01800804 	movi	r6,32
    30d8:	00c00044 	movi	r3,1
    30dc:	00000206 	br	30e8 <__umodsi3+0x20>
    30e0:	30000c26 	beq	r6,zero,3114 <__umodsi3+0x4c>
    30e4:	28000516 	blt	r5,zero,30fc <__umodsi3+0x34>
    30e8:	294b883a 	add	r5,r5,r5
    30ec:	31bfffc4 	addi	r6,r6,-1
    30f0:	18c7883a 	add	r3,r3,r3
    30f4:	293ffa36 	bltu	r5,r4,30e0 <__alt_data_end+0xff0030e0>
    30f8:	18000626 	beq	r3,zero,3114 <__umodsi3+0x4c>
    30fc:	1806d07a 	srli	r3,r3,1
    3100:	11400136 	bltu	r2,r5,3108 <__umodsi3+0x40>
    3104:	1145c83a 	sub	r2,r2,r5
    3108:	280ad07a 	srli	r5,r5,1
    310c:	183ffb1e 	bne	r3,zero,30fc <__alt_data_end+0xff0030fc>
    3110:	f800283a 	ret
    3114:	f800283a 	ret
    3118:	00c00044 	movi	r3,1
    311c:	003ff706 	br	30fc <__alt_data_end+0xff0030fc>

00003120 <malloc>:
    3120:	00800074 	movhi	r2,1
    3124:	10915b04 	addi	r2,r2,17772
    3128:	200b883a 	mov	r5,r4
    312c:	11000017 	ldw	r4,0(r2)
    3130:	00031481 	jmpi	3148 <_malloc_r>

00003134 <free>:
    3134:	00800074 	movhi	r2,1
    3138:	10915b04 	addi	r2,r2,17772
    313c:	200b883a 	mov	r5,r4
    3140:	11000017 	ldw	r4,0(r2)
    3144:	0007f981 	jmpi	7f98 <_free_r>

00003148 <_malloc_r>:
    3148:	defff504 	addi	sp,sp,-44
    314c:	dc800315 	stw	r18,12(sp)
    3150:	dfc00a15 	stw	ra,40(sp)
    3154:	df000915 	stw	fp,36(sp)
    3158:	ddc00815 	stw	r23,32(sp)
    315c:	dd800715 	stw	r22,28(sp)
    3160:	dd400615 	stw	r21,24(sp)
    3164:	dd000515 	stw	r20,20(sp)
    3168:	dcc00415 	stw	r19,16(sp)
    316c:	dc400215 	stw	r17,8(sp)
    3170:	dc000115 	stw	r16,4(sp)
    3174:	288002c4 	addi	r2,r5,11
    3178:	00c00584 	movi	r3,22
    317c:	2025883a 	mov	r18,r4
    3180:	18807f2e 	bgeu	r3,r2,3380 <_malloc_r+0x238>
    3184:	047ffe04 	movi	r17,-8
    3188:	1462703a 	and	r17,r2,r17
    318c:	8800a316 	blt	r17,zero,341c <_malloc_r+0x2d4>
    3190:	8940a236 	bltu	r17,r5,341c <_malloc_r+0x2d4>
    3194:	000fe300 	call	fe30 <__malloc_lock>
    3198:	00807dc4 	movi	r2,503
    319c:	1441e92e 	bgeu	r2,r17,3944 <_malloc_r+0x7fc>
    31a0:	8804d27a 	srli	r2,r17,9
    31a4:	1000a126 	beq	r2,zero,342c <_malloc_r+0x2e4>
    31a8:	00c00104 	movi	r3,4
    31ac:	18811e36 	bltu	r3,r2,3628 <_malloc_r+0x4e0>
    31b0:	8804d1ba 	srli	r2,r17,6
    31b4:	12000e44 	addi	r8,r2,57
    31b8:	11c00e04 	addi	r7,r2,56
    31bc:	4209883a 	add	r4,r8,r8
    31c0:	04c00074 	movhi	r19,1
    31c4:	2109883a 	add	r4,r4,r4
    31c8:	9ccaad04 	addi	r19,r19,10932
    31cc:	2109883a 	add	r4,r4,r4
    31d0:	9909883a 	add	r4,r19,r4
    31d4:	24000117 	ldw	r16,4(r4)
    31d8:	213ffe04 	addi	r4,r4,-8
    31dc:	24009726 	beq	r4,r16,343c <_malloc_r+0x2f4>
    31e0:	80800117 	ldw	r2,4(r16)
    31e4:	01bfff04 	movi	r6,-4
    31e8:	014003c4 	movi	r5,15
    31ec:	1184703a 	and	r2,r2,r6
    31f0:	1447c83a 	sub	r3,r2,r17
    31f4:	28c00716 	blt	r5,r3,3214 <_malloc_r+0xcc>
    31f8:	1800920e 	bge	r3,zero,3444 <_malloc_r+0x2fc>
    31fc:	84000317 	ldw	r16,12(r16)
    3200:	24008e26 	beq	r4,r16,343c <_malloc_r+0x2f4>
    3204:	80800117 	ldw	r2,4(r16)
    3208:	1184703a 	and	r2,r2,r6
    320c:	1447c83a 	sub	r3,r2,r17
    3210:	28fff90e 	bge	r5,r3,31f8 <__alt_data_end+0xff0031f8>
    3214:	3809883a 	mov	r4,r7
    3218:	01800074 	movhi	r6,1
    321c:	9c000417 	ldw	r16,16(r19)
    3220:	318aad04 	addi	r6,r6,10932
    3224:	32000204 	addi	r8,r6,8
    3228:	82013426 	beq	r16,r8,36fc <_malloc_r+0x5b4>
    322c:	80c00117 	ldw	r3,4(r16)
    3230:	00bfff04 	movi	r2,-4
    3234:	188e703a 	and	r7,r3,r2
    3238:	3c45c83a 	sub	r2,r7,r17
    323c:	00c003c4 	movi	r3,15
    3240:	18811f16 	blt	r3,r2,36c0 <_malloc_r+0x578>
    3244:	32000515 	stw	r8,20(r6)
    3248:	32000415 	stw	r8,16(r6)
    324c:	10007f0e 	bge	r2,zero,344c <_malloc_r+0x304>
    3250:	00807fc4 	movi	r2,511
    3254:	11c0fd36 	bltu	r2,r7,364c <_malloc_r+0x504>
    3258:	3806d0fa 	srli	r3,r7,3
    325c:	01c00044 	movi	r7,1
    3260:	30800117 	ldw	r2,4(r6)
    3264:	19400044 	addi	r5,r3,1
    3268:	294b883a 	add	r5,r5,r5
    326c:	1807d0ba 	srai	r3,r3,2
    3270:	294b883a 	add	r5,r5,r5
    3274:	294b883a 	add	r5,r5,r5
    3278:	298b883a 	add	r5,r5,r6
    327c:	38c6983a 	sll	r3,r7,r3
    3280:	29c00017 	ldw	r7,0(r5)
    3284:	2a7ffe04 	addi	r9,r5,-8
    3288:	1886b03a 	or	r3,r3,r2
    328c:	82400315 	stw	r9,12(r16)
    3290:	81c00215 	stw	r7,8(r16)
    3294:	30c00115 	stw	r3,4(r6)
    3298:	2c000015 	stw	r16,0(r5)
    329c:	3c000315 	stw	r16,12(r7)
    32a0:	2005d0ba 	srai	r2,r4,2
    32a4:	01400044 	movi	r5,1
    32a8:	288a983a 	sll	r5,r5,r2
    32ac:	19406f36 	bltu	r3,r5,346c <_malloc_r+0x324>
    32b0:	28c4703a 	and	r2,r5,r3
    32b4:	10000a1e 	bne	r2,zero,32e0 <_malloc_r+0x198>
    32b8:	00bfff04 	movi	r2,-4
    32bc:	294b883a 	add	r5,r5,r5
    32c0:	2088703a 	and	r4,r4,r2
    32c4:	28c4703a 	and	r2,r5,r3
    32c8:	21000104 	addi	r4,r4,4
    32cc:	1000041e 	bne	r2,zero,32e0 <_malloc_r+0x198>
    32d0:	294b883a 	add	r5,r5,r5
    32d4:	28c4703a 	and	r2,r5,r3
    32d8:	21000104 	addi	r4,r4,4
    32dc:	103ffc26 	beq	r2,zero,32d0 <__alt_data_end+0xff0032d0>
    32e0:	02bfff04 	movi	r10,-4
    32e4:	024003c4 	movi	r9,15
    32e8:	21800044 	addi	r6,r4,1
    32ec:	318d883a 	add	r6,r6,r6
    32f0:	318d883a 	add	r6,r6,r6
    32f4:	318d883a 	add	r6,r6,r6
    32f8:	998d883a 	add	r6,r19,r6
    32fc:	333ffe04 	addi	r12,r6,-8
    3300:	2017883a 	mov	r11,r4
    3304:	31800104 	addi	r6,r6,4
    3308:	34000017 	ldw	r16,0(r6)
    330c:	31fffd04 	addi	r7,r6,-12
    3310:	81c0041e 	bne	r16,r7,3324 <_malloc_r+0x1dc>
    3314:	0000fb06 	br	3704 <_malloc_r+0x5bc>
    3318:	1801030e 	bge	r3,zero,3728 <_malloc_r+0x5e0>
    331c:	84000317 	ldw	r16,12(r16)
    3320:	81c0f826 	beq	r16,r7,3704 <_malloc_r+0x5bc>
    3324:	80800117 	ldw	r2,4(r16)
    3328:	1284703a 	and	r2,r2,r10
    332c:	1447c83a 	sub	r3,r2,r17
    3330:	48fff90e 	bge	r9,r3,3318 <__alt_data_end+0xff003318>
    3334:	80800317 	ldw	r2,12(r16)
    3338:	81000217 	ldw	r4,8(r16)
    333c:	89400054 	ori	r5,r17,1
    3340:	81400115 	stw	r5,4(r16)
    3344:	20800315 	stw	r2,12(r4)
    3348:	11000215 	stw	r4,8(r2)
    334c:	8463883a 	add	r17,r16,r17
    3350:	9c400515 	stw	r17,20(r19)
    3354:	9c400415 	stw	r17,16(r19)
    3358:	18800054 	ori	r2,r3,1
    335c:	88800115 	stw	r2,4(r17)
    3360:	8a000315 	stw	r8,12(r17)
    3364:	8a000215 	stw	r8,8(r17)
    3368:	88e3883a 	add	r17,r17,r3
    336c:	88c00015 	stw	r3,0(r17)
    3370:	9009883a 	mov	r4,r18
    3374:	000fe540 	call	fe54 <__malloc_unlock>
    3378:	80800204 	addi	r2,r16,8
    337c:	00001b06 	br	33ec <_malloc_r+0x2a4>
    3380:	04400404 	movi	r17,16
    3384:	89402536 	bltu	r17,r5,341c <_malloc_r+0x2d4>
    3388:	000fe300 	call	fe30 <__malloc_lock>
    338c:	00800184 	movi	r2,6
    3390:	01000084 	movi	r4,2
    3394:	04c00074 	movhi	r19,1
    3398:	1085883a 	add	r2,r2,r2
    339c:	9ccaad04 	addi	r19,r19,10932
    33a0:	1085883a 	add	r2,r2,r2
    33a4:	9885883a 	add	r2,r19,r2
    33a8:	14000117 	ldw	r16,4(r2)
    33ac:	10fffe04 	addi	r3,r2,-8
    33b0:	80c0d926 	beq	r16,r3,3718 <_malloc_r+0x5d0>
    33b4:	80c00117 	ldw	r3,4(r16)
    33b8:	81000317 	ldw	r4,12(r16)
    33bc:	00bfff04 	movi	r2,-4
    33c0:	1884703a 	and	r2,r3,r2
    33c4:	81400217 	ldw	r5,8(r16)
    33c8:	8085883a 	add	r2,r16,r2
    33cc:	10c00117 	ldw	r3,4(r2)
    33d0:	29000315 	stw	r4,12(r5)
    33d4:	21400215 	stw	r5,8(r4)
    33d8:	18c00054 	ori	r3,r3,1
    33dc:	10c00115 	stw	r3,4(r2)
    33e0:	9009883a 	mov	r4,r18
    33e4:	000fe540 	call	fe54 <__malloc_unlock>
    33e8:	80800204 	addi	r2,r16,8
    33ec:	dfc00a17 	ldw	ra,40(sp)
    33f0:	df000917 	ldw	fp,36(sp)
    33f4:	ddc00817 	ldw	r23,32(sp)
    33f8:	dd800717 	ldw	r22,28(sp)
    33fc:	dd400617 	ldw	r21,24(sp)
    3400:	dd000517 	ldw	r20,20(sp)
    3404:	dcc00417 	ldw	r19,16(sp)
    3408:	dc800317 	ldw	r18,12(sp)
    340c:	dc400217 	ldw	r17,8(sp)
    3410:	dc000117 	ldw	r16,4(sp)
    3414:	dec00b04 	addi	sp,sp,44
    3418:	f800283a 	ret
    341c:	00800304 	movi	r2,12
    3420:	90800015 	stw	r2,0(r18)
    3424:	0005883a 	mov	r2,zero
    3428:	003ff006 	br	33ec <__alt_data_end+0xff0033ec>
    342c:	01002004 	movi	r4,128
    3430:	02001004 	movi	r8,64
    3434:	01c00fc4 	movi	r7,63
    3438:	003f6106 	br	31c0 <__alt_data_end+0xff0031c0>
    343c:	4009883a 	mov	r4,r8
    3440:	003f7506 	br	3218 <__alt_data_end+0xff003218>
    3444:	81000317 	ldw	r4,12(r16)
    3448:	003fde06 	br	33c4 <__alt_data_end+0xff0033c4>
    344c:	81c5883a 	add	r2,r16,r7
    3450:	11400117 	ldw	r5,4(r2)
    3454:	9009883a 	mov	r4,r18
    3458:	29400054 	ori	r5,r5,1
    345c:	11400115 	stw	r5,4(r2)
    3460:	000fe540 	call	fe54 <__malloc_unlock>
    3464:	80800204 	addi	r2,r16,8
    3468:	003fe006 	br	33ec <__alt_data_end+0xff0033ec>
    346c:	9c000217 	ldw	r16,8(r19)
    3470:	00bfff04 	movi	r2,-4
    3474:	85800117 	ldw	r22,4(r16)
    3478:	b0ac703a 	and	r22,r22,r2
    347c:	b4400336 	bltu	r22,r17,348c <_malloc_r+0x344>
    3480:	b445c83a 	sub	r2,r22,r17
    3484:	00c003c4 	movi	r3,15
    3488:	18805d16 	blt	r3,r2,3600 <_malloc_r+0x4b8>
    348c:	05c00074 	movhi	r23,1
    3490:	00800074 	movhi	r2,1
    3494:	10982f04 	addi	r2,r2,24764
    3498:	bdd15804 	addi	r23,r23,17760
    349c:	15400017 	ldw	r21,0(r2)
    34a0:	b8c00017 	ldw	r3,0(r23)
    34a4:	00bfffc4 	movi	r2,-1
    34a8:	858d883a 	add	r6,r16,r22
    34ac:	8d6b883a 	add	r21,r17,r21
    34b0:	1880ea26 	beq	r3,r2,385c <_malloc_r+0x714>
    34b4:	ad4403c4 	addi	r21,r21,4111
    34b8:	00bc0004 	movi	r2,-4096
    34bc:	a8aa703a 	and	r21,r21,r2
    34c0:	a80b883a 	mov	r5,r21
    34c4:	9009883a 	mov	r4,r18
    34c8:	d9800015 	stw	r6,0(sp)
    34cc:	0003a940 	call	3a94 <_sbrk_r>
    34d0:	1029883a 	mov	r20,r2
    34d4:	00bfffc4 	movi	r2,-1
    34d8:	d9800017 	ldw	r6,0(sp)
    34dc:	a080e826 	beq	r20,r2,3880 <_malloc_r+0x738>
    34e0:	a180a636 	bltu	r20,r6,377c <_malloc_r+0x634>
    34e4:	07000074 	movhi	fp,1
    34e8:	e7183d04 	addi	fp,fp,24820
    34ec:	e0800017 	ldw	r2,0(fp)
    34f0:	a887883a 	add	r3,r21,r2
    34f4:	e0c00015 	stw	r3,0(fp)
    34f8:	3500e626 	beq	r6,r20,3894 <_malloc_r+0x74c>
    34fc:	b9000017 	ldw	r4,0(r23)
    3500:	00bfffc4 	movi	r2,-1
    3504:	2080ee26 	beq	r4,r2,38c0 <_malloc_r+0x778>
    3508:	a185c83a 	sub	r2,r20,r6
    350c:	10c5883a 	add	r2,r2,r3
    3510:	e0800015 	stw	r2,0(fp)
    3514:	a0c001cc 	andi	r3,r20,7
    3518:	1800bc26 	beq	r3,zero,380c <_malloc_r+0x6c4>
    351c:	a0e9c83a 	sub	r20,r20,r3
    3520:	00840204 	movi	r2,4104
    3524:	a5000204 	addi	r20,r20,8
    3528:	10c7c83a 	sub	r3,r2,r3
    352c:	a545883a 	add	r2,r20,r21
    3530:	1083ffcc 	andi	r2,r2,4095
    3534:	18abc83a 	sub	r21,r3,r2
    3538:	a80b883a 	mov	r5,r21
    353c:	9009883a 	mov	r4,r18
    3540:	0003a940 	call	3a94 <_sbrk_r>
    3544:	00ffffc4 	movi	r3,-1
    3548:	10c0e126 	beq	r2,r3,38d0 <_malloc_r+0x788>
    354c:	1505c83a 	sub	r2,r2,r20
    3550:	1545883a 	add	r2,r2,r21
    3554:	10800054 	ori	r2,r2,1
    3558:	e0c00017 	ldw	r3,0(fp)
    355c:	9d000215 	stw	r20,8(r19)
    3560:	a0800115 	stw	r2,4(r20)
    3564:	a8c7883a 	add	r3,r21,r3
    3568:	e0c00015 	stw	r3,0(fp)
    356c:	84c00e26 	beq	r16,r19,35a8 <_malloc_r+0x460>
    3570:	018003c4 	movi	r6,15
    3574:	3580a72e 	bgeu	r6,r22,3814 <_malloc_r+0x6cc>
    3578:	81400117 	ldw	r5,4(r16)
    357c:	013ffe04 	movi	r4,-8
    3580:	b0bffd04 	addi	r2,r22,-12
    3584:	1104703a 	and	r2,r2,r4
    3588:	2900004c 	andi	r4,r5,1
    358c:	2088b03a 	or	r4,r4,r2
    3590:	81000115 	stw	r4,4(r16)
    3594:	01400144 	movi	r5,5
    3598:	8089883a 	add	r4,r16,r2
    359c:	21400115 	stw	r5,4(r4)
    35a0:	21400215 	stw	r5,8(r4)
    35a4:	3080cd36 	bltu	r6,r2,38dc <_malloc_r+0x794>
    35a8:	00800074 	movhi	r2,1
    35ac:	10982e04 	addi	r2,r2,24760
    35b0:	11000017 	ldw	r4,0(r2)
    35b4:	20c0012e 	bgeu	r4,r3,35bc <_malloc_r+0x474>
    35b8:	10c00015 	stw	r3,0(r2)
    35bc:	00800074 	movhi	r2,1
    35c0:	10982d04 	addi	r2,r2,24756
    35c4:	11000017 	ldw	r4,0(r2)
    35c8:	9c000217 	ldw	r16,8(r19)
    35cc:	20c0012e 	bgeu	r4,r3,35d4 <_malloc_r+0x48c>
    35d0:	10c00015 	stw	r3,0(r2)
    35d4:	80c00117 	ldw	r3,4(r16)
    35d8:	00bfff04 	movi	r2,-4
    35dc:	1886703a 	and	r3,r3,r2
    35e0:	1c45c83a 	sub	r2,r3,r17
    35e4:	1c400236 	bltu	r3,r17,35f0 <_malloc_r+0x4a8>
    35e8:	00c003c4 	movi	r3,15
    35ec:	18800416 	blt	r3,r2,3600 <_malloc_r+0x4b8>
    35f0:	9009883a 	mov	r4,r18
    35f4:	000fe540 	call	fe54 <__malloc_unlock>
    35f8:	0005883a 	mov	r2,zero
    35fc:	003f7b06 	br	33ec <__alt_data_end+0xff0033ec>
    3600:	88c00054 	ori	r3,r17,1
    3604:	80c00115 	stw	r3,4(r16)
    3608:	8463883a 	add	r17,r16,r17
    360c:	10800054 	ori	r2,r2,1
    3610:	9c400215 	stw	r17,8(r19)
    3614:	88800115 	stw	r2,4(r17)
    3618:	9009883a 	mov	r4,r18
    361c:	000fe540 	call	fe54 <__malloc_unlock>
    3620:	80800204 	addi	r2,r16,8
    3624:	003f7106 	br	33ec <__alt_data_end+0xff0033ec>
    3628:	00c00504 	movi	r3,20
    362c:	18804a2e 	bgeu	r3,r2,3758 <_malloc_r+0x610>
    3630:	00c01504 	movi	r3,84
    3634:	18806e36 	bltu	r3,r2,37f0 <_malloc_r+0x6a8>
    3638:	8804d33a 	srli	r2,r17,12
    363c:	12001bc4 	addi	r8,r2,111
    3640:	11c01b84 	addi	r7,r2,110
    3644:	4209883a 	add	r4,r8,r8
    3648:	003edd06 	br	31c0 <__alt_data_end+0xff0031c0>
    364c:	3804d27a 	srli	r2,r7,9
    3650:	00c00104 	movi	r3,4
    3654:	1880442e 	bgeu	r3,r2,3768 <_malloc_r+0x620>
    3658:	00c00504 	movi	r3,20
    365c:	18808136 	bltu	r3,r2,3864 <_malloc_r+0x71c>
    3660:	11401704 	addi	r5,r2,92
    3664:	10c016c4 	addi	r3,r2,91
    3668:	294b883a 	add	r5,r5,r5
    366c:	294b883a 	add	r5,r5,r5
    3670:	294b883a 	add	r5,r5,r5
    3674:	994b883a 	add	r5,r19,r5
    3678:	28800017 	ldw	r2,0(r5)
    367c:	01800074 	movhi	r6,1
    3680:	297ffe04 	addi	r5,r5,-8
    3684:	318aad04 	addi	r6,r6,10932
    3688:	28806526 	beq	r5,r2,3820 <_malloc_r+0x6d8>
    368c:	01bfff04 	movi	r6,-4
    3690:	10c00117 	ldw	r3,4(r2)
    3694:	1986703a 	and	r3,r3,r6
    3698:	38c0022e 	bgeu	r7,r3,36a4 <_malloc_r+0x55c>
    369c:	10800217 	ldw	r2,8(r2)
    36a0:	28bffb1e 	bne	r5,r2,3690 <__alt_data_end+0xff003690>
    36a4:	11400317 	ldw	r5,12(r2)
    36a8:	98c00117 	ldw	r3,4(r19)
    36ac:	81400315 	stw	r5,12(r16)
    36b0:	80800215 	stw	r2,8(r16)
    36b4:	2c000215 	stw	r16,8(r5)
    36b8:	14000315 	stw	r16,12(r2)
    36bc:	003ef806 	br	32a0 <__alt_data_end+0xff0032a0>
    36c0:	88c00054 	ori	r3,r17,1
    36c4:	80c00115 	stw	r3,4(r16)
    36c8:	8463883a 	add	r17,r16,r17
    36cc:	34400515 	stw	r17,20(r6)
    36d0:	34400415 	stw	r17,16(r6)
    36d4:	10c00054 	ori	r3,r2,1
    36d8:	8a000315 	stw	r8,12(r17)
    36dc:	8a000215 	stw	r8,8(r17)
    36e0:	88c00115 	stw	r3,4(r17)
    36e4:	88a3883a 	add	r17,r17,r2
    36e8:	88800015 	stw	r2,0(r17)
    36ec:	9009883a 	mov	r4,r18
    36f0:	000fe540 	call	fe54 <__malloc_unlock>
    36f4:	80800204 	addi	r2,r16,8
    36f8:	003f3c06 	br	33ec <__alt_data_end+0xff0033ec>
    36fc:	30c00117 	ldw	r3,4(r6)
    3700:	003ee706 	br	32a0 <__alt_data_end+0xff0032a0>
    3704:	5ac00044 	addi	r11,r11,1
    3708:	588000cc 	andi	r2,r11,3
    370c:	31800204 	addi	r6,r6,8
    3710:	103efd1e 	bne	r2,zero,3308 <__alt_data_end+0xff003308>
    3714:	00002406 	br	37a8 <_malloc_r+0x660>
    3718:	14000317 	ldw	r16,12(r2)
    371c:	143f251e 	bne	r2,r16,33b4 <__alt_data_end+0xff0033b4>
    3720:	21000084 	addi	r4,r4,2
    3724:	003ebc06 	br	3218 <__alt_data_end+0xff003218>
    3728:	8085883a 	add	r2,r16,r2
    372c:	10c00117 	ldw	r3,4(r2)
    3730:	81000317 	ldw	r4,12(r16)
    3734:	81400217 	ldw	r5,8(r16)
    3738:	18c00054 	ori	r3,r3,1
    373c:	10c00115 	stw	r3,4(r2)
    3740:	29000315 	stw	r4,12(r5)
    3744:	21400215 	stw	r5,8(r4)
    3748:	9009883a 	mov	r4,r18
    374c:	000fe540 	call	fe54 <__malloc_unlock>
    3750:	80800204 	addi	r2,r16,8
    3754:	003f2506 	br	33ec <__alt_data_end+0xff0033ec>
    3758:	12001704 	addi	r8,r2,92
    375c:	11c016c4 	addi	r7,r2,91
    3760:	4209883a 	add	r4,r8,r8
    3764:	003e9606 	br	31c0 <__alt_data_end+0xff0031c0>
    3768:	3804d1ba 	srli	r2,r7,6
    376c:	11400e44 	addi	r5,r2,57
    3770:	10c00e04 	addi	r3,r2,56
    3774:	294b883a 	add	r5,r5,r5
    3778:	003fbc06 	br	366c <__alt_data_end+0xff00366c>
    377c:	84ff5926 	beq	r16,r19,34e4 <__alt_data_end+0xff0034e4>
    3780:	00800074 	movhi	r2,1
    3784:	108aad04 	addi	r2,r2,10932
    3788:	14000217 	ldw	r16,8(r2)
    378c:	00bfff04 	movi	r2,-4
    3790:	80c00117 	ldw	r3,4(r16)
    3794:	1886703a 	and	r3,r3,r2
    3798:	003f9106 	br	35e0 <__alt_data_end+0xff0035e0>
    379c:	60800217 	ldw	r2,8(r12)
    37a0:	213fffc4 	addi	r4,r4,-1
    37a4:	1300651e 	bne	r2,r12,393c <_malloc_r+0x7f4>
    37a8:	208000cc 	andi	r2,r4,3
    37ac:	633ffe04 	addi	r12,r12,-8
    37b0:	103ffa1e 	bne	r2,zero,379c <__alt_data_end+0xff00379c>
    37b4:	98800117 	ldw	r2,4(r19)
    37b8:	0146303a 	nor	r3,zero,r5
    37bc:	1884703a 	and	r2,r3,r2
    37c0:	98800115 	stw	r2,4(r19)
    37c4:	294b883a 	add	r5,r5,r5
    37c8:	117f2836 	bltu	r2,r5,346c <__alt_data_end+0xff00346c>
    37cc:	283f2726 	beq	r5,zero,346c <__alt_data_end+0xff00346c>
    37d0:	2886703a 	and	r3,r5,r2
    37d4:	5809883a 	mov	r4,r11
    37d8:	183ec31e 	bne	r3,zero,32e8 <__alt_data_end+0xff0032e8>
    37dc:	294b883a 	add	r5,r5,r5
    37e0:	2886703a 	and	r3,r5,r2
    37e4:	21000104 	addi	r4,r4,4
    37e8:	183ffc26 	beq	r3,zero,37dc <__alt_data_end+0xff0037dc>
    37ec:	003ebe06 	br	32e8 <__alt_data_end+0xff0032e8>
    37f0:	00c05504 	movi	r3,340
    37f4:	18801236 	bltu	r3,r2,3840 <_malloc_r+0x6f8>
    37f8:	8804d3fa 	srli	r2,r17,15
    37fc:	12001e04 	addi	r8,r2,120
    3800:	11c01dc4 	addi	r7,r2,119
    3804:	4209883a 	add	r4,r8,r8
    3808:	003e6d06 	br	31c0 <__alt_data_end+0xff0031c0>
    380c:	00c40004 	movi	r3,4096
    3810:	003f4606 	br	352c <__alt_data_end+0xff00352c>
    3814:	00800044 	movi	r2,1
    3818:	a0800115 	stw	r2,4(r20)
    381c:	003f7406 	br	35f0 <__alt_data_end+0xff0035f0>
    3820:	1805d0ba 	srai	r2,r3,2
    3824:	01c00044 	movi	r7,1
    3828:	30c00117 	ldw	r3,4(r6)
    382c:	388e983a 	sll	r7,r7,r2
    3830:	2805883a 	mov	r2,r5
    3834:	38c6b03a 	or	r3,r7,r3
    3838:	30c00115 	stw	r3,4(r6)
    383c:	003f9b06 	br	36ac <__alt_data_end+0xff0036ac>
    3840:	00c15504 	movi	r3,1364
    3844:	18801a36 	bltu	r3,r2,38b0 <_malloc_r+0x768>
    3848:	8804d4ba 	srli	r2,r17,18
    384c:	12001f44 	addi	r8,r2,125
    3850:	11c01f04 	addi	r7,r2,124
    3854:	4209883a 	add	r4,r8,r8
    3858:	003e5906 	br	31c0 <__alt_data_end+0xff0031c0>
    385c:	ad400404 	addi	r21,r21,16
    3860:	003f1706 	br	34c0 <__alt_data_end+0xff0034c0>
    3864:	00c01504 	movi	r3,84
    3868:	18802336 	bltu	r3,r2,38f8 <_malloc_r+0x7b0>
    386c:	3804d33a 	srli	r2,r7,12
    3870:	11401bc4 	addi	r5,r2,111
    3874:	10c01b84 	addi	r3,r2,110
    3878:	294b883a 	add	r5,r5,r5
    387c:	003f7b06 	br	366c <__alt_data_end+0xff00366c>
    3880:	9c000217 	ldw	r16,8(r19)
    3884:	00bfff04 	movi	r2,-4
    3888:	80c00117 	ldw	r3,4(r16)
    388c:	1886703a 	and	r3,r3,r2
    3890:	003f5306 	br	35e0 <__alt_data_end+0xff0035e0>
    3894:	3083ffcc 	andi	r2,r6,4095
    3898:	103f181e 	bne	r2,zero,34fc <__alt_data_end+0xff0034fc>
    389c:	99000217 	ldw	r4,8(r19)
    38a0:	b545883a 	add	r2,r22,r21
    38a4:	10800054 	ori	r2,r2,1
    38a8:	20800115 	stw	r2,4(r4)
    38ac:	003f3e06 	br	35a8 <__alt_data_end+0xff0035a8>
    38b0:	01003f84 	movi	r4,254
    38b4:	02001fc4 	movi	r8,127
    38b8:	01c01f84 	movi	r7,126
    38bc:	003e4006 	br	31c0 <__alt_data_end+0xff0031c0>
    38c0:	00800074 	movhi	r2,1
    38c4:	10915804 	addi	r2,r2,17760
    38c8:	15000015 	stw	r20,0(r2)
    38cc:	003f1106 	br	3514 <__alt_data_end+0xff003514>
    38d0:	00800044 	movi	r2,1
    38d4:	002b883a 	mov	r21,zero
    38d8:	003f1f06 	br	3558 <__alt_data_end+0xff003558>
    38dc:	81400204 	addi	r5,r16,8
    38e0:	9009883a 	mov	r4,r18
    38e4:	0007f980 	call	7f98 <_free_r>
    38e8:	00800074 	movhi	r2,1
    38ec:	10983d04 	addi	r2,r2,24820
    38f0:	10c00017 	ldw	r3,0(r2)
    38f4:	003f2c06 	br	35a8 <__alt_data_end+0xff0035a8>
    38f8:	00c05504 	movi	r3,340
    38fc:	18800536 	bltu	r3,r2,3914 <_malloc_r+0x7cc>
    3900:	3804d3fa 	srli	r2,r7,15
    3904:	11401e04 	addi	r5,r2,120
    3908:	10c01dc4 	addi	r3,r2,119
    390c:	294b883a 	add	r5,r5,r5
    3910:	003f5606 	br	366c <__alt_data_end+0xff00366c>
    3914:	00c15504 	movi	r3,1364
    3918:	18800536 	bltu	r3,r2,3930 <_malloc_r+0x7e8>
    391c:	3804d4ba 	srli	r2,r7,18
    3920:	11401f44 	addi	r5,r2,125
    3924:	10c01f04 	addi	r3,r2,124
    3928:	294b883a 	add	r5,r5,r5
    392c:	003f4f06 	br	366c <__alt_data_end+0xff00366c>
    3930:	01403f84 	movi	r5,254
    3934:	00c01f84 	movi	r3,126
    3938:	003f4c06 	br	366c <__alt_data_end+0xff00366c>
    393c:	98800117 	ldw	r2,4(r19)
    3940:	003fa006 	br	37c4 <__alt_data_end+0xff0037c4>
    3944:	8808d0fa 	srli	r4,r17,3
    3948:	20800044 	addi	r2,r4,1
    394c:	1085883a 	add	r2,r2,r2
    3950:	003e9006 	br	3394 <__alt_data_end+0xff003394>

00003954 <_printf_r>:
    3954:	defffd04 	addi	sp,sp,-12
    3958:	2805883a 	mov	r2,r5
    395c:	dfc00015 	stw	ra,0(sp)
    3960:	d9800115 	stw	r6,4(sp)
    3964:	d9c00215 	stw	r7,8(sp)
    3968:	21400217 	ldw	r5,8(r4)
    396c:	d9c00104 	addi	r7,sp,4
    3970:	100d883a 	mov	r6,r2
    3974:	0003b800 	call	3b80 <___vfprintf_internal_r>
    3978:	dfc00017 	ldw	ra,0(sp)
    397c:	dec00304 	addi	sp,sp,12
    3980:	f800283a 	ret

00003984 <printf>:
    3984:	defffc04 	addi	sp,sp,-16
    3988:	dfc00015 	stw	ra,0(sp)
    398c:	d9400115 	stw	r5,4(sp)
    3990:	d9800215 	stw	r6,8(sp)
    3994:	d9c00315 	stw	r7,12(sp)
    3998:	00800074 	movhi	r2,1
    399c:	10915b04 	addi	r2,r2,17772
    39a0:	10800017 	ldw	r2,0(r2)
    39a4:	200b883a 	mov	r5,r4
    39a8:	d9800104 	addi	r6,sp,4
    39ac:	11000217 	ldw	r4,8(r2)
    39b0:	0005d780 	call	5d78 <__vfprintf_internal>
    39b4:	dfc00017 	ldw	ra,0(sp)
    39b8:	dec00404 	addi	sp,sp,16
    39bc:	f800283a 	ret

000039c0 <_puts_r>:
    39c0:	defff604 	addi	sp,sp,-40
    39c4:	dc000715 	stw	r16,28(sp)
    39c8:	2021883a 	mov	r16,r4
    39cc:	2809883a 	mov	r4,r5
    39d0:	dc400815 	stw	r17,32(sp)
    39d4:	dfc00915 	stw	ra,36(sp)
    39d8:	2823883a 	mov	r17,r5
    39dc:	0003ae80 	call	3ae8 <strlen>
    39e0:	10c00044 	addi	r3,r2,1
    39e4:	d8800115 	stw	r2,4(sp)
    39e8:	00800074 	movhi	r2,1
    39ec:	1089ef04 	addi	r2,r2,10172
    39f0:	d8800215 	stw	r2,8(sp)
    39f4:	00800044 	movi	r2,1
    39f8:	d8800315 	stw	r2,12(sp)
    39fc:	00800084 	movi	r2,2
    3a00:	dc400015 	stw	r17,0(sp)
    3a04:	d8c00615 	stw	r3,24(sp)
    3a08:	dec00415 	stw	sp,16(sp)
    3a0c:	d8800515 	stw	r2,20(sp)
    3a10:	80000226 	beq	r16,zero,3a1c <_puts_r+0x5c>
    3a14:	80800e17 	ldw	r2,56(r16)
    3a18:	10001426 	beq	r2,zero,3a6c <_puts_r+0xac>
    3a1c:	81400217 	ldw	r5,8(r16)
    3a20:	2880030b 	ldhu	r2,12(r5)
    3a24:	10c8000c 	andi	r3,r2,8192
    3a28:	1800061e 	bne	r3,zero,3a44 <_puts_r+0x84>
    3a2c:	29001917 	ldw	r4,100(r5)
    3a30:	00f7ffc4 	movi	r3,-8193
    3a34:	10880014 	ori	r2,r2,8192
    3a38:	20c6703a 	and	r3,r4,r3
    3a3c:	2880030d 	sth	r2,12(r5)
    3a40:	28c01915 	stw	r3,100(r5)
    3a44:	d9800404 	addi	r6,sp,16
    3a48:	8009883a 	mov	r4,r16
    3a4c:	00082a80 	call	82a8 <__sfvwrite_r>
    3a50:	1000091e 	bne	r2,zero,3a78 <_puts_r+0xb8>
    3a54:	00800284 	movi	r2,10
    3a58:	dfc00917 	ldw	ra,36(sp)
    3a5c:	dc400817 	ldw	r17,32(sp)
    3a60:	dc000717 	ldw	r16,28(sp)
    3a64:	dec00a04 	addi	sp,sp,40
    3a68:	f800283a 	ret
    3a6c:	8009883a 	mov	r4,r16
    3a70:	0007e240 	call	7e24 <__sinit>
    3a74:	003fe906 	br	3a1c <__alt_data_end+0xff003a1c>
    3a78:	00bfffc4 	movi	r2,-1
    3a7c:	003ff606 	br	3a58 <__alt_data_end+0xff003a58>

00003a80 <puts>:
    3a80:	00800074 	movhi	r2,1
    3a84:	10915b04 	addi	r2,r2,17772
    3a88:	200b883a 	mov	r5,r4
    3a8c:	11000017 	ldw	r4,0(r2)
    3a90:	00039c01 	jmpi	39c0 <_puts_r>

00003a94 <_sbrk_r>:
    3a94:	defffd04 	addi	sp,sp,-12
    3a98:	dc000015 	stw	r16,0(sp)
    3a9c:	04000074 	movhi	r16,1
    3aa0:	dc400115 	stw	r17,4(sp)
    3aa4:	84183004 	addi	r16,r16,24768
    3aa8:	2023883a 	mov	r17,r4
    3aac:	2809883a 	mov	r4,r5
    3ab0:	dfc00215 	stw	ra,8(sp)
    3ab4:	80000015 	stw	zero,0(r16)
    3ab8:	00100140 	call	10014 <sbrk>
    3abc:	00ffffc4 	movi	r3,-1
    3ac0:	10c00526 	beq	r2,r3,3ad8 <_sbrk_r+0x44>
    3ac4:	dfc00217 	ldw	ra,8(sp)
    3ac8:	dc400117 	ldw	r17,4(sp)
    3acc:	dc000017 	ldw	r16,0(sp)
    3ad0:	dec00304 	addi	sp,sp,12
    3ad4:	f800283a 	ret
    3ad8:	80c00017 	ldw	r3,0(r16)
    3adc:	183ff926 	beq	r3,zero,3ac4 <__alt_data_end+0xff003ac4>
    3ae0:	88c00015 	stw	r3,0(r17)
    3ae4:	003ff706 	br	3ac4 <__alt_data_end+0xff003ac4>

00003ae8 <strlen>:
    3ae8:	208000cc 	andi	r2,r4,3
    3aec:	10002026 	beq	r2,zero,3b70 <strlen+0x88>
    3af0:	20800007 	ldb	r2,0(r4)
    3af4:	10002026 	beq	r2,zero,3b78 <strlen+0x90>
    3af8:	2005883a 	mov	r2,r4
    3afc:	00000206 	br	3b08 <strlen+0x20>
    3b00:	10c00007 	ldb	r3,0(r2)
    3b04:	18001826 	beq	r3,zero,3b68 <strlen+0x80>
    3b08:	10800044 	addi	r2,r2,1
    3b0c:	10c000cc 	andi	r3,r2,3
    3b10:	183ffb1e 	bne	r3,zero,3b00 <__alt_data_end+0xff003b00>
    3b14:	10c00017 	ldw	r3,0(r2)
    3b18:	01ffbff4 	movhi	r7,65279
    3b1c:	39ffbfc4 	addi	r7,r7,-257
    3b20:	00ca303a 	nor	r5,zero,r3
    3b24:	01a02074 	movhi	r6,32897
    3b28:	19c7883a 	add	r3,r3,r7
    3b2c:	31a02004 	addi	r6,r6,-32640
    3b30:	1946703a 	and	r3,r3,r5
    3b34:	1986703a 	and	r3,r3,r6
    3b38:	1800091e 	bne	r3,zero,3b60 <strlen+0x78>
    3b3c:	10800104 	addi	r2,r2,4
    3b40:	10c00017 	ldw	r3,0(r2)
    3b44:	19cb883a 	add	r5,r3,r7
    3b48:	00c6303a 	nor	r3,zero,r3
    3b4c:	28c6703a 	and	r3,r5,r3
    3b50:	1986703a 	and	r3,r3,r6
    3b54:	183ff926 	beq	r3,zero,3b3c <__alt_data_end+0xff003b3c>
    3b58:	00000106 	br	3b60 <strlen+0x78>
    3b5c:	10800044 	addi	r2,r2,1
    3b60:	10c00007 	ldb	r3,0(r2)
    3b64:	183ffd1e 	bne	r3,zero,3b5c <__alt_data_end+0xff003b5c>
    3b68:	1105c83a 	sub	r2,r2,r4
    3b6c:	f800283a 	ret
    3b70:	2005883a 	mov	r2,r4
    3b74:	003fe706 	br	3b14 <__alt_data_end+0xff003b14>
    3b78:	0005883a 	mov	r2,zero
    3b7c:	f800283a 	ret

00003b80 <___vfprintf_internal_r>:
    3b80:	deffb804 	addi	sp,sp,-288
    3b84:	dfc04715 	stw	ra,284(sp)
    3b88:	ddc04515 	stw	r23,276(sp)
    3b8c:	dd404315 	stw	r21,268(sp)
    3b90:	d9002c15 	stw	r4,176(sp)
    3b94:	282f883a 	mov	r23,r5
    3b98:	302b883a 	mov	r21,r6
    3b9c:	d9c02d15 	stw	r7,180(sp)
    3ba0:	df004615 	stw	fp,280(sp)
    3ba4:	dd804415 	stw	r22,272(sp)
    3ba8:	dd004215 	stw	r20,264(sp)
    3bac:	dcc04115 	stw	r19,260(sp)
    3bb0:	dc804015 	stw	r18,256(sp)
    3bb4:	dc403f15 	stw	r17,252(sp)
    3bb8:	dc003e15 	stw	r16,248(sp)
    3bbc:	00089980 	call	8998 <_localeconv_r>
    3bc0:	10800017 	ldw	r2,0(r2)
    3bc4:	1009883a 	mov	r4,r2
    3bc8:	d8803415 	stw	r2,208(sp)
    3bcc:	0003ae80 	call	3ae8 <strlen>
    3bd0:	d8803715 	stw	r2,220(sp)
    3bd4:	d8802c17 	ldw	r2,176(sp)
    3bd8:	10000226 	beq	r2,zero,3be4 <___vfprintf_internal_r+0x64>
    3bdc:	10800e17 	ldw	r2,56(r2)
    3be0:	1000f926 	beq	r2,zero,3fc8 <___vfprintf_internal_r+0x448>
    3be4:	b880030b 	ldhu	r2,12(r23)
    3be8:	10c8000c 	andi	r3,r2,8192
    3bec:	1800061e 	bne	r3,zero,3c08 <___vfprintf_internal_r+0x88>
    3bf0:	b9001917 	ldw	r4,100(r23)
    3bf4:	00f7ffc4 	movi	r3,-8193
    3bf8:	10880014 	ori	r2,r2,8192
    3bfc:	20c6703a 	and	r3,r4,r3
    3c00:	b880030d 	sth	r2,12(r23)
    3c04:	b8c01915 	stw	r3,100(r23)
    3c08:	10c0020c 	andi	r3,r2,8
    3c0c:	1800c126 	beq	r3,zero,3f14 <___vfprintf_internal_r+0x394>
    3c10:	b8c00417 	ldw	r3,16(r23)
    3c14:	1800bf26 	beq	r3,zero,3f14 <___vfprintf_internal_r+0x394>
    3c18:	1080068c 	andi	r2,r2,26
    3c1c:	00c00284 	movi	r3,10
    3c20:	10c0c426 	beq	r2,r3,3f34 <___vfprintf_internal_r+0x3b4>
    3c24:	d8c00404 	addi	r3,sp,16
    3c28:	05000074 	movhi	r20,1
    3c2c:	d9001e04 	addi	r4,sp,120
    3c30:	a50a0084 	addi	r20,r20,10242
    3c34:	d8c01e15 	stw	r3,120(sp)
    3c38:	d8002015 	stw	zero,128(sp)
    3c3c:	d8001f15 	stw	zero,124(sp)
    3c40:	d8003315 	stw	zero,204(sp)
    3c44:	d8003615 	stw	zero,216(sp)
    3c48:	d8003815 	stw	zero,224(sp)
    3c4c:	1811883a 	mov	r8,r3
    3c50:	d8003915 	stw	zero,228(sp)
    3c54:	d8003a15 	stw	zero,232(sp)
    3c58:	d8002f15 	stw	zero,188(sp)
    3c5c:	d9002815 	stw	r4,160(sp)
    3c60:	a8800007 	ldb	r2,0(r21)
    3c64:	10027b26 	beq	r2,zero,4654 <___vfprintf_internal_r+0xad4>
    3c68:	00c00944 	movi	r3,37
    3c6c:	a821883a 	mov	r16,r21
    3c70:	10c0021e 	bne	r2,r3,3c7c <___vfprintf_internal_r+0xfc>
    3c74:	00001406 	br	3cc8 <___vfprintf_internal_r+0x148>
    3c78:	10c00326 	beq	r2,r3,3c88 <___vfprintf_internal_r+0x108>
    3c7c:	84000044 	addi	r16,r16,1
    3c80:	80800007 	ldb	r2,0(r16)
    3c84:	103ffc1e 	bne	r2,zero,3c78 <__alt_data_end+0xff003c78>
    3c88:	8563c83a 	sub	r17,r16,r21
    3c8c:	88000e26 	beq	r17,zero,3cc8 <___vfprintf_internal_r+0x148>
    3c90:	d8c02017 	ldw	r3,128(sp)
    3c94:	d8801f17 	ldw	r2,124(sp)
    3c98:	45400015 	stw	r21,0(r8)
    3c9c:	1c47883a 	add	r3,r3,r17
    3ca0:	10800044 	addi	r2,r2,1
    3ca4:	d8c02015 	stw	r3,128(sp)
    3ca8:	44400115 	stw	r17,4(r8)
    3cac:	d8801f15 	stw	r2,124(sp)
    3cb0:	00c001c4 	movi	r3,7
    3cb4:	1880a716 	blt	r3,r2,3f54 <___vfprintf_internal_r+0x3d4>
    3cb8:	42000204 	addi	r8,r8,8
    3cbc:	d9402f17 	ldw	r5,188(sp)
    3cc0:	2c4b883a 	add	r5,r5,r17
    3cc4:	d9402f15 	stw	r5,188(sp)
    3cc8:	80800007 	ldb	r2,0(r16)
    3ccc:	1000a826 	beq	r2,zero,3f70 <___vfprintf_internal_r+0x3f0>
    3cd0:	84400047 	ldb	r17,1(r16)
    3cd4:	00bfffc4 	movi	r2,-1
    3cd8:	85400044 	addi	r21,r16,1
    3cdc:	d8002785 	stb	zero,158(sp)
    3ce0:	0007883a 	mov	r3,zero
    3ce4:	000f883a 	mov	r7,zero
    3ce8:	d8802915 	stw	r2,164(sp)
    3cec:	d8003115 	stw	zero,196(sp)
    3cf0:	0025883a 	mov	r18,zero
    3cf4:	01401604 	movi	r5,88
    3cf8:	01800244 	movi	r6,9
    3cfc:	02800a84 	movi	r10,42
    3d00:	02401b04 	movi	r9,108
    3d04:	ad400044 	addi	r21,r21,1
    3d08:	88bff804 	addi	r2,r17,-32
    3d0c:	28830436 	bltu	r5,r2,4920 <___vfprintf_internal_r+0xda0>
    3d10:	100490ba 	slli	r2,r2,2
    3d14:	01000034 	movhi	r4,0
    3d18:	210f4a04 	addi	r4,r4,15656
    3d1c:	1105883a 	add	r2,r2,r4
    3d20:	10800017 	ldw	r2,0(r2)
    3d24:	1000683a 	jmp	r2
    3d28:	00004840 	call	484 <init_camera+0x204>
    3d2c:	00004920 	cmpeqi	zero,zero,292
    3d30:	00004920 	cmpeqi	zero,zero,292
    3d34:	00004860 	cmpeqi	zero,zero,289
    3d38:	00004920 	cmpeqi	zero,zero,292
    3d3c:	00004920 	cmpeqi	zero,zero,292
    3d40:	00004920 	cmpeqi	zero,zero,292
    3d44:	00004920 	cmpeqi	zero,zero,292
    3d48:	00004920 	cmpeqi	zero,zero,292
    3d4c:	00004920 	cmpeqi	zero,zero,292
    3d50:	00003fd4 	movui	zero,255
    3d54:	0000477c 	xorhi	zero,zero,285
    3d58:	00004920 	cmpeqi	zero,zero,292
    3d5c:	00003e9c 	xori	zero,zero,250
    3d60:	00003ffc 	xorhi	zero,zero,255
    3d64:	00004920 	cmpeqi	zero,zero,292
    3d68:	0000403c 	xorhi	zero,zero,256
    3d6c:	00004048 	cmpgei	zero,zero,257
    3d70:	00004048 	cmpgei	zero,zero,257
    3d74:	00004048 	cmpgei	zero,zero,257
    3d78:	00004048 	cmpgei	zero,zero,257
    3d7c:	00004048 	cmpgei	zero,zero,257
    3d80:	00004048 	cmpgei	zero,zero,257
    3d84:	00004048 	cmpgei	zero,zero,257
    3d88:	00004048 	cmpgei	zero,zero,257
    3d8c:	00004048 	cmpgei	zero,zero,257
    3d90:	00004920 	cmpeqi	zero,zero,292
    3d94:	00004920 	cmpeqi	zero,zero,292
    3d98:	00004920 	cmpeqi	zero,zero,292
    3d9c:	00004920 	cmpeqi	zero,zero,292
    3da0:	00004920 	cmpeqi	zero,zero,292
    3da4:	00004920 	cmpeqi	zero,zero,292
    3da8:	00004920 	cmpeqi	zero,zero,292
    3dac:	00004920 	cmpeqi	zero,zero,292
    3db0:	00004920 	cmpeqi	zero,zero,292
    3db4:	00004920 	cmpeqi	zero,zero,292
    3db8:	0000407c 	xorhi	zero,zero,257
    3dbc:	00004138 	rdprs	zero,zero,260
    3dc0:	00004920 	cmpeqi	zero,zero,292
    3dc4:	00004138 	rdprs	zero,zero,260
    3dc8:	00004920 	cmpeqi	zero,zero,292
    3dcc:	00004920 	cmpeqi	zero,zero,292
    3dd0:	00004920 	cmpeqi	zero,zero,292
    3dd4:	00004920 	cmpeqi	zero,zero,292
    3dd8:	000041d8 	cmpnei	zero,zero,263
    3ddc:	00004920 	cmpeqi	zero,zero,292
    3de0:	00004920 	cmpeqi	zero,zero,292
    3de4:	000041e4 	muli	zero,zero,263
    3de8:	00004920 	cmpeqi	zero,zero,292
    3dec:	00004920 	cmpeqi	zero,zero,292
    3df0:	00004920 	cmpeqi	zero,zero,292
    3df4:	00004920 	cmpeqi	zero,zero,292
    3df8:	00004920 	cmpeqi	zero,zero,292
    3dfc:	0000465c 	xori	zero,zero,281
    3e00:	00004920 	cmpeqi	zero,zero,292
    3e04:	00004920 	cmpeqi	zero,zero,292
    3e08:	000046bc 	xorhi	zero,zero,282
    3e0c:	00004920 	cmpeqi	zero,zero,292
    3e10:	00004920 	cmpeqi	zero,zero,292
    3e14:	00004920 	cmpeqi	zero,zero,292
    3e18:	00004920 	cmpeqi	zero,zero,292
    3e1c:	00004920 	cmpeqi	zero,zero,292
    3e20:	00004920 	cmpeqi	zero,zero,292
    3e24:	00004920 	cmpeqi	zero,zero,292
    3e28:	00004920 	cmpeqi	zero,zero,292
    3e2c:	00004920 	cmpeqi	zero,zero,292
    3e30:	00004920 	cmpeqi	zero,zero,292
    3e34:	000048cc 	andi	zero,zero,291
    3e38:	0000486c 	andhi	zero,zero,289
    3e3c:	00004138 	rdprs	zero,zero,260
    3e40:	00004138 	rdprs	zero,zero,260
    3e44:	00004138 	rdprs	zero,zero,260
    3e48:	0000487c 	xorhi	zero,zero,289
    3e4c:	0000486c 	andhi	zero,zero,289
    3e50:	00004920 	cmpeqi	zero,zero,292
    3e54:	00004920 	cmpeqi	zero,zero,292
    3e58:	00004888 	cmpgei	zero,zero,290
    3e5c:	00004920 	cmpeqi	zero,zero,292
    3e60:	00004898 	cmpnei	zero,zero,290
    3e64:	0000476c 	andhi	zero,zero,285
    3e68:	00003ea8 	cmpgeui	zero,zero,250
    3e6c:	0000478c 	andi	zero,zero,286
    3e70:	00004920 	cmpeqi	zero,zero,292
    3e74:	00004798 	cmpnei	zero,zero,286
    3e78:	00004920 	cmpeqi	zero,zero,292
    3e7c:	000047f4 	movhi	zero,287
    3e80:	00004920 	cmpeqi	zero,zero,292
    3e84:	00004920 	cmpeqi	zero,zero,292
    3e88:	00004804 	movi	zero,288
    3e8c:	d9003117 	ldw	r4,196(sp)
    3e90:	d8802d15 	stw	r2,180(sp)
    3e94:	0109c83a 	sub	r4,zero,r4
    3e98:	d9003115 	stw	r4,196(sp)
    3e9c:	94800114 	ori	r18,r18,4
    3ea0:	ac400007 	ldb	r17,0(r21)
    3ea4:	003f9706 	br	3d04 <__alt_data_end+0xff003d04>
    3ea8:	00800c04 	movi	r2,48
    3eac:	d9002d17 	ldw	r4,180(sp)
    3eb0:	d9402917 	ldw	r5,164(sp)
    3eb4:	d8802705 	stb	r2,156(sp)
    3eb8:	00801e04 	movi	r2,120
    3ebc:	d8802745 	stb	r2,157(sp)
    3ec0:	d8002785 	stb	zero,158(sp)
    3ec4:	20c00104 	addi	r3,r4,4
    3ec8:	24c00017 	ldw	r19,0(r4)
    3ecc:	002d883a 	mov	r22,zero
    3ed0:	90800094 	ori	r2,r18,2
    3ed4:	28029a16 	blt	r5,zero,4940 <___vfprintf_internal_r+0xdc0>
    3ed8:	00bfdfc4 	movi	r2,-129
    3edc:	90a4703a 	and	r18,r18,r2
    3ee0:	d8c02d15 	stw	r3,180(sp)
    3ee4:	94800094 	ori	r18,r18,2
    3ee8:	9802871e 	bne	r19,zero,4908 <___vfprintf_internal_r+0xd88>
    3eec:	00800074 	movhi	r2,1
    3ef0:	1089f904 	addi	r2,r2,10212
    3ef4:	d8803915 	stw	r2,228(sp)
    3ef8:	04401e04 	movi	r17,120
    3efc:	d8802917 	ldw	r2,164(sp)
    3f00:	0039883a 	mov	fp,zero
    3f04:	1001e926 	beq	r2,zero,46ac <___vfprintf_internal_r+0xb2c>
    3f08:	0027883a 	mov	r19,zero
    3f0c:	002d883a 	mov	r22,zero
    3f10:	00020506 	br	4728 <___vfprintf_internal_r+0xba8>
    3f14:	d9002c17 	ldw	r4,176(sp)
    3f18:	b80b883a 	mov	r5,r23
    3f1c:	0005e500 	call	5e50 <__swsetup_r>
    3f20:	1005ac1e 	bne	r2,zero,55d4 <___vfprintf_internal_r+0x1a54>
    3f24:	b880030b 	ldhu	r2,12(r23)
    3f28:	00c00284 	movi	r3,10
    3f2c:	1080068c 	andi	r2,r2,26
    3f30:	10ff3c1e 	bne	r2,r3,3c24 <__alt_data_end+0xff003c24>
    3f34:	b880038f 	ldh	r2,14(r23)
    3f38:	103f3a16 	blt	r2,zero,3c24 <__alt_data_end+0xff003c24>
    3f3c:	d9c02d17 	ldw	r7,180(sp)
    3f40:	d9002c17 	ldw	r4,176(sp)
    3f44:	a80d883a 	mov	r6,r21
    3f48:	b80b883a 	mov	r5,r23
    3f4c:	0005d940 	call	5d94 <__sbprintf>
    3f50:	00001106 	br	3f98 <___vfprintf_internal_r+0x418>
    3f54:	d9002c17 	ldw	r4,176(sp)
    3f58:	d9801e04 	addi	r6,sp,120
    3f5c:	b80b883a 	mov	r5,r23
    3f60:	000a91c0 	call	a91c <__sprint_r>
    3f64:	1000081e 	bne	r2,zero,3f88 <___vfprintf_internal_r+0x408>
    3f68:	da000404 	addi	r8,sp,16
    3f6c:	003f5306 	br	3cbc <__alt_data_end+0xff003cbc>
    3f70:	d8802017 	ldw	r2,128(sp)
    3f74:	10000426 	beq	r2,zero,3f88 <___vfprintf_internal_r+0x408>
    3f78:	d9002c17 	ldw	r4,176(sp)
    3f7c:	d9801e04 	addi	r6,sp,120
    3f80:	b80b883a 	mov	r5,r23
    3f84:	000a91c0 	call	a91c <__sprint_r>
    3f88:	b880030b 	ldhu	r2,12(r23)
    3f8c:	1080100c 	andi	r2,r2,64
    3f90:	1005901e 	bne	r2,zero,55d4 <___vfprintf_internal_r+0x1a54>
    3f94:	d8802f17 	ldw	r2,188(sp)
    3f98:	dfc04717 	ldw	ra,284(sp)
    3f9c:	df004617 	ldw	fp,280(sp)
    3fa0:	ddc04517 	ldw	r23,276(sp)
    3fa4:	dd804417 	ldw	r22,272(sp)
    3fa8:	dd404317 	ldw	r21,268(sp)
    3fac:	dd004217 	ldw	r20,264(sp)
    3fb0:	dcc04117 	ldw	r19,260(sp)
    3fb4:	dc804017 	ldw	r18,256(sp)
    3fb8:	dc403f17 	ldw	r17,252(sp)
    3fbc:	dc003e17 	ldw	r16,248(sp)
    3fc0:	dec04804 	addi	sp,sp,288
    3fc4:	f800283a 	ret
    3fc8:	d9002c17 	ldw	r4,176(sp)
    3fcc:	0007e240 	call	7e24 <__sinit>
    3fd0:	003f0406 	br	3be4 <__alt_data_end+0xff003be4>
    3fd4:	d8802d17 	ldw	r2,180(sp)
    3fd8:	d9002d17 	ldw	r4,180(sp)
    3fdc:	10800017 	ldw	r2,0(r2)
    3fe0:	d8803115 	stw	r2,196(sp)
    3fe4:	20800104 	addi	r2,r4,4
    3fe8:	d9003117 	ldw	r4,196(sp)
    3fec:	203fa716 	blt	r4,zero,3e8c <__alt_data_end+0xff003e8c>
    3ff0:	d8802d15 	stw	r2,180(sp)
    3ff4:	ac400007 	ldb	r17,0(r21)
    3ff8:	003f4206 	br	3d04 <__alt_data_end+0xff003d04>
    3ffc:	ac400007 	ldb	r17,0(r21)
    4000:	aac00044 	addi	r11,r21,1
    4004:	8a872826 	beq	r17,r10,5ca8 <___vfprintf_internal_r+0x2128>
    4008:	88bff404 	addi	r2,r17,-48
    400c:	0009883a 	mov	r4,zero
    4010:	30867d36 	bltu	r6,r2,5a08 <___vfprintf_internal_r+0x1e88>
    4014:	5c400007 	ldb	r17,0(r11)
    4018:	210002a4 	muli	r4,r4,10
    401c:	5d400044 	addi	r21,r11,1
    4020:	a817883a 	mov	r11,r21
    4024:	2089883a 	add	r4,r4,r2
    4028:	88bff404 	addi	r2,r17,-48
    402c:	30bff92e 	bgeu	r6,r2,4014 <__alt_data_end+0xff004014>
    4030:	2005c916 	blt	r4,zero,5758 <___vfprintf_internal_r+0x1bd8>
    4034:	d9002915 	stw	r4,164(sp)
    4038:	003f3306 	br	3d08 <__alt_data_end+0xff003d08>
    403c:	94802014 	ori	r18,r18,128
    4040:	ac400007 	ldb	r17,0(r21)
    4044:	003f2f06 	br	3d04 <__alt_data_end+0xff003d04>
    4048:	a809883a 	mov	r4,r21
    404c:	d8003115 	stw	zero,196(sp)
    4050:	88bff404 	addi	r2,r17,-48
    4054:	0017883a 	mov	r11,zero
    4058:	24400007 	ldb	r17,0(r4)
    405c:	5ac002a4 	muli	r11,r11,10
    4060:	ad400044 	addi	r21,r21,1
    4064:	a809883a 	mov	r4,r21
    4068:	12d7883a 	add	r11,r2,r11
    406c:	88bff404 	addi	r2,r17,-48
    4070:	30bff92e 	bgeu	r6,r2,4058 <__alt_data_end+0xff004058>
    4074:	dac03115 	stw	r11,196(sp)
    4078:	003f2306 	br	3d08 <__alt_data_end+0xff003d08>
    407c:	18c03fcc 	andi	r3,r3,255
    4080:	18072b1e 	bne	r3,zero,5d30 <___vfprintf_internal_r+0x21b0>
    4084:	94800414 	ori	r18,r18,16
    4088:	9080080c 	andi	r2,r18,32
    408c:	10037b26 	beq	r2,zero,4e7c <___vfprintf_internal_r+0x12fc>
    4090:	d9402d17 	ldw	r5,180(sp)
    4094:	28800117 	ldw	r2,4(r5)
    4098:	2cc00017 	ldw	r19,0(r5)
    409c:	29400204 	addi	r5,r5,8
    40a0:	d9402d15 	stw	r5,180(sp)
    40a4:	102d883a 	mov	r22,r2
    40a8:	10044b16 	blt	r2,zero,51d8 <___vfprintf_internal_r+0x1658>
    40ac:	d9402917 	ldw	r5,164(sp)
    40b0:	df002783 	ldbu	fp,158(sp)
    40b4:	2803bc16 	blt	r5,zero,4fa8 <___vfprintf_internal_r+0x1428>
    40b8:	00ffdfc4 	movi	r3,-129
    40bc:	9d84b03a 	or	r2,r19,r22
    40c0:	90e4703a 	and	r18,r18,r3
    40c4:	10017726 	beq	r2,zero,46a4 <___vfprintf_internal_r+0xb24>
    40c8:	b0038326 	beq	r22,zero,4ed8 <___vfprintf_internal_r+0x1358>
    40cc:	dc402a15 	stw	r17,168(sp)
    40d0:	dc001e04 	addi	r16,sp,120
    40d4:	b023883a 	mov	r17,r22
    40d8:	402d883a 	mov	r22,r8
    40dc:	9809883a 	mov	r4,r19
    40e0:	880b883a 	mov	r5,r17
    40e4:	01800284 	movi	r6,10
    40e8:	000f883a 	mov	r7,zero
    40ec:	000cd140 	call	cd14 <__umoddi3>
    40f0:	10800c04 	addi	r2,r2,48
    40f4:	843fffc4 	addi	r16,r16,-1
    40f8:	9809883a 	mov	r4,r19
    40fc:	880b883a 	mov	r5,r17
    4100:	80800005 	stb	r2,0(r16)
    4104:	01800284 	movi	r6,10
    4108:	000f883a 	mov	r7,zero
    410c:	000c79c0 	call	c79c <__udivdi3>
    4110:	1027883a 	mov	r19,r2
    4114:	10c4b03a 	or	r2,r2,r3
    4118:	1823883a 	mov	r17,r3
    411c:	103fef1e 	bne	r2,zero,40dc <__alt_data_end+0xff0040dc>
    4120:	d8c02817 	ldw	r3,160(sp)
    4124:	dc402a17 	ldw	r17,168(sp)
    4128:	b011883a 	mov	r8,r22
    412c:	1c07c83a 	sub	r3,r3,r16
    4130:	d8c02e15 	stw	r3,184(sp)
    4134:	00005906 	br	429c <___vfprintf_internal_r+0x71c>
    4138:	18c03fcc 	andi	r3,r3,255
    413c:	1806fa1e 	bne	r3,zero,5d28 <___vfprintf_internal_r+0x21a8>
    4140:	9080020c 	andi	r2,r18,8
    4144:	10048a26 	beq	r2,zero,5370 <___vfprintf_internal_r+0x17f0>
    4148:	d8c02d17 	ldw	r3,180(sp)
    414c:	d9002d17 	ldw	r4,180(sp)
    4150:	d9402d17 	ldw	r5,180(sp)
    4154:	18c00017 	ldw	r3,0(r3)
    4158:	21000117 	ldw	r4,4(r4)
    415c:	29400204 	addi	r5,r5,8
    4160:	d8c03615 	stw	r3,216(sp)
    4164:	d9003815 	stw	r4,224(sp)
    4168:	d9402d15 	stw	r5,180(sp)
    416c:	d9003617 	ldw	r4,216(sp)
    4170:	d9403817 	ldw	r5,224(sp)
    4174:	da003d15 	stw	r8,244(sp)
    4178:	04000044 	movi	r16,1
    417c:	000a5940 	call	a594 <__fpclassifyd>
    4180:	da003d17 	ldw	r8,244(sp)
    4184:	14041f1e 	bne	r2,r16,5204 <___vfprintf_internal_r+0x1684>
    4188:	d9003617 	ldw	r4,216(sp)
    418c:	d9403817 	ldw	r5,224(sp)
    4190:	000d883a 	mov	r6,zero
    4194:	000f883a 	mov	r7,zero
    4198:	000e5440 	call	e544 <__ledf2>
    419c:	da003d17 	ldw	r8,244(sp)
    41a0:	1005be16 	blt	r2,zero,589c <___vfprintf_internal_r+0x1d1c>
    41a4:	df002783 	ldbu	fp,158(sp)
    41a8:	008011c4 	movi	r2,71
    41ac:	1445330e 	bge	r2,r17,567c <___vfprintf_internal_r+0x1afc>
    41b0:	04000074 	movhi	r16,1
    41b4:	8409f104 	addi	r16,r16,10180
    41b8:	00c000c4 	movi	r3,3
    41bc:	00bfdfc4 	movi	r2,-129
    41c0:	d8c02a15 	stw	r3,168(sp)
    41c4:	90a4703a 	and	r18,r18,r2
    41c8:	d8c02e15 	stw	r3,184(sp)
    41cc:	d8002915 	stw	zero,164(sp)
    41d0:	d8003215 	stw	zero,200(sp)
    41d4:	00003706 	br	42b4 <___vfprintf_internal_r+0x734>
    41d8:	94800214 	ori	r18,r18,8
    41dc:	ac400007 	ldb	r17,0(r21)
    41e0:	003ec806 	br	3d04 <__alt_data_end+0xff003d04>
    41e4:	18c03fcc 	andi	r3,r3,255
    41e8:	1806db1e 	bne	r3,zero,5d58 <___vfprintf_internal_r+0x21d8>
    41ec:	94800414 	ori	r18,r18,16
    41f0:	9080080c 	andi	r2,r18,32
    41f4:	1002d826 	beq	r2,zero,4d58 <___vfprintf_internal_r+0x11d8>
    41f8:	d9402d17 	ldw	r5,180(sp)
    41fc:	d8c02917 	ldw	r3,164(sp)
    4200:	d8002785 	stb	zero,158(sp)
    4204:	28800204 	addi	r2,r5,8
    4208:	2cc00017 	ldw	r19,0(r5)
    420c:	2d800117 	ldw	r22,4(r5)
    4210:	18048f16 	blt	r3,zero,5450 <___vfprintf_internal_r+0x18d0>
    4214:	013fdfc4 	movi	r4,-129
    4218:	9d86b03a 	or	r3,r19,r22
    421c:	d8802d15 	stw	r2,180(sp)
    4220:	9124703a 	and	r18,r18,r4
    4224:	1802d91e 	bne	r3,zero,4d8c <___vfprintf_internal_r+0x120c>
    4228:	d8c02917 	ldw	r3,164(sp)
    422c:	0039883a 	mov	fp,zero
    4230:	1805c326 	beq	r3,zero,5940 <___vfprintf_internal_r+0x1dc0>
    4234:	0027883a 	mov	r19,zero
    4238:	002d883a 	mov	r22,zero
    423c:	dc001e04 	addi	r16,sp,120
    4240:	9806d0fa 	srli	r3,r19,3
    4244:	b008977a 	slli	r4,r22,29
    4248:	b02cd0fa 	srli	r22,r22,3
    424c:	9cc001cc 	andi	r19,r19,7
    4250:	98800c04 	addi	r2,r19,48
    4254:	843fffc4 	addi	r16,r16,-1
    4258:	20e6b03a 	or	r19,r4,r3
    425c:	80800005 	stb	r2,0(r16)
    4260:	9d86b03a 	or	r3,r19,r22
    4264:	183ff61e 	bne	r3,zero,4240 <__alt_data_end+0xff004240>
    4268:	90c0004c 	andi	r3,r18,1
    426c:	18013b26 	beq	r3,zero,475c <___vfprintf_internal_r+0xbdc>
    4270:	10803fcc 	andi	r2,r2,255
    4274:	1080201c 	xori	r2,r2,128
    4278:	10bfe004 	addi	r2,r2,-128
    427c:	00c00c04 	movi	r3,48
    4280:	10c13626 	beq	r2,r3,475c <___vfprintf_internal_r+0xbdc>
    4284:	80ffffc5 	stb	r3,-1(r16)
    4288:	d8c02817 	ldw	r3,160(sp)
    428c:	80bfffc4 	addi	r2,r16,-1
    4290:	1021883a 	mov	r16,r2
    4294:	1887c83a 	sub	r3,r3,r2
    4298:	d8c02e15 	stw	r3,184(sp)
    429c:	d8802e17 	ldw	r2,184(sp)
    42a0:	d9002917 	ldw	r4,164(sp)
    42a4:	1100010e 	bge	r2,r4,42ac <___vfprintf_internal_r+0x72c>
    42a8:	2005883a 	mov	r2,r4
    42ac:	d8802a15 	stw	r2,168(sp)
    42b0:	d8003215 	stw	zero,200(sp)
    42b4:	e7003fcc 	andi	fp,fp,255
    42b8:	e700201c 	xori	fp,fp,128
    42bc:	e73fe004 	addi	fp,fp,-128
    42c0:	e0000326 	beq	fp,zero,42d0 <___vfprintf_internal_r+0x750>
    42c4:	d8c02a17 	ldw	r3,168(sp)
    42c8:	18c00044 	addi	r3,r3,1
    42cc:	d8c02a15 	stw	r3,168(sp)
    42d0:	90c0008c 	andi	r3,r18,2
    42d4:	d8c02b15 	stw	r3,172(sp)
    42d8:	18000326 	beq	r3,zero,42e8 <___vfprintf_internal_r+0x768>
    42dc:	d8c02a17 	ldw	r3,168(sp)
    42e0:	18c00084 	addi	r3,r3,2
    42e4:	d8c02a15 	stw	r3,168(sp)
    42e8:	90c0210c 	andi	r3,r18,132
    42ec:	d8c03015 	stw	r3,192(sp)
    42f0:	1801a31e 	bne	r3,zero,4980 <___vfprintf_internal_r+0xe00>
    42f4:	d9003117 	ldw	r4,196(sp)
    42f8:	d8c02a17 	ldw	r3,168(sp)
    42fc:	20e7c83a 	sub	r19,r4,r3
    4300:	04c19f0e 	bge	zero,r19,4980 <___vfprintf_internal_r+0xe00>
    4304:	02400404 	movi	r9,16
    4308:	d8c02017 	ldw	r3,128(sp)
    430c:	d8801f17 	ldw	r2,124(sp)
    4310:	4cc50d0e 	bge	r9,r19,5748 <___vfprintf_internal_r+0x1bc8>
    4314:	01400074 	movhi	r5,1
    4318:	294a0484 	addi	r5,r5,10258
    431c:	dc403b15 	stw	r17,236(sp)
    4320:	d9403515 	stw	r5,212(sp)
    4324:	9823883a 	mov	r17,r19
    4328:	482d883a 	mov	r22,r9
    432c:	9027883a 	mov	r19,r18
    4330:	070001c4 	movi	fp,7
    4334:	8025883a 	mov	r18,r16
    4338:	dc002c17 	ldw	r16,176(sp)
    433c:	00000306 	br	434c <___vfprintf_internal_r+0x7cc>
    4340:	8c7ffc04 	addi	r17,r17,-16
    4344:	42000204 	addi	r8,r8,8
    4348:	b440130e 	bge	r22,r17,4398 <___vfprintf_internal_r+0x818>
    434c:	01000074 	movhi	r4,1
    4350:	18c00404 	addi	r3,r3,16
    4354:	10800044 	addi	r2,r2,1
    4358:	210a0484 	addi	r4,r4,10258
    435c:	41000015 	stw	r4,0(r8)
    4360:	45800115 	stw	r22,4(r8)
    4364:	d8c02015 	stw	r3,128(sp)
    4368:	d8801f15 	stw	r2,124(sp)
    436c:	e0bff40e 	bge	fp,r2,4340 <__alt_data_end+0xff004340>
    4370:	d9801e04 	addi	r6,sp,120
    4374:	b80b883a 	mov	r5,r23
    4378:	8009883a 	mov	r4,r16
    437c:	000a91c0 	call	a91c <__sprint_r>
    4380:	103f011e 	bne	r2,zero,3f88 <__alt_data_end+0xff003f88>
    4384:	8c7ffc04 	addi	r17,r17,-16
    4388:	d8c02017 	ldw	r3,128(sp)
    438c:	d8801f17 	ldw	r2,124(sp)
    4390:	da000404 	addi	r8,sp,16
    4394:	b47fed16 	blt	r22,r17,434c <__alt_data_end+0xff00434c>
    4398:	9021883a 	mov	r16,r18
    439c:	9825883a 	mov	r18,r19
    43a0:	8827883a 	mov	r19,r17
    43a4:	dc403b17 	ldw	r17,236(sp)
    43a8:	d9403517 	ldw	r5,212(sp)
    43ac:	98c7883a 	add	r3,r19,r3
    43b0:	10800044 	addi	r2,r2,1
    43b4:	41400015 	stw	r5,0(r8)
    43b8:	44c00115 	stw	r19,4(r8)
    43bc:	d8c02015 	stw	r3,128(sp)
    43c0:	d8801f15 	stw	r2,124(sp)
    43c4:	010001c4 	movi	r4,7
    43c8:	2082a316 	blt	r4,r2,4e58 <___vfprintf_internal_r+0x12d8>
    43cc:	df002787 	ldb	fp,158(sp)
    43d0:	42000204 	addi	r8,r8,8
    43d4:	e0000c26 	beq	fp,zero,4408 <___vfprintf_internal_r+0x888>
    43d8:	d8801f17 	ldw	r2,124(sp)
    43dc:	d9002784 	addi	r4,sp,158
    43e0:	18c00044 	addi	r3,r3,1
    43e4:	10800044 	addi	r2,r2,1
    43e8:	41000015 	stw	r4,0(r8)
    43ec:	01000044 	movi	r4,1
    43f0:	41000115 	stw	r4,4(r8)
    43f4:	d8c02015 	stw	r3,128(sp)
    43f8:	d8801f15 	stw	r2,124(sp)
    43fc:	010001c4 	movi	r4,7
    4400:	20823c16 	blt	r4,r2,4cf4 <___vfprintf_internal_r+0x1174>
    4404:	42000204 	addi	r8,r8,8
    4408:	d8802b17 	ldw	r2,172(sp)
    440c:	10000c26 	beq	r2,zero,4440 <___vfprintf_internal_r+0x8c0>
    4410:	d8801f17 	ldw	r2,124(sp)
    4414:	d9002704 	addi	r4,sp,156
    4418:	18c00084 	addi	r3,r3,2
    441c:	10800044 	addi	r2,r2,1
    4420:	41000015 	stw	r4,0(r8)
    4424:	01000084 	movi	r4,2
    4428:	41000115 	stw	r4,4(r8)
    442c:	d8c02015 	stw	r3,128(sp)
    4430:	d8801f15 	stw	r2,124(sp)
    4434:	010001c4 	movi	r4,7
    4438:	20823616 	blt	r4,r2,4d14 <___vfprintf_internal_r+0x1194>
    443c:	42000204 	addi	r8,r8,8
    4440:	d9003017 	ldw	r4,192(sp)
    4444:	00802004 	movi	r2,128
    4448:	20819926 	beq	r4,r2,4ab0 <___vfprintf_internal_r+0xf30>
    444c:	d9402917 	ldw	r5,164(sp)
    4450:	d8802e17 	ldw	r2,184(sp)
    4454:	28adc83a 	sub	r22,r5,r2
    4458:	0580310e 	bge	zero,r22,4520 <___vfprintf_internal_r+0x9a0>
    445c:	07000404 	movi	fp,16
    4460:	d8801f17 	ldw	r2,124(sp)
    4464:	e584140e 	bge	fp,r22,54b8 <___vfprintf_internal_r+0x1938>
    4468:	01400074 	movhi	r5,1
    446c:	294a0084 	addi	r5,r5,10242
    4470:	dc402915 	stw	r17,164(sp)
    4474:	d9402b15 	stw	r5,172(sp)
    4478:	b023883a 	mov	r17,r22
    447c:	04c001c4 	movi	r19,7
    4480:	a82d883a 	mov	r22,r21
    4484:	902b883a 	mov	r21,r18
    4488:	8025883a 	mov	r18,r16
    448c:	dc002c17 	ldw	r16,176(sp)
    4490:	00000306 	br	44a0 <___vfprintf_internal_r+0x920>
    4494:	8c7ffc04 	addi	r17,r17,-16
    4498:	42000204 	addi	r8,r8,8
    449c:	e440110e 	bge	fp,r17,44e4 <___vfprintf_internal_r+0x964>
    44a0:	18c00404 	addi	r3,r3,16
    44a4:	10800044 	addi	r2,r2,1
    44a8:	45000015 	stw	r20,0(r8)
    44ac:	47000115 	stw	fp,4(r8)
    44b0:	d8c02015 	stw	r3,128(sp)
    44b4:	d8801f15 	stw	r2,124(sp)
    44b8:	98bff60e 	bge	r19,r2,4494 <__alt_data_end+0xff004494>
    44bc:	d9801e04 	addi	r6,sp,120
    44c0:	b80b883a 	mov	r5,r23
    44c4:	8009883a 	mov	r4,r16
    44c8:	000a91c0 	call	a91c <__sprint_r>
    44cc:	103eae1e 	bne	r2,zero,3f88 <__alt_data_end+0xff003f88>
    44d0:	8c7ffc04 	addi	r17,r17,-16
    44d4:	d8c02017 	ldw	r3,128(sp)
    44d8:	d8801f17 	ldw	r2,124(sp)
    44dc:	da000404 	addi	r8,sp,16
    44e0:	e47fef16 	blt	fp,r17,44a0 <__alt_data_end+0xff0044a0>
    44e4:	9021883a 	mov	r16,r18
    44e8:	a825883a 	mov	r18,r21
    44ec:	b02b883a 	mov	r21,r22
    44f0:	882d883a 	mov	r22,r17
    44f4:	dc402917 	ldw	r17,164(sp)
    44f8:	d9002b17 	ldw	r4,172(sp)
    44fc:	1d87883a 	add	r3,r3,r22
    4500:	10800044 	addi	r2,r2,1
    4504:	41000015 	stw	r4,0(r8)
    4508:	45800115 	stw	r22,4(r8)
    450c:	d8c02015 	stw	r3,128(sp)
    4510:	d8801f15 	stw	r2,124(sp)
    4514:	010001c4 	movi	r4,7
    4518:	2081ee16 	blt	r4,r2,4cd4 <___vfprintf_internal_r+0x1154>
    451c:	42000204 	addi	r8,r8,8
    4520:	9080400c 	andi	r2,r18,256
    4524:	1001181e 	bne	r2,zero,4988 <___vfprintf_internal_r+0xe08>
    4528:	d9402e17 	ldw	r5,184(sp)
    452c:	d8801f17 	ldw	r2,124(sp)
    4530:	44000015 	stw	r16,0(r8)
    4534:	1947883a 	add	r3,r3,r5
    4538:	10800044 	addi	r2,r2,1
    453c:	41400115 	stw	r5,4(r8)
    4540:	d8c02015 	stw	r3,128(sp)
    4544:	d8801f15 	stw	r2,124(sp)
    4548:	010001c4 	movi	r4,7
    454c:	2081d316 	blt	r4,r2,4c9c <___vfprintf_internal_r+0x111c>
    4550:	42000204 	addi	r8,r8,8
    4554:	9480010c 	andi	r18,r18,4
    4558:	90003226 	beq	r18,zero,4624 <___vfprintf_internal_r+0xaa4>
    455c:	d9403117 	ldw	r5,196(sp)
    4560:	d8802a17 	ldw	r2,168(sp)
    4564:	28a1c83a 	sub	r16,r5,r2
    4568:	04002e0e 	bge	zero,r16,4624 <___vfprintf_internal_r+0xaa4>
    456c:	04400404 	movi	r17,16
    4570:	d8801f17 	ldw	r2,124(sp)
    4574:	8c04a20e 	bge	r17,r16,5800 <___vfprintf_internal_r+0x1c80>
    4578:	01400074 	movhi	r5,1
    457c:	294a0484 	addi	r5,r5,10258
    4580:	d9403515 	stw	r5,212(sp)
    4584:	048001c4 	movi	r18,7
    4588:	dcc02c17 	ldw	r19,176(sp)
    458c:	00000306 	br	459c <___vfprintf_internal_r+0xa1c>
    4590:	843ffc04 	addi	r16,r16,-16
    4594:	42000204 	addi	r8,r8,8
    4598:	8c00130e 	bge	r17,r16,45e8 <___vfprintf_internal_r+0xa68>
    459c:	01000074 	movhi	r4,1
    45a0:	18c00404 	addi	r3,r3,16
    45a4:	10800044 	addi	r2,r2,1
    45a8:	210a0484 	addi	r4,r4,10258
    45ac:	41000015 	stw	r4,0(r8)
    45b0:	44400115 	stw	r17,4(r8)
    45b4:	d8c02015 	stw	r3,128(sp)
    45b8:	d8801f15 	stw	r2,124(sp)
    45bc:	90bff40e 	bge	r18,r2,4590 <__alt_data_end+0xff004590>
    45c0:	d9801e04 	addi	r6,sp,120
    45c4:	b80b883a 	mov	r5,r23
    45c8:	9809883a 	mov	r4,r19
    45cc:	000a91c0 	call	a91c <__sprint_r>
    45d0:	103e6d1e 	bne	r2,zero,3f88 <__alt_data_end+0xff003f88>
    45d4:	843ffc04 	addi	r16,r16,-16
    45d8:	d8c02017 	ldw	r3,128(sp)
    45dc:	d8801f17 	ldw	r2,124(sp)
    45e0:	da000404 	addi	r8,sp,16
    45e4:	8c3fed16 	blt	r17,r16,459c <__alt_data_end+0xff00459c>
    45e8:	d9403517 	ldw	r5,212(sp)
    45ec:	1c07883a 	add	r3,r3,r16
    45f0:	10800044 	addi	r2,r2,1
    45f4:	41400015 	stw	r5,0(r8)
    45f8:	44000115 	stw	r16,4(r8)
    45fc:	d8c02015 	stw	r3,128(sp)
    4600:	d8801f15 	stw	r2,124(sp)
    4604:	010001c4 	movi	r4,7
    4608:	2080060e 	bge	r4,r2,4624 <___vfprintf_internal_r+0xaa4>
    460c:	d9002c17 	ldw	r4,176(sp)
    4610:	d9801e04 	addi	r6,sp,120
    4614:	b80b883a 	mov	r5,r23
    4618:	000a91c0 	call	a91c <__sprint_r>
    461c:	103e5a1e 	bne	r2,zero,3f88 <__alt_data_end+0xff003f88>
    4620:	d8c02017 	ldw	r3,128(sp)
    4624:	d8803117 	ldw	r2,196(sp)
    4628:	d9002a17 	ldw	r4,168(sp)
    462c:	1100010e 	bge	r2,r4,4634 <___vfprintf_internal_r+0xab4>
    4630:	2005883a 	mov	r2,r4
    4634:	d9402f17 	ldw	r5,188(sp)
    4638:	288b883a 	add	r5,r5,r2
    463c:	d9402f15 	stw	r5,188(sp)
    4640:	18019e1e 	bne	r3,zero,4cbc <___vfprintf_internal_r+0x113c>
    4644:	a8800007 	ldb	r2,0(r21)
    4648:	d8001f15 	stw	zero,124(sp)
    464c:	da000404 	addi	r8,sp,16
    4650:	103d851e 	bne	r2,zero,3c68 <__alt_data_end+0xff003c68>
    4654:	a821883a 	mov	r16,r21
    4658:	003d9b06 	br	3cc8 <__alt_data_end+0xff003cc8>
    465c:	18c03fcc 	andi	r3,r3,255
    4660:	1805c11e 	bne	r3,zero,5d68 <___vfprintf_internal_r+0x21e8>
    4664:	94800414 	ori	r18,r18,16
    4668:	9080080c 	andi	r2,r18,32
    466c:	10020c26 	beq	r2,zero,4ea0 <___vfprintf_internal_r+0x1320>
    4670:	d8802d17 	ldw	r2,180(sp)
    4674:	d9002917 	ldw	r4,164(sp)
    4678:	d8002785 	stb	zero,158(sp)
    467c:	10c00204 	addi	r3,r2,8
    4680:	14c00017 	ldw	r19,0(r2)
    4684:	15800117 	ldw	r22,4(r2)
    4688:	20040f16 	blt	r4,zero,56c8 <___vfprintf_internal_r+0x1b48>
    468c:	013fdfc4 	movi	r4,-129
    4690:	9d84b03a 	or	r2,r19,r22
    4694:	d8c02d15 	stw	r3,180(sp)
    4698:	9124703a 	and	r18,r18,r4
    469c:	0039883a 	mov	fp,zero
    46a0:	103e891e 	bne	r2,zero,40c8 <__alt_data_end+0xff0040c8>
    46a4:	d9002917 	ldw	r4,164(sp)
    46a8:	2002c11e 	bne	r4,zero,51b0 <___vfprintf_internal_r+0x1630>
    46ac:	d8002915 	stw	zero,164(sp)
    46b0:	d8002e15 	stw	zero,184(sp)
    46b4:	dc001e04 	addi	r16,sp,120
    46b8:	003ef806 	br	429c <__alt_data_end+0xff00429c>
    46bc:	18c03fcc 	andi	r3,r3,255
    46c0:	18059d1e 	bne	r3,zero,5d38 <___vfprintf_internal_r+0x21b8>
    46c4:	01400074 	movhi	r5,1
    46c8:	2949f404 	addi	r5,r5,10192
    46cc:	d9403915 	stw	r5,228(sp)
    46d0:	9080080c 	andi	r2,r18,32
    46d4:	10005226 	beq	r2,zero,4820 <___vfprintf_internal_r+0xca0>
    46d8:	d8802d17 	ldw	r2,180(sp)
    46dc:	14c00017 	ldw	r19,0(r2)
    46e0:	15800117 	ldw	r22,4(r2)
    46e4:	10800204 	addi	r2,r2,8
    46e8:	d8802d15 	stw	r2,180(sp)
    46ec:	9080004c 	andi	r2,r18,1
    46f0:	10019026 	beq	r2,zero,4d34 <___vfprintf_internal_r+0x11b4>
    46f4:	9d84b03a 	or	r2,r19,r22
    46f8:	10036926 	beq	r2,zero,54a0 <___vfprintf_internal_r+0x1920>
    46fc:	d8c02917 	ldw	r3,164(sp)
    4700:	00800c04 	movi	r2,48
    4704:	d8802705 	stb	r2,156(sp)
    4708:	dc402745 	stb	r17,157(sp)
    470c:	d8002785 	stb	zero,158(sp)
    4710:	90800094 	ori	r2,r18,2
    4714:	18045d16 	blt	r3,zero,588c <___vfprintf_internal_r+0x1d0c>
    4718:	00bfdfc4 	movi	r2,-129
    471c:	90a4703a 	and	r18,r18,r2
    4720:	94800094 	ori	r18,r18,2
    4724:	0039883a 	mov	fp,zero
    4728:	d9003917 	ldw	r4,228(sp)
    472c:	dc001e04 	addi	r16,sp,120
    4730:	988003cc 	andi	r2,r19,15
    4734:	b006973a 	slli	r3,r22,28
    4738:	2085883a 	add	r2,r4,r2
    473c:	9826d13a 	srli	r19,r19,4
    4740:	10800003 	ldbu	r2,0(r2)
    4744:	b02cd13a 	srli	r22,r22,4
    4748:	843fffc4 	addi	r16,r16,-1
    474c:	1ce6b03a 	or	r19,r3,r19
    4750:	80800005 	stb	r2,0(r16)
    4754:	9d84b03a 	or	r2,r19,r22
    4758:	103ff51e 	bne	r2,zero,4730 <__alt_data_end+0xff004730>
    475c:	d8c02817 	ldw	r3,160(sp)
    4760:	1c07c83a 	sub	r3,r3,r16
    4764:	d8c02e15 	stw	r3,184(sp)
    4768:	003ecc06 	br	429c <__alt_data_end+0xff00429c>
    476c:	18c03fcc 	andi	r3,r3,255
    4770:	183e9f26 	beq	r3,zero,41f0 <__alt_data_end+0xff0041f0>
    4774:	d9c02785 	stb	r7,158(sp)
    4778:	003e9d06 	br	41f0 <__alt_data_end+0xff0041f0>
    477c:	00c00044 	movi	r3,1
    4780:	01c00ac4 	movi	r7,43
    4784:	ac400007 	ldb	r17,0(r21)
    4788:	003d5e06 	br	3d04 <__alt_data_end+0xff003d04>
    478c:	94800814 	ori	r18,r18,32
    4790:	ac400007 	ldb	r17,0(r21)
    4794:	003d5b06 	br	3d04 <__alt_data_end+0xff003d04>
    4798:	d8c02d17 	ldw	r3,180(sp)
    479c:	d8002785 	stb	zero,158(sp)
    47a0:	1c000017 	ldw	r16,0(r3)
    47a4:	1cc00104 	addi	r19,r3,4
    47a8:	80041926 	beq	r16,zero,5810 <___vfprintf_internal_r+0x1c90>
    47ac:	d9002917 	ldw	r4,164(sp)
    47b0:	2003d016 	blt	r4,zero,56f4 <___vfprintf_internal_r+0x1b74>
    47b4:	200d883a 	mov	r6,r4
    47b8:	000b883a 	mov	r5,zero
    47bc:	8009883a 	mov	r4,r16
    47c0:	da003d15 	stw	r8,244(sp)
    47c4:	0008b840 	call	8b84 <memchr>
    47c8:	da003d17 	ldw	r8,244(sp)
    47cc:	10045426 	beq	r2,zero,5920 <___vfprintf_internal_r+0x1da0>
    47d0:	1405c83a 	sub	r2,r2,r16
    47d4:	d8802e15 	stw	r2,184(sp)
    47d8:	1003cc16 	blt	r2,zero,570c <___vfprintf_internal_r+0x1b8c>
    47dc:	df002783 	ldbu	fp,158(sp)
    47e0:	d8802a15 	stw	r2,168(sp)
    47e4:	dcc02d15 	stw	r19,180(sp)
    47e8:	d8002915 	stw	zero,164(sp)
    47ec:	d8003215 	stw	zero,200(sp)
    47f0:	003eb006 	br	42b4 <__alt_data_end+0xff0042b4>
    47f4:	18c03fcc 	andi	r3,r3,255
    47f8:	183f9b26 	beq	r3,zero,4668 <__alt_data_end+0xff004668>
    47fc:	d9c02785 	stb	r7,158(sp)
    4800:	003f9906 	br	4668 <__alt_data_end+0xff004668>
    4804:	18c03fcc 	andi	r3,r3,255
    4808:	1805551e 	bne	r3,zero,5d60 <___vfprintf_internal_r+0x21e0>
    480c:	01400074 	movhi	r5,1
    4810:	2949f904 	addi	r5,r5,10212
    4814:	d9403915 	stw	r5,228(sp)
    4818:	9080080c 	andi	r2,r18,32
    481c:	103fae1e 	bne	r2,zero,46d8 <__alt_data_end+0xff0046d8>
    4820:	9080040c 	andi	r2,r18,16
    4824:	1002de26 	beq	r2,zero,53a0 <___vfprintf_internal_r+0x1820>
    4828:	d8c02d17 	ldw	r3,180(sp)
    482c:	002d883a 	mov	r22,zero
    4830:	1cc00017 	ldw	r19,0(r3)
    4834:	18c00104 	addi	r3,r3,4
    4838:	d8c02d15 	stw	r3,180(sp)
    483c:	003fab06 	br	46ec <__alt_data_end+0xff0046ec>
    4840:	38803fcc 	andi	r2,r7,255
    4844:	1080201c 	xori	r2,r2,128
    4848:	10bfe004 	addi	r2,r2,-128
    484c:	1002d21e 	bne	r2,zero,5398 <___vfprintf_internal_r+0x1818>
    4850:	00c00044 	movi	r3,1
    4854:	01c00804 	movi	r7,32
    4858:	ac400007 	ldb	r17,0(r21)
    485c:	003d2906 	br	3d04 <__alt_data_end+0xff003d04>
    4860:	94800054 	ori	r18,r18,1
    4864:	ac400007 	ldb	r17,0(r21)
    4868:	003d2606 	br	3d04 <__alt_data_end+0xff003d04>
    486c:	18c03fcc 	andi	r3,r3,255
    4870:	183e0526 	beq	r3,zero,4088 <__alt_data_end+0xff004088>
    4874:	d9c02785 	stb	r7,158(sp)
    4878:	003e0306 	br	4088 <__alt_data_end+0xff004088>
    487c:	94801014 	ori	r18,r18,64
    4880:	ac400007 	ldb	r17,0(r21)
    4884:	003d1f06 	br	3d04 <__alt_data_end+0xff003d04>
    4888:	ac400007 	ldb	r17,0(r21)
    488c:	8a438726 	beq	r17,r9,56ac <___vfprintf_internal_r+0x1b2c>
    4890:	94800414 	ori	r18,r18,16
    4894:	003d1b06 	br	3d04 <__alt_data_end+0xff003d04>
    4898:	18c03fcc 	andi	r3,r3,255
    489c:	1805341e 	bne	r3,zero,5d70 <___vfprintf_internal_r+0x21f0>
    48a0:	9080080c 	andi	r2,r18,32
    48a4:	1002cd26 	beq	r2,zero,53dc <___vfprintf_internal_r+0x185c>
    48a8:	d9402d17 	ldw	r5,180(sp)
    48ac:	d9002f17 	ldw	r4,188(sp)
    48b0:	28800017 	ldw	r2,0(r5)
    48b4:	2007d7fa 	srai	r3,r4,31
    48b8:	29400104 	addi	r5,r5,4
    48bc:	d9402d15 	stw	r5,180(sp)
    48c0:	11000015 	stw	r4,0(r2)
    48c4:	10c00115 	stw	r3,4(r2)
    48c8:	003ce506 	br	3c60 <__alt_data_end+0xff003c60>
    48cc:	d8c02d17 	ldw	r3,180(sp)
    48d0:	d9002d17 	ldw	r4,180(sp)
    48d4:	d8002785 	stb	zero,158(sp)
    48d8:	18800017 	ldw	r2,0(r3)
    48dc:	21000104 	addi	r4,r4,4
    48e0:	00c00044 	movi	r3,1
    48e4:	d8c02a15 	stw	r3,168(sp)
    48e8:	d8801405 	stb	r2,80(sp)
    48ec:	d9002d15 	stw	r4,180(sp)
    48f0:	d8c02e15 	stw	r3,184(sp)
    48f4:	d8002915 	stw	zero,164(sp)
    48f8:	d8003215 	stw	zero,200(sp)
    48fc:	dc001404 	addi	r16,sp,80
    4900:	0039883a 	mov	fp,zero
    4904:	003e7206 	br	42d0 <__alt_data_end+0xff0042d0>
    4908:	01000074 	movhi	r4,1
    490c:	2109f904 	addi	r4,r4,10212
    4910:	0039883a 	mov	fp,zero
    4914:	d9003915 	stw	r4,228(sp)
    4918:	04401e04 	movi	r17,120
    491c:	003f8206 	br	4728 <__alt_data_end+0xff004728>
    4920:	18c03fcc 	andi	r3,r3,255
    4924:	1805061e 	bne	r3,zero,5d40 <___vfprintf_internal_r+0x21c0>
    4928:	883d9126 	beq	r17,zero,3f70 <__alt_data_end+0xff003f70>
    492c:	00c00044 	movi	r3,1
    4930:	d8c02a15 	stw	r3,168(sp)
    4934:	dc401405 	stb	r17,80(sp)
    4938:	d8002785 	stb	zero,158(sp)
    493c:	003fec06 	br	48f0 <__alt_data_end+0xff0048f0>
    4940:	01400074 	movhi	r5,1
    4944:	2949f904 	addi	r5,r5,10212
    4948:	d9403915 	stw	r5,228(sp)
    494c:	d8c02d15 	stw	r3,180(sp)
    4950:	1025883a 	mov	r18,r2
    4954:	04401e04 	movi	r17,120
    4958:	9d84b03a 	or	r2,r19,r22
    495c:	1000fc1e 	bne	r2,zero,4d50 <___vfprintf_internal_r+0x11d0>
    4960:	0039883a 	mov	fp,zero
    4964:	00800084 	movi	r2,2
    4968:	10803fcc 	andi	r2,r2,255
    496c:	00c00044 	movi	r3,1
    4970:	10c20f26 	beq	r2,r3,51b0 <___vfprintf_internal_r+0x1630>
    4974:	00c00084 	movi	r3,2
    4978:	10fd6326 	beq	r2,r3,3f08 <__alt_data_end+0xff003f08>
    497c:	003e2d06 	br	4234 <__alt_data_end+0xff004234>
    4980:	d8c02017 	ldw	r3,128(sp)
    4984:	003e9306 	br	43d4 <__alt_data_end+0xff0043d4>
    4988:	00801944 	movi	r2,101
    498c:	14407e0e 	bge	r2,r17,4b88 <___vfprintf_internal_r+0x1008>
    4990:	d9003617 	ldw	r4,216(sp)
    4994:	d9403817 	ldw	r5,224(sp)
    4998:	000d883a 	mov	r6,zero
    499c:	000f883a 	mov	r7,zero
    49a0:	d8c03c15 	stw	r3,240(sp)
    49a4:	da003d15 	stw	r8,244(sp)
    49a8:	000e3e00 	call	e3e0 <__eqdf2>
    49ac:	d8c03c17 	ldw	r3,240(sp)
    49b0:	da003d17 	ldw	r8,244(sp)
    49b4:	1000f71e 	bne	r2,zero,4d94 <___vfprintf_internal_r+0x1214>
    49b8:	d8801f17 	ldw	r2,124(sp)
    49bc:	01000074 	movhi	r4,1
    49c0:	210a0004 	addi	r4,r4,10240
    49c4:	18c00044 	addi	r3,r3,1
    49c8:	10800044 	addi	r2,r2,1
    49cc:	41000015 	stw	r4,0(r8)
    49d0:	01000044 	movi	r4,1
    49d4:	41000115 	stw	r4,4(r8)
    49d8:	d8c02015 	stw	r3,128(sp)
    49dc:	d8801f15 	stw	r2,124(sp)
    49e0:	010001c4 	movi	r4,7
    49e4:	2082b816 	blt	r4,r2,54c8 <___vfprintf_internal_r+0x1948>
    49e8:	42000204 	addi	r8,r8,8
    49ec:	d8802617 	ldw	r2,152(sp)
    49f0:	d9403317 	ldw	r5,204(sp)
    49f4:	11400216 	blt	r2,r5,4a00 <___vfprintf_internal_r+0xe80>
    49f8:	9080004c 	andi	r2,r18,1
    49fc:	103ed526 	beq	r2,zero,4554 <__alt_data_end+0xff004554>
    4a00:	d8803717 	ldw	r2,220(sp)
    4a04:	d9003417 	ldw	r4,208(sp)
    4a08:	d9403717 	ldw	r5,220(sp)
    4a0c:	1887883a 	add	r3,r3,r2
    4a10:	d8801f17 	ldw	r2,124(sp)
    4a14:	41000015 	stw	r4,0(r8)
    4a18:	41400115 	stw	r5,4(r8)
    4a1c:	10800044 	addi	r2,r2,1
    4a20:	d8c02015 	stw	r3,128(sp)
    4a24:	d8801f15 	stw	r2,124(sp)
    4a28:	010001c4 	movi	r4,7
    4a2c:	20832916 	blt	r4,r2,56d4 <___vfprintf_internal_r+0x1b54>
    4a30:	42000204 	addi	r8,r8,8
    4a34:	d8803317 	ldw	r2,204(sp)
    4a38:	143fffc4 	addi	r16,r2,-1
    4a3c:	043ec50e 	bge	zero,r16,4554 <__alt_data_end+0xff004554>
    4a40:	04400404 	movi	r17,16
    4a44:	d8801f17 	ldw	r2,124(sp)
    4a48:	8c00880e 	bge	r17,r16,4c6c <___vfprintf_internal_r+0x10ec>
    4a4c:	01400074 	movhi	r5,1
    4a50:	294a0084 	addi	r5,r5,10242
    4a54:	d9402b15 	stw	r5,172(sp)
    4a58:	058001c4 	movi	r22,7
    4a5c:	dcc02c17 	ldw	r19,176(sp)
    4a60:	00000306 	br	4a70 <___vfprintf_internal_r+0xef0>
    4a64:	42000204 	addi	r8,r8,8
    4a68:	843ffc04 	addi	r16,r16,-16
    4a6c:	8c00820e 	bge	r17,r16,4c78 <___vfprintf_internal_r+0x10f8>
    4a70:	18c00404 	addi	r3,r3,16
    4a74:	10800044 	addi	r2,r2,1
    4a78:	45000015 	stw	r20,0(r8)
    4a7c:	44400115 	stw	r17,4(r8)
    4a80:	d8c02015 	stw	r3,128(sp)
    4a84:	d8801f15 	stw	r2,124(sp)
    4a88:	b0bff60e 	bge	r22,r2,4a64 <__alt_data_end+0xff004a64>
    4a8c:	d9801e04 	addi	r6,sp,120
    4a90:	b80b883a 	mov	r5,r23
    4a94:	9809883a 	mov	r4,r19
    4a98:	000a91c0 	call	a91c <__sprint_r>
    4a9c:	103d3a1e 	bne	r2,zero,3f88 <__alt_data_end+0xff003f88>
    4aa0:	d8c02017 	ldw	r3,128(sp)
    4aa4:	d8801f17 	ldw	r2,124(sp)
    4aa8:	da000404 	addi	r8,sp,16
    4aac:	003fee06 	br	4a68 <__alt_data_end+0xff004a68>
    4ab0:	d9403117 	ldw	r5,196(sp)
    4ab4:	d8802a17 	ldw	r2,168(sp)
    4ab8:	28adc83a 	sub	r22,r5,r2
    4abc:	05be630e 	bge	zero,r22,444c <__alt_data_end+0xff00444c>
    4ac0:	07000404 	movi	fp,16
    4ac4:	d8801f17 	ldw	r2,124(sp)
    4ac8:	e5838f0e 	bge	fp,r22,5908 <___vfprintf_internal_r+0x1d88>
    4acc:	01400074 	movhi	r5,1
    4ad0:	294a0084 	addi	r5,r5,10242
    4ad4:	dc403015 	stw	r17,192(sp)
    4ad8:	d9402b15 	stw	r5,172(sp)
    4adc:	b023883a 	mov	r17,r22
    4ae0:	04c001c4 	movi	r19,7
    4ae4:	a82d883a 	mov	r22,r21
    4ae8:	902b883a 	mov	r21,r18
    4aec:	8025883a 	mov	r18,r16
    4af0:	dc002c17 	ldw	r16,176(sp)
    4af4:	00000306 	br	4b04 <___vfprintf_internal_r+0xf84>
    4af8:	8c7ffc04 	addi	r17,r17,-16
    4afc:	42000204 	addi	r8,r8,8
    4b00:	e440110e 	bge	fp,r17,4b48 <___vfprintf_internal_r+0xfc8>
    4b04:	18c00404 	addi	r3,r3,16
    4b08:	10800044 	addi	r2,r2,1
    4b0c:	45000015 	stw	r20,0(r8)
    4b10:	47000115 	stw	fp,4(r8)
    4b14:	d8c02015 	stw	r3,128(sp)
    4b18:	d8801f15 	stw	r2,124(sp)
    4b1c:	98bff60e 	bge	r19,r2,4af8 <__alt_data_end+0xff004af8>
    4b20:	d9801e04 	addi	r6,sp,120
    4b24:	b80b883a 	mov	r5,r23
    4b28:	8009883a 	mov	r4,r16
    4b2c:	000a91c0 	call	a91c <__sprint_r>
    4b30:	103d151e 	bne	r2,zero,3f88 <__alt_data_end+0xff003f88>
    4b34:	8c7ffc04 	addi	r17,r17,-16
    4b38:	d8c02017 	ldw	r3,128(sp)
    4b3c:	d8801f17 	ldw	r2,124(sp)
    4b40:	da000404 	addi	r8,sp,16
    4b44:	e47fef16 	blt	fp,r17,4b04 <__alt_data_end+0xff004b04>
    4b48:	9021883a 	mov	r16,r18
    4b4c:	a825883a 	mov	r18,r21
    4b50:	b02b883a 	mov	r21,r22
    4b54:	882d883a 	mov	r22,r17
    4b58:	dc403017 	ldw	r17,192(sp)
    4b5c:	d9002b17 	ldw	r4,172(sp)
    4b60:	1d87883a 	add	r3,r3,r22
    4b64:	10800044 	addi	r2,r2,1
    4b68:	41000015 	stw	r4,0(r8)
    4b6c:	45800115 	stw	r22,4(r8)
    4b70:	d8c02015 	stw	r3,128(sp)
    4b74:	d8801f15 	stw	r2,124(sp)
    4b78:	010001c4 	movi	r4,7
    4b7c:	20818e16 	blt	r4,r2,51b8 <___vfprintf_internal_r+0x1638>
    4b80:	42000204 	addi	r8,r8,8
    4b84:	003e3106 	br	444c <__alt_data_end+0xff00444c>
    4b88:	d9403317 	ldw	r5,204(sp)
    4b8c:	00800044 	movi	r2,1
    4b90:	18c00044 	addi	r3,r3,1
    4b94:	1141530e 	bge	r2,r5,50e4 <___vfprintf_internal_r+0x1564>
    4b98:	dc401f17 	ldw	r17,124(sp)
    4b9c:	00800044 	movi	r2,1
    4ba0:	40800115 	stw	r2,4(r8)
    4ba4:	8c400044 	addi	r17,r17,1
    4ba8:	44000015 	stw	r16,0(r8)
    4bac:	d8c02015 	stw	r3,128(sp)
    4bb0:	dc401f15 	stw	r17,124(sp)
    4bb4:	008001c4 	movi	r2,7
    4bb8:	14416b16 	blt	r2,r17,5168 <___vfprintf_internal_r+0x15e8>
    4bbc:	42000204 	addi	r8,r8,8
    4bc0:	d8803717 	ldw	r2,220(sp)
    4bc4:	d9003417 	ldw	r4,208(sp)
    4bc8:	8c400044 	addi	r17,r17,1
    4bcc:	10c7883a 	add	r3,r2,r3
    4bd0:	40800115 	stw	r2,4(r8)
    4bd4:	41000015 	stw	r4,0(r8)
    4bd8:	d8c02015 	stw	r3,128(sp)
    4bdc:	dc401f15 	stw	r17,124(sp)
    4be0:	008001c4 	movi	r2,7
    4be4:	14416916 	blt	r2,r17,518c <___vfprintf_internal_r+0x160c>
    4be8:	45800204 	addi	r22,r8,8
    4bec:	d9003617 	ldw	r4,216(sp)
    4bf0:	d9403817 	ldw	r5,224(sp)
    4bf4:	000d883a 	mov	r6,zero
    4bf8:	000f883a 	mov	r7,zero
    4bfc:	d8c03c15 	stw	r3,240(sp)
    4c00:	000e3e00 	call	e3e0 <__eqdf2>
    4c04:	d8c03c17 	ldw	r3,240(sp)
    4c08:	1000bc26 	beq	r2,zero,4efc <___vfprintf_internal_r+0x137c>
    4c0c:	d9403317 	ldw	r5,204(sp)
    4c10:	84000044 	addi	r16,r16,1
    4c14:	8c400044 	addi	r17,r17,1
    4c18:	28bfffc4 	addi	r2,r5,-1
    4c1c:	1887883a 	add	r3,r3,r2
    4c20:	b0800115 	stw	r2,4(r22)
    4c24:	b4000015 	stw	r16,0(r22)
    4c28:	d8c02015 	stw	r3,128(sp)
    4c2c:	dc401f15 	stw	r17,124(sp)
    4c30:	008001c4 	movi	r2,7
    4c34:	14414316 	blt	r2,r17,5144 <___vfprintf_internal_r+0x15c4>
    4c38:	b5800204 	addi	r22,r22,8
    4c3c:	d9003a17 	ldw	r4,232(sp)
    4c40:	df0022c4 	addi	fp,sp,139
    4c44:	8c400044 	addi	r17,r17,1
    4c48:	20c7883a 	add	r3,r4,r3
    4c4c:	b7000015 	stw	fp,0(r22)
    4c50:	b1000115 	stw	r4,4(r22)
    4c54:	d8c02015 	stw	r3,128(sp)
    4c58:	dc401f15 	stw	r17,124(sp)
    4c5c:	008001c4 	movi	r2,7
    4c60:	14400e16 	blt	r2,r17,4c9c <___vfprintf_internal_r+0x111c>
    4c64:	b2000204 	addi	r8,r22,8
    4c68:	003e3a06 	br	4554 <__alt_data_end+0xff004554>
    4c6c:	01000074 	movhi	r4,1
    4c70:	210a0084 	addi	r4,r4,10242
    4c74:	d9002b15 	stw	r4,172(sp)
    4c78:	d9002b17 	ldw	r4,172(sp)
    4c7c:	1c07883a 	add	r3,r3,r16
    4c80:	44000115 	stw	r16,4(r8)
    4c84:	41000015 	stw	r4,0(r8)
    4c88:	10800044 	addi	r2,r2,1
    4c8c:	d8c02015 	stw	r3,128(sp)
    4c90:	d8801f15 	stw	r2,124(sp)
    4c94:	010001c4 	movi	r4,7
    4c98:	20be2d0e 	bge	r4,r2,4550 <__alt_data_end+0xff004550>
    4c9c:	d9002c17 	ldw	r4,176(sp)
    4ca0:	d9801e04 	addi	r6,sp,120
    4ca4:	b80b883a 	mov	r5,r23
    4ca8:	000a91c0 	call	a91c <__sprint_r>
    4cac:	103cb61e 	bne	r2,zero,3f88 <__alt_data_end+0xff003f88>
    4cb0:	d8c02017 	ldw	r3,128(sp)
    4cb4:	da000404 	addi	r8,sp,16
    4cb8:	003e2606 	br	4554 <__alt_data_end+0xff004554>
    4cbc:	d9002c17 	ldw	r4,176(sp)
    4cc0:	d9801e04 	addi	r6,sp,120
    4cc4:	b80b883a 	mov	r5,r23
    4cc8:	000a91c0 	call	a91c <__sprint_r>
    4ccc:	103e5d26 	beq	r2,zero,4644 <__alt_data_end+0xff004644>
    4cd0:	003cad06 	br	3f88 <__alt_data_end+0xff003f88>
    4cd4:	d9002c17 	ldw	r4,176(sp)
    4cd8:	d9801e04 	addi	r6,sp,120
    4cdc:	b80b883a 	mov	r5,r23
    4ce0:	000a91c0 	call	a91c <__sprint_r>
    4ce4:	103ca81e 	bne	r2,zero,3f88 <__alt_data_end+0xff003f88>
    4ce8:	d8c02017 	ldw	r3,128(sp)
    4cec:	da000404 	addi	r8,sp,16
    4cf0:	003e0b06 	br	4520 <__alt_data_end+0xff004520>
    4cf4:	d9002c17 	ldw	r4,176(sp)
    4cf8:	d9801e04 	addi	r6,sp,120
    4cfc:	b80b883a 	mov	r5,r23
    4d00:	000a91c0 	call	a91c <__sprint_r>
    4d04:	103ca01e 	bne	r2,zero,3f88 <__alt_data_end+0xff003f88>
    4d08:	d8c02017 	ldw	r3,128(sp)
    4d0c:	da000404 	addi	r8,sp,16
    4d10:	003dbd06 	br	4408 <__alt_data_end+0xff004408>
    4d14:	d9002c17 	ldw	r4,176(sp)
    4d18:	d9801e04 	addi	r6,sp,120
    4d1c:	b80b883a 	mov	r5,r23
    4d20:	000a91c0 	call	a91c <__sprint_r>
    4d24:	103c981e 	bne	r2,zero,3f88 <__alt_data_end+0xff003f88>
    4d28:	d8c02017 	ldw	r3,128(sp)
    4d2c:	da000404 	addi	r8,sp,16
    4d30:	003dc306 	br	4440 <__alt_data_end+0xff004440>
    4d34:	d8802917 	ldw	r2,164(sp)
    4d38:	d8002785 	stb	zero,158(sp)
    4d3c:	103f0616 	blt	r2,zero,4958 <__alt_data_end+0xff004958>
    4d40:	00ffdfc4 	movi	r3,-129
    4d44:	9d84b03a 	or	r2,r19,r22
    4d48:	90e4703a 	and	r18,r18,r3
    4d4c:	103c6b26 	beq	r2,zero,3efc <__alt_data_end+0xff003efc>
    4d50:	0039883a 	mov	fp,zero
    4d54:	003e7406 	br	4728 <__alt_data_end+0xff004728>
    4d58:	9080040c 	andi	r2,r18,16
    4d5c:	1001b326 	beq	r2,zero,542c <___vfprintf_internal_r+0x18ac>
    4d60:	d9002d17 	ldw	r4,180(sp)
    4d64:	d9402917 	ldw	r5,164(sp)
    4d68:	d8002785 	stb	zero,158(sp)
    4d6c:	20800104 	addi	r2,r4,4
    4d70:	24c00017 	ldw	r19,0(r4)
    4d74:	002d883a 	mov	r22,zero
    4d78:	2801b516 	blt	r5,zero,5450 <___vfprintf_internal_r+0x18d0>
    4d7c:	00ffdfc4 	movi	r3,-129
    4d80:	d8802d15 	stw	r2,180(sp)
    4d84:	90e4703a 	and	r18,r18,r3
    4d88:	983d2726 	beq	r19,zero,4228 <__alt_data_end+0xff004228>
    4d8c:	0039883a 	mov	fp,zero
    4d90:	003d2a06 	br	423c <__alt_data_end+0xff00423c>
    4d94:	dc402617 	ldw	r17,152(sp)
    4d98:	0441d30e 	bge	zero,r17,54e8 <___vfprintf_internal_r+0x1968>
    4d9c:	dc403217 	ldw	r17,200(sp)
    4da0:	d8803317 	ldw	r2,204(sp)
    4da4:	1440010e 	bge	r2,r17,4dac <___vfprintf_internal_r+0x122c>
    4da8:	1023883a 	mov	r17,r2
    4dac:	04400a0e 	bge	zero,r17,4dd8 <___vfprintf_internal_r+0x1258>
    4db0:	d8801f17 	ldw	r2,124(sp)
    4db4:	1c47883a 	add	r3,r3,r17
    4db8:	44000015 	stw	r16,0(r8)
    4dbc:	10800044 	addi	r2,r2,1
    4dc0:	44400115 	stw	r17,4(r8)
    4dc4:	d8c02015 	stw	r3,128(sp)
    4dc8:	d8801f15 	stw	r2,124(sp)
    4dcc:	010001c4 	movi	r4,7
    4dd0:	20826516 	blt	r4,r2,5768 <___vfprintf_internal_r+0x1be8>
    4dd4:	42000204 	addi	r8,r8,8
    4dd8:	88026116 	blt	r17,zero,5760 <___vfprintf_internal_r+0x1be0>
    4ddc:	d9003217 	ldw	r4,200(sp)
    4de0:	2463c83a 	sub	r17,r4,r17
    4de4:	04407b0e 	bge	zero,r17,4fd4 <___vfprintf_internal_r+0x1454>
    4de8:	05800404 	movi	r22,16
    4dec:	d8801f17 	ldw	r2,124(sp)
    4df0:	b4419d0e 	bge	r22,r17,5468 <___vfprintf_internal_r+0x18e8>
    4df4:	01000074 	movhi	r4,1
    4df8:	210a0084 	addi	r4,r4,10242
    4dfc:	d9002b15 	stw	r4,172(sp)
    4e00:	070001c4 	movi	fp,7
    4e04:	dcc02c17 	ldw	r19,176(sp)
    4e08:	00000306 	br	4e18 <___vfprintf_internal_r+0x1298>
    4e0c:	42000204 	addi	r8,r8,8
    4e10:	8c7ffc04 	addi	r17,r17,-16
    4e14:	b441970e 	bge	r22,r17,5474 <___vfprintf_internal_r+0x18f4>
    4e18:	18c00404 	addi	r3,r3,16
    4e1c:	10800044 	addi	r2,r2,1
    4e20:	45000015 	stw	r20,0(r8)
    4e24:	45800115 	stw	r22,4(r8)
    4e28:	d8c02015 	stw	r3,128(sp)
    4e2c:	d8801f15 	stw	r2,124(sp)
    4e30:	e0bff60e 	bge	fp,r2,4e0c <__alt_data_end+0xff004e0c>
    4e34:	d9801e04 	addi	r6,sp,120
    4e38:	b80b883a 	mov	r5,r23
    4e3c:	9809883a 	mov	r4,r19
    4e40:	000a91c0 	call	a91c <__sprint_r>
    4e44:	103c501e 	bne	r2,zero,3f88 <__alt_data_end+0xff003f88>
    4e48:	d8c02017 	ldw	r3,128(sp)
    4e4c:	d8801f17 	ldw	r2,124(sp)
    4e50:	da000404 	addi	r8,sp,16
    4e54:	003fee06 	br	4e10 <__alt_data_end+0xff004e10>
    4e58:	d9002c17 	ldw	r4,176(sp)
    4e5c:	d9801e04 	addi	r6,sp,120
    4e60:	b80b883a 	mov	r5,r23
    4e64:	000a91c0 	call	a91c <__sprint_r>
    4e68:	103c471e 	bne	r2,zero,3f88 <__alt_data_end+0xff003f88>
    4e6c:	d8c02017 	ldw	r3,128(sp)
    4e70:	df002787 	ldb	fp,158(sp)
    4e74:	da000404 	addi	r8,sp,16
    4e78:	003d5606 	br	43d4 <__alt_data_end+0xff0043d4>
    4e7c:	9080040c 	andi	r2,r18,16
    4e80:	10016126 	beq	r2,zero,5408 <___vfprintf_internal_r+0x1888>
    4e84:	d8802d17 	ldw	r2,180(sp)
    4e88:	14c00017 	ldw	r19,0(r2)
    4e8c:	10800104 	addi	r2,r2,4
    4e90:	d8802d15 	stw	r2,180(sp)
    4e94:	982dd7fa 	srai	r22,r19,31
    4e98:	b005883a 	mov	r2,r22
    4e9c:	003c8206 	br	40a8 <__alt_data_end+0xff0040a8>
    4ea0:	9080040c 	andi	r2,r18,16
    4ea4:	10003526 	beq	r2,zero,4f7c <___vfprintf_internal_r+0x13fc>
    4ea8:	d9402d17 	ldw	r5,180(sp)
    4eac:	d8c02917 	ldw	r3,164(sp)
    4eb0:	d8002785 	stb	zero,158(sp)
    4eb4:	28800104 	addi	r2,r5,4
    4eb8:	2cc00017 	ldw	r19,0(r5)
    4ebc:	002d883a 	mov	r22,zero
    4ec0:	18003716 	blt	r3,zero,4fa0 <___vfprintf_internal_r+0x1420>
    4ec4:	00ffdfc4 	movi	r3,-129
    4ec8:	d8802d15 	stw	r2,180(sp)
    4ecc:	90e4703a 	and	r18,r18,r3
    4ed0:	0039883a 	mov	fp,zero
    4ed4:	983df326 	beq	r19,zero,46a4 <__alt_data_end+0xff0046a4>
    4ed8:	00800244 	movi	r2,9
    4edc:	14fc7b36 	bltu	r2,r19,40cc <__alt_data_end+0xff0040cc>
    4ee0:	d8c02817 	ldw	r3,160(sp)
    4ee4:	dc001dc4 	addi	r16,sp,119
    4ee8:	9cc00c04 	addi	r19,r19,48
    4eec:	1c07c83a 	sub	r3,r3,r16
    4ef0:	dcc01dc5 	stb	r19,119(sp)
    4ef4:	d8c02e15 	stw	r3,184(sp)
    4ef8:	003ce806 	br	429c <__alt_data_end+0xff00429c>
    4efc:	d8803317 	ldw	r2,204(sp)
    4f00:	143fffc4 	addi	r16,r2,-1
    4f04:	043f4d0e 	bge	zero,r16,4c3c <__alt_data_end+0xff004c3c>
    4f08:	07000404 	movi	fp,16
    4f0c:	e400810e 	bge	fp,r16,5114 <___vfprintf_internal_r+0x1594>
    4f10:	01400074 	movhi	r5,1
    4f14:	294a0084 	addi	r5,r5,10242
    4f18:	d9402b15 	stw	r5,172(sp)
    4f1c:	01c001c4 	movi	r7,7
    4f20:	dcc02c17 	ldw	r19,176(sp)
    4f24:	00000306 	br	4f34 <___vfprintf_internal_r+0x13b4>
    4f28:	b5800204 	addi	r22,r22,8
    4f2c:	843ffc04 	addi	r16,r16,-16
    4f30:	e4007b0e 	bge	fp,r16,5120 <___vfprintf_internal_r+0x15a0>
    4f34:	18c00404 	addi	r3,r3,16
    4f38:	8c400044 	addi	r17,r17,1
    4f3c:	b5000015 	stw	r20,0(r22)
    4f40:	b7000115 	stw	fp,4(r22)
    4f44:	d8c02015 	stw	r3,128(sp)
    4f48:	dc401f15 	stw	r17,124(sp)
    4f4c:	3c7ff60e 	bge	r7,r17,4f28 <__alt_data_end+0xff004f28>
    4f50:	d9801e04 	addi	r6,sp,120
    4f54:	b80b883a 	mov	r5,r23
    4f58:	9809883a 	mov	r4,r19
    4f5c:	d9c03c15 	stw	r7,240(sp)
    4f60:	000a91c0 	call	a91c <__sprint_r>
    4f64:	d9c03c17 	ldw	r7,240(sp)
    4f68:	103c071e 	bne	r2,zero,3f88 <__alt_data_end+0xff003f88>
    4f6c:	d8c02017 	ldw	r3,128(sp)
    4f70:	dc401f17 	ldw	r17,124(sp)
    4f74:	dd800404 	addi	r22,sp,16
    4f78:	003fec06 	br	4f2c <__alt_data_end+0xff004f2c>
    4f7c:	9080100c 	andi	r2,r18,64
    4f80:	d8002785 	stb	zero,158(sp)
    4f84:	10010e26 	beq	r2,zero,53c0 <___vfprintf_internal_r+0x1840>
    4f88:	d9002d17 	ldw	r4,180(sp)
    4f8c:	d9402917 	ldw	r5,164(sp)
    4f90:	002d883a 	mov	r22,zero
    4f94:	20800104 	addi	r2,r4,4
    4f98:	24c0000b 	ldhu	r19,0(r4)
    4f9c:	283fc90e 	bge	r5,zero,4ec4 <__alt_data_end+0xff004ec4>
    4fa0:	d8802d15 	stw	r2,180(sp)
    4fa4:	0039883a 	mov	fp,zero
    4fa8:	9d84b03a 	or	r2,r19,r22
    4fac:	103c461e 	bne	r2,zero,40c8 <__alt_data_end+0xff0040c8>
    4fb0:	00800044 	movi	r2,1
    4fb4:	003e6c06 	br	4968 <__alt_data_end+0xff004968>
    4fb8:	d9002c17 	ldw	r4,176(sp)
    4fbc:	d9801e04 	addi	r6,sp,120
    4fc0:	b80b883a 	mov	r5,r23
    4fc4:	000a91c0 	call	a91c <__sprint_r>
    4fc8:	103bef1e 	bne	r2,zero,3f88 <__alt_data_end+0xff003f88>
    4fcc:	d8c02017 	ldw	r3,128(sp)
    4fd0:	da000404 	addi	r8,sp,16
    4fd4:	d9003217 	ldw	r4,200(sp)
    4fd8:	d8802617 	ldw	r2,152(sp)
    4fdc:	d9403317 	ldw	r5,204(sp)
    4fe0:	8123883a 	add	r17,r16,r4
    4fe4:	11400216 	blt	r2,r5,4ff0 <___vfprintf_internal_r+0x1470>
    4fe8:	9100004c 	andi	r4,r18,1
    4fec:	20000d26 	beq	r4,zero,5024 <___vfprintf_internal_r+0x14a4>
    4ff0:	d9003717 	ldw	r4,220(sp)
    4ff4:	d9403417 	ldw	r5,208(sp)
    4ff8:	1907883a 	add	r3,r3,r4
    4ffc:	d9001f17 	ldw	r4,124(sp)
    5000:	41400015 	stw	r5,0(r8)
    5004:	d9403717 	ldw	r5,220(sp)
    5008:	21000044 	addi	r4,r4,1
    500c:	d8c02015 	stw	r3,128(sp)
    5010:	41400115 	stw	r5,4(r8)
    5014:	d9001f15 	stw	r4,124(sp)
    5018:	014001c4 	movi	r5,7
    501c:	2901e816 	blt	r5,r4,57c0 <___vfprintf_internal_r+0x1c40>
    5020:	42000204 	addi	r8,r8,8
    5024:	d9003317 	ldw	r4,204(sp)
    5028:	8121883a 	add	r16,r16,r4
    502c:	2085c83a 	sub	r2,r4,r2
    5030:	8461c83a 	sub	r16,r16,r17
    5034:	1400010e 	bge	r2,r16,503c <___vfprintf_internal_r+0x14bc>
    5038:	1021883a 	mov	r16,r2
    503c:	04000a0e 	bge	zero,r16,5068 <___vfprintf_internal_r+0x14e8>
    5040:	d9001f17 	ldw	r4,124(sp)
    5044:	1c07883a 	add	r3,r3,r16
    5048:	44400015 	stw	r17,0(r8)
    504c:	21000044 	addi	r4,r4,1
    5050:	44000115 	stw	r16,4(r8)
    5054:	d8c02015 	stw	r3,128(sp)
    5058:	d9001f15 	stw	r4,124(sp)
    505c:	014001c4 	movi	r5,7
    5060:	2901fb16 	blt	r5,r4,5850 <___vfprintf_internal_r+0x1cd0>
    5064:	42000204 	addi	r8,r8,8
    5068:	8001f716 	blt	r16,zero,5848 <___vfprintf_internal_r+0x1cc8>
    506c:	1421c83a 	sub	r16,r2,r16
    5070:	043d380e 	bge	zero,r16,4554 <__alt_data_end+0xff004554>
    5074:	04400404 	movi	r17,16
    5078:	d8801f17 	ldw	r2,124(sp)
    507c:	8c3efb0e 	bge	r17,r16,4c6c <__alt_data_end+0xff004c6c>
    5080:	01400074 	movhi	r5,1
    5084:	294a0084 	addi	r5,r5,10242
    5088:	d9402b15 	stw	r5,172(sp)
    508c:	058001c4 	movi	r22,7
    5090:	dcc02c17 	ldw	r19,176(sp)
    5094:	00000306 	br	50a4 <___vfprintf_internal_r+0x1524>
    5098:	42000204 	addi	r8,r8,8
    509c:	843ffc04 	addi	r16,r16,-16
    50a0:	8c3ef50e 	bge	r17,r16,4c78 <__alt_data_end+0xff004c78>
    50a4:	18c00404 	addi	r3,r3,16
    50a8:	10800044 	addi	r2,r2,1
    50ac:	45000015 	stw	r20,0(r8)
    50b0:	44400115 	stw	r17,4(r8)
    50b4:	d8c02015 	stw	r3,128(sp)
    50b8:	d8801f15 	stw	r2,124(sp)
    50bc:	b0bff60e 	bge	r22,r2,5098 <__alt_data_end+0xff005098>
    50c0:	d9801e04 	addi	r6,sp,120
    50c4:	b80b883a 	mov	r5,r23
    50c8:	9809883a 	mov	r4,r19
    50cc:	000a91c0 	call	a91c <__sprint_r>
    50d0:	103bad1e 	bne	r2,zero,3f88 <__alt_data_end+0xff003f88>
    50d4:	d8c02017 	ldw	r3,128(sp)
    50d8:	d8801f17 	ldw	r2,124(sp)
    50dc:	da000404 	addi	r8,sp,16
    50e0:	003fee06 	br	509c <__alt_data_end+0xff00509c>
    50e4:	9088703a 	and	r4,r18,r2
    50e8:	203eab1e 	bne	r4,zero,4b98 <__alt_data_end+0xff004b98>
    50ec:	dc401f17 	ldw	r17,124(sp)
    50f0:	40800115 	stw	r2,4(r8)
    50f4:	44000015 	stw	r16,0(r8)
    50f8:	8c400044 	addi	r17,r17,1
    50fc:	d8c02015 	stw	r3,128(sp)
    5100:	dc401f15 	stw	r17,124(sp)
    5104:	008001c4 	movi	r2,7
    5108:	14400e16 	blt	r2,r17,5144 <___vfprintf_internal_r+0x15c4>
    510c:	45800204 	addi	r22,r8,8
    5110:	003eca06 	br	4c3c <__alt_data_end+0xff004c3c>
    5114:	01000074 	movhi	r4,1
    5118:	210a0084 	addi	r4,r4,10242
    511c:	d9002b15 	stw	r4,172(sp)
    5120:	d8802b17 	ldw	r2,172(sp)
    5124:	1c07883a 	add	r3,r3,r16
    5128:	8c400044 	addi	r17,r17,1
    512c:	b0800015 	stw	r2,0(r22)
    5130:	b4000115 	stw	r16,4(r22)
    5134:	d8c02015 	stw	r3,128(sp)
    5138:	dc401f15 	stw	r17,124(sp)
    513c:	008001c4 	movi	r2,7
    5140:	147ebd0e 	bge	r2,r17,4c38 <__alt_data_end+0xff004c38>
    5144:	d9002c17 	ldw	r4,176(sp)
    5148:	d9801e04 	addi	r6,sp,120
    514c:	b80b883a 	mov	r5,r23
    5150:	000a91c0 	call	a91c <__sprint_r>
    5154:	103b8c1e 	bne	r2,zero,3f88 <__alt_data_end+0xff003f88>
    5158:	d8c02017 	ldw	r3,128(sp)
    515c:	dc401f17 	ldw	r17,124(sp)
    5160:	dd800404 	addi	r22,sp,16
    5164:	003eb506 	br	4c3c <__alt_data_end+0xff004c3c>
    5168:	d9002c17 	ldw	r4,176(sp)
    516c:	d9801e04 	addi	r6,sp,120
    5170:	b80b883a 	mov	r5,r23
    5174:	000a91c0 	call	a91c <__sprint_r>
    5178:	103b831e 	bne	r2,zero,3f88 <__alt_data_end+0xff003f88>
    517c:	d8c02017 	ldw	r3,128(sp)
    5180:	dc401f17 	ldw	r17,124(sp)
    5184:	da000404 	addi	r8,sp,16
    5188:	003e8d06 	br	4bc0 <__alt_data_end+0xff004bc0>
    518c:	d9002c17 	ldw	r4,176(sp)
    5190:	d9801e04 	addi	r6,sp,120
    5194:	b80b883a 	mov	r5,r23
    5198:	000a91c0 	call	a91c <__sprint_r>
    519c:	103b7a1e 	bne	r2,zero,3f88 <__alt_data_end+0xff003f88>
    51a0:	d8c02017 	ldw	r3,128(sp)
    51a4:	dc401f17 	ldw	r17,124(sp)
    51a8:	dd800404 	addi	r22,sp,16
    51ac:	003e8f06 	br	4bec <__alt_data_end+0xff004bec>
    51b0:	0027883a 	mov	r19,zero
    51b4:	003f4a06 	br	4ee0 <__alt_data_end+0xff004ee0>
    51b8:	d9002c17 	ldw	r4,176(sp)
    51bc:	d9801e04 	addi	r6,sp,120
    51c0:	b80b883a 	mov	r5,r23
    51c4:	000a91c0 	call	a91c <__sprint_r>
    51c8:	103b6f1e 	bne	r2,zero,3f88 <__alt_data_end+0xff003f88>
    51cc:	d8c02017 	ldw	r3,128(sp)
    51d0:	da000404 	addi	r8,sp,16
    51d4:	003c9d06 	br	444c <__alt_data_end+0xff00444c>
    51d8:	04e7c83a 	sub	r19,zero,r19
    51dc:	9804c03a 	cmpne	r2,r19,zero
    51e0:	05adc83a 	sub	r22,zero,r22
    51e4:	b0adc83a 	sub	r22,r22,r2
    51e8:	d8802917 	ldw	r2,164(sp)
    51ec:	07000b44 	movi	fp,45
    51f0:	df002785 	stb	fp,158(sp)
    51f4:	10017b16 	blt	r2,zero,57e4 <___vfprintf_internal_r+0x1c64>
    51f8:	00bfdfc4 	movi	r2,-129
    51fc:	90a4703a 	and	r18,r18,r2
    5200:	003bb106 	br	40c8 <__alt_data_end+0xff0040c8>
    5204:	d9003617 	ldw	r4,216(sp)
    5208:	d9403817 	ldw	r5,224(sp)
    520c:	da003d15 	stw	r8,244(sp)
    5210:	000a5940 	call	a594 <__fpclassifyd>
    5214:	da003d17 	ldw	r8,244(sp)
    5218:	1000f026 	beq	r2,zero,55dc <___vfprintf_internal_r+0x1a5c>
    521c:	d9002917 	ldw	r4,164(sp)
    5220:	05bff7c4 	movi	r22,-33
    5224:	00bfffc4 	movi	r2,-1
    5228:	8dac703a 	and	r22,r17,r22
    522c:	20820026 	beq	r4,r2,5a30 <___vfprintf_internal_r+0x1eb0>
    5230:	008011c4 	movi	r2,71
    5234:	b081f726 	beq	r22,r2,5a14 <___vfprintf_internal_r+0x1e94>
    5238:	d9003817 	ldw	r4,224(sp)
    523c:	90c04014 	ori	r3,r18,256
    5240:	d8c02b15 	stw	r3,172(sp)
    5244:	20021516 	blt	r4,zero,5a9c <___vfprintf_internal_r+0x1f1c>
    5248:	dcc03817 	ldw	r19,224(sp)
    524c:	d8002a05 	stb	zero,168(sp)
    5250:	00801984 	movi	r2,102
    5254:	8881f926 	beq	r17,r2,5a3c <___vfprintf_internal_r+0x1ebc>
    5258:	00801184 	movi	r2,70
    525c:	88821c26 	beq	r17,r2,5ad0 <___vfprintf_internal_r+0x1f50>
    5260:	00801144 	movi	r2,69
    5264:	b081ef26 	beq	r22,r2,5a24 <___vfprintf_internal_r+0x1ea4>
    5268:	d8c02917 	ldw	r3,164(sp)
    526c:	d8802104 	addi	r2,sp,132
    5270:	d8800315 	stw	r2,12(sp)
    5274:	d9403617 	ldw	r5,216(sp)
    5278:	d8802504 	addi	r2,sp,148
    527c:	d9002c17 	ldw	r4,176(sp)
    5280:	d8800215 	stw	r2,8(sp)
    5284:	d8802604 	addi	r2,sp,152
    5288:	d8c00015 	stw	r3,0(sp)
    528c:	d8800115 	stw	r2,4(sp)
    5290:	01c00084 	movi	r7,2
    5294:	980d883a 	mov	r6,r19
    5298:	d8c03c15 	stw	r3,240(sp)
    529c:	da003d15 	stw	r8,244(sp)
    52a0:	00061a40 	call	61a4 <_dtoa_r>
    52a4:	1021883a 	mov	r16,r2
    52a8:	008019c4 	movi	r2,103
    52ac:	d8c03c17 	ldw	r3,240(sp)
    52b0:	da003d17 	ldw	r8,244(sp)
    52b4:	88817126 	beq	r17,r2,587c <___vfprintf_internal_r+0x1cfc>
    52b8:	008011c4 	movi	r2,71
    52bc:	88829226 	beq	r17,r2,5d08 <___vfprintf_internal_r+0x2188>
    52c0:	80f9883a 	add	fp,r16,r3
    52c4:	d9003617 	ldw	r4,216(sp)
    52c8:	000d883a 	mov	r6,zero
    52cc:	000f883a 	mov	r7,zero
    52d0:	980b883a 	mov	r5,r19
    52d4:	da003d15 	stw	r8,244(sp)
    52d8:	000e3e00 	call	e3e0 <__eqdf2>
    52dc:	da003d17 	ldw	r8,244(sp)
    52e0:	10018d26 	beq	r2,zero,5918 <___vfprintf_internal_r+0x1d98>
    52e4:	d8802117 	ldw	r2,132(sp)
    52e8:	1700062e 	bgeu	r2,fp,5304 <___vfprintf_internal_r+0x1784>
    52ec:	01000c04 	movi	r4,48
    52f0:	10c00044 	addi	r3,r2,1
    52f4:	d8c02115 	stw	r3,132(sp)
    52f8:	11000005 	stb	r4,0(r2)
    52fc:	d8802117 	ldw	r2,132(sp)
    5300:	173ffb36 	bltu	r2,fp,52f0 <__alt_data_end+0xff0052f0>
    5304:	1405c83a 	sub	r2,r2,r16
    5308:	d8803315 	stw	r2,204(sp)
    530c:	008011c4 	movi	r2,71
    5310:	b0817626 	beq	r22,r2,58ec <___vfprintf_internal_r+0x1d6c>
    5314:	00801944 	movi	r2,101
    5318:	1442810e 	bge	r2,r17,5d20 <___vfprintf_internal_r+0x21a0>
    531c:	d8c02617 	ldw	r3,152(sp)
    5320:	00801984 	movi	r2,102
    5324:	d8c03215 	stw	r3,200(sp)
    5328:	8881fe26 	beq	r17,r2,5b24 <___vfprintf_internal_r+0x1fa4>
    532c:	d8c03217 	ldw	r3,200(sp)
    5330:	d9003317 	ldw	r4,204(sp)
    5334:	1901dd16 	blt	r3,r4,5aac <___vfprintf_internal_r+0x1f2c>
    5338:	9480004c 	andi	r18,r18,1
    533c:	90022b1e 	bne	r18,zero,5bec <___vfprintf_internal_r+0x206c>
    5340:	1805883a 	mov	r2,r3
    5344:	18028016 	blt	r3,zero,5d48 <___vfprintf_internal_r+0x21c8>
    5348:	d8c03217 	ldw	r3,200(sp)
    534c:	044019c4 	movi	r17,103
    5350:	d8c02e15 	stw	r3,184(sp)
    5354:	df002a07 	ldb	fp,168(sp)
    5358:	e001531e 	bne	fp,zero,58a8 <___vfprintf_internal_r+0x1d28>
    535c:	df002783 	ldbu	fp,158(sp)
    5360:	d8802a15 	stw	r2,168(sp)
    5364:	dc802b17 	ldw	r18,172(sp)
    5368:	d8002915 	stw	zero,164(sp)
    536c:	003bd106 	br	42b4 <__alt_data_end+0xff0042b4>
    5370:	d8802d17 	ldw	r2,180(sp)
    5374:	d8c02d17 	ldw	r3,180(sp)
    5378:	d9002d17 	ldw	r4,180(sp)
    537c:	10800017 	ldw	r2,0(r2)
    5380:	18c00117 	ldw	r3,4(r3)
    5384:	21000204 	addi	r4,r4,8
    5388:	d8803615 	stw	r2,216(sp)
    538c:	d8c03815 	stw	r3,224(sp)
    5390:	d9002d15 	stw	r4,180(sp)
    5394:	003b7506 	br	416c <__alt_data_end+0xff00416c>
    5398:	ac400007 	ldb	r17,0(r21)
    539c:	003a5906 	br	3d04 <__alt_data_end+0xff003d04>
    53a0:	9080100c 	andi	r2,r18,64
    53a4:	1000a826 	beq	r2,zero,5648 <___vfprintf_internal_r+0x1ac8>
    53a8:	d9002d17 	ldw	r4,180(sp)
    53ac:	002d883a 	mov	r22,zero
    53b0:	24c0000b 	ldhu	r19,0(r4)
    53b4:	21000104 	addi	r4,r4,4
    53b8:	d9002d15 	stw	r4,180(sp)
    53bc:	003ccb06 	br	46ec <__alt_data_end+0xff0046ec>
    53c0:	d8c02d17 	ldw	r3,180(sp)
    53c4:	d9002917 	ldw	r4,164(sp)
    53c8:	002d883a 	mov	r22,zero
    53cc:	18800104 	addi	r2,r3,4
    53d0:	1cc00017 	ldw	r19,0(r3)
    53d4:	203ebb0e 	bge	r4,zero,4ec4 <__alt_data_end+0xff004ec4>
    53d8:	003ef106 	br	4fa0 <__alt_data_end+0xff004fa0>
    53dc:	9080040c 	andi	r2,r18,16
    53e0:	1000921e 	bne	r2,zero,562c <___vfprintf_internal_r+0x1aac>
    53e4:	9480100c 	andi	r18,r18,64
    53e8:	90013926 	beq	r18,zero,58d0 <___vfprintf_internal_r+0x1d50>
    53ec:	d9002d17 	ldw	r4,180(sp)
    53f0:	d9402f17 	ldw	r5,188(sp)
    53f4:	20800017 	ldw	r2,0(r4)
    53f8:	21000104 	addi	r4,r4,4
    53fc:	d9002d15 	stw	r4,180(sp)
    5400:	1140000d 	sth	r5,0(r2)
    5404:	003a1606 	br	3c60 <__alt_data_end+0xff003c60>
    5408:	9080100c 	andi	r2,r18,64
    540c:	10008026 	beq	r2,zero,5610 <___vfprintf_internal_r+0x1a90>
    5410:	d8c02d17 	ldw	r3,180(sp)
    5414:	1cc0000f 	ldh	r19,0(r3)
    5418:	18c00104 	addi	r3,r3,4
    541c:	d8c02d15 	stw	r3,180(sp)
    5420:	982dd7fa 	srai	r22,r19,31
    5424:	b005883a 	mov	r2,r22
    5428:	003b1f06 	br	40a8 <__alt_data_end+0xff0040a8>
    542c:	9080100c 	andi	r2,r18,64
    5430:	d8002785 	stb	zero,158(sp)
    5434:	10008a1e 	bne	r2,zero,5660 <___vfprintf_internal_r+0x1ae0>
    5438:	d9402d17 	ldw	r5,180(sp)
    543c:	d8c02917 	ldw	r3,164(sp)
    5440:	002d883a 	mov	r22,zero
    5444:	28800104 	addi	r2,r5,4
    5448:	2cc00017 	ldw	r19,0(r5)
    544c:	183e4b0e 	bge	r3,zero,4d7c <__alt_data_end+0xff004d7c>
    5450:	9d86b03a 	or	r3,r19,r22
    5454:	d8802d15 	stw	r2,180(sp)
    5458:	183e4c1e 	bne	r3,zero,4d8c <__alt_data_end+0xff004d8c>
    545c:	0039883a 	mov	fp,zero
    5460:	0005883a 	mov	r2,zero
    5464:	003d4006 	br	4968 <__alt_data_end+0xff004968>
    5468:	01400074 	movhi	r5,1
    546c:	294a0084 	addi	r5,r5,10242
    5470:	d9402b15 	stw	r5,172(sp)
    5474:	d9402b17 	ldw	r5,172(sp)
    5478:	1c47883a 	add	r3,r3,r17
    547c:	10800044 	addi	r2,r2,1
    5480:	41400015 	stw	r5,0(r8)
    5484:	44400115 	stw	r17,4(r8)
    5488:	d8c02015 	stw	r3,128(sp)
    548c:	d8801f15 	stw	r2,124(sp)
    5490:	010001c4 	movi	r4,7
    5494:	20bec816 	blt	r4,r2,4fb8 <__alt_data_end+0xff004fb8>
    5498:	42000204 	addi	r8,r8,8
    549c:	003ecd06 	br	4fd4 <__alt_data_end+0xff004fd4>
    54a0:	d9002917 	ldw	r4,164(sp)
    54a4:	d8002785 	stb	zero,158(sp)
    54a8:	203d2d16 	blt	r4,zero,4960 <__alt_data_end+0xff004960>
    54ac:	00bfdfc4 	movi	r2,-129
    54b0:	90a4703a 	and	r18,r18,r2
    54b4:	003a9106 	br	3efc <__alt_data_end+0xff003efc>
    54b8:	01000074 	movhi	r4,1
    54bc:	210a0084 	addi	r4,r4,10242
    54c0:	d9002b15 	stw	r4,172(sp)
    54c4:	003c0c06 	br	44f8 <__alt_data_end+0xff0044f8>
    54c8:	d9002c17 	ldw	r4,176(sp)
    54cc:	d9801e04 	addi	r6,sp,120
    54d0:	b80b883a 	mov	r5,r23
    54d4:	000a91c0 	call	a91c <__sprint_r>
    54d8:	103aab1e 	bne	r2,zero,3f88 <__alt_data_end+0xff003f88>
    54dc:	d8c02017 	ldw	r3,128(sp)
    54e0:	da000404 	addi	r8,sp,16
    54e4:	003d4106 	br	49ec <__alt_data_end+0xff0049ec>
    54e8:	d8801f17 	ldw	r2,124(sp)
    54ec:	01400074 	movhi	r5,1
    54f0:	01000044 	movi	r4,1
    54f4:	18c00044 	addi	r3,r3,1
    54f8:	10800044 	addi	r2,r2,1
    54fc:	294a0004 	addi	r5,r5,10240
    5500:	41000115 	stw	r4,4(r8)
    5504:	41400015 	stw	r5,0(r8)
    5508:	d8c02015 	stw	r3,128(sp)
    550c:	d8801f15 	stw	r2,124(sp)
    5510:	010001c4 	movi	r4,7
    5514:	20805c16 	blt	r4,r2,5688 <___vfprintf_internal_r+0x1b08>
    5518:	42000204 	addi	r8,r8,8
    551c:	8800041e 	bne	r17,zero,5530 <___vfprintf_internal_r+0x19b0>
    5520:	d8803317 	ldw	r2,204(sp)
    5524:	1000021e 	bne	r2,zero,5530 <___vfprintf_internal_r+0x19b0>
    5528:	9080004c 	andi	r2,r18,1
    552c:	103c0926 	beq	r2,zero,4554 <__alt_data_end+0xff004554>
    5530:	d9003717 	ldw	r4,220(sp)
    5534:	d8801f17 	ldw	r2,124(sp)
    5538:	d9403417 	ldw	r5,208(sp)
    553c:	20c7883a 	add	r3,r4,r3
    5540:	10800044 	addi	r2,r2,1
    5544:	41000115 	stw	r4,4(r8)
    5548:	41400015 	stw	r5,0(r8)
    554c:	d8c02015 	stw	r3,128(sp)
    5550:	d8801f15 	stw	r2,124(sp)
    5554:	010001c4 	movi	r4,7
    5558:	20812116 	blt	r4,r2,59e0 <___vfprintf_internal_r+0x1e60>
    555c:	42000204 	addi	r8,r8,8
    5560:	0463c83a 	sub	r17,zero,r17
    5564:	0440730e 	bge	zero,r17,5734 <___vfprintf_internal_r+0x1bb4>
    5568:	05800404 	movi	r22,16
    556c:	b440860e 	bge	r22,r17,5788 <___vfprintf_internal_r+0x1c08>
    5570:	01400074 	movhi	r5,1
    5574:	294a0084 	addi	r5,r5,10242
    5578:	d9402b15 	stw	r5,172(sp)
    557c:	070001c4 	movi	fp,7
    5580:	dcc02c17 	ldw	r19,176(sp)
    5584:	00000306 	br	5594 <___vfprintf_internal_r+0x1a14>
    5588:	42000204 	addi	r8,r8,8
    558c:	8c7ffc04 	addi	r17,r17,-16
    5590:	b440800e 	bge	r22,r17,5794 <___vfprintf_internal_r+0x1c14>
    5594:	18c00404 	addi	r3,r3,16
    5598:	10800044 	addi	r2,r2,1
    559c:	45000015 	stw	r20,0(r8)
    55a0:	45800115 	stw	r22,4(r8)
    55a4:	d8c02015 	stw	r3,128(sp)
    55a8:	d8801f15 	stw	r2,124(sp)
    55ac:	e0bff60e 	bge	fp,r2,5588 <__alt_data_end+0xff005588>
    55b0:	d9801e04 	addi	r6,sp,120
    55b4:	b80b883a 	mov	r5,r23
    55b8:	9809883a 	mov	r4,r19
    55bc:	000a91c0 	call	a91c <__sprint_r>
    55c0:	103a711e 	bne	r2,zero,3f88 <__alt_data_end+0xff003f88>
    55c4:	d8c02017 	ldw	r3,128(sp)
    55c8:	d8801f17 	ldw	r2,124(sp)
    55cc:	da000404 	addi	r8,sp,16
    55d0:	003fee06 	br	558c <__alt_data_end+0xff00558c>
    55d4:	00bfffc4 	movi	r2,-1
    55d8:	003a6f06 	br	3f98 <__alt_data_end+0xff003f98>
    55dc:	008011c4 	movi	r2,71
    55e0:	1440b816 	blt	r2,r17,58c4 <___vfprintf_internal_r+0x1d44>
    55e4:	04000074 	movhi	r16,1
    55e8:	8409f204 	addi	r16,r16,10184
    55ec:	00c000c4 	movi	r3,3
    55f0:	00bfdfc4 	movi	r2,-129
    55f4:	d8c02a15 	stw	r3,168(sp)
    55f8:	90a4703a 	and	r18,r18,r2
    55fc:	df002783 	ldbu	fp,158(sp)
    5600:	d8c02e15 	stw	r3,184(sp)
    5604:	d8002915 	stw	zero,164(sp)
    5608:	d8003215 	stw	zero,200(sp)
    560c:	003b2906 	br	42b4 <__alt_data_end+0xff0042b4>
    5610:	d9002d17 	ldw	r4,180(sp)
    5614:	24c00017 	ldw	r19,0(r4)
    5618:	21000104 	addi	r4,r4,4
    561c:	d9002d15 	stw	r4,180(sp)
    5620:	982dd7fa 	srai	r22,r19,31
    5624:	b005883a 	mov	r2,r22
    5628:	003a9f06 	br	40a8 <__alt_data_end+0xff0040a8>
    562c:	d9402d17 	ldw	r5,180(sp)
    5630:	d8c02f17 	ldw	r3,188(sp)
    5634:	28800017 	ldw	r2,0(r5)
    5638:	29400104 	addi	r5,r5,4
    563c:	d9402d15 	stw	r5,180(sp)
    5640:	10c00015 	stw	r3,0(r2)
    5644:	00398606 	br	3c60 <__alt_data_end+0xff003c60>
    5648:	d9402d17 	ldw	r5,180(sp)
    564c:	002d883a 	mov	r22,zero
    5650:	2cc00017 	ldw	r19,0(r5)
    5654:	29400104 	addi	r5,r5,4
    5658:	d9402d15 	stw	r5,180(sp)
    565c:	003c2306 	br	46ec <__alt_data_end+0xff0046ec>
    5660:	d8c02d17 	ldw	r3,180(sp)
    5664:	d9002917 	ldw	r4,164(sp)
    5668:	002d883a 	mov	r22,zero
    566c:	18800104 	addi	r2,r3,4
    5670:	1cc0000b 	ldhu	r19,0(r3)
    5674:	203dc10e 	bge	r4,zero,4d7c <__alt_data_end+0xff004d7c>
    5678:	003f7506 	br	5450 <__alt_data_end+0xff005450>
    567c:	04000074 	movhi	r16,1
    5680:	8409f004 	addi	r16,r16,10176
    5684:	003acc06 	br	41b8 <__alt_data_end+0xff0041b8>
    5688:	d9002c17 	ldw	r4,176(sp)
    568c:	d9801e04 	addi	r6,sp,120
    5690:	b80b883a 	mov	r5,r23
    5694:	000a91c0 	call	a91c <__sprint_r>
    5698:	103a3b1e 	bne	r2,zero,3f88 <__alt_data_end+0xff003f88>
    569c:	dc402617 	ldw	r17,152(sp)
    56a0:	d8c02017 	ldw	r3,128(sp)
    56a4:	da000404 	addi	r8,sp,16
    56a8:	003f9c06 	br	551c <__alt_data_end+0xff00551c>
    56ac:	ac400043 	ldbu	r17,1(r21)
    56b0:	94800814 	ori	r18,r18,32
    56b4:	ad400044 	addi	r21,r21,1
    56b8:	8c403fcc 	andi	r17,r17,255
    56bc:	8c40201c 	xori	r17,r17,128
    56c0:	8c7fe004 	addi	r17,r17,-128
    56c4:	00398f06 	br	3d04 <__alt_data_end+0xff003d04>
    56c8:	d8c02d15 	stw	r3,180(sp)
    56cc:	0039883a 	mov	fp,zero
    56d0:	003e3506 	br	4fa8 <__alt_data_end+0xff004fa8>
    56d4:	d9002c17 	ldw	r4,176(sp)
    56d8:	d9801e04 	addi	r6,sp,120
    56dc:	b80b883a 	mov	r5,r23
    56e0:	000a91c0 	call	a91c <__sprint_r>
    56e4:	103a281e 	bne	r2,zero,3f88 <__alt_data_end+0xff003f88>
    56e8:	d8c02017 	ldw	r3,128(sp)
    56ec:	da000404 	addi	r8,sp,16
    56f0:	003cd006 	br	4a34 <__alt_data_end+0xff004a34>
    56f4:	8009883a 	mov	r4,r16
    56f8:	da003d15 	stw	r8,244(sp)
    56fc:	0003ae80 	call	3ae8 <strlen>
    5700:	d8802e15 	stw	r2,184(sp)
    5704:	da003d17 	ldw	r8,244(sp)
    5708:	103c340e 	bge	r2,zero,47dc <__alt_data_end+0xff0047dc>
    570c:	0005883a 	mov	r2,zero
    5710:	003c3206 	br	47dc <__alt_data_end+0xff0047dc>
    5714:	d9002c17 	ldw	r4,176(sp)
    5718:	d9801e04 	addi	r6,sp,120
    571c:	b80b883a 	mov	r5,r23
    5720:	000a91c0 	call	a91c <__sprint_r>
    5724:	103a181e 	bne	r2,zero,3f88 <__alt_data_end+0xff003f88>
    5728:	d8c02017 	ldw	r3,128(sp)
    572c:	d8801f17 	ldw	r2,124(sp)
    5730:	da000404 	addi	r8,sp,16
    5734:	d9403317 	ldw	r5,204(sp)
    5738:	10800044 	addi	r2,r2,1
    573c:	44000015 	stw	r16,0(r8)
    5740:	28c7883a 	add	r3,r5,r3
    5744:	003b7d06 	br	453c <__alt_data_end+0xff00453c>
    5748:	01000074 	movhi	r4,1
    574c:	210a0484 	addi	r4,r4,10258
    5750:	d9003515 	stw	r4,212(sp)
    5754:	003b1406 	br	43a8 <__alt_data_end+0xff0043a8>
    5758:	013fffc4 	movi	r4,-1
    575c:	003a3506 	br	4034 <__alt_data_end+0xff004034>
    5760:	0023883a 	mov	r17,zero
    5764:	003d9d06 	br	4ddc <__alt_data_end+0xff004ddc>
    5768:	d9002c17 	ldw	r4,176(sp)
    576c:	d9801e04 	addi	r6,sp,120
    5770:	b80b883a 	mov	r5,r23
    5774:	000a91c0 	call	a91c <__sprint_r>
    5778:	103a031e 	bne	r2,zero,3f88 <__alt_data_end+0xff003f88>
    577c:	d8c02017 	ldw	r3,128(sp)
    5780:	da000404 	addi	r8,sp,16
    5784:	003d9406 	br	4dd8 <__alt_data_end+0xff004dd8>
    5788:	01000074 	movhi	r4,1
    578c:	210a0084 	addi	r4,r4,10242
    5790:	d9002b15 	stw	r4,172(sp)
    5794:	d9002b17 	ldw	r4,172(sp)
    5798:	1c47883a 	add	r3,r3,r17
    579c:	10800044 	addi	r2,r2,1
    57a0:	41000015 	stw	r4,0(r8)
    57a4:	44400115 	stw	r17,4(r8)
    57a8:	d8c02015 	stw	r3,128(sp)
    57ac:	d8801f15 	stw	r2,124(sp)
    57b0:	010001c4 	movi	r4,7
    57b4:	20bfd716 	blt	r4,r2,5714 <__alt_data_end+0xff005714>
    57b8:	42000204 	addi	r8,r8,8
    57bc:	003fdd06 	br	5734 <__alt_data_end+0xff005734>
    57c0:	d9002c17 	ldw	r4,176(sp)
    57c4:	d9801e04 	addi	r6,sp,120
    57c8:	b80b883a 	mov	r5,r23
    57cc:	000a91c0 	call	a91c <__sprint_r>
    57d0:	1039ed1e 	bne	r2,zero,3f88 <__alt_data_end+0xff003f88>
    57d4:	d8802617 	ldw	r2,152(sp)
    57d8:	d8c02017 	ldw	r3,128(sp)
    57dc:	da000404 	addi	r8,sp,16
    57e0:	003e1006 	br	5024 <__alt_data_end+0xff005024>
    57e4:	00800044 	movi	r2,1
    57e8:	10803fcc 	andi	r2,r2,255
    57ec:	00c00044 	movi	r3,1
    57f0:	10fa3526 	beq	r2,r3,40c8 <__alt_data_end+0xff0040c8>
    57f4:	00c00084 	movi	r3,2
    57f8:	10fbcb26 	beq	r2,r3,4728 <__alt_data_end+0xff004728>
    57fc:	003a8f06 	br	423c <__alt_data_end+0xff00423c>
    5800:	01000074 	movhi	r4,1
    5804:	210a0484 	addi	r4,r4,10258
    5808:	d9003515 	stw	r4,212(sp)
    580c:	003b7606 	br	45e8 <__alt_data_end+0xff0045e8>
    5810:	d8802917 	ldw	r2,164(sp)
    5814:	00c00184 	movi	r3,6
    5818:	1880012e 	bgeu	r3,r2,5820 <___vfprintf_internal_r+0x1ca0>
    581c:	1805883a 	mov	r2,r3
    5820:	d8802e15 	stw	r2,184(sp)
    5824:	1000ef16 	blt	r2,zero,5be4 <___vfprintf_internal_r+0x2064>
    5828:	04000074 	movhi	r16,1
    582c:	d8802a15 	stw	r2,168(sp)
    5830:	dcc02d15 	stw	r19,180(sp)
    5834:	d8002915 	stw	zero,164(sp)
    5838:	d8003215 	stw	zero,200(sp)
    583c:	8409fe04 	addi	r16,r16,10232
    5840:	0039883a 	mov	fp,zero
    5844:	003aa206 	br	42d0 <__alt_data_end+0xff0042d0>
    5848:	0021883a 	mov	r16,zero
    584c:	003e0706 	br	506c <__alt_data_end+0xff00506c>
    5850:	d9002c17 	ldw	r4,176(sp)
    5854:	d9801e04 	addi	r6,sp,120
    5858:	b80b883a 	mov	r5,r23
    585c:	000a91c0 	call	a91c <__sprint_r>
    5860:	1039c91e 	bne	r2,zero,3f88 <__alt_data_end+0xff003f88>
    5864:	d8802617 	ldw	r2,152(sp)
    5868:	d9403317 	ldw	r5,204(sp)
    586c:	d8c02017 	ldw	r3,128(sp)
    5870:	da000404 	addi	r8,sp,16
    5874:	2885c83a 	sub	r2,r5,r2
    5878:	003dfb06 	br	5068 <__alt_data_end+0xff005068>
    587c:	9080004c 	andi	r2,r18,1
    5880:	103e8f1e 	bne	r2,zero,52c0 <__alt_data_end+0xff0052c0>
    5884:	d8802117 	ldw	r2,132(sp)
    5888:	003e9e06 	br	5304 <__alt_data_end+0xff005304>
    588c:	1025883a 	mov	r18,r2
    5890:	0039883a 	mov	fp,zero
    5894:	00800084 	movi	r2,2
    5898:	003fd306 	br	57e8 <__alt_data_end+0xff0057e8>
    589c:	07000b44 	movi	fp,45
    58a0:	df002785 	stb	fp,158(sp)
    58a4:	003a4006 	br	41a8 <__alt_data_end+0xff0041a8>
    58a8:	00c00b44 	movi	r3,45
    58ac:	d8c02785 	stb	r3,158(sp)
    58b0:	d8802a15 	stw	r2,168(sp)
    58b4:	dc802b17 	ldw	r18,172(sp)
    58b8:	d8002915 	stw	zero,164(sp)
    58bc:	07000b44 	movi	fp,45
    58c0:	003a8006 	br	42c4 <__alt_data_end+0xff0042c4>
    58c4:	04000074 	movhi	r16,1
    58c8:	8409f304 	addi	r16,r16,10188
    58cc:	003f4706 	br	55ec <__alt_data_end+0xff0055ec>
    58d0:	d8c02d17 	ldw	r3,180(sp)
    58d4:	d9002f17 	ldw	r4,188(sp)
    58d8:	18800017 	ldw	r2,0(r3)
    58dc:	18c00104 	addi	r3,r3,4
    58e0:	d8c02d15 	stw	r3,180(sp)
    58e4:	11000015 	stw	r4,0(r2)
    58e8:	0038dd06 	br	3c60 <__alt_data_end+0xff003c60>
    58ec:	dd802617 	ldw	r22,152(sp)
    58f0:	00bfff44 	movi	r2,-3
    58f4:	b0801c16 	blt	r22,r2,5968 <___vfprintf_internal_r+0x1de8>
    58f8:	d9402917 	ldw	r5,164(sp)
    58fc:	2d801a16 	blt	r5,r22,5968 <___vfprintf_internal_r+0x1de8>
    5900:	dd803215 	stw	r22,200(sp)
    5904:	003e8906 	br	532c <__alt_data_end+0xff00532c>
    5908:	01000074 	movhi	r4,1
    590c:	210a0084 	addi	r4,r4,10242
    5910:	d9002b15 	stw	r4,172(sp)
    5914:	003c9106 	br	4b5c <__alt_data_end+0xff004b5c>
    5918:	e005883a 	mov	r2,fp
    591c:	003e7906 	br	5304 <__alt_data_end+0xff005304>
    5920:	d9402917 	ldw	r5,164(sp)
    5924:	df002783 	ldbu	fp,158(sp)
    5928:	dcc02d15 	stw	r19,180(sp)
    592c:	d9402a15 	stw	r5,168(sp)
    5930:	d9402e15 	stw	r5,184(sp)
    5934:	d8002915 	stw	zero,164(sp)
    5938:	d8003215 	stw	zero,200(sp)
    593c:	003a5d06 	br	42b4 <__alt_data_end+0xff0042b4>
    5940:	9080004c 	andi	r2,r18,1
    5944:	0039883a 	mov	fp,zero
    5948:	10000426 	beq	r2,zero,595c <___vfprintf_internal_r+0x1ddc>
    594c:	00800c04 	movi	r2,48
    5950:	dc001dc4 	addi	r16,sp,119
    5954:	d8801dc5 	stb	r2,119(sp)
    5958:	003b8006 	br	475c <__alt_data_end+0xff00475c>
    595c:	d8002e15 	stw	zero,184(sp)
    5960:	dc001e04 	addi	r16,sp,120
    5964:	003a4d06 	br	429c <__alt_data_end+0xff00429c>
    5968:	8c7fff84 	addi	r17,r17,-2
    596c:	b5bfffc4 	addi	r22,r22,-1
    5970:	dd802615 	stw	r22,152(sp)
    5974:	dc4022c5 	stb	r17,139(sp)
    5978:	b000bf16 	blt	r22,zero,5c78 <___vfprintf_internal_r+0x20f8>
    597c:	00800ac4 	movi	r2,43
    5980:	d8802305 	stb	r2,140(sp)
    5984:	00800244 	movi	r2,9
    5988:	15807016 	blt	r2,r22,5b4c <___vfprintf_internal_r+0x1fcc>
    598c:	00800c04 	movi	r2,48
    5990:	b5800c04 	addi	r22,r22,48
    5994:	d8802345 	stb	r2,141(sp)
    5998:	dd802385 	stb	r22,142(sp)
    599c:	d88023c4 	addi	r2,sp,143
    59a0:	df0022c4 	addi	fp,sp,139
    59a4:	d8c03317 	ldw	r3,204(sp)
    59a8:	1739c83a 	sub	fp,r2,fp
    59ac:	d9003317 	ldw	r4,204(sp)
    59b0:	e0c7883a 	add	r3,fp,r3
    59b4:	df003a15 	stw	fp,232(sp)
    59b8:	d8c02e15 	stw	r3,184(sp)
    59bc:	00800044 	movi	r2,1
    59c0:	1100b30e 	bge	r2,r4,5c90 <___vfprintf_internal_r+0x2110>
    59c4:	d8c02e17 	ldw	r3,184(sp)
    59c8:	18c00044 	addi	r3,r3,1
    59cc:	d8c02e15 	stw	r3,184(sp)
    59d0:	1805883a 	mov	r2,r3
    59d4:	1800ac16 	blt	r3,zero,5c88 <___vfprintf_internal_r+0x2108>
    59d8:	d8003215 	stw	zero,200(sp)
    59dc:	003e5d06 	br	5354 <__alt_data_end+0xff005354>
    59e0:	d9002c17 	ldw	r4,176(sp)
    59e4:	d9801e04 	addi	r6,sp,120
    59e8:	b80b883a 	mov	r5,r23
    59ec:	000a91c0 	call	a91c <__sprint_r>
    59f0:	1039651e 	bne	r2,zero,3f88 <__alt_data_end+0xff003f88>
    59f4:	dc402617 	ldw	r17,152(sp)
    59f8:	d8c02017 	ldw	r3,128(sp)
    59fc:	d8801f17 	ldw	r2,124(sp)
    5a00:	da000404 	addi	r8,sp,16
    5a04:	003ed606 	br	5560 <__alt_data_end+0xff005560>
    5a08:	582b883a 	mov	r21,r11
    5a0c:	d8002915 	stw	zero,164(sp)
    5a10:	0038bd06 	br	3d08 <__alt_data_end+0xff003d08>
    5a14:	d8802917 	ldw	r2,164(sp)
    5a18:	103e071e 	bne	r2,zero,5238 <__alt_data_end+0xff005238>
    5a1c:	dc002915 	stw	r16,164(sp)
    5a20:	003e0506 	br	5238 <__alt_data_end+0xff005238>
    5a24:	d9002917 	ldw	r4,164(sp)
    5a28:	20c00044 	addi	r3,r4,1
    5a2c:	003e0f06 	br	526c <__alt_data_end+0xff00526c>
    5a30:	01400184 	movi	r5,6
    5a34:	d9402915 	stw	r5,164(sp)
    5a38:	003dff06 	br	5238 <__alt_data_end+0xff005238>
    5a3c:	d8802104 	addi	r2,sp,132
    5a40:	d8800315 	stw	r2,12(sp)
    5a44:	d8802504 	addi	r2,sp,148
    5a48:	d8800215 	stw	r2,8(sp)
    5a4c:	d8802604 	addi	r2,sp,152
    5a50:	d8800115 	stw	r2,4(sp)
    5a54:	d8802917 	ldw	r2,164(sp)
    5a58:	d9403617 	ldw	r5,216(sp)
    5a5c:	d9002c17 	ldw	r4,176(sp)
    5a60:	d8800015 	stw	r2,0(sp)
    5a64:	01c000c4 	movi	r7,3
    5a68:	980d883a 	mov	r6,r19
    5a6c:	da003d15 	stw	r8,244(sp)
    5a70:	00061a40 	call	61a4 <_dtoa_r>
    5a74:	d8c02917 	ldw	r3,164(sp)
    5a78:	da003d17 	ldw	r8,244(sp)
    5a7c:	1021883a 	mov	r16,r2
    5a80:	10f9883a 	add	fp,r2,r3
    5a84:	81000007 	ldb	r4,0(r16)
    5a88:	00800c04 	movi	r2,48
    5a8c:	20805e26 	beq	r4,r2,5c08 <___vfprintf_internal_r+0x2088>
    5a90:	d8c02617 	ldw	r3,152(sp)
    5a94:	e0f9883a 	add	fp,fp,r3
    5a98:	003e0a06 	br	52c4 <__alt_data_end+0xff0052c4>
    5a9c:	00c00b44 	movi	r3,45
    5aa0:	24e0003c 	xorhi	r19,r4,32768
    5aa4:	d8c02a05 	stb	r3,168(sp)
    5aa8:	003de906 	br	5250 <__alt_data_end+0xff005250>
    5aac:	d8c03217 	ldw	r3,200(sp)
    5ab0:	00c07a0e 	bge	zero,r3,5c9c <___vfprintf_internal_r+0x211c>
    5ab4:	00800044 	movi	r2,1
    5ab8:	d9003317 	ldw	r4,204(sp)
    5abc:	1105883a 	add	r2,r2,r4
    5ac0:	d8802e15 	stw	r2,184(sp)
    5ac4:	10004e16 	blt	r2,zero,5c00 <___vfprintf_internal_r+0x2080>
    5ac8:	044019c4 	movi	r17,103
    5acc:	003e2106 	br	5354 <__alt_data_end+0xff005354>
    5ad0:	d9002917 	ldw	r4,164(sp)
    5ad4:	d8802104 	addi	r2,sp,132
    5ad8:	d8800315 	stw	r2,12(sp)
    5adc:	d9000015 	stw	r4,0(sp)
    5ae0:	d8802504 	addi	r2,sp,148
    5ae4:	d9403617 	ldw	r5,216(sp)
    5ae8:	d9002c17 	ldw	r4,176(sp)
    5aec:	d8800215 	stw	r2,8(sp)
    5af0:	d8802604 	addi	r2,sp,152
    5af4:	d8800115 	stw	r2,4(sp)
    5af8:	01c000c4 	movi	r7,3
    5afc:	980d883a 	mov	r6,r19
    5b00:	da003d15 	stw	r8,244(sp)
    5b04:	00061a40 	call	61a4 <_dtoa_r>
    5b08:	d8c02917 	ldw	r3,164(sp)
    5b0c:	da003d17 	ldw	r8,244(sp)
    5b10:	1021883a 	mov	r16,r2
    5b14:	00801184 	movi	r2,70
    5b18:	80f9883a 	add	fp,r16,r3
    5b1c:	88bfd926 	beq	r17,r2,5a84 <__alt_data_end+0xff005a84>
    5b20:	003de806 	br	52c4 <__alt_data_end+0xff0052c4>
    5b24:	d9002917 	ldw	r4,164(sp)
    5b28:	00c04d0e 	bge	zero,r3,5c60 <___vfprintf_internal_r+0x20e0>
    5b2c:	2000441e 	bne	r4,zero,5c40 <___vfprintf_internal_r+0x20c0>
    5b30:	9480004c 	andi	r18,r18,1
    5b34:	9000421e 	bne	r18,zero,5c40 <___vfprintf_internal_r+0x20c0>
    5b38:	1805883a 	mov	r2,r3
    5b3c:	18007016 	blt	r3,zero,5d00 <___vfprintf_internal_r+0x2180>
    5b40:	d8c03217 	ldw	r3,200(sp)
    5b44:	d8c02e15 	stw	r3,184(sp)
    5b48:	003e0206 	br	5354 <__alt_data_end+0xff005354>
    5b4c:	df0022c4 	addi	fp,sp,139
    5b50:	dc002915 	stw	r16,164(sp)
    5b54:	4027883a 	mov	r19,r8
    5b58:	e021883a 	mov	r16,fp
    5b5c:	b009883a 	mov	r4,r22
    5b60:	01400284 	movi	r5,10
    5b64:	0002ff00 	call	2ff0 <__modsi3>
    5b68:	10800c04 	addi	r2,r2,48
    5b6c:	843fffc4 	addi	r16,r16,-1
    5b70:	b009883a 	mov	r4,r22
    5b74:	01400284 	movi	r5,10
    5b78:	80800005 	stb	r2,0(r16)
    5b7c:	0002f6c0 	call	2f6c <__divsi3>
    5b80:	102d883a 	mov	r22,r2
    5b84:	00800244 	movi	r2,9
    5b88:	15bff416 	blt	r2,r22,5b5c <__alt_data_end+0xff005b5c>
    5b8c:	9811883a 	mov	r8,r19
    5b90:	b0800c04 	addi	r2,r22,48
    5b94:	8027883a 	mov	r19,r16
    5b98:	997fffc4 	addi	r5,r19,-1
    5b9c:	98bfffc5 	stb	r2,-1(r19)
    5ba0:	dc002917 	ldw	r16,164(sp)
    5ba4:	2f006a2e 	bgeu	r5,fp,5d50 <___vfprintf_internal_r+0x21d0>
    5ba8:	d9c02384 	addi	r7,sp,142
    5bac:	3ccfc83a 	sub	r7,r7,r19
    5bb0:	d9002344 	addi	r4,sp,141
    5bb4:	e1cf883a 	add	r7,fp,r7
    5bb8:	00000106 	br	5bc0 <___vfprintf_internal_r+0x2040>
    5bbc:	28800003 	ldbu	r2,0(r5)
    5bc0:	20800005 	stb	r2,0(r4)
    5bc4:	21000044 	addi	r4,r4,1
    5bc8:	29400044 	addi	r5,r5,1
    5bcc:	393ffb1e 	bne	r7,r4,5bbc <__alt_data_end+0xff005bbc>
    5bd0:	d8802304 	addi	r2,sp,140
    5bd4:	14c5c83a 	sub	r2,r2,r19
    5bd8:	d8c02344 	addi	r3,sp,141
    5bdc:	1885883a 	add	r2,r3,r2
    5be0:	003f7006 	br	59a4 <__alt_data_end+0xff0059a4>
    5be4:	0005883a 	mov	r2,zero
    5be8:	003f0f06 	br	5828 <__alt_data_end+0xff005828>
    5bec:	d8c03217 	ldw	r3,200(sp)
    5bf0:	18c00044 	addi	r3,r3,1
    5bf4:	d8c02e15 	stw	r3,184(sp)
    5bf8:	1805883a 	mov	r2,r3
    5bfc:	183fb20e 	bge	r3,zero,5ac8 <__alt_data_end+0xff005ac8>
    5c00:	0005883a 	mov	r2,zero
    5c04:	003fb006 	br	5ac8 <__alt_data_end+0xff005ac8>
    5c08:	d9003617 	ldw	r4,216(sp)
    5c0c:	000d883a 	mov	r6,zero
    5c10:	000f883a 	mov	r7,zero
    5c14:	980b883a 	mov	r5,r19
    5c18:	d8c03c15 	stw	r3,240(sp)
    5c1c:	da003d15 	stw	r8,244(sp)
    5c20:	000e3e00 	call	e3e0 <__eqdf2>
    5c24:	d8c03c17 	ldw	r3,240(sp)
    5c28:	da003d17 	ldw	r8,244(sp)
    5c2c:	103f9826 	beq	r2,zero,5a90 <__alt_data_end+0xff005a90>
    5c30:	00800044 	movi	r2,1
    5c34:	10c7c83a 	sub	r3,r2,r3
    5c38:	d8c02615 	stw	r3,152(sp)
    5c3c:	003f9506 	br	5a94 <__alt_data_end+0xff005a94>
    5c40:	d9002917 	ldw	r4,164(sp)
    5c44:	d8c03217 	ldw	r3,200(sp)
    5c48:	20800044 	addi	r2,r4,1
    5c4c:	1885883a 	add	r2,r3,r2
    5c50:	d8802e15 	stw	r2,184(sp)
    5c54:	103dbf0e 	bge	r2,zero,5354 <__alt_data_end+0xff005354>
    5c58:	0005883a 	mov	r2,zero
    5c5c:	003dbd06 	br	5354 <__alt_data_end+0xff005354>
    5c60:	2000211e 	bne	r4,zero,5ce8 <___vfprintf_internal_r+0x2168>
    5c64:	9480004c 	andi	r18,r18,1
    5c68:	90001f1e 	bne	r18,zero,5ce8 <___vfprintf_internal_r+0x2168>
    5c6c:	00800044 	movi	r2,1
    5c70:	d8802e15 	stw	r2,184(sp)
    5c74:	003db706 	br	5354 <__alt_data_end+0xff005354>
    5c78:	00800b44 	movi	r2,45
    5c7c:	05adc83a 	sub	r22,zero,r22
    5c80:	d8802305 	stb	r2,140(sp)
    5c84:	003f3f06 	br	5984 <__alt_data_end+0xff005984>
    5c88:	0005883a 	mov	r2,zero
    5c8c:	003f5206 	br	59d8 <__alt_data_end+0xff0059d8>
    5c90:	90a4703a 	and	r18,r18,r2
    5c94:	903f4e26 	beq	r18,zero,59d0 <__alt_data_end+0xff0059d0>
    5c98:	003f4a06 	br	59c4 <__alt_data_end+0xff0059c4>
    5c9c:	00800084 	movi	r2,2
    5ca0:	10c5c83a 	sub	r2,r2,r3
    5ca4:	003f8406 	br	5ab8 <__alt_data_end+0xff005ab8>
    5ca8:	d8802d17 	ldw	r2,180(sp)
    5cac:	d9002d17 	ldw	r4,180(sp)
    5cb0:	ac400043 	ldbu	r17,1(r21)
    5cb4:	10800017 	ldw	r2,0(r2)
    5cb8:	582b883a 	mov	r21,r11
    5cbc:	d8802915 	stw	r2,164(sp)
    5cc0:	20800104 	addi	r2,r4,4
    5cc4:	d9002917 	ldw	r4,164(sp)
    5cc8:	d8802d15 	stw	r2,180(sp)
    5ccc:	203e7a0e 	bge	r4,zero,56b8 <__alt_data_end+0xff0056b8>
    5cd0:	8c403fcc 	andi	r17,r17,255
    5cd4:	00bfffc4 	movi	r2,-1
    5cd8:	8c40201c 	xori	r17,r17,128
    5cdc:	d8802915 	stw	r2,164(sp)
    5ce0:	8c7fe004 	addi	r17,r17,-128
    5ce4:	00380706 	br	3d04 <__alt_data_end+0xff003d04>
    5ce8:	d8c02917 	ldw	r3,164(sp)
    5cec:	18c00084 	addi	r3,r3,2
    5cf0:	d8c02e15 	stw	r3,184(sp)
    5cf4:	1805883a 	mov	r2,r3
    5cf8:	183d960e 	bge	r3,zero,5354 <__alt_data_end+0xff005354>
    5cfc:	003fd606 	br	5c58 <__alt_data_end+0xff005c58>
    5d00:	0005883a 	mov	r2,zero
    5d04:	003f8e06 	br	5b40 <__alt_data_end+0xff005b40>
    5d08:	9080004c 	andi	r2,r18,1
    5d0c:	103f811e 	bne	r2,zero,5b14 <__alt_data_end+0xff005b14>
    5d10:	d8802117 	ldw	r2,132(sp)
    5d14:	1405c83a 	sub	r2,r2,r16
    5d18:	d8803315 	stw	r2,204(sp)
    5d1c:	b47ef326 	beq	r22,r17,58ec <__alt_data_end+0xff0058ec>
    5d20:	dd802617 	ldw	r22,152(sp)
    5d24:	003f1106 	br	596c <__alt_data_end+0xff00596c>
    5d28:	d9c02785 	stb	r7,158(sp)
    5d2c:	00390406 	br	4140 <__alt_data_end+0xff004140>
    5d30:	d9c02785 	stb	r7,158(sp)
    5d34:	0038d306 	br	4084 <__alt_data_end+0xff004084>
    5d38:	d9c02785 	stb	r7,158(sp)
    5d3c:	003a6106 	br	46c4 <__alt_data_end+0xff0046c4>
    5d40:	d9c02785 	stb	r7,158(sp)
    5d44:	003af806 	br	4928 <__alt_data_end+0xff004928>
    5d48:	0005883a 	mov	r2,zero
    5d4c:	003d7e06 	br	5348 <__alt_data_end+0xff005348>
    5d50:	d8802344 	addi	r2,sp,141
    5d54:	003f1306 	br	59a4 <__alt_data_end+0xff0059a4>
    5d58:	d9c02785 	stb	r7,158(sp)
    5d5c:	00392306 	br	41ec <__alt_data_end+0xff0041ec>
    5d60:	d9c02785 	stb	r7,158(sp)
    5d64:	003aa906 	br	480c <__alt_data_end+0xff00480c>
    5d68:	d9c02785 	stb	r7,158(sp)
    5d6c:	003a3d06 	br	4664 <__alt_data_end+0xff004664>
    5d70:	d9c02785 	stb	r7,158(sp)
    5d74:	003aca06 	br	48a0 <__alt_data_end+0xff0048a0>

00005d78 <__vfprintf_internal>:
    5d78:	00800074 	movhi	r2,1
    5d7c:	10915b04 	addi	r2,r2,17772
    5d80:	300f883a 	mov	r7,r6
    5d84:	280d883a 	mov	r6,r5
    5d88:	200b883a 	mov	r5,r4
    5d8c:	11000017 	ldw	r4,0(r2)
    5d90:	0003b801 	jmpi	3b80 <___vfprintf_internal_r>

00005d94 <__sbprintf>:
    5d94:	2880030b 	ldhu	r2,12(r5)
    5d98:	2ac01917 	ldw	r11,100(r5)
    5d9c:	2a80038b 	ldhu	r10,14(r5)
    5da0:	2a400717 	ldw	r9,28(r5)
    5da4:	2a000917 	ldw	r8,36(r5)
    5da8:	defee204 	addi	sp,sp,-1144
    5dac:	00c10004 	movi	r3,1024
    5db0:	dc011a15 	stw	r16,1128(sp)
    5db4:	10bfff4c 	andi	r2,r2,65533
    5db8:	2821883a 	mov	r16,r5
    5dbc:	d8cb883a 	add	r5,sp,r3
    5dc0:	dc811c15 	stw	r18,1136(sp)
    5dc4:	dc411b15 	stw	r17,1132(sp)
    5dc8:	dfc11d15 	stw	ra,1140(sp)
    5dcc:	2025883a 	mov	r18,r4
    5dd0:	d881030d 	sth	r2,1036(sp)
    5dd4:	dac11915 	stw	r11,1124(sp)
    5dd8:	da81038d 	sth	r10,1038(sp)
    5ddc:	da410715 	stw	r9,1052(sp)
    5de0:	da010915 	stw	r8,1060(sp)
    5de4:	dec10015 	stw	sp,1024(sp)
    5de8:	dec10415 	stw	sp,1040(sp)
    5dec:	d8c10215 	stw	r3,1032(sp)
    5df0:	d8c10515 	stw	r3,1044(sp)
    5df4:	d8010615 	stw	zero,1048(sp)
    5df8:	0003b800 	call	3b80 <___vfprintf_internal_r>
    5dfc:	1023883a 	mov	r17,r2
    5e00:	10000416 	blt	r2,zero,5e14 <__sbprintf+0x80>
    5e04:	d9410004 	addi	r5,sp,1024
    5e08:	9009883a 	mov	r4,r18
    5e0c:	0007a480 	call	7a48 <_fflush_r>
    5e10:	10000d1e 	bne	r2,zero,5e48 <__sbprintf+0xb4>
    5e14:	d881030b 	ldhu	r2,1036(sp)
    5e18:	1080100c 	andi	r2,r2,64
    5e1c:	10000326 	beq	r2,zero,5e2c <__sbprintf+0x98>
    5e20:	8080030b 	ldhu	r2,12(r16)
    5e24:	10801014 	ori	r2,r2,64
    5e28:	8080030d 	sth	r2,12(r16)
    5e2c:	8805883a 	mov	r2,r17
    5e30:	dfc11d17 	ldw	ra,1140(sp)
    5e34:	dc811c17 	ldw	r18,1136(sp)
    5e38:	dc411b17 	ldw	r17,1132(sp)
    5e3c:	dc011a17 	ldw	r16,1128(sp)
    5e40:	dec11e04 	addi	sp,sp,1144
    5e44:	f800283a 	ret
    5e48:	047fffc4 	movi	r17,-1
    5e4c:	003ff106 	br	5e14 <__alt_data_end+0xff005e14>

00005e50 <__swsetup_r>:
    5e50:	00800074 	movhi	r2,1
    5e54:	defffd04 	addi	sp,sp,-12
    5e58:	10915b04 	addi	r2,r2,17772
    5e5c:	dc400115 	stw	r17,4(sp)
    5e60:	2023883a 	mov	r17,r4
    5e64:	11000017 	ldw	r4,0(r2)
    5e68:	dc000015 	stw	r16,0(sp)
    5e6c:	dfc00215 	stw	ra,8(sp)
    5e70:	2821883a 	mov	r16,r5
    5e74:	20000226 	beq	r4,zero,5e80 <__swsetup_r+0x30>
    5e78:	20800e17 	ldw	r2,56(r4)
    5e7c:	10003126 	beq	r2,zero,5f44 <__swsetup_r+0xf4>
    5e80:	8080030b 	ldhu	r2,12(r16)
    5e84:	10c0020c 	andi	r3,r2,8
    5e88:	1009883a 	mov	r4,r2
    5e8c:	18000f26 	beq	r3,zero,5ecc <__swsetup_r+0x7c>
    5e90:	80c00417 	ldw	r3,16(r16)
    5e94:	18001526 	beq	r3,zero,5eec <__swsetup_r+0x9c>
    5e98:	1100004c 	andi	r4,r2,1
    5e9c:	20001c1e 	bne	r4,zero,5f10 <__swsetup_r+0xc0>
    5ea0:	1080008c 	andi	r2,r2,2
    5ea4:	1000291e 	bne	r2,zero,5f4c <__swsetup_r+0xfc>
    5ea8:	80800517 	ldw	r2,20(r16)
    5eac:	80800215 	stw	r2,8(r16)
    5eb0:	18001c26 	beq	r3,zero,5f24 <__swsetup_r+0xd4>
    5eb4:	0005883a 	mov	r2,zero
    5eb8:	dfc00217 	ldw	ra,8(sp)
    5ebc:	dc400117 	ldw	r17,4(sp)
    5ec0:	dc000017 	ldw	r16,0(sp)
    5ec4:	dec00304 	addi	sp,sp,12
    5ec8:	f800283a 	ret
    5ecc:	2080040c 	andi	r2,r4,16
    5ed0:	10002e26 	beq	r2,zero,5f8c <__swsetup_r+0x13c>
    5ed4:	2080010c 	andi	r2,r4,4
    5ed8:	10001e1e 	bne	r2,zero,5f54 <__swsetup_r+0x104>
    5edc:	80c00417 	ldw	r3,16(r16)
    5ee0:	20800214 	ori	r2,r4,8
    5ee4:	8080030d 	sth	r2,12(r16)
    5ee8:	183feb1e 	bne	r3,zero,5e98 <__alt_data_end+0xff005e98>
    5eec:	1100a00c 	andi	r4,r2,640
    5ef0:	01408004 	movi	r5,512
    5ef4:	217fe826 	beq	r4,r5,5e98 <__alt_data_end+0xff005e98>
    5ef8:	800b883a 	mov	r5,r16
    5efc:	8809883a 	mov	r4,r17
    5f00:	00089c80 	call	89c8 <__smakebuf_r>
    5f04:	8080030b 	ldhu	r2,12(r16)
    5f08:	80c00417 	ldw	r3,16(r16)
    5f0c:	003fe206 	br	5e98 <__alt_data_end+0xff005e98>
    5f10:	80800517 	ldw	r2,20(r16)
    5f14:	80000215 	stw	zero,8(r16)
    5f18:	0085c83a 	sub	r2,zero,r2
    5f1c:	80800615 	stw	r2,24(r16)
    5f20:	183fe41e 	bne	r3,zero,5eb4 <__alt_data_end+0xff005eb4>
    5f24:	80c0030b 	ldhu	r3,12(r16)
    5f28:	0005883a 	mov	r2,zero
    5f2c:	1900200c 	andi	r4,r3,128
    5f30:	203fe126 	beq	r4,zero,5eb8 <__alt_data_end+0xff005eb8>
    5f34:	18c01014 	ori	r3,r3,64
    5f38:	80c0030d 	sth	r3,12(r16)
    5f3c:	00bfffc4 	movi	r2,-1
    5f40:	003fdd06 	br	5eb8 <__alt_data_end+0xff005eb8>
    5f44:	0007e240 	call	7e24 <__sinit>
    5f48:	003fcd06 	br	5e80 <__alt_data_end+0xff005e80>
    5f4c:	0005883a 	mov	r2,zero
    5f50:	003fd606 	br	5eac <__alt_data_end+0xff005eac>
    5f54:	81400c17 	ldw	r5,48(r16)
    5f58:	28000626 	beq	r5,zero,5f74 <__swsetup_r+0x124>
    5f5c:	80801004 	addi	r2,r16,64
    5f60:	28800326 	beq	r5,r2,5f70 <__swsetup_r+0x120>
    5f64:	8809883a 	mov	r4,r17
    5f68:	0007f980 	call	7f98 <_free_r>
    5f6c:	8100030b 	ldhu	r4,12(r16)
    5f70:	80000c15 	stw	zero,48(r16)
    5f74:	80c00417 	ldw	r3,16(r16)
    5f78:	00bff6c4 	movi	r2,-37
    5f7c:	1108703a 	and	r4,r2,r4
    5f80:	80000115 	stw	zero,4(r16)
    5f84:	80c00015 	stw	r3,0(r16)
    5f88:	003fd506 	br	5ee0 <__alt_data_end+0xff005ee0>
    5f8c:	00800244 	movi	r2,9
    5f90:	88800015 	stw	r2,0(r17)
    5f94:	20801014 	ori	r2,r4,64
    5f98:	8080030d 	sth	r2,12(r16)
    5f9c:	00bfffc4 	movi	r2,-1
    5fa0:	003fc506 	br	5eb8 <__alt_data_end+0xff005eb8>

00005fa4 <quorem>:
    5fa4:	defff704 	addi	sp,sp,-36
    5fa8:	dc800215 	stw	r18,8(sp)
    5fac:	20800417 	ldw	r2,16(r4)
    5fb0:	2c800417 	ldw	r18,16(r5)
    5fb4:	dfc00815 	stw	ra,32(sp)
    5fb8:	ddc00715 	stw	r23,28(sp)
    5fbc:	dd800615 	stw	r22,24(sp)
    5fc0:	dd400515 	stw	r21,20(sp)
    5fc4:	dd000415 	stw	r20,16(sp)
    5fc8:	dcc00315 	stw	r19,12(sp)
    5fcc:	dc400115 	stw	r17,4(sp)
    5fd0:	dc000015 	stw	r16,0(sp)
    5fd4:	14807116 	blt	r2,r18,619c <quorem+0x1f8>
    5fd8:	94bfffc4 	addi	r18,r18,-1
    5fdc:	94ad883a 	add	r22,r18,r18
    5fe0:	b5ad883a 	add	r22,r22,r22
    5fe4:	2c400504 	addi	r17,r5,20
    5fe8:	8da9883a 	add	r20,r17,r22
    5fec:	25400504 	addi	r21,r4,20
    5ff0:	282f883a 	mov	r23,r5
    5ff4:	adad883a 	add	r22,r21,r22
    5ff8:	a1400017 	ldw	r5,0(r20)
    5ffc:	2021883a 	mov	r16,r4
    6000:	b1000017 	ldw	r4,0(r22)
    6004:	29400044 	addi	r5,r5,1
    6008:	00030640 	call	3064 <__udivsi3>
    600c:	1027883a 	mov	r19,r2
    6010:	10002c26 	beq	r2,zero,60c4 <quorem+0x120>
    6014:	a813883a 	mov	r9,r21
    6018:	880b883a 	mov	r5,r17
    601c:	0009883a 	mov	r4,zero
    6020:	000d883a 	mov	r6,zero
    6024:	2a000017 	ldw	r8,0(r5)
    6028:	49c00017 	ldw	r7,0(r9)
    602c:	29400104 	addi	r5,r5,4
    6030:	40bfffcc 	andi	r2,r8,65535
    6034:	14c5383a 	mul	r2,r2,r19
    6038:	4010d43a 	srli	r8,r8,16
    603c:	38ffffcc 	andi	r3,r7,65535
    6040:	1105883a 	add	r2,r2,r4
    6044:	1008d43a 	srli	r4,r2,16
    6048:	44d1383a 	mul	r8,r8,r19
    604c:	198d883a 	add	r6,r3,r6
    6050:	10ffffcc 	andi	r3,r2,65535
    6054:	30c7c83a 	sub	r3,r6,r3
    6058:	380ed43a 	srli	r7,r7,16
    605c:	4105883a 	add	r2,r8,r4
    6060:	180dd43a 	srai	r6,r3,16
    6064:	113fffcc 	andi	r4,r2,65535
    6068:	390fc83a 	sub	r7,r7,r4
    606c:	398d883a 	add	r6,r7,r6
    6070:	300e943a 	slli	r7,r6,16
    6074:	18ffffcc 	andi	r3,r3,65535
    6078:	1008d43a 	srli	r4,r2,16
    607c:	38ceb03a 	or	r7,r7,r3
    6080:	49c00015 	stw	r7,0(r9)
    6084:	300dd43a 	srai	r6,r6,16
    6088:	4a400104 	addi	r9,r9,4
    608c:	a17fe52e 	bgeu	r20,r5,6024 <__alt_data_end+0xff006024>
    6090:	b0800017 	ldw	r2,0(r22)
    6094:	10000b1e 	bne	r2,zero,60c4 <quorem+0x120>
    6098:	b0bfff04 	addi	r2,r22,-4
    609c:	a880082e 	bgeu	r21,r2,60c0 <quorem+0x11c>
    60a0:	b0ffff17 	ldw	r3,-4(r22)
    60a4:	18000326 	beq	r3,zero,60b4 <quorem+0x110>
    60a8:	00000506 	br	60c0 <quorem+0x11c>
    60ac:	10c00017 	ldw	r3,0(r2)
    60b0:	1800031e 	bne	r3,zero,60c0 <quorem+0x11c>
    60b4:	10bfff04 	addi	r2,r2,-4
    60b8:	94bfffc4 	addi	r18,r18,-1
    60bc:	a8bffb36 	bltu	r21,r2,60ac <__alt_data_end+0xff0060ac>
    60c0:	84800415 	stw	r18,16(r16)
    60c4:	b80b883a 	mov	r5,r23
    60c8:	8009883a 	mov	r4,r16
    60cc:	00098fc0 	call	98fc <__mcmp>
    60d0:	10002616 	blt	r2,zero,616c <quorem+0x1c8>
    60d4:	9cc00044 	addi	r19,r19,1
    60d8:	a805883a 	mov	r2,r21
    60dc:	000b883a 	mov	r5,zero
    60e0:	11000017 	ldw	r4,0(r2)
    60e4:	89800017 	ldw	r6,0(r17)
    60e8:	10800104 	addi	r2,r2,4
    60ec:	20ffffcc 	andi	r3,r4,65535
    60f0:	194b883a 	add	r5,r3,r5
    60f4:	30ffffcc 	andi	r3,r6,65535
    60f8:	28c7c83a 	sub	r3,r5,r3
    60fc:	300cd43a 	srli	r6,r6,16
    6100:	2008d43a 	srli	r4,r4,16
    6104:	180bd43a 	srai	r5,r3,16
    6108:	18ffffcc 	andi	r3,r3,65535
    610c:	2189c83a 	sub	r4,r4,r6
    6110:	2149883a 	add	r4,r4,r5
    6114:	200c943a 	slli	r6,r4,16
    6118:	8c400104 	addi	r17,r17,4
    611c:	200bd43a 	srai	r5,r4,16
    6120:	30c6b03a 	or	r3,r6,r3
    6124:	10ffff15 	stw	r3,-4(r2)
    6128:	a47fed2e 	bgeu	r20,r17,60e0 <__alt_data_end+0xff0060e0>
    612c:	9485883a 	add	r2,r18,r18
    6130:	1085883a 	add	r2,r2,r2
    6134:	a887883a 	add	r3,r21,r2
    6138:	18800017 	ldw	r2,0(r3)
    613c:	10000b1e 	bne	r2,zero,616c <quorem+0x1c8>
    6140:	18bfff04 	addi	r2,r3,-4
    6144:	a880082e 	bgeu	r21,r2,6168 <quorem+0x1c4>
    6148:	18ffff17 	ldw	r3,-4(r3)
    614c:	18000326 	beq	r3,zero,615c <quorem+0x1b8>
    6150:	00000506 	br	6168 <quorem+0x1c4>
    6154:	10c00017 	ldw	r3,0(r2)
    6158:	1800031e 	bne	r3,zero,6168 <quorem+0x1c4>
    615c:	10bfff04 	addi	r2,r2,-4
    6160:	94bfffc4 	addi	r18,r18,-1
    6164:	a8bffb36 	bltu	r21,r2,6154 <__alt_data_end+0xff006154>
    6168:	84800415 	stw	r18,16(r16)
    616c:	9805883a 	mov	r2,r19
    6170:	dfc00817 	ldw	ra,32(sp)
    6174:	ddc00717 	ldw	r23,28(sp)
    6178:	dd800617 	ldw	r22,24(sp)
    617c:	dd400517 	ldw	r21,20(sp)
    6180:	dd000417 	ldw	r20,16(sp)
    6184:	dcc00317 	ldw	r19,12(sp)
    6188:	dc800217 	ldw	r18,8(sp)
    618c:	dc400117 	ldw	r17,4(sp)
    6190:	dc000017 	ldw	r16,0(sp)
    6194:	dec00904 	addi	sp,sp,36
    6198:	f800283a 	ret
    619c:	0005883a 	mov	r2,zero
    61a0:	003ff306 	br	6170 <__alt_data_end+0xff006170>

000061a4 <_dtoa_r>:
    61a4:	20801017 	ldw	r2,64(r4)
    61a8:	deffde04 	addi	sp,sp,-136
    61ac:	df002015 	stw	fp,128(sp)
    61b0:	dcc01b15 	stw	r19,108(sp)
    61b4:	dc801a15 	stw	r18,104(sp)
    61b8:	dc401915 	stw	r17,100(sp)
    61bc:	dc001815 	stw	r16,96(sp)
    61c0:	dfc02115 	stw	ra,132(sp)
    61c4:	ddc01f15 	stw	r23,124(sp)
    61c8:	dd801e15 	stw	r22,120(sp)
    61cc:	dd401d15 	stw	r21,116(sp)
    61d0:	dd001c15 	stw	r20,112(sp)
    61d4:	d9c00315 	stw	r7,12(sp)
    61d8:	2039883a 	mov	fp,r4
    61dc:	3023883a 	mov	r17,r6
    61e0:	2825883a 	mov	r18,r5
    61e4:	dc002417 	ldw	r16,144(sp)
    61e8:	3027883a 	mov	r19,r6
    61ec:	10000826 	beq	r2,zero,6210 <_dtoa_r+0x6c>
    61f0:	21801117 	ldw	r6,68(r4)
    61f4:	00c00044 	movi	r3,1
    61f8:	100b883a 	mov	r5,r2
    61fc:	1986983a 	sll	r3,r3,r6
    6200:	11800115 	stw	r6,4(r2)
    6204:	10c00215 	stw	r3,8(r2)
    6208:	00090dc0 	call	90dc <_Bfree>
    620c:	e0001015 	stw	zero,64(fp)
    6210:	88002e16 	blt	r17,zero,62cc <_dtoa_r+0x128>
    6214:	80000015 	stw	zero,0(r16)
    6218:	889ffc2c 	andhi	r2,r17,32752
    621c:	00dffc34 	movhi	r3,32752
    6220:	10c01c26 	beq	r2,r3,6294 <_dtoa_r+0xf0>
    6224:	000d883a 	mov	r6,zero
    6228:	000f883a 	mov	r7,zero
    622c:	9009883a 	mov	r4,r18
    6230:	980b883a 	mov	r5,r19
    6234:	000e3e00 	call	e3e0 <__eqdf2>
    6238:	10002b1e 	bne	r2,zero,62e8 <_dtoa_r+0x144>
    623c:	d9c02317 	ldw	r7,140(sp)
    6240:	00800044 	movi	r2,1
    6244:	38800015 	stw	r2,0(r7)
    6248:	d8802517 	ldw	r2,148(sp)
    624c:	10019e26 	beq	r2,zero,68c8 <_dtoa_r+0x724>
    6250:	d8c02517 	ldw	r3,148(sp)
    6254:	00800074 	movhi	r2,1
    6258:	108a0044 	addi	r2,r2,10241
    625c:	18800015 	stw	r2,0(r3)
    6260:	10bfffc4 	addi	r2,r2,-1
    6264:	dfc02117 	ldw	ra,132(sp)
    6268:	df002017 	ldw	fp,128(sp)
    626c:	ddc01f17 	ldw	r23,124(sp)
    6270:	dd801e17 	ldw	r22,120(sp)
    6274:	dd401d17 	ldw	r21,116(sp)
    6278:	dd001c17 	ldw	r20,112(sp)
    627c:	dcc01b17 	ldw	r19,108(sp)
    6280:	dc801a17 	ldw	r18,104(sp)
    6284:	dc401917 	ldw	r17,100(sp)
    6288:	dc001817 	ldw	r16,96(sp)
    628c:	dec02204 	addi	sp,sp,136
    6290:	f800283a 	ret
    6294:	d8c02317 	ldw	r3,140(sp)
    6298:	0089c3c4 	movi	r2,9999
    629c:	18800015 	stw	r2,0(r3)
    62a0:	90017726 	beq	r18,zero,6880 <_dtoa_r+0x6dc>
    62a4:	00800074 	movhi	r2,1
    62a8:	108a0c04 	addi	r2,r2,10288
    62ac:	d9002517 	ldw	r4,148(sp)
    62b0:	203fec26 	beq	r4,zero,6264 <__alt_data_end+0xff006264>
    62b4:	10c000c7 	ldb	r3,3(r2)
    62b8:	1801781e 	bne	r3,zero,689c <_dtoa_r+0x6f8>
    62bc:	10c000c4 	addi	r3,r2,3
    62c0:	d9802517 	ldw	r6,148(sp)
    62c4:	30c00015 	stw	r3,0(r6)
    62c8:	003fe606 	br	6264 <__alt_data_end+0xff006264>
    62cc:	04e00034 	movhi	r19,32768
    62d0:	9cffffc4 	addi	r19,r19,-1
    62d4:	00800044 	movi	r2,1
    62d8:	8ce6703a 	and	r19,r17,r19
    62dc:	80800015 	stw	r2,0(r16)
    62e0:	9823883a 	mov	r17,r19
    62e4:	003fcc06 	br	6218 <__alt_data_end+0xff006218>
    62e8:	d8800204 	addi	r2,sp,8
    62ec:	d8800015 	stw	r2,0(sp)
    62f0:	d9c00104 	addi	r7,sp,4
    62f4:	900b883a 	mov	r5,r18
    62f8:	980d883a 	mov	r6,r19
    62fc:	e009883a 	mov	r4,fp
    6300:	8820d53a 	srli	r16,r17,20
    6304:	0009cc80 	call	9cc8 <__d2b>
    6308:	d8800915 	stw	r2,36(sp)
    630c:	8001651e 	bne	r16,zero,68a4 <_dtoa_r+0x700>
    6310:	dd800217 	ldw	r22,8(sp)
    6314:	dc000117 	ldw	r16,4(sp)
    6318:	00800804 	movi	r2,32
    631c:	b421883a 	add	r16,r22,r16
    6320:	80c10c84 	addi	r3,r16,1074
    6324:	10c2d10e 	bge	r2,r3,6e6c <_dtoa_r+0xcc8>
    6328:	00801004 	movi	r2,64
    632c:	81010484 	addi	r4,r16,1042
    6330:	10c7c83a 	sub	r3,r2,r3
    6334:	9108d83a 	srl	r4,r18,r4
    6338:	88e2983a 	sll	r17,r17,r3
    633c:	2448b03a 	or	r4,r4,r17
    6340:	000f7a80 	call	f7a8 <__floatunsidf>
    6344:	017f8434 	movhi	r5,65040
    6348:	01800044 	movi	r6,1
    634c:	1009883a 	mov	r4,r2
    6350:	194b883a 	add	r5,r3,r5
    6354:	843fffc4 	addi	r16,r16,-1
    6358:	d9801115 	stw	r6,68(sp)
    635c:	000d883a 	mov	r6,zero
    6360:	01cffe34 	movhi	r7,16376
    6364:	000ed500 	call	ed50 <__subdf3>
    6368:	0198dbf4 	movhi	r6,25455
    636c:	01cff4f4 	movhi	r7,16339
    6370:	3190d844 	addi	r6,r6,17249
    6374:	39e1e9c4 	addi	r7,r7,-30809
    6378:	1009883a 	mov	r4,r2
    637c:	180b883a 	mov	r5,r3
    6380:	000e6380 	call	e638 <__muldf3>
    6384:	01a2d874 	movhi	r6,35681
    6388:	01cff1f4 	movhi	r7,16327
    638c:	31b22cc4 	addi	r6,r6,-14157
    6390:	39e28a04 	addi	r7,r7,-30168
    6394:	180b883a 	mov	r5,r3
    6398:	1009883a 	mov	r4,r2
    639c:	000d24c0 	call	d24c <__adddf3>
    63a0:	8009883a 	mov	r4,r16
    63a4:	1029883a 	mov	r20,r2
    63a8:	1823883a 	mov	r17,r3
    63ac:	000f6cc0 	call	f6cc <__floatsidf>
    63b0:	019427f4 	movhi	r6,20639
    63b4:	01cff4f4 	movhi	r7,16339
    63b8:	319e7ec4 	addi	r6,r6,31227
    63bc:	39d104c4 	addi	r7,r7,17427
    63c0:	1009883a 	mov	r4,r2
    63c4:	180b883a 	mov	r5,r3
    63c8:	000e6380 	call	e638 <__muldf3>
    63cc:	100d883a 	mov	r6,r2
    63d0:	180f883a 	mov	r7,r3
    63d4:	a009883a 	mov	r4,r20
    63d8:	880b883a 	mov	r5,r17
    63dc:	000d24c0 	call	d24c <__adddf3>
    63e0:	1009883a 	mov	r4,r2
    63e4:	180b883a 	mov	r5,r3
    63e8:	1029883a 	mov	r20,r2
    63ec:	1823883a 	mov	r17,r3
    63f0:	000f64c0 	call	f64c <__fixdfsi>
    63f4:	000d883a 	mov	r6,zero
    63f8:	000f883a 	mov	r7,zero
    63fc:	a009883a 	mov	r4,r20
    6400:	880b883a 	mov	r5,r17
    6404:	d8800515 	stw	r2,20(sp)
    6408:	000e5440 	call	e544 <__ledf2>
    640c:	10028716 	blt	r2,zero,6e2c <_dtoa_r+0xc88>
    6410:	d8c00517 	ldw	r3,20(sp)
    6414:	00800584 	movi	r2,22
    6418:	10c27536 	bltu	r2,r3,6df0 <_dtoa_r+0xc4c>
    641c:	180490fa 	slli	r2,r3,3
    6420:	00c00074 	movhi	r3,1
    6424:	18ca2804 	addi	r3,r3,10400
    6428:	1885883a 	add	r2,r3,r2
    642c:	11000017 	ldw	r4,0(r2)
    6430:	11400117 	ldw	r5,4(r2)
    6434:	900d883a 	mov	r6,r18
    6438:	980f883a 	mov	r7,r19
    643c:	000e4680 	call	e468 <__gedf2>
    6440:	00828d0e 	bge	zero,r2,6e78 <_dtoa_r+0xcd4>
    6444:	d9000517 	ldw	r4,20(sp)
    6448:	d8000e15 	stw	zero,56(sp)
    644c:	213fffc4 	addi	r4,r4,-1
    6450:	d9000515 	stw	r4,20(sp)
    6454:	b42dc83a 	sub	r22,r22,r16
    6458:	b5bfffc4 	addi	r22,r22,-1
    645c:	b0026f16 	blt	r22,zero,6e1c <_dtoa_r+0xc78>
    6460:	d8000815 	stw	zero,32(sp)
    6464:	d9c00517 	ldw	r7,20(sp)
    6468:	38026416 	blt	r7,zero,6dfc <_dtoa_r+0xc58>
    646c:	b1ed883a 	add	r22,r22,r7
    6470:	d9c00d15 	stw	r7,52(sp)
    6474:	d8000a15 	stw	zero,40(sp)
    6478:	d9800317 	ldw	r6,12(sp)
    647c:	00800244 	movi	r2,9
    6480:	11811436 	bltu	r2,r6,68d4 <_dtoa_r+0x730>
    6484:	00800144 	movi	r2,5
    6488:	1184e10e 	bge	r2,r6,7810 <_dtoa_r+0x166c>
    648c:	31bfff04 	addi	r6,r6,-4
    6490:	d9800315 	stw	r6,12(sp)
    6494:	0023883a 	mov	r17,zero
    6498:	d9800317 	ldw	r6,12(sp)
    649c:	008000c4 	movi	r2,3
    64a0:	30836726 	beq	r6,r2,7240 <_dtoa_r+0x109c>
    64a4:	1183410e 	bge	r2,r6,71ac <_dtoa_r+0x1008>
    64a8:	d9c00317 	ldw	r7,12(sp)
    64ac:	00800104 	movi	r2,4
    64b0:	38827c26 	beq	r7,r2,6ea4 <_dtoa_r+0xd00>
    64b4:	00800144 	movi	r2,5
    64b8:	3884c41e 	bne	r7,r2,77cc <_dtoa_r+0x1628>
    64bc:	00800044 	movi	r2,1
    64c0:	d8800b15 	stw	r2,44(sp)
    64c4:	d8c00517 	ldw	r3,20(sp)
    64c8:	d9002217 	ldw	r4,136(sp)
    64cc:	1907883a 	add	r3,r3,r4
    64d0:	19800044 	addi	r6,r3,1
    64d4:	d8c00c15 	stw	r3,48(sp)
    64d8:	d9800615 	stw	r6,24(sp)
    64dc:	0183a40e 	bge	zero,r6,7370 <_dtoa_r+0x11cc>
    64e0:	d9800617 	ldw	r6,24(sp)
    64e4:	3021883a 	mov	r16,r6
    64e8:	e0001115 	stw	zero,68(fp)
    64ec:	008005c4 	movi	r2,23
    64f0:	1184c92e 	bgeu	r2,r6,7818 <_dtoa_r+0x1674>
    64f4:	00c00044 	movi	r3,1
    64f8:	00800104 	movi	r2,4
    64fc:	1085883a 	add	r2,r2,r2
    6500:	11000504 	addi	r4,r2,20
    6504:	180b883a 	mov	r5,r3
    6508:	18c00044 	addi	r3,r3,1
    650c:	313ffb2e 	bgeu	r6,r4,64fc <__alt_data_end+0xff0064fc>
    6510:	e1401115 	stw	r5,68(fp)
    6514:	e009883a 	mov	r4,fp
    6518:	00090340 	call	9034 <_Balloc>
    651c:	d8800715 	stw	r2,28(sp)
    6520:	e0801015 	stw	r2,64(fp)
    6524:	00800384 	movi	r2,14
    6528:	1400f736 	bltu	r2,r16,6908 <_dtoa_r+0x764>
    652c:	8800f626 	beq	r17,zero,6908 <_dtoa_r+0x764>
    6530:	d9c00517 	ldw	r7,20(sp)
    6534:	01c39a0e 	bge	zero,r7,73a0 <_dtoa_r+0x11fc>
    6538:	388003cc 	andi	r2,r7,15
    653c:	100490fa 	slli	r2,r2,3
    6540:	382bd13a 	srai	r21,r7,4
    6544:	00c00074 	movhi	r3,1
    6548:	18ca2804 	addi	r3,r3,10400
    654c:	1885883a 	add	r2,r3,r2
    6550:	a8c0040c 	andi	r3,r21,16
    6554:	12400017 	ldw	r9,0(r2)
    6558:	12000117 	ldw	r8,4(r2)
    655c:	18037926 	beq	r3,zero,7344 <_dtoa_r+0x11a0>
    6560:	00800074 	movhi	r2,1
    6564:	108a1e04 	addi	r2,r2,10360
    6568:	11800817 	ldw	r6,32(r2)
    656c:	11c00917 	ldw	r7,36(r2)
    6570:	9009883a 	mov	r4,r18
    6574:	980b883a 	mov	r5,r19
    6578:	da001715 	stw	r8,92(sp)
    657c:	da401615 	stw	r9,88(sp)
    6580:	000daf80 	call	daf8 <__divdf3>
    6584:	da001717 	ldw	r8,92(sp)
    6588:	da401617 	ldw	r9,88(sp)
    658c:	ad4003cc 	andi	r21,r21,15
    6590:	040000c4 	movi	r16,3
    6594:	1023883a 	mov	r17,r2
    6598:	1829883a 	mov	r20,r3
    659c:	a8001126 	beq	r21,zero,65e4 <_dtoa_r+0x440>
    65a0:	05c00074 	movhi	r23,1
    65a4:	bdca1e04 	addi	r23,r23,10360
    65a8:	4805883a 	mov	r2,r9
    65ac:	4007883a 	mov	r3,r8
    65b0:	a980004c 	andi	r6,r21,1
    65b4:	1009883a 	mov	r4,r2
    65b8:	a82bd07a 	srai	r21,r21,1
    65bc:	180b883a 	mov	r5,r3
    65c0:	30000426 	beq	r6,zero,65d4 <_dtoa_r+0x430>
    65c4:	b9800017 	ldw	r6,0(r23)
    65c8:	b9c00117 	ldw	r7,4(r23)
    65cc:	84000044 	addi	r16,r16,1
    65d0:	000e6380 	call	e638 <__muldf3>
    65d4:	bdc00204 	addi	r23,r23,8
    65d8:	a83ff51e 	bne	r21,zero,65b0 <__alt_data_end+0xff0065b0>
    65dc:	1013883a 	mov	r9,r2
    65e0:	1811883a 	mov	r8,r3
    65e4:	480d883a 	mov	r6,r9
    65e8:	400f883a 	mov	r7,r8
    65ec:	8809883a 	mov	r4,r17
    65f0:	a00b883a 	mov	r5,r20
    65f4:	000daf80 	call	daf8 <__divdf3>
    65f8:	d8800f15 	stw	r2,60(sp)
    65fc:	d8c01015 	stw	r3,64(sp)
    6600:	d8c00e17 	ldw	r3,56(sp)
    6604:	18000626 	beq	r3,zero,6620 <_dtoa_r+0x47c>
    6608:	d9000f17 	ldw	r4,60(sp)
    660c:	d9401017 	ldw	r5,64(sp)
    6610:	000d883a 	mov	r6,zero
    6614:	01cffc34 	movhi	r7,16368
    6618:	000e5440 	call	e544 <__ledf2>
    661c:	10040b16 	blt	r2,zero,764c <_dtoa_r+0x14a8>
    6620:	8009883a 	mov	r4,r16
    6624:	000f6cc0 	call	f6cc <__floatsidf>
    6628:	d9800f17 	ldw	r6,60(sp)
    662c:	d9c01017 	ldw	r7,64(sp)
    6630:	1009883a 	mov	r4,r2
    6634:	180b883a 	mov	r5,r3
    6638:	000e6380 	call	e638 <__muldf3>
    663c:	000d883a 	mov	r6,zero
    6640:	01d00734 	movhi	r7,16412
    6644:	1009883a 	mov	r4,r2
    6648:	180b883a 	mov	r5,r3
    664c:	000d24c0 	call	d24c <__adddf3>
    6650:	1021883a 	mov	r16,r2
    6654:	d8800617 	ldw	r2,24(sp)
    6658:	047f3034 	movhi	r17,64704
    665c:	1c63883a 	add	r17,r3,r17
    6660:	10031826 	beq	r2,zero,72c4 <_dtoa_r+0x1120>
    6664:	d8c00517 	ldw	r3,20(sp)
    6668:	db000617 	ldw	r12,24(sp)
    666c:	d8c01315 	stw	r3,76(sp)
    6670:	d9000b17 	ldw	r4,44(sp)
    6674:	20038f26 	beq	r4,zero,74b4 <_dtoa_r+0x1310>
    6678:	60bfffc4 	addi	r2,r12,-1
    667c:	100490fa 	slli	r2,r2,3
    6680:	00c00074 	movhi	r3,1
    6684:	18ca2804 	addi	r3,r3,10400
    6688:	1885883a 	add	r2,r3,r2
    668c:	11800017 	ldw	r6,0(r2)
    6690:	11c00117 	ldw	r7,4(r2)
    6694:	d8800717 	ldw	r2,28(sp)
    6698:	0009883a 	mov	r4,zero
    669c:	014ff834 	movhi	r5,16352
    66a0:	db001615 	stw	r12,88(sp)
    66a4:	15c00044 	addi	r23,r2,1
    66a8:	000daf80 	call	daf8 <__divdf3>
    66ac:	800d883a 	mov	r6,r16
    66b0:	880f883a 	mov	r7,r17
    66b4:	1009883a 	mov	r4,r2
    66b8:	180b883a 	mov	r5,r3
    66bc:	000ed500 	call	ed50 <__subdf3>
    66c0:	d9401017 	ldw	r5,64(sp)
    66c4:	d9000f17 	ldw	r4,60(sp)
    66c8:	102b883a 	mov	r21,r2
    66cc:	d8c01215 	stw	r3,72(sp)
    66d0:	000f64c0 	call	f64c <__fixdfsi>
    66d4:	1009883a 	mov	r4,r2
    66d8:	1029883a 	mov	r20,r2
    66dc:	000f6cc0 	call	f6cc <__floatsidf>
    66e0:	d9000f17 	ldw	r4,60(sp)
    66e4:	d9401017 	ldw	r5,64(sp)
    66e8:	100d883a 	mov	r6,r2
    66ec:	180f883a 	mov	r7,r3
    66f0:	000ed500 	call	ed50 <__subdf3>
    66f4:	1823883a 	mov	r17,r3
    66f8:	d8c00717 	ldw	r3,28(sp)
    66fc:	d9401217 	ldw	r5,72(sp)
    6700:	a2000c04 	addi	r8,r20,48
    6704:	1021883a 	mov	r16,r2
    6708:	1a000005 	stb	r8,0(r3)
    670c:	800d883a 	mov	r6,r16
    6710:	880f883a 	mov	r7,r17
    6714:	a809883a 	mov	r4,r21
    6718:	4029883a 	mov	r20,r8
    671c:	000e4680 	call	e468 <__gedf2>
    6720:	00841d16 	blt	zero,r2,7798 <_dtoa_r+0x15f4>
    6724:	800d883a 	mov	r6,r16
    6728:	880f883a 	mov	r7,r17
    672c:	0009883a 	mov	r4,zero
    6730:	014ffc34 	movhi	r5,16368
    6734:	000ed500 	call	ed50 <__subdf3>
    6738:	d9401217 	ldw	r5,72(sp)
    673c:	100d883a 	mov	r6,r2
    6740:	180f883a 	mov	r7,r3
    6744:	a809883a 	mov	r4,r21
    6748:	000e4680 	call	e468 <__gedf2>
    674c:	db001617 	ldw	r12,88(sp)
    6750:	00840e16 	blt	zero,r2,778c <_dtoa_r+0x15e8>
    6754:	00800044 	movi	r2,1
    6758:	13006b0e 	bge	r2,r12,6908 <_dtoa_r+0x764>
    675c:	d9000717 	ldw	r4,28(sp)
    6760:	dd800f15 	stw	r22,60(sp)
    6764:	dcc01015 	stw	r19,64(sp)
    6768:	2319883a 	add	r12,r4,r12
    676c:	dcc01217 	ldw	r19,72(sp)
    6770:	602d883a 	mov	r22,r12
    6774:	dc801215 	stw	r18,72(sp)
    6778:	b825883a 	mov	r18,r23
    677c:	00000906 	br	67a4 <_dtoa_r+0x600>
    6780:	000ed500 	call	ed50 <__subdf3>
    6784:	a80d883a 	mov	r6,r21
    6788:	980f883a 	mov	r7,r19
    678c:	1009883a 	mov	r4,r2
    6790:	180b883a 	mov	r5,r3
    6794:	000e5440 	call	e544 <__ledf2>
    6798:	1003e816 	blt	r2,zero,773c <_dtoa_r+0x1598>
    679c:	b825883a 	mov	r18,r23
    67a0:	bd83e926 	beq	r23,r22,7748 <_dtoa_r+0x15a4>
    67a4:	a809883a 	mov	r4,r21
    67a8:	980b883a 	mov	r5,r19
    67ac:	000d883a 	mov	r6,zero
    67b0:	01d00934 	movhi	r7,16420
    67b4:	000e6380 	call	e638 <__muldf3>
    67b8:	000d883a 	mov	r6,zero
    67bc:	01d00934 	movhi	r7,16420
    67c0:	8009883a 	mov	r4,r16
    67c4:	880b883a 	mov	r5,r17
    67c8:	102b883a 	mov	r21,r2
    67cc:	1827883a 	mov	r19,r3
    67d0:	000e6380 	call	e638 <__muldf3>
    67d4:	180b883a 	mov	r5,r3
    67d8:	1009883a 	mov	r4,r2
    67dc:	1821883a 	mov	r16,r3
    67e0:	1023883a 	mov	r17,r2
    67e4:	000f64c0 	call	f64c <__fixdfsi>
    67e8:	1009883a 	mov	r4,r2
    67ec:	1029883a 	mov	r20,r2
    67f0:	000f6cc0 	call	f6cc <__floatsidf>
    67f4:	8809883a 	mov	r4,r17
    67f8:	800b883a 	mov	r5,r16
    67fc:	100d883a 	mov	r6,r2
    6800:	180f883a 	mov	r7,r3
    6804:	000ed500 	call	ed50 <__subdf3>
    6808:	a5000c04 	addi	r20,r20,48
    680c:	a80d883a 	mov	r6,r21
    6810:	980f883a 	mov	r7,r19
    6814:	1009883a 	mov	r4,r2
    6818:	180b883a 	mov	r5,r3
    681c:	95000005 	stb	r20,0(r18)
    6820:	1021883a 	mov	r16,r2
    6824:	1823883a 	mov	r17,r3
    6828:	000e5440 	call	e544 <__ledf2>
    682c:	bdc00044 	addi	r23,r23,1
    6830:	800d883a 	mov	r6,r16
    6834:	880f883a 	mov	r7,r17
    6838:	0009883a 	mov	r4,zero
    683c:	014ffc34 	movhi	r5,16368
    6840:	103fcf0e 	bge	r2,zero,6780 <__alt_data_end+0xff006780>
    6844:	d8c01317 	ldw	r3,76(sp)
    6848:	d8c00515 	stw	r3,20(sp)
    684c:	d9400917 	ldw	r5,36(sp)
    6850:	e009883a 	mov	r4,fp
    6854:	00090dc0 	call	90dc <_Bfree>
    6858:	d9000517 	ldw	r4,20(sp)
    685c:	d9802317 	ldw	r6,140(sp)
    6860:	d9c02517 	ldw	r7,148(sp)
    6864:	b8000005 	stb	zero,0(r23)
    6868:	20800044 	addi	r2,r4,1
    686c:	30800015 	stw	r2,0(r6)
    6870:	3802aa26 	beq	r7,zero,731c <_dtoa_r+0x1178>
    6874:	3dc00015 	stw	r23,0(r7)
    6878:	d8800717 	ldw	r2,28(sp)
    687c:	003e7906 	br	6264 <__alt_data_end+0xff006264>
    6880:	00800434 	movhi	r2,16
    6884:	10bfffc4 	addi	r2,r2,-1
    6888:	88a2703a 	and	r17,r17,r2
    688c:	883e851e 	bne	r17,zero,62a4 <__alt_data_end+0xff0062a4>
    6890:	00800074 	movhi	r2,1
    6894:	108a0904 	addi	r2,r2,10276
    6898:	003e8406 	br	62ac <__alt_data_end+0xff0062ac>
    689c:	10c00204 	addi	r3,r2,8
    68a0:	003e8706 	br	62c0 <__alt_data_end+0xff0062c0>
    68a4:	01400434 	movhi	r5,16
    68a8:	297fffc4 	addi	r5,r5,-1
    68ac:	994a703a 	and	r5,r19,r5
    68b0:	9009883a 	mov	r4,r18
    68b4:	843f0044 	addi	r16,r16,-1023
    68b8:	294ffc34 	orhi	r5,r5,16368
    68bc:	dd800217 	ldw	r22,8(sp)
    68c0:	d8001115 	stw	zero,68(sp)
    68c4:	003ea506 	br	635c <__alt_data_end+0xff00635c>
    68c8:	00800074 	movhi	r2,1
    68cc:	108a0004 	addi	r2,r2,10240
    68d0:	003e6406 	br	6264 <__alt_data_end+0xff006264>
    68d4:	e0001115 	stw	zero,68(fp)
    68d8:	000b883a 	mov	r5,zero
    68dc:	e009883a 	mov	r4,fp
    68e0:	00090340 	call	9034 <_Balloc>
    68e4:	01bfffc4 	movi	r6,-1
    68e8:	01c00044 	movi	r7,1
    68ec:	d8800715 	stw	r2,28(sp)
    68f0:	d9800c15 	stw	r6,48(sp)
    68f4:	e0801015 	stw	r2,64(fp)
    68f8:	d8000315 	stw	zero,12(sp)
    68fc:	d9c00b15 	stw	r7,44(sp)
    6900:	d9800615 	stw	r6,24(sp)
    6904:	d8002215 	stw	zero,136(sp)
    6908:	d8800117 	ldw	r2,4(sp)
    690c:	10008916 	blt	r2,zero,6b34 <_dtoa_r+0x990>
    6910:	d9000517 	ldw	r4,20(sp)
    6914:	00c00384 	movi	r3,14
    6918:	19008616 	blt	r3,r4,6b34 <_dtoa_r+0x990>
    691c:	200490fa 	slli	r2,r4,3
    6920:	00c00074 	movhi	r3,1
    6924:	d9802217 	ldw	r6,136(sp)
    6928:	18ca2804 	addi	r3,r3,10400
    692c:	1885883a 	add	r2,r3,r2
    6930:	14000017 	ldw	r16,0(r2)
    6934:	14400117 	ldw	r17,4(r2)
    6938:	30016316 	blt	r6,zero,6ec8 <_dtoa_r+0xd24>
    693c:	800d883a 	mov	r6,r16
    6940:	880f883a 	mov	r7,r17
    6944:	9009883a 	mov	r4,r18
    6948:	980b883a 	mov	r5,r19
    694c:	000daf80 	call	daf8 <__divdf3>
    6950:	180b883a 	mov	r5,r3
    6954:	1009883a 	mov	r4,r2
    6958:	000f64c0 	call	f64c <__fixdfsi>
    695c:	1009883a 	mov	r4,r2
    6960:	102b883a 	mov	r21,r2
    6964:	000f6cc0 	call	f6cc <__floatsidf>
    6968:	800d883a 	mov	r6,r16
    696c:	880f883a 	mov	r7,r17
    6970:	1009883a 	mov	r4,r2
    6974:	180b883a 	mov	r5,r3
    6978:	000e6380 	call	e638 <__muldf3>
    697c:	100d883a 	mov	r6,r2
    6980:	180f883a 	mov	r7,r3
    6984:	9009883a 	mov	r4,r18
    6988:	980b883a 	mov	r5,r19
    698c:	000ed500 	call	ed50 <__subdf3>
    6990:	d9c00717 	ldw	r7,28(sp)
    6994:	1009883a 	mov	r4,r2
    6998:	a8800c04 	addi	r2,r21,48
    699c:	38800005 	stb	r2,0(r7)
    69a0:	3dc00044 	addi	r23,r7,1
    69a4:	d9c00617 	ldw	r7,24(sp)
    69a8:	01800044 	movi	r6,1
    69ac:	180b883a 	mov	r5,r3
    69b0:	2005883a 	mov	r2,r4
    69b4:	39803826 	beq	r7,r6,6a98 <_dtoa_r+0x8f4>
    69b8:	000d883a 	mov	r6,zero
    69bc:	01d00934 	movhi	r7,16420
    69c0:	000e6380 	call	e638 <__muldf3>
    69c4:	000d883a 	mov	r6,zero
    69c8:	000f883a 	mov	r7,zero
    69cc:	1009883a 	mov	r4,r2
    69d0:	180b883a 	mov	r5,r3
    69d4:	1025883a 	mov	r18,r2
    69d8:	1827883a 	mov	r19,r3
    69dc:	000e3e00 	call	e3e0 <__eqdf2>
    69e0:	103f9a26 	beq	r2,zero,684c <__alt_data_end+0xff00684c>
    69e4:	d9c00617 	ldw	r7,24(sp)
    69e8:	d8c00717 	ldw	r3,28(sp)
    69ec:	b829883a 	mov	r20,r23
    69f0:	38bfffc4 	addi	r2,r7,-1
    69f4:	18ad883a 	add	r22,r3,r2
    69f8:	00000a06 	br	6a24 <_dtoa_r+0x880>
    69fc:	000e6380 	call	e638 <__muldf3>
    6a00:	000d883a 	mov	r6,zero
    6a04:	000f883a 	mov	r7,zero
    6a08:	1009883a 	mov	r4,r2
    6a0c:	180b883a 	mov	r5,r3
    6a10:	1025883a 	mov	r18,r2
    6a14:	1827883a 	mov	r19,r3
    6a18:	b829883a 	mov	r20,r23
    6a1c:	000e3e00 	call	e3e0 <__eqdf2>
    6a20:	103f8a26 	beq	r2,zero,684c <__alt_data_end+0xff00684c>
    6a24:	800d883a 	mov	r6,r16
    6a28:	880f883a 	mov	r7,r17
    6a2c:	9009883a 	mov	r4,r18
    6a30:	980b883a 	mov	r5,r19
    6a34:	000daf80 	call	daf8 <__divdf3>
    6a38:	180b883a 	mov	r5,r3
    6a3c:	1009883a 	mov	r4,r2
    6a40:	000f64c0 	call	f64c <__fixdfsi>
    6a44:	1009883a 	mov	r4,r2
    6a48:	102b883a 	mov	r21,r2
    6a4c:	000f6cc0 	call	f6cc <__floatsidf>
    6a50:	800d883a 	mov	r6,r16
    6a54:	880f883a 	mov	r7,r17
    6a58:	1009883a 	mov	r4,r2
    6a5c:	180b883a 	mov	r5,r3
    6a60:	000e6380 	call	e638 <__muldf3>
    6a64:	100d883a 	mov	r6,r2
    6a68:	180f883a 	mov	r7,r3
    6a6c:	9009883a 	mov	r4,r18
    6a70:	980b883a 	mov	r5,r19
    6a74:	000ed500 	call	ed50 <__subdf3>
    6a78:	aa000c04 	addi	r8,r21,48
    6a7c:	a2000005 	stb	r8,0(r20)
    6a80:	000d883a 	mov	r6,zero
    6a84:	01d00934 	movhi	r7,16420
    6a88:	1009883a 	mov	r4,r2
    6a8c:	180b883a 	mov	r5,r3
    6a90:	a5c00044 	addi	r23,r20,1
    6a94:	b53fd91e 	bne	r22,r20,69fc <__alt_data_end+0xff0069fc>
    6a98:	100d883a 	mov	r6,r2
    6a9c:	180f883a 	mov	r7,r3
    6aa0:	1009883a 	mov	r4,r2
    6aa4:	180b883a 	mov	r5,r3
    6aa8:	000d24c0 	call	d24c <__adddf3>
    6aac:	100d883a 	mov	r6,r2
    6ab0:	180f883a 	mov	r7,r3
    6ab4:	8009883a 	mov	r4,r16
    6ab8:	880b883a 	mov	r5,r17
    6abc:	1027883a 	mov	r19,r2
    6ac0:	1825883a 	mov	r18,r3
    6ac4:	000e5440 	call	e544 <__ledf2>
    6ac8:	10000816 	blt	r2,zero,6aec <_dtoa_r+0x948>
    6acc:	980d883a 	mov	r6,r19
    6ad0:	900f883a 	mov	r7,r18
    6ad4:	8009883a 	mov	r4,r16
    6ad8:	880b883a 	mov	r5,r17
    6adc:	000e3e00 	call	e3e0 <__eqdf2>
    6ae0:	103f5a1e 	bne	r2,zero,684c <__alt_data_end+0xff00684c>
    6ae4:	ad40004c 	andi	r21,r21,1
    6ae8:	a83f5826 	beq	r21,zero,684c <__alt_data_end+0xff00684c>
    6aec:	bd3fffc3 	ldbu	r20,-1(r23)
    6af0:	b8bfffc4 	addi	r2,r23,-1
    6af4:	1007883a 	mov	r3,r2
    6af8:	01400e44 	movi	r5,57
    6afc:	d9800717 	ldw	r6,28(sp)
    6b00:	00000506 	br	6b18 <_dtoa_r+0x974>
    6b04:	18ffffc4 	addi	r3,r3,-1
    6b08:	11824726 	beq	r2,r6,7428 <_dtoa_r+0x1284>
    6b0c:	1d000003 	ldbu	r20,0(r3)
    6b10:	102f883a 	mov	r23,r2
    6b14:	10bfffc4 	addi	r2,r2,-1
    6b18:	a1003fcc 	andi	r4,r20,255
    6b1c:	2100201c 	xori	r4,r4,128
    6b20:	213fe004 	addi	r4,r4,-128
    6b24:	217ff726 	beq	r4,r5,6b04 <__alt_data_end+0xff006b04>
    6b28:	a2000044 	addi	r8,r20,1
    6b2c:	12000005 	stb	r8,0(r2)
    6b30:	003f4606 	br	684c <__alt_data_end+0xff00684c>
    6b34:	d9000b17 	ldw	r4,44(sp)
    6b38:	2000c826 	beq	r4,zero,6e5c <_dtoa_r+0xcb8>
    6b3c:	d9800317 	ldw	r6,12(sp)
    6b40:	00c00044 	movi	r3,1
    6b44:	1980f90e 	bge	r3,r6,6f2c <_dtoa_r+0xd88>
    6b48:	d8800617 	ldw	r2,24(sp)
    6b4c:	d8c00a17 	ldw	r3,40(sp)
    6b50:	157fffc4 	addi	r21,r2,-1
    6b54:	1d41f316 	blt	r3,r21,7324 <_dtoa_r+0x1180>
    6b58:	1d6bc83a 	sub	r21,r3,r21
    6b5c:	d9c00617 	ldw	r7,24(sp)
    6b60:	3802aa16 	blt	r7,zero,760c <_dtoa_r+0x1468>
    6b64:	dd000817 	ldw	r20,32(sp)
    6b68:	d8800617 	ldw	r2,24(sp)
    6b6c:	d8c00817 	ldw	r3,32(sp)
    6b70:	01400044 	movi	r5,1
    6b74:	e009883a 	mov	r4,fp
    6b78:	1887883a 	add	r3,r3,r2
    6b7c:	d8c00815 	stw	r3,32(sp)
    6b80:	b0ad883a 	add	r22,r22,r2
    6b84:	00094400 	call	9440 <__i2b>
    6b88:	1023883a 	mov	r17,r2
    6b8c:	a0000826 	beq	r20,zero,6bb0 <_dtoa_r+0xa0c>
    6b90:	0580070e 	bge	zero,r22,6bb0 <_dtoa_r+0xa0c>
    6b94:	a005883a 	mov	r2,r20
    6b98:	b500b916 	blt	r22,r20,6e80 <_dtoa_r+0xcdc>
    6b9c:	d9000817 	ldw	r4,32(sp)
    6ba0:	a0a9c83a 	sub	r20,r20,r2
    6ba4:	b0adc83a 	sub	r22,r22,r2
    6ba8:	2089c83a 	sub	r4,r4,r2
    6bac:	d9000815 	stw	r4,32(sp)
    6bb0:	d9800a17 	ldw	r6,40(sp)
    6bb4:	0181810e 	bge	zero,r6,71bc <_dtoa_r+0x1018>
    6bb8:	d9c00b17 	ldw	r7,44(sp)
    6bbc:	3800b326 	beq	r7,zero,6e8c <_dtoa_r+0xce8>
    6bc0:	a800b226 	beq	r21,zero,6e8c <_dtoa_r+0xce8>
    6bc4:	880b883a 	mov	r5,r17
    6bc8:	a80d883a 	mov	r6,r21
    6bcc:	e009883a 	mov	r4,fp
    6bd0:	00096740 	call	9674 <__pow5mult>
    6bd4:	d9800917 	ldw	r6,36(sp)
    6bd8:	100b883a 	mov	r5,r2
    6bdc:	e009883a 	mov	r4,fp
    6be0:	1023883a 	mov	r17,r2
    6be4:	000947c0 	call	947c <__multiply>
    6be8:	1021883a 	mov	r16,r2
    6bec:	d8800a17 	ldw	r2,40(sp)
    6bf0:	d9400917 	ldw	r5,36(sp)
    6bf4:	e009883a 	mov	r4,fp
    6bf8:	1545c83a 	sub	r2,r2,r21
    6bfc:	d8800a15 	stw	r2,40(sp)
    6c00:	00090dc0 	call	90dc <_Bfree>
    6c04:	d8c00a17 	ldw	r3,40(sp)
    6c08:	18009f1e 	bne	r3,zero,6e88 <_dtoa_r+0xce4>
    6c0c:	05c00044 	movi	r23,1
    6c10:	e009883a 	mov	r4,fp
    6c14:	b80b883a 	mov	r5,r23
    6c18:	00094400 	call	9440 <__i2b>
    6c1c:	d9000d17 	ldw	r4,52(sp)
    6c20:	102b883a 	mov	r21,r2
    6c24:	2000ce26 	beq	r4,zero,6f60 <_dtoa_r+0xdbc>
    6c28:	200d883a 	mov	r6,r4
    6c2c:	100b883a 	mov	r5,r2
    6c30:	e009883a 	mov	r4,fp
    6c34:	00096740 	call	9674 <__pow5mult>
    6c38:	d9800317 	ldw	r6,12(sp)
    6c3c:	102b883a 	mov	r21,r2
    6c40:	b981810e 	bge	r23,r6,7248 <_dtoa_r+0x10a4>
    6c44:	0027883a 	mov	r19,zero
    6c48:	a8800417 	ldw	r2,16(r21)
    6c4c:	05c00804 	movi	r23,32
    6c50:	10800104 	addi	r2,r2,4
    6c54:	1085883a 	add	r2,r2,r2
    6c58:	1085883a 	add	r2,r2,r2
    6c5c:	a885883a 	add	r2,r21,r2
    6c60:	11000017 	ldw	r4,0(r2)
    6c64:	00093280 	call	9328 <__hi0bits>
    6c68:	b885c83a 	sub	r2,r23,r2
    6c6c:	1585883a 	add	r2,r2,r22
    6c70:	108007cc 	andi	r2,r2,31
    6c74:	1000b326 	beq	r2,zero,6f44 <_dtoa_r+0xda0>
    6c78:	00c00804 	movi	r3,32
    6c7c:	1887c83a 	sub	r3,r3,r2
    6c80:	01000104 	movi	r4,4
    6c84:	20c2cd0e 	bge	r4,r3,77bc <_dtoa_r+0x1618>
    6c88:	00c00704 	movi	r3,28
    6c8c:	1885c83a 	sub	r2,r3,r2
    6c90:	d8c00817 	ldw	r3,32(sp)
    6c94:	a0a9883a 	add	r20,r20,r2
    6c98:	b0ad883a 	add	r22,r22,r2
    6c9c:	1887883a 	add	r3,r3,r2
    6ca0:	d8c00815 	stw	r3,32(sp)
    6ca4:	d9800817 	ldw	r6,32(sp)
    6ca8:	0180040e 	bge	zero,r6,6cbc <_dtoa_r+0xb18>
    6cac:	800b883a 	mov	r5,r16
    6cb0:	e009883a 	mov	r4,fp
    6cb4:	00097b40 	call	97b4 <__lshift>
    6cb8:	1021883a 	mov	r16,r2
    6cbc:	0580050e 	bge	zero,r22,6cd4 <_dtoa_r+0xb30>
    6cc0:	a80b883a 	mov	r5,r21
    6cc4:	b00d883a 	mov	r6,r22
    6cc8:	e009883a 	mov	r4,fp
    6ccc:	00097b40 	call	97b4 <__lshift>
    6cd0:	102b883a 	mov	r21,r2
    6cd4:	d9c00e17 	ldw	r7,56(sp)
    6cd8:	3801211e 	bne	r7,zero,7160 <_dtoa_r+0xfbc>
    6cdc:	d9800617 	ldw	r6,24(sp)
    6ce0:	0181380e 	bge	zero,r6,71c4 <_dtoa_r+0x1020>
    6ce4:	d8c00b17 	ldw	r3,44(sp)
    6ce8:	1800ab1e 	bne	r3,zero,6f98 <_dtoa_r+0xdf4>
    6cec:	dc800717 	ldw	r18,28(sp)
    6cf0:	dcc00617 	ldw	r19,24(sp)
    6cf4:	9029883a 	mov	r20,r18
    6cf8:	00000206 	br	6d04 <_dtoa_r+0xb60>
    6cfc:	00091040 	call	9104 <__multadd>
    6d00:	1021883a 	mov	r16,r2
    6d04:	a80b883a 	mov	r5,r21
    6d08:	8009883a 	mov	r4,r16
    6d0c:	0005fa40 	call	5fa4 <quorem>
    6d10:	10800c04 	addi	r2,r2,48
    6d14:	90800005 	stb	r2,0(r18)
    6d18:	94800044 	addi	r18,r18,1
    6d1c:	9507c83a 	sub	r3,r18,r20
    6d20:	000f883a 	mov	r7,zero
    6d24:	01800284 	movi	r6,10
    6d28:	800b883a 	mov	r5,r16
    6d2c:	e009883a 	mov	r4,fp
    6d30:	1cfff216 	blt	r3,r19,6cfc <__alt_data_end+0xff006cfc>
    6d34:	1011883a 	mov	r8,r2
    6d38:	d8800617 	ldw	r2,24(sp)
    6d3c:	0082370e 	bge	zero,r2,761c <_dtoa_r+0x1478>
    6d40:	d9000717 	ldw	r4,28(sp)
    6d44:	0025883a 	mov	r18,zero
    6d48:	20af883a 	add	r23,r4,r2
    6d4c:	01800044 	movi	r6,1
    6d50:	800b883a 	mov	r5,r16
    6d54:	e009883a 	mov	r4,fp
    6d58:	da001715 	stw	r8,92(sp)
    6d5c:	00097b40 	call	97b4 <__lshift>
    6d60:	a80b883a 	mov	r5,r21
    6d64:	1009883a 	mov	r4,r2
    6d68:	d8800915 	stw	r2,36(sp)
    6d6c:	00098fc0 	call	98fc <__mcmp>
    6d70:	da001717 	ldw	r8,92(sp)
    6d74:	0081800e 	bge	zero,r2,7378 <_dtoa_r+0x11d4>
    6d78:	b93fffc3 	ldbu	r4,-1(r23)
    6d7c:	b8bfffc4 	addi	r2,r23,-1
    6d80:	1007883a 	mov	r3,r2
    6d84:	01800e44 	movi	r6,57
    6d88:	d9c00717 	ldw	r7,28(sp)
    6d8c:	00000506 	br	6da4 <_dtoa_r+0xc00>
    6d90:	18ffffc4 	addi	r3,r3,-1
    6d94:	11c12326 	beq	r2,r7,7224 <_dtoa_r+0x1080>
    6d98:	19000003 	ldbu	r4,0(r3)
    6d9c:	102f883a 	mov	r23,r2
    6da0:	10bfffc4 	addi	r2,r2,-1
    6da4:	21403fcc 	andi	r5,r4,255
    6da8:	2940201c 	xori	r5,r5,128
    6dac:	297fe004 	addi	r5,r5,-128
    6db0:	29bff726 	beq	r5,r6,6d90 <__alt_data_end+0xff006d90>
    6db4:	21000044 	addi	r4,r4,1
    6db8:	11000005 	stb	r4,0(r2)
    6dbc:	a80b883a 	mov	r5,r21
    6dc0:	e009883a 	mov	r4,fp
    6dc4:	00090dc0 	call	90dc <_Bfree>
    6dc8:	883ea026 	beq	r17,zero,684c <__alt_data_end+0xff00684c>
    6dcc:	90000426 	beq	r18,zero,6de0 <_dtoa_r+0xc3c>
    6dd0:	94400326 	beq	r18,r17,6de0 <_dtoa_r+0xc3c>
    6dd4:	900b883a 	mov	r5,r18
    6dd8:	e009883a 	mov	r4,fp
    6ddc:	00090dc0 	call	90dc <_Bfree>
    6de0:	880b883a 	mov	r5,r17
    6de4:	e009883a 	mov	r4,fp
    6de8:	00090dc0 	call	90dc <_Bfree>
    6dec:	003e9706 	br	684c <__alt_data_end+0xff00684c>
    6df0:	01800044 	movi	r6,1
    6df4:	d9800e15 	stw	r6,56(sp)
    6df8:	003d9606 	br	6454 <__alt_data_end+0xff006454>
    6dfc:	d8800817 	ldw	r2,32(sp)
    6e00:	d8c00517 	ldw	r3,20(sp)
    6e04:	d8000d15 	stw	zero,52(sp)
    6e08:	10c5c83a 	sub	r2,r2,r3
    6e0c:	00c9c83a 	sub	r4,zero,r3
    6e10:	d8800815 	stw	r2,32(sp)
    6e14:	d9000a15 	stw	r4,40(sp)
    6e18:	003d9706 	br	6478 <__alt_data_end+0xff006478>
    6e1c:	05adc83a 	sub	r22,zero,r22
    6e20:	dd800815 	stw	r22,32(sp)
    6e24:	002d883a 	mov	r22,zero
    6e28:	003d8e06 	br	6464 <__alt_data_end+0xff006464>
    6e2c:	d9000517 	ldw	r4,20(sp)
    6e30:	000f6cc0 	call	f6cc <__floatsidf>
    6e34:	100d883a 	mov	r6,r2
    6e38:	180f883a 	mov	r7,r3
    6e3c:	a009883a 	mov	r4,r20
    6e40:	880b883a 	mov	r5,r17
    6e44:	000e3e00 	call	e3e0 <__eqdf2>
    6e48:	103d7126 	beq	r2,zero,6410 <__alt_data_end+0xff006410>
    6e4c:	d9c00517 	ldw	r7,20(sp)
    6e50:	39ffffc4 	addi	r7,r7,-1
    6e54:	d9c00515 	stw	r7,20(sp)
    6e58:	003d6d06 	br	6410 <__alt_data_end+0xff006410>
    6e5c:	dd400a17 	ldw	r21,40(sp)
    6e60:	dd000817 	ldw	r20,32(sp)
    6e64:	0023883a 	mov	r17,zero
    6e68:	003f4806 	br	6b8c <__alt_data_end+0xff006b8c>
    6e6c:	10e3c83a 	sub	r17,r2,r3
    6e70:	9448983a 	sll	r4,r18,r17
    6e74:	003d3206 	br	6340 <__alt_data_end+0xff006340>
    6e78:	d8000e15 	stw	zero,56(sp)
    6e7c:	003d7506 	br	6454 <__alt_data_end+0xff006454>
    6e80:	b005883a 	mov	r2,r22
    6e84:	003f4506 	br	6b9c <__alt_data_end+0xff006b9c>
    6e88:	dc000915 	stw	r16,36(sp)
    6e8c:	d9800a17 	ldw	r6,40(sp)
    6e90:	d9400917 	ldw	r5,36(sp)
    6e94:	e009883a 	mov	r4,fp
    6e98:	00096740 	call	9674 <__pow5mult>
    6e9c:	1021883a 	mov	r16,r2
    6ea0:	003f5a06 	br	6c0c <__alt_data_end+0xff006c0c>
    6ea4:	01c00044 	movi	r7,1
    6ea8:	d9c00b15 	stw	r7,44(sp)
    6eac:	d8802217 	ldw	r2,136(sp)
    6eb0:	0081280e 	bge	zero,r2,7354 <_dtoa_r+0x11b0>
    6eb4:	100d883a 	mov	r6,r2
    6eb8:	1021883a 	mov	r16,r2
    6ebc:	d8800c15 	stw	r2,48(sp)
    6ec0:	d8800615 	stw	r2,24(sp)
    6ec4:	003d8806 	br	64e8 <__alt_data_end+0xff0064e8>
    6ec8:	d8800617 	ldw	r2,24(sp)
    6ecc:	00be9b16 	blt	zero,r2,693c <__alt_data_end+0xff00693c>
    6ed0:	10010f1e 	bne	r2,zero,7310 <_dtoa_r+0x116c>
    6ed4:	880b883a 	mov	r5,r17
    6ed8:	000d883a 	mov	r6,zero
    6edc:	01d00534 	movhi	r7,16404
    6ee0:	8009883a 	mov	r4,r16
    6ee4:	000e6380 	call	e638 <__muldf3>
    6ee8:	900d883a 	mov	r6,r18
    6eec:	980f883a 	mov	r7,r19
    6ef0:	1009883a 	mov	r4,r2
    6ef4:	180b883a 	mov	r5,r3
    6ef8:	000e4680 	call	e468 <__gedf2>
    6efc:	002b883a 	mov	r21,zero
    6f00:	0023883a 	mov	r17,zero
    6f04:	1000bf16 	blt	r2,zero,7204 <_dtoa_r+0x1060>
    6f08:	d9802217 	ldw	r6,136(sp)
    6f0c:	ddc00717 	ldw	r23,28(sp)
    6f10:	018c303a 	nor	r6,zero,r6
    6f14:	d9800515 	stw	r6,20(sp)
    6f18:	a80b883a 	mov	r5,r21
    6f1c:	e009883a 	mov	r4,fp
    6f20:	00090dc0 	call	90dc <_Bfree>
    6f24:	883e4926 	beq	r17,zero,684c <__alt_data_end+0xff00684c>
    6f28:	003fad06 	br	6de0 <__alt_data_end+0xff006de0>
    6f2c:	d9c01117 	ldw	r7,68(sp)
    6f30:	3801bc26 	beq	r7,zero,7624 <_dtoa_r+0x1480>
    6f34:	10810cc4 	addi	r2,r2,1075
    6f38:	dd400a17 	ldw	r21,40(sp)
    6f3c:	dd000817 	ldw	r20,32(sp)
    6f40:	003f0a06 	br	6b6c <__alt_data_end+0xff006b6c>
    6f44:	00800704 	movi	r2,28
    6f48:	d9000817 	ldw	r4,32(sp)
    6f4c:	a0a9883a 	add	r20,r20,r2
    6f50:	b0ad883a 	add	r22,r22,r2
    6f54:	2089883a 	add	r4,r4,r2
    6f58:	d9000815 	stw	r4,32(sp)
    6f5c:	003f5106 	br	6ca4 <__alt_data_end+0xff006ca4>
    6f60:	d8c00317 	ldw	r3,12(sp)
    6f64:	b8c1fc0e 	bge	r23,r3,7758 <_dtoa_r+0x15b4>
    6f68:	0027883a 	mov	r19,zero
    6f6c:	b805883a 	mov	r2,r23
    6f70:	003f3e06 	br	6c6c <__alt_data_end+0xff006c6c>
    6f74:	880b883a 	mov	r5,r17
    6f78:	e009883a 	mov	r4,fp
    6f7c:	000f883a 	mov	r7,zero
    6f80:	01800284 	movi	r6,10
    6f84:	00091040 	call	9104 <__multadd>
    6f88:	d9000c17 	ldw	r4,48(sp)
    6f8c:	1023883a 	mov	r17,r2
    6f90:	0102040e 	bge	zero,r4,77a4 <_dtoa_r+0x1600>
    6f94:	d9000615 	stw	r4,24(sp)
    6f98:	0500050e 	bge	zero,r20,6fb0 <_dtoa_r+0xe0c>
    6f9c:	880b883a 	mov	r5,r17
    6fa0:	a00d883a 	mov	r6,r20
    6fa4:	e009883a 	mov	r4,fp
    6fa8:	00097b40 	call	97b4 <__lshift>
    6fac:	1023883a 	mov	r17,r2
    6fb0:	9801241e 	bne	r19,zero,7444 <_dtoa_r+0x12a0>
    6fb4:	8829883a 	mov	r20,r17
    6fb8:	d9000617 	ldw	r4,24(sp)
    6fbc:	dcc00717 	ldw	r19,28(sp)
    6fc0:	9480004c 	andi	r18,r18,1
    6fc4:	20bfffc4 	addi	r2,r4,-1
    6fc8:	9885883a 	add	r2,r19,r2
    6fcc:	d8800415 	stw	r2,16(sp)
    6fd0:	dc800615 	stw	r18,24(sp)
    6fd4:	a80b883a 	mov	r5,r21
    6fd8:	8009883a 	mov	r4,r16
    6fdc:	0005fa40 	call	5fa4 <quorem>
    6fe0:	880b883a 	mov	r5,r17
    6fe4:	8009883a 	mov	r4,r16
    6fe8:	102f883a 	mov	r23,r2
    6fec:	00098fc0 	call	98fc <__mcmp>
    6ff0:	a80b883a 	mov	r5,r21
    6ff4:	a00d883a 	mov	r6,r20
    6ff8:	e009883a 	mov	r4,fp
    6ffc:	102d883a 	mov	r22,r2
    7000:	000995c0 	call	995c <__mdiff>
    7004:	1007883a 	mov	r3,r2
    7008:	10800317 	ldw	r2,12(r2)
    700c:	bc800c04 	addi	r18,r23,48
    7010:	180b883a 	mov	r5,r3
    7014:	10004e1e 	bne	r2,zero,7150 <_dtoa_r+0xfac>
    7018:	8009883a 	mov	r4,r16
    701c:	d8c01615 	stw	r3,88(sp)
    7020:	00098fc0 	call	98fc <__mcmp>
    7024:	d8c01617 	ldw	r3,88(sp)
    7028:	e009883a 	mov	r4,fp
    702c:	d8801615 	stw	r2,88(sp)
    7030:	180b883a 	mov	r5,r3
    7034:	00090dc0 	call	90dc <_Bfree>
    7038:	d8801617 	ldw	r2,88(sp)
    703c:	1000041e 	bne	r2,zero,7050 <_dtoa_r+0xeac>
    7040:	d9800317 	ldw	r6,12(sp)
    7044:	3000021e 	bne	r6,zero,7050 <_dtoa_r+0xeac>
    7048:	d8c00617 	ldw	r3,24(sp)
    704c:	18003726 	beq	r3,zero,712c <_dtoa_r+0xf88>
    7050:	b0002016 	blt	r22,zero,70d4 <_dtoa_r+0xf30>
    7054:	b000041e 	bne	r22,zero,7068 <_dtoa_r+0xec4>
    7058:	d9000317 	ldw	r4,12(sp)
    705c:	2000021e 	bne	r4,zero,7068 <_dtoa_r+0xec4>
    7060:	d8c00617 	ldw	r3,24(sp)
    7064:	18001b26 	beq	r3,zero,70d4 <_dtoa_r+0xf30>
    7068:	00810716 	blt	zero,r2,7488 <_dtoa_r+0x12e4>
    706c:	d8c00417 	ldw	r3,16(sp)
    7070:	9d800044 	addi	r22,r19,1
    7074:	9c800005 	stb	r18,0(r19)
    7078:	b02f883a 	mov	r23,r22
    707c:	98c10626 	beq	r19,r3,7498 <_dtoa_r+0x12f4>
    7080:	800b883a 	mov	r5,r16
    7084:	000f883a 	mov	r7,zero
    7088:	01800284 	movi	r6,10
    708c:	e009883a 	mov	r4,fp
    7090:	00091040 	call	9104 <__multadd>
    7094:	1021883a 	mov	r16,r2
    7098:	000f883a 	mov	r7,zero
    709c:	01800284 	movi	r6,10
    70a0:	880b883a 	mov	r5,r17
    70a4:	e009883a 	mov	r4,fp
    70a8:	8d002526 	beq	r17,r20,7140 <_dtoa_r+0xf9c>
    70ac:	00091040 	call	9104 <__multadd>
    70b0:	a00b883a 	mov	r5,r20
    70b4:	000f883a 	mov	r7,zero
    70b8:	01800284 	movi	r6,10
    70bc:	e009883a 	mov	r4,fp
    70c0:	1023883a 	mov	r17,r2
    70c4:	00091040 	call	9104 <__multadd>
    70c8:	1029883a 	mov	r20,r2
    70cc:	b027883a 	mov	r19,r22
    70d0:	003fc006 	br	6fd4 <__alt_data_end+0xff006fd4>
    70d4:	9011883a 	mov	r8,r18
    70d8:	00800e0e 	bge	zero,r2,7114 <_dtoa_r+0xf70>
    70dc:	800b883a 	mov	r5,r16
    70e0:	01800044 	movi	r6,1
    70e4:	e009883a 	mov	r4,fp
    70e8:	da001715 	stw	r8,92(sp)
    70ec:	00097b40 	call	97b4 <__lshift>
    70f0:	a80b883a 	mov	r5,r21
    70f4:	1009883a 	mov	r4,r2
    70f8:	1021883a 	mov	r16,r2
    70fc:	00098fc0 	call	98fc <__mcmp>
    7100:	da001717 	ldw	r8,92(sp)
    7104:	0081960e 	bge	zero,r2,7760 <_dtoa_r+0x15bc>
    7108:	00800e44 	movi	r2,57
    710c:	40817026 	beq	r8,r2,76d0 <_dtoa_r+0x152c>
    7110:	ba000c44 	addi	r8,r23,49
    7114:	8825883a 	mov	r18,r17
    7118:	9dc00044 	addi	r23,r19,1
    711c:	9a000005 	stb	r8,0(r19)
    7120:	a023883a 	mov	r17,r20
    7124:	dc000915 	stw	r16,36(sp)
    7128:	003f2406 	br	6dbc <__alt_data_end+0xff006dbc>
    712c:	00800e44 	movi	r2,57
    7130:	9011883a 	mov	r8,r18
    7134:	90816626 	beq	r18,r2,76d0 <_dtoa_r+0x152c>
    7138:	05bff516 	blt	zero,r22,7110 <__alt_data_end+0xff007110>
    713c:	003ff506 	br	7114 <__alt_data_end+0xff007114>
    7140:	00091040 	call	9104 <__multadd>
    7144:	1023883a 	mov	r17,r2
    7148:	1029883a 	mov	r20,r2
    714c:	003fdf06 	br	70cc <__alt_data_end+0xff0070cc>
    7150:	e009883a 	mov	r4,fp
    7154:	00090dc0 	call	90dc <_Bfree>
    7158:	00800044 	movi	r2,1
    715c:	003fbc06 	br	7050 <__alt_data_end+0xff007050>
    7160:	a80b883a 	mov	r5,r21
    7164:	8009883a 	mov	r4,r16
    7168:	00098fc0 	call	98fc <__mcmp>
    716c:	103edb0e 	bge	r2,zero,6cdc <__alt_data_end+0xff006cdc>
    7170:	800b883a 	mov	r5,r16
    7174:	000f883a 	mov	r7,zero
    7178:	01800284 	movi	r6,10
    717c:	e009883a 	mov	r4,fp
    7180:	00091040 	call	9104 <__multadd>
    7184:	1021883a 	mov	r16,r2
    7188:	d8800517 	ldw	r2,20(sp)
    718c:	d8c00b17 	ldw	r3,44(sp)
    7190:	10bfffc4 	addi	r2,r2,-1
    7194:	d8800515 	stw	r2,20(sp)
    7198:	183f761e 	bne	r3,zero,6f74 <__alt_data_end+0xff006f74>
    719c:	d9000c17 	ldw	r4,48(sp)
    71a0:	0101730e 	bge	zero,r4,7770 <_dtoa_r+0x15cc>
    71a4:	d9000615 	stw	r4,24(sp)
    71a8:	003ed006 	br	6cec <__alt_data_end+0xff006cec>
    71ac:	00800084 	movi	r2,2
    71b0:	3081861e 	bne	r6,r2,77cc <_dtoa_r+0x1628>
    71b4:	d8000b15 	stw	zero,44(sp)
    71b8:	003f3c06 	br	6eac <__alt_data_end+0xff006eac>
    71bc:	dc000917 	ldw	r16,36(sp)
    71c0:	003e9206 	br	6c0c <__alt_data_end+0xff006c0c>
    71c4:	d9c00317 	ldw	r7,12(sp)
    71c8:	00800084 	movi	r2,2
    71cc:	11fec50e 	bge	r2,r7,6ce4 <__alt_data_end+0xff006ce4>
    71d0:	d9000617 	ldw	r4,24(sp)
    71d4:	20013c1e 	bne	r4,zero,76c8 <_dtoa_r+0x1524>
    71d8:	a80b883a 	mov	r5,r21
    71dc:	000f883a 	mov	r7,zero
    71e0:	01800144 	movi	r6,5
    71e4:	e009883a 	mov	r4,fp
    71e8:	00091040 	call	9104 <__multadd>
    71ec:	100b883a 	mov	r5,r2
    71f0:	8009883a 	mov	r4,r16
    71f4:	102b883a 	mov	r21,r2
    71f8:	00098fc0 	call	98fc <__mcmp>
    71fc:	dc000915 	stw	r16,36(sp)
    7200:	00bf410e 	bge	zero,r2,6f08 <__alt_data_end+0xff006f08>
    7204:	d9c00717 	ldw	r7,28(sp)
    7208:	00800c44 	movi	r2,49
    720c:	38800005 	stb	r2,0(r7)
    7210:	d8800517 	ldw	r2,20(sp)
    7214:	3dc00044 	addi	r23,r7,1
    7218:	10800044 	addi	r2,r2,1
    721c:	d8800515 	stw	r2,20(sp)
    7220:	003f3d06 	br	6f18 <__alt_data_end+0xff006f18>
    7224:	d9800517 	ldw	r6,20(sp)
    7228:	d9c00717 	ldw	r7,28(sp)
    722c:	00800c44 	movi	r2,49
    7230:	31800044 	addi	r6,r6,1
    7234:	d9800515 	stw	r6,20(sp)
    7238:	38800005 	stb	r2,0(r7)
    723c:	003edf06 	br	6dbc <__alt_data_end+0xff006dbc>
    7240:	d8000b15 	stw	zero,44(sp)
    7244:	003c9f06 	br	64c4 <__alt_data_end+0xff0064c4>
    7248:	903e7e1e 	bne	r18,zero,6c44 <__alt_data_end+0xff006c44>
    724c:	00800434 	movhi	r2,16
    7250:	10bfffc4 	addi	r2,r2,-1
    7254:	9884703a 	and	r2,r19,r2
    7258:	1000ea1e 	bne	r2,zero,7604 <_dtoa_r+0x1460>
    725c:	9cdffc2c 	andhi	r19,r19,32752
    7260:	9800e826 	beq	r19,zero,7604 <_dtoa_r+0x1460>
    7264:	d9c00817 	ldw	r7,32(sp)
    7268:	b5800044 	addi	r22,r22,1
    726c:	04c00044 	movi	r19,1
    7270:	39c00044 	addi	r7,r7,1
    7274:	d9c00815 	stw	r7,32(sp)
    7278:	d8800d17 	ldw	r2,52(sp)
    727c:	103e721e 	bne	r2,zero,6c48 <__alt_data_end+0xff006c48>
    7280:	00800044 	movi	r2,1
    7284:	003e7906 	br	6c6c <__alt_data_end+0xff006c6c>
    7288:	8009883a 	mov	r4,r16
    728c:	000f6cc0 	call	f6cc <__floatsidf>
    7290:	d9800f17 	ldw	r6,60(sp)
    7294:	d9c01017 	ldw	r7,64(sp)
    7298:	1009883a 	mov	r4,r2
    729c:	180b883a 	mov	r5,r3
    72a0:	000e6380 	call	e638 <__muldf3>
    72a4:	000d883a 	mov	r6,zero
    72a8:	01d00734 	movhi	r7,16412
    72ac:	1009883a 	mov	r4,r2
    72b0:	180b883a 	mov	r5,r3
    72b4:	000d24c0 	call	d24c <__adddf3>
    72b8:	047f3034 	movhi	r17,64704
    72bc:	1021883a 	mov	r16,r2
    72c0:	1c63883a 	add	r17,r3,r17
    72c4:	d9000f17 	ldw	r4,60(sp)
    72c8:	d9401017 	ldw	r5,64(sp)
    72cc:	000d883a 	mov	r6,zero
    72d0:	01d00534 	movhi	r7,16404
    72d4:	000ed500 	call	ed50 <__subdf3>
    72d8:	800d883a 	mov	r6,r16
    72dc:	880f883a 	mov	r7,r17
    72e0:	1009883a 	mov	r4,r2
    72e4:	180b883a 	mov	r5,r3
    72e8:	102b883a 	mov	r21,r2
    72ec:	1829883a 	mov	r20,r3
    72f0:	000e4680 	call	e468 <__gedf2>
    72f4:	00806c16 	blt	zero,r2,74a8 <_dtoa_r+0x1304>
    72f8:	89e0003c 	xorhi	r7,r17,32768
    72fc:	800d883a 	mov	r6,r16
    7300:	a809883a 	mov	r4,r21
    7304:	a00b883a 	mov	r5,r20
    7308:	000e5440 	call	e544 <__ledf2>
    730c:	103d7e0e 	bge	r2,zero,6908 <__alt_data_end+0xff006908>
    7310:	002b883a 	mov	r21,zero
    7314:	0023883a 	mov	r17,zero
    7318:	003efb06 	br	6f08 <__alt_data_end+0xff006f08>
    731c:	d8800717 	ldw	r2,28(sp)
    7320:	003bd006 	br	6264 <__alt_data_end+0xff006264>
    7324:	d9000a17 	ldw	r4,40(sp)
    7328:	d9800d17 	ldw	r6,52(sp)
    732c:	dd400a15 	stw	r21,40(sp)
    7330:	a905c83a 	sub	r2,r21,r4
    7334:	308d883a 	add	r6,r6,r2
    7338:	d9800d15 	stw	r6,52(sp)
    733c:	002b883a 	mov	r21,zero
    7340:	003e0606 	br	6b5c <__alt_data_end+0xff006b5c>
    7344:	9023883a 	mov	r17,r18
    7348:	9829883a 	mov	r20,r19
    734c:	04000084 	movi	r16,2
    7350:	003c9206 	br	659c <__alt_data_end+0xff00659c>
    7354:	04000044 	movi	r16,1
    7358:	dc000c15 	stw	r16,48(sp)
    735c:	dc000615 	stw	r16,24(sp)
    7360:	dc002215 	stw	r16,136(sp)
    7364:	e0001115 	stw	zero,68(fp)
    7368:	000b883a 	mov	r5,zero
    736c:	003c6906 	br	6514 <__alt_data_end+0xff006514>
    7370:	3021883a 	mov	r16,r6
    7374:	003ffb06 	br	7364 <__alt_data_end+0xff007364>
    7378:	1000021e 	bne	r2,zero,7384 <_dtoa_r+0x11e0>
    737c:	4200004c 	andi	r8,r8,1
    7380:	403e7d1e 	bne	r8,zero,6d78 <__alt_data_end+0xff006d78>
    7384:	01000c04 	movi	r4,48
    7388:	00000106 	br	7390 <_dtoa_r+0x11ec>
    738c:	102f883a 	mov	r23,r2
    7390:	b8bfffc4 	addi	r2,r23,-1
    7394:	10c00007 	ldb	r3,0(r2)
    7398:	193ffc26 	beq	r3,r4,738c <__alt_data_end+0xff00738c>
    739c:	003e8706 	br	6dbc <__alt_data_end+0xff006dbc>
    73a0:	d8800517 	ldw	r2,20(sp)
    73a4:	00a3c83a 	sub	r17,zero,r2
    73a8:	8800a426 	beq	r17,zero,763c <_dtoa_r+0x1498>
    73ac:	888003cc 	andi	r2,r17,15
    73b0:	100490fa 	slli	r2,r2,3
    73b4:	00c00074 	movhi	r3,1
    73b8:	18ca2804 	addi	r3,r3,10400
    73bc:	1885883a 	add	r2,r3,r2
    73c0:	11800017 	ldw	r6,0(r2)
    73c4:	11c00117 	ldw	r7,4(r2)
    73c8:	9009883a 	mov	r4,r18
    73cc:	980b883a 	mov	r5,r19
    73d0:	8823d13a 	srai	r17,r17,4
    73d4:	000e6380 	call	e638 <__muldf3>
    73d8:	d8800f15 	stw	r2,60(sp)
    73dc:	d8c01015 	stw	r3,64(sp)
    73e0:	8800e826 	beq	r17,zero,7784 <_dtoa_r+0x15e0>
    73e4:	05000074 	movhi	r20,1
    73e8:	a50a1e04 	addi	r20,r20,10360
    73ec:	04000084 	movi	r16,2
    73f0:	8980004c 	andi	r6,r17,1
    73f4:	1009883a 	mov	r4,r2
    73f8:	8823d07a 	srai	r17,r17,1
    73fc:	180b883a 	mov	r5,r3
    7400:	30000426 	beq	r6,zero,7414 <_dtoa_r+0x1270>
    7404:	a1800017 	ldw	r6,0(r20)
    7408:	a1c00117 	ldw	r7,4(r20)
    740c:	84000044 	addi	r16,r16,1
    7410:	000e6380 	call	e638 <__muldf3>
    7414:	a5000204 	addi	r20,r20,8
    7418:	883ff51e 	bne	r17,zero,73f0 <__alt_data_end+0xff0073f0>
    741c:	d8800f15 	stw	r2,60(sp)
    7420:	d8c01015 	stw	r3,64(sp)
    7424:	003c7606 	br	6600 <__alt_data_end+0xff006600>
    7428:	00c00c04 	movi	r3,48
    742c:	10c00005 	stb	r3,0(r2)
    7430:	d8c00517 	ldw	r3,20(sp)
    7434:	bd3fffc3 	ldbu	r20,-1(r23)
    7438:	18c00044 	addi	r3,r3,1
    743c:	d8c00515 	stw	r3,20(sp)
    7440:	003db906 	br	6b28 <__alt_data_end+0xff006b28>
    7444:	89400117 	ldw	r5,4(r17)
    7448:	e009883a 	mov	r4,fp
    744c:	00090340 	call	9034 <_Balloc>
    7450:	89800417 	ldw	r6,16(r17)
    7454:	89400304 	addi	r5,r17,12
    7458:	11000304 	addi	r4,r2,12
    745c:	31800084 	addi	r6,r6,2
    7460:	318d883a 	add	r6,r6,r6
    7464:	318d883a 	add	r6,r6,r6
    7468:	1027883a 	mov	r19,r2
    746c:	0008c680 	call	8c68 <memcpy>
    7470:	01800044 	movi	r6,1
    7474:	980b883a 	mov	r5,r19
    7478:	e009883a 	mov	r4,fp
    747c:	00097b40 	call	97b4 <__lshift>
    7480:	1029883a 	mov	r20,r2
    7484:	003ecc06 	br	6fb8 <__alt_data_end+0xff006fb8>
    7488:	00800e44 	movi	r2,57
    748c:	90809026 	beq	r18,r2,76d0 <_dtoa_r+0x152c>
    7490:	92000044 	addi	r8,r18,1
    7494:	003f1f06 	br	7114 <__alt_data_end+0xff007114>
    7498:	9011883a 	mov	r8,r18
    749c:	8825883a 	mov	r18,r17
    74a0:	a023883a 	mov	r17,r20
    74a4:	003e2906 	br	6d4c <__alt_data_end+0xff006d4c>
    74a8:	002b883a 	mov	r21,zero
    74ac:	0023883a 	mov	r17,zero
    74b0:	003f5406 	br	7204 <__alt_data_end+0xff007204>
    74b4:	61bfffc4 	addi	r6,r12,-1
    74b8:	300490fa 	slli	r2,r6,3
    74bc:	00c00074 	movhi	r3,1
    74c0:	18ca2804 	addi	r3,r3,10400
    74c4:	1885883a 	add	r2,r3,r2
    74c8:	11000017 	ldw	r4,0(r2)
    74cc:	11400117 	ldw	r5,4(r2)
    74d0:	d8800717 	ldw	r2,28(sp)
    74d4:	880f883a 	mov	r7,r17
    74d8:	d9801215 	stw	r6,72(sp)
    74dc:	800d883a 	mov	r6,r16
    74e0:	db001615 	stw	r12,88(sp)
    74e4:	15c00044 	addi	r23,r2,1
    74e8:	000e6380 	call	e638 <__muldf3>
    74ec:	d9401017 	ldw	r5,64(sp)
    74f0:	d9000f17 	ldw	r4,60(sp)
    74f4:	d8c01515 	stw	r3,84(sp)
    74f8:	d8801415 	stw	r2,80(sp)
    74fc:	000f64c0 	call	f64c <__fixdfsi>
    7500:	1009883a 	mov	r4,r2
    7504:	1021883a 	mov	r16,r2
    7508:	000f6cc0 	call	f6cc <__floatsidf>
    750c:	d9000f17 	ldw	r4,60(sp)
    7510:	d9401017 	ldw	r5,64(sp)
    7514:	100d883a 	mov	r6,r2
    7518:	180f883a 	mov	r7,r3
    751c:	000ed500 	call	ed50 <__subdf3>
    7520:	1829883a 	mov	r20,r3
    7524:	d8c00717 	ldw	r3,28(sp)
    7528:	84000c04 	addi	r16,r16,48
    752c:	1023883a 	mov	r17,r2
    7530:	1c000005 	stb	r16,0(r3)
    7534:	db001617 	ldw	r12,88(sp)
    7538:	00800044 	movi	r2,1
    753c:	60802226 	beq	r12,r2,75c8 <_dtoa_r+0x1424>
    7540:	d9c00717 	ldw	r7,28(sp)
    7544:	8805883a 	mov	r2,r17
    7548:	b82b883a 	mov	r21,r23
    754c:	3b19883a 	add	r12,r7,r12
    7550:	6023883a 	mov	r17,r12
    7554:	a007883a 	mov	r3,r20
    7558:	dc800f15 	stw	r18,60(sp)
    755c:	000d883a 	mov	r6,zero
    7560:	01d00934 	movhi	r7,16420
    7564:	1009883a 	mov	r4,r2
    7568:	180b883a 	mov	r5,r3
    756c:	000e6380 	call	e638 <__muldf3>
    7570:	180b883a 	mov	r5,r3
    7574:	1009883a 	mov	r4,r2
    7578:	1829883a 	mov	r20,r3
    757c:	1025883a 	mov	r18,r2
    7580:	000f64c0 	call	f64c <__fixdfsi>
    7584:	1009883a 	mov	r4,r2
    7588:	1021883a 	mov	r16,r2
    758c:	000f6cc0 	call	f6cc <__floatsidf>
    7590:	100d883a 	mov	r6,r2
    7594:	180f883a 	mov	r7,r3
    7598:	9009883a 	mov	r4,r18
    759c:	a00b883a 	mov	r5,r20
    75a0:	84000c04 	addi	r16,r16,48
    75a4:	000ed500 	call	ed50 <__subdf3>
    75a8:	ad400044 	addi	r21,r21,1
    75ac:	ac3fffc5 	stb	r16,-1(r21)
    75b0:	ac7fea1e 	bne	r21,r17,755c <__alt_data_end+0xff00755c>
    75b4:	1023883a 	mov	r17,r2
    75b8:	d8801217 	ldw	r2,72(sp)
    75bc:	dc800f17 	ldw	r18,60(sp)
    75c0:	1829883a 	mov	r20,r3
    75c4:	b8af883a 	add	r23,r23,r2
    75c8:	d9001417 	ldw	r4,80(sp)
    75cc:	d9401517 	ldw	r5,84(sp)
    75d0:	000d883a 	mov	r6,zero
    75d4:	01cff834 	movhi	r7,16352
    75d8:	000d24c0 	call	d24c <__adddf3>
    75dc:	880d883a 	mov	r6,r17
    75e0:	a00f883a 	mov	r7,r20
    75e4:	1009883a 	mov	r4,r2
    75e8:	180b883a 	mov	r5,r3
    75ec:	000e5440 	call	e544 <__ledf2>
    75f0:	10003e0e 	bge	r2,zero,76ec <_dtoa_r+0x1548>
    75f4:	d9001317 	ldw	r4,76(sp)
    75f8:	bd3fffc3 	ldbu	r20,-1(r23)
    75fc:	d9000515 	stw	r4,20(sp)
    7600:	003d3b06 	br	6af0 <__alt_data_end+0xff006af0>
    7604:	0027883a 	mov	r19,zero
    7608:	003f1b06 	br	7278 <__alt_data_end+0xff007278>
    760c:	d8800817 	ldw	r2,32(sp)
    7610:	11e9c83a 	sub	r20,r2,r7
    7614:	0005883a 	mov	r2,zero
    7618:	003d5406 	br	6b6c <__alt_data_end+0xff006b6c>
    761c:	00800044 	movi	r2,1
    7620:	003dc706 	br	6d40 <__alt_data_end+0xff006d40>
    7624:	d8c00217 	ldw	r3,8(sp)
    7628:	00800d84 	movi	r2,54
    762c:	dd400a17 	ldw	r21,40(sp)
    7630:	10c5c83a 	sub	r2,r2,r3
    7634:	dd000817 	ldw	r20,32(sp)
    7638:	003d4c06 	br	6b6c <__alt_data_end+0xff006b6c>
    763c:	dc800f15 	stw	r18,60(sp)
    7640:	dcc01015 	stw	r19,64(sp)
    7644:	04000084 	movi	r16,2
    7648:	003bed06 	br	6600 <__alt_data_end+0xff006600>
    764c:	d9000617 	ldw	r4,24(sp)
    7650:	203f0d26 	beq	r4,zero,7288 <__alt_data_end+0xff007288>
    7654:	d9800c17 	ldw	r6,48(sp)
    7658:	01bcab0e 	bge	zero,r6,6908 <__alt_data_end+0xff006908>
    765c:	d9401017 	ldw	r5,64(sp)
    7660:	d9000f17 	ldw	r4,60(sp)
    7664:	000d883a 	mov	r6,zero
    7668:	01d00934 	movhi	r7,16420
    766c:	000e6380 	call	e638 <__muldf3>
    7670:	81000044 	addi	r4,r16,1
    7674:	d8800f15 	stw	r2,60(sp)
    7678:	d8c01015 	stw	r3,64(sp)
    767c:	000f6cc0 	call	f6cc <__floatsidf>
    7680:	d9800f17 	ldw	r6,60(sp)
    7684:	d9c01017 	ldw	r7,64(sp)
    7688:	1009883a 	mov	r4,r2
    768c:	180b883a 	mov	r5,r3
    7690:	000e6380 	call	e638 <__muldf3>
    7694:	01d00734 	movhi	r7,16412
    7698:	000d883a 	mov	r6,zero
    769c:	1009883a 	mov	r4,r2
    76a0:	180b883a 	mov	r5,r3
    76a4:	000d24c0 	call	d24c <__adddf3>
    76a8:	d9c00517 	ldw	r7,20(sp)
    76ac:	047f3034 	movhi	r17,64704
    76b0:	1021883a 	mov	r16,r2
    76b4:	39ffffc4 	addi	r7,r7,-1
    76b8:	d9c01315 	stw	r7,76(sp)
    76bc:	1c63883a 	add	r17,r3,r17
    76c0:	db000c17 	ldw	r12,48(sp)
    76c4:	003bea06 	br	6670 <__alt_data_end+0xff006670>
    76c8:	dc000915 	stw	r16,36(sp)
    76cc:	003e0e06 	br	6f08 <__alt_data_end+0xff006f08>
    76d0:	01000e44 	movi	r4,57
    76d4:	8825883a 	mov	r18,r17
    76d8:	9dc00044 	addi	r23,r19,1
    76dc:	99000005 	stb	r4,0(r19)
    76e0:	a023883a 	mov	r17,r20
    76e4:	dc000915 	stw	r16,36(sp)
    76e8:	003da406 	br	6d7c <__alt_data_end+0xff006d7c>
    76ec:	d9801417 	ldw	r6,80(sp)
    76f0:	d9c01517 	ldw	r7,84(sp)
    76f4:	0009883a 	mov	r4,zero
    76f8:	014ff834 	movhi	r5,16352
    76fc:	000ed500 	call	ed50 <__subdf3>
    7700:	880d883a 	mov	r6,r17
    7704:	a00f883a 	mov	r7,r20
    7708:	1009883a 	mov	r4,r2
    770c:	180b883a 	mov	r5,r3
    7710:	000e4680 	call	e468 <__gedf2>
    7714:	00bc7c0e 	bge	zero,r2,6908 <__alt_data_end+0xff006908>
    7718:	01000c04 	movi	r4,48
    771c:	00000106 	br	7724 <_dtoa_r+0x1580>
    7720:	102f883a 	mov	r23,r2
    7724:	b8bfffc4 	addi	r2,r23,-1
    7728:	10c00007 	ldb	r3,0(r2)
    772c:	193ffc26 	beq	r3,r4,7720 <__alt_data_end+0xff007720>
    7730:	d9801317 	ldw	r6,76(sp)
    7734:	d9800515 	stw	r6,20(sp)
    7738:	003c4406 	br	684c <__alt_data_end+0xff00684c>
    773c:	d9801317 	ldw	r6,76(sp)
    7740:	d9800515 	stw	r6,20(sp)
    7744:	003cea06 	br	6af0 <__alt_data_end+0xff006af0>
    7748:	dd800f17 	ldw	r22,60(sp)
    774c:	dcc01017 	ldw	r19,64(sp)
    7750:	dc801217 	ldw	r18,72(sp)
    7754:	003c6c06 	br	6908 <__alt_data_end+0xff006908>
    7758:	903e031e 	bne	r18,zero,6f68 <__alt_data_end+0xff006f68>
    775c:	003ebb06 	br	724c <__alt_data_end+0xff00724c>
    7760:	103e6c1e 	bne	r2,zero,7114 <__alt_data_end+0xff007114>
    7764:	4080004c 	andi	r2,r8,1
    7768:	103e6a26 	beq	r2,zero,7114 <__alt_data_end+0xff007114>
    776c:	003e6606 	br	7108 <__alt_data_end+0xff007108>
    7770:	d8c00317 	ldw	r3,12(sp)
    7774:	00800084 	movi	r2,2
    7778:	10c02916 	blt	r2,r3,7820 <_dtoa_r+0x167c>
    777c:	d9000c17 	ldw	r4,48(sp)
    7780:	003e8806 	br	71a4 <__alt_data_end+0xff0071a4>
    7784:	04000084 	movi	r16,2
    7788:	003b9d06 	br	6600 <__alt_data_end+0xff006600>
    778c:	d9001317 	ldw	r4,76(sp)
    7790:	d9000515 	stw	r4,20(sp)
    7794:	003cd606 	br	6af0 <__alt_data_end+0xff006af0>
    7798:	d8801317 	ldw	r2,76(sp)
    779c:	d8800515 	stw	r2,20(sp)
    77a0:	003c2a06 	br	684c <__alt_data_end+0xff00684c>
    77a4:	d9800317 	ldw	r6,12(sp)
    77a8:	00800084 	movi	r2,2
    77ac:	11801516 	blt	r2,r6,7804 <_dtoa_r+0x1660>
    77b0:	d9c00c17 	ldw	r7,48(sp)
    77b4:	d9c00615 	stw	r7,24(sp)
    77b8:	003df706 	br	6f98 <__alt_data_end+0xff006f98>
    77bc:	193d3926 	beq	r3,r4,6ca4 <__alt_data_end+0xff006ca4>
    77c0:	00c00f04 	movi	r3,60
    77c4:	1885c83a 	sub	r2,r3,r2
    77c8:	003ddf06 	br	6f48 <__alt_data_end+0xff006f48>
    77cc:	e009883a 	mov	r4,fp
    77d0:	e0001115 	stw	zero,68(fp)
    77d4:	000b883a 	mov	r5,zero
    77d8:	00090340 	call	9034 <_Balloc>
    77dc:	d8800715 	stw	r2,28(sp)
    77e0:	d8c00717 	ldw	r3,28(sp)
    77e4:	00bfffc4 	movi	r2,-1
    77e8:	01000044 	movi	r4,1
    77ec:	d8800c15 	stw	r2,48(sp)
    77f0:	e0c01015 	stw	r3,64(fp)
    77f4:	d9000b15 	stw	r4,44(sp)
    77f8:	d8800615 	stw	r2,24(sp)
    77fc:	d8002215 	stw	zero,136(sp)
    7800:	003c4106 	br	6908 <__alt_data_end+0xff006908>
    7804:	d8c00c17 	ldw	r3,48(sp)
    7808:	d8c00615 	stw	r3,24(sp)
    780c:	003e7006 	br	71d0 <__alt_data_end+0xff0071d0>
    7810:	04400044 	movi	r17,1
    7814:	003b2006 	br	6498 <__alt_data_end+0xff006498>
    7818:	000b883a 	mov	r5,zero
    781c:	003b3d06 	br	6514 <__alt_data_end+0xff006514>
    7820:	d8800c17 	ldw	r2,48(sp)
    7824:	d8800615 	stw	r2,24(sp)
    7828:	003e6906 	br	71d0 <__alt_data_end+0xff0071d0>

0000782c <__sflush_r>:
    782c:	2880030b 	ldhu	r2,12(r5)
    7830:	defffb04 	addi	sp,sp,-20
    7834:	dcc00315 	stw	r19,12(sp)
    7838:	dc400115 	stw	r17,4(sp)
    783c:	dfc00415 	stw	ra,16(sp)
    7840:	dc800215 	stw	r18,8(sp)
    7844:	dc000015 	stw	r16,0(sp)
    7848:	10c0020c 	andi	r3,r2,8
    784c:	2823883a 	mov	r17,r5
    7850:	2027883a 	mov	r19,r4
    7854:	1800311e 	bne	r3,zero,791c <__sflush_r+0xf0>
    7858:	28c00117 	ldw	r3,4(r5)
    785c:	10820014 	ori	r2,r2,2048
    7860:	2880030d 	sth	r2,12(r5)
    7864:	00c04b0e 	bge	zero,r3,7994 <__sflush_r+0x168>
    7868:	8a000a17 	ldw	r8,40(r17)
    786c:	40002326 	beq	r8,zero,78fc <__sflush_r+0xd0>
    7870:	9c000017 	ldw	r16,0(r19)
    7874:	10c4000c 	andi	r3,r2,4096
    7878:	98000015 	stw	zero,0(r19)
    787c:	18004826 	beq	r3,zero,79a0 <__sflush_r+0x174>
    7880:	89801417 	ldw	r6,80(r17)
    7884:	10c0010c 	andi	r3,r2,4
    7888:	18000626 	beq	r3,zero,78a4 <__sflush_r+0x78>
    788c:	88c00117 	ldw	r3,4(r17)
    7890:	88800c17 	ldw	r2,48(r17)
    7894:	30cdc83a 	sub	r6,r6,r3
    7898:	10000226 	beq	r2,zero,78a4 <__sflush_r+0x78>
    789c:	88800f17 	ldw	r2,60(r17)
    78a0:	308dc83a 	sub	r6,r6,r2
    78a4:	89400717 	ldw	r5,28(r17)
    78a8:	000f883a 	mov	r7,zero
    78ac:	9809883a 	mov	r4,r19
    78b0:	403ee83a 	callr	r8
    78b4:	00ffffc4 	movi	r3,-1
    78b8:	10c04426 	beq	r2,r3,79cc <__sflush_r+0x1a0>
    78bc:	88c0030b 	ldhu	r3,12(r17)
    78c0:	89000417 	ldw	r4,16(r17)
    78c4:	88000115 	stw	zero,4(r17)
    78c8:	197dffcc 	andi	r5,r3,63487
    78cc:	8940030d 	sth	r5,12(r17)
    78d0:	89000015 	stw	r4,0(r17)
    78d4:	18c4000c 	andi	r3,r3,4096
    78d8:	18002c1e 	bne	r3,zero,798c <__sflush_r+0x160>
    78dc:	89400c17 	ldw	r5,48(r17)
    78e0:	9c000015 	stw	r16,0(r19)
    78e4:	28000526 	beq	r5,zero,78fc <__sflush_r+0xd0>
    78e8:	88801004 	addi	r2,r17,64
    78ec:	28800226 	beq	r5,r2,78f8 <__sflush_r+0xcc>
    78f0:	9809883a 	mov	r4,r19
    78f4:	0007f980 	call	7f98 <_free_r>
    78f8:	88000c15 	stw	zero,48(r17)
    78fc:	0005883a 	mov	r2,zero
    7900:	dfc00417 	ldw	ra,16(sp)
    7904:	dcc00317 	ldw	r19,12(sp)
    7908:	dc800217 	ldw	r18,8(sp)
    790c:	dc400117 	ldw	r17,4(sp)
    7910:	dc000017 	ldw	r16,0(sp)
    7914:	dec00504 	addi	sp,sp,20
    7918:	f800283a 	ret
    791c:	2c800417 	ldw	r18,16(r5)
    7920:	903ff626 	beq	r18,zero,78fc <__alt_data_end+0xff0078fc>
    7924:	2c000017 	ldw	r16,0(r5)
    7928:	108000cc 	andi	r2,r2,3
    792c:	2c800015 	stw	r18,0(r5)
    7930:	84a1c83a 	sub	r16,r16,r18
    7934:	1000131e 	bne	r2,zero,7984 <__sflush_r+0x158>
    7938:	28800517 	ldw	r2,20(r5)
    793c:	88800215 	stw	r2,8(r17)
    7940:	04000316 	blt	zero,r16,7950 <__sflush_r+0x124>
    7944:	003fed06 	br	78fc <__alt_data_end+0xff0078fc>
    7948:	90a5883a 	add	r18,r18,r2
    794c:	043feb0e 	bge	zero,r16,78fc <__alt_data_end+0xff0078fc>
    7950:	88800917 	ldw	r2,36(r17)
    7954:	89400717 	ldw	r5,28(r17)
    7958:	800f883a 	mov	r7,r16
    795c:	900d883a 	mov	r6,r18
    7960:	9809883a 	mov	r4,r19
    7964:	103ee83a 	callr	r2
    7968:	80a1c83a 	sub	r16,r16,r2
    796c:	00bff616 	blt	zero,r2,7948 <__alt_data_end+0xff007948>
    7970:	88c0030b 	ldhu	r3,12(r17)
    7974:	00bfffc4 	movi	r2,-1
    7978:	18c01014 	ori	r3,r3,64
    797c:	88c0030d 	sth	r3,12(r17)
    7980:	003fdf06 	br	7900 <__alt_data_end+0xff007900>
    7984:	0005883a 	mov	r2,zero
    7988:	003fec06 	br	793c <__alt_data_end+0xff00793c>
    798c:	88801415 	stw	r2,80(r17)
    7990:	003fd206 	br	78dc <__alt_data_end+0xff0078dc>
    7994:	28c00f17 	ldw	r3,60(r5)
    7998:	00ffb316 	blt	zero,r3,7868 <__alt_data_end+0xff007868>
    799c:	003fd706 	br	78fc <__alt_data_end+0xff0078fc>
    79a0:	89400717 	ldw	r5,28(r17)
    79a4:	000d883a 	mov	r6,zero
    79a8:	01c00044 	movi	r7,1
    79ac:	9809883a 	mov	r4,r19
    79b0:	403ee83a 	callr	r8
    79b4:	100d883a 	mov	r6,r2
    79b8:	00bfffc4 	movi	r2,-1
    79bc:	30801426 	beq	r6,r2,7a10 <__sflush_r+0x1e4>
    79c0:	8880030b 	ldhu	r2,12(r17)
    79c4:	8a000a17 	ldw	r8,40(r17)
    79c8:	003fae06 	br	7884 <__alt_data_end+0xff007884>
    79cc:	98c00017 	ldw	r3,0(r19)
    79d0:	183fba26 	beq	r3,zero,78bc <__alt_data_end+0xff0078bc>
    79d4:	01000744 	movi	r4,29
    79d8:	19000626 	beq	r3,r4,79f4 <__sflush_r+0x1c8>
    79dc:	01000584 	movi	r4,22
    79e0:	19000426 	beq	r3,r4,79f4 <__sflush_r+0x1c8>
    79e4:	88c0030b 	ldhu	r3,12(r17)
    79e8:	18c01014 	ori	r3,r3,64
    79ec:	88c0030d 	sth	r3,12(r17)
    79f0:	003fc306 	br	7900 <__alt_data_end+0xff007900>
    79f4:	8880030b 	ldhu	r2,12(r17)
    79f8:	88c00417 	ldw	r3,16(r17)
    79fc:	88000115 	stw	zero,4(r17)
    7a00:	10bdffcc 	andi	r2,r2,63487
    7a04:	8880030d 	sth	r2,12(r17)
    7a08:	88c00015 	stw	r3,0(r17)
    7a0c:	003fb306 	br	78dc <__alt_data_end+0xff0078dc>
    7a10:	98800017 	ldw	r2,0(r19)
    7a14:	103fea26 	beq	r2,zero,79c0 <__alt_data_end+0xff0079c0>
    7a18:	00c00744 	movi	r3,29
    7a1c:	10c00226 	beq	r2,r3,7a28 <__sflush_r+0x1fc>
    7a20:	00c00584 	movi	r3,22
    7a24:	10c0031e 	bne	r2,r3,7a34 <__sflush_r+0x208>
    7a28:	9c000015 	stw	r16,0(r19)
    7a2c:	0005883a 	mov	r2,zero
    7a30:	003fb306 	br	7900 <__alt_data_end+0xff007900>
    7a34:	88c0030b 	ldhu	r3,12(r17)
    7a38:	3005883a 	mov	r2,r6
    7a3c:	18c01014 	ori	r3,r3,64
    7a40:	88c0030d 	sth	r3,12(r17)
    7a44:	003fae06 	br	7900 <__alt_data_end+0xff007900>

00007a48 <_fflush_r>:
    7a48:	defffd04 	addi	sp,sp,-12
    7a4c:	dc000115 	stw	r16,4(sp)
    7a50:	dfc00215 	stw	ra,8(sp)
    7a54:	2021883a 	mov	r16,r4
    7a58:	20000226 	beq	r4,zero,7a64 <_fflush_r+0x1c>
    7a5c:	20800e17 	ldw	r2,56(r4)
    7a60:	10000c26 	beq	r2,zero,7a94 <_fflush_r+0x4c>
    7a64:	2880030f 	ldh	r2,12(r5)
    7a68:	1000051e 	bne	r2,zero,7a80 <_fflush_r+0x38>
    7a6c:	0005883a 	mov	r2,zero
    7a70:	dfc00217 	ldw	ra,8(sp)
    7a74:	dc000117 	ldw	r16,4(sp)
    7a78:	dec00304 	addi	sp,sp,12
    7a7c:	f800283a 	ret
    7a80:	8009883a 	mov	r4,r16
    7a84:	dfc00217 	ldw	ra,8(sp)
    7a88:	dc000117 	ldw	r16,4(sp)
    7a8c:	dec00304 	addi	sp,sp,12
    7a90:	000782c1 	jmpi	782c <__sflush_r>
    7a94:	d9400015 	stw	r5,0(sp)
    7a98:	0007e240 	call	7e24 <__sinit>
    7a9c:	d9400017 	ldw	r5,0(sp)
    7aa0:	003ff006 	br	7a64 <__alt_data_end+0xff007a64>

00007aa4 <fflush>:
    7aa4:	20000526 	beq	r4,zero,7abc <fflush+0x18>
    7aa8:	00800074 	movhi	r2,1
    7aac:	10915b04 	addi	r2,r2,17772
    7ab0:	200b883a 	mov	r5,r4
    7ab4:	11000017 	ldw	r4,0(r2)
    7ab8:	0007a481 	jmpi	7a48 <_fflush_r>
    7abc:	00800074 	movhi	r2,1
    7ac0:	10915a04 	addi	r2,r2,17768
    7ac4:	11000017 	ldw	r4,0(r2)
    7ac8:	01400034 	movhi	r5,0
    7acc:	295e9204 	addi	r5,r5,31304
    7ad0:	00088281 	jmpi	8828 <_fwalk_reent>

00007ad4 <__fp_unlock>:
    7ad4:	0005883a 	mov	r2,zero
    7ad8:	f800283a 	ret

00007adc <_cleanup_r>:
    7adc:	01400074 	movhi	r5,1
    7ae0:	296ff804 	addi	r5,r5,-16416
    7ae4:	00088281 	jmpi	8828 <_fwalk_reent>

00007ae8 <__sinit.part.1>:
    7ae8:	defff704 	addi	sp,sp,-36
    7aec:	00c00034 	movhi	r3,0
    7af0:	dfc00815 	stw	ra,32(sp)
    7af4:	ddc00715 	stw	r23,28(sp)
    7af8:	dd800615 	stw	r22,24(sp)
    7afc:	dd400515 	stw	r21,20(sp)
    7b00:	dd000415 	stw	r20,16(sp)
    7b04:	dcc00315 	stw	r19,12(sp)
    7b08:	dc800215 	stw	r18,8(sp)
    7b0c:	dc400115 	stw	r17,4(sp)
    7b10:	dc000015 	stw	r16,0(sp)
    7b14:	18deb704 	addi	r3,r3,31452
    7b18:	24000117 	ldw	r16,4(r4)
    7b1c:	20c00f15 	stw	r3,60(r4)
    7b20:	2080bb04 	addi	r2,r4,748
    7b24:	00c000c4 	movi	r3,3
    7b28:	20c0b915 	stw	r3,740(r4)
    7b2c:	2080ba15 	stw	r2,744(r4)
    7b30:	2000b815 	stw	zero,736(r4)
    7b34:	05c00204 	movi	r23,8
    7b38:	00800104 	movi	r2,4
    7b3c:	2025883a 	mov	r18,r4
    7b40:	b80d883a 	mov	r6,r23
    7b44:	81001704 	addi	r4,r16,92
    7b48:	000b883a 	mov	r5,zero
    7b4c:	80000015 	stw	zero,0(r16)
    7b50:	80000115 	stw	zero,4(r16)
    7b54:	80000215 	stw	zero,8(r16)
    7b58:	8080030d 	sth	r2,12(r16)
    7b5c:	80001915 	stw	zero,100(r16)
    7b60:	8000038d 	sth	zero,14(r16)
    7b64:	80000415 	stw	zero,16(r16)
    7b68:	80000515 	stw	zero,20(r16)
    7b6c:	80000615 	stw	zero,24(r16)
    7b70:	0008f0c0 	call	8f0c <memset>
    7b74:	05800074 	movhi	r22,1
    7b78:	94400217 	ldw	r17,8(r18)
    7b7c:	05400074 	movhi	r21,1
    7b80:	05000074 	movhi	r20,1
    7b84:	04c00074 	movhi	r19,1
    7b88:	b5a98204 	addi	r22,r22,-23032
    7b8c:	ad699904 	addi	r21,r21,-22940
    7b90:	a529b804 	addi	r20,r20,-22816
    7b94:	9ce9cf04 	addi	r19,r19,-22724
    7b98:	85800815 	stw	r22,32(r16)
    7b9c:	85400915 	stw	r21,36(r16)
    7ba0:	85000a15 	stw	r20,40(r16)
    7ba4:	84c00b15 	stw	r19,44(r16)
    7ba8:	84000715 	stw	r16,28(r16)
    7bac:	00800284 	movi	r2,10
    7bb0:	8880030d 	sth	r2,12(r17)
    7bb4:	00800044 	movi	r2,1
    7bb8:	b80d883a 	mov	r6,r23
    7bbc:	89001704 	addi	r4,r17,92
    7bc0:	000b883a 	mov	r5,zero
    7bc4:	88000015 	stw	zero,0(r17)
    7bc8:	88000115 	stw	zero,4(r17)
    7bcc:	88000215 	stw	zero,8(r17)
    7bd0:	88001915 	stw	zero,100(r17)
    7bd4:	8880038d 	sth	r2,14(r17)
    7bd8:	88000415 	stw	zero,16(r17)
    7bdc:	88000515 	stw	zero,20(r17)
    7be0:	88000615 	stw	zero,24(r17)
    7be4:	0008f0c0 	call	8f0c <memset>
    7be8:	94000317 	ldw	r16,12(r18)
    7bec:	00800484 	movi	r2,18
    7bf0:	8c400715 	stw	r17,28(r17)
    7bf4:	8d800815 	stw	r22,32(r17)
    7bf8:	8d400915 	stw	r21,36(r17)
    7bfc:	8d000a15 	stw	r20,40(r17)
    7c00:	8cc00b15 	stw	r19,44(r17)
    7c04:	8080030d 	sth	r2,12(r16)
    7c08:	00800084 	movi	r2,2
    7c0c:	80000015 	stw	zero,0(r16)
    7c10:	80000115 	stw	zero,4(r16)
    7c14:	80000215 	stw	zero,8(r16)
    7c18:	80001915 	stw	zero,100(r16)
    7c1c:	8080038d 	sth	r2,14(r16)
    7c20:	80000415 	stw	zero,16(r16)
    7c24:	80000515 	stw	zero,20(r16)
    7c28:	80000615 	stw	zero,24(r16)
    7c2c:	b80d883a 	mov	r6,r23
    7c30:	000b883a 	mov	r5,zero
    7c34:	81001704 	addi	r4,r16,92
    7c38:	0008f0c0 	call	8f0c <memset>
    7c3c:	00800044 	movi	r2,1
    7c40:	84000715 	stw	r16,28(r16)
    7c44:	85800815 	stw	r22,32(r16)
    7c48:	85400915 	stw	r21,36(r16)
    7c4c:	85000a15 	stw	r20,40(r16)
    7c50:	84c00b15 	stw	r19,44(r16)
    7c54:	90800e15 	stw	r2,56(r18)
    7c58:	dfc00817 	ldw	ra,32(sp)
    7c5c:	ddc00717 	ldw	r23,28(sp)
    7c60:	dd800617 	ldw	r22,24(sp)
    7c64:	dd400517 	ldw	r21,20(sp)
    7c68:	dd000417 	ldw	r20,16(sp)
    7c6c:	dcc00317 	ldw	r19,12(sp)
    7c70:	dc800217 	ldw	r18,8(sp)
    7c74:	dc400117 	ldw	r17,4(sp)
    7c78:	dc000017 	ldw	r16,0(sp)
    7c7c:	dec00904 	addi	sp,sp,36
    7c80:	f800283a 	ret

00007c84 <__fp_lock>:
    7c84:	0005883a 	mov	r2,zero
    7c88:	f800283a 	ret

00007c8c <__sfmoreglue>:
    7c8c:	defffc04 	addi	sp,sp,-16
    7c90:	dc400115 	stw	r17,4(sp)
    7c94:	2c7fffc4 	addi	r17,r5,-1
    7c98:	8c401a24 	muli	r17,r17,104
    7c9c:	dc800215 	stw	r18,8(sp)
    7ca0:	2825883a 	mov	r18,r5
    7ca4:	89401d04 	addi	r5,r17,116
    7ca8:	dc000015 	stw	r16,0(sp)
    7cac:	dfc00315 	stw	ra,12(sp)
    7cb0:	00031480 	call	3148 <_malloc_r>
    7cb4:	1021883a 	mov	r16,r2
    7cb8:	10000726 	beq	r2,zero,7cd8 <__sfmoreglue+0x4c>
    7cbc:	11000304 	addi	r4,r2,12
    7cc0:	10000015 	stw	zero,0(r2)
    7cc4:	14800115 	stw	r18,4(r2)
    7cc8:	11000215 	stw	r4,8(r2)
    7ccc:	89801a04 	addi	r6,r17,104
    7cd0:	000b883a 	mov	r5,zero
    7cd4:	0008f0c0 	call	8f0c <memset>
    7cd8:	8005883a 	mov	r2,r16
    7cdc:	dfc00317 	ldw	ra,12(sp)
    7ce0:	dc800217 	ldw	r18,8(sp)
    7ce4:	dc400117 	ldw	r17,4(sp)
    7ce8:	dc000017 	ldw	r16,0(sp)
    7cec:	dec00404 	addi	sp,sp,16
    7cf0:	f800283a 	ret

00007cf4 <__sfp>:
    7cf4:	defffb04 	addi	sp,sp,-20
    7cf8:	dc000015 	stw	r16,0(sp)
    7cfc:	04000074 	movhi	r16,1
    7d00:	84115a04 	addi	r16,r16,17768
    7d04:	dcc00315 	stw	r19,12(sp)
    7d08:	2027883a 	mov	r19,r4
    7d0c:	81000017 	ldw	r4,0(r16)
    7d10:	dfc00415 	stw	ra,16(sp)
    7d14:	dc800215 	stw	r18,8(sp)
    7d18:	20800e17 	ldw	r2,56(r4)
    7d1c:	dc400115 	stw	r17,4(sp)
    7d20:	1000021e 	bne	r2,zero,7d2c <__sfp+0x38>
    7d24:	0007ae80 	call	7ae8 <__sinit.part.1>
    7d28:	81000017 	ldw	r4,0(r16)
    7d2c:	2480b804 	addi	r18,r4,736
    7d30:	047fffc4 	movi	r17,-1
    7d34:	91000117 	ldw	r4,4(r18)
    7d38:	94000217 	ldw	r16,8(r18)
    7d3c:	213fffc4 	addi	r4,r4,-1
    7d40:	20000a16 	blt	r4,zero,7d6c <__sfp+0x78>
    7d44:	8080030f 	ldh	r2,12(r16)
    7d48:	10000c26 	beq	r2,zero,7d7c <__sfp+0x88>
    7d4c:	80c01d04 	addi	r3,r16,116
    7d50:	00000206 	br	7d5c <__sfp+0x68>
    7d54:	18bfe60f 	ldh	r2,-104(r3)
    7d58:	10000826 	beq	r2,zero,7d7c <__sfp+0x88>
    7d5c:	213fffc4 	addi	r4,r4,-1
    7d60:	1c3ffd04 	addi	r16,r3,-12
    7d64:	18c01a04 	addi	r3,r3,104
    7d68:	247ffa1e 	bne	r4,r17,7d54 <__alt_data_end+0xff007d54>
    7d6c:	90800017 	ldw	r2,0(r18)
    7d70:	10001d26 	beq	r2,zero,7de8 <__sfp+0xf4>
    7d74:	1025883a 	mov	r18,r2
    7d78:	003fee06 	br	7d34 <__alt_data_end+0xff007d34>
    7d7c:	00bfffc4 	movi	r2,-1
    7d80:	8080038d 	sth	r2,14(r16)
    7d84:	00800044 	movi	r2,1
    7d88:	8080030d 	sth	r2,12(r16)
    7d8c:	80001915 	stw	zero,100(r16)
    7d90:	80000015 	stw	zero,0(r16)
    7d94:	80000215 	stw	zero,8(r16)
    7d98:	80000115 	stw	zero,4(r16)
    7d9c:	80000415 	stw	zero,16(r16)
    7da0:	80000515 	stw	zero,20(r16)
    7da4:	80000615 	stw	zero,24(r16)
    7da8:	01800204 	movi	r6,8
    7dac:	000b883a 	mov	r5,zero
    7db0:	81001704 	addi	r4,r16,92
    7db4:	0008f0c0 	call	8f0c <memset>
    7db8:	8005883a 	mov	r2,r16
    7dbc:	80000c15 	stw	zero,48(r16)
    7dc0:	80000d15 	stw	zero,52(r16)
    7dc4:	80001115 	stw	zero,68(r16)
    7dc8:	80001215 	stw	zero,72(r16)
    7dcc:	dfc00417 	ldw	ra,16(sp)
    7dd0:	dcc00317 	ldw	r19,12(sp)
    7dd4:	dc800217 	ldw	r18,8(sp)
    7dd8:	dc400117 	ldw	r17,4(sp)
    7ddc:	dc000017 	ldw	r16,0(sp)
    7de0:	dec00504 	addi	sp,sp,20
    7de4:	f800283a 	ret
    7de8:	01400104 	movi	r5,4
    7dec:	9809883a 	mov	r4,r19
    7df0:	0007c8c0 	call	7c8c <__sfmoreglue>
    7df4:	90800015 	stw	r2,0(r18)
    7df8:	103fde1e 	bne	r2,zero,7d74 <__alt_data_end+0xff007d74>
    7dfc:	00800304 	movi	r2,12
    7e00:	98800015 	stw	r2,0(r19)
    7e04:	0005883a 	mov	r2,zero
    7e08:	003ff006 	br	7dcc <__alt_data_end+0xff007dcc>

00007e0c <_cleanup>:
    7e0c:	00800074 	movhi	r2,1
    7e10:	10915a04 	addi	r2,r2,17768
    7e14:	11000017 	ldw	r4,0(r2)
    7e18:	01400074 	movhi	r5,1
    7e1c:	296ff804 	addi	r5,r5,-16416
    7e20:	00088281 	jmpi	8828 <_fwalk_reent>

00007e24 <__sinit>:
    7e24:	20800e17 	ldw	r2,56(r4)
    7e28:	10000126 	beq	r2,zero,7e30 <__sinit+0xc>
    7e2c:	f800283a 	ret
    7e30:	0007ae81 	jmpi	7ae8 <__sinit.part.1>

00007e34 <__sfp_lock_acquire>:
    7e34:	f800283a 	ret

00007e38 <__sfp_lock_release>:
    7e38:	f800283a 	ret

00007e3c <__sinit_lock_acquire>:
    7e3c:	f800283a 	ret

00007e40 <__sinit_lock_release>:
    7e40:	f800283a 	ret

00007e44 <__fp_lock_all>:
    7e44:	00800074 	movhi	r2,1
    7e48:	10915b04 	addi	r2,r2,17772
    7e4c:	11000017 	ldw	r4,0(r2)
    7e50:	01400034 	movhi	r5,0
    7e54:	295f2104 	addi	r5,r5,31876
    7e58:	00087641 	jmpi	8764 <_fwalk>

00007e5c <__fp_unlock_all>:
    7e5c:	00800074 	movhi	r2,1
    7e60:	10915b04 	addi	r2,r2,17772
    7e64:	11000017 	ldw	r4,0(r2)
    7e68:	01400034 	movhi	r5,0
    7e6c:	295eb504 	addi	r5,r5,31444
    7e70:	00087641 	jmpi	8764 <_fwalk>

00007e74 <_malloc_trim_r>:
    7e74:	defffb04 	addi	sp,sp,-20
    7e78:	dcc00315 	stw	r19,12(sp)
    7e7c:	04c00074 	movhi	r19,1
    7e80:	dc800215 	stw	r18,8(sp)
    7e84:	dc400115 	stw	r17,4(sp)
    7e88:	dc000015 	stw	r16,0(sp)
    7e8c:	dfc00415 	stw	ra,16(sp)
    7e90:	2821883a 	mov	r16,r5
    7e94:	9ccaad04 	addi	r19,r19,10932
    7e98:	2025883a 	mov	r18,r4
    7e9c:	000fe300 	call	fe30 <__malloc_lock>
    7ea0:	98800217 	ldw	r2,8(r19)
    7ea4:	14400117 	ldw	r17,4(r2)
    7ea8:	00bfff04 	movi	r2,-4
    7eac:	88a2703a 	and	r17,r17,r2
    7eb0:	8c21c83a 	sub	r16,r17,r16
    7eb4:	8403fbc4 	addi	r16,r16,4079
    7eb8:	8020d33a 	srli	r16,r16,12
    7ebc:	0083ffc4 	movi	r2,4095
    7ec0:	843fffc4 	addi	r16,r16,-1
    7ec4:	8020933a 	slli	r16,r16,12
    7ec8:	1400060e 	bge	r2,r16,7ee4 <_malloc_trim_r+0x70>
    7ecc:	000b883a 	mov	r5,zero
    7ed0:	9009883a 	mov	r4,r18
    7ed4:	0003a940 	call	3a94 <_sbrk_r>
    7ed8:	98c00217 	ldw	r3,8(r19)
    7edc:	1c47883a 	add	r3,r3,r17
    7ee0:	10c00a26 	beq	r2,r3,7f0c <_malloc_trim_r+0x98>
    7ee4:	9009883a 	mov	r4,r18
    7ee8:	000fe540 	call	fe54 <__malloc_unlock>
    7eec:	0005883a 	mov	r2,zero
    7ef0:	dfc00417 	ldw	ra,16(sp)
    7ef4:	dcc00317 	ldw	r19,12(sp)
    7ef8:	dc800217 	ldw	r18,8(sp)
    7efc:	dc400117 	ldw	r17,4(sp)
    7f00:	dc000017 	ldw	r16,0(sp)
    7f04:	dec00504 	addi	sp,sp,20
    7f08:	f800283a 	ret
    7f0c:	040bc83a 	sub	r5,zero,r16
    7f10:	9009883a 	mov	r4,r18
    7f14:	0003a940 	call	3a94 <_sbrk_r>
    7f18:	00ffffc4 	movi	r3,-1
    7f1c:	10c00d26 	beq	r2,r3,7f54 <_malloc_trim_r+0xe0>
    7f20:	00c00074 	movhi	r3,1
    7f24:	18d83d04 	addi	r3,r3,24820
    7f28:	18800017 	ldw	r2,0(r3)
    7f2c:	99000217 	ldw	r4,8(r19)
    7f30:	8c23c83a 	sub	r17,r17,r16
    7f34:	8c400054 	ori	r17,r17,1
    7f38:	1421c83a 	sub	r16,r2,r16
    7f3c:	24400115 	stw	r17,4(r4)
    7f40:	9009883a 	mov	r4,r18
    7f44:	1c000015 	stw	r16,0(r3)
    7f48:	000fe540 	call	fe54 <__malloc_unlock>
    7f4c:	00800044 	movi	r2,1
    7f50:	003fe706 	br	7ef0 <__alt_data_end+0xff007ef0>
    7f54:	000b883a 	mov	r5,zero
    7f58:	9009883a 	mov	r4,r18
    7f5c:	0003a940 	call	3a94 <_sbrk_r>
    7f60:	99000217 	ldw	r4,8(r19)
    7f64:	014003c4 	movi	r5,15
    7f68:	1107c83a 	sub	r3,r2,r4
    7f6c:	28ffdd0e 	bge	r5,r3,7ee4 <__alt_data_end+0xff007ee4>
    7f70:	01400074 	movhi	r5,1
    7f74:	29515804 	addi	r5,r5,17760
    7f78:	29400017 	ldw	r5,0(r5)
    7f7c:	18c00054 	ori	r3,r3,1
    7f80:	20c00115 	stw	r3,4(r4)
    7f84:	00c00074 	movhi	r3,1
    7f88:	1145c83a 	sub	r2,r2,r5
    7f8c:	18d83d04 	addi	r3,r3,24820
    7f90:	18800015 	stw	r2,0(r3)
    7f94:	003fd306 	br	7ee4 <__alt_data_end+0xff007ee4>

00007f98 <_free_r>:
    7f98:	28004126 	beq	r5,zero,80a0 <_free_r+0x108>
    7f9c:	defffd04 	addi	sp,sp,-12
    7fa0:	dc400115 	stw	r17,4(sp)
    7fa4:	dc000015 	stw	r16,0(sp)
    7fa8:	2023883a 	mov	r17,r4
    7fac:	2821883a 	mov	r16,r5
    7fb0:	dfc00215 	stw	ra,8(sp)
    7fb4:	000fe300 	call	fe30 <__malloc_lock>
    7fb8:	81ffff17 	ldw	r7,-4(r16)
    7fbc:	00bfff84 	movi	r2,-2
    7fc0:	01000074 	movhi	r4,1
    7fc4:	81bffe04 	addi	r6,r16,-8
    7fc8:	3884703a 	and	r2,r7,r2
    7fcc:	210aad04 	addi	r4,r4,10932
    7fd0:	308b883a 	add	r5,r6,r2
    7fd4:	2a400117 	ldw	r9,4(r5)
    7fd8:	22000217 	ldw	r8,8(r4)
    7fdc:	00ffff04 	movi	r3,-4
    7fe0:	48c6703a 	and	r3,r9,r3
    7fe4:	2a005726 	beq	r5,r8,8144 <_free_r+0x1ac>
    7fe8:	28c00115 	stw	r3,4(r5)
    7fec:	39c0004c 	andi	r7,r7,1
    7ff0:	3800091e 	bne	r7,zero,8018 <_free_r+0x80>
    7ff4:	823ffe17 	ldw	r8,-8(r16)
    7ff8:	22400204 	addi	r9,r4,8
    7ffc:	320dc83a 	sub	r6,r6,r8
    8000:	31c00217 	ldw	r7,8(r6)
    8004:	1205883a 	add	r2,r2,r8
    8008:	3a406526 	beq	r7,r9,81a0 <_free_r+0x208>
    800c:	32000317 	ldw	r8,12(r6)
    8010:	3a000315 	stw	r8,12(r7)
    8014:	41c00215 	stw	r7,8(r8)
    8018:	28cf883a 	add	r7,r5,r3
    801c:	39c00117 	ldw	r7,4(r7)
    8020:	39c0004c 	andi	r7,r7,1
    8024:	38003a26 	beq	r7,zero,8110 <_free_r+0x178>
    8028:	10c00054 	ori	r3,r2,1
    802c:	30c00115 	stw	r3,4(r6)
    8030:	3087883a 	add	r3,r6,r2
    8034:	18800015 	stw	r2,0(r3)
    8038:	00c07fc4 	movi	r3,511
    803c:	18801936 	bltu	r3,r2,80a4 <_free_r+0x10c>
    8040:	1004d0fa 	srli	r2,r2,3
    8044:	01c00044 	movi	r7,1
    8048:	21400117 	ldw	r5,4(r4)
    804c:	10c00044 	addi	r3,r2,1
    8050:	18c7883a 	add	r3,r3,r3
    8054:	1005d0ba 	srai	r2,r2,2
    8058:	18c7883a 	add	r3,r3,r3
    805c:	18c7883a 	add	r3,r3,r3
    8060:	1907883a 	add	r3,r3,r4
    8064:	3884983a 	sll	r2,r7,r2
    8068:	19c00017 	ldw	r7,0(r3)
    806c:	1a3ffe04 	addi	r8,r3,-8
    8070:	1144b03a 	or	r2,r2,r5
    8074:	32000315 	stw	r8,12(r6)
    8078:	31c00215 	stw	r7,8(r6)
    807c:	20800115 	stw	r2,4(r4)
    8080:	19800015 	stw	r6,0(r3)
    8084:	39800315 	stw	r6,12(r7)
    8088:	8809883a 	mov	r4,r17
    808c:	dfc00217 	ldw	ra,8(sp)
    8090:	dc400117 	ldw	r17,4(sp)
    8094:	dc000017 	ldw	r16,0(sp)
    8098:	dec00304 	addi	sp,sp,12
    809c:	000fe541 	jmpi	fe54 <__malloc_unlock>
    80a0:	f800283a 	ret
    80a4:	100ad27a 	srli	r5,r2,9
    80a8:	00c00104 	movi	r3,4
    80ac:	19404a36 	bltu	r3,r5,81d8 <_free_r+0x240>
    80b0:	100ad1ba 	srli	r5,r2,6
    80b4:	28c00e44 	addi	r3,r5,57
    80b8:	18c7883a 	add	r3,r3,r3
    80bc:	29400e04 	addi	r5,r5,56
    80c0:	18c7883a 	add	r3,r3,r3
    80c4:	18c7883a 	add	r3,r3,r3
    80c8:	1909883a 	add	r4,r3,r4
    80cc:	20c00017 	ldw	r3,0(r4)
    80d0:	01c00074 	movhi	r7,1
    80d4:	213ffe04 	addi	r4,r4,-8
    80d8:	39caad04 	addi	r7,r7,10932
    80dc:	20c04426 	beq	r4,r3,81f0 <_free_r+0x258>
    80e0:	01ffff04 	movi	r7,-4
    80e4:	19400117 	ldw	r5,4(r3)
    80e8:	29ca703a 	and	r5,r5,r7
    80ec:	1140022e 	bgeu	r2,r5,80f8 <_free_r+0x160>
    80f0:	18c00217 	ldw	r3,8(r3)
    80f4:	20fffb1e 	bne	r4,r3,80e4 <__alt_data_end+0xff0080e4>
    80f8:	19000317 	ldw	r4,12(r3)
    80fc:	31000315 	stw	r4,12(r6)
    8100:	30c00215 	stw	r3,8(r6)
    8104:	21800215 	stw	r6,8(r4)
    8108:	19800315 	stw	r6,12(r3)
    810c:	003fde06 	br	8088 <__alt_data_end+0xff008088>
    8110:	29c00217 	ldw	r7,8(r5)
    8114:	10c5883a 	add	r2,r2,r3
    8118:	00c00074 	movhi	r3,1
    811c:	18caaf04 	addi	r3,r3,10940
    8120:	38c03b26 	beq	r7,r3,8210 <_free_r+0x278>
    8124:	2a000317 	ldw	r8,12(r5)
    8128:	11400054 	ori	r5,r2,1
    812c:	3087883a 	add	r3,r6,r2
    8130:	3a000315 	stw	r8,12(r7)
    8134:	41c00215 	stw	r7,8(r8)
    8138:	31400115 	stw	r5,4(r6)
    813c:	18800015 	stw	r2,0(r3)
    8140:	003fbd06 	br	8038 <__alt_data_end+0xff008038>
    8144:	39c0004c 	andi	r7,r7,1
    8148:	10c5883a 	add	r2,r2,r3
    814c:	3800071e 	bne	r7,zero,816c <_free_r+0x1d4>
    8150:	81fffe17 	ldw	r7,-8(r16)
    8154:	31cdc83a 	sub	r6,r6,r7
    8158:	30c00317 	ldw	r3,12(r6)
    815c:	31400217 	ldw	r5,8(r6)
    8160:	11c5883a 	add	r2,r2,r7
    8164:	28c00315 	stw	r3,12(r5)
    8168:	19400215 	stw	r5,8(r3)
    816c:	10c00054 	ori	r3,r2,1
    8170:	30c00115 	stw	r3,4(r6)
    8174:	00c00074 	movhi	r3,1
    8178:	18d15904 	addi	r3,r3,17764
    817c:	18c00017 	ldw	r3,0(r3)
    8180:	21800215 	stw	r6,8(r4)
    8184:	10ffc036 	bltu	r2,r3,8088 <__alt_data_end+0xff008088>
    8188:	00800074 	movhi	r2,1
    818c:	10982f04 	addi	r2,r2,24764
    8190:	11400017 	ldw	r5,0(r2)
    8194:	8809883a 	mov	r4,r17
    8198:	0007e740 	call	7e74 <_malloc_trim_r>
    819c:	003fba06 	br	8088 <__alt_data_end+0xff008088>
    81a0:	28c9883a 	add	r4,r5,r3
    81a4:	21000117 	ldw	r4,4(r4)
    81a8:	2100004c 	andi	r4,r4,1
    81ac:	2000391e 	bne	r4,zero,8294 <_free_r+0x2fc>
    81b0:	29c00217 	ldw	r7,8(r5)
    81b4:	29000317 	ldw	r4,12(r5)
    81b8:	1885883a 	add	r2,r3,r2
    81bc:	10c00054 	ori	r3,r2,1
    81c0:	39000315 	stw	r4,12(r7)
    81c4:	21c00215 	stw	r7,8(r4)
    81c8:	30c00115 	stw	r3,4(r6)
    81cc:	308d883a 	add	r6,r6,r2
    81d0:	30800015 	stw	r2,0(r6)
    81d4:	003fac06 	br	8088 <__alt_data_end+0xff008088>
    81d8:	00c00504 	movi	r3,20
    81dc:	19401536 	bltu	r3,r5,8234 <_free_r+0x29c>
    81e0:	28c01704 	addi	r3,r5,92
    81e4:	18c7883a 	add	r3,r3,r3
    81e8:	294016c4 	addi	r5,r5,91
    81ec:	003fb406 	br	80c0 <__alt_data_end+0xff0080c0>
    81f0:	280bd0ba 	srai	r5,r5,2
    81f4:	00c00044 	movi	r3,1
    81f8:	38800117 	ldw	r2,4(r7)
    81fc:	194a983a 	sll	r5,r3,r5
    8200:	2007883a 	mov	r3,r4
    8204:	2884b03a 	or	r2,r5,r2
    8208:	38800115 	stw	r2,4(r7)
    820c:	003fbb06 	br	80fc <__alt_data_end+0xff0080fc>
    8210:	21800515 	stw	r6,20(r4)
    8214:	21800415 	stw	r6,16(r4)
    8218:	10c00054 	ori	r3,r2,1
    821c:	31c00315 	stw	r7,12(r6)
    8220:	31c00215 	stw	r7,8(r6)
    8224:	30c00115 	stw	r3,4(r6)
    8228:	308d883a 	add	r6,r6,r2
    822c:	30800015 	stw	r2,0(r6)
    8230:	003f9506 	br	8088 <__alt_data_end+0xff008088>
    8234:	00c01504 	movi	r3,84
    8238:	19400536 	bltu	r3,r5,8250 <_free_r+0x2b8>
    823c:	100ad33a 	srli	r5,r2,12
    8240:	28c01bc4 	addi	r3,r5,111
    8244:	18c7883a 	add	r3,r3,r3
    8248:	29401b84 	addi	r5,r5,110
    824c:	003f9c06 	br	80c0 <__alt_data_end+0xff0080c0>
    8250:	00c05504 	movi	r3,340
    8254:	19400536 	bltu	r3,r5,826c <_free_r+0x2d4>
    8258:	100ad3fa 	srli	r5,r2,15
    825c:	28c01e04 	addi	r3,r5,120
    8260:	18c7883a 	add	r3,r3,r3
    8264:	29401dc4 	addi	r5,r5,119
    8268:	003f9506 	br	80c0 <__alt_data_end+0xff0080c0>
    826c:	00c15504 	movi	r3,1364
    8270:	19400536 	bltu	r3,r5,8288 <_free_r+0x2f0>
    8274:	100ad4ba 	srli	r5,r2,18
    8278:	28c01f44 	addi	r3,r5,125
    827c:	18c7883a 	add	r3,r3,r3
    8280:	29401f04 	addi	r5,r5,124
    8284:	003f8e06 	br	80c0 <__alt_data_end+0xff0080c0>
    8288:	00c03f84 	movi	r3,254
    828c:	01401f84 	movi	r5,126
    8290:	003f8b06 	br	80c0 <__alt_data_end+0xff0080c0>
    8294:	10c00054 	ori	r3,r2,1
    8298:	30c00115 	stw	r3,4(r6)
    829c:	308d883a 	add	r6,r6,r2
    82a0:	30800015 	stw	r2,0(r6)
    82a4:	003f7806 	br	8088 <__alt_data_end+0xff008088>

000082a8 <__sfvwrite_r>:
    82a8:	30800217 	ldw	r2,8(r6)
    82ac:	10006726 	beq	r2,zero,844c <__sfvwrite_r+0x1a4>
    82b0:	28c0030b 	ldhu	r3,12(r5)
    82b4:	defff404 	addi	sp,sp,-48
    82b8:	dd400715 	stw	r21,28(sp)
    82bc:	dd000615 	stw	r20,24(sp)
    82c0:	dc000215 	stw	r16,8(sp)
    82c4:	dfc00b15 	stw	ra,44(sp)
    82c8:	df000a15 	stw	fp,40(sp)
    82cc:	ddc00915 	stw	r23,36(sp)
    82d0:	dd800815 	stw	r22,32(sp)
    82d4:	dcc00515 	stw	r19,20(sp)
    82d8:	dc800415 	stw	r18,16(sp)
    82dc:	dc400315 	stw	r17,12(sp)
    82e0:	1880020c 	andi	r2,r3,8
    82e4:	2821883a 	mov	r16,r5
    82e8:	202b883a 	mov	r21,r4
    82ec:	3029883a 	mov	r20,r6
    82f0:	10002726 	beq	r2,zero,8390 <__sfvwrite_r+0xe8>
    82f4:	28800417 	ldw	r2,16(r5)
    82f8:	10002526 	beq	r2,zero,8390 <__sfvwrite_r+0xe8>
    82fc:	1880008c 	andi	r2,r3,2
    8300:	a4400017 	ldw	r17,0(r20)
    8304:	10002a26 	beq	r2,zero,83b0 <__sfvwrite_r+0x108>
    8308:	05a00034 	movhi	r22,32768
    830c:	0027883a 	mov	r19,zero
    8310:	0025883a 	mov	r18,zero
    8314:	b5bf0004 	addi	r22,r22,-1024
    8318:	980d883a 	mov	r6,r19
    831c:	a809883a 	mov	r4,r21
    8320:	90004626 	beq	r18,zero,843c <__sfvwrite_r+0x194>
    8324:	900f883a 	mov	r7,r18
    8328:	b480022e 	bgeu	r22,r18,8334 <__sfvwrite_r+0x8c>
    832c:	01e00034 	movhi	r7,32768
    8330:	39ff0004 	addi	r7,r7,-1024
    8334:	80800917 	ldw	r2,36(r16)
    8338:	81400717 	ldw	r5,28(r16)
    833c:	103ee83a 	callr	r2
    8340:	0080570e 	bge	zero,r2,84a0 <__sfvwrite_r+0x1f8>
    8344:	a0c00217 	ldw	r3,8(r20)
    8348:	98a7883a 	add	r19,r19,r2
    834c:	90a5c83a 	sub	r18,r18,r2
    8350:	1885c83a 	sub	r2,r3,r2
    8354:	a0800215 	stw	r2,8(r20)
    8358:	103fef1e 	bne	r2,zero,8318 <__alt_data_end+0xff008318>
    835c:	0005883a 	mov	r2,zero
    8360:	dfc00b17 	ldw	ra,44(sp)
    8364:	df000a17 	ldw	fp,40(sp)
    8368:	ddc00917 	ldw	r23,36(sp)
    836c:	dd800817 	ldw	r22,32(sp)
    8370:	dd400717 	ldw	r21,28(sp)
    8374:	dd000617 	ldw	r20,24(sp)
    8378:	dcc00517 	ldw	r19,20(sp)
    837c:	dc800417 	ldw	r18,16(sp)
    8380:	dc400317 	ldw	r17,12(sp)
    8384:	dc000217 	ldw	r16,8(sp)
    8388:	dec00c04 	addi	sp,sp,48
    838c:	f800283a 	ret
    8390:	800b883a 	mov	r5,r16
    8394:	a809883a 	mov	r4,r21
    8398:	0005e500 	call	5e50 <__swsetup_r>
    839c:	1000eb1e 	bne	r2,zero,874c <__sfvwrite_r+0x4a4>
    83a0:	80c0030b 	ldhu	r3,12(r16)
    83a4:	a4400017 	ldw	r17,0(r20)
    83a8:	1880008c 	andi	r2,r3,2
    83ac:	103fd61e 	bne	r2,zero,8308 <__alt_data_end+0xff008308>
    83b0:	1880004c 	andi	r2,r3,1
    83b4:	10003f1e 	bne	r2,zero,84b4 <__sfvwrite_r+0x20c>
    83b8:	0039883a 	mov	fp,zero
    83bc:	0025883a 	mov	r18,zero
    83c0:	90001a26 	beq	r18,zero,842c <__sfvwrite_r+0x184>
    83c4:	1880800c 	andi	r2,r3,512
    83c8:	84c00217 	ldw	r19,8(r16)
    83cc:	10002126 	beq	r2,zero,8454 <__sfvwrite_r+0x1ac>
    83d0:	982f883a 	mov	r23,r19
    83d4:	94c09336 	bltu	r18,r19,8624 <__sfvwrite_r+0x37c>
    83d8:	1881200c 	andi	r2,r3,1152
    83dc:	10009e1e 	bne	r2,zero,8658 <__sfvwrite_r+0x3b0>
    83e0:	81000017 	ldw	r4,0(r16)
    83e4:	b80d883a 	mov	r6,r23
    83e8:	e00b883a 	mov	r5,fp
    83ec:	0008db00 	call	8db0 <memmove>
    83f0:	80c00217 	ldw	r3,8(r16)
    83f4:	81000017 	ldw	r4,0(r16)
    83f8:	9005883a 	mov	r2,r18
    83fc:	1ce7c83a 	sub	r19,r3,r19
    8400:	25cf883a 	add	r7,r4,r23
    8404:	84c00215 	stw	r19,8(r16)
    8408:	81c00015 	stw	r7,0(r16)
    840c:	a0c00217 	ldw	r3,8(r20)
    8410:	e0b9883a 	add	fp,fp,r2
    8414:	90a5c83a 	sub	r18,r18,r2
    8418:	18a7c83a 	sub	r19,r3,r2
    841c:	a4c00215 	stw	r19,8(r20)
    8420:	983fce26 	beq	r19,zero,835c <__alt_data_end+0xff00835c>
    8424:	80c0030b 	ldhu	r3,12(r16)
    8428:	903fe61e 	bne	r18,zero,83c4 <__alt_data_end+0xff0083c4>
    842c:	8f000017 	ldw	fp,0(r17)
    8430:	8c800117 	ldw	r18,4(r17)
    8434:	8c400204 	addi	r17,r17,8
    8438:	003fe106 	br	83c0 <__alt_data_end+0xff0083c0>
    843c:	8cc00017 	ldw	r19,0(r17)
    8440:	8c800117 	ldw	r18,4(r17)
    8444:	8c400204 	addi	r17,r17,8
    8448:	003fb306 	br	8318 <__alt_data_end+0xff008318>
    844c:	0005883a 	mov	r2,zero
    8450:	f800283a 	ret
    8454:	81000017 	ldw	r4,0(r16)
    8458:	80800417 	ldw	r2,16(r16)
    845c:	11005736 	bltu	r2,r4,85bc <__sfvwrite_r+0x314>
    8460:	85c00517 	ldw	r23,20(r16)
    8464:	95c05536 	bltu	r18,r23,85bc <__sfvwrite_r+0x314>
    8468:	00a00034 	movhi	r2,32768
    846c:	10bfffc4 	addi	r2,r2,-1
    8470:	9009883a 	mov	r4,r18
    8474:	1480012e 	bgeu	r2,r18,847c <__sfvwrite_r+0x1d4>
    8478:	1009883a 	mov	r4,r2
    847c:	b80b883a 	mov	r5,r23
    8480:	0002f6c0 	call	2f6c <__divsi3>
    8484:	15cf383a 	mul	r7,r2,r23
    8488:	81400717 	ldw	r5,28(r16)
    848c:	80800917 	ldw	r2,36(r16)
    8490:	e00d883a 	mov	r6,fp
    8494:	a809883a 	mov	r4,r21
    8498:	103ee83a 	callr	r2
    849c:	00bfdb16 	blt	zero,r2,840c <__alt_data_end+0xff00840c>
    84a0:	8080030b 	ldhu	r2,12(r16)
    84a4:	10801014 	ori	r2,r2,64
    84a8:	8080030d 	sth	r2,12(r16)
    84ac:	00bfffc4 	movi	r2,-1
    84b0:	003fab06 	br	8360 <__alt_data_end+0xff008360>
    84b4:	0027883a 	mov	r19,zero
    84b8:	0011883a 	mov	r8,zero
    84bc:	0039883a 	mov	fp,zero
    84c0:	0025883a 	mov	r18,zero
    84c4:	90001f26 	beq	r18,zero,8544 <__sfvwrite_r+0x29c>
    84c8:	40005a26 	beq	r8,zero,8634 <__sfvwrite_r+0x38c>
    84cc:	982d883a 	mov	r22,r19
    84d0:	94c0012e 	bgeu	r18,r19,84d8 <__sfvwrite_r+0x230>
    84d4:	902d883a 	mov	r22,r18
    84d8:	81000017 	ldw	r4,0(r16)
    84dc:	80800417 	ldw	r2,16(r16)
    84e0:	b02f883a 	mov	r23,r22
    84e4:	81c00517 	ldw	r7,20(r16)
    84e8:	1100032e 	bgeu	r2,r4,84f8 <__sfvwrite_r+0x250>
    84ec:	80c00217 	ldw	r3,8(r16)
    84f0:	38c7883a 	add	r3,r7,r3
    84f4:	1d801816 	blt	r3,r22,8558 <__sfvwrite_r+0x2b0>
    84f8:	b1c03e16 	blt	r22,r7,85f4 <__sfvwrite_r+0x34c>
    84fc:	80800917 	ldw	r2,36(r16)
    8500:	81400717 	ldw	r5,28(r16)
    8504:	e00d883a 	mov	r6,fp
    8508:	da000115 	stw	r8,4(sp)
    850c:	a809883a 	mov	r4,r21
    8510:	103ee83a 	callr	r2
    8514:	102f883a 	mov	r23,r2
    8518:	da000117 	ldw	r8,4(sp)
    851c:	00bfe00e 	bge	zero,r2,84a0 <__alt_data_end+0xff0084a0>
    8520:	9de7c83a 	sub	r19,r19,r23
    8524:	98001f26 	beq	r19,zero,85a4 <__sfvwrite_r+0x2fc>
    8528:	a0800217 	ldw	r2,8(r20)
    852c:	e5f9883a 	add	fp,fp,r23
    8530:	95e5c83a 	sub	r18,r18,r23
    8534:	15efc83a 	sub	r23,r2,r23
    8538:	a5c00215 	stw	r23,8(r20)
    853c:	b83f8726 	beq	r23,zero,835c <__alt_data_end+0xff00835c>
    8540:	903fe11e 	bne	r18,zero,84c8 <__alt_data_end+0xff0084c8>
    8544:	8f000017 	ldw	fp,0(r17)
    8548:	8c800117 	ldw	r18,4(r17)
    854c:	0011883a 	mov	r8,zero
    8550:	8c400204 	addi	r17,r17,8
    8554:	003fdb06 	br	84c4 <__alt_data_end+0xff0084c4>
    8558:	180d883a 	mov	r6,r3
    855c:	e00b883a 	mov	r5,fp
    8560:	da000115 	stw	r8,4(sp)
    8564:	d8c00015 	stw	r3,0(sp)
    8568:	0008db00 	call	8db0 <memmove>
    856c:	d8c00017 	ldw	r3,0(sp)
    8570:	80800017 	ldw	r2,0(r16)
    8574:	800b883a 	mov	r5,r16
    8578:	a809883a 	mov	r4,r21
    857c:	10c5883a 	add	r2,r2,r3
    8580:	80800015 	stw	r2,0(r16)
    8584:	d8c00015 	stw	r3,0(sp)
    8588:	0007a480 	call	7a48 <_fflush_r>
    858c:	d8c00017 	ldw	r3,0(sp)
    8590:	da000117 	ldw	r8,4(sp)
    8594:	103fc21e 	bne	r2,zero,84a0 <__alt_data_end+0xff0084a0>
    8598:	182f883a 	mov	r23,r3
    859c:	9de7c83a 	sub	r19,r19,r23
    85a0:	983fe11e 	bne	r19,zero,8528 <__alt_data_end+0xff008528>
    85a4:	800b883a 	mov	r5,r16
    85a8:	a809883a 	mov	r4,r21
    85ac:	0007a480 	call	7a48 <_fflush_r>
    85b0:	103fbb1e 	bne	r2,zero,84a0 <__alt_data_end+0xff0084a0>
    85b4:	0011883a 	mov	r8,zero
    85b8:	003fdb06 	br	8528 <__alt_data_end+0xff008528>
    85bc:	94c0012e 	bgeu	r18,r19,85c4 <__sfvwrite_r+0x31c>
    85c0:	9027883a 	mov	r19,r18
    85c4:	980d883a 	mov	r6,r19
    85c8:	e00b883a 	mov	r5,fp
    85cc:	0008db00 	call	8db0 <memmove>
    85d0:	80800217 	ldw	r2,8(r16)
    85d4:	80c00017 	ldw	r3,0(r16)
    85d8:	14c5c83a 	sub	r2,r2,r19
    85dc:	1cc7883a 	add	r3,r3,r19
    85e0:	80800215 	stw	r2,8(r16)
    85e4:	80c00015 	stw	r3,0(r16)
    85e8:	10004326 	beq	r2,zero,86f8 <__sfvwrite_r+0x450>
    85ec:	9805883a 	mov	r2,r19
    85f0:	003f8606 	br	840c <__alt_data_end+0xff00840c>
    85f4:	b00d883a 	mov	r6,r22
    85f8:	e00b883a 	mov	r5,fp
    85fc:	da000115 	stw	r8,4(sp)
    8600:	0008db00 	call	8db0 <memmove>
    8604:	80800217 	ldw	r2,8(r16)
    8608:	80c00017 	ldw	r3,0(r16)
    860c:	da000117 	ldw	r8,4(sp)
    8610:	1585c83a 	sub	r2,r2,r22
    8614:	1dad883a 	add	r22,r3,r22
    8618:	80800215 	stw	r2,8(r16)
    861c:	85800015 	stw	r22,0(r16)
    8620:	003fbf06 	br	8520 <__alt_data_end+0xff008520>
    8624:	81000017 	ldw	r4,0(r16)
    8628:	9027883a 	mov	r19,r18
    862c:	902f883a 	mov	r23,r18
    8630:	003f6c06 	br	83e4 <__alt_data_end+0xff0083e4>
    8634:	900d883a 	mov	r6,r18
    8638:	01400284 	movi	r5,10
    863c:	e009883a 	mov	r4,fp
    8640:	0008b840 	call	8b84 <memchr>
    8644:	10003e26 	beq	r2,zero,8740 <__sfvwrite_r+0x498>
    8648:	10800044 	addi	r2,r2,1
    864c:	1727c83a 	sub	r19,r2,fp
    8650:	02000044 	movi	r8,1
    8654:	003f9d06 	br	84cc <__alt_data_end+0xff0084cc>
    8658:	80800517 	ldw	r2,20(r16)
    865c:	81400417 	ldw	r5,16(r16)
    8660:	81c00017 	ldw	r7,0(r16)
    8664:	10a7883a 	add	r19,r2,r2
    8668:	9885883a 	add	r2,r19,r2
    866c:	1026d7fa 	srli	r19,r2,31
    8670:	396dc83a 	sub	r22,r7,r5
    8674:	b1000044 	addi	r4,r22,1
    8678:	9885883a 	add	r2,r19,r2
    867c:	1027d07a 	srai	r19,r2,1
    8680:	2485883a 	add	r2,r4,r18
    8684:	980d883a 	mov	r6,r19
    8688:	9880022e 	bgeu	r19,r2,8694 <__sfvwrite_r+0x3ec>
    868c:	1027883a 	mov	r19,r2
    8690:	100d883a 	mov	r6,r2
    8694:	18c1000c 	andi	r3,r3,1024
    8698:	18001c26 	beq	r3,zero,870c <__sfvwrite_r+0x464>
    869c:	300b883a 	mov	r5,r6
    86a0:	a809883a 	mov	r4,r21
    86a4:	00031480 	call	3148 <_malloc_r>
    86a8:	102f883a 	mov	r23,r2
    86ac:	10002926 	beq	r2,zero,8754 <__sfvwrite_r+0x4ac>
    86b0:	81400417 	ldw	r5,16(r16)
    86b4:	b00d883a 	mov	r6,r22
    86b8:	1009883a 	mov	r4,r2
    86bc:	0008c680 	call	8c68 <memcpy>
    86c0:	8080030b 	ldhu	r2,12(r16)
    86c4:	00fedfc4 	movi	r3,-1153
    86c8:	10c4703a 	and	r2,r2,r3
    86cc:	10802014 	ori	r2,r2,128
    86d0:	8080030d 	sth	r2,12(r16)
    86d4:	bd89883a 	add	r4,r23,r22
    86d8:	9d8fc83a 	sub	r7,r19,r22
    86dc:	85c00415 	stw	r23,16(r16)
    86e0:	84c00515 	stw	r19,20(r16)
    86e4:	81000015 	stw	r4,0(r16)
    86e8:	9027883a 	mov	r19,r18
    86ec:	81c00215 	stw	r7,8(r16)
    86f0:	902f883a 	mov	r23,r18
    86f4:	003f3b06 	br	83e4 <__alt_data_end+0xff0083e4>
    86f8:	800b883a 	mov	r5,r16
    86fc:	a809883a 	mov	r4,r21
    8700:	0007a480 	call	7a48 <_fflush_r>
    8704:	103fb926 	beq	r2,zero,85ec <__alt_data_end+0xff0085ec>
    8708:	003f6506 	br	84a0 <__alt_data_end+0xff0084a0>
    870c:	a809883a 	mov	r4,r21
    8710:	000a0300 	call	a030 <_realloc_r>
    8714:	102f883a 	mov	r23,r2
    8718:	103fee1e 	bne	r2,zero,86d4 <__alt_data_end+0xff0086d4>
    871c:	81400417 	ldw	r5,16(r16)
    8720:	a809883a 	mov	r4,r21
    8724:	0007f980 	call	7f98 <_free_r>
    8728:	8080030b 	ldhu	r2,12(r16)
    872c:	00ffdfc4 	movi	r3,-129
    8730:	1884703a 	and	r2,r3,r2
    8734:	00c00304 	movi	r3,12
    8738:	a8c00015 	stw	r3,0(r21)
    873c:	003f5906 	br	84a4 <__alt_data_end+0xff0084a4>
    8740:	94c00044 	addi	r19,r18,1
    8744:	02000044 	movi	r8,1
    8748:	003f6006 	br	84cc <__alt_data_end+0xff0084cc>
    874c:	00bfffc4 	movi	r2,-1
    8750:	003f0306 	br	8360 <__alt_data_end+0xff008360>
    8754:	00800304 	movi	r2,12
    8758:	a8800015 	stw	r2,0(r21)
    875c:	8080030b 	ldhu	r2,12(r16)
    8760:	003f5006 	br	84a4 <__alt_data_end+0xff0084a4>

00008764 <_fwalk>:
    8764:	defff704 	addi	sp,sp,-36
    8768:	dd000415 	stw	r20,16(sp)
    876c:	dfc00815 	stw	ra,32(sp)
    8770:	ddc00715 	stw	r23,28(sp)
    8774:	dd800615 	stw	r22,24(sp)
    8778:	dd400515 	stw	r21,20(sp)
    877c:	dcc00315 	stw	r19,12(sp)
    8780:	dc800215 	stw	r18,8(sp)
    8784:	dc400115 	stw	r17,4(sp)
    8788:	dc000015 	stw	r16,0(sp)
    878c:	2500b804 	addi	r20,r4,736
    8790:	a0002326 	beq	r20,zero,8820 <_fwalk+0xbc>
    8794:	282b883a 	mov	r21,r5
    8798:	002f883a 	mov	r23,zero
    879c:	05800044 	movi	r22,1
    87a0:	04ffffc4 	movi	r19,-1
    87a4:	a4400117 	ldw	r17,4(r20)
    87a8:	a4800217 	ldw	r18,8(r20)
    87ac:	8c7fffc4 	addi	r17,r17,-1
    87b0:	88000d16 	blt	r17,zero,87e8 <_fwalk+0x84>
    87b4:	94000304 	addi	r16,r18,12
    87b8:	94800384 	addi	r18,r18,14
    87bc:	8080000b 	ldhu	r2,0(r16)
    87c0:	8c7fffc4 	addi	r17,r17,-1
    87c4:	813ffd04 	addi	r4,r16,-12
    87c8:	b080042e 	bgeu	r22,r2,87dc <_fwalk+0x78>
    87cc:	9080000f 	ldh	r2,0(r18)
    87d0:	14c00226 	beq	r2,r19,87dc <_fwalk+0x78>
    87d4:	a83ee83a 	callr	r21
    87d8:	b8aeb03a 	or	r23,r23,r2
    87dc:	84001a04 	addi	r16,r16,104
    87e0:	94801a04 	addi	r18,r18,104
    87e4:	8cfff51e 	bne	r17,r19,87bc <__alt_data_end+0xff0087bc>
    87e8:	a5000017 	ldw	r20,0(r20)
    87ec:	a03fed1e 	bne	r20,zero,87a4 <__alt_data_end+0xff0087a4>
    87f0:	b805883a 	mov	r2,r23
    87f4:	dfc00817 	ldw	ra,32(sp)
    87f8:	ddc00717 	ldw	r23,28(sp)
    87fc:	dd800617 	ldw	r22,24(sp)
    8800:	dd400517 	ldw	r21,20(sp)
    8804:	dd000417 	ldw	r20,16(sp)
    8808:	dcc00317 	ldw	r19,12(sp)
    880c:	dc800217 	ldw	r18,8(sp)
    8810:	dc400117 	ldw	r17,4(sp)
    8814:	dc000017 	ldw	r16,0(sp)
    8818:	dec00904 	addi	sp,sp,36
    881c:	f800283a 	ret
    8820:	002f883a 	mov	r23,zero
    8824:	003ff206 	br	87f0 <__alt_data_end+0xff0087f0>

00008828 <_fwalk_reent>:
    8828:	defff704 	addi	sp,sp,-36
    882c:	dd000415 	stw	r20,16(sp)
    8830:	dfc00815 	stw	ra,32(sp)
    8834:	ddc00715 	stw	r23,28(sp)
    8838:	dd800615 	stw	r22,24(sp)
    883c:	dd400515 	stw	r21,20(sp)
    8840:	dcc00315 	stw	r19,12(sp)
    8844:	dc800215 	stw	r18,8(sp)
    8848:	dc400115 	stw	r17,4(sp)
    884c:	dc000015 	stw	r16,0(sp)
    8850:	2500b804 	addi	r20,r4,736
    8854:	a0002326 	beq	r20,zero,88e4 <_fwalk_reent+0xbc>
    8858:	282b883a 	mov	r21,r5
    885c:	2027883a 	mov	r19,r4
    8860:	002f883a 	mov	r23,zero
    8864:	05800044 	movi	r22,1
    8868:	04bfffc4 	movi	r18,-1
    886c:	a4400117 	ldw	r17,4(r20)
    8870:	a4000217 	ldw	r16,8(r20)
    8874:	8c7fffc4 	addi	r17,r17,-1
    8878:	88000c16 	blt	r17,zero,88ac <_fwalk_reent+0x84>
    887c:	84000304 	addi	r16,r16,12
    8880:	8080000b 	ldhu	r2,0(r16)
    8884:	8c7fffc4 	addi	r17,r17,-1
    8888:	817ffd04 	addi	r5,r16,-12
    888c:	b080052e 	bgeu	r22,r2,88a4 <_fwalk_reent+0x7c>
    8890:	8080008f 	ldh	r2,2(r16)
    8894:	9809883a 	mov	r4,r19
    8898:	14800226 	beq	r2,r18,88a4 <_fwalk_reent+0x7c>
    889c:	a83ee83a 	callr	r21
    88a0:	b8aeb03a 	or	r23,r23,r2
    88a4:	84001a04 	addi	r16,r16,104
    88a8:	8cbff51e 	bne	r17,r18,8880 <__alt_data_end+0xff008880>
    88ac:	a5000017 	ldw	r20,0(r20)
    88b0:	a03fee1e 	bne	r20,zero,886c <__alt_data_end+0xff00886c>
    88b4:	b805883a 	mov	r2,r23
    88b8:	dfc00817 	ldw	ra,32(sp)
    88bc:	ddc00717 	ldw	r23,28(sp)
    88c0:	dd800617 	ldw	r22,24(sp)
    88c4:	dd400517 	ldw	r21,20(sp)
    88c8:	dd000417 	ldw	r20,16(sp)
    88cc:	dcc00317 	ldw	r19,12(sp)
    88d0:	dc800217 	ldw	r18,8(sp)
    88d4:	dc400117 	ldw	r17,4(sp)
    88d8:	dc000017 	ldw	r16,0(sp)
    88dc:	dec00904 	addi	sp,sp,36
    88e0:	f800283a 	ret
    88e4:	002f883a 	mov	r23,zero
    88e8:	003ff206 	br	88b4 <__alt_data_end+0xff0088b4>

000088ec <_setlocale_r>:
    88ec:	30001b26 	beq	r6,zero,895c <_setlocale_r+0x70>
    88f0:	01400074 	movhi	r5,1
    88f4:	defffe04 	addi	sp,sp,-8
    88f8:	294a0e04 	addi	r5,r5,10296
    88fc:	3009883a 	mov	r4,r6
    8900:	dc000015 	stw	r16,0(sp)
    8904:	dfc00115 	stw	ra,4(sp)
    8908:	3021883a 	mov	r16,r6
    890c:	000a7440 	call	a744 <strcmp>
    8910:	1000061e 	bne	r2,zero,892c <_setlocale_r+0x40>
    8914:	00800074 	movhi	r2,1
    8918:	108a0d04 	addi	r2,r2,10292
    891c:	dfc00117 	ldw	ra,4(sp)
    8920:	dc000017 	ldw	r16,0(sp)
    8924:	dec00204 	addi	sp,sp,8
    8928:	f800283a 	ret
    892c:	01400074 	movhi	r5,1
    8930:	294a0d04 	addi	r5,r5,10292
    8934:	8009883a 	mov	r4,r16
    8938:	000a7440 	call	a744 <strcmp>
    893c:	103ff526 	beq	r2,zero,8914 <__alt_data_end+0xff008914>
    8940:	01400074 	movhi	r5,1
    8944:	2949f804 	addi	r5,r5,10208
    8948:	8009883a 	mov	r4,r16
    894c:	000a7440 	call	a744 <strcmp>
    8950:	103ff026 	beq	r2,zero,8914 <__alt_data_end+0xff008914>
    8954:	0005883a 	mov	r2,zero
    8958:	003ff006 	br	891c <__alt_data_end+0xff00891c>
    895c:	00800074 	movhi	r2,1
    8960:	108a0d04 	addi	r2,r2,10292
    8964:	f800283a 	ret

00008968 <__locale_charset>:
    8968:	00800074 	movhi	r2,1
    896c:	108cc004 	addi	r2,r2,13056
    8970:	f800283a 	ret

00008974 <__locale_mb_cur_max>:
    8974:	00800074 	movhi	r2,1
    8978:	10915c04 	addi	r2,r2,17776
    897c:	10800017 	ldw	r2,0(r2)
    8980:	f800283a 	ret

00008984 <__locale_msgcharset>:
    8984:	00800074 	movhi	r2,1
    8988:	108cb804 	addi	r2,r2,13024
    898c:	f800283a 	ret

00008990 <__locale_cjk_lang>:
    8990:	0005883a 	mov	r2,zero
    8994:	f800283a 	ret

00008998 <_localeconv_r>:
    8998:	00800074 	movhi	r2,1
    899c:	108cc804 	addi	r2,r2,13088
    89a0:	f800283a 	ret

000089a4 <setlocale>:
    89a4:	00800074 	movhi	r2,1
    89a8:	10915b04 	addi	r2,r2,17772
    89ac:	280d883a 	mov	r6,r5
    89b0:	200b883a 	mov	r5,r4
    89b4:	11000017 	ldw	r4,0(r2)
    89b8:	00088ec1 	jmpi	88ec <_setlocale_r>

000089bc <localeconv>:
    89bc:	00800074 	movhi	r2,1
    89c0:	108cc804 	addi	r2,r2,13088
    89c4:	f800283a 	ret

000089c8 <__smakebuf_r>:
    89c8:	2880030b 	ldhu	r2,12(r5)
    89cc:	10c0008c 	andi	r3,r2,2
    89d0:	1800411e 	bne	r3,zero,8ad8 <__smakebuf_r+0x110>
    89d4:	deffec04 	addi	sp,sp,-80
    89d8:	dc000f15 	stw	r16,60(sp)
    89dc:	2821883a 	mov	r16,r5
    89e0:	2940038f 	ldh	r5,14(r5)
    89e4:	dc401015 	stw	r17,64(sp)
    89e8:	dfc01315 	stw	ra,76(sp)
    89ec:	dcc01215 	stw	r19,72(sp)
    89f0:	dc801115 	stw	r18,68(sp)
    89f4:	2023883a 	mov	r17,r4
    89f8:	28001c16 	blt	r5,zero,8a6c <__smakebuf_r+0xa4>
    89fc:	d80d883a 	mov	r6,sp
    8a00:	000c2ec0 	call	c2ec <_fstat_r>
    8a04:	10001816 	blt	r2,zero,8a68 <__smakebuf_r+0xa0>
    8a08:	d8800117 	ldw	r2,4(sp)
    8a0c:	00e00014 	movui	r3,32768
    8a10:	10bc000c 	andi	r2,r2,61440
    8a14:	14c80020 	cmpeqi	r19,r2,8192
    8a18:	10c03726 	beq	r2,r3,8af8 <__smakebuf_r+0x130>
    8a1c:	80c0030b 	ldhu	r3,12(r16)
    8a20:	18c20014 	ori	r3,r3,2048
    8a24:	80c0030d 	sth	r3,12(r16)
    8a28:	00c80004 	movi	r3,8192
    8a2c:	10c0521e 	bne	r2,r3,8b78 <__smakebuf_r+0x1b0>
    8a30:	8140038f 	ldh	r5,14(r16)
    8a34:	8809883a 	mov	r4,r17
    8a38:	000c3480 	call	c348 <_isatty_r>
    8a3c:	10004c26 	beq	r2,zero,8b70 <__smakebuf_r+0x1a8>
    8a40:	8080030b 	ldhu	r2,12(r16)
    8a44:	80c010c4 	addi	r3,r16,67
    8a48:	80c00015 	stw	r3,0(r16)
    8a4c:	10800054 	ori	r2,r2,1
    8a50:	8080030d 	sth	r2,12(r16)
    8a54:	00800044 	movi	r2,1
    8a58:	80c00415 	stw	r3,16(r16)
    8a5c:	80800515 	stw	r2,20(r16)
    8a60:	04810004 	movi	r18,1024
    8a64:	00000706 	br	8a84 <__smakebuf_r+0xbc>
    8a68:	8080030b 	ldhu	r2,12(r16)
    8a6c:	10c0200c 	andi	r3,r2,128
    8a70:	18001f1e 	bne	r3,zero,8af0 <__smakebuf_r+0x128>
    8a74:	04810004 	movi	r18,1024
    8a78:	10820014 	ori	r2,r2,2048
    8a7c:	8080030d 	sth	r2,12(r16)
    8a80:	0027883a 	mov	r19,zero
    8a84:	900b883a 	mov	r5,r18
    8a88:	8809883a 	mov	r4,r17
    8a8c:	00031480 	call	3148 <_malloc_r>
    8a90:	10002c26 	beq	r2,zero,8b44 <__smakebuf_r+0x17c>
    8a94:	80c0030b 	ldhu	r3,12(r16)
    8a98:	01000034 	movhi	r4,0
    8a9c:	211eb704 	addi	r4,r4,31452
    8aa0:	89000f15 	stw	r4,60(r17)
    8aa4:	18c02014 	ori	r3,r3,128
    8aa8:	80c0030d 	sth	r3,12(r16)
    8aac:	80800015 	stw	r2,0(r16)
    8ab0:	80800415 	stw	r2,16(r16)
    8ab4:	84800515 	stw	r18,20(r16)
    8ab8:	98001a1e 	bne	r19,zero,8b24 <__smakebuf_r+0x15c>
    8abc:	dfc01317 	ldw	ra,76(sp)
    8ac0:	dcc01217 	ldw	r19,72(sp)
    8ac4:	dc801117 	ldw	r18,68(sp)
    8ac8:	dc401017 	ldw	r17,64(sp)
    8acc:	dc000f17 	ldw	r16,60(sp)
    8ad0:	dec01404 	addi	sp,sp,80
    8ad4:	f800283a 	ret
    8ad8:	288010c4 	addi	r2,r5,67
    8adc:	28800015 	stw	r2,0(r5)
    8ae0:	28800415 	stw	r2,16(r5)
    8ae4:	00800044 	movi	r2,1
    8ae8:	28800515 	stw	r2,20(r5)
    8aec:	f800283a 	ret
    8af0:	04801004 	movi	r18,64
    8af4:	003fe006 	br	8a78 <__alt_data_end+0xff008a78>
    8af8:	81000a17 	ldw	r4,40(r16)
    8afc:	00c00074 	movhi	r3,1
    8b00:	18e9b804 	addi	r3,r3,-22816
    8b04:	20ffc51e 	bne	r4,r3,8a1c <__alt_data_end+0xff008a1c>
    8b08:	8080030b 	ldhu	r2,12(r16)
    8b0c:	04810004 	movi	r18,1024
    8b10:	84801315 	stw	r18,76(r16)
    8b14:	1484b03a 	or	r2,r2,r18
    8b18:	8080030d 	sth	r2,12(r16)
    8b1c:	0027883a 	mov	r19,zero
    8b20:	003fd806 	br	8a84 <__alt_data_end+0xff008a84>
    8b24:	8140038f 	ldh	r5,14(r16)
    8b28:	8809883a 	mov	r4,r17
    8b2c:	000c3480 	call	c348 <_isatty_r>
    8b30:	103fe226 	beq	r2,zero,8abc <__alt_data_end+0xff008abc>
    8b34:	8080030b 	ldhu	r2,12(r16)
    8b38:	10800054 	ori	r2,r2,1
    8b3c:	8080030d 	sth	r2,12(r16)
    8b40:	003fde06 	br	8abc <__alt_data_end+0xff008abc>
    8b44:	8080030b 	ldhu	r2,12(r16)
    8b48:	10c0800c 	andi	r3,r2,512
    8b4c:	183fdb1e 	bne	r3,zero,8abc <__alt_data_end+0xff008abc>
    8b50:	10800094 	ori	r2,r2,2
    8b54:	80c010c4 	addi	r3,r16,67
    8b58:	8080030d 	sth	r2,12(r16)
    8b5c:	00800044 	movi	r2,1
    8b60:	80c00015 	stw	r3,0(r16)
    8b64:	80c00415 	stw	r3,16(r16)
    8b68:	80800515 	stw	r2,20(r16)
    8b6c:	003fd306 	br	8abc <__alt_data_end+0xff008abc>
    8b70:	04810004 	movi	r18,1024
    8b74:	003fc306 	br	8a84 <__alt_data_end+0xff008a84>
    8b78:	0027883a 	mov	r19,zero
    8b7c:	04810004 	movi	r18,1024
    8b80:	003fc006 	br	8a84 <__alt_data_end+0xff008a84>

00008b84 <memchr>:
    8b84:	208000cc 	andi	r2,r4,3
    8b88:	280f883a 	mov	r7,r5
    8b8c:	10003426 	beq	r2,zero,8c60 <memchr+0xdc>
    8b90:	30bfffc4 	addi	r2,r6,-1
    8b94:	30001a26 	beq	r6,zero,8c00 <memchr+0x7c>
    8b98:	20c00003 	ldbu	r3,0(r4)
    8b9c:	29803fcc 	andi	r6,r5,255
    8ba0:	30c0051e 	bne	r6,r3,8bb8 <memchr+0x34>
    8ba4:	00001806 	br	8c08 <memchr+0x84>
    8ba8:	10001526 	beq	r2,zero,8c00 <memchr+0x7c>
    8bac:	20c00003 	ldbu	r3,0(r4)
    8bb0:	10bfffc4 	addi	r2,r2,-1
    8bb4:	30c01426 	beq	r6,r3,8c08 <memchr+0x84>
    8bb8:	21000044 	addi	r4,r4,1
    8bbc:	20c000cc 	andi	r3,r4,3
    8bc0:	183ff91e 	bne	r3,zero,8ba8 <__alt_data_end+0xff008ba8>
    8bc4:	020000c4 	movi	r8,3
    8bc8:	40801136 	bltu	r8,r2,8c10 <memchr+0x8c>
    8bcc:	10000c26 	beq	r2,zero,8c00 <memchr+0x7c>
    8bd0:	20c00003 	ldbu	r3,0(r4)
    8bd4:	29403fcc 	andi	r5,r5,255
    8bd8:	28c00b26 	beq	r5,r3,8c08 <memchr+0x84>
    8bdc:	20c00044 	addi	r3,r4,1
    8be0:	39803fcc 	andi	r6,r7,255
    8be4:	2089883a 	add	r4,r4,r2
    8be8:	00000306 	br	8bf8 <memchr+0x74>
    8bec:	18c00044 	addi	r3,r3,1
    8bf0:	197fffc3 	ldbu	r5,-1(r3)
    8bf4:	31400526 	beq	r6,r5,8c0c <memchr+0x88>
    8bf8:	1805883a 	mov	r2,r3
    8bfc:	20fffb1e 	bne	r4,r3,8bec <__alt_data_end+0xff008bec>
    8c00:	0005883a 	mov	r2,zero
    8c04:	f800283a 	ret
    8c08:	2005883a 	mov	r2,r4
    8c0c:	f800283a 	ret
    8c10:	28c03fcc 	andi	r3,r5,255
    8c14:	1812923a 	slli	r9,r3,8
    8c18:	02ffbff4 	movhi	r11,65279
    8c1c:	02a02074 	movhi	r10,32897
    8c20:	48d2b03a 	or	r9,r9,r3
    8c24:	4806943a 	slli	r3,r9,16
    8c28:	5affbfc4 	addi	r11,r11,-257
    8c2c:	52a02004 	addi	r10,r10,-32640
    8c30:	48d2b03a 	or	r9,r9,r3
    8c34:	20c00017 	ldw	r3,0(r4)
    8c38:	48c6f03a 	xor	r3,r9,r3
    8c3c:	1acd883a 	add	r6,r3,r11
    8c40:	00c6303a 	nor	r3,zero,r3
    8c44:	30c6703a 	and	r3,r6,r3
    8c48:	1a86703a 	and	r3,r3,r10
    8c4c:	183fe01e 	bne	r3,zero,8bd0 <__alt_data_end+0xff008bd0>
    8c50:	10bfff04 	addi	r2,r2,-4
    8c54:	21000104 	addi	r4,r4,4
    8c58:	40bff636 	bltu	r8,r2,8c34 <__alt_data_end+0xff008c34>
    8c5c:	003fdb06 	br	8bcc <__alt_data_end+0xff008bcc>
    8c60:	3005883a 	mov	r2,r6
    8c64:	003fd706 	br	8bc4 <__alt_data_end+0xff008bc4>

00008c68 <memcpy>:
    8c68:	defffd04 	addi	sp,sp,-12
    8c6c:	dfc00215 	stw	ra,8(sp)
    8c70:	dc400115 	stw	r17,4(sp)
    8c74:	dc000015 	stw	r16,0(sp)
    8c78:	00c003c4 	movi	r3,15
    8c7c:	2005883a 	mov	r2,r4
    8c80:	1980452e 	bgeu	r3,r6,8d98 <memcpy+0x130>
    8c84:	2906b03a 	or	r3,r5,r4
    8c88:	18c000cc 	andi	r3,r3,3
    8c8c:	1800441e 	bne	r3,zero,8da0 <memcpy+0x138>
    8c90:	347ffc04 	addi	r17,r6,-16
    8c94:	8822d13a 	srli	r17,r17,4
    8c98:	28c00104 	addi	r3,r5,4
    8c9c:	23400104 	addi	r13,r4,4
    8ca0:	8820913a 	slli	r16,r17,4
    8ca4:	2b000204 	addi	r12,r5,8
    8ca8:	22c00204 	addi	r11,r4,8
    8cac:	84000504 	addi	r16,r16,20
    8cb0:	2a800304 	addi	r10,r5,12
    8cb4:	22400304 	addi	r9,r4,12
    8cb8:	2c21883a 	add	r16,r5,r16
    8cbc:	2811883a 	mov	r8,r5
    8cc0:	200f883a 	mov	r7,r4
    8cc4:	41000017 	ldw	r4,0(r8)
    8cc8:	1fc00017 	ldw	ra,0(r3)
    8ccc:	63c00017 	ldw	r15,0(r12)
    8cd0:	39000015 	stw	r4,0(r7)
    8cd4:	53800017 	ldw	r14,0(r10)
    8cd8:	6fc00015 	stw	ra,0(r13)
    8cdc:	5bc00015 	stw	r15,0(r11)
    8ce0:	4b800015 	stw	r14,0(r9)
    8ce4:	18c00404 	addi	r3,r3,16
    8ce8:	39c00404 	addi	r7,r7,16
    8cec:	42000404 	addi	r8,r8,16
    8cf0:	6b400404 	addi	r13,r13,16
    8cf4:	63000404 	addi	r12,r12,16
    8cf8:	5ac00404 	addi	r11,r11,16
    8cfc:	52800404 	addi	r10,r10,16
    8d00:	4a400404 	addi	r9,r9,16
    8d04:	1c3fef1e 	bne	r3,r16,8cc4 <__alt_data_end+0xff008cc4>
    8d08:	89c00044 	addi	r7,r17,1
    8d0c:	380e913a 	slli	r7,r7,4
    8d10:	310003cc 	andi	r4,r6,15
    8d14:	02c000c4 	movi	r11,3
    8d18:	11c7883a 	add	r3,r2,r7
    8d1c:	29cb883a 	add	r5,r5,r7
    8d20:	5900212e 	bgeu	r11,r4,8da8 <memcpy+0x140>
    8d24:	1813883a 	mov	r9,r3
    8d28:	2811883a 	mov	r8,r5
    8d2c:	200f883a 	mov	r7,r4
    8d30:	42800017 	ldw	r10,0(r8)
    8d34:	4a400104 	addi	r9,r9,4
    8d38:	39ffff04 	addi	r7,r7,-4
    8d3c:	4abfff15 	stw	r10,-4(r9)
    8d40:	42000104 	addi	r8,r8,4
    8d44:	59fffa36 	bltu	r11,r7,8d30 <__alt_data_end+0xff008d30>
    8d48:	213fff04 	addi	r4,r4,-4
    8d4c:	2008d0ba 	srli	r4,r4,2
    8d50:	318000cc 	andi	r6,r6,3
    8d54:	21000044 	addi	r4,r4,1
    8d58:	2109883a 	add	r4,r4,r4
    8d5c:	2109883a 	add	r4,r4,r4
    8d60:	1907883a 	add	r3,r3,r4
    8d64:	290b883a 	add	r5,r5,r4
    8d68:	30000626 	beq	r6,zero,8d84 <memcpy+0x11c>
    8d6c:	198d883a 	add	r6,r3,r6
    8d70:	29c00003 	ldbu	r7,0(r5)
    8d74:	18c00044 	addi	r3,r3,1
    8d78:	29400044 	addi	r5,r5,1
    8d7c:	19ffffc5 	stb	r7,-1(r3)
    8d80:	19bffb1e 	bne	r3,r6,8d70 <__alt_data_end+0xff008d70>
    8d84:	dfc00217 	ldw	ra,8(sp)
    8d88:	dc400117 	ldw	r17,4(sp)
    8d8c:	dc000017 	ldw	r16,0(sp)
    8d90:	dec00304 	addi	sp,sp,12
    8d94:	f800283a 	ret
    8d98:	2007883a 	mov	r3,r4
    8d9c:	003ff206 	br	8d68 <__alt_data_end+0xff008d68>
    8da0:	2007883a 	mov	r3,r4
    8da4:	003ff106 	br	8d6c <__alt_data_end+0xff008d6c>
    8da8:	200d883a 	mov	r6,r4
    8dac:	003fee06 	br	8d68 <__alt_data_end+0xff008d68>

00008db0 <memmove>:
    8db0:	2005883a 	mov	r2,r4
    8db4:	29000b2e 	bgeu	r5,r4,8de4 <memmove+0x34>
    8db8:	298f883a 	add	r7,r5,r6
    8dbc:	21c0092e 	bgeu	r4,r7,8de4 <memmove+0x34>
    8dc0:	2187883a 	add	r3,r4,r6
    8dc4:	198bc83a 	sub	r5,r3,r6
    8dc8:	30004826 	beq	r6,zero,8eec <memmove+0x13c>
    8dcc:	39ffffc4 	addi	r7,r7,-1
    8dd0:	39000003 	ldbu	r4,0(r7)
    8dd4:	18ffffc4 	addi	r3,r3,-1
    8dd8:	19000005 	stb	r4,0(r3)
    8ddc:	28fffb1e 	bne	r5,r3,8dcc <__alt_data_end+0xff008dcc>
    8de0:	f800283a 	ret
    8de4:	00c003c4 	movi	r3,15
    8de8:	1980412e 	bgeu	r3,r6,8ef0 <memmove+0x140>
    8dec:	2886b03a 	or	r3,r5,r2
    8df0:	18c000cc 	andi	r3,r3,3
    8df4:	1800401e 	bne	r3,zero,8ef8 <memmove+0x148>
    8df8:	33fffc04 	addi	r15,r6,-16
    8dfc:	781ed13a 	srli	r15,r15,4
    8e00:	28c00104 	addi	r3,r5,4
    8e04:	13400104 	addi	r13,r2,4
    8e08:	781c913a 	slli	r14,r15,4
    8e0c:	2b000204 	addi	r12,r5,8
    8e10:	12c00204 	addi	r11,r2,8
    8e14:	73800504 	addi	r14,r14,20
    8e18:	2a800304 	addi	r10,r5,12
    8e1c:	12400304 	addi	r9,r2,12
    8e20:	2b9d883a 	add	r14,r5,r14
    8e24:	2811883a 	mov	r8,r5
    8e28:	100f883a 	mov	r7,r2
    8e2c:	41000017 	ldw	r4,0(r8)
    8e30:	39c00404 	addi	r7,r7,16
    8e34:	18c00404 	addi	r3,r3,16
    8e38:	393ffc15 	stw	r4,-16(r7)
    8e3c:	193ffc17 	ldw	r4,-16(r3)
    8e40:	6b400404 	addi	r13,r13,16
    8e44:	5ac00404 	addi	r11,r11,16
    8e48:	693ffc15 	stw	r4,-16(r13)
    8e4c:	61000017 	ldw	r4,0(r12)
    8e50:	4a400404 	addi	r9,r9,16
    8e54:	42000404 	addi	r8,r8,16
    8e58:	593ffc15 	stw	r4,-16(r11)
    8e5c:	51000017 	ldw	r4,0(r10)
    8e60:	63000404 	addi	r12,r12,16
    8e64:	52800404 	addi	r10,r10,16
    8e68:	493ffc15 	stw	r4,-16(r9)
    8e6c:	1bbfef1e 	bne	r3,r14,8e2c <__alt_data_end+0xff008e2c>
    8e70:	79000044 	addi	r4,r15,1
    8e74:	2008913a 	slli	r4,r4,4
    8e78:	328003cc 	andi	r10,r6,15
    8e7c:	02c000c4 	movi	r11,3
    8e80:	1107883a 	add	r3,r2,r4
    8e84:	290b883a 	add	r5,r5,r4
    8e88:	5a801e2e 	bgeu	r11,r10,8f04 <memmove+0x154>
    8e8c:	1813883a 	mov	r9,r3
    8e90:	2811883a 	mov	r8,r5
    8e94:	500f883a 	mov	r7,r10
    8e98:	41000017 	ldw	r4,0(r8)
    8e9c:	4a400104 	addi	r9,r9,4
    8ea0:	39ffff04 	addi	r7,r7,-4
    8ea4:	493fff15 	stw	r4,-4(r9)
    8ea8:	42000104 	addi	r8,r8,4
    8eac:	59fffa36 	bltu	r11,r7,8e98 <__alt_data_end+0xff008e98>
    8eb0:	513fff04 	addi	r4,r10,-4
    8eb4:	2008d0ba 	srli	r4,r4,2
    8eb8:	318000cc 	andi	r6,r6,3
    8ebc:	21000044 	addi	r4,r4,1
    8ec0:	2109883a 	add	r4,r4,r4
    8ec4:	2109883a 	add	r4,r4,r4
    8ec8:	1907883a 	add	r3,r3,r4
    8ecc:	290b883a 	add	r5,r5,r4
    8ed0:	30000b26 	beq	r6,zero,8f00 <memmove+0x150>
    8ed4:	198d883a 	add	r6,r3,r6
    8ed8:	29c00003 	ldbu	r7,0(r5)
    8edc:	18c00044 	addi	r3,r3,1
    8ee0:	29400044 	addi	r5,r5,1
    8ee4:	19ffffc5 	stb	r7,-1(r3)
    8ee8:	19bffb1e 	bne	r3,r6,8ed8 <__alt_data_end+0xff008ed8>
    8eec:	f800283a 	ret
    8ef0:	1007883a 	mov	r3,r2
    8ef4:	003ff606 	br	8ed0 <__alt_data_end+0xff008ed0>
    8ef8:	1007883a 	mov	r3,r2
    8efc:	003ff506 	br	8ed4 <__alt_data_end+0xff008ed4>
    8f00:	f800283a 	ret
    8f04:	500d883a 	mov	r6,r10
    8f08:	003ff106 	br	8ed0 <__alt_data_end+0xff008ed0>

00008f0c <memset>:
    8f0c:	20c000cc 	andi	r3,r4,3
    8f10:	2005883a 	mov	r2,r4
    8f14:	18004426 	beq	r3,zero,9028 <memset+0x11c>
    8f18:	31ffffc4 	addi	r7,r6,-1
    8f1c:	30004026 	beq	r6,zero,9020 <memset+0x114>
    8f20:	2813883a 	mov	r9,r5
    8f24:	200d883a 	mov	r6,r4
    8f28:	2007883a 	mov	r3,r4
    8f2c:	00000406 	br	8f40 <memset+0x34>
    8f30:	3a3fffc4 	addi	r8,r7,-1
    8f34:	31800044 	addi	r6,r6,1
    8f38:	38003926 	beq	r7,zero,9020 <memset+0x114>
    8f3c:	400f883a 	mov	r7,r8
    8f40:	18c00044 	addi	r3,r3,1
    8f44:	32400005 	stb	r9,0(r6)
    8f48:	1a0000cc 	andi	r8,r3,3
    8f4c:	403ff81e 	bne	r8,zero,8f30 <__alt_data_end+0xff008f30>
    8f50:	010000c4 	movi	r4,3
    8f54:	21c02d2e 	bgeu	r4,r7,900c <memset+0x100>
    8f58:	29003fcc 	andi	r4,r5,255
    8f5c:	200c923a 	slli	r6,r4,8
    8f60:	3108b03a 	or	r4,r6,r4
    8f64:	200c943a 	slli	r6,r4,16
    8f68:	218cb03a 	or	r6,r4,r6
    8f6c:	010003c4 	movi	r4,15
    8f70:	21c0182e 	bgeu	r4,r7,8fd4 <memset+0xc8>
    8f74:	3b3ffc04 	addi	r12,r7,-16
    8f78:	6018d13a 	srli	r12,r12,4
    8f7c:	1a000104 	addi	r8,r3,4
    8f80:	1ac00204 	addi	r11,r3,8
    8f84:	6008913a 	slli	r4,r12,4
    8f88:	1a800304 	addi	r10,r3,12
    8f8c:	1813883a 	mov	r9,r3
    8f90:	21000504 	addi	r4,r4,20
    8f94:	1909883a 	add	r4,r3,r4
    8f98:	49800015 	stw	r6,0(r9)
    8f9c:	41800015 	stw	r6,0(r8)
    8fa0:	59800015 	stw	r6,0(r11)
    8fa4:	51800015 	stw	r6,0(r10)
    8fa8:	42000404 	addi	r8,r8,16
    8fac:	4a400404 	addi	r9,r9,16
    8fb0:	5ac00404 	addi	r11,r11,16
    8fb4:	52800404 	addi	r10,r10,16
    8fb8:	413ff71e 	bne	r8,r4,8f98 <__alt_data_end+0xff008f98>
    8fbc:	63000044 	addi	r12,r12,1
    8fc0:	6018913a 	slli	r12,r12,4
    8fc4:	39c003cc 	andi	r7,r7,15
    8fc8:	010000c4 	movi	r4,3
    8fcc:	1b07883a 	add	r3,r3,r12
    8fd0:	21c00e2e 	bgeu	r4,r7,900c <memset+0x100>
    8fd4:	1813883a 	mov	r9,r3
    8fd8:	3811883a 	mov	r8,r7
    8fdc:	010000c4 	movi	r4,3
    8fe0:	49800015 	stw	r6,0(r9)
    8fe4:	423fff04 	addi	r8,r8,-4
    8fe8:	4a400104 	addi	r9,r9,4
    8fec:	223ffc36 	bltu	r4,r8,8fe0 <__alt_data_end+0xff008fe0>
    8ff0:	393fff04 	addi	r4,r7,-4
    8ff4:	2008d0ba 	srli	r4,r4,2
    8ff8:	39c000cc 	andi	r7,r7,3
    8ffc:	21000044 	addi	r4,r4,1
    9000:	2109883a 	add	r4,r4,r4
    9004:	2109883a 	add	r4,r4,r4
    9008:	1907883a 	add	r3,r3,r4
    900c:	38000526 	beq	r7,zero,9024 <memset+0x118>
    9010:	19cf883a 	add	r7,r3,r7
    9014:	19400005 	stb	r5,0(r3)
    9018:	18c00044 	addi	r3,r3,1
    901c:	38fffd1e 	bne	r7,r3,9014 <__alt_data_end+0xff009014>
    9020:	f800283a 	ret
    9024:	f800283a 	ret
    9028:	2007883a 	mov	r3,r4
    902c:	300f883a 	mov	r7,r6
    9030:	003fc706 	br	8f50 <__alt_data_end+0xff008f50>

00009034 <_Balloc>:
    9034:	20801317 	ldw	r2,76(r4)
    9038:	defffc04 	addi	sp,sp,-16
    903c:	dc400115 	stw	r17,4(sp)
    9040:	dc000015 	stw	r16,0(sp)
    9044:	dfc00315 	stw	ra,12(sp)
    9048:	dc800215 	stw	r18,8(sp)
    904c:	2023883a 	mov	r17,r4
    9050:	2821883a 	mov	r16,r5
    9054:	10000f26 	beq	r2,zero,9094 <_Balloc+0x60>
    9058:	8407883a 	add	r3,r16,r16
    905c:	18c7883a 	add	r3,r3,r3
    9060:	10c7883a 	add	r3,r2,r3
    9064:	18800017 	ldw	r2,0(r3)
    9068:	10001126 	beq	r2,zero,90b0 <_Balloc+0x7c>
    906c:	11000017 	ldw	r4,0(r2)
    9070:	19000015 	stw	r4,0(r3)
    9074:	10000415 	stw	zero,16(r2)
    9078:	10000315 	stw	zero,12(r2)
    907c:	dfc00317 	ldw	ra,12(sp)
    9080:	dc800217 	ldw	r18,8(sp)
    9084:	dc400117 	ldw	r17,4(sp)
    9088:	dc000017 	ldw	r16,0(sp)
    908c:	dec00404 	addi	sp,sp,16
    9090:	f800283a 	ret
    9094:	01800844 	movi	r6,33
    9098:	01400104 	movi	r5,4
    909c:	000bf1c0 	call	bf1c <_calloc_r>
    90a0:	88801315 	stw	r2,76(r17)
    90a4:	103fec1e 	bne	r2,zero,9058 <__alt_data_end+0xff009058>
    90a8:	0005883a 	mov	r2,zero
    90ac:	003ff306 	br	907c <__alt_data_end+0xff00907c>
    90b0:	01400044 	movi	r5,1
    90b4:	2c24983a 	sll	r18,r5,r16
    90b8:	8809883a 	mov	r4,r17
    90bc:	91800144 	addi	r6,r18,5
    90c0:	318d883a 	add	r6,r6,r6
    90c4:	318d883a 	add	r6,r6,r6
    90c8:	000bf1c0 	call	bf1c <_calloc_r>
    90cc:	103ff626 	beq	r2,zero,90a8 <__alt_data_end+0xff0090a8>
    90d0:	14000115 	stw	r16,4(r2)
    90d4:	14800215 	stw	r18,8(r2)
    90d8:	003fe606 	br	9074 <__alt_data_end+0xff009074>

000090dc <_Bfree>:
    90dc:	28000826 	beq	r5,zero,9100 <_Bfree+0x24>
    90e0:	28c00117 	ldw	r3,4(r5)
    90e4:	20801317 	ldw	r2,76(r4)
    90e8:	18c7883a 	add	r3,r3,r3
    90ec:	18c7883a 	add	r3,r3,r3
    90f0:	10c5883a 	add	r2,r2,r3
    90f4:	10c00017 	ldw	r3,0(r2)
    90f8:	28c00015 	stw	r3,0(r5)
    90fc:	11400015 	stw	r5,0(r2)
    9100:	f800283a 	ret

00009104 <__multadd>:
    9104:	defffa04 	addi	sp,sp,-24
    9108:	dc800315 	stw	r18,12(sp)
    910c:	dc400215 	stw	r17,8(sp)
    9110:	dc000115 	stw	r16,4(sp)
    9114:	2823883a 	mov	r17,r5
    9118:	2c000417 	ldw	r16,16(r5)
    911c:	dfc00515 	stw	ra,20(sp)
    9120:	dcc00415 	stw	r19,16(sp)
    9124:	2025883a 	mov	r18,r4
    9128:	29400504 	addi	r5,r5,20
    912c:	0011883a 	mov	r8,zero
    9130:	28c00017 	ldw	r3,0(r5)
    9134:	29400104 	addi	r5,r5,4
    9138:	42000044 	addi	r8,r8,1
    913c:	18bfffcc 	andi	r2,r3,65535
    9140:	1185383a 	mul	r2,r2,r6
    9144:	1806d43a 	srli	r3,r3,16
    9148:	11cf883a 	add	r7,r2,r7
    914c:	3808d43a 	srli	r4,r7,16
    9150:	1987383a 	mul	r3,r3,r6
    9154:	38bfffcc 	andi	r2,r7,65535
    9158:	1907883a 	add	r3,r3,r4
    915c:	1808943a 	slli	r4,r3,16
    9160:	180ed43a 	srli	r7,r3,16
    9164:	2085883a 	add	r2,r4,r2
    9168:	28bfff15 	stw	r2,-4(r5)
    916c:	443ff016 	blt	r8,r16,9130 <__alt_data_end+0xff009130>
    9170:	38000926 	beq	r7,zero,9198 <__multadd+0x94>
    9174:	88800217 	ldw	r2,8(r17)
    9178:	80800f0e 	bge	r16,r2,91b8 <__multadd+0xb4>
    917c:	80800144 	addi	r2,r16,5
    9180:	1085883a 	add	r2,r2,r2
    9184:	1085883a 	add	r2,r2,r2
    9188:	8885883a 	add	r2,r17,r2
    918c:	11c00015 	stw	r7,0(r2)
    9190:	84000044 	addi	r16,r16,1
    9194:	8c000415 	stw	r16,16(r17)
    9198:	8805883a 	mov	r2,r17
    919c:	dfc00517 	ldw	ra,20(sp)
    91a0:	dcc00417 	ldw	r19,16(sp)
    91a4:	dc800317 	ldw	r18,12(sp)
    91a8:	dc400217 	ldw	r17,8(sp)
    91ac:	dc000117 	ldw	r16,4(sp)
    91b0:	dec00604 	addi	sp,sp,24
    91b4:	f800283a 	ret
    91b8:	89400117 	ldw	r5,4(r17)
    91bc:	9009883a 	mov	r4,r18
    91c0:	d9c00015 	stw	r7,0(sp)
    91c4:	29400044 	addi	r5,r5,1
    91c8:	00090340 	call	9034 <_Balloc>
    91cc:	89800417 	ldw	r6,16(r17)
    91d0:	89400304 	addi	r5,r17,12
    91d4:	11000304 	addi	r4,r2,12
    91d8:	31800084 	addi	r6,r6,2
    91dc:	318d883a 	add	r6,r6,r6
    91e0:	318d883a 	add	r6,r6,r6
    91e4:	1027883a 	mov	r19,r2
    91e8:	0008c680 	call	8c68 <memcpy>
    91ec:	d9c00017 	ldw	r7,0(sp)
    91f0:	88000a26 	beq	r17,zero,921c <__multadd+0x118>
    91f4:	88c00117 	ldw	r3,4(r17)
    91f8:	90801317 	ldw	r2,76(r18)
    91fc:	18c7883a 	add	r3,r3,r3
    9200:	18c7883a 	add	r3,r3,r3
    9204:	10c5883a 	add	r2,r2,r3
    9208:	10c00017 	ldw	r3,0(r2)
    920c:	88c00015 	stw	r3,0(r17)
    9210:	14400015 	stw	r17,0(r2)
    9214:	9823883a 	mov	r17,r19
    9218:	003fd806 	br	917c <__alt_data_end+0xff00917c>
    921c:	9823883a 	mov	r17,r19
    9220:	003fd606 	br	917c <__alt_data_end+0xff00917c>

00009224 <__s2b>:
    9224:	defff904 	addi	sp,sp,-28
    9228:	dc400115 	stw	r17,4(sp)
    922c:	dc000015 	stw	r16,0(sp)
    9230:	2023883a 	mov	r17,r4
    9234:	2821883a 	mov	r16,r5
    9238:	39000204 	addi	r4,r7,8
    923c:	01400244 	movi	r5,9
    9240:	dcc00315 	stw	r19,12(sp)
    9244:	dc800215 	stw	r18,8(sp)
    9248:	dfc00615 	stw	ra,24(sp)
    924c:	dd400515 	stw	r21,20(sp)
    9250:	dd000415 	stw	r20,16(sp)
    9254:	3825883a 	mov	r18,r7
    9258:	3027883a 	mov	r19,r6
    925c:	0002f6c0 	call	2f6c <__divsi3>
    9260:	00c00044 	movi	r3,1
    9264:	000b883a 	mov	r5,zero
    9268:	1880030e 	bge	r3,r2,9278 <__s2b+0x54>
    926c:	18c7883a 	add	r3,r3,r3
    9270:	29400044 	addi	r5,r5,1
    9274:	18bffd16 	blt	r3,r2,926c <__alt_data_end+0xff00926c>
    9278:	8809883a 	mov	r4,r17
    927c:	00090340 	call	9034 <_Balloc>
    9280:	d8c00717 	ldw	r3,28(sp)
    9284:	10c00515 	stw	r3,20(r2)
    9288:	00c00044 	movi	r3,1
    928c:	10c00415 	stw	r3,16(r2)
    9290:	00c00244 	movi	r3,9
    9294:	1cc0210e 	bge	r3,r19,931c <__s2b+0xf8>
    9298:	80eb883a 	add	r21,r16,r3
    929c:	a829883a 	mov	r20,r21
    92a0:	84e1883a 	add	r16,r16,r19
    92a4:	a1c00007 	ldb	r7,0(r20)
    92a8:	01800284 	movi	r6,10
    92ac:	a5000044 	addi	r20,r20,1
    92b0:	100b883a 	mov	r5,r2
    92b4:	39fff404 	addi	r7,r7,-48
    92b8:	8809883a 	mov	r4,r17
    92bc:	00091040 	call	9104 <__multadd>
    92c0:	a43ff81e 	bne	r20,r16,92a4 <__alt_data_end+0xff0092a4>
    92c4:	ace1883a 	add	r16,r21,r19
    92c8:	843ffe04 	addi	r16,r16,-8
    92cc:	9c800a0e 	bge	r19,r18,92f8 <__s2b+0xd4>
    92d0:	94e5c83a 	sub	r18,r18,r19
    92d4:	84a5883a 	add	r18,r16,r18
    92d8:	81c00007 	ldb	r7,0(r16)
    92dc:	01800284 	movi	r6,10
    92e0:	84000044 	addi	r16,r16,1
    92e4:	100b883a 	mov	r5,r2
    92e8:	39fff404 	addi	r7,r7,-48
    92ec:	8809883a 	mov	r4,r17
    92f0:	00091040 	call	9104 <__multadd>
    92f4:	84bff81e 	bne	r16,r18,92d8 <__alt_data_end+0xff0092d8>
    92f8:	dfc00617 	ldw	ra,24(sp)
    92fc:	dd400517 	ldw	r21,20(sp)
    9300:	dd000417 	ldw	r20,16(sp)
    9304:	dcc00317 	ldw	r19,12(sp)
    9308:	dc800217 	ldw	r18,8(sp)
    930c:	dc400117 	ldw	r17,4(sp)
    9310:	dc000017 	ldw	r16,0(sp)
    9314:	dec00704 	addi	sp,sp,28
    9318:	f800283a 	ret
    931c:	84000284 	addi	r16,r16,10
    9320:	1827883a 	mov	r19,r3
    9324:	003fe906 	br	92cc <__alt_data_end+0xff0092cc>

00009328 <__hi0bits>:
    9328:	20bfffec 	andhi	r2,r4,65535
    932c:	1000141e 	bne	r2,zero,9380 <__hi0bits+0x58>
    9330:	2008943a 	slli	r4,r4,16
    9334:	00800404 	movi	r2,16
    9338:	20ffc02c 	andhi	r3,r4,65280
    933c:	1800021e 	bne	r3,zero,9348 <__hi0bits+0x20>
    9340:	2008923a 	slli	r4,r4,8
    9344:	10800204 	addi	r2,r2,8
    9348:	20fc002c 	andhi	r3,r4,61440
    934c:	1800021e 	bne	r3,zero,9358 <__hi0bits+0x30>
    9350:	2008913a 	slli	r4,r4,4
    9354:	10800104 	addi	r2,r2,4
    9358:	20f0002c 	andhi	r3,r4,49152
    935c:	1800031e 	bne	r3,zero,936c <__hi0bits+0x44>
    9360:	2109883a 	add	r4,r4,r4
    9364:	10800084 	addi	r2,r2,2
    9368:	2109883a 	add	r4,r4,r4
    936c:	20000316 	blt	r4,zero,937c <__hi0bits+0x54>
    9370:	2110002c 	andhi	r4,r4,16384
    9374:	2000041e 	bne	r4,zero,9388 <__hi0bits+0x60>
    9378:	00800804 	movi	r2,32
    937c:	f800283a 	ret
    9380:	0005883a 	mov	r2,zero
    9384:	003fec06 	br	9338 <__alt_data_end+0xff009338>
    9388:	10800044 	addi	r2,r2,1
    938c:	f800283a 	ret

00009390 <__lo0bits>:
    9390:	20c00017 	ldw	r3,0(r4)
    9394:	188001cc 	andi	r2,r3,7
    9398:	10000826 	beq	r2,zero,93bc <__lo0bits+0x2c>
    939c:	1880004c 	andi	r2,r3,1
    93a0:	1000211e 	bne	r2,zero,9428 <__lo0bits+0x98>
    93a4:	1880008c 	andi	r2,r3,2
    93a8:	1000211e 	bne	r2,zero,9430 <__lo0bits+0xa0>
    93ac:	1806d0ba 	srli	r3,r3,2
    93b0:	00800084 	movi	r2,2
    93b4:	20c00015 	stw	r3,0(r4)
    93b8:	f800283a 	ret
    93bc:	18bfffcc 	andi	r2,r3,65535
    93c0:	10001326 	beq	r2,zero,9410 <__lo0bits+0x80>
    93c4:	0005883a 	mov	r2,zero
    93c8:	19403fcc 	andi	r5,r3,255
    93cc:	2800021e 	bne	r5,zero,93d8 <__lo0bits+0x48>
    93d0:	1806d23a 	srli	r3,r3,8
    93d4:	10800204 	addi	r2,r2,8
    93d8:	194003cc 	andi	r5,r3,15
    93dc:	2800021e 	bne	r5,zero,93e8 <__lo0bits+0x58>
    93e0:	1806d13a 	srli	r3,r3,4
    93e4:	10800104 	addi	r2,r2,4
    93e8:	194000cc 	andi	r5,r3,3
    93ec:	2800021e 	bne	r5,zero,93f8 <__lo0bits+0x68>
    93f0:	1806d0ba 	srli	r3,r3,2
    93f4:	10800084 	addi	r2,r2,2
    93f8:	1940004c 	andi	r5,r3,1
    93fc:	2800081e 	bne	r5,zero,9420 <__lo0bits+0x90>
    9400:	1806d07a 	srli	r3,r3,1
    9404:	1800051e 	bne	r3,zero,941c <__lo0bits+0x8c>
    9408:	00800804 	movi	r2,32
    940c:	f800283a 	ret
    9410:	1806d43a 	srli	r3,r3,16
    9414:	00800404 	movi	r2,16
    9418:	003feb06 	br	93c8 <__alt_data_end+0xff0093c8>
    941c:	10800044 	addi	r2,r2,1
    9420:	20c00015 	stw	r3,0(r4)
    9424:	f800283a 	ret
    9428:	0005883a 	mov	r2,zero
    942c:	f800283a 	ret
    9430:	1806d07a 	srli	r3,r3,1
    9434:	00800044 	movi	r2,1
    9438:	20c00015 	stw	r3,0(r4)
    943c:	f800283a 	ret

00009440 <__i2b>:
    9440:	defffd04 	addi	sp,sp,-12
    9444:	dc000015 	stw	r16,0(sp)
    9448:	04000044 	movi	r16,1
    944c:	dc400115 	stw	r17,4(sp)
    9450:	2823883a 	mov	r17,r5
    9454:	800b883a 	mov	r5,r16
    9458:	dfc00215 	stw	ra,8(sp)
    945c:	00090340 	call	9034 <_Balloc>
    9460:	14400515 	stw	r17,20(r2)
    9464:	14000415 	stw	r16,16(r2)
    9468:	dfc00217 	ldw	ra,8(sp)
    946c:	dc400117 	ldw	r17,4(sp)
    9470:	dc000017 	ldw	r16,0(sp)
    9474:	dec00304 	addi	sp,sp,12
    9478:	f800283a 	ret

0000947c <__multiply>:
    947c:	defffa04 	addi	sp,sp,-24
    9480:	dcc00315 	stw	r19,12(sp)
    9484:	dc800215 	stw	r18,8(sp)
    9488:	34c00417 	ldw	r19,16(r6)
    948c:	2c800417 	ldw	r18,16(r5)
    9490:	dd000415 	stw	r20,16(sp)
    9494:	dc400115 	stw	r17,4(sp)
    9498:	dfc00515 	stw	ra,20(sp)
    949c:	dc000015 	stw	r16,0(sp)
    94a0:	2829883a 	mov	r20,r5
    94a4:	3023883a 	mov	r17,r6
    94a8:	94c0050e 	bge	r18,r19,94c0 <__multiply+0x44>
    94ac:	9007883a 	mov	r3,r18
    94b0:	3029883a 	mov	r20,r6
    94b4:	9825883a 	mov	r18,r19
    94b8:	2823883a 	mov	r17,r5
    94bc:	1827883a 	mov	r19,r3
    94c0:	a0800217 	ldw	r2,8(r20)
    94c4:	94e1883a 	add	r16,r18,r19
    94c8:	a1400117 	ldw	r5,4(r20)
    94cc:	1400010e 	bge	r2,r16,94d4 <__multiply+0x58>
    94d0:	29400044 	addi	r5,r5,1
    94d4:	00090340 	call	9034 <_Balloc>
    94d8:	8415883a 	add	r10,r16,r16
    94dc:	12c00504 	addi	r11,r2,20
    94e0:	5295883a 	add	r10,r10,r10
    94e4:	5a95883a 	add	r10,r11,r10
    94e8:	5807883a 	mov	r3,r11
    94ec:	5a80032e 	bgeu	r11,r10,94fc <__multiply+0x80>
    94f0:	18000015 	stw	zero,0(r3)
    94f4:	18c00104 	addi	r3,r3,4
    94f8:	1abffd36 	bltu	r3,r10,94f0 <__alt_data_end+0xff0094f0>
    94fc:	9ce7883a 	add	r19,r19,r19
    9500:	94a5883a 	add	r18,r18,r18
    9504:	89800504 	addi	r6,r17,20
    9508:	9ce7883a 	add	r19,r19,r19
    950c:	a3400504 	addi	r13,r20,20
    9510:	94a5883a 	add	r18,r18,r18
    9514:	34d9883a 	add	r12,r6,r19
    9518:	6c93883a 	add	r9,r13,r18
    951c:	3300422e 	bgeu	r6,r12,9628 <__multiply+0x1ac>
    9520:	37c00017 	ldw	ra,0(r6)
    9524:	fbffffcc 	andi	r15,ra,65535
    9528:	78001b26 	beq	r15,zero,9598 <__multiply+0x11c>
    952c:	5811883a 	mov	r8,r11
    9530:	681d883a 	mov	r14,r13
    9534:	000f883a 	mov	r7,zero
    9538:	71000017 	ldw	r4,0(r14)
    953c:	40c00017 	ldw	r3,0(r8)
    9540:	73800104 	addi	r14,r14,4
    9544:	217fffcc 	andi	r5,r4,65535
    9548:	2bcb383a 	mul	r5,r5,r15
    954c:	2008d43a 	srli	r4,r4,16
    9550:	1c7fffcc 	andi	r17,r3,65535
    9554:	2c4b883a 	add	r5,r5,r17
    9558:	29cb883a 	add	r5,r5,r7
    955c:	23c9383a 	mul	r4,r4,r15
    9560:	1806d43a 	srli	r3,r3,16
    9564:	280ed43a 	srli	r7,r5,16
    9568:	297fffcc 	andi	r5,r5,65535
    956c:	20c7883a 	add	r3,r4,r3
    9570:	19c7883a 	add	r3,r3,r7
    9574:	1808943a 	slli	r4,r3,16
    9578:	4023883a 	mov	r17,r8
    957c:	180ed43a 	srli	r7,r3,16
    9580:	214ab03a 	or	r5,r4,r5
    9584:	41400015 	stw	r5,0(r8)
    9588:	42000104 	addi	r8,r8,4
    958c:	727fea36 	bltu	r14,r9,9538 <__alt_data_end+0xff009538>
    9590:	89c00115 	stw	r7,4(r17)
    9594:	37c00017 	ldw	ra,0(r6)
    9598:	f83ed43a 	srli	ra,ra,16
    959c:	f8001f26 	beq	ra,zero,961c <__multiply+0x1a0>
    95a0:	58c00017 	ldw	r3,0(r11)
    95a4:	681d883a 	mov	r14,r13
    95a8:	581f883a 	mov	r15,r11
    95ac:	1811883a 	mov	r8,r3
    95b0:	5825883a 	mov	r18,r11
    95b4:	000f883a 	mov	r7,zero
    95b8:	00000106 	br	95c0 <__multiply+0x144>
    95bc:	8825883a 	mov	r18,r17
    95c0:	7140000b 	ldhu	r5,0(r14)
    95c4:	4010d43a 	srli	r8,r8,16
    95c8:	193fffcc 	andi	r4,r3,65535
    95cc:	2fcb383a 	mul	r5,r5,ra
    95d0:	7bc00104 	addi	r15,r15,4
    95d4:	73800104 	addi	r14,r14,4
    95d8:	2a0b883a 	add	r5,r5,r8
    95dc:	29cb883a 	add	r5,r5,r7
    95e0:	2806943a 	slli	r3,r5,16
    95e4:	94400104 	addi	r17,r18,4
    95e8:	280ad43a 	srli	r5,r5,16
    95ec:	1908b03a 	or	r4,r3,r4
    95f0:	793fff15 	stw	r4,-4(r15)
    95f4:	70ffff17 	ldw	r3,-4(r14)
    95f8:	8a000017 	ldw	r8,0(r17)
    95fc:	1806d43a 	srli	r3,r3,16
    9600:	413fffcc 	andi	r4,r8,65535
    9604:	1fc7383a 	mul	r3,r3,ra
    9608:	1907883a 	add	r3,r3,r4
    960c:	1947883a 	add	r3,r3,r5
    9610:	180ed43a 	srli	r7,r3,16
    9614:	727fe936 	bltu	r14,r9,95bc <__alt_data_end+0xff0095bc>
    9618:	90c00115 	stw	r3,4(r18)
    961c:	31800104 	addi	r6,r6,4
    9620:	5ac00104 	addi	r11,r11,4
    9624:	333fbe36 	bltu	r6,r12,9520 <__alt_data_end+0xff009520>
    9628:	0400090e 	bge	zero,r16,9650 <__multiply+0x1d4>
    962c:	50ffff17 	ldw	r3,-4(r10)
    9630:	52bfff04 	addi	r10,r10,-4
    9634:	18000326 	beq	r3,zero,9644 <__multiply+0x1c8>
    9638:	00000506 	br	9650 <__multiply+0x1d4>
    963c:	50c00017 	ldw	r3,0(r10)
    9640:	1800031e 	bne	r3,zero,9650 <__multiply+0x1d4>
    9644:	843fffc4 	addi	r16,r16,-1
    9648:	52bfff04 	addi	r10,r10,-4
    964c:	803ffb1e 	bne	r16,zero,963c <__alt_data_end+0xff00963c>
    9650:	14000415 	stw	r16,16(r2)
    9654:	dfc00517 	ldw	ra,20(sp)
    9658:	dd000417 	ldw	r20,16(sp)
    965c:	dcc00317 	ldw	r19,12(sp)
    9660:	dc800217 	ldw	r18,8(sp)
    9664:	dc400117 	ldw	r17,4(sp)
    9668:	dc000017 	ldw	r16,0(sp)
    966c:	dec00604 	addi	sp,sp,24
    9670:	f800283a 	ret

00009674 <__pow5mult>:
    9674:	defffa04 	addi	sp,sp,-24
    9678:	dcc00315 	stw	r19,12(sp)
    967c:	dc000015 	stw	r16,0(sp)
    9680:	dfc00515 	stw	ra,20(sp)
    9684:	dd000415 	stw	r20,16(sp)
    9688:	dc800215 	stw	r18,8(sp)
    968c:	dc400115 	stw	r17,4(sp)
    9690:	308000cc 	andi	r2,r6,3
    9694:	3021883a 	mov	r16,r6
    9698:	2027883a 	mov	r19,r4
    969c:	10002f1e 	bne	r2,zero,975c <__pow5mult+0xe8>
    96a0:	2825883a 	mov	r18,r5
    96a4:	8021d0ba 	srai	r16,r16,2
    96a8:	80001a26 	beq	r16,zero,9714 <__pow5mult+0xa0>
    96ac:	9c401217 	ldw	r17,72(r19)
    96b0:	8800061e 	bne	r17,zero,96cc <__pow5mult+0x58>
    96b4:	00003406 	br	9788 <__pow5mult+0x114>
    96b8:	8021d07a 	srai	r16,r16,1
    96bc:	80001526 	beq	r16,zero,9714 <__pow5mult+0xa0>
    96c0:	88800017 	ldw	r2,0(r17)
    96c4:	10001c26 	beq	r2,zero,9738 <__pow5mult+0xc4>
    96c8:	1023883a 	mov	r17,r2
    96cc:	8080004c 	andi	r2,r16,1
    96d0:	103ff926 	beq	r2,zero,96b8 <__alt_data_end+0xff0096b8>
    96d4:	880d883a 	mov	r6,r17
    96d8:	900b883a 	mov	r5,r18
    96dc:	9809883a 	mov	r4,r19
    96e0:	000947c0 	call	947c <__multiply>
    96e4:	90001b26 	beq	r18,zero,9754 <__pow5mult+0xe0>
    96e8:	91000117 	ldw	r4,4(r18)
    96ec:	98c01317 	ldw	r3,76(r19)
    96f0:	8021d07a 	srai	r16,r16,1
    96f4:	2109883a 	add	r4,r4,r4
    96f8:	2109883a 	add	r4,r4,r4
    96fc:	1907883a 	add	r3,r3,r4
    9700:	19000017 	ldw	r4,0(r3)
    9704:	91000015 	stw	r4,0(r18)
    9708:	1c800015 	stw	r18,0(r3)
    970c:	1025883a 	mov	r18,r2
    9710:	803feb1e 	bne	r16,zero,96c0 <__alt_data_end+0xff0096c0>
    9714:	9005883a 	mov	r2,r18
    9718:	dfc00517 	ldw	ra,20(sp)
    971c:	dd000417 	ldw	r20,16(sp)
    9720:	dcc00317 	ldw	r19,12(sp)
    9724:	dc800217 	ldw	r18,8(sp)
    9728:	dc400117 	ldw	r17,4(sp)
    972c:	dc000017 	ldw	r16,0(sp)
    9730:	dec00604 	addi	sp,sp,24
    9734:	f800283a 	ret
    9738:	880d883a 	mov	r6,r17
    973c:	880b883a 	mov	r5,r17
    9740:	9809883a 	mov	r4,r19
    9744:	000947c0 	call	947c <__multiply>
    9748:	88800015 	stw	r2,0(r17)
    974c:	10000015 	stw	zero,0(r2)
    9750:	003fdd06 	br	96c8 <__alt_data_end+0xff0096c8>
    9754:	1025883a 	mov	r18,r2
    9758:	003fd706 	br	96b8 <__alt_data_end+0xff0096b8>
    975c:	10bfffc4 	addi	r2,r2,-1
    9760:	1085883a 	add	r2,r2,r2
    9764:	00c00074 	movhi	r3,1
    9768:	18ca1104 	addi	r3,r3,10308
    976c:	1085883a 	add	r2,r2,r2
    9770:	1885883a 	add	r2,r3,r2
    9774:	11800017 	ldw	r6,0(r2)
    9778:	000f883a 	mov	r7,zero
    977c:	00091040 	call	9104 <__multadd>
    9780:	1025883a 	mov	r18,r2
    9784:	003fc706 	br	96a4 <__alt_data_end+0xff0096a4>
    9788:	05000044 	movi	r20,1
    978c:	a00b883a 	mov	r5,r20
    9790:	9809883a 	mov	r4,r19
    9794:	00090340 	call	9034 <_Balloc>
    9798:	1023883a 	mov	r17,r2
    979c:	00809c44 	movi	r2,625
    97a0:	88800515 	stw	r2,20(r17)
    97a4:	8d000415 	stw	r20,16(r17)
    97a8:	9c401215 	stw	r17,72(r19)
    97ac:	88000015 	stw	zero,0(r17)
    97b0:	003fc606 	br	96cc <__alt_data_end+0xff0096cc>

000097b4 <__lshift>:
    97b4:	defff904 	addi	sp,sp,-28
    97b8:	dd400515 	stw	r21,20(sp)
    97bc:	dcc00315 	stw	r19,12(sp)
    97c0:	302bd17a 	srai	r21,r6,5
    97c4:	2cc00417 	ldw	r19,16(r5)
    97c8:	28800217 	ldw	r2,8(r5)
    97cc:	dd000415 	stw	r20,16(sp)
    97d0:	ace7883a 	add	r19,r21,r19
    97d4:	dc800215 	stw	r18,8(sp)
    97d8:	dc400115 	stw	r17,4(sp)
    97dc:	dc000015 	stw	r16,0(sp)
    97e0:	dfc00615 	stw	ra,24(sp)
    97e4:	9c000044 	addi	r16,r19,1
    97e8:	2823883a 	mov	r17,r5
    97ec:	3029883a 	mov	r20,r6
    97f0:	2025883a 	mov	r18,r4
    97f4:	29400117 	ldw	r5,4(r5)
    97f8:	1400030e 	bge	r2,r16,9808 <__lshift+0x54>
    97fc:	1085883a 	add	r2,r2,r2
    9800:	29400044 	addi	r5,r5,1
    9804:	143ffd16 	blt	r2,r16,97fc <__alt_data_end+0xff0097fc>
    9808:	9009883a 	mov	r4,r18
    980c:	00090340 	call	9034 <_Balloc>
    9810:	10c00504 	addi	r3,r2,20
    9814:	0540070e 	bge	zero,r21,9834 <__lshift+0x80>
    9818:	ad6b883a 	add	r21,r21,r21
    981c:	ad6b883a 	add	r21,r21,r21
    9820:	1809883a 	mov	r4,r3
    9824:	1d47883a 	add	r3,r3,r21
    9828:	20000015 	stw	zero,0(r4)
    982c:	21000104 	addi	r4,r4,4
    9830:	193ffd1e 	bne	r3,r4,9828 <__alt_data_end+0xff009828>
    9834:	8a000417 	ldw	r8,16(r17)
    9838:	89000504 	addi	r4,r17,20
    983c:	a18007cc 	andi	r6,r20,31
    9840:	4211883a 	add	r8,r8,r8
    9844:	4211883a 	add	r8,r8,r8
    9848:	2211883a 	add	r8,r4,r8
    984c:	30002326 	beq	r6,zero,98dc <__lshift+0x128>
    9850:	02400804 	movi	r9,32
    9854:	4993c83a 	sub	r9,r9,r6
    9858:	000b883a 	mov	r5,zero
    985c:	21c00017 	ldw	r7,0(r4)
    9860:	1815883a 	mov	r10,r3
    9864:	18c00104 	addi	r3,r3,4
    9868:	398e983a 	sll	r7,r7,r6
    986c:	21000104 	addi	r4,r4,4
    9870:	394ab03a 	or	r5,r7,r5
    9874:	197fff15 	stw	r5,-4(r3)
    9878:	217fff17 	ldw	r5,-4(r4)
    987c:	2a4ad83a 	srl	r5,r5,r9
    9880:	223ff636 	bltu	r4,r8,985c <__alt_data_end+0xff00985c>
    9884:	51400115 	stw	r5,4(r10)
    9888:	28001a1e 	bne	r5,zero,98f4 <__lshift+0x140>
    988c:	843fffc4 	addi	r16,r16,-1
    9890:	14000415 	stw	r16,16(r2)
    9894:	88000826 	beq	r17,zero,98b8 <__lshift+0x104>
    9898:	89000117 	ldw	r4,4(r17)
    989c:	90c01317 	ldw	r3,76(r18)
    98a0:	2109883a 	add	r4,r4,r4
    98a4:	2109883a 	add	r4,r4,r4
    98a8:	1907883a 	add	r3,r3,r4
    98ac:	19000017 	ldw	r4,0(r3)
    98b0:	89000015 	stw	r4,0(r17)
    98b4:	1c400015 	stw	r17,0(r3)
    98b8:	dfc00617 	ldw	ra,24(sp)
    98bc:	dd400517 	ldw	r21,20(sp)
    98c0:	dd000417 	ldw	r20,16(sp)
    98c4:	dcc00317 	ldw	r19,12(sp)
    98c8:	dc800217 	ldw	r18,8(sp)
    98cc:	dc400117 	ldw	r17,4(sp)
    98d0:	dc000017 	ldw	r16,0(sp)
    98d4:	dec00704 	addi	sp,sp,28
    98d8:	f800283a 	ret
    98dc:	21400017 	ldw	r5,0(r4)
    98e0:	18c00104 	addi	r3,r3,4
    98e4:	21000104 	addi	r4,r4,4
    98e8:	197fff15 	stw	r5,-4(r3)
    98ec:	223ffb36 	bltu	r4,r8,98dc <__alt_data_end+0xff0098dc>
    98f0:	003fe606 	br	988c <__alt_data_end+0xff00988c>
    98f4:	9c000084 	addi	r16,r19,2
    98f8:	003fe406 	br	988c <__alt_data_end+0xff00988c>

000098fc <__mcmp>:
    98fc:	20800417 	ldw	r2,16(r4)
    9900:	28c00417 	ldw	r3,16(r5)
    9904:	10c5c83a 	sub	r2,r2,r3
    9908:	1000111e 	bne	r2,zero,9950 <__mcmp+0x54>
    990c:	18c7883a 	add	r3,r3,r3
    9910:	18c7883a 	add	r3,r3,r3
    9914:	21000504 	addi	r4,r4,20
    9918:	29400504 	addi	r5,r5,20
    991c:	20c5883a 	add	r2,r4,r3
    9920:	28cb883a 	add	r5,r5,r3
    9924:	00000106 	br	992c <__mcmp+0x30>
    9928:	20800a2e 	bgeu	r4,r2,9954 <__mcmp+0x58>
    992c:	10bfff04 	addi	r2,r2,-4
    9930:	297fff04 	addi	r5,r5,-4
    9934:	11800017 	ldw	r6,0(r2)
    9938:	28c00017 	ldw	r3,0(r5)
    993c:	30fffa26 	beq	r6,r3,9928 <__alt_data_end+0xff009928>
    9940:	30c00236 	bltu	r6,r3,994c <__mcmp+0x50>
    9944:	00800044 	movi	r2,1
    9948:	f800283a 	ret
    994c:	00bfffc4 	movi	r2,-1
    9950:	f800283a 	ret
    9954:	0005883a 	mov	r2,zero
    9958:	f800283a 	ret

0000995c <__mdiff>:
    995c:	28c00417 	ldw	r3,16(r5)
    9960:	30800417 	ldw	r2,16(r6)
    9964:	defffa04 	addi	sp,sp,-24
    9968:	dcc00315 	stw	r19,12(sp)
    996c:	dc800215 	stw	r18,8(sp)
    9970:	dfc00515 	stw	ra,20(sp)
    9974:	dd000415 	stw	r20,16(sp)
    9978:	dc400115 	stw	r17,4(sp)
    997c:	dc000015 	stw	r16,0(sp)
    9980:	1887c83a 	sub	r3,r3,r2
    9984:	2825883a 	mov	r18,r5
    9988:	3027883a 	mov	r19,r6
    998c:	1800141e 	bne	r3,zero,99e0 <__mdiff+0x84>
    9990:	1085883a 	add	r2,r2,r2
    9994:	1085883a 	add	r2,r2,r2
    9998:	2a000504 	addi	r8,r5,20
    999c:	34000504 	addi	r16,r6,20
    99a0:	4087883a 	add	r3,r8,r2
    99a4:	8085883a 	add	r2,r16,r2
    99a8:	00000106 	br	99b0 <__mdiff+0x54>
    99ac:	40c0592e 	bgeu	r8,r3,9b14 <__mdiff+0x1b8>
    99b0:	18ffff04 	addi	r3,r3,-4
    99b4:	10bfff04 	addi	r2,r2,-4
    99b8:	19c00017 	ldw	r7,0(r3)
    99bc:	11400017 	ldw	r5,0(r2)
    99c0:	397ffa26 	beq	r7,r5,99ac <__alt_data_end+0xff0099ac>
    99c4:	3940592e 	bgeu	r7,r5,9b2c <__mdiff+0x1d0>
    99c8:	9005883a 	mov	r2,r18
    99cc:	4023883a 	mov	r17,r8
    99d0:	9825883a 	mov	r18,r19
    99d4:	05000044 	movi	r20,1
    99d8:	1027883a 	mov	r19,r2
    99dc:	00000406 	br	99f0 <__mdiff+0x94>
    99e0:	18005616 	blt	r3,zero,9b3c <__mdiff+0x1e0>
    99e4:	34400504 	addi	r17,r6,20
    99e8:	2c000504 	addi	r16,r5,20
    99ec:	0029883a 	mov	r20,zero
    99f0:	91400117 	ldw	r5,4(r18)
    99f4:	00090340 	call	9034 <_Balloc>
    99f8:	92400417 	ldw	r9,16(r18)
    99fc:	9b000417 	ldw	r12,16(r19)
    9a00:	12c00504 	addi	r11,r2,20
    9a04:	4a51883a 	add	r8,r9,r9
    9a08:	6319883a 	add	r12,r12,r12
    9a0c:	4211883a 	add	r8,r8,r8
    9a10:	6319883a 	add	r12,r12,r12
    9a14:	15000315 	stw	r20,12(r2)
    9a18:	8211883a 	add	r8,r16,r8
    9a1c:	8b19883a 	add	r12,r17,r12
    9a20:	0007883a 	mov	r3,zero
    9a24:	81400017 	ldw	r5,0(r16)
    9a28:	89c00017 	ldw	r7,0(r17)
    9a2c:	59800104 	addi	r6,r11,4
    9a30:	293fffcc 	andi	r4,r5,65535
    9a34:	20c7883a 	add	r3,r4,r3
    9a38:	393fffcc 	andi	r4,r7,65535
    9a3c:	1909c83a 	sub	r4,r3,r4
    9a40:	280ad43a 	srli	r5,r5,16
    9a44:	380ed43a 	srli	r7,r7,16
    9a48:	2007d43a 	srai	r3,r4,16
    9a4c:	213fffcc 	andi	r4,r4,65535
    9a50:	29cbc83a 	sub	r5,r5,r7
    9a54:	28c7883a 	add	r3,r5,r3
    9a58:	180a943a 	slli	r5,r3,16
    9a5c:	8c400104 	addi	r17,r17,4
    9a60:	84000104 	addi	r16,r16,4
    9a64:	2908b03a 	or	r4,r5,r4
    9a68:	59000015 	stw	r4,0(r11)
    9a6c:	1807d43a 	srai	r3,r3,16
    9a70:	3015883a 	mov	r10,r6
    9a74:	3017883a 	mov	r11,r6
    9a78:	8b3fea36 	bltu	r17,r12,9a24 <__alt_data_end+0xff009a24>
    9a7c:	8200162e 	bgeu	r16,r8,9ad8 <__mdiff+0x17c>
    9a80:	8017883a 	mov	r11,r16
    9a84:	59400017 	ldw	r5,0(r11)
    9a88:	31800104 	addi	r6,r6,4
    9a8c:	5ac00104 	addi	r11,r11,4
    9a90:	293fffcc 	andi	r4,r5,65535
    9a94:	20c7883a 	add	r3,r4,r3
    9a98:	280ed43a 	srli	r7,r5,16
    9a9c:	180bd43a 	srai	r5,r3,16
    9aa0:	193fffcc 	andi	r4,r3,65535
    9aa4:	3947883a 	add	r3,r7,r5
    9aa8:	180a943a 	slli	r5,r3,16
    9aac:	1807d43a 	srai	r3,r3,16
    9ab0:	2908b03a 	or	r4,r5,r4
    9ab4:	313fff15 	stw	r4,-4(r6)
    9ab8:	5a3ff236 	bltu	r11,r8,9a84 <__alt_data_end+0xff009a84>
    9abc:	0406303a 	nor	r3,zero,r16
    9ac0:	1a07883a 	add	r3,r3,r8
    9ac4:	1806d0ba 	srli	r3,r3,2
    9ac8:	18c00044 	addi	r3,r3,1
    9acc:	18c7883a 	add	r3,r3,r3
    9ad0:	18c7883a 	add	r3,r3,r3
    9ad4:	50d5883a 	add	r10,r10,r3
    9ad8:	50ffff04 	addi	r3,r10,-4
    9adc:	2000041e 	bne	r4,zero,9af0 <__mdiff+0x194>
    9ae0:	18ffff04 	addi	r3,r3,-4
    9ae4:	19000017 	ldw	r4,0(r3)
    9ae8:	4a7fffc4 	addi	r9,r9,-1
    9aec:	203ffc26 	beq	r4,zero,9ae0 <__alt_data_end+0xff009ae0>
    9af0:	12400415 	stw	r9,16(r2)
    9af4:	dfc00517 	ldw	ra,20(sp)
    9af8:	dd000417 	ldw	r20,16(sp)
    9afc:	dcc00317 	ldw	r19,12(sp)
    9b00:	dc800217 	ldw	r18,8(sp)
    9b04:	dc400117 	ldw	r17,4(sp)
    9b08:	dc000017 	ldw	r16,0(sp)
    9b0c:	dec00604 	addi	sp,sp,24
    9b10:	f800283a 	ret
    9b14:	000b883a 	mov	r5,zero
    9b18:	00090340 	call	9034 <_Balloc>
    9b1c:	00c00044 	movi	r3,1
    9b20:	10c00415 	stw	r3,16(r2)
    9b24:	10000515 	stw	zero,20(r2)
    9b28:	003ff206 	br	9af4 <__alt_data_end+0xff009af4>
    9b2c:	8023883a 	mov	r17,r16
    9b30:	0029883a 	mov	r20,zero
    9b34:	4021883a 	mov	r16,r8
    9b38:	003fad06 	br	99f0 <__alt_data_end+0xff0099f0>
    9b3c:	9005883a 	mov	r2,r18
    9b40:	94400504 	addi	r17,r18,20
    9b44:	9c000504 	addi	r16,r19,20
    9b48:	9825883a 	mov	r18,r19
    9b4c:	05000044 	movi	r20,1
    9b50:	1027883a 	mov	r19,r2
    9b54:	003fa606 	br	99f0 <__alt_data_end+0xff0099f0>

00009b58 <__ulp>:
    9b58:	295ffc2c 	andhi	r5,r5,32752
    9b5c:	00bf3034 	movhi	r2,64704
    9b60:	2887883a 	add	r3,r5,r2
    9b64:	00c0020e 	bge	zero,r3,9b70 <__ulp+0x18>
    9b68:	0005883a 	mov	r2,zero
    9b6c:	f800283a 	ret
    9b70:	00c7c83a 	sub	r3,zero,r3
    9b74:	1807d53a 	srai	r3,r3,20
    9b78:	008004c4 	movi	r2,19
    9b7c:	10c00b0e 	bge	r2,r3,9bac <__ulp+0x54>
    9b80:	18bffb04 	addi	r2,r3,-20
    9b84:	01000784 	movi	r4,30
    9b88:	0007883a 	mov	r3,zero
    9b8c:	20800516 	blt	r4,r2,9ba4 <__ulp+0x4c>
    9b90:	010007c4 	movi	r4,31
    9b94:	2089c83a 	sub	r4,r4,r2
    9b98:	00800044 	movi	r2,1
    9b9c:	1104983a 	sll	r2,r2,r4
    9ba0:	f800283a 	ret
    9ba4:	00800044 	movi	r2,1
    9ba8:	f800283a 	ret
    9bac:	01400234 	movhi	r5,8
    9bb0:	28c7d83a 	sra	r3,r5,r3
    9bb4:	0005883a 	mov	r2,zero
    9bb8:	f800283a 	ret

00009bbc <__b2d>:
    9bbc:	defffa04 	addi	sp,sp,-24
    9bc0:	dc000015 	stw	r16,0(sp)
    9bc4:	24000417 	ldw	r16,16(r4)
    9bc8:	dc400115 	stw	r17,4(sp)
    9bcc:	24400504 	addi	r17,r4,20
    9bd0:	8421883a 	add	r16,r16,r16
    9bd4:	8421883a 	add	r16,r16,r16
    9bd8:	8c21883a 	add	r16,r17,r16
    9bdc:	dc800215 	stw	r18,8(sp)
    9be0:	84bfff17 	ldw	r18,-4(r16)
    9be4:	dd000415 	stw	r20,16(sp)
    9be8:	dcc00315 	stw	r19,12(sp)
    9bec:	9009883a 	mov	r4,r18
    9bf0:	2829883a 	mov	r20,r5
    9bf4:	dfc00515 	stw	ra,20(sp)
    9bf8:	00093280 	call	9328 <__hi0bits>
    9bfc:	00c00804 	movi	r3,32
    9c00:	1889c83a 	sub	r4,r3,r2
    9c04:	a1000015 	stw	r4,0(r20)
    9c08:	01000284 	movi	r4,10
    9c0c:	84ffff04 	addi	r19,r16,-4
    9c10:	20801216 	blt	r4,r2,9c5c <__b2d+0xa0>
    9c14:	018002c4 	movi	r6,11
    9c18:	308dc83a 	sub	r6,r6,r2
    9c1c:	9186d83a 	srl	r3,r18,r6
    9c20:	18cffc34 	orhi	r3,r3,16368
    9c24:	8cc0212e 	bgeu	r17,r19,9cac <__b2d+0xf0>
    9c28:	813ffe17 	ldw	r4,-8(r16)
    9c2c:	218cd83a 	srl	r6,r4,r6
    9c30:	10800544 	addi	r2,r2,21
    9c34:	9084983a 	sll	r2,r18,r2
    9c38:	1184b03a 	or	r2,r2,r6
    9c3c:	dfc00517 	ldw	ra,20(sp)
    9c40:	dd000417 	ldw	r20,16(sp)
    9c44:	dcc00317 	ldw	r19,12(sp)
    9c48:	dc800217 	ldw	r18,8(sp)
    9c4c:	dc400117 	ldw	r17,4(sp)
    9c50:	dc000017 	ldw	r16,0(sp)
    9c54:	dec00604 	addi	sp,sp,24
    9c58:	f800283a 	ret
    9c5c:	8cc00f2e 	bgeu	r17,r19,9c9c <__b2d+0xe0>
    9c60:	117ffd44 	addi	r5,r2,-11
    9c64:	80bffe17 	ldw	r2,-8(r16)
    9c68:	28000e26 	beq	r5,zero,9ca4 <__b2d+0xe8>
    9c6c:	1949c83a 	sub	r4,r3,r5
    9c70:	9164983a 	sll	r18,r18,r5
    9c74:	1106d83a 	srl	r3,r2,r4
    9c78:	81bffe04 	addi	r6,r16,-8
    9c7c:	948ffc34 	orhi	r18,r18,16368
    9c80:	90c6b03a 	or	r3,r18,r3
    9c84:	89800e2e 	bgeu	r17,r6,9cc0 <__b2d+0x104>
    9c88:	81bffd17 	ldw	r6,-12(r16)
    9c8c:	1144983a 	sll	r2,r2,r5
    9c90:	310ad83a 	srl	r5,r6,r4
    9c94:	2884b03a 	or	r2,r5,r2
    9c98:	003fe806 	br	9c3c <__alt_data_end+0xff009c3c>
    9c9c:	10bffd44 	addi	r2,r2,-11
    9ca0:	1000041e 	bne	r2,zero,9cb4 <__b2d+0xf8>
    9ca4:	90cffc34 	orhi	r3,r18,16368
    9ca8:	003fe406 	br	9c3c <__alt_data_end+0xff009c3c>
    9cac:	000d883a 	mov	r6,zero
    9cb0:	003fdf06 	br	9c30 <__alt_data_end+0xff009c30>
    9cb4:	90a4983a 	sll	r18,r18,r2
    9cb8:	0005883a 	mov	r2,zero
    9cbc:	003ff906 	br	9ca4 <__alt_data_end+0xff009ca4>
    9cc0:	1144983a 	sll	r2,r2,r5
    9cc4:	003fdd06 	br	9c3c <__alt_data_end+0xff009c3c>

00009cc8 <__d2b>:
    9cc8:	defff804 	addi	sp,sp,-32
    9ccc:	dc000215 	stw	r16,8(sp)
    9cd0:	3021883a 	mov	r16,r6
    9cd4:	dc400315 	stw	r17,12(sp)
    9cd8:	8022907a 	slli	r17,r16,1
    9cdc:	dd000615 	stw	r20,24(sp)
    9ce0:	2829883a 	mov	r20,r5
    9ce4:	01400044 	movi	r5,1
    9ce8:	dcc00515 	stw	r19,20(sp)
    9cec:	dc800415 	stw	r18,16(sp)
    9cf0:	dfc00715 	stw	ra,28(sp)
    9cf4:	3825883a 	mov	r18,r7
    9cf8:	8822d57a 	srli	r17,r17,21
    9cfc:	00090340 	call	9034 <_Balloc>
    9d00:	1027883a 	mov	r19,r2
    9d04:	00800434 	movhi	r2,16
    9d08:	10bfffc4 	addi	r2,r2,-1
    9d0c:	808c703a 	and	r6,r16,r2
    9d10:	88000126 	beq	r17,zero,9d18 <__d2b+0x50>
    9d14:	31800434 	orhi	r6,r6,16
    9d18:	d9800015 	stw	r6,0(sp)
    9d1c:	a0002426 	beq	r20,zero,9db0 <__d2b+0xe8>
    9d20:	d9000104 	addi	r4,sp,4
    9d24:	dd000115 	stw	r20,4(sp)
    9d28:	00093900 	call	9390 <__lo0bits>
    9d2c:	d8c00017 	ldw	r3,0(sp)
    9d30:	10002f1e 	bne	r2,zero,9df0 <__d2b+0x128>
    9d34:	d9000117 	ldw	r4,4(sp)
    9d38:	99000515 	stw	r4,20(r19)
    9d3c:	1821003a 	cmpeq	r16,r3,zero
    9d40:	01000084 	movi	r4,2
    9d44:	2421c83a 	sub	r16,r4,r16
    9d48:	98c00615 	stw	r3,24(r19)
    9d4c:	9c000415 	stw	r16,16(r19)
    9d50:	88001f1e 	bne	r17,zero,9dd0 <__d2b+0x108>
    9d54:	10bef384 	addi	r2,r2,-1074
    9d58:	90800015 	stw	r2,0(r18)
    9d5c:	00900034 	movhi	r2,16384
    9d60:	10bfffc4 	addi	r2,r2,-1
    9d64:	8085883a 	add	r2,r16,r2
    9d68:	1085883a 	add	r2,r2,r2
    9d6c:	1085883a 	add	r2,r2,r2
    9d70:	9885883a 	add	r2,r19,r2
    9d74:	11000517 	ldw	r4,20(r2)
    9d78:	8020917a 	slli	r16,r16,5
    9d7c:	00093280 	call	9328 <__hi0bits>
    9d80:	d8c00817 	ldw	r3,32(sp)
    9d84:	8085c83a 	sub	r2,r16,r2
    9d88:	18800015 	stw	r2,0(r3)
    9d8c:	9805883a 	mov	r2,r19
    9d90:	dfc00717 	ldw	ra,28(sp)
    9d94:	dd000617 	ldw	r20,24(sp)
    9d98:	dcc00517 	ldw	r19,20(sp)
    9d9c:	dc800417 	ldw	r18,16(sp)
    9da0:	dc400317 	ldw	r17,12(sp)
    9da4:	dc000217 	ldw	r16,8(sp)
    9da8:	dec00804 	addi	sp,sp,32
    9dac:	f800283a 	ret
    9db0:	d809883a 	mov	r4,sp
    9db4:	00093900 	call	9390 <__lo0bits>
    9db8:	d8c00017 	ldw	r3,0(sp)
    9dbc:	04000044 	movi	r16,1
    9dc0:	9c000415 	stw	r16,16(r19)
    9dc4:	98c00515 	stw	r3,20(r19)
    9dc8:	10800804 	addi	r2,r2,32
    9dcc:	883fe126 	beq	r17,zero,9d54 <__alt_data_end+0xff009d54>
    9dd0:	00c00d44 	movi	r3,53
    9dd4:	8c7ef344 	addi	r17,r17,-1075
    9dd8:	88a3883a 	add	r17,r17,r2
    9ddc:	1885c83a 	sub	r2,r3,r2
    9de0:	d8c00817 	ldw	r3,32(sp)
    9de4:	94400015 	stw	r17,0(r18)
    9de8:	18800015 	stw	r2,0(r3)
    9dec:	003fe706 	br	9d8c <__alt_data_end+0xff009d8c>
    9df0:	01000804 	movi	r4,32
    9df4:	2089c83a 	sub	r4,r4,r2
    9df8:	1908983a 	sll	r4,r3,r4
    9dfc:	d9400117 	ldw	r5,4(sp)
    9e00:	1886d83a 	srl	r3,r3,r2
    9e04:	2148b03a 	or	r4,r4,r5
    9e08:	99000515 	stw	r4,20(r19)
    9e0c:	d8c00015 	stw	r3,0(sp)
    9e10:	003fca06 	br	9d3c <__alt_data_end+0xff009d3c>

00009e14 <__ratio>:
    9e14:	defff904 	addi	sp,sp,-28
    9e18:	dc400315 	stw	r17,12(sp)
    9e1c:	2823883a 	mov	r17,r5
    9e20:	d9400104 	addi	r5,sp,4
    9e24:	dfc00615 	stw	ra,24(sp)
    9e28:	dcc00515 	stw	r19,20(sp)
    9e2c:	dc800415 	stw	r18,16(sp)
    9e30:	2027883a 	mov	r19,r4
    9e34:	dc000215 	stw	r16,8(sp)
    9e38:	0009bbc0 	call	9bbc <__b2d>
    9e3c:	d80b883a 	mov	r5,sp
    9e40:	8809883a 	mov	r4,r17
    9e44:	1025883a 	mov	r18,r2
    9e48:	1821883a 	mov	r16,r3
    9e4c:	0009bbc0 	call	9bbc <__b2d>
    9e50:	8a000417 	ldw	r8,16(r17)
    9e54:	99000417 	ldw	r4,16(r19)
    9e58:	d9400117 	ldw	r5,4(sp)
    9e5c:	2209c83a 	sub	r4,r4,r8
    9e60:	2010917a 	slli	r8,r4,5
    9e64:	d9000017 	ldw	r4,0(sp)
    9e68:	2909c83a 	sub	r4,r5,r4
    9e6c:	4109883a 	add	r4,r8,r4
    9e70:	01000e0e 	bge	zero,r4,9eac <__ratio+0x98>
    9e74:	2008953a 	slli	r4,r4,20
    9e78:	2421883a 	add	r16,r4,r16
    9e7c:	100d883a 	mov	r6,r2
    9e80:	180f883a 	mov	r7,r3
    9e84:	9009883a 	mov	r4,r18
    9e88:	800b883a 	mov	r5,r16
    9e8c:	000daf80 	call	daf8 <__divdf3>
    9e90:	dfc00617 	ldw	ra,24(sp)
    9e94:	dcc00517 	ldw	r19,20(sp)
    9e98:	dc800417 	ldw	r18,16(sp)
    9e9c:	dc400317 	ldw	r17,12(sp)
    9ea0:	dc000217 	ldw	r16,8(sp)
    9ea4:	dec00704 	addi	sp,sp,28
    9ea8:	f800283a 	ret
    9eac:	2008953a 	slli	r4,r4,20
    9eb0:	1907c83a 	sub	r3,r3,r4
    9eb4:	003ff106 	br	9e7c <__alt_data_end+0xff009e7c>

00009eb8 <_mprec_log10>:
    9eb8:	defffe04 	addi	sp,sp,-8
    9ebc:	dc000015 	stw	r16,0(sp)
    9ec0:	dfc00115 	stw	ra,4(sp)
    9ec4:	008005c4 	movi	r2,23
    9ec8:	2021883a 	mov	r16,r4
    9ecc:	11000d0e 	bge	r2,r4,9f04 <_mprec_log10+0x4c>
    9ed0:	0005883a 	mov	r2,zero
    9ed4:	00cffc34 	movhi	r3,16368
    9ed8:	843fffc4 	addi	r16,r16,-1
    9edc:	000d883a 	mov	r6,zero
    9ee0:	01d00934 	movhi	r7,16420
    9ee4:	1009883a 	mov	r4,r2
    9ee8:	180b883a 	mov	r5,r3
    9eec:	000e6380 	call	e638 <__muldf3>
    9ef0:	803ff91e 	bne	r16,zero,9ed8 <__alt_data_end+0xff009ed8>
    9ef4:	dfc00117 	ldw	ra,4(sp)
    9ef8:	dc000017 	ldw	r16,0(sp)
    9efc:	dec00204 	addi	sp,sp,8
    9f00:	f800283a 	ret
    9f04:	202090fa 	slli	r16,r4,3
    9f08:	00800074 	movhi	r2,1
    9f0c:	108a2804 	addi	r2,r2,10400
    9f10:	1421883a 	add	r16,r2,r16
    9f14:	80800017 	ldw	r2,0(r16)
    9f18:	80c00117 	ldw	r3,4(r16)
    9f1c:	dfc00117 	ldw	ra,4(sp)
    9f20:	dc000017 	ldw	r16,0(sp)
    9f24:	dec00204 	addi	sp,sp,8
    9f28:	f800283a 	ret

00009f2c <__copybits>:
    9f2c:	297fffc4 	addi	r5,r5,-1
    9f30:	280fd17a 	srai	r7,r5,5
    9f34:	30c00417 	ldw	r3,16(r6)
    9f38:	30800504 	addi	r2,r6,20
    9f3c:	39c00044 	addi	r7,r7,1
    9f40:	18c7883a 	add	r3,r3,r3
    9f44:	39cf883a 	add	r7,r7,r7
    9f48:	18c7883a 	add	r3,r3,r3
    9f4c:	39cf883a 	add	r7,r7,r7
    9f50:	10c7883a 	add	r3,r2,r3
    9f54:	21cf883a 	add	r7,r4,r7
    9f58:	10c00d2e 	bgeu	r2,r3,9f90 <__copybits+0x64>
    9f5c:	200b883a 	mov	r5,r4
    9f60:	12000017 	ldw	r8,0(r2)
    9f64:	29400104 	addi	r5,r5,4
    9f68:	10800104 	addi	r2,r2,4
    9f6c:	2a3fff15 	stw	r8,-4(r5)
    9f70:	10fffb36 	bltu	r2,r3,9f60 <__alt_data_end+0xff009f60>
    9f74:	1985c83a 	sub	r2,r3,r6
    9f78:	10bffac4 	addi	r2,r2,-21
    9f7c:	1004d0ba 	srli	r2,r2,2
    9f80:	10800044 	addi	r2,r2,1
    9f84:	1085883a 	add	r2,r2,r2
    9f88:	1085883a 	add	r2,r2,r2
    9f8c:	2089883a 	add	r4,r4,r2
    9f90:	21c0032e 	bgeu	r4,r7,9fa0 <__copybits+0x74>
    9f94:	20000015 	stw	zero,0(r4)
    9f98:	21000104 	addi	r4,r4,4
    9f9c:	21fffd36 	bltu	r4,r7,9f94 <__alt_data_end+0xff009f94>
    9fa0:	f800283a 	ret

00009fa4 <__any_on>:
    9fa4:	20c00417 	ldw	r3,16(r4)
    9fa8:	2805d17a 	srai	r2,r5,5
    9fac:	21000504 	addi	r4,r4,20
    9fb0:	18800d0e 	bge	r3,r2,9fe8 <__any_on+0x44>
    9fb4:	18c7883a 	add	r3,r3,r3
    9fb8:	18c7883a 	add	r3,r3,r3
    9fbc:	20c7883a 	add	r3,r4,r3
    9fc0:	20c0192e 	bgeu	r4,r3,a028 <__any_on+0x84>
    9fc4:	18bfff17 	ldw	r2,-4(r3)
    9fc8:	18ffff04 	addi	r3,r3,-4
    9fcc:	1000041e 	bne	r2,zero,9fe0 <__any_on+0x3c>
    9fd0:	20c0142e 	bgeu	r4,r3,a024 <__any_on+0x80>
    9fd4:	18ffff04 	addi	r3,r3,-4
    9fd8:	19400017 	ldw	r5,0(r3)
    9fdc:	283ffc26 	beq	r5,zero,9fd0 <__alt_data_end+0xff009fd0>
    9fe0:	00800044 	movi	r2,1
    9fe4:	f800283a 	ret
    9fe8:	10c00a0e 	bge	r2,r3,a014 <__any_on+0x70>
    9fec:	1085883a 	add	r2,r2,r2
    9ff0:	1085883a 	add	r2,r2,r2
    9ff4:	294007cc 	andi	r5,r5,31
    9ff8:	2087883a 	add	r3,r4,r2
    9ffc:	283ff026 	beq	r5,zero,9fc0 <__alt_data_end+0xff009fc0>
    a000:	19800017 	ldw	r6,0(r3)
    a004:	3144d83a 	srl	r2,r6,r5
    a008:	114a983a 	sll	r5,r2,r5
    a00c:	317ff41e 	bne	r6,r5,9fe0 <__alt_data_end+0xff009fe0>
    a010:	003feb06 	br	9fc0 <__alt_data_end+0xff009fc0>
    a014:	1085883a 	add	r2,r2,r2
    a018:	1085883a 	add	r2,r2,r2
    a01c:	2087883a 	add	r3,r4,r2
    a020:	003fe706 	br	9fc0 <__alt_data_end+0xff009fc0>
    a024:	f800283a 	ret
    a028:	0005883a 	mov	r2,zero
    a02c:	f800283a 	ret

0000a030 <_realloc_r>:
    a030:	defff604 	addi	sp,sp,-40
    a034:	dc800215 	stw	r18,8(sp)
    a038:	dfc00915 	stw	ra,36(sp)
    a03c:	df000815 	stw	fp,32(sp)
    a040:	ddc00715 	stw	r23,28(sp)
    a044:	dd800615 	stw	r22,24(sp)
    a048:	dd400515 	stw	r21,20(sp)
    a04c:	dd000415 	stw	r20,16(sp)
    a050:	dcc00315 	stw	r19,12(sp)
    a054:	dc400115 	stw	r17,4(sp)
    a058:	dc000015 	stw	r16,0(sp)
    a05c:	3025883a 	mov	r18,r6
    a060:	2800b726 	beq	r5,zero,a340 <_realloc_r+0x310>
    a064:	282b883a 	mov	r21,r5
    a068:	2029883a 	mov	r20,r4
    a06c:	000fe300 	call	fe30 <__malloc_lock>
    a070:	a8bfff17 	ldw	r2,-4(r21)
    a074:	043fff04 	movi	r16,-4
    a078:	90c002c4 	addi	r3,r18,11
    a07c:	01000584 	movi	r4,22
    a080:	acfffe04 	addi	r19,r21,-8
    a084:	1420703a 	and	r16,r2,r16
    a088:	20c0332e 	bgeu	r4,r3,a158 <_realloc_r+0x128>
    a08c:	047ffe04 	movi	r17,-8
    a090:	1c62703a 	and	r17,r3,r17
    a094:	8807883a 	mov	r3,r17
    a098:	88005816 	blt	r17,zero,a1fc <_realloc_r+0x1cc>
    a09c:	8c805736 	bltu	r17,r18,a1fc <_realloc_r+0x1cc>
    a0a0:	80c0300e 	bge	r16,r3,a164 <_realloc_r+0x134>
    a0a4:	07000074 	movhi	fp,1
    a0a8:	e70aad04 	addi	fp,fp,10932
    a0ac:	e1c00217 	ldw	r7,8(fp)
    a0b0:	9c09883a 	add	r4,r19,r16
    a0b4:	22000117 	ldw	r8,4(r4)
    a0b8:	21c06326 	beq	r4,r7,a248 <_realloc_r+0x218>
    a0bc:	017fff84 	movi	r5,-2
    a0c0:	414a703a 	and	r5,r8,r5
    a0c4:	214b883a 	add	r5,r4,r5
    a0c8:	29800117 	ldw	r6,4(r5)
    a0cc:	3180004c 	andi	r6,r6,1
    a0d0:	30003f26 	beq	r6,zero,a1d0 <_realloc_r+0x1a0>
    a0d4:	1080004c 	andi	r2,r2,1
    a0d8:	10008326 	beq	r2,zero,a2e8 <_realloc_r+0x2b8>
    a0dc:	900b883a 	mov	r5,r18
    a0e0:	a009883a 	mov	r4,r20
    a0e4:	00031480 	call	3148 <_malloc_r>
    a0e8:	1025883a 	mov	r18,r2
    a0ec:	10011e26 	beq	r2,zero,a568 <_realloc_r+0x538>
    a0f0:	a93fff17 	ldw	r4,-4(r21)
    a0f4:	10fffe04 	addi	r3,r2,-8
    a0f8:	00bfff84 	movi	r2,-2
    a0fc:	2084703a 	and	r2,r4,r2
    a100:	9885883a 	add	r2,r19,r2
    a104:	1880ee26 	beq	r3,r2,a4c0 <_realloc_r+0x490>
    a108:	81bfff04 	addi	r6,r16,-4
    a10c:	00800904 	movi	r2,36
    a110:	1180b836 	bltu	r2,r6,a3f4 <_realloc_r+0x3c4>
    a114:	00c004c4 	movi	r3,19
    a118:	19809636 	bltu	r3,r6,a374 <_realloc_r+0x344>
    a11c:	9005883a 	mov	r2,r18
    a120:	a807883a 	mov	r3,r21
    a124:	19000017 	ldw	r4,0(r3)
    a128:	11000015 	stw	r4,0(r2)
    a12c:	19000117 	ldw	r4,4(r3)
    a130:	11000115 	stw	r4,4(r2)
    a134:	18c00217 	ldw	r3,8(r3)
    a138:	10c00215 	stw	r3,8(r2)
    a13c:	a80b883a 	mov	r5,r21
    a140:	a009883a 	mov	r4,r20
    a144:	0007f980 	call	7f98 <_free_r>
    a148:	a009883a 	mov	r4,r20
    a14c:	000fe540 	call	fe54 <__malloc_unlock>
    a150:	9005883a 	mov	r2,r18
    a154:	00001206 	br	a1a0 <_realloc_r+0x170>
    a158:	00c00404 	movi	r3,16
    a15c:	1823883a 	mov	r17,r3
    a160:	003fce06 	br	a09c <__alt_data_end+0xff00a09c>
    a164:	a825883a 	mov	r18,r21
    a168:	8445c83a 	sub	r2,r16,r17
    a16c:	00c003c4 	movi	r3,15
    a170:	18802636 	bltu	r3,r2,a20c <_realloc_r+0x1dc>
    a174:	99800117 	ldw	r6,4(r19)
    a178:	9c07883a 	add	r3,r19,r16
    a17c:	3180004c 	andi	r6,r6,1
    a180:	3420b03a 	or	r16,r6,r16
    a184:	9c000115 	stw	r16,4(r19)
    a188:	18800117 	ldw	r2,4(r3)
    a18c:	10800054 	ori	r2,r2,1
    a190:	18800115 	stw	r2,4(r3)
    a194:	a009883a 	mov	r4,r20
    a198:	000fe540 	call	fe54 <__malloc_unlock>
    a19c:	9005883a 	mov	r2,r18
    a1a0:	dfc00917 	ldw	ra,36(sp)
    a1a4:	df000817 	ldw	fp,32(sp)
    a1a8:	ddc00717 	ldw	r23,28(sp)
    a1ac:	dd800617 	ldw	r22,24(sp)
    a1b0:	dd400517 	ldw	r21,20(sp)
    a1b4:	dd000417 	ldw	r20,16(sp)
    a1b8:	dcc00317 	ldw	r19,12(sp)
    a1bc:	dc800217 	ldw	r18,8(sp)
    a1c0:	dc400117 	ldw	r17,4(sp)
    a1c4:	dc000017 	ldw	r16,0(sp)
    a1c8:	dec00a04 	addi	sp,sp,40
    a1cc:	f800283a 	ret
    a1d0:	017fff04 	movi	r5,-4
    a1d4:	414a703a 	and	r5,r8,r5
    a1d8:	814d883a 	add	r6,r16,r5
    a1dc:	30c01f16 	blt	r6,r3,a25c <_realloc_r+0x22c>
    a1e0:	20800317 	ldw	r2,12(r4)
    a1e4:	20c00217 	ldw	r3,8(r4)
    a1e8:	a825883a 	mov	r18,r21
    a1ec:	3021883a 	mov	r16,r6
    a1f0:	18800315 	stw	r2,12(r3)
    a1f4:	10c00215 	stw	r3,8(r2)
    a1f8:	003fdb06 	br	a168 <__alt_data_end+0xff00a168>
    a1fc:	00800304 	movi	r2,12
    a200:	a0800015 	stw	r2,0(r20)
    a204:	0005883a 	mov	r2,zero
    a208:	003fe506 	br	a1a0 <__alt_data_end+0xff00a1a0>
    a20c:	98c00117 	ldw	r3,4(r19)
    a210:	9c4b883a 	add	r5,r19,r17
    a214:	11000054 	ori	r4,r2,1
    a218:	18c0004c 	andi	r3,r3,1
    a21c:	1c62b03a 	or	r17,r3,r17
    a220:	9c400115 	stw	r17,4(r19)
    a224:	29000115 	stw	r4,4(r5)
    a228:	2885883a 	add	r2,r5,r2
    a22c:	10c00117 	ldw	r3,4(r2)
    a230:	29400204 	addi	r5,r5,8
    a234:	a009883a 	mov	r4,r20
    a238:	18c00054 	ori	r3,r3,1
    a23c:	10c00115 	stw	r3,4(r2)
    a240:	0007f980 	call	7f98 <_free_r>
    a244:	003fd306 	br	a194 <__alt_data_end+0xff00a194>
    a248:	017fff04 	movi	r5,-4
    a24c:	414a703a 	and	r5,r8,r5
    a250:	89800404 	addi	r6,r17,16
    a254:	8151883a 	add	r8,r16,r5
    a258:	4180590e 	bge	r8,r6,a3c0 <_realloc_r+0x390>
    a25c:	1080004c 	andi	r2,r2,1
    a260:	103f9e1e 	bne	r2,zero,a0dc <__alt_data_end+0xff00a0dc>
    a264:	adbffe17 	ldw	r22,-8(r21)
    a268:	00bfff04 	movi	r2,-4
    a26c:	9dadc83a 	sub	r22,r19,r22
    a270:	b1800117 	ldw	r6,4(r22)
    a274:	3084703a 	and	r2,r6,r2
    a278:	20002026 	beq	r4,zero,a2fc <_realloc_r+0x2cc>
    a27c:	80af883a 	add	r23,r16,r2
    a280:	b96f883a 	add	r23,r23,r5
    a284:	21c05f26 	beq	r4,r7,a404 <_realloc_r+0x3d4>
    a288:	b8c01c16 	blt	r23,r3,a2fc <_realloc_r+0x2cc>
    a28c:	20800317 	ldw	r2,12(r4)
    a290:	20c00217 	ldw	r3,8(r4)
    a294:	81bfff04 	addi	r6,r16,-4
    a298:	01000904 	movi	r4,36
    a29c:	18800315 	stw	r2,12(r3)
    a2a0:	10c00215 	stw	r3,8(r2)
    a2a4:	b0c00217 	ldw	r3,8(r22)
    a2a8:	b0800317 	ldw	r2,12(r22)
    a2ac:	b4800204 	addi	r18,r22,8
    a2b0:	18800315 	stw	r2,12(r3)
    a2b4:	10c00215 	stw	r3,8(r2)
    a2b8:	21801b36 	bltu	r4,r6,a328 <_realloc_r+0x2f8>
    a2bc:	008004c4 	movi	r2,19
    a2c0:	1180352e 	bgeu	r2,r6,a398 <_realloc_r+0x368>
    a2c4:	a8800017 	ldw	r2,0(r21)
    a2c8:	b0800215 	stw	r2,8(r22)
    a2cc:	a8800117 	ldw	r2,4(r21)
    a2d0:	b0800315 	stw	r2,12(r22)
    a2d4:	008006c4 	movi	r2,27
    a2d8:	11807f36 	bltu	r2,r6,a4d8 <_realloc_r+0x4a8>
    a2dc:	b0800404 	addi	r2,r22,16
    a2e0:	ad400204 	addi	r21,r21,8
    a2e4:	00002d06 	br	a39c <_realloc_r+0x36c>
    a2e8:	adbffe17 	ldw	r22,-8(r21)
    a2ec:	00bfff04 	movi	r2,-4
    a2f0:	9dadc83a 	sub	r22,r19,r22
    a2f4:	b1000117 	ldw	r4,4(r22)
    a2f8:	2084703a 	and	r2,r4,r2
    a2fc:	b03f7726 	beq	r22,zero,a0dc <__alt_data_end+0xff00a0dc>
    a300:	80af883a 	add	r23,r16,r2
    a304:	b8ff7516 	blt	r23,r3,a0dc <__alt_data_end+0xff00a0dc>
    a308:	b0800317 	ldw	r2,12(r22)
    a30c:	b0c00217 	ldw	r3,8(r22)
    a310:	81bfff04 	addi	r6,r16,-4
    a314:	01000904 	movi	r4,36
    a318:	18800315 	stw	r2,12(r3)
    a31c:	10c00215 	stw	r3,8(r2)
    a320:	b4800204 	addi	r18,r22,8
    a324:	21bfe52e 	bgeu	r4,r6,a2bc <__alt_data_end+0xff00a2bc>
    a328:	a80b883a 	mov	r5,r21
    a32c:	9009883a 	mov	r4,r18
    a330:	0008db00 	call	8db0 <memmove>
    a334:	b821883a 	mov	r16,r23
    a338:	b027883a 	mov	r19,r22
    a33c:	003f8a06 	br	a168 <__alt_data_end+0xff00a168>
    a340:	300b883a 	mov	r5,r6
    a344:	dfc00917 	ldw	ra,36(sp)
    a348:	df000817 	ldw	fp,32(sp)
    a34c:	ddc00717 	ldw	r23,28(sp)
    a350:	dd800617 	ldw	r22,24(sp)
    a354:	dd400517 	ldw	r21,20(sp)
    a358:	dd000417 	ldw	r20,16(sp)
    a35c:	dcc00317 	ldw	r19,12(sp)
    a360:	dc800217 	ldw	r18,8(sp)
    a364:	dc400117 	ldw	r17,4(sp)
    a368:	dc000017 	ldw	r16,0(sp)
    a36c:	dec00a04 	addi	sp,sp,40
    a370:	00031481 	jmpi	3148 <_malloc_r>
    a374:	a8c00017 	ldw	r3,0(r21)
    a378:	90c00015 	stw	r3,0(r18)
    a37c:	a8c00117 	ldw	r3,4(r21)
    a380:	90c00115 	stw	r3,4(r18)
    a384:	00c006c4 	movi	r3,27
    a388:	19804536 	bltu	r3,r6,a4a0 <_realloc_r+0x470>
    a38c:	90800204 	addi	r2,r18,8
    a390:	a8c00204 	addi	r3,r21,8
    a394:	003f6306 	br	a124 <__alt_data_end+0xff00a124>
    a398:	9005883a 	mov	r2,r18
    a39c:	a8c00017 	ldw	r3,0(r21)
    a3a0:	b821883a 	mov	r16,r23
    a3a4:	b027883a 	mov	r19,r22
    a3a8:	10c00015 	stw	r3,0(r2)
    a3ac:	a8c00117 	ldw	r3,4(r21)
    a3b0:	10c00115 	stw	r3,4(r2)
    a3b4:	a8c00217 	ldw	r3,8(r21)
    a3b8:	10c00215 	stw	r3,8(r2)
    a3bc:	003f6a06 	br	a168 <__alt_data_end+0xff00a168>
    a3c0:	9c67883a 	add	r19,r19,r17
    a3c4:	4445c83a 	sub	r2,r8,r17
    a3c8:	e4c00215 	stw	r19,8(fp)
    a3cc:	10800054 	ori	r2,r2,1
    a3d0:	98800115 	stw	r2,4(r19)
    a3d4:	a8bfff17 	ldw	r2,-4(r21)
    a3d8:	a009883a 	mov	r4,r20
    a3dc:	1080004c 	andi	r2,r2,1
    a3e0:	1462b03a 	or	r17,r2,r17
    a3e4:	ac7fff15 	stw	r17,-4(r21)
    a3e8:	000fe540 	call	fe54 <__malloc_unlock>
    a3ec:	a805883a 	mov	r2,r21
    a3f0:	003f6b06 	br	a1a0 <__alt_data_end+0xff00a1a0>
    a3f4:	a80b883a 	mov	r5,r21
    a3f8:	9009883a 	mov	r4,r18
    a3fc:	0008db00 	call	8db0 <memmove>
    a400:	003f4e06 	br	a13c <__alt_data_end+0xff00a13c>
    a404:	89000404 	addi	r4,r17,16
    a408:	b93fbc16 	blt	r23,r4,a2fc <__alt_data_end+0xff00a2fc>
    a40c:	b0800317 	ldw	r2,12(r22)
    a410:	b0c00217 	ldw	r3,8(r22)
    a414:	81bfff04 	addi	r6,r16,-4
    a418:	01000904 	movi	r4,36
    a41c:	18800315 	stw	r2,12(r3)
    a420:	10c00215 	stw	r3,8(r2)
    a424:	b4800204 	addi	r18,r22,8
    a428:	21804336 	bltu	r4,r6,a538 <_realloc_r+0x508>
    a42c:	008004c4 	movi	r2,19
    a430:	11803f2e 	bgeu	r2,r6,a530 <_realloc_r+0x500>
    a434:	a8800017 	ldw	r2,0(r21)
    a438:	b0800215 	stw	r2,8(r22)
    a43c:	a8800117 	ldw	r2,4(r21)
    a440:	b0800315 	stw	r2,12(r22)
    a444:	008006c4 	movi	r2,27
    a448:	11803f36 	bltu	r2,r6,a548 <_realloc_r+0x518>
    a44c:	b0800404 	addi	r2,r22,16
    a450:	ad400204 	addi	r21,r21,8
    a454:	a8c00017 	ldw	r3,0(r21)
    a458:	10c00015 	stw	r3,0(r2)
    a45c:	a8c00117 	ldw	r3,4(r21)
    a460:	10c00115 	stw	r3,4(r2)
    a464:	a8c00217 	ldw	r3,8(r21)
    a468:	10c00215 	stw	r3,8(r2)
    a46c:	b447883a 	add	r3,r22,r17
    a470:	bc45c83a 	sub	r2,r23,r17
    a474:	e0c00215 	stw	r3,8(fp)
    a478:	10800054 	ori	r2,r2,1
    a47c:	18800115 	stw	r2,4(r3)
    a480:	b0800117 	ldw	r2,4(r22)
    a484:	a009883a 	mov	r4,r20
    a488:	1080004c 	andi	r2,r2,1
    a48c:	1462b03a 	or	r17,r2,r17
    a490:	b4400115 	stw	r17,4(r22)
    a494:	000fe540 	call	fe54 <__malloc_unlock>
    a498:	9005883a 	mov	r2,r18
    a49c:	003f4006 	br	a1a0 <__alt_data_end+0xff00a1a0>
    a4a0:	a8c00217 	ldw	r3,8(r21)
    a4a4:	90c00215 	stw	r3,8(r18)
    a4a8:	a8c00317 	ldw	r3,12(r21)
    a4ac:	90c00315 	stw	r3,12(r18)
    a4b0:	30801126 	beq	r6,r2,a4f8 <_realloc_r+0x4c8>
    a4b4:	90800404 	addi	r2,r18,16
    a4b8:	a8c00404 	addi	r3,r21,16
    a4bc:	003f1906 	br	a124 <__alt_data_end+0xff00a124>
    a4c0:	90ffff17 	ldw	r3,-4(r18)
    a4c4:	00bfff04 	movi	r2,-4
    a4c8:	a825883a 	mov	r18,r21
    a4cc:	1884703a 	and	r2,r3,r2
    a4d0:	80a1883a 	add	r16,r16,r2
    a4d4:	003f2406 	br	a168 <__alt_data_end+0xff00a168>
    a4d8:	a8800217 	ldw	r2,8(r21)
    a4dc:	b0800415 	stw	r2,16(r22)
    a4e0:	a8800317 	ldw	r2,12(r21)
    a4e4:	b0800515 	stw	r2,20(r22)
    a4e8:	31000a26 	beq	r6,r4,a514 <_realloc_r+0x4e4>
    a4ec:	b0800604 	addi	r2,r22,24
    a4f0:	ad400404 	addi	r21,r21,16
    a4f4:	003fa906 	br	a39c <__alt_data_end+0xff00a39c>
    a4f8:	a9000417 	ldw	r4,16(r21)
    a4fc:	90800604 	addi	r2,r18,24
    a500:	a8c00604 	addi	r3,r21,24
    a504:	91000415 	stw	r4,16(r18)
    a508:	a9000517 	ldw	r4,20(r21)
    a50c:	91000515 	stw	r4,20(r18)
    a510:	003f0406 	br	a124 <__alt_data_end+0xff00a124>
    a514:	a8c00417 	ldw	r3,16(r21)
    a518:	ad400604 	addi	r21,r21,24
    a51c:	b0800804 	addi	r2,r22,32
    a520:	b0c00615 	stw	r3,24(r22)
    a524:	a8ffff17 	ldw	r3,-4(r21)
    a528:	b0c00715 	stw	r3,28(r22)
    a52c:	003f9b06 	br	a39c <__alt_data_end+0xff00a39c>
    a530:	9005883a 	mov	r2,r18
    a534:	003fc706 	br	a454 <__alt_data_end+0xff00a454>
    a538:	a80b883a 	mov	r5,r21
    a53c:	9009883a 	mov	r4,r18
    a540:	0008db00 	call	8db0 <memmove>
    a544:	003fc906 	br	a46c <__alt_data_end+0xff00a46c>
    a548:	a8800217 	ldw	r2,8(r21)
    a54c:	b0800415 	stw	r2,16(r22)
    a550:	a8800317 	ldw	r2,12(r21)
    a554:	b0800515 	stw	r2,20(r22)
    a558:	31000726 	beq	r6,r4,a578 <_realloc_r+0x548>
    a55c:	b0800604 	addi	r2,r22,24
    a560:	ad400404 	addi	r21,r21,16
    a564:	003fbb06 	br	a454 <__alt_data_end+0xff00a454>
    a568:	a009883a 	mov	r4,r20
    a56c:	000fe540 	call	fe54 <__malloc_unlock>
    a570:	0005883a 	mov	r2,zero
    a574:	003f0a06 	br	a1a0 <__alt_data_end+0xff00a1a0>
    a578:	a8c00417 	ldw	r3,16(r21)
    a57c:	ad400604 	addi	r21,r21,24
    a580:	b0800804 	addi	r2,r22,32
    a584:	b0c00615 	stw	r3,24(r22)
    a588:	a8ffff17 	ldw	r3,-4(r21)
    a58c:	b0c00715 	stw	r3,28(r22)
    a590:	003fb006 	br	a454 <__alt_data_end+0xff00a454>

0000a594 <__fpclassifyd>:
    a594:	00a00034 	movhi	r2,32768
    a598:	10bfffc4 	addi	r2,r2,-1
    a59c:	2884703a 	and	r2,r5,r2
    a5a0:	10000726 	beq	r2,zero,a5c0 <__fpclassifyd+0x2c>
    a5a4:	00fffc34 	movhi	r3,65520
    a5a8:	019ff834 	movhi	r6,32736
    a5ac:	28c7883a 	add	r3,r5,r3
    a5b0:	31bfffc4 	addi	r6,r6,-1
    a5b4:	30c00536 	bltu	r6,r3,a5cc <__fpclassifyd+0x38>
    a5b8:	00800104 	movi	r2,4
    a5bc:	f800283a 	ret
    a5c0:	2000021e 	bne	r4,zero,a5cc <__fpclassifyd+0x38>
    a5c4:	00800084 	movi	r2,2
    a5c8:	f800283a 	ret
    a5cc:	00dffc34 	movhi	r3,32752
    a5d0:	019ff834 	movhi	r6,32736
    a5d4:	28cb883a 	add	r5,r5,r3
    a5d8:	31bfffc4 	addi	r6,r6,-1
    a5dc:	317ff62e 	bgeu	r6,r5,a5b8 <__alt_data_end+0xff00a5b8>
    a5e0:	01400434 	movhi	r5,16
    a5e4:	297fffc4 	addi	r5,r5,-1
    a5e8:	28800236 	bltu	r5,r2,a5f4 <__fpclassifyd+0x60>
    a5ec:	008000c4 	movi	r2,3
    a5f0:	f800283a 	ret
    a5f4:	10c00226 	beq	r2,r3,a600 <__fpclassifyd+0x6c>
    a5f8:	0005883a 	mov	r2,zero
    a5fc:	f800283a 	ret
    a600:	2005003a 	cmpeq	r2,r4,zero
    a604:	f800283a 	ret

0000a608 <__sread>:
    a608:	defffe04 	addi	sp,sp,-8
    a60c:	dc000015 	stw	r16,0(sp)
    a610:	2821883a 	mov	r16,r5
    a614:	2940038f 	ldh	r5,14(r5)
    a618:	dfc00115 	stw	ra,4(sp)
    a61c:	000c3fc0 	call	c3fc <_read_r>
    a620:	10000716 	blt	r2,zero,a640 <__sread+0x38>
    a624:	80c01417 	ldw	r3,80(r16)
    a628:	1887883a 	add	r3,r3,r2
    a62c:	80c01415 	stw	r3,80(r16)
    a630:	dfc00117 	ldw	ra,4(sp)
    a634:	dc000017 	ldw	r16,0(sp)
    a638:	dec00204 	addi	sp,sp,8
    a63c:	f800283a 	ret
    a640:	80c0030b 	ldhu	r3,12(r16)
    a644:	18fbffcc 	andi	r3,r3,61439
    a648:	80c0030d 	sth	r3,12(r16)
    a64c:	dfc00117 	ldw	ra,4(sp)
    a650:	dc000017 	ldw	r16,0(sp)
    a654:	dec00204 	addi	sp,sp,8
    a658:	f800283a 	ret

0000a65c <__seofread>:
    a65c:	0005883a 	mov	r2,zero
    a660:	f800283a 	ret

0000a664 <__swrite>:
    a664:	2880030b 	ldhu	r2,12(r5)
    a668:	defffb04 	addi	sp,sp,-20
    a66c:	dcc00315 	stw	r19,12(sp)
    a670:	dc800215 	stw	r18,8(sp)
    a674:	dc400115 	stw	r17,4(sp)
    a678:	dc000015 	stw	r16,0(sp)
    a67c:	dfc00415 	stw	ra,16(sp)
    a680:	10c0400c 	andi	r3,r2,256
    a684:	2821883a 	mov	r16,r5
    a688:	2023883a 	mov	r17,r4
    a68c:	3025883a 	mov	r18,r6
    a690:	3827883a 	mov	r19,r7
    a694:	18000526 	beq	r3,zero,a6ac <__swrite+0x48>
    a698:	2940038f 	ldh	r5,14(r5)
    a69c:	01c00084 	movi	r7,2
    a6a0:	000d883a 	mov	r6,zero
    a6a4:	000c39c0 	call	c39c <_lseek_r>
    a6a8:	8080030b 	ldhu	r2,12(r16)
    a6ac:	8140038f 	ldh	r5,14(r16)
    a6b0:	10bbffcc 	andi	r2,r2,61439
    a6b4:	980f883a 	mov	r7,r19
    a6b8:	900d883a 	mov	r6,r18
    a6bc:	8809883a 	mov	r4,r17
    a6c0:	8080030d 	sth	r2,12(r16)
    a6c4:	dfc00417 	ldw	ra,16(sp)
    a6c8:	dcc00317 	ldw	r19,12(sp)
    a6cc:	dc800217 	ldw	r18,8(sp)
    a6d0:	dc400117 	ldw	r17,4(sp)
    a6d4:	dc000017 	ldw	r16,0(sp)
    a6d8:	dec00504 	addi	sp,sp,20
    a6dc:	000be681 	jmpi	be68 <_write_r>

0000a6e0 <__sseek>:
    a6e0:	defffe04 	addi	sp,sp,-8
    a6e4:	dc000015 	stw	r16,0(sp)
    a6e8:	2821883a 	mov	r16,r5
    a6ec:	2940038f 	ldh	r5,14(r5)
    a6f0:	dfc00115 	stw	ra,4(sp)
    a6f4:	000c39c0 	call	c39c <_lseek_r>
    a6f8:	00ffffc4 	movi	r3,-1
    a6fc:	10c00826 	beq	r2,r3,a720 <__sseek+0x40>
    a700:	80c0030b 	ldhu	r3,12(r16)
    a704:	80801415 	stw	r2,80(r16)
    a708:	18c40014 	ori	r3,r3,4096
    a70c:	80c0030d 	sth	r3,12(r16)
    a710:	dfc00117 	ldw	ra,4(sp)
    a714:	dc000017 	ldw	r16,0(sp)
    a718:	dec00204 	addi	sp,sp,8
    a71c:	f800283a 	ret
    a720:	80c0030b 	ldhu	r3,12(r16)
    a724:	18fbffcc 	andi	r3,r3,61439
    a728:	80c0030d 	sth	r3,12(r16)
    a72c:	dfc00117 	ldw	ra,4(sp)
    a730:	dc000017 	ldw	r16,0(sp)
    a734:	dec00204 	addi	sp,sp,8
    a738:	f800283a 	ret

0000a73c <__sclose>:
    a73c:	2940038f 	ldh	r5,14(r5)
    a740:	000bec81 	jmpi	bec8 <_close_r>

0000a744 <strcmp>:
    a744:	2144b03a 	or	r2,r4,r5
    a748:	108000cc 	andi	r2,r2,3
    a74c:	1000171e 	bne	r2,zero,a7ac <strcmp+0x68>
    a750:	20800017 	ldw	r2,0(r4)
    a754:	28c00017 	ldw	r3,0(r5)
    a758:	10c0141e 	bne	r2,r3,a7ac <strcmp+0x68>
    a75c:	027fbff4 	movhi	r9,65279
    a760:	4a7fbfc4 	addi	r9,r9,-257
    a764:	0086303a 	nor	r3,zero,r2
    a768:	02202074 	movhi	r8,32897
    a76c:	1245883a 	add	r2,r2,r9
    a770:	42202004 	addi	r8,r8,-32640
    a774:	10c4703a 	and	r2,r2,r3
    a778:	1204703a 	and	r2,r2,r8
    a77c:	10000226 	beq	r2,zero,a788 <strcmp+0x44>
    a780:	00002306 	br	a810 <strcmp+0xcc>
    a784:	1000221e 	bne	r2,zero,a810 <strcmp+0xcc>
    a788:	21000104 	addi	r4,r4,4
    a78c:	20c00017 	ldw	r3,0(r4)
    a790:	29400104 	addi	r5,r5,4
    a794:	29800017 	ldw	r6,0(r5)
    a798:	1a4f883a 	add	r7,r3,r9
    a79c:	00c4303a 	nor	r2,zero,r3
    a7a0:	3884703a 	and	r2,r7,r2
    a7a4:	1204703a 	and	r2,r2,r8
    a7a8:	19bff626 	beq	r3,r6,a784 <__alt_data_end+0xff00a784>
    a7ac:	20800003 	ldbu	r2,0(r4)
    a7b0:	10c03fcc 	andi	r3,r2,255
    a7b4:	18c0201c 	xori	r3,r3,128
    a7b8:	18ffe004 	addi	r3,r3,-128
    a7bc:	18000c26 	beq	r3,zero,a7f0 <strcmp+0xac>
    a7c0:	29800007 	ldb	r6,0(r5)
    a7c4:	19800326 	beq	r3,r6,a7d4 <strcmp+0x90>
    a7c8:	00001306 	br	a818 <strcmp+0xd4>
    a7cc:	29800007 	ldb	r6,0(r5)
    a7d0:	11800b1e 	bne	r2,r6,a800 <strcmp+0xbc>
    a7d4:	21000044 	addi	r4,r4,1
    a7d8:	20c00003 	ldbu	r3,0(r4)
    a7dc:	29400044 	addi	r5,r5,1
    a7e0:	18803fcc 	andi	r2,r3,255
    a7e4:	1080201c 	xori	r2,r2,128
    a7e8:	10bfe004 	addi	r2,r2,-128
    a7ec:	103ff71e 	bne	r2,zero,a7cc <__alt_data_end+0xff00a7cc>
    a7f0:	0007883a 	mov	r3,zero
    a7f4:	28800003 	ldbu	r2,0(r5)
    a7f8:	1885c83a 	sub	r2,r3,r2
    a7fc:	f800283a 	ret
    a800:	28800003 	ldbu	r2,0(r5)
    a804:	18c03fcc 	andi	r3,r3,255
    a808:	1885c83a 	sub	r2,r3,r2
    a80c:	f800283a 	ret
    a810:	0005883a 	mov	r2,zero
    a814:	f800283a 	ret
    a818:	10c03fcc 	andi	r3,r2,255
    a81c:	003ff506 	br	a7f4 <__alt_data_end+0xff00a7f4>

0000a820 <__sprint_r.part.0>:
    a820:	28801917 	ldw	r2,100(r5)
    a824:	defff604 	addi	sp,sp,-40
    a828:	dd400515 	stw	r21,20(sp)
    a82c:	dfc00915 	stw	ra,36(sp)
    a830:	df000815 	stw	fp,32(sp)
    a834:	ddc00715 	stw	r23,28(sp)
    a838:	dd800615 	stw	r22,24(sp)
    a83c:	dd000415 	stw	r20,16(sp)
    a840:	dcc00315 	stw	r19,12(sp)
    a844:	dc800215 	stw	r18,8(sp)
    a848:	dc400115 	stw	r17,4(sp)
    a84c:	dc000015 	stw	r16,0(sp)
    a850:	1088000c 	andi	r2,r2,8192
    a854:	302b883a 	mov	r21,r6
    a858:	10002e26 	beq	r2,zero,a914 <__sprint_r.part.0+0xf4>
    a85c:	30800217 	ldw	r2,8(r6)
    a860:	35800017 	ldw	r22,0(r6)
    a864:	10002926 	beq	r2,zero,a90c <__sprint_r.part.0+0xec>
    a868:	2827883a 	mov	r19,r5
    a86c:	2029883a 	mov	r20,r4
    a870:	b5c00104 	addi	r23,r22,4
    a874:	04bfffc4 	movi	r18,-1
    a878:	bc400017 	ldw	r17,0(r23)
    a87c:	b4000017 	ldw	r16,0(r22)
    a880:	0039883a 	mov	fp,zero
    a884:	8822d0ba 	srli	r17,r17,2
    a888:	8800031e 	bne	r17,zero,a898 <__sprint_r.part.0+0x78>
    a88c:	00001806 	br	a8f0 <__sprint_r.part.0+0xd0>
    a890:	84000104 	addi	r16,r16,4
    a894:	8f001526 	beq	r17,fp,a8ec <__sprint_r.part.0+0xcc>
    a898:	81400017 	ldw	r5,0(r16)
    a89c:	980d883a 	mov	r6,r19
    a8a0:	a009883a 	mov	r4,r20
    a8a4:	000c2480 	call	c248 <_fputwc_r>
    a8a8:	e7000044 	addi	fp,fp,1
    a8ac:	14bff81e 	bne	r2,r18,a890 <__alt_data_end+0xff00a890>
    a8b0:	9005883a 	mov	r2,r18
    a8b4:	a8000215 	stw	zero,8(r21)
    a8b8:	a8000115 	stw	zero,4(r21)
    a8bc:	dfc00917 	ldw	ra,36(sp)
    a8c0:	df000817 	ldw	fp,32(sp)
    a8c4:	ddc00717 	ldw	r23,28(sp)
    a8c8:	dd800617 	ldw	r22,24(sp)
    a8cc:	dd400517 	ldw	r21,20(sp)
    a8d0:	dd000417 	ldw	r20,16(sp)
    a8d4:	dcc00317 	ldw	r19,12(sp)
    a8d8:	dc800217 	ldw	r18,8(sp)
    a8dc:	dc400117 	ldw	r17,4(sp)
    a8e0:	dc000017 	ldw	r16,0(sp)
    a8e4:	dec00a04 	addi	sp,sp,40
    a8e8:	f800283a 	ret
    a8ec:	a8800217 	ldw	r2,8(r21)
    a8f0:	8c63883a 	add	r17,r17,r17
    a8f4:	8c63883a 	add	r17,r17,r17
    a8f8:	1445c83a 	sub	r2,r2,r17
    a8fc:	a8800215 	stw	r2,8(r21)
    a900:	b5800204 	addi	r22,r22,8
    a904:	bdc00204 	addi	r23,r23,8
    a908:	103fdb1e 	bne	r2,zero,a878 <__alt_data_end+0xff00a878>
    a90c:	0005883a 	mov	r2,zero
    a910:	003fe806 	br	a8b4 <__alt_data_end+0xff00a8b4>
    a914:	00082a80 	call	82a8 <__sfvwrite_r>
    a918:	003fe606 	br	a8b4 <__alt_data_end+0xff00a8b4>

0000a91c <__sprint_r>:
    a91c:	30c00217 	ldw	r3,8(r6)
    a920:	18000126 	beq	r3,zero,a928 <__sprint_r+0xc>
    a924:	000a8201 	jmpi	a820 <__sprint_r.part.0>
    a928:	30000115 	stw	zero,4(r6)
    a92c:	0005883a 	mov	r2,zero
    a930:	f800283a 	ret

0000a934 <___vfiprintf_internal_r>:
    a934:	deffc904 	addi	sp,sp,-220
    a938:	df003515 	stw	fp,212(sp)
    a93c:	dd003115 	stw	r20,196(sp)
    a940:	dfc03615 	stw	ra,216(sp)
    a944:	ddc03415 	stw	r23,208(sp)
    a948:	dd803315 	stw	r22,204(sp)
    a94c:	dd403215 	stw	r21,200(sp)
    a950:	dcc03015 	stw	r19,192(sp)
    a954:	dc802f15 	stw	r18,188(sp)
    a958:	dc402e15 	stw	r17,184(sp)
    a95c:	dc002d15 	stw	r16,180(sp)
    a960:	d9002015 	stw	r4,128(sp)
    a964:	d9c02215 	stw	r7,136(sp)
    a968:	2829883a 	mov	r20,r5
    a96c:	3039883a 	mov	fp,r6
    a970:	20000226 	beq	r4,zero,a97c <___vfiprintf_internal_r+0x48>
    a974:	20800e17 	ldw	r2,56(r4)
    a978:	1000cf26 	beq	r2,zero,acb8 <___vfiprintf_internal_r+0x384>
    a97c:	a080030b 	ldhu	r2,12(r20)
    a980:	10c8000c 	andi	r3,r2,8192
    a984:	1800061e 	bne	r3,zero,a9a0 <___vfiprintf_internal_r+0x6c>
    a988:	a1001917 	ldw	r4,100(r20)
    a98c:	00f7ffc4 	movi	r3,-8193
    a990:	10880014 	ori	r2,r2,8192
    a994:	20c6703a 	and	r3,r4,r3
    a998:	a080030d 	sth	r2,12(r20)
    a99c:	a0c01915 	stw	r3,100(r20)
    a9a0:	10c0020c 	andi	r3,r2,8
    a9a4:	1800a926 	beq	r3,zero,ac4c <___vfiprintf_internal_r+0x318>
    a9a8:	a0c00417 	ldw	r3,16(r20)
    a9ac:	1800a726 	beq	r3,zero,ac4c <___vfiprintf_internal_r+0x318>
    a9b0:	1080068c 	andi	r2,r2,26
    a9b4:	00c00284 	movi	r3,10
    a9b8:	10c0ac26 	beq	r2,r3,ac6c <___vfiprintf_internal_r+0x338>
    a9bc:	da801a04 	addi	r10,sp,104
    a9c0:	da801e15 	stw	r10,120(sp)
    a9c4:	d8801e17 	ldw	r2,120(sp)
    a9c8:	da8019c4 	addi	r10,sp,103
    a9cc:	05800074 	movhi	r22,1
    a9d0:	05c00074 	movhi	r23,1
    a9d4:	da801f15 	stw	r10,124(sp)
    a9d8:	1295c83a 	sub	r10,r2,r10
    a9dc:	b58a5e04 	addi	r22,r22,10616
    a9e0:	bdca5a04 	addi	r23,r23,10600
    a9e4:	dec01a15 	stw	sp,104(sp)
    a9e8:	d8001c15 	stw	zero,112(sp)
    a9ec:	d8001b15 	stw	zero,108(sp)
    a9f0:	d8002615 	stw	zero,152(sp)
    a9f4:	d8002315 	stw	zero,140(sp)
    a9f8:	da802715 	stw	r10,156(sp)
    a9fc:	d811883a 	mov	r8,sp
    aa00:	dd002115 	stw	r20,132(sp)
    aa04:	e021883a 	mov	r16,fp
    aa08:	80800007 	ldb	r2,0(r16)
    aa0c:	1003ea26 	beq	r2,zero,b9b8 <___vfiprintf_internal_r+0x1084>
    aa10:	00c00944 	movi	r3,37
    aa14:	8025883a 	mov	r18,r16
    aa18:	10c0021e 	bne	r2,r3,aa24 <___vfiprintf_internal_r+0xf0>
    aa1c:	00001606 	br	aa78 <___vfiprintf_internal_r+0x144>
    aa20:	10c00326 	beq	r2,r3,aa30 <___vfiprintf_internal_r+0xfc>
    aa24:	94800044 	addi	r18,r18,1
    aa28:	90800007 	ldb	r2,0(r18)
    aa2c:	103ffc1e 	bne	r2,zero,aa20 <__alt_data_end+0xff00aa20>
    aa30:	9423c83a 	sub	r17,r18,r16
    aa34:	88001026 	beq	r17,zero,aa78 <___vfiprintf_internal_r+0x144>
    aa38:	d8c01c17 	ldw	r3,112(sp)
    aa3c:	d8801b17 	ldw	r2,108(sp)
    aa40:	44000015 	stw	r16,0(r8)
    aa44:	88c7883a 	add	r3,r17,r3
    aa48:	10800044 	addi	r2,r2,1
    aa4c:	44400115 	stw	r17,4(r8)
    aa50:	d8c01c15 	stw	r3,112(sp)
    aa54:	d8801b15 	stw	r2,108(sp)
    aa58:	010001c4 	movi	r4,7
    aa5c:	2080760e 	bge	r4,r2,ac38 <___vfiprintf_internal_r+0x304>
    aa60:	1803821e 	bne	r3,zero,b86c <___vfiprintf_internal_r+0xf38>
    aa64:	da802317 	ldw	r10,140(sp)
    aa68:	d8001b15 	stw	zero,108(sp)
    aa6c:	d811883a 	mov	r8,sp
    aa70:	5455883a 	add	r10,r10,r17
    aa74:	da802315 	stw	r10,140(sp)
    aa78:	90800007 	ldb	r2,0(r18)
    aa7c:	10044626 	beq	r2,zero,bb98 <___vfiprintf_internal_r+0x1264>
    aa80:	90c00047 	ldb	r3,1(r18)
    aa84:	94000044 	addi	r16,r18,1
    aa88:	d8001d85 	stb	zero,118(sp)
    aa8c:	0009883a 	mov	r4,zero
    aa90:	000f883a 	mov	r7,zero
    aa94:	027fffc4 	movi	r9,-1
    aa98:	0023883a 	mov	r17,zero
    aa9c:	0029883a 	mov	r20,zero
    aaa0:	01401604 	movi	r5,88
    aaa4:	01800244 	movi	r6,9
    aaa8:	03400a84 	movi	r13,42
    aaac:	03001b04 	movi	r12,108
    aab0:	84000044 	addi	r16,r16,1
    aab4:	18bff804 	addi	r2,r3,-32
    aab8:	28827336 	bltu	r5,r2,b488 <___vfiprintf_internal_r+0xb54>
    aabc:	100490ba 	slli	r2,r2,2
    aac0:	02800074 	movhi	r10,1
    aac4:	52aab504 	addi	r10,r10,-21804
    aac8:	1285883a 	add	r2,r2,r10
    aacc:	10800017 	ldw	r2,0(r2)
    aad0:	1000683a 	jmp	r2
    aad4:	0000b1bc 	xorhi	zero,zero,710
    aad8:	0000b488 	cmpgei	zero,zero,722
    aadc:	0000b488 	cmpgei	zero,zero,722
    aae0:	0000b1dc 	xori	zero,zero,711
    aae4:	0000b488 	cmpgei	zero,zero,722
    aae8:	0000b488 	cmpgei	zero,zero,722
    aaec:	0000b488 	cmpgei	zero,zero,722
    aaf0:	0000b488 	cmpgei	zero,zero,722
    aaf4:	0000b488 	cmpgei	zero,zero,722
    aaf8:	0000b488 	cmpgei	zero,zero,722
    aafc:	0000b3c4 	movi	zero,719
    ab00:	0000b3e0 	cmpeqi	zero,zero,719
    ab04:	0000b488 	cmpgei	zero,zero,722
    ab08:	0000acc8 	cmpgei	zero,zero,691
    ab0c:	0000b3f0 	cmpltui	zero,zero,719
    ab10:	0000b488 	cmpgei	zero,zero,722
    ab14:	0000b1e8 	cmpgeui	zero,zero,711
    ab18:	0000b1f4 	movhi	zero,711
    ab1c:	0000b1f4 	movhi	zero,711
    ab20:	0000b1f4 	movhi	zero,711
    ab24:	0000b1f4 	movhi	zero,711
    ab28:	0000b1f4 	movhi	zero,711
    ab2c:	0000b1f4 	movhi	zero,711
    ab30:	0000b1f4 	movhi	zero,711
    ab34:	0000b1f4 	movhi	zero,711
    ab38:	0000b1f4 	movhi	zero,711
    ab3c:	0000b488 	cmpgei	zero,zero,722
    ab40:	0000b488 	cmpgei	zero,zero,722
    ab44:	0000b488 	cmpgei	zero,zero,722
    ab48:	0000b488 	cmpgei	zero,zero,722
    ab4c:	0000b488 	cmpgei	zero,zero,722
    ab50:	0000b488 	cmpgei	zero,zero,722
    ab54:	0000b488 	cmpgei	zero,zero,722
    ab58:	0000b488 	cmpgei	zero,zero,722
    ab5c:	0000b488 	cmpgei	zero,zero,722
    ab60:	0000b488 	cmpgei	zero,zero,722
    ab64:	0000b220 	cmpeqi	zero,zero,712
    ab68:	0000b488 	cmpgei	zero,zero,722
    ab6c:	0000b488 	cmpgei	zero,zero,722
    ab70:	0000b488 	cmpgei	zero,zero,722
    ab74:	0000b488 	cmpgei	zero,zero,722
    ab78:	0000b488 	cmpgei	zero,zero,722
    ab7c:	0000b488 	cmpgei	zero,zero,722
    ab80:	0000b488 	cmpgei	zero,zero,722
    ab84:	0000b488 	cmpgei	zero,zero,722
    ab88:	0000b488 	cmpgei	zero,zero,722
    ab8c:	0000b488 	cmpgei	zero,zero,722
    ab90:	0000b258 	cmpnei	zero,zero,713
    ab94:	0000b488 	cmpgei	zero,zero,722
    ab98:	0000b488 	cmpgei	zero,zero,722
    ab9c:	0000b488 	cmpgei	zero,zero,722
    aba0:	0000b488 	cmpgei	zero,zero,722
    aba4:	0000b488 	cmpgei	zero,zero,722
    aba8:	0000b2b0 	cmpltui	zero,zero,714
    abac:	0000b488 	cmpgei	zero,zero,722
    abb0:	0000b488 	cmpgei	zero,zero,722
    abb4:	0000b320 	cmpeqi	zero,zero,716
    abb8:	0000b488 	cmpgei	zero,zero,722
    abbc:	0000b488 	cmpgei	zero,zero,722
    abc0:	0000b488 	cmpgei	zero,zero,722
    abc4:	0000b488 	cmpgei	zero,zero,722
    abc8:	0000b488 	cmpgei	zero,zero,722
    abcc:	0000b488 	cmpgei	zero,zero,722
    abd0:	0000b488 	cmpgei	zero,zero,722
    abd4:	0000b488 	cmpgei	zero,zero,722
    abd8:	0000b488 	cmpgei	zero,zero,722
    abdc:	0000b488 	cmpgei	zero,zero,722
    abe0:	0000b0cc 	andi	zero,zero,707
    abe4:	0000b0f8 	rdprs	zero,zero,707
    abe8:	0000b488 	cmpgei	zero,zero,722
    abec:	0000b488 	cmpgei	zero,zero,722
    abf0:	0000b488 	cmpgei	zero,zero,722
    abf4:	0000b430 	cmpltui	zero,zero,720
    abf8:	0000b0f8 	rdprs	zero,zero,707
    abfc:	0000b488 	cmpgei	zero,zero,722
    ac00:	0000b488 	cmpgei	zero,zero,722
    ac04:	0000af8c 	andi	zero,zero,702
    ac08:	0000b488 	cmpgei	zero,zero,722
    ac0c:	0000af9c 	xori	zero,zero,702
    ac10:	0000afd8 	cmpnei	zero,zero,703
    ac14:	0000acd4 	movui	zero,691
    ac18:	0000af80 	call	af8 <conv_grayscale+0x44>
    ac1c:	0000b488 	cmpgei	zero,zero,722
    ac20:	0000b35c 	xori	zero,zero,717
    ac24:	0000b488 	cmpgei	zero,zero,722
    ac28:	0000b3b4 	movhi	zero,718
    ac2c:	0000b488 	cmpgei	zero,zero,722
    ac30:	0000b488 	cmpgei	zero,zero,722
    ac34:	0000b078 	rdprs	zero,zero,705
    ac38:	42000204 	addi	r8,r8,8
    ac3c:	da802317 	ldw	r10,140(sp)
    ac40:	5455883a 	add	r10,r10,r17
    ac44:	da802315 	stw	r10,140(sp)
    ac48:	003f8b06 	br	aa78 <__alt_data_end+0xff00aa78>
    ac4c:	d9002017 	ldw	r4,128(sp)
    ac50:	a00b883a 	mov	r5,r20
    ac54:	0005e500 	call	5e50 <__swsetup_r>
    ac58:	1003b11e 	bne	r2,zero,bb20 <___vfiprintf_internal_r+0x11ec>
    ac5c:	a080030b 	ldhu	r2,12(r20)
    ac60:	00c00284 	movi	r3,10
    ac64:	1080068c 	andi	r2,r2,26
    ac68:	10ff541e 	bne	r2,r3,a9bc <__alt_data_end+0xff00a9bc>
    ac6c:	a080038f 	ldh	r2,14(r20)
    ac70:	103f5216 	blt	r2,zero,a9bc <__alt_data_end+0xff00a9bc>
    ac74:	d9c02217 	ldw	r7,136(sp)
    ac78:	d9002017 	ldw	r4,128(sp)
    ac7c:	e00d883a 	mov	r6,fp
    ac80:	a00b883a 	mov	r5,r20
    ac84:	000bdac0 	call	bdac <__sbprintf>
    ac88:	dfc03617 	ldw	ra,216(sp)
    ac8c:	df003517 	ldw	fp,212(sp)
    ac90:	ddc03417 	ldw	r23,208(sp)
    ac94:	dd803317 	ldw	r22,204(sp)
    ac98:	dd403217 	ldw	r21,200(sp)
    ac9c:	dd003117 	ldw	r20,196(sp)
    aca0:	dcc03017 	ldw	r19,192(sp)
    aca4:	dc802f17 	ldw	r18,188(sp)
    aca8:	dc402e17 	ldw	r17,184(sp)
    acac:	dc002d17 	ldw	r16,180(sp)
    acb0:	dec03704 	addi	sp,sp,220
    acb4:	f800283a 	ret
    acb8:	0007e240 	call	7e24 <__sinit>
    acbc:	003f2f06 	br	a97c <__alt_data_end+0xff00a97c>
    acc0:	0463c83a 	sub	r17,zero,r17
    acc4:	d8802215 	stw	r2,136(sp)
    acc8:	a5000114 	ori	r20,r20,4
    accc:	80c00007 	ldb	r3,0(r16)
    acd0:	003f7706 	br	aab0 <__alt_data_end+0xff00aab0>
    acd4:	00800c04 	movi	r2,48
    acd8:	da802217 	ldw	r10,136(sp)
    acdc:	d8801d05 	stb	r2,116(sp)
    ace0:	00801e04 	movi	r2,120
    ace4:	d8801d45 	stb	r2,117(sp)
    ace8:	d8001d85 	stb	zero,118(sp)
    acec:	50c00104 	addi	r3,r10,4
    acf0:	54800017 	ldw	r18,0(r10)
    acf4:	0027883a 	mov	r19,zero
    acf8:	a0800094 	ori	r2,r20,2
    acfc:	48030b16 	blt	r9,zero,b92c <___vfiprintf_internal_r+0xff8>
    ad00:	00bfdfc4 	movi	r2,-129
    ad04:	a096703a 	and	r11,r20,r2
    ad08:	d8c02215 	stw	r3,136(sp)
    ad0c:	5d000094 	ori	r20,r11,2
    ad10:	90032b1e 	bne	r18,zero,b9c0 <___vfiprintf_internal_r+0x108c>
    ad14:	00800074 	movhi	r2,1
    ad18:	1089f904 	addi	r2,r2,10212
    ad1c:	d8802615 	stw	r2,152(sp)
    ad20:	0039883a 	mov	fp,zero
    ad24:	48017b1e 	bne	r9,zero,b314 <___vfiprintf_internal_r+0x9e0>
    ad28:	0013883a 	mov	r9,zero
    ad2c:	0027883a 	mov	r19,zero
    ad30:	dd401a04 	addi	r21,sp,104
    ad34:	4825883a 	mov	r18,r9
    ad38:	4cc0010e 	bge	r9,r19,ad40 <___vfiprintf_internal_r+0x40c>
    ad3c:	9825883a 	mov	r18,r19
    ad40:	e7003fcc 	andi	fp,fp,255
    ad44:	e700201c 	xori	fp,fp,128
    ad48:	e73fe004 	addi	fp,fp,-128
    ad4c:	e0000126 	beq	fp,zero,ad54 <___vfiprintf_internal_r+0x420>
    ad50:	94800044 	addi	r18,r18,1
    ad54:	a380008c 	andi	r14,r20,2
    ad58:	70000126 	beq	r14,zero,ad60 <___vfiprintf_internal_r+0x42c>
    ad5c:	94800084 	addi	r18,r18,2
    ad60:	a700210c 	andi	fp,r20,132
    ad64:	e001df1e 	bne	fp,zero,b4e4 <___vfiprintf_internal_r+0xbb0>
    ad68:	8c87c83a 	sub	r3,r17,r18
    ad6c:	00c1dd0e 	bge	zero,r3,b4e4 <___vfiprintf_internal_r+0xbb0>
    ad70:	01c00404 	movi	r7,16
    ad74:	d8801c17 	ldw	r2,112(sp)
    ad78:	38c3ad0e 	bge	r7,r3,bc30 <___vfiprintf_internal_r+0x12fc>
    ad7c:	02800074 	movhi	r10,1
    ad80:	528a5e04 	addi	r10,r10,10616
    ad84:	dc002915 	stw	r16,164(sp)
    ad88:	d9801b17 	ldw	r6,108(sp)
    ad8c:	da802415 	stw	r10,144(sp)
    ad90:	03c001c4 	movi	r15,7
    ad94:	da402515 	stw	r9,148(sp)
    ad98:	db802815 	stw	r14,160(sp)
    ad9c:	1821883a 	mov	r16,r3
    ada0:	00000506 	br	adb8 <___vfiprintf_internal_r+0x484>
    ada4:	31400084 	addi	r5,r6,2
    ada8:	42000204 	addi	r8,r8,8
    adac:	200d883a 	mov	r6,r4
    adb0:	843ffc04 	addi	r16,r16,-16
    adb4:	3c000d0e 	bge	r7,r16,adec <___vfiprintf_internal_r+0x4b8>
    adb8:	10800404 	addi	r2,r2,16
    adbc:	31000044 	addi	r4,r6,1
    adc0:	45800015 	stw	r22,0(r8)
    adc4:	41c00115 	stw	r7,4(r8)
    adc8:	d8801c15 	stw	r2,112(sp)
    adcc:	d9001b15 	stw	r4,108(sp)
    add0:	793ff40e 	bge	r15,r4,ada4 <__alt_data_end+0xff00ada4>
    add4:	1001b51e 	bne	r2,zero,b4ac <___vfiprintf_internal_r+0xb78>
    add8:	843ffc04 	addi	r16,r16,-16
    addc:	000d883a 	mov	r6,zero
    ade0:	01400044 	movi	r5,1
    ade4:	d811883a 	mov	r8,sp
    ade8:	3c3ff316 	blt	r7,r16,adb8 <__alt_data_end+0xff00adb8>
    adec:	8007883a 	mov	r3,r16
    adf0:	da402517 	ldw	r9,148(sp)
    adf4:	db802817 	ldw	r14,160(sp)
    adf8:	dc002917 	ldw	r16,164(sp)
    adfc:	da802417 	ldw	r10,144(sp)
    ae00:	1885883a 	add	r2,r3,r2
    ae04:	40c00115 	stw	r3,4(r8)
    ae08:	42800015 	stw	r10,0(r8)
    ae0c:	d8801c15 	stw	r2,112(sp)
    ae10:	d9401b15 	stw	r5,108(sp)
    ae14:	00c001c4 	movi	r3,7
    ae18:	19426016 	blt	r3,r5,b79c <___vfiprintf_internal_r+0xe68>
    ae1c:	d8c01d87 	ldb	r3,118(sp)
    ae20:	42000204 	addi	r8,r8,8
    ae24:	29000044 	addi	r4,r5,1
    ae28:	1801b31e 	bne	r3,zero,b4f8 <___vfiprintf_internal_r+0xbc4>
    ae2c:	7001c026 	beq	r14,zero,b530 <___vfiprintf_internal_r+0xbfc>
    ae30:	d8c01d04 	addi	r3,sp,116
    ae34:	10800084 	addi	r2,r2,2
    ae38:	40c00015 	stw	r3,0(r8)
    ae3c:	00c00084 	movi	r3,2
    ae40:	40c00115 	stw	r3,4(r8)
    ae44:	d8801c15 	stw	r2,112(sp)
    ae48:	d9001b15 	stw	r4,108(sp)
    ae4c:	00c001c4 	movi	r3,7
    ae50:	1902650e 	bge	r3,r4,b7e8 <___vfiprintf_internal_r+0xeb4>
    ae54:	10029a1e 	bne	r2,zero,b8c0 <___vfiprintf_internal_r+0xf8c>
    ae58:	00c02004 	movi	r3,128
    ae5c:	01000044 	movi	r4,1
    ae60:	000b883a 	mov	r5,zero
    ae64:	d811883a 	mov	r8,sp
    ae68:	e0c1b31e 	bne	fp,r3,b538 <___vfiprintf_internal_r+0xc04>
    ae6c:	8cb9c83a 	sub	fp,r17,r18
    ae70:	0701b10e 	bge	zero,fp,b538 <___vfiprintf_internal_r+0xc04>
    ae74:	01c00404 	movi	r7,16
    ae78:	3f03890e 	bge	r7,fp,bca0 <___vfiprintf_internal_r+0x136c>
    ae7c:	00c00074 	movhi	r3,1
    ae80:	18ca5a04 	addi	r3,r3,10600
    ae84:	d8c02415 	stw	r3,144(sp)
    ae88:	8007883a 	mov	r3,r16
    ae8c:	034001c4 	movi	r13,7
    ae90:	e021883a 	mov	r16,fp
    ae94:	da402515 	stw	r9,148(sp)
    ae98:	1839883a 	mov	fp,r3
    ae9c:	00000506 	br	aeb4 <___vfiprintf_internal_r+0x580>
    aea0:	29800084 	addi	r6,r5,2
    aea4:	42000204 	addi	r8,r8,8
    aea8:	180b883a 	mov	r5,r3
    aeac:	843ffc04 	addi	r16,r16,-16
    aeb0:	3c000d0e 	bge	r7,r16,aee8 <___vfiprintf_internal_r+0x5b4>
    aeb4:	10800404 	addi	r2,r2,16
    aeb8:	28c00044 	addi	r3,r5,1
    aebc:	45c00015 	stw	r23,0(r8)
    aec0:	41c00115 	stw	r7,4(r8)
    aec4:	d8801c15 	stw	r2,112(sp)
    aec8:	d8c01b15 	stw	r3,108(sp)
    aecc:	68fff40e 	bge	r13,r3,aea0 <__alt_data_end+0xff00aea0>
    aed0:	1002241e 	bne	r2,zero,b764 <___vfiprintf_internal_r+0xe30>
    aed4:	843ffc04 	addi	r16,r16,-16
    aed8:	01800044 	movi	r6,1
    aedc:	000b883a 	mov	r5,zero
    aee0:	d811883a 	mov	r8,sp
    aee4:	3c3ff316 	blt	r7,r16,aeb4 <__alt_data_end+0xff00aeb4>
    aee8:	da402517 	ldw	r9,148(sp)
    aeec:	e007883a 	mov	r3,fp
    aef0:	8039883a 	mov	fp,r16
    aef4:	1821883a 	mov	r16,r3
    aef8:	d8c02417 	ldw	r3,144(sp)
    aefc:	1705883a 	add	r2,r2,fp
    af00:	47000115 	stw	fp,4(r8)
    af04:	40c00015 	stw	r3,0(r8)
    af08:	d8801c15 	stw	r2,112(sp)
    af0c:	d9801b15 	stw	r6,108(sp)
    af10:	00c001c4 	movi	r3,7
    af14:	19827616 	blt	r3,r6,b8f0 <___vfiprintf_internal_r+0xfbc>
    af18:	4cf9c83a 	sub	fp,r9,r19
    af1c:	42000204 	addi	r8,r8,8
    af20:	31000044 	addi	r4,r6,1
    af24:	300b883a 	mov	r5,r6
    af28:	07018516 	blt	zero,fp,b540 <___vfiprintf_internal_r+0xc0c>
    af2c:	9885883a 	add	r2,r19,r2
    af30:	45400015 	stw	r21,0(r8)
    af34:	44c00115 	stw	r19,4(r8)
    af38:	d8801c15 	stw	r2,112(sp)
    af3c:	d9001b15 	stw	r4,108(sp)
    af40:	00c001c4 	movi	r3,7
    af44:	1901dd0e 	bge	r3,r4,b6bc <___vfiprintf_internal_r+0xd88>
    af48:	1002401e 	bne	r2,zero,b84c <___vfiprintf_internal_r+0xf18>
    af4c:	d8001b15 	stw	zero,108(sp)
    af50:	a2c0010c 	andi	r11,r20,4
    af54:	58000226 	beq	r11,zero,af60 <___vfiprintf_internal_r+0x62c>
    af58:	8ca7c83a 	sub	r19,r17,r18
    af5c:	04c2f216 	blt	zero,r19,bb28 <___vfiprintf_internal_r+0x11f4>
    af60:	8c80010e 	bge	r17,r18,af68 <___vfiprintf_internal_r+0x634>
    af64:	9023883a 	mov	r17,r18
    af68:	da802317 	ldw	r10,140(sp)
    af6c:	5455883a 	add	r10,r10,r17
    af70:	da802315 	stw	r10,140(sp)
    af74:	d8001b15 	stw	zero,108(sp)
    af78:	d811883a 	mov	r8,sp
    af7c:	003ea206 	br	aa08 <__alt_data_end+0xff00aa08>
    af80:	a5000814 	ori	r20,r20,32
    af84:	80c00007 	ldb	r3,0(r16)
    af88:	003ec906 	br	aab0 <__alt_data_end+0xff00aab0>
    af8c:	80c00007 	ldb	r3,0(r16)
    af90:	1b030926 	beq	r3,r12,bbb8 <___vfiprintf_internal_r+0x1284>
    af94:	a5000414 	ori	r20,r20,16
    af98:	003ec506 	br	aab0 <__alt_data_end+0xff00aab0>
    af9c:	21003fcc 	andi	r4,r4,255
    afa0:	20035e1e 	bne	r4,zero,bd1c <___vfiprintf_internal_r+0x13e8>
    afa4:	a080080c 	andi	r2,r20,32
    afa8:	1002a526 	beq	r2,zero,ba40 <___vfiprintf_internal_r+0x110c>
    afac:	da802217 	ldw	r10,136(sp)
    afb0:	50800017 	ldw	r2,0(r10)
    afb4:	da802317 	ldw	r10,140(sp)
    afb8:	5007d7fa 	srai	r3,r10,31
    afbc:	da802217 	ldw	r10,136(sp)
    afc0:	10c00115 	stw	r3,4(r2)
    afc4:	52800104 	addi	r10,r10,4
    afc8:	da802215 	stw	r10,136(sp)
    afcc:	da802317 	ldw	r10,140(sp)
    afd0:	12800015 	stw	r10,0(r2)
    afd4:	003e8c06 	br	aa08 <__alt_data_end+0xff00aa08>
    afd8:	21003fcc 	andi	r4,r4,255
    afdc:	2003511e 	bne	r4,zero,bd24 <___vfiprintf_internal_r+0x13f0>
    afe0:	a080080c 	andi	r2,r20,32
    afe4:	1000a126 	beq	r2,zero,b26c <___vfiprintf_internal_r+0x938>
    afe8:	da802217 	ldw	r10,136(sp)
    afec:	d8001d85 	stb	zero,118(sp)
    aff0:	50800204 	addi	r2,r10,8
    aff4:	54800017 	ldw	r18,0(r10)
    aff8:	54c00117 	ldw	r19,4(r10)
    affc:	4802b416 	blt	r9,zero,bad0 <___vfiprintf_internal_r+0x119c>
    b000:	013fdfc4 	movi	r4,-129
    b004:	94c6b03a 	or	r3,r18,r19
    b008:	d8802215 	stw	r2,136(sp)
    b00c:	a128703a 	and	r20,r20,r4
    b010:	1800a226 	beq	r3,zero,b29c <___vfiprintf_internal_r+0x968>
    b014:	0039883a 	mov	fp,zero
    b018:	dd401a04 	addi	r21,sp,104
    b01c:	9006d0fa 	srli	r3,r18,3
    b020:	9808977a 	slli	r4,r19,29
    b024:	9826d0fa 	srli	r19,r19,3
    b028:	948001cc 	andi	r18,r18,7
    b02c:	90800c04 	addi	r2,r18,48
    b030:	ad7fffc4 	addi	r21,r21,-1
    b034:	20e4b03a 	or	r18,r4,r3
    b038:	a8800005 	stb	r2,0(r21)
    b03c:	94c6b03a 	or	r3,r18,r19
    b040:	183ff61e 	bne	r3,zero,b01c <__alt_data_end+0xff00b01c>
    b044:	a0c0004c 	andi	r3,r20,1
    b048:	18005926 	beq	r3,zero,b1b0 <___vfiprintf_internal_r+0x87c>
    b04c:	10803fcc 	andi	r2,r2,255
    b050:	1080201c 	xori	r2,r2,128
    b054:	10bfe004 	addi	r2,r2,-128
    b058:	00c00c04 	movi	r3,48
    b05c:	10c05426 	beq	r2,r3,b1b0 <___vfiprintf_internal_r+0x87c>
    b060:	da801e17 	ldw	r10,120(sp)
    b064:	a8bfffc4 	addi	r2,r21,-1
    b068:	a8ffffc5 	stb	r3,-1(r21)
    b06c:	50a7c83a 	sub	r19,r10,r2
    b070:	102b883a 	mov	r21,r2
    b074:	003f2f06 	br	ad34 <__alt_data_end+0xff00ad34>
    b078:	21003fcc 	andi	r4,r4,255
    b07c:	2003421e 	bne	r4,zero,bd88 <___vfiprintf_internal_r+0x1454>
    b080:	00800074 	movhi	r2,1
    b084:	1089f904 	addi	r2,r2,10212
    b088:	d8802615 	stw	r2,152(sp)
    b08c:	a080080c 	andi	r2,r20,32
    b090:	1000aa26 	beq	r2,zero,b33c <___vfiprintf_internal_r+0xa08>
    b094:	da802217 	ldw	r10,136(sp)
    b098:	54800017 	ldw	r18,0(r10)
    b09c:	54c00117 	ldw	r19,4(r10)
    b0a0:	52800204 	addi	r10,r10,8
    b0a4:	da802215 	stw	r10,136(sp)
    b0a8:	a080004c 	andi	r2,r20,1
    b0ac:	1001d226 	beq	r2,zero,b7f8 <___vfiprintf_internal_r+0xec4>
    b0b0:	94c4b03a 	or	r2,r18,r19
    b0b4:	1002351e 	bne	r2,zero,b98c <___vfiprintf_internal_r+0x1058>
    b0b8:	d8001d85 	stb	zero,118(sp)
    b0bc:	48022216 	blt	r9,zero,b948 <___vfiprintf_internal_r+0x1014>
    b0c0:	00bfdfc4 	movi	r2,-129
    b0c4:	a0a8703a 	and	r20,r20,r2
    b0c8:	003f1506 	br	ad20 <__alt_data_end+0xff00ad20>
    b0cc:	da802217 	ldw	r10,136(sp)
    b0d0:	04800044 	movi	r18,1
    b0d4:	d8001d85 	stb	zero,118(sp)
    b0d8:	50800017 	ldw	r2,0(r10)
    b0dc:	52800104 	addi	r10,r10,4
    b0e0:	da802215 	stw	r10,136(sp)
    b0e4:	d8801005 	stb	r2,64(sp)
    b0e8:	9027883a 	mov	r19,r18
    b0ec:	dd401004 	addi	r21,sp,64
    b0f0:	0013883a 	mov	r9,zero
    b0f4:	003f1706 	br	ad54 <__alt_data_end+0xff00ad54>
    b0f8:	21003fcc 	andi	r4,r4,255
    b0fc:	2003201e 	bne	r4,zero,bd80 <___vfiprintf_internal_r+0x144c>
    b100:	a080080c 	andi	r2,r20,32
    b104:	10004b26 	beq	r2,zero,b234 <___vfiprintf_internal_r+0x900>
    b108:	da802217 	ldw	r10,136(sp)
    b10c:	50800117 	ldw	r2,4(r10)
    b110:	54800017 	ldw	r18,0(r10)
    b114:	52800204 	addi	r10,r10,8
    b118:	da802215 	stw	r10,136(sp)
    b11c:	1027883a 	mov	r19,r2
    b120:	10022c16 	blt	r2,zero,b9d4 <___vfiprintf_internal_r+0x10a0>
    b124:	df001d83 	ldbu	fp,118(sp)
    b128:	48007216 	blt	r9,zero,b2f4 <___vfiprintf_internal_r+0x9c0>
    b12c:	00ffdfc4 	movi	r3,-129
    b130:	94c4b03a 	or	r2,r18,r19
    b134:	a0e8703a 	and	r20,r20,r3
    b138:	1000cc26 	beq	r2,zero,b46c <___vfiprintf_internal_r+0xb38>
    b13c:	98021026 	beq	r19,zero,b980 <___vfiprintf_internal_r+0x104c>
    b140:	dc402415 	stw	r17,144(sp)
    b144:	dc002515 	stw	r16,148(sp)
    b148:	9823883a 	mov	r17,r19
    b14c:	9021883a 	mov	r16,r18
    b150:	dd401a04 	addi	r21,sp,104
    b154:	4825883a 	mov	r18,r9
    b158:	4027883a 	mov	r19,r8
    b15c:	8009883a 	mov	r4,r16
    b160:	880b883a 	mov	r5,r17
    b164:	01800284 	movi	r6,10
    b168:	000f883a 	mov	r7,zero
    b16c:	000cd140 	call	cd14 <__umoddi3>
    b170:	10800c04 	addi	r2,r2,48
    b174:	ad7fffc4 	addi	r21,r21,-1
    b178:	8009883a 	mov	r4,r16
    b17c:	880b883a 	mov	r5,r17
    b180:	a8800005 	stb	r2,0(r21)
    b184:	01800284 	movi	r6,10
    b188:	000f883a 	mov	r7,zero
    b18c:	000c79c0 	call	c79c <__udivdi3>
    b190:	1021883a 	mov	r16,r2
    b194:	10c4b03a 	or	r2,r2,r3
    b198:	1823883a 	mov	r17,r3
    b19c:	103fef1e 	bne	r2,zero,b15c <__alt_data_end+0xff00b15c>
    b1a0:	dc402417 	ldw	r17,144(sp)
    b1a4:	dc002517 	ldw	r16,148(sp)
    b1a8:	9013883a 	mov	r9,r18
    b1ac:	9811883a 	mov	r8,r19
    b1b0:	da801e17 	ldw	r10,120(sp)
    b1b4:	5567c83a 	sub	r19,r10,r21
    b1b8:	003ede06 	br	ad34 <__alt_data_end+0xff00ad34>
    b1bc:	38803fcc 	andi	r2,r7,255
    b1c0:	1080201c 	xori	r2,r2,128
    b1c4:	10bfe004 	addi	r2,r2,-128
    b1c8:	1002371e 	bne	r2,zero,baa8 <___vfiprintf_internal_r+0x1174>
    b1cc:	01000044 	movi	r4,1
    b1d0:	01c00804 	movi	r7,32
    b1d4:	80c00007 	ldb	r3,0(r16)
    b1d8:	003e3506 	br	aab0 <__alt_data_end+0xff00aab0>
    b1dc:	a5000054 	ori	r20,r20,1
    b1e0:	80c00007 	ldb	r3,0(r16)
    b1e4:	003e3206 	br	aab0 <__alt_data_end+0xff00aab0>
    b1e8:	a5002014 	ori	r20,r20,128
    b1ec:	80c00007 	ldb	r3,0(r16)
    b1f0:	003e2f06 	br	aab0 <__alt_data_end+0xff00aab0>
    b1f4:	8015883a 	mov	r10,r16
    b1f8:	0023883a 	mov	r17,zero
    b1fc:	18bff404 	addi	r2,r3,-48
    b200:	50c00007 	ldb	r3,0(r10)
    b204:	8c4002a4 	muli	r17,r17,10
    b208:	84000044 	addi	r16,r16,1
    b20c:	8015883a 	mov	r10,r16
    b210:	1463883a 	add	r17,r2,r17
    b214:	18bff404 	addi	r2,r3,-48
    b218:	30bff92e 	bgeu	r6,r2,b200 <__alt_data_end+0xff00b200>
    b21c:	003e2506 	br	aab4 <__alt_data_end+0xff00aab4>
    b220:	21003fcc 	andi	r4,r4,255
    b224:	2002d41e 	bne	r4,zero,bd78 <___vfiprintf_internal_r+0x1444>
    b228:	a5000414 	ori	r20,r20,16
    b22c:	a080080c 	andi	r2,r20,32
    b230:	103fb51e 	bne	r2,zero,b108 <__alt_data_end+0xff00b108>
    b234:	a080040c 	andi	r2,r20,16
    b238:	1001f826 	beq	r2,zero,ba1c <___vfiprintf_internal_r+0x10e8>
    b23c:	da802217 	ldw	r10,136(sp)
    b240:	54800017 	ldw	r18,0(r10)
    b244:	52800104 	addi	r10,r10,4
    b248:	da802215 	stw	r10,136(sp)
    b24c:	9027d7fa 	srai	r19,r18,31
    b250:	9805883a 	mov	r2,r19
    b254:	003fb206 	br	b120 <__alt_data_end+0xff00b120>
    b258:	21003fcc 	andi	r4,r4,255
    b25c:	2002c41e 	bne	r4,zero,bd70 <___vfiprintf_internal_r+0x143c>
    b260:	a5000414 	ori	r20,r20,16
    b264:	a080080c 	andi	r2,r20,32
    b268:	103f5f1e 	bne	r2,zero,afe8 <__alt_data_end+0xff00afe8>
    b26c:	a080040c 	andi	r2,r20,16
    b270:	10020f26 	beq	r2,zero,bab0 <___vfiprintf_internal_r+0x117c>
    b274:	da802217 	ldw	r10,136(sp)
    b278:	d8001d85 	stb	zero,118(sp)
    b27c:	0027883a 	mov	r19,zero
    b280:	50800104 	addi	r2,r10,4
    b284:	54800017 	ldw	r18,0(r10)
    b288:	48021116 	blt	r9,zero,bad0 <___vfiprintf_internal_r+0x119c>
    b28c:	00ffdfc4 	movi	r3,-129
    b290:	d8802215 	stw	r2,136(sp)
    b294:	a0e8703a 	and	r20,r20,r3
    b298:	903f5e1e 	bne	r18,zero,b014 <__alt_data_end+0xff00b014>
    b29c:	0039883a 	mov	fp,zero
    b2a0:	4802a626 	beq	r9,zero,bd3c <___vfiprintf_internal_r+0x1408>
    b2a4:	0025883a 	mov	r18,zero
    b2a8:	0027883a 	mov	r19,zero
    b2ac:	003f5a06 	br	b018 <__alt_data_end+0xff00b018>
    b2b0:	21003fcc 	andi	r4,r4,255
    b2b4:	20029f1e 	bne	r4,zero,bd34 <___vfiprintf_internal_r+0x1400>
    b2b8:	a5000414 	ori	r20,r20,16
    b2bc:	a080080c 	andi	r2,r20,32
    b2c0:	10005e1e 	bne	r2,zero,b43c <___vfiprintf_internal_r+0xb08>
    b2c4:	a080040c 	andi	r2,r20,16
    b2c8:	1001a21e 	bne	r2,zero,b954 <___vfiprintf_internal_r+0x1020>
    b2cc:	a080100c 	andi	r2,r20,64
    b2d0:	d8001d85 	stb	zero,118(sp)
    b2d4:	da802217 	ldw	r10,136(sp)
    b2d8:	1002231e 	bne	r2,zero,bb68 <___vfiprintf_internal_r+0x1234>
    b2dc:	50800104 	addi	r2,r10,4
    b2e0:	54800017 	ldw	r18,0(r10)
    b2e4:	0027883a 	mov	r19,zero
    b2e8:	4801a00e 	bge	r9,zero,b96c <___vfiprintf_internal_r+0x1038>
    b2ec:	d8802215 	stw	r2,136(sp)
    b2f0:	0039883a 	mov	fp,zero
    b2f4:	94c4b03a 	or	r2,r18,r19
    b2f8:	103f901e 	bne	r2,zero,b13c <__alt_data_end+0xff00b13c>
    b2fc:	00800044 	movi	r2,1
    b300:	10803fcc 	andi	r2,r2,255
    b304:	00c00044 	movi	r3,1
    b308:	10c05926 	beq	r2,r3,b470 <___vfiprintf_internal_r+0xb3c>
    b30c:	00c00084 	movi	r3,2
    b310:	10ffe41e 	bne	r2,r3,b2a4 <__alt_data_end+0xff00b2a4>
    b314:	0025883a 	mov	r18,zero
    b318:	0027883a 	mov	r19,zero
    b31c:	00013d06 	br	b814 <___vfiprintf_internal_r+0xee0>
    b320:	21003fcc 	andi	r4,r4,255
    b324:	2002811e 	bne	r4,zero,bd2c <___vfiprintf_internal_r+0x13f8>
    b328:	00800074 	movhi	r2,1
    b32c:	1089f404 	addi	r2,r2,10192
    b330:	d8802615 	stw	r2,152(sp)
    b334:	a080080c 	andi	r2,r20,32
    b338:	103f561e 	bne	r2,zero,b094 <__alt_data_end+0xff00b094>
    b33c:	a080040c 	andi	r2,r20,16
    b340:	1001d126 	beq	r2,zero,ba88 <___vfiprintf_internal_r+0x1154>
    b344:	da802217 	ldw	r10,136(sp)
    b348:	0027883a 	mov	r19,zero
    b34c:	54800017 	ldw	r18,0(r10)
    b350:	52800104 	addi	r10,r10,4
    b354:	da802215 	stw	r10,136(sp)
    b358:	003f5306 	br	b0a8 <__alt_data_end+0xff00b0a8>
    b35c:	da802217 	ldw	r10,136(sp)
    b360:	d8001d85 	stb	zero,118(sp)
    b364:	55400017 	ldw	r21,0(r10)
    b368:	50c00104 	addi	r3,r10,4
    b36c:	a8024226 	beq	r21,zero,bc78 <___vfiprintf_internal_r+0x1344>
    b370:	48021816 	blt	r9,zero,bbd4 <___vfiprintf_internal_r+0x12a0>
    b374:	480d883a 	mov	r6,r9
    b378:	000b883a 	mov	r5,zero
    b37c:	a809883a 	mov	r4,r21
    b380:	d8c02a15 	stw	r3,168(sp)
    b384:	da002b15 	stw	r8,172(sp)
    b388:	da402c15 	stw	r9,176(sp)
    b38c:	0008b840 	call	8b84 <memchr>
    b390:	d8c02a17 	ldw	r3,168(sp)
    b394:	da002b17 	ldw	r8,172(sp)
    b398:	da402c17 	ldw	r9,176(sp)
    b39c:	10024826 	beq	r2,zero,bcc0 <___vfiprintf_internal_r+0x138c>
    b3a0:	1567c83a 	sub	r19,r2,r21
    b3a4:	df001d83 	ldbu	fp,118(sp)
    b3a8:	d8c02215 	stw	r3,136(sp)
    b3ac:	0013883a 	mov	r9,zero
    b3b0:	003e6006 	br	ad34 <__alt_data_end+0xff00ad34>
    b3b4:	21003fcc 	andi	r4,r4,255
    b3b8:	203fc026 	beq	r4,zero,b2bc <__alt_data_end+0xff00b2bc>
    b3bc:	d9c01d85 	stb	r7,118(sp)
    b3c0:	003fbe06 	br	b2bc <__alt_data_end+0xff00b2bc>
    b3c4:	da802217 	ldw	r10,136(sp)
    b3c8:	54400017 	ldw	r17,0(r10)
    b3cc:	50800104 	addi	r2,r10,4
    b3d0:	883e3b16 	blt	r17,zero,acc0 <__alt_data_end+0xff00acc0>
    b3d4:	d8802215 	stw	r2,136(sp)
    b3d8:	80c00007 	ldb	r3,0(r16)
    b3dc:	003db406 	br	aab0 <__alt_data_end+0xff00aab0>
    b3e0:	01000044 	movi	r4,1
    b3e4:	01c00ac4 	movi	r7,43
    b3e8:	80c00007 	ldb	r3,0(r16)
    b3ec:	003db006 	br	aab0 <__alt_data_end+0xff00aab0>
    b3f0:	80c00007 	ldb	r3,0(r16)
    b3f4:	82800044 	addi	r10,r16,1
    b3f8:	1b423c26 	beq	r3,r13,bcec <___vfiprintf_internal_r+0x13b8>
    b3fc:	18bff404 	addi	r2,r3,-48
    b400:	0013883a 	mov	r9,zero
    b404:	30822b36 	bltu	r6,r2,bcb4 <___vfiprintf_internal_r+0x1380>
    b408:	50c00007 	ldb	r3,0(r10)
    b40c:	4a4002a4 	muli	r9,r9,10
    b410:	54000044 	addi	r16,r10,1
    b414:	8015883a 	mov	r10,r16
    b418:	4893883a 	add	r9,r9,r2
    b41c:	18bff404 	addi	r2,r3,-48
    b420:	30bff92e 	bgeu	r6,r2,b408 <__alt_data_end+0xff00b408>
    b424:	483da30e 	bge	r9,zero,aab4 <__alt_data_end+0xff00aab4>
    b428:	027fffc4 	movi	r9,-1
    b42c:	003da106 	br	aab4 <__alt_data_end+0xff00aab4>
    b430:	a5001014 	ori	r20,r20,64
    b434:	80c00007 	ldb	r3,0(r16)
    b438:	003d9d06 	br	aab0 <__alt_data_end+0xff00aab0>
    b43c:	da802217 	ldw	r10,136(sp)
    b440:	d8001d85 	stb	zero,118(sp)
    b444:	50c00204 	addi	r3,r10,8
    b448:	54800017 	ldw	r18,0(r10)
    b44c:	54c00117 	ldw	r19,4(r10)
    b450:	4801ca16 	blt	r9,zero,bb7c <___vfiprintf_internal_r+0x1248>
    b454:	013fdfc4 	movi	r4,-129
    b458:	94c4b03a 	or	r2,r18,r19
    b45c:	d8c02215 	stw	r3,136(sp)
    b460:	a128703a 	and	r20,r20,r4
    b464:	0039883a 	mov	fp,zero
    b468:	103f341e 	bne	r2,zero,b13c <__alt_data_end+0xff00b13c>
    b46c:	483e2e26 	beq	r9,zero,ad28 <__alt_data_end+0xff00ad28>
    b470:	0025883a 	mov	r18,zero
    b474:	94800c04 	addi	r18,r18,48
    b478:	dc8019c5 	stb	r18,103(sp)
    b47c:	dcc02717 	ldw	r19,156(sp)
    b480:	dd4019c4 	addi	r21,sp,103
    b484:	003e2b06 	br	ad34 <__alt_data_end+0xff00ad34>
    b488:	21003fcc 	andi	r4,r4,255
    b48c:	2002361e 	bne	r4,zero,bd68 <___vfiprintf_internal_r+0x1434>
    b490:	1801c126 	beq	r3,zero,bb98 <___vfiprintf_internal_r+0x1264>
    b494:	04800044 	movi	r18,1
    b498:	d8c01005 	stb	r3,64(sp)
    b49c:	d8001d85 	stb	zero,118(sp)
    b4a0:	9027883a 	mov	r19,r18
    b4a4:	dd401004 	addi	r21,sp,64
    b4a8:	003f1106 	br	b0f0 <__alt_data_end+0xff00b0f0>
    b4ac:	d9402117 	ldw	r5,132(sp)
    b4b0:	d9002017 	ldw	r4,128(sp)
    b4b4:	d9801a04 	addi	r6,sp,104
    b4b8:	d9c02b15 	stw	r7,172(sp)
    b4bc:	dbc02a15 	stw	r15,168(sp)
    b4c0:	000a8200 	call	a820 <__sprint_r.part.0>
    b4c4:	d9c02b17 	ldw	r7,172(sp)
    b4c8:	dbc02a17 	ldw	r15,168(sp)
    b4cc:	10006d1e 	bne	r2,zero,b684 <___vfiprintf_internal_r+0xd50>
    b4d0:	d9801b17 	ldw	r6,108(sp)
    b4d4:	d8801c17 	ldw	r2,112(sp)
    b4d8:	d811883a 	mov	r8,sp
    b4dc:	31400044 	addi	r5,r6,1
    b4e0:	003e3306 	br	adb0 <__alt_data_end+0xff00adb0>
    b4e4:	d9401b17 	ldw	r5,108(sp)
    b4e8:	d8801c17 	ldw	r2,112(sp)
    b4ec:	29000044 	addi	r4,r5,1
    b4f0:	d8c01d87 	ldb	r3,118(sp)
    b4f4:	183e4d26 	beq	r3,zero,ae2c <__alt_data_end+0xff00ae2c>
    b4f8:	00c00044 	movi	r3,1
    b4fc:	d9401d84 	addi	r5,sp,118
    b500:	10c5883a 	add	r2,r2,r3
    b504:	41400015 	stw	r5,0(r8)
    b508:	40c00115 	stw	r3,4(r8)
    b50c:	d8801c15 	stw	r2,112(sp)
    b510:	d9001b15 	stw	r4,108(sp)
    b514:	014001c4 	movi	r5,7
    b518:	2900a90e 	bge	r5,r4,b7c0 <___vfiprintf_internal_r+0xe8c>
    b51c:	1000da1e 	bne	r2,zero,b888 <___vfiprintf_internal_r+0xf54>
    b520:	7000ab1e 	bne	r14,zero,b7d0 <___vfiprintf_internal_r+0xe9c>
    b524:	000b883a 	mov	r5,zero
    b528:	1809883a 	mov	r4,r3
    b52c:	d811883a 	mov	r8,sp
    b530:	00c02004 	movi	r3,128
    b534:	e0fe4d26 	beq	fp,r3,ae6c <__alt_data_end+0xff00ae6c>
    b538:	4cf9c83a 	sub	fp,r9,r19
    b53c:	073e7b0e 	bge	zero,fp,af2c <__alt_data_end+0xff00af2c>
    b540:	01c00404 	movi	r7,16
    b544:	3f01900e 	bge	r7,fp,bb88 <___vfiprintf_internal_r+0x1254>
    b548:	00c00074 	movhi	r3,1
    b54c:	18ca5a04 	addi	r3,r3,10600
    b550:	d8c02415 	stw	r3,144(sp)
    b554:	034001c4 	movi	r13,7
    b558:	00000506 	br	b570 <___vfiprintf_internal_r+0xc3c>
    b55c:	29000084 	addi	r4,r5,2
    b560:	42000204 	addi	r8,r8,8
    b564:	180b883a 	mov	r5,r3
    b568:	e73ffc04 	addi	fp,fp,-16
    b56c:	3f000d0e 	bge	r7,fp,b5a4 <___vfiprintf_internal_r+0xc70>
    b570:	10800404 	addi	r2,r2,16
    b574:	28c00044 	addi	r3,r5,1
    b578:	45c00015 	stw	r23,0(r8)
    b57c:	41c00115 	stw	r7,4(r8)
    b580:	d8801c15 	stw	r2,112(sp)
    b584:	d8c01b15 	stw	r3,108(sp)
    b588:	68fff40e 	bge	r13,r3,b55c <__alt_data_end+0xff00b55c>
    b58c:	1000101e 	bne	r2,zero,b5d0 <___vfiprintf_internal_r+0xc9c>
    b590:	e73ffc04 	addi	fp,fp,-16
    b594:	01000044 	movi	r4,1
    b598:	000b883a 	mov	r5,zero
    b59c:	d811883a 	mov	r8,sp
    b5a0:	3f3ff316 	blt	r7,fp,b570 <__alt_data_end+0xff00b570>
    b5a4:	da802417 	ldw	r10,144(sp)
    b5a8:	1705883a 	add	r2,r2,fp
    b5ac:	47000115 	stw	fp,4(r8)
    b5b0:	42800015 	stw	r10,0(r8)
    b5b4:	d8801c15 	stw	r2,112(sp)
    b5b8:	d9001b15 	stw	r4,108(sp)
    b5bc:	00c001c4 	movi	r3,7
    b5c0:	19003616 	blt	r3,r4,b69c <___vfiprintf_internal_r+0xd68>
    b5c4:	42000204 	addi	r8,r8,8
    b5c8:	21000044 	addi	r4,r4,1
    b5cc:	003e5706 	br	af2c <__alt_data_end+0xff00af2c>
    b5d0:	d9402117 	ldw	r5,132(sp)
    b5d4:	d9002017 	ldw	r4,128(sp)
    b5d8:	d9801a04 	addi	r6,sp,104
    b5dc:	d9c02b15 	stw	r7,172(sp)
    b5e0:	db402a15 	stw	r13,168(sp)
    b5e4:	000a8200 	call	a820 <__sprint_r.part.0>
    b5e8:	d9c02b17 	ldw	r7,172(sp)
    b5ec:	db402a17 	ldw	r13,168(sp)
    b5f0:	1000241e 	bne	r2,zero,b684 <___vfiprintf_internal_r+0xd50>
    b5f4:	d9401b17 	ldw	r5,108(sp)
    b5f8:	d8801c17 	ldw	r2,112(sp)
    b5fc:	d811883a 	mov	r8,sp
    b600:	29000044 	addi	r4,r5,1
    b604:	003fd806 	br	b568 <__alt_data_end+0xff00b568>
    b608:	d9401b17 	ldw	r5,108(sp)
    b60c:	00c00074 	movhi	r3,1
    b610:	18ca5e04 	addi	r3,r3,10616
    b614:	d8c02415 	stw	r3,144(sp)
    b618:	29400044 	addi	r5,r5,1
    b61c:	d8c02417 	ldw	r3,144(sp)
    b620:	14c5883a 	add	r2,r2,r19
    b624:	44c00115 	stw	r19,4(r8)
    b628:	40c00015 	stw	r3,0(r8)
    b62c:	d8801c15 	stw	r2,112(sp)
    b630:	d9401b15 	stw	r5,108(sp)
    b634:	00c001c4 	movi	r3,7
    b638:	1940070e 	bge	r3,r5,b658 <___vfiprintf_internal_r+0xd24>
    b63c:	103e4826 	beq	r2,zero,af60 <__alt_data_end+0xff00af60>
    b640:	d9402117 	ldw	r5,132(sp)
    b644:	d9002017 	ldw	r4,128(sp)
    b648:	d9801a04 	addi	r6,sp,104
    b64c:	000a8200 	call	a820 <__sprint_r.part.0>
    b650:	10000c1e 	bne	r2,zero,b684 <___vfiprintf_internal_r+0xd50>
    b654:	d8801c17 	ldw	r2,112(sp)
    b658:	8c80010e 	bge	r17,r18,b660 <___vfiprintf_internal_r+0xd2c>
    b65c:	9023883a 	mov	r17,r18
    b660:	da802317 	ldw	r10,140(sp)
    b664:	5455883a 	add	r10,r10,r17
    b668:	da802315 	stw	r10,140(sp)
    b66c:	103e4126 	beq	r2,zero,af74 <__alt_data_end+0xff00af74>
    b670:	d9402117 	ldw	r5,132(sp)
    b674:	d9002017 	ldw	r4,128(sp)
    b678:	d9801a04 	addi	r6,sp,104
    b67c:	000a8200 	call	a820 <__sprint_r.part.0>
    b680:	103e3c26 	beq	r2,zero,af74 <__alt_data_end+0xff00af74>
    b684:	dd002117 	ldw	r20,132(sp)
    b688:	a080030b 	ldhu	r2,12(r20)
    b68c:	1080100c 	andi	r2,r2,64
    b690:	1001231e 	bne	r2,zero,bb20 <___vfiprintf_internal_r+0x11ec>
    b694:	d8802317 	ldw	r2,140(sp)
    b698:	003d7b06 	br	ac88 <__alt_data_end+0xff00ac88>
    b69c:	1000991e 	bne	r2,zero,b904 <___vfiprintf_internal_r+0xfd0>
    b6a0:	00c00044 	movi	r3,1
    b6a4:	9805883a 	mov	r2,r19
    b6a8:	dd400015 	stw	r21,0(sp)
    b6ac:	dcc00115 	stw	r19,4(sp)
    b6b0:	dcc01c15 	stw	r19,112(sp)
    b6b4:	d8c01b15 	stw	r3,108(sp)
    b6b8:	d811883a 	mov	r8,sp
    b6bc:	42000204 	addi	r8,r8,8
    b6c0:	a2c0010c 	andi	r11,r20,4
    b6c4:	583fe426 	beq	r11,zero,b658 <__alt_data_end+0xff00b658>
    b6c8:	8ca7c83a 	sub	r19,r17,r18
    b6cc:	04ffe20e 	bge	zero,r19,b658 <__alt_data_end+0xff00b658>
    b6d0:	01c00404 	movi	r7,16
    b6d4:	3cffcc0e 	bge	r7,r19,b608 <__alt_data_end+0xff00b608>
    b6d8:	02800074 	movhi	r10,1
    b6dc:	528a5e04 	addi	r10,r10,10616
    b6e0:	d9001b17 	ldw	r4,108(sp)
    b6e4:	da802415 	stw	r10,144(sp)
    b6e8:	382b883a 	mov	r21,r7
    b6ec:	050001c4 	movi	r20,7
    b6f0:	df002017 	ldw	fp,128(sp)
    b6f4:	00000506 	br	b70c <___vfiprintf_internal_r+0xdd8>
    b6f8:	21400084 	addi	r5,r4,2
    b6fc:	42000204 	addi	r8,r8,8
    b700:	1809883a 	mov	r4,r3
    b704:	9cfffc04 	addi	r19,r19,-16
    b708:	acffc40e 	bge	r21,r19,b61c <__alt_data_end+0xff00b61c>
    b70c:	10800404 	addi	r2,r2,16
    b710:	20c00044 	addi	r3,r4,1
    b714:	45800015 	stw	r22,0(r8)
    b718:	45400115 	stw	r21,4(r8)
    b71c:	d8801c15 	stw	r2,112(sp)
    b720:	d8c01b15 	stw	r3,108(sp)
    b724:	a0fff40e 	bge	r20,r3,b6f8 <__alt_data_end+0xff00b6f8>
    b728:	1000041e 	bne	r2,zero,b73c <___vfiprintf_internal_r+0xe08>
    b72c:	01400044 	movi	r5,1
    b730:	0009883a 	mov	r4,zero
    b734:	d811883a 	mov	r8,sp
    b738:	003ff206 	br	b704 <__alt_data_end+0xff00b704>
    b73c:	d9402117 	ldw	r5,132(sp)
    b740:	d9801a04 	addi	r6,sp,104
    b744:	e009883a 	mov	r4,fp
    b748:	000a8200 	call	a820 <__sprint_r.part.0>
    b74c:	103fcd1e 	bne	r2,zero,b684 <__alt_data_end+0xff00b684>
    b750:	d9001b17 	ldw	r4,108(sp)
    b754:	d8801c17 	ldw	r2,112(sp)
    b758:	d811883a 	mov	r8,sp
    b75c:	21400044 	addi	r5,r4,1
    b760:	003fe806 	br	b704 <__alt_data_end+0xff00b704>
    b764:	d9402117 	ldw	r5,132(sp)
    b768:	d9002017 	ldw	r4,128(sp)
    b76c:	d9801a04 	addi	r6,sp,104
    b770:	d9c02b15 	stw	r7,172(sp)
    b774:	db402a15 	stw	r13,168(sp)
    b778:	000a8200 	call	a820 <__sprint_r.part.0>
    b77c:	d9c02b17 	ldw	r7,172(sp)
    b780:	db402a17 	ldw	r13,168(sp)
    b784:	103fbf1e 	bne	r2,zero,b684 <__alt_data_end+0xff00b684>
    b788:	d9401b17 	ldw	r5,108(sp)
    b78c:	d8801c17 	ldw	r2,112(sp)
    b790:	d811883a 	mov	r8,sp
    b794:	29800044 	addi	r6,r5,1
    b798:	003dc406 	br	aeac <__alt_data_end+0xff00aeac>
    b79c:	1000d21e 	bne	r2,zero,bae8 <___vfiprintf_internal_r+0x11b4>
    b7a0:	d8c01d87 	ldb	r3,118(sp)
    b7a4:	18009526 	beq	r3,zero,b9fc <___vfiprintf_internal_r+0x10c8>
    b7a8:	00800044 	movi	r2,1
    b7ac:	d8c01d84 	addi	r3,sp,118
    b7b0:	1009883a 	mov	r4,r2
    b7b4:	d8c00015 	stw	r3,0(sp)
    b7b8:	d8800115 	stw	r2,4(sp)
    b7bc:	d811883a 	mov	r8,sp
    b7c0:	200b883a 	mov	r5,r4
    b7c4:	42000204 	addi	r8,r8,8
    b7c8:	21000044 	addi	r4,r4,1
    b7cc:	003d9706 	br	ae2c <__alt_data_end+0xff00ae2c>
    b7d0:	d9001d04 	addi	r4,sp,116
    b7d4:	00800084 	movi	r2,2
    b7d8:	d9000015 	stw	r4,0(sp)
    b7dc:	d8800115 	stw	r2,4(sp)
    b7e0:	1809883a 	mov	r4,r3
    b7e4:	d811883a 	mov	r8,sp
    b7e8:	200b883a 	mov	r5,r4
    b7ec:	42000204 	addi	r8,r8,8
    b7f0:	21000044 	addi	r4,r4,1
    b7f4:	003f4e06 	br	b530 <__alt_data_end+0xff00b530>
    b7f8:	d8001d85 	stb	zero,118(sp)
    b7fc:	48005016 	blt	r9,zero,b940 <___vfiprintf_internal_r+0x100c>
    b800:	00ffdfc4 	movi	r3,-129
    b804:	94c4b03a 	or	r2,r18,r19
    b808:	a0e8703a 	and	r20,r20,r3
    b80c:	103d4426 	beq	r2,zero,ad20 <__alt_data_end+0xff00ad20>
    b810:	0039883a 	mov	fp,zero
    b814:	d9002617 	ldw	r4,152(sp)
    b818:	dd401a04 	addi	r21,sp,104
    b81c:	908003cc 	andi	r2,r18,15
    b820:	9806973a 	slli	r3,r19,28
    b824:	2085883a 	add	r2,r4,r2
    b828:	9024d13a 	srli	r18,r18,4
    b82c:	10800003 	ldbu	r2,0(r2)
    b830:	9826d13a 	srli	r19,r19,4
    b834:	ad7fffc4 	addi	r21,r21,-1
    b838:	1ca4b03a 	or	r18,r3,r18
    b83c:	a8800005 	stb	r2,0(r21)
    b840:	94c4b03a 	or	r2,r18,r19
    b844:	103ff51e 	bne	r2,zero,b81c <__alt_data_end+0xff00b81c>
    b848:	003e5906 	br	b1b0 <__alt_data_end+0xff00b1b0>
    b84c:	d9402117 	ldw	r5,132(sp)
    b850:	d9002017 	ldw	r4,128(sp)
    b854:	d9801a04 	addi	r6,sp,104
    b858:	000a8200 	call	a820 <__sprint_r.part.0>
    b85c:	103f891e 	bne	r2,zero,b684 <__alt_data_end+0xff00b684>
    b860:	d8801c17 	ldw	r2,112(sp)
    b864:	d811883a 	mov	r8,sp
    b868:	003f9506 	br	b6c0 <__alt_data_end+0xff00b6c0>
    b86c:	d9402117 	ldw	r5,132(sp)
    b870:	d9002017 	ldw	r4,128(sp)
    b874:	d9801a04 	addi	r6,sp,104
    b878:	000a8200 	call	a820 <__sprint_r.part.0>
    b87c:	103f811e 	bne	r2,zero,b684 <__alt_data_end+0xff00b684>
    b880:	d811883a 	mov	r8,sp
    b884:	003ced06 	br	ac3c <__alt_data_end+0xff00ac3c>
    b888:	d9402117 	ldw	r5,132(sp)
    b88c:	d9002017 	ldw	r4,128(sp)
    b890:	d9801a04 	addi	r6,sp,104
    b894:	da402c15 	stw	r9,176(sp)
    b898:	db802a15 	stw	r14,168(sp)
    b89c:	000a8200 	call	a820 <__sprint_r.part.0>
    b8a0:	da402c17 	ldw	r9,176(sp)
    b8a4:	db802a17 	ldw	r14,168(sp)
    b8a8:	103f761e 	bne	r2,zero,b684 <__alt_data_end+0xff00b684>
    b8ac:	d9401b17 	ldw	r5,108(sp)
    b8b0:	d8801c17 	ldw	r2,112(sp)
    b8b4:	d811883a 	mov	r8,sp
    b8b8:	29000044 	addi	r4,r5,1
    b8bc:	003d5b06 	br	ae2c <__alt_data_end+0xff00ae2c>
    b8c0:	d9402117 	ldw	r5,132(sp)
    b8c4:	d9002017 	ldw	r4,128(sp)
    b8c8:	d9801a04 	addi	r6,sp,104
    b8cc:	da402c15 	stw	r9,176(sp)
    b8d0:	000a8200 	call	a820 <__sprint_r.part.0>
    b8d4:	da402c17 	ldw	r9,176(sp)
    b8d8:	103f6a1e 	bne	r2,zero,b684 <__alt_data_end+0xff00b684>
    b8dc:	d9401b17 	ldw	r5,108(sp)
    b8e0:	d8801c17 	ldw	r2,112(sp)
    b8e4:	d811883a 	mov	r8,sp
    b8e8:	29000044 	addi	r4,r5,1
    b8ec:	003f1006 	br	b530 <__alt_data_end+0xff00b530>
    b8f0:	1000c31e 	bne	r2,zero,bc00 <___vfiprintf_internal_r+0x12cc>
    b8f4:	01000044 	movi	r4,1
    b8f8:	000b883a 	mov	r5,zero
    b8fc:	d811883a 	mov	r8,sp
    b900:	003f0d06 	br	b538 <__alt_data_end+0xff00b538>
    b904:	d9402117 	ldw	r5,132(sp)
    b908:	d9002017 	ldw	r4,128(sp)
    b90c:	d9801a04 	addi	r6,sp,104
    b910:	000a8200 	call	a820 <__sprint_r.part.0>
    b914:	103f5b1e 	bne	r2,zero,b684 <__alt_data_end+0xff00b684>
    b918:	d9001b17 	ldw	r4,108(sp)
    b91c:	d8801c17 	ldw	r2,112(sp)
    b920:	d811883a 	mov	r8,sp
    b924:	21000044 	addi	r4,r4,1
    b928:	003d8006 	br	af2c <__alt_data_end+0xff00af2c>
    b92c:	01000074 	movhi	r4,1
    b930:	2109f904 	addi	r4,r4,10212
    b934:	d9002615 	stw	r4,152(sp)
    b938:	d8c02215 	stw	r3,136(sp)
    b93c:	1029883a 	mov	r20,r2
    b940:	94c4b03a 	or	r2,r18,r19
    b944:	103fb21e 	bne	r2,zero,b810 <__alt_data_end+0xff00b810>
    b948:	0039883a 	mov	fp,zero
    b94c:	00800084 	movi	r2,2
    b950:	003e6b06 	br	b300 <__alt_data_end+0xff00b300>
    b954:	da802217 	ldw	r10,136(sp)
    b958:	d8001d85 	stb	zero,118(sp)
    b95c:	0027883a 	mov	r19,zero
    b960:	50800104 	addi	r2,r10,4
    b964:	54800017 	ldw	r18,0(r10)
    b968:	483e6016 	blt	r9,zero,b2ec <__alt_data_end+0xff00b2ec>
    b96c:	00ffdfc4 	movi	r3,-129
    b970:	d8802215 	stw	r2,136(sp)
    b974:	a0e8703a 	and	r20,r20,r3
    b978:	0039883a 	mov	fp,zero
    b97c:	903ebb26 	beq	r18,zero,b46c <__alt_data_end+0xff00b46c>
    b980:	00800244 	movi	r2,9
    b984:	14bdee36 	bltu	r2,r18,b140 <__alt_data_end+0xff00b140>
    b988:	003eba06 	br	b474 <__alt_data_end+0xff00b474>
    b98c:	00800c04 	movi	r2,48
    b990:	d8c01d45 	stb	r3,117(sp)
    b994:	d8801d05 	stb	r2,116(sp)
    b998:	d8001d85 	stb	zero,118(sp)
    b99c:	a0c00094 	ori	r3,r20,2
    b9a0:	4800a916 	blt	r9,zero,bc48 <___vfiprintf_internal_r+0x1314>
    b9a4:	00bfdfc4 	movi	r2,-129
    b9a8:	a096703a 	and	r11,r20,r2
    b9ac:	5d000094 	ori	r20,r11,2
    b9b0:	0039883a 	mov	fp,zero
    b9b4:	003f9706 	br	b814 <__alt_data_end+0xff00b814>
    b9b8:	8025883a 	mov	r18,r16
    b9bc:	003c2e06 	br	aa78 <__alt_data_end+0xff00aa78>
    b9c0:	00800074 	movhi	r2,1
    b9c4:	1089f904 	addi	r2,r2,10212
    b9c8:	0039883a 	mov	fp,zero
    b9cc:	d8802615 	stw	r2,152(sp)
    b9d0:	003f9006 	br	b814 <__alt_data_end+0xff00b814>
    b9d4:	04a5c83a 	sub	r18,zero,r18
    b9d8:	07000b44 	movi	fp,45
    b9dc:	9004c03a 	cmpne	r2,r18,zero
    b9e0:	04e7c83a 	sub	r19,zero,r19
    b9e4:	df001d85 	stb	fp,118(sp)
    b9e8:	98a7c83a 	sub	r19,r19,r2
    b9ec:	48009f16 	blt	r9,zero,bc6c <___vfiprintf_internal_r+0x1338>
    b9f0:	00bfdfc4 	movi	r2,-129
    b9f4:	a0a8703a 	and	r20,r20,r2
    b9f8:	003dd006 	br	b13c <__alt_data_end+0xff00b13c>
    b9fc:	70004c26 	beq	r14,zero,bb30 <___vfiprintf_internal_r+0x11fc>
    ba00:	00800084 	movi	r2,2
    ba04:	d8c01d04 	addi	r3,sp,116
    ba08:	d8c00015 	stw	r3,0(sp)
    ba0c:	d8800115 	stw	r2,4(sp)
    ba10:	01000044 	movi	r4,1
    ba14:	d811883a 	mov	r8,sp
    ba18:	003f7306 	br	b7e8 <__alt_data_end+0xff00b7e8>
    ba1c:	a080100c 	andi	r2,r20,64
    ba20:	da802217 	ldw	r10,136(sp)
    ba24:	103e0626 	beq	r2,zero,b240 <__alt_data_end+0xff00b240>
    ba28:	5480000f 	ldh	r18,0(r10)
    ba2c:	52800104 	addi	r10,r10,4
    ba30:	da802215 	stw	r10,136(sp)
    ba34:	9027d7fa 	srai	r19,r18,31
    ba38:	9805883a 	mov	r2,r19
    ba3c:	003db806 	br	b120 <__alt_data_end+0xff00b120>
    ba40:	a080040c 	andi	r2,r20,16
    ba44:	1000091e 	bne	r2,zero,ba6c <___vfiprintf_internal_r+0x1138>
    ba48:	a2c0100c 	andi	r11,r20,64
    ba4c:	58000726 	beq	r11,zero,ba6c <___vfiprintf_internal_r+0x1138>
    ba50:	da802217 	ldw	r10,136(sp)
    ba54:	50800017 	ldw	r2,0(r10)
    ba58:	52800104 	addi	r10,r10,4
    ba5c:	da802215 	stw	r10,136(sp)
    ba60:	da802317 	ldw	r10,140(sp)
    ba64:	1280000d 	sth	r10,0(r2)
    ba68:	003be706 	br	aa08 <__alt_data_end+0xff00aa08>
    ba6c:	da802217 	ldw	r10,136(sp)
    ba70:	50800017 	ldw	r2,0(r10)
    ba74:	52800104 	addi	r10,r10,4
    ba78:	da802215 	stw	r10,136(sp)
    ba7c:	da802317 	ldw	r10,140(sp)
    ba80:	12800015 	stw	r10,0(r2)
    ba84:	003be006 	br	aa08 <__alt_data_end+0xff00aa08>
    ba88:	a080100c 	andi	r2,r20,64
    ba8c:	da802217 	ldw	r10,136(sp)
    ba90:	10003026 	beq	r2,zero,bb54 <___vfiprintf_internal_r+0x1220>
    ba94:	5480000b 	ldhu	r18,0(r10)
    ba98:	52800104 	addi	r10,r10,4
    ba9c:	0027883a 	mov	r19,zero
    baa0:	da802215 	stw	r10,136(sp)
    baa4:	003d8006 	br	b0a8 <__alt_data_end+0xff00b0a8>
    baa8:	80c00007 	ldb	r3,0(r16)
    baac:	003c0006 	br	aab0 <__alt_data_end+0xff00aab0>
    bab0:	a080100c 	andi	r2,r20,64
    bab4:	d8001d85 	stb	zero,118(sp)
    bab8:	da802217 	ldw	r10,136(sp)
    babc:	1000201e 	bne	r2,zero,bb40 <___vfiprintf_internal_r+0x120c>
    bac0:	50800104 	addi	r2,r10,4
    bac4:	54800017 	ldw	r18,0(r10)
    bac8:	0027883a 	mov	r19,zero
    bacc:	483def0e 	bge	r9,zero,b28c <__alt_data_end+0xff00b28c>
    bad0:	94c6b03a 	or	r3,r18,r19
    bad4:	d8802215 	stw	r2,136(sp)
    bad8:	183d4e1e 	bne	r3,zero,b014 <__alt_data_end+0xff00b014>
    badc:	0039883a 	mov	fp,zero
    bae0:	0005883a 	mov	r2,zero
    bae4:	003e0606 	br	b300 <__alt_data_end+0xff00b300>
    bae8:	d9402117 	ldw	r5,132(sp)
    baec:	d9002017 	ldw	r4,128(sp)
    baf0:	d9801a04 	addi	r6,sp,104
    baf4:	da402c15 	stw	r9,176(sp)
    baf8:	db802a15 	stw	r14,168(sp)
    bafc:	000a8200 	call	a820 <__sprint_r.part.0>
    bb00:	da402c17 	ldw	r9,176(sp)
    bb04:	db802a17 	ldw	r14,168(sp)
    bb08:	103ede1e 	bne	r2,zero,b684 <__alt_data_end+0xff00b684>
    bb0c:	d9401b17 	ldw	r5,108(sp)
    bb10:	d8801c17 	ldw	r2,112(sp)
    bb14:	d811883a 	mov	r8,sp
    bb18:	29000044 	addi	r4,r5,1
    bb1c:	003e7406 	br	b4f0 <__alt_data_end+0xff00b4f0>
    bb20:	00bfffc4 	movi	r2,-1
    bb24:	003c5806 	br	ac88 <__alt_data_end+0xff00ac88>
    bb28:	d811883a 	mov	r8,sp
    bb2c:	003ee806 	br	b6d0 <__alt_data_end+0xff00b6d0>
    bb30:	000b883a 	mov	r5,zero
    bb34:	01000044 	movi	r4,1
    bb38:	d811883a 	mov	r8,sp
    bb3c:	003e7c06 	br	b530 <__alt_data_end+0xff00b530>
    bb40:	50800104 	addi	r2,r10,4
    bb44:	5480000b 	ldhu	r18,0(r10)
    bb48:	0027883a 	mov	r19,zero
    bb4c:	483dcf0e 	bge	r9,zero,b28c <__alt_data_end+0xff00b28c>
    bb50:	003fdf06 	br	bad0 <__alt_data_end+0xff00bad0>
    bb54:	54800017 	ldw	r18,0(r10)
    bb58:	52800104 	addi	r10,r10,4
    bb5c:	0027883a 	mov	r19,zero
    bb60:	da802215 	stw	r10,136(sp)
    bb64:	003d5006 	br	b0a8 <__alt_data_end+0xff00b0a8>
    bb68:	50800104 	addi	r2,r10,4
    bb6c:	5480000b 	ldhu	r18,0(r10)
    bb70:	0027883a 	mov	r19,zero
    bb74:	483f7d0e 	bge	r9,zero,b96c <__alt_data_end+0xff00b96c>
    bb78:	003ddc06 	br	b2ec <__alt_data_end+0xff00b2ec>
    bb7c:	d8c02215 	stw	r3,136(sp)
    bb80:	0039883a 	mov	fp,zero
    bb84:	003ddb06 	br	b2f4 <__alt_data_end+0xff00b2f4>
    bb88:	02800074 	movhi	r10,1
    bb8c:	528a5a04 	addi	r10,r10,10600
    bb90:	da802415 	stw	r10,144(sp)
    bb94:	003e8306 	br	b5a4 <__alt_data_end+0xff00b5a4>
    bb98:	d8801c17 	ldw	r2,112(sp)
    bb9c:	dd002117 	ldw	r20,132(sp)
    bba0:	103eb926 	beq	r2,zero,b688 <__alt_data_end+0xff00b688>
    bba4:	d9002017 	ldw	r4,128(sp)
    bba8:	d9801a04 	addi	r6,sp,104
    bbac:	a00b883a 	mov	r5,r20
    bbb0:	000a8200 	call	a820 <__sprint_r.part.0>
    bbb4:	003eb406 	br	b688 <__alt_data_end+0xff00b688>
    bbb8:	80c00043 	ldbu	r3,1(r16)
    bbbc:	a5000814 	ori	r20,r20,32
    bbc0:	84000044 	addi	r16,r16,1
    bbc4:	18c03fcc 	andi	r3,r3,255
    bbc8:	18c0201c 	xori	r3,r3,128
    bbcc:	18ffe004 	addi	r3,r3,-128
    bbd0:	003bb706 	br	aab0 <__alt_data_end+0xff00aab0>
    bbd4:	a809883a 	mov	r4,r21
    bbd8:	d8c02a15 	stw	r3,168(sp)
    bbdc:	da002b15 	stw	r8,172(sp)
    bbe0:	0003ae80 	call	3ae8 <strlen>
    bbe4:	d8c02a17 	ldw	r3,168(sp)
    bbe8:	1027883a 	mov	r19,r2
    bbec:	df001d83 	ldbu	fp,118(sp)
    bbf0:	d8c02215 	stw	r3,136(sp)
    bbf4:	0013883a 	mov	r9,zero
    bbf8:	da002b17 	ldw	r8,172(sp)
    bbfc:	003c4d06 	br	ad34 <__alt_data_end+0xff00ad34>
    bc00:	d9402117 	ldw	r5,132(sp)
    bc04:	d9002017 	ldw	r4,128(sp)
    bc08:	d9801a04 	addi	r6,sp,104
    bc0c:	da402c15 	stw	r9,176(sp)
    bc10:	000a8200 	call	a820 <__sprint_r.part.0>
    bc14:	da402c17 	ldw	r9,176(sp)
    bc18:	103e9a1e 	bne	r2,zero,b684 <__alt_data_end+0xff00b684>
    bc1c:	d9401b17 	ldw	r5,108(sp)
    bc20:	d8801c17 	ldw	r2,112(sp)
    bc24:	d811883a 	mov	r8,sp
    bc28:	29000044 	addi	r4,r5,1
    bc2c:	003e4206 	br	b538 <__alt_data_end+0xff00b538>
    bc30:	d9401b17 	ldw	r5,108(sp)
    bc34:	01000074 	movhi	r4,1
    bc38:	210a5e04 	addi	r4,r4,10616
    bc3c:	d9002415 	stw	r4,144(sp)
    bc40:	29400044 	addi	r5,r5,1
    bc44:	003c6d06 	br	adfc <__alt_data_end+0xff00adfc>
    bc48:	0039883a 	mov	fp,zero
    bc4c:	00800084 	movi	r2,2
    bc50:	10803fcc 	andi	r2,r2,255
    bc54:	01000044 	movi	r4,1
    bc58:	11001e26 	beq	r2,r4,bcd4 <___vfiprintf_internal_r+0x13a0>
    bc5c:	01000084 	movi	r4,2
    bc60:	11001e1e 	bne	r2,r4,bcdc <___vfiprintf_internal_r+0x13a8>
    bc64:	1829883a 	mov	r20,r3
    bc68:	003eea06 	br	b814 <__alt_data_end+0xff00b814>
    bc6c:	a007883a 	mov	r3,r20
    bc70:	00800044 	movi	r2,1
    bc74:	003ff606 	br	bc50 <__alt_data_end+0xff00bc50>
    bc78:	00800184 	movi	r2,6
    bc7c:	1240012e 	bgeu	r2,r9,bc84 <___vfiprintf_internal_r+0x1350>
    bc80:	1013883a 	mov	r9,r2
    bc84:	4827883a 	mov	r19,r9
    bc88:	4825883a 	mov	r18,r9
    bc8c:	48001516 	blt	r9,zero,bce4 <___vfiprintf_internal_r+0x13b0>
    bc90:	05400074 	movhi	r21,1
    bc94:	d8c02215 	stw	r3,136(sp)
    bc98:	ad49fe04 	addi	r21,r21,10232
    bc9c:	003d1406 	br	b0f0 <__alt_data_end+0xff00b0f0>
    bca0:	02800074 	movhi	r10,1
    bca4:	528a5a04 	addi	r10,r10,10600
    bca8:	da802415 	stw	r10,144(sp)
    bcac:	200d883a 	mov	r6,r4
    bcb0:	003c9106 	br	aef8 <__alt_data_end+0xff00aef8>
    bcb4:	5021883a 	mov	r16,r10
    bcb8:	0013883a 	mov	r9,zero
    bcbc:	003b7d06 	br	aab4 <__alt_data_end+0xff00aab4>
    bcc0:	4827883a 	mov	r19,r9
    bcc4:	df001d83 	ldbu	fp,118(sp)
    bcc8:	d8c02215 	stw	r3,136(sp)
    bccc:	0013883a 	mov	r9,zero
    bcd0:	003c1806 	br	ad34 <__alt_data_end+0xff00ad34>
    bcd4:	1829883a 	mov	r20,r3
    bcd8:	003d1806 	br	b13c <__alt_data_end+0xff00b13c>
    bcdc:	1829883a 	mov	r20,r3
    bce0:	003ccd06 	br	b018 <__alt_data_end+0xff00b018>
    bce4:	0025883a 	mov	r18,zero
    bce8:	003fe906 	br	bc90 <__alt_data_end+0xff00bc90>
    bcec:	d8802217 	ldw	r2,136(sp)
    bcf0:	80c00043 	ldbu	r3,1(r16)
    bcf4:	5021883a 	mov	r16,r10
    bcf8:	12400017 	ldw	r9,0(r2)
    bcfc:	10800104 	addi	r2,r2,4
    bd00:	d8802215 	stw	r2,136(sp)
    bd04:	483faf0e 	bge	r9,zero,bbc4 <__alt_data_end+0xff00bbc4>
    bd08:	18c03fcc 	andi	r3,r3,255
    bd0c:	18c0201c 	xori	r3,r3,128
    bd10:	027fffc4 	movi	r9,-1
    bd14:	18ffe004 	addi	r3,r3,-128
    bd18:	003b6506 	br	aab0 <__alt_data_end+0xff00aab0>
    bd1c:	d9c01d85 	stb	r7,118(sp)
    bd20:	003ca006 	br	afa4 <__alt_data_end+0xff00afa4>
    bd24:	d9c01d85 	stb	r7,118(sp)
    bd28:	003cad06 	br	afe0 <__alt_data_end+0xff00afe0>
    bd2c:	d9c01d85 	stb	r7,118(sp)
    bd30:	003d7d06 	br	b328 <__alt_data_end+0xff00b328>
    bd34:	d9c01d85 	stb	r7,118(sp)
    bd38:	003d5f06 	br	b2b8 <__alt_data_end+0xff00b2b8>
    bd3c:	a080004c 	andi	r2,r20,1
    bd40:	0039883a 	mov	fp,zero
    bd44:	10000526 	beq	r2,zero,bd5c <___vfiprintf_internal_r+0x1428>
    bd48:	00800c04 	movi	r2,48
    bd4c:	d88019c5 	stb	r2,103(sp)
    bd50:	dcc02717 	ldw	r19,156(sp)
    bd54:	dd4019c4 	addi	r21,sp,103
    bd58:	003bf606 	br	ad34 <__alt_data_end+0xff00ad34>
    bd5c:	0027883a 	mov	r19,zero
    bd60:	dd401a04 	addi	r21,sp,104
    bd64:	003bf306 	br	ad34 <__alt_data_end+0xff00ad34>
    bd68:	d9c01d85 	stb	r7,118(sp)
    bd6c:	003dc806 	br	b490 <__alt_data_end+0xff00b490>
    bd70:	d9c01d85 	stb	r7,118(sp)
    bd74:	003d3a06 	br	b260 <__alt_data_end+0xff00b260>
    bd78:	d9c01d85 	stb	r7,118(sp)
    bd7c:	003d2a06 	br	b228 <__alt_data_end+0xff00b228>
    bd80:	d9c01d85 	stb	r7,118(sp)
    bd84:	003cde06 	br	b100 <__alt_data_end+0xff00b100>
    bd88:	d9c01d85 	stb	r7,118(sp)
    bd8c:	003cbc06 	br	b080 <__alt_data_end+0xff00b080>

0000bd90 <__vfiprintf_internal>:
    bd90:	00800074 	movhi	r2,1
    bd94:	10915b04 	addi	r2,r2,17772
    bd98:	300f883a 	mov	r7,r6
    bd9c:	280d883a 	mov	r6,r5
    bda0:	200b883a 	mov	r5,r4
    bda4:	11000017 	ldw	r4,0(r2)
    bda8:	000a9341 	jmpi	a934 <___vfiprintf_internal_r>

0000bdac <__sbprintf>:
    bdac:	2880030b 	ldhu	r2,12(r5)
    bdb0:	2ac01917 	ldw	r11,100(r5)
    bdb4:	2a80038b 	ldhu	r10,14(r5)
    bdb8:	2a400717 	ldw	r9,28(r5)
    bdbc:	2a000917 	ldw	r8,36(r5)
    bdc0:	defee204 	addi	sp,sp,-1144
    bdc4:	00c10004 	movi	r3,1024
    bdc8:	dc011a15 	stw	r16,1128(sp)
    bdcc:	10bfff4c 	andi	r2,r2,65533
    bdd0:	2821883a 	mov	r16,r5
    bdd4:	d8cb883a 	add	r5,sp,r3
    bdd8:	dc811c15 	stw	r18,1136(sp)
    bddc:	dc411b15 	stw	r17,1132(sp)
    bde0:	dfc11d15 	stw	ra,1140(sp)
    bde4:	2025883a 	mov	r18,r4
    bde8:	d881030d 	sth	r2,1036(sp)
    bdec:	dac11915 	stw	r11,1124(sp)
    bdf0:	da81038d 	sth	r10,1038(sp)
    bdf4:	da410715 	stw	r9,1052(sp)
    bdf8:	da010915 	stw	r8,1060(sp)
    bdfc:	dec10015 	stw	sp,1024(sp)
    be00:	dec10415 	stw	sp,1040(sp)
    be04:	d8c10215 	stw	r3,1032(sp)
    be08:	d8c10515 	stw	r3,1044(sp)
    be0c:	d8010615 	stw	zero,1048(sp)
    be10:	000a9340 	call	a934 <___vfiprintf_internal_r>
    be14:	1023883a 	mov	r17,r2
    be18:	10000416 	blt	r2,zero,be2c <__sbprintf+0x80>
    be1c:	d9410004 	addi	r5,sp,1024
    be20:	9009883a 	mov	r4,r18
    be24:	0007a480 	call	7a48 <_fflush_r>
    be28:	10000d1e 	bne	r2,zero,be60 <__sbprintf+0xb4>
    be2c:	d881030b 	ldhu	r2,1036(sp)
    be30:	1080100c 	andi	r2,r2,64
    be34:	10000326 	beq	r2,zero,be44 <__sbprintf+0x98>
    be38:	8080030b 	ldhu	r2,12(r16)
    be3c:	10801014 	ori	r2,r2,64
    be40:	8080030d 	sth	r2,12(r16)
    be44:	8805883a 	mov	r2,r17
    be48:	dfc11d17 	ldw	ra,1140(sp)
    be4c:	dc811c17 	ldw	r18,1136(sp)
    be50:	dc411b17 	ldw	r17,1132(sp)
    be54:	dc011a17 	ldw	r16,1128(sp)
    be58:	dec11e04 	addi	sp,sp,1144
    be5c:	f800283a 	ret
    be60:	047fffc4 	movi	r17,-1
    be64:	003ff106 	br	be2c <__alt_data_end+0xff00be2c>

0000be68 <_write_r>:
    be68:	defffd04 	addi	sp,sp,-12
    be6c:	2805883a 	mov	r2,r5
    be70:	dc000015 	stw	r16,0(sp)
    be74:	04000074 	movhi	r16,1
    be78:	dc400115 	stw	r17,4(sp)
    be7c:	300b883a 	mov	r5,r6
    be80:	84183004 	addi	r16,r16,24768
    be84:	2023883a 	mov	r17,r4
    be88:	380d883a 	mov	r6,r7
    be8c:	1009883a 	mov	r4,r2
    be90:	dfc00215 	stw	ra,8(sp)
    be94:	80000015 	stw	zero,0(r16)
    be98:	00101300 	call	10130 <write>
    be9c:	00ffffc4 	movi	r3,-1
    bea0:	10c00526 	beq	r2,r3,beb8 <_write_r+0x50>
    bea4:	dfc00217 	ldw	ra,8(sp)
    bea8:	dc400117 	ldw	r17,4(sp)
    beac:	dc000017 	ldw	r16,0(sp)
    beb0:	dec00304 	addi	sp,sp,12
    beb4:	f800283a 	ret
    beb8:	80c00017 	ldw	r3,0(r16)
    bebc:	183ff926 	beq	r3,zero,bea4 <__alt_data_end+0xff00bea4>
    bec0:	88c00015 	stw	r3,0(r17)
    bec4:	003ff706 	br	bea4 <__alt_data_end+0xff00bea4>

0000bec8 <_close_r>:
    bec8:	defffd04 	addi	sp,sp,-12
    becc:	dc000015 	stw	r16,0(sp)
    bed0:	04000074 	movhi	r16,1
    bed4:	dc400115 	stw	r17,4(sp)
    bed8:	84183004 	addi	r16,r16,24768
    bedc:	2023883a 	mov	r17,r4
    bee0:	2809883a 	mov	r4,r5
    bee4:	dfc00215 	stw	ra,8(sp)
    bee8:	80000015 	stw	zero,0(r16)
    beec:	000f8f00 	call	f8f0 <close>
    bef0:	00ffffc4 	movi	r3,-1
    bef4:	10c00526 	beq	r2,r3,bf0c <_close_r+0x44>
    bef8:	dfc00217 	ldw	ra,8(sp)
    befc:	dc400117 	ldw	r17,4(sp)
    bf00:	dc000017 	ldw	r16,0(sp)
    bf04:	dec00304 	addi	sp,sp,12
    bf08:	f800283a 	ret
    bf0c:	80c00017 	ldw	r3,0(r16)
    bf10:	183ff926 	beq	r3,zero,bef8 <__alt_data_end+0xff00bef8>
    bf14:	88c00015 	stw	r3,0(r17)
    bf18:	003ff706 	br	bef8 <__alt_data_end+0xff00bef8>

0000bf1c <_calloc_r>:
    bf1c:	298b383a 	mul	r5,r5,r6
    bf20:	defffe04 	addi	sp,sp,-8
    bf24:	dfc00115 	stw	ra,4(sp)
    bf28:	dc000015 	stw	r16,0(sp)
    bf2c:	00031480 	call	3148 <_malloc_r>
    bf30:	10002926 	beq	r2,zero,bfd8 <_calloc_r+0xbc>
    bf34:	11bfff17 	ldw	r6,-4(r2)
    bf38:	1021883a 	mov	r16,r2
    bf3c:	00bfff04 	movi	r2,-4
    bf40:	308c703a 	and	r6,r6,r2
    bf44:	00c00904 	movi	r3,36
    bf48:	308d883a 	add	r6,r6,r2
    bf4c:	19801636 	bltu	r3,r6,bfa8 <_calloc_r+0x8c>
    bf50:	008004c4 	movi	r2,19
    bf54:	11800b2e 	bgeu	r2,r6,bf84 <_calloc_r+0x68>
    bf58:	80000015 	stw	zero,0(r16)
    bf5c:	80000115 	stw	zero,4(r16)
    bf60:	008006c4 	movi	r2,27
    bf64:	11801a2e 	bgeu	r2,r6,bfd0 <_calloc_r+0xb4>
    bf68:	80000215 	stw	zero,8(r16)
    bf6c:	80000315 	stw	zero,12(r16)
    bf70:	30c0151e 	bne	r6,r3,bfc8 <_calloc_r+0xac>
    bf74:	80000415 	stw	zero,16(r16)
    bf78:	80800604 	addi	r2,r16,24
    bf7c:	80000515 	stw	zero,20(r16)
    bf80:	00000106 	br	bf88 <_calloc_r+0x6c>
    bf84:	8005883a 	mov	r2,r16
    bf88:	10000015 	stw	zero,0(r2)
    bf8c:	10000115 	stw	zero,4(r2)
    bf90:	10000215 	stw	zero,8(r2)
    bf94:	8005883a 	mov	r2,r16
    bf98:	dfc00117 	ldw	ra,4(sp)
    bf9c:	dc000017 	ldw	r16,0(sp)
    bfa0:	dec00204 	addi	sp,sp,8
    bfa4:	f800283a 	ret
    bfa8:	000b883a 	mov	r5,zero
    bfac:	8009883a 	mov	r4,r16
    bfb0:	0008f0c0 	call	8f0c <memset>
    bfb4:	8005883a 	mov	r2,r16
    bfb8:	dfc00117 	ldw	ra,4(sp)
    bfbc:	dc000017 	ldw	r16,0(sp)
    bfc0:	dec00204 	addi	sp,sp,8
    bfc4:	f800283a 	ret
    bfc8:	80800404 	addi	r2,r16,16
    bfcc:	003fee06 	br	bf88 <__alt_data_end+0xff00bf88>
    bfd0:	80800204 	addi	r2,r16,8
    bfd4:	003fec06 	br	bf88 <__alt_data_end+0xff00bf88>
    bfd8:	0005883a 	mov	r2,zero
    bfdc:	003fee06 	br	bf98 <__alt_data_end+0xff00bf98>

0000bfe0 <_fclose_r>:
    bfe0:	28003926 	beq	r5,zero,c0c8 <_fclose_r+0xe8>
    bfe4:	defffc04 	addi	sp,sp,-16
    bfe8:	dc400115 	stw	r17,4(sp)
    bfec:	dc000015 	stw	r16,0(sp)
    bff0:	dfc00315 	stw	ra,12(sp)
    bff4:	dc800215 	stw	r18,8(sp)
    bff8:	2023883a 	mov	r17,r4
    bffc:	2821883a 	mov	r16,r5
    c000:	20000226 	beq	r4,zero,c00c <_fclose_r+0x2c>
    c004:	20800e17 	ldw	r2,56(r4)
    c008:	10002726 	beq	r2,zero,c0a8 <_fclose_r+0xc8>
    c00c:	8080030f 	ldh	r2,12(r16)
    c010:	1000071e 	bne	r2,zero,c030 <_fclose_r+0x50>
    c014:	0005883a 	mov	r2,zero
    c018:	dfc00317 	ldw	ra,12(sp)
    c01c:	dc800217 	ldw	r18,8(sp)
    c020:	dc400117 	ldw	r17,4(sp)
    c024:	dc000017 	ldw	r16,0(sp)
    c028:	dec00404 	addi	sp,sp,16
    c02c:	f800283a 	ret
    c030:	800b883a 	mov	r5,r16
    c034:	8809883a 	mov	r4,r17
    c038:	000782c0 	call	782c <__sflush_r>
    c03c:	1025883a 	mov	r18,r2
    c040:	80800b17 	ldw	r2,44(r16)
    c044:	10000426 	beq	r2,zero,c058 <_fclose_r+0x78>
    c048:	81400717 	ldw	r5,28(r16)
    c04c:	8809883a 	mov	r4,r17
    c050:	103ee83a 	callr	r2
    c054:	10001616 	blt	r2,zero,c0b0 <_fclose_r+0xd0>
    c058:	8080030b 	ldhu	r2,12(r16)
    c05c:	1080200c 	andi	r2,r2,128
    c060:	1000151e 	bne	r2,zero,c0b8 <_fclose_r+0xd8>
    c064:	81400c17 	ldw	r5,48(r16)
    c068:	28000526 	beq	r5,zero,c080 <_fclose_r+0xa0>
    c06c:	80801004 	addi	r2,r16,64
    c070:	28800226 	beq	r5,r2,c07c <_fclose_r+0x9c>
    c074:	8809883a 	mov	r4,r17
    c078:	0007f980 	call	7f98 <_free_r>
    c07c:	80000c15 	stw	zero,48(r16)
    c080:	81401117 	ldw	r5,68(r16)
    c084:	28000326 	beq	r5,zero,c094 <_fclose_r+0xb4>
    c088:	8809883a 	mov	r4,r17
    c08c:	0007f980 	call	7f98 <_free_r>
    c090:	80001115 	stw	zero,68(r16)
    c094:	0007e340 	call	7e34 <__sfp_lock_acquire>
    c098:	8000030d 	sth	zero,12(r16)
    c09c:	0007e380 	call	7e38 <__sfp_lock_release>
    c0a0:	9005883a 	mov	r2,r18
    c0a4:	003fdc06 	br	c018 <__alt_data_end+0xff00c018>
    c0a8:	0007e240 	call	7e24 <__sinit>
    c0ac:	003fd706 	br	c00c <__alt_data_end+0xff00c00c>
    c0b0:	04bfffc4 	movi	r18,-1
    c0b4:	003fe806 	br	c058 <__alt_data_end+0xff00c058>
    c0b8:	81400417 	ldw	r5,16(r16)
    c0bc:	8809883a 	mov	r4,r17
    c0c0:	0007f980 	call	7f98 <_free_r>
    c0c4:	003fe706 	br	c064 <__alt_data_end+0xff00c064>
    c0c8:	0005883a 	mov	r2,zero
    c0cc:	f800283a 	ret

0000c0d0 <fclose>:
    c0d0:	00800074 	movhi	r2,1
    c0d4:	10915b04 	addi	r2,r2,17772
    c0d8:	200b883a 	mov	r5,r4
    c0dc:	11000017 	ldw	r4,0(r2)
    c0e0:	000bfe01 	jmpi	bfe0 <_fclose_r>

0000c0e4 <__fputwc>:
    c0e4:	defff804 	addi	sp,sp,-32
    c0e8:	dcc00415 	stw	r19,16(sp)
    c0ec:	dc800315 	stw	r18,12(sp)
    c0f0:	dc000115 	stw	r16,4(sp)
    c0f4:	dfc00715 	stw	ra,28(sp)
    c0f8:	dd400615 	stw	r21,24(sp)
    c0fc:	dd000515 	stw	r20,20(sp)
    c100:	dc400215 	stw	r17,8(sp)
    c104:	2027883a 	mov	r19,r4
    c108:	2825883a 	mov	r18,r5
    c10c:	3021883a 	mov	r16,r6
    c110:	00089740 	call	8974 <__locale_mb_cur_max>
    c114:	00c00044 	movi	r3,1
    c118:	10c03e26 	beq	r2,r3,c214 <__fputwc+0x130>
    c11c:	81c01704 	addi	r7,r16,92
    c120:	900d883a 	mov	r6,r18
    c124:	d80b883a 	mov	r5,sp
    c128:	9809883a 	mov	r4,r19
    c12c:	000c5b40 	call	c5b4 <_wcrtomb_r>
    c130:	1029883a 	mov	r20,r2
    c134:	00bfffc4 	movi	r2,-1
    c138:	a0802026 	beq	r20,r2,c1bc <__fputwc+0xd8>
    c13c:	d9400003 	ldbu	r5,0(sp)
    c140:	a0001c26 	beq	r20,zero,c1b4 <__fputwc+0xd0>
    c144:	0023883a 	mov	r17,zero
    c148:	05400284 	movi	r21,10
    c14c:	00000906 	br	c174 <__fputwc+0x90>
    c150:	80800017 	ldw	r2,0(r16)
    c154:	11400005 	stb	r5,0(r2)
    c158:	80c00017 	ldw	r3,0(r16)
    c15c:	18c00044 	addi	r3,r3,1
    c160:	80c00015 	stw	r3,0(r16)
    c164:	8c400044 	addi	r17,r17,1
    c168:	dc45883a 	add	r2,sp,r17
    c16c:	8d00112e 	bgeu	r17,r20,c1b4 <__fputwc+0xd0>
    c170:	11400003 	ldbu	r5,0(r2)
    c174:	80c00217 	ldw	r3,8(r16)
    c178:	18ffffc4 	addi	r3,r3,-1
    c17c:	80c00215 	stw	r3,8(r16)
    c180:	183ff30e 	bge	r3,zero,c150 <__alt_data_end+0xff00c150>
    c184:	80800617 	ldw	r2,24(r16)
    c188:	18801916 	blt	r3,r2,c1f0 <__fputwc+0x10c>
    c18c:	80800017 	ldw	r2,0(r16)
    c190:	11400005 	stb	r5,0(r2)
    c194:	80800017 	ldw	r2,0(r16)
    c198:	10c00003 	ldbu	r3,0(r2)
    c19c:	10800044 	addi	r2,r2,1
    c1a0:	1d402326 	beq	r3,r21,c230 <__fputwc+0x14c>
    c1a4:	80800015 	stw	r2,0(r16)
    c1a8:	8c400044 	addi	r17,r17,1
    c1ac:	dc45883a 	add	r2,sp,r17
    c1b0:	8d3fef36 	bltu	r17,r20,c170 <__alt_data_end+0xff00c170>
    c1b4:	9005883a 	mov	r2,r18
    c1b8:	00000406 	br	c1cc <__fputwc+0xe8>
    c1bc:	80c0030b 	ldhu	r3,12(r16)
    c1c0:	a005883a 	mov	r2,r20
    c1c4:	18c01014 	ori	r3,r3,64
    c1c8:	80c0030d 	sth	r3,12(r16)
    c1cc:	dfc00717 	ldw	ra,28(sp)
    c1d0:	dd400617 	ldw	r21,24(sp)
    c1d4:	dd000517 	ldw	r20,20(sp)
    c1d8:	dcc00417 	ldw	r19,16(sp)
    c1dc:	dc800317 	ldw	r18,12(sp)
    c1e0:	dc400217 	ldw	r17,8(sp)
    c1e4:	dc000117 	ldw	r16,4(sp)
    c1e8:	dec00804 	addi	sp,sp,32
    c1ec:	f800283a 	ret
    c1f0:	800d883a 	mov	r6,r16
    c1f4:	29403fcc 	andi	r5,r5,255
    c1f8:	9809883a 	mov	r4,r19
    c1fc:	000c45c0 	call	c45c <__swbuf_r>
    c200:	10bfffe0 	cmpeqi	r2,r2,-1
    c204:	10803fcc 	andi	r2,r2,255
    c208:	103fd626 	beq	r2,zero,c164 <__alt_data_end+0xff00c164>
    c20c:	00bfffc4 	movi	r2,-1
    c210:	003fee06 	br	c1cc <__alt_data_end+0xff00c1cc>
    c214:	90ffffc4 	addi	r3,r18,-1
    c218:	01003f84 	movi	r4,254
    c21c:	20ffbf36 	bltu	r4,r3,c11c <__alt_data_end+0xff00c11c>
    c220:	900b883a 	mov	r5,r18
    c224:	dc800005 	stb	r18,0(sp)
    c228:	1029883a 	mov	r20,r2
    c22c:	003fc506 	br	c144 <__alt_data_end+0xff00c144>
    c230:	800d883a 	mov	r6,r16
    c234:	a80b883a 	mov	r5,r21
    c238:	9809883a 	mov	r4,r19
    c23c:	000c45c0 	call	c45c <__swbuf_r>
    c240:	10bfffe0 	cmpeqi	r2,r2,-1
    c244:	003fef06 	br	c204 <__alt_data_end+0xff00c204>

0000c248 <_fputwc_r>:
    c248:	3080030b 	ldhu	r2,12(r6)
    c24c:	10c8000c 	andi	r3,r2,8192
    c250:	1800051e 	bne	r3,zero,c268 <_fputwc_r+0x20>
    c254:	30c01917 	ldw	r3,100(r6)
    c258:	10880014 	ori	r2,r2,8192
    c25c:	3080030d 	sth	r2,12(r6)
    c260:	18880014 	ori	r2,r3,8192
    c264:	30801915 	stw	r2,100(r6)
    c268:	000c0e41 	jmpi	c0e4 <__fputwc>

0000c26c <fputwc>:
    c26c:	00800074 	movhi	r2,1
    c270:	defffc04 	addi	sp,sp,-16
    c274:	10915b04 	addi	r2,r2,17772
    c278:	dc000115 	stw	r16,4(sp)
    c27c:	14000017 	ldw	r16,0(r2)
    c280:	dc400215 	stw	r17,8(sp)
    c284:	dfc00315 	stw	ra,12(sp)
    c288:	2023883a 	mov	r17,r4
    c28c:	80000226 	beq	r16,zero,c298 <fputwc+0x2c>
    c290:	80800e17 	ldw	r2,56(r16)
    c294:	10001026 	beq	r2,zero,c2d8 <fputwc+0x6c>
    c298:	2880030b 	ldhu	r2,12(r5)
    c29c:	10c8000c 	andi	r3,r2,8192
    c2a0:	1800051e 	bne	r3,zero,c2b8 <fputwc+0x4c>
    c2a4:	28c01917 	ldw	r3,100(r5)
    c2a8:	10880014 	ori	r2,r2,8192
    c2ac:	2880030d 	sth	r2,12(r5)
    c2b0:	18880014 	ori	r2,r3,8192
    c2b4:	28801915 	stw	r2,100(r5)
    c2b8:	280d883a 	mov	r6,r5
    c2bc:	8009883a 	mov	r4,r16
    c2c0:	880b883a 	mov	r5,r17
    c2c4:	dfc00317 	ldw	ra,12(sp)
    c2c8:	dc400217 	ldw	r17,8(sp)
    c2cc:	dc000117 	ldw	r16,4(sp)
    c2d0:	dec00404 	addi	sp,sp,16
    c2d4:	000c0e41 	jmpi	c0e4 <__fputwc>
    c2d8:	8009883a 	mov	r4,r16
    c2dc:	d9400015 	stw	r5,0(sp)
    c2e0:	0007e240 	call	7e24 <__sinit>
    c2e4:	d9400017 	ldw	r5,0(sp)
    c2e8:	003feb06 	br	c298 <__alt_data_end+0xff00c298>

0000c2ec <_fstat_r>:
    c2ec:	defffd04 	addi	sp,sp,-12
    c2f0:	2805883a 	mov	r2,r5
    c2f4:	dc000015 	stw	r16,0(sp)
    c2f8:	04000074 	movhi	r16,1
    c2fc:	dc400115 	stw	r17,4(sp)
    c300:	84183004 	addi	r16,r16,24768
    c304:	2023883a 	mov	r17,r4
    c308:	300b883a 	mov	r5,r6
    c30c:	1009883a 	mov	r4,r2
    c310:	dfc00215 	stw	ra,8(sp)
    c314:	80000015 	stw	zero,0(r16)
    c318:	000fa280 	call	fa28 <fstat>
    c31c:	00ffffc4 	movi	r3,-1
    c320:	10c00526 	beq	r2,r3,c338 <_fstat_r+0x4c>
    c324:	dfc00217 	ldw	ra,8(sp)
    c328:	dc400117 	ldw	r17,4(sp)
    c32c:	dc000017 	ldw	r16,0(sp)
    c330:	dec00304 	addi	sp,sp,12
    c334:	f800283a 	ret
    c338:	80c00017 	ldw	r3,0(r16)
    c33c:	183ff926 	beq	r3,zero,c324 <__alt_data_end+0xff00c324>
    c340:	88c00015 	stw	r3,0(r17)
    c344:	003ff706 	br	c324 <__alt_data_end+0xff00c324>

0000c348 <_isatty_r>:
    c348:	defffd04 	addi	sp,sp,-12
    c34c:	dc000015 	stw	r16,0(sp)
    c350:	04000074 	movhi	r16,1
    c354:	dc400115 	stw	r17,4(sp)
    c358:	84183004 	addi	r16,r16,24768
    c35c:	2023883a 	mov	r17,r4
    c360:	2809883a 	mov	r4,r5
    c364:	dfc00215 	stw	ra,8(sp)
    c368:	80000015 	stw	zero,0(r16)
    c36c:	000fb140 	call	fb14 <isatty>
    c370:	00ffffc4 	movi	r3,-1
    c374:	10c00526 	beq	r2,r3,c38c <_isatty_r+0x44>
    c378:	dfc00217 	ldw	ra,8(sp)
    c37c:	dc400117 	ldw	r17,4(sp)
    c380:	dc000017 	ldw	r16,0(sp)
    c384:	dec00304 	addi	sp,sp,12
    c388:	f800283a 	ret
    c38c:	80c00017 	ldw	r3,0(r16)
    c390:	183ff926 	beq	r3,zero,c378 <__alt_data_end+0xff00c378>
    c394:	88c00015 	stw	r3,0(r17)
    c398:	003ff706 	br	c378 <__alt_data_end+0xff00c378>

0000c39c <_lseek_r>:
    c39c:	defffd04 	addi	sp,sp,-12
    c3a0:	2805883a 	mov	r2,r5
    c3a4:	dc000015 	stw	r16,0(sp)
    c3a8:	04000074 	movhi	r16,1
    c3ac:	dc400115 	stw	r17,4(sp)
    c3b0:	300b883a 	mov	r5,r6
    c3b4:	84183004 	addi	r16,r16,24768
    c3b8:	2023883a 	mov	r17,r4
    c3bc:	380d883a 	mov	r6,r7
    c3c0:	1009883a 	mov	r4,r2
    c3c4:	dfc00215 	stw	ra,8(sp)
    c3c8:	80000015 	stw	zero,0(r16)
    c3cc:	000fce00 	call	fce0 <lseek>
    c3d0:	00ffffc4 	movi	r3,-1
    c3d4:	10c00526 	beq	r2,r3,c3ec <_lseek_r+0x50>
    c3d8:	dfc00217 	ldw	ra,8(sp)
    c3dc:	dc400117 	ldw	r17,4(sp)
    c3e0:	dc000017 	ldw	r16,0(sp)
    c3e4:	dec00304 	addi	sp,sp,12
    c3e8:	f800283a 	ret
    c3ec:	80c00017 	ldw	r3,0(r16)
    c3f0:	183ff926 	beq	r3,zero,c3d8 <__alt_data_end+0xff00c3d8>
    c3f4:	88c00015 	stw	r3,0(r17)
    c3f8:	003ff706 	br	c3d8 <__alt_data_end+0xff00c3d8>

0000c3fc <_read_r>:
    c3fc:	defffd04 	addi	sp,sp,-12
    c400:	2805883a 	mov	r2,r5
    c404:	dc000015 	stw	r16,0(sp)
    c408:	04000074 	movhi	r16,1
    c40c:	dc400115 	stw	r17,4(sp)
    c410:	300b883a 	mov	r5,r6
    c414:	84183004 	addi	r16,r16,24768
    c418:	2023883a 	mov	r17,r4
    c41c:	380d883a 	mov	r6,r7
    c420:	1009883a 	mov	r4,r2
    c424:	dfc00215 	stw	ra,8(sp)
    c428:	80000015 	stw	zero,0(r16)
    c42c:	000feb40 	call	feb4 <read>
    c430:	00ffffc4 	movi	r3,-1
    c434:	10c00526 	beq	r2,r3,c44c <_read_r+0x50>
    c438:	dfc00217 	ldw	ra,8(sp)
    c43c:	dc400117 	ldw	r17,4(sp)
    c440:	dc000017 	ldw	r16,0(sp)
    c444:	dec00304 	addi	sp,sp,12
    c448:	f800283a 	ret
    c44c:	80c00017 	ldw	r3,0(r16)
    c450:	183ff926 	beq	r3,zero,c438 <__alt_data_end+0xff00c438>
    c454:	88c00015 	stw	r3,0(r17)
    c458:	003ff706 	br	c438 <__alt_data_end+0xff00c438>

0000c45c <__swbuf_r>:
    c45c:	defffb04 	addi	sp,sp,-20
    c460:	dcc00315 	stw	r19,12(sp)
    c464:	dc800215 	stw	r18,8(sp)
    c468:	dc000015 	stw	r16,0(sp)
    c46c:	dfc00415 	stw	ra,16(sp)
    c470:	dc400115 	stw	r17,4(sp)
    c474:	2025883a 	mov	r18,r4
    c478:	2827883a 	mov	r19,r5
    c47c:	3021883a 	mov	r16,r6
    c480:	20000226 	beq	r4,zero,c48c <__swbuf_r+0x30>
    c484:	20800e17 	ldw	r2,56(r4)
    c488:	10004226 	beq	r2,zero,c594 <__swbuf_r+0x138>
    c48c:	80800617 	ldw	r2,24(r16)
    c490:	8100030b 	ldhu	r4,12(r16)
    c494:	80800215 	stw	r2,8(r16)
    c498:	2080020c 	andi	r2,r4,8
    c49c:	10003626 	beq	r2,zero,c578 <__swbuf_r+0x11c>
    c4a0:	80c00417 	ldw	r3,16(r16)
    c4a4:	18003426 	beq	r3,zero,c578 <__swbuf_r+0x11c>
    c4a8:	2088000c 	andi	r2,r4,8192
    c4ac:	9c403fcc 	andi	r17,r19,255
    c4b0:	10001a26 	beq	r2,zero,c51c <__swbuf_r+0xc0>
    c4b4:	80800017 	ldw	r2,0(r16)
    c4b8:	81000517 	ldw	r4,20(r16)
    c4bc:	10c7c83a 	sub	r3,r2,r3
    c4c0:	1900200e 	bge	r3,r4,c544 <__swbuf_r+0xe8>
    c4c4:	18c00044 	addi	r3,r3,1
    c4c8:	81000217 	ldw	r4,8(r16)
    c4cc:	11400044 	addi	r5,r2,1
    c4d0:	81400015 	stw	r5,0(r16)
    c4d4:	213fffc4 	addi	r4,r4,-1
    c4d8:	81000215 	stw	r4,8(r16)
    c4dc:	14c00005 	stb	r19,0(r2)
    c4e0:	80800517 	ldw	r2,20(r16)
    c4e4:	10c01e26 	beq	r2,r3,c560 <__swbuf_r+0x104>
    c4e8:	8080030b 	ldhu	r2,12(r16)
    c4ec:	1080004c 	andi	r2,r2,1
    c4f0:	10000226 	beq	r2,zero,c4fc <__swbuf_r+0xa0>
    c4f4:	00800284 	movi	r2,10
    c4f8:	88801926 	beq	r17,r2,c560 <__swbuf_r+0x104>
    c4fc:	8805883a 	mov	r2,r17
    c500:	dfc00417 	ldw	ra,16(sp)
    c504:	dcc00317 	ldw	r19,12(sp)
    c508:	dc800217 	ldw	r18,8(sp)
    c50c:	dc400117 	ldw	r17,4(sp)
    c510:	dc000017 	ldw	r16,0(sp)
    c514:	dec00504 	addi	sp,sp,20
    c518:	f800283a 	ret
    c51c:	81401917 	ldw	r5,100(r16)
    c520:	00b7ffc4 	movi	r2,-8193
    c524:	21080014 	ori	r4,r4,8192
    c528:	2884703a 	and	r2,r5,r2
    c52c:	80801915 	stw	r2,100(r16)
    c530:	80800017 	ldw	r2,0(r16)
    c534:	8100030d 	sth	r4,12(r16)
    c538:	81000517 	ldw	r4,20(r16)
    c53c:	10c7c83a 	sub	r3,r2,r3
    c540:	193fe016 	blt	r3,r4,c4c4 <__alt_data_end+0xff00c4c4>
    c544:	800b883a 	mov	r5,r16
    c548:	9009883a 	mov	r4,r18
    c54c:	0007a480 	call	7a48 <_fflush_r>
    c550:	1000071e 	bne	r2,zero,c570 <__swbuf_r+0x114>
    c554:	80800017 	ldw	r2,0(r16)
    c558:	00c00044 	movi	r3,1
    c55c:	003fda06 	br	c4c8 <__alt_data_end+0xff00c4c8>
    c560:	800b883a 	mov	r5,r16
    c564:	9009883a 	mov	r4,r18
    c568:	0007a480 	call	7a48 <_fflush_r>
    c56c:	103fe326 	beq	r2,zero,c4fc <__alt_data_end+0xff00c4fc>
    c570:	00bfffc4 	movi	r2,-1
    c574:	003fe206 	br	c500 <__alt_data_end+0xff00c500>
    c578:	800b883a 	mov	r5,r16
    c57c:	9009883a 	mov	r4,r18
    c580:	0005e500 	call	5e50 <__swsetup_r>
    c584:	103ffa1e 	bne	r2,zero,c570 <__alt_data_end+0xff00c570>
    c588:	8100030b 	ldhu	r4,12(r16)
    c58c:	80c00417 	ldw	r3,16(r16)
    c590:	003fc506 	br	c4a8 <__alt_data_end+0xff00c4a8>
    c594:	0007e240 	call	7e24 <__sinit>
    c598:	003fbc06 	br	c48c <__alt_data_end+0xff00c48c>

0000c59c <__swbuf>:
    c59c:	00800074 	movhi	r2,1
    c5a0:	10915b04 	addi	r2,r2,17772
    c5a4:	280d883a 	mov	r6,r5
    c5a8:	200b883a 	mov	r5,r4
    c5ac:	11000017 	ldw	r4,0(r2)
    c5b0:	000c45c1 	jmpi	c45c <__swbuf_r>

0000c5b4 <_wcrtomb_r>:
    c5b4:	defff604 	addi	sp,sp,-40
    c5b8:	00800074 	movhi	r2,1
    c5bc:	dc800815 	stw	r18,32(sp)
    c5c0:	dc400715 	stw	r17,28(sp)
    c5c4:	dc000615 	stw	r16,24(sp)
    c5c8:	10915d04 	addi	r2,r2,17780
    c5cc:	dfc00915 	stw	ra,36(sp)
    c5d0:	2021883a 	mov	r16,r4
    c5d4:	3823883a 	mov	r17,r7
    c5d8:	14800017 	ldw	r18,0(r2)
    c5dc:	28001426 	beq	r5,zero,c630 <_wcrtomb_r+0x7c>
    c5e0:	d9400415 	stw	r5,16(sp)
    c5e4:	d9800515 	stw	r6,20(sp)
    c5e8:	00089680 	call	8968 <__locale_charset>
    c5ec:	d9800517 	ldw	r6,20(sp)
    c5f0:	d9400417 	ldw	r5,16(sp)
    c5f4:	100f883a 	mov	r7,r2
    c5f8:	dc400015 	stw	r17,0(sp)
    c5fc:	8009883a 	mov	r4,r16
    c600:	903ee83a 	callr	r18
    c604:	00ffffc4 	movi	r3,-1
    c608:	10c0031e 	bne	r2,r3,c618 <_wcrtomb_r+0x64>
    c60c:	88000015 	stw	zero,0(r17)
    c610:	00c02284 	movi	r3,138
    c614:	80c00015 	stw	r3,0(r16)
    c618:	dfc00917 	ldw	ra,36(sp)
    c61c:	dc800817 	ldw	r18,32(sp)
    c620:	dc400717 	ldw	r17,28(sp)
    c624:	dc000617 	ldw	r16,24(sp)
    c628:	dec00a04 	addi	sp,sp,40
    c62c:	f800283a 	ret
    c630:	00089680 	call	8968 <__locale_charset>
    c634:	100f883a 	mov	r7,r2
    c638:	dc400015 	stw	r17,0(sp)
    c63c:	000d883a 	mov	r6,zero
    c640:	d9400104 	addi	r5,sp,4
    c644:	8009883a 	mov	r4,r16
    c648:	903ee83a 	callr	r18
    c64c:	003fed06 	br	c604 <__alt_data_end+0xff00c604>

0000c650 <wcrtomb>:
    c650:	defff604 	addi	sp,sp,-40
    c654:	00800074 	movhi	r2,1
    c658:	dc800615 	stw	r18,24(sp)
    c65c:	dc400515 	stw	r17,20(sp)
    c660:	10915b04 	addi	r2,r2,17772
    c664:	dfc00915 	stw	ra,36(sp)
    c668:	dd000815 	stw	r20,32(sp)
    c66c:	dcc00715 	stw	r19,28(sp)
    c670:	dc000415 	stw	r16,16(sp)
    c674:	3025883a 	mov	r18,r6
    c678:	14400017 	ldw	r17,0(r2)
    c67c:	20001926 	beq	r4,zero,c6e4 <wcrtomb+0x94>
    c680:	00800074 	movhi	r2,1
    c684:	10915d04 	addi	r2,r2,17780
    c688:	15000017 	ldw	r20,0(r2)
    c68c:	2021883a 	mov	r16,r4
    c690:	2827883a 	mov	r19,r5
    c694:	00089680 	call	8968 <__locale_charset>
    c698:	100f883a 	mov	r7,r2
    c69c:	dc800015 	stw	r18,0(sp)
    c6a0:	980d883a 	mov	r6,r19
    c6a4:	800b883a 	mov	r5,r16
    c6a8:	8809883a 	mov	r4,r17
    c6ac:	a03ee83a 	callr	r20
    c6b0:	00ffffc4 	movi	r3,-1
    c6b4:	10c0031e 	bne	r2,r3,c6c4 <wcrtomb+0x74>
    c6b8:	90000015 	stw	zero,0(r18)
    c6bc:	00c02284 	movi	r3,138
    c6c0:	88c00015 	stw	r3,0(r17)
    c6c4:	dfc00917 	ldw	ra,36(sp)
    c6c8:	dd000817 	ldw	r20,32(sp)
    c6cc:	dcc00717 	ldw	r19,28(sp)
    c6d0:	dc800617 	ldw	r18,24(sp)
    c6d4:	dc400517 	ldw	r17,20(sp)
    c6d8:	dc000417 	ldw	r16,16(sp)
    c6dc:	dec00a04 	addi	sp,sp,40
    c6e0:	f800283a 	ret
    c6e4:	00800074 	movhi	r2,1
    c6e8:	10915d04 	addi	r2,r2,17780
    c6ec:	14000017 	ldw	r16,0(r2)
    c6f0:	00089680 	call	8968 <__locale_charset>
    c6f4:	100f883a 	mov	r7,r2
    c6f8:	dc800015 	stw	r18,0(sp)
    c6fc:	000d883a 	mov	r6,zero
    c700:	d9400104 	addi	r5,sp,4
    c704:	8809883a 	mov	r4,r17
    c708:	803ee83a 	callr	r16
    c70c:	003fe806 	br	c6b0 <__alt_data_end+0xff00c6b0>

0000c710 <__ascii_wctomb>:
    c710:	28000526 	beq	r5,zero,c728 <__ascii_wctomb+0x18>
    c714:	00803fc4 	movi	r2,255
    c718:	11800536 	bltu	r2,r6,c730 <__ascii_wctomb+0x20>
    c71c:	29800005 	stb	r6,0(r5)
    c720:	00800044 	movi	r2,1
    c724:	f800283a 	ret
    c728:	0005883a 	mov	r2,zero
    c72c:	f800283a 	ret
    c730:	00802284 	movi	r2,138
    c734:	20800015 	stw	r2,0(r4)
    c738:	00bfffc4 	movi	r2,-1
    c73c:	f800283a 	ret

0000c740 <_wctomb_r>:
    c740:	00800074 	movhi	r2,1
    c744:	defff904 	addi	sp,sp,-28
    c748:	10915d04 	addi	r2,r2,17780
    c74c:	dfc00615 	stw	ra,24(sp)
    c750:	dc400515 	stw	r17,20(sp)
    c754:	dc000415 	stw	r16,16(sp)
    c758:	3823883a 	mov	r17,r7
    c75c:	14000017 	ldw	r16,0(r2)
    c760:	d9000115 	stw	r4,4(sp)
    c764:	d9400215 	stw	r5,8(sp)
    c768:	d9800315 	stw	r6,12(sp)
    c76c:	00089680 	call	8968 <__locale_charset>
    c770:	d9800317 	ldw	r6,12(sp)
    c774:	d9400217 	ldw	r5,8(sp)
    c778:	d9000117 	ldw	r4,4(sp)
    c77c:	100f883a 	mov	r7,r2
    c780:	dc400015 	stw	r17,0(sp)
    c784:	803ee83a 	callr	r16
    c788:	dfc00617 	ldw	ra,24(sp)
    c78c:	dc400517 	ldw	r17,20(sp)
    c790:	dc000417 	ldw	r16,16(sp)
    c794:	dec00704 	addi	sp,sp,28
    c798:	f800283a 	ret

0000c79c <__udivdi3>:
    c79c:	defff504 	addi	sp,sp,-44
    c7a0:	dcc00415 	stw	r19,16(sp)
    c7a4:	dc000115 	stw	r16,4(sp)
    c7a8:	dfc00a15 	stw	ra,40(sp)
    c7ac:	df000915 	stw	fp,36(sp)
    c7b0:	ddc00815 	stw	r23,32(sp)
    c7b4:	dd800715 	stw	r22,28(sp)
    c7b8:	dd400615 	stw	r21,24(sp)
    c7bc:	dd000515 	stw	r20,20(sp)
    c7c0:	dc800315 	stw	r18,12(sp)
    c7c4:	dc400215 	stw	r17,8(sp)
    c7c8:	2027883a 	mov	r19,r4
    c7cc:	2821883a 	mov	r16,r5
    c7d0:	3800411e 	bne	r7,zero,c8d8 <__udivdi3+0x13c>
    c7d4:	3023883a 	mov	r17,r6
    c7d8:	2025883a 	mov	r18,r4
    c7dc:	2980522e 	bgeu	r5,r6,c928 <__udivdi3+0x18c>
    c7e0:	00bfffd4 	movui	r2,65535
    c7e4:	282d883a 	mov	r22,r5
    c7e8:	1180a836 	bltu	r2,r6,ca8c <__udivdi3+0x2f0>
    c7ec:	00803fc4 	movi	r2,255
    c7f0:	1185803a 	cmpltu	r2,r2,r6
    c7f4:	100490fa 	slli	r2,r2,3
    c7f8:	3086d83a 	srl	r3,r6,r2
    c7fc:	01000074 	movhi	r4,1
    c800:	210a6204 	addi	r4,r4,10632
    c804:	20c7883a 	add	r3,r4,r3
    c808:	18c00003 	ldbu	r3,0(r3)
    c80c:	1885883a 	add	r2,r3,r2
    c810:	00c00804 	movi	r3,32
    c814:	1887c83a 	sub	r3,r3,r2
    c818:	18000526 	beq	r3,zero,c830 <__udivdi3+0x94>
    c81c:	80e0983a 	sll	r16,r16,r3
    c820:	9884d83a 	srl	r2,r19,r2
    c824:	30e2983a 	sll	r17,r6,r3
    c828:	98e4983a 	sll	r18,r19,r3
    c82c:	142cb03a 	or	r22,r2,r16
    c830:	882ad43a 	srli	r21,r17,16
    c834:	b009883a 	mov	r4,r22
    c838:	8d3fffcc 	andi	r20,r17,65535
    c83c:	a80b883a 	mov	r5,r21
    c840:	00030c80 	call	30c8 <__umodsi3>
    c844:	b009883a 	mov	r4,r22
    c848:	a80b883a 	mov	r5,r21
    c84c:	1027883a 	mov	r19,r2
    c850:	00030640 	call	3064 <__udivsi3>
    c854:	102d883a 	mov	r22,r2
    c858:	9826943a 	slli	r19,r19,16
    c85c:	9004d43a 	srli	r2,r18,16
    c860:	a5a1383a 	mul	r16,r20,r22
    c864:	14c4b03a 	or	r2,r2,r19
    c868:	1400052e 	bgeu	r2,r16,c880 <__udivdi3+0xe4>
    c86c:	1445883a 	add	r2,r2,r17
    c870:	b0ffffc4 	addi	r3,r22,-1
    c874:	14400136 	bltu	r2,r17,c87c <__udivdi3+0xe0>
    c878:	14012336 	bltu	r2,r16,cd08 <__udivdi3+0x56c>
    c87c:	182d883a 	mov	r22,r3
    c880:	1421c83a 	sub	r16,r2,r16
    c884:	a80b883a 	mov	r5,r21
    c888:	8009883a 	mov	r4,r16
    c88c:	00030c80 	call	30c8 <__umodsi3>
    c890:	1027883a 	mov	r19,r2
    c894:	a80b883a 	mov	r5,r21
    c898:	8009883a 	mov	r4,r16
    c89c:	00030640 	call	3064 <__udivsi3>
    c8a0:	9826943a 	slli	r19,r19,16
    c8a4:	a0a9383a 	mul	r20,r20,r2
    c8a8:	94bfffcc 	andi	r18,r18,65535
    c8ac:	94e4b03a 	or	r18,r18,r19
    c8b0:	9500052e 	bgeu	r18,r20,c8c8 <__udivdi3+0x12c>
    c8b4:	8ca5883a 	add	r18,r17,r18
    c8b8:	10ffffc4 	addi	r3,r2,-1
    c8bc:	9440f136 	bltu	r18,r17,cc84 <__udivdi3+0x4e8>
    c8c0:	9500f02e 	bgeu	r18,r20,cc84 <__udivdi3+0x4e8>
    c8c4:	10bfff84 	addi	r2,r2,-2
    c8c8:	b00c943a 	slli	r6,r22,16
    c8cc:	0007883a 	mov	r3,zero
    c8d0:	3084b03a 	or	r2,r6,r2
    c8d4:	00005906 	br	ca3c <__udivdi3+0x2a0>
    c8d8:	29c05636 	bltu	r5,r7,ca34 <__udivdi3+0x298>
    c8dc:	00bfffd4 	movui	r2,65535
    c8e0:	11c0622e 	bgeu	r2,r7,ca6c <__udivdi3+0x2d0>
    c8e4:	00804034 	movhi	r2,256
    c8e8:	10bfffc4 	addi	r2,r2,-1
    c8ec:	11c0ee36 	bltu	r2,r7,cca8 <__udivdi3+0x50c>
    c8f0:	00800404 	movi	r2,16
    c8f4:	3886d83a 	srl	r3,r7,r2
    c8f8:	01000074 	movhi	r4,1
    c8fc:	210a6204 	addi	r4,r4,10632
    c900:	20c7883a 	add	r3,r4,r3
    c904:	18c00003 	ldbu	r3,0(r3)
    c908:	05400804 	movi	r21,32
    c90c:	1885883a 	add	r2,r3,r2
    c910:	a8abc83a 	sub	r21,r21,r2
    c914:	a800621e 	bne	r21,zero,caa0 <__udivdi3+0x304>
    c918:	3c00e936 	bltu	r7,r16,ccc0 <__udivdi3+0x524>
    c91c:	9985403a 	cmpgeu	r2,r19,r6
    c920:	0007883a 	mov	r3,zero
    c924:	00004506 	br	ca3c <__udivdi3+0x2a0>
    c928:	3000041e 	bne	r6,zero,c93c <__udivdi3+0x1a0>
    c92c:	000b883a 	mov	r5,zero
    c930:	01000044 	movi	r4,1
    c934:	00030640 	call	3064 <__udivsi3>
    c938:	1023883a 	mov	r17,r2
    c93c:	00bfffd4 	movui	r2,65535
    c940:	14404e2e 	bgeu	r2,r17,ca7c <__udivdi3+0x2e0>
    c944:	00804034 	movhi	r2,256
    c948:	10bfffc4 	addi	r2,r2,-1
    c94c:	1440d836 	bltu	r2,r17,ccb0 <__udivdi3+0x514>
    c950:	00800404 	movi	r2,16
    c954:	8886d83a 	srl	r3,r17,r2
    c958:	01000074 	movhi	r4,1
    c95c:	210a6204 	addi	r4,r4,10632
    c960:	20c7883a 	add	r3,r4,r3
    c964:	18c00003 	ldbu	r3,0(r3)
    c968:	1885883a 	add	r2,r3,r2
    c96c:	00c00804 	movi	r3,32
    c970:	1887c83a 	sub	r3,r3,r2
    c974:	18008f1e 	bne	r3,zero,cbb4 <__udivdi3+0x418>
    c978:	882ad43a 	srli	r21,r17,16
    c97c:	8461c83a 	sub	r16,r16,r17
    c980:	8d3fffcc 	andi	r20,r17,65535
    c984:	00c00044 	movi	r3,1
    c988:	8009883a 	mov	r4,r16
    c98c:	a80b883a 	mov	r5,r21
    c990:	d8c00015 	stw	r3,0(sp)
    c994:	00030c80 	call	30c8 <__umodsi3>
    c998:	8009883a 	mov	r4,r16
    c99c:	a80b883a 	mov	r5,r21
    c9a0:	1027883a 	mov	r19,r2
    c9a4:	00030640 	call	3064 <__udivsi3>
    c9a8:	9826943a 	slli	r19,r19,16
    c9ac:	9008d43a 	srli	r4,r18,16
    c9b0:	1521383a 	mul	r16,r2,r20
    c9b4:	102d883a 	mov	r22,r2
    c9b8:	24c8b03a 	or	r4,r4,r19
    c9bc:	d8c00017 	ldw	r3,0(sp)
    c9c0:	2400052e 	bgeu	r4,r16,c9d8 <__udivdi3+0x23c>
    c9c4:	2449883a 	add	r4,r4,r17
    c9c8:	b0bfffc4 	addi	r2,r22,-1
    c9cc:	24400136 	bltu	r4,r17,c9d4 <__udivdi3+0x238>
    c9d0:	2400ca36 	bltu	r4,r16,ccfc <__udivdi3+0x560>
    c9d4:	102d883a 	mov	r22,r2
    c9d8:	2421c83a 	sub	r16,r4,r16
    c9dc:	a80b883a 	mov	r5,r21
    c9e0:	8009883a 	mov	r4,r16
    c9e4:	d8c00015 	stw	r3,0(sp)
    c9e8:	00030c80 	call	30c8 <__umodsi3>
    c9ec:	1027883a 	mov	r19,r2
    c9f0:	a80b883a 	mov	r5,r21
    c9f4:	8009883a 	mov	r4,r16
    c9f8:	00030640 	call	3064 <__udivsi3>
    c9fc:	9826943a 	slli	r19,r19,16
    ca00:	1529383a 	mul	r20,r2,r20
    ca04:	94bfffcc 	andi	r18,r18,65535
    ca08:	94e4b03a 	or	r18,r18,r19
    ca0c:	d8c00017 	ldw	r3,0(sp)
    ca10:	9500052e 	bgeu	r18,r20,ca28 <__udivdi3+0x28c>
    ca14:	8ca5883a 	add	r18,r17,r18
    ca18:	113fffc4 	addi	r4,r2,-1
    ca1c:	94409736 	bltu	r18,r17,cc7c <__udivdi3+0x4e0>
    ca20:	9500962e 	bgeu	r18,r20,cc7c <__udivdi3+0x4e0>
    ca24:	10bfff84 	addi	r2,r2,-2
    ca28:	b00c943a 	slli	r6,r22,16
    ca2c:	3084b03a 	or	r2,r6,r2
    ca30:	00000206 	br	ca3c <__udivdi3+0x2a0>
    ca34:	0007883a 	mov	r3,zero
    ca38:	0005883a 	mov	r2,zero
    ca3c:	dfc00a17 	ldw	ra,40(sp)
    ca40:	df000917 	ldw	fp,36(sp)
    ca44:	ddc00817 	ldw	r23,32(sp)
    ca48:	dd800717 	ldw	r22,28(sp)
    ca4c:	dd400617 	ldw	r21,24(sp)
    ca50:	dd000517 	ldw	r20,20(sp)
    ca54:	dcc00417 	ldw	r19,16(sp)
    ca58:	dc800317 	ldw	r18,12(sp)
    ca5c:	dc400217 	ldw	r17,8(sp)
    ca60:	dc000117 	ldw	r16,4(sp)
    ca64:	dec00b04 	addi	sp,sp,44
    ca68:	f800283a 	ret
    ca6c:	00803fc4 	movi	r2,255
    ca70:	11c5803a 	cmpltu	r2,r2,r7
    ca74:	100490fa 	slli	r2,r2,3
    ca78:	003f9e06 	br	c8f4 <__alt_data_end+0xff00c8f4>
    ca7c:	00803fc4 	movi	r2,255
    ca80:	1445803a 	cmpltu	r2,r2,r17
    ca84:	100490fa 	slli	r2,r2,3
    ca88:	003fb206 	br	c954 <__alt_data_end+0xff00c954>
    ca8c:	00804034 	movhi	r2,256
    ca90:	10bfffc4 	addi	r2,r2,-1
    ca94:	11808836 	bltu	r2,r6,ccb8 <__udivdi3+0x51c>
    ca98:	00800404 	movi	r2,16
    ca9c:	003f5606 	br	c7f8 <__alt_data_end+0xff00c7f8>
    caa0:	30aed83a 	srl	r23,r6,r2
    caa4:	3d4e983a 	sll	r7,r7,r21
    caa8:	80acd83a 	srl	r22,r16,r2
    caac:	9884d83a 	srl	r2,r19,r2
    cab0:	3deeb03a 	or	r23,r7,r23
    cab4:	b824d43a 	srli	r18,r23,16
    cab8:	8560983a 	sll	r16,r16,r21
    cabc:	b009883a 	mov	r4,r22
    cac0:	900b883a 	mov	r5,r18
    cac4:	3568983a 	sll	r20,r6,r21
    cac8:	1420b03a 	or	r16,r2,r16
    cacc:	00030c80 	call	30c8 <__umodsi3>
    cad0:	b009883a 	mov	r4,r22
    cad4:	900b883a 	mov	r5,r18
    cad8:	1023883a 	mov	r17,r2
    cadc:	00030640 	call	3064 <__udivsi3>
    cae0:	8808943a 	slli	r4,r17,16
    cae4:	bf3fffcc 	andi	fp,r23,65535
    cae8:	8006d43a 	srli	r3,r16,16
    caec:	e0a3383a 	mul	r17,fp,r2
    caf0:	100d883a 	mov	r6,r2
    caf4:	1906b03a 	or	r3,r3,r4
    caf8:	1c40042e 	bgeu	r3,r17,cb0c <__udivdi3+0x370>
    cafc:	1dc7883a 	add	r3,r3,r23
    cb00:	10bfffc4 	addi	r2,r2,-1
    cb04:	1dc0752e 	bgeu	r3,r23,ccdc <__udivdi3+0x540>
    cb08:	100d883a 	mov	r6,r2
    cb0c:	1c63c83a 	sub	r17,r3,r17
    cb10:	900b883a 	mov	r5,r18
    cb14:	8809883a 	mov	r4,r17
    cb18:	d9800015 	stw	r6,0(sp)
    cb1c:	00030c80 	call	30c8 <__umodsi3>
    cb20:	102d883a 	mov	r22,r2
    cb24:	8809883a 	mov	r4,r17
    cb28:	900b883a 	mov	r5,r18
    cb2c:	00030640 	call	3064 <__udivsi3>
    cb30:	b02c943a 	slli	r22,r22,16
    cb34:	e089383a 	mul	r4,fp,r2
    cb38:	843fffcc 	andi	r16,r16,65535
    cb3c:	85a0b03a 	or	r16,r16,r22
    cb40:	d9800017 	ldw	r6,0(sp)
    cb44:	8100042e 	bgeu	r16,r4,cb58 <__udivdi3+0x3bc>
    cb48:	85e1883a 	add	r16,r16,r23
    cb4c:	10ffffc4 	addi	r3,r2,-1
    cb50:	85c05e2e 	bgeu	r16,r23,cccc <__udivdi3+0x530>
    cb54:	1805883a 	mov	r2,r3
    cb58:	300c943a 	slli	r6,r6,16
    cb5c:	a17fffcc 	andi	r5,r20,65535
    cb60:	a028d43a 	srli	r20,r20,16
    cb64:	3084b03a 	or	r2,r6,r2
    cb68:	10ffffcc 	andi	r3,r2,65535
    cb6c:	100cd43a 	srli	r6,r2,16
    cb70:	194f383a 	mul	r7,r3,r5
    cb74:	1d07383a 	mul	r3,r3,r20
    cb78:	314b383a 	mul	r5,r6,r5
    cb7c:	3810d43a 	srli	r8,r7,16
    cb80:	8121c83a 	sub	r16,r16,r4
    cb84:	1947883a 	add	r3,r3,r5
    cb88:	40c7883a 	add	r3,r8,r3
    cb8c:	350d383a 	mul	r6,r6,r20
    cb90:	1940022e 	bgeu	r3,r5,cb9c <__udivdi3+0x400>
    cb94:	01000074 	movhi	r4,1
    cb98:	310d883a 	add	r6,r6,r4
    cb9c:	1828d43a 	srli	r20,r3,16
    cba0:	a18d883a 	add	r6,r20,r6
    cba4:	81803e36 	bltu	r16,r6,cca0 <__udivdi3+0x504>
    cba8:	81803826 	beq	r16,r6,cc8c <__udivdi3+0x4f0>
    cbac:	0007883a 	mov	r3,zero
    cbb0:	003fa206 	br	ca3c <__alt_data_end+0xff00ca3c>
    cbb4:	88e2983a 	sll	r17,r17,r3
    cbb8:	80a8d83a 	srl	r20,r16,r2
    cbbc:	80e0983a 	sll	r16,r16,r3
    cbc0:	882ad43a 	srli	r21,r17,16
    cbc4:	9884d83a 	srl	r2,r19,r2
    cbc8:	a009883a 	mov	r4,r20
    cbcc:	a80b883a 	mov	r5,r21
    cbd0:	142eb03a 	or	r23,r2,r16
    cbd4:	98e4983a 	sll	r18,r19,r3
    cbd8:	00030c80 	call	30c8 <__umodsi3>
    cbdc:	a009883a 	mov	r4,r20
    cbe0:	a80b883a 	mov	r5,r21
    cbe4:	1021883a 	mov	r16,r2
    cbe8:	00030640 	call	3064 <__udivsi3>
    cbec:	1039883a 	mov	fp,r2
    cbf0:	8d3fffcc 	andi	r20,r17,65535
    cbf4:	8020943a 	slli	r16,r16,16
    cbf8:	b804d43a 	srli	r2,r23,16
    cbfc:	a72d383a 	mul	r22,r20,fp
    cc00:	1404b03a 	or	r2,r2,r16
    cc04:	1580062e 	bgeu	r2,r22,cc20 <__udivdi3+0x484>
    cc08:	1445883a 	add	r2,r2,r17
    cc0c:	e0ffffc4 	addi	r3,fp,-1
    cc10:	14403836 	bltu	r2,r17,ccf4 <__udivdi3+0x558>
    cc14:	1580372e 	bgeu	r2,r22,ccf4 <__udivdi3+0x558>
    cc18:	e73fff84 	addi	fp,fp,-2
    cc1c:	1445883a 	add	r2,r2,r17
    cc20:	15adc83a 	sub	r22,r2,r22
    cc24:	a80b883a 	mov	r5,r21
    cc28:	b009883a 	mov	r4,r22
    cc2c:	00030c80 	call	30c8 <__umodsi3>
    cc30:	1027883a 	mov	r19,r2
    cc34:	b009883a 	mov	r4,r22
    cc38:	a80b883a 	mov	r5,r21
    cc3c:	00030640 	call	3064 <__udivsi3>
    cc40:	9826943a 	slli	r19,r19,16
    cc44:	a0a1383a 	mul	r16,r20,r2
    cc48:	b93fffcc 	andi	r4,r23,65535
    cc4c:	24c8b03a 	or	r4,r4,r19
    cc50:	2400062e 	bgeu	r4,r16,cc6c <__udivdi3+0x4d0>
    cc54:	2449883a 	add	r4,r4,r17
    cc58:	10ffffc4 	addi	r3,r2,-1
    cc5c:	24402336 	bltu	r4,r17,ccec <__udivdi3+0x550>
    cc60:	2400222e 	bgeu	r4,r16,ccec <__udivdi3+0x550>
    cc64:	10bfff84 	addi	r2,r2,-2
    cc68:	2449883a 	add	r4,r4,r17
    cc6c:	e038943a 	slli	fp,fp,16
    cc70:	2421c83a 	sub	r16,r4,r16
    cc74:	e086b03a 	or	r3,fp,r2
    cc78:	003f4306 	br	c988 <__alt_data_end+0xff00c988>
    cc7c:	2005883a 	mov	r2,r4
    cc80:	003f6906 	br	ca28 <__alt_data_end+0xff00ca28>
    cc84:	1805883a 	mov	r2,r3
    cc88:	003f0f06 	br	c8c8 <__alt_data_end+0xff00c8c8>
    cc8c:	1806943a 	slli	r3,r3,16
    cc90:	9d66983a 	sll	r19,r19,r21
    cc94:	39ffffcc 	andi	r7,r7,65535
    cc98:	19c7883a 	add	r3,r3,r7
    cc9c:	98ffc32e 	bgeu	r19,r3,cbac <__alt_data_end+0xff00cbac>
    cca0:	10bfffc4 	addi	r2,r2,-1
    cca4:	003fc106 	br	cbac <__alt_data_end+0xff00cbac>
    cca8:	00800604 	movi	r2,24
    ccac:	003f1106 	br	c8f4 <__alt_data_end+0xff00c8f4>
    ccb0:	00800604 	movi	r2,24
    ccb4:	003f2706 	br	c954 <__alt_data_end+0xff00c954>
    ccb8:	00800604 	movi	r2,24
    ccbc:	003ece06 	br	c7f8 <__alt_data_end+0xff00c7f8>
    ccc0:	0007883a 	mov	r3,zero
    ccc4:	00800044 	movi	r2,1
    ccc8:	003f5c06 	br	ca3c <__alt_data_end+0xff00ca3c>
    cccc:	813fa12e 	bgeu	r16,r4,cb54 <__alt_data_end+0xff00cb54>
    ccd0:	10bfff84 	addi	r2,r2,-2
    ccd4:	85e1883a 	add	r16,r16,r23
    ccd8:	003f9f06 	br	cb58 <__alt_data_end+0xff00cb58>
    ccdc:	1c7f8a2e 	bgeu	r3,r17,cb08 <__alt_data_end+0xff00cb08>
    cce0:	31bfff84 	addi	r6,r6,-2
    cce4:	1dc7883a 	add	r3,r3,r23
    cce8:	003f8806 	br	cb0c <__alt_data_end+0xff00cb0c>
    ccec:	1805883a 	mov	r2,r3
    ccf0:	003fde06 	br	cc6c <__alt_data_end+0xff00cc6c>
    ccf4:	1839883a 	mov	fp,r3
    ccf8:	003fc906 	br	cc20 <__alt_data_end+0xff00cc20>
    ccfc:	b5bfff84 	addi	r22,r22,-2
    cd00:	2449883a 	add	r4,r4,r17
    cd04:	003f3406 	br	c9d8 <__alt_data_end+0xff00c9d8>
    cd08:	b5bfff84 	addi	r22,r22,-2
    cd0c:	1445883a 	add	r2,r2,r17
    cd10:	003edb06 	br	c880 <__alt_data_end+0xff00c880>

0000cd14 <__umoddi3>:
    cd14:	defff404 	addi	sp,sp,-48
    cd18:	df000a15 	stw	fp,40(sp)
    cd1c:	dc400315 	stw	r17,12(sp)
    cd20:	dc000215 	stw	r16,8(sp)
    cd24:	dfc00b15 	stw	ra,44(sp)
    cd28:	ddc00915 	stw	r23,36(sp)
    cd2c:	dd800815 	stw	r22,32(sp)
    cd30:	dd400715 	stw	r21,28(sp)
    cd34:	dd000615 	stw	r20,24(sp)
    cd38:	dcc00515 	stw	r19,20(sp)
    cd3c:	dc800415 	stw	r18,16(sp)
    cd40:	2021883a 	mov	r16,r4
    cd44:	2823883a 	mov	r17,r5
    cd48:	2839883a 	mov	fp,r5
    cd4c:	38003c1e 	bne	r7,zero,ce40 <__umoddi3+0x12c>
    cd50:	3027883a 	mov	r19,r6
    cd54:	2029883a 	mov	r20,r4
    cd58:	2980512e 	bgeu	r5,r6,cea0 <__umoddi3+0x18c>
    cd5c:	00bfffd4 	movui	r2,65535
    cd60:	11809a36 	bltu	r2,r6,cfcc <__umoddi3+0x2b8>
    cd64:	01003fc4 	movi	r4,255
    cd68:	2189803a 	cmpltu	r4,r4,r6
    cd6c:	200890fa 	slli	r4,r4,3
    cd70:	3104d83a 	srl	r2,r6,r4
    cd74:	00c00074 	movhi	r3,1
    cd78:	18ca6204 	addi	r3,r3,10632
    cd7c:	1885883a 	add	r2,r3,r2
    cd80:	10c00003 	ldbu	r3,0(r2)
    cd84:	00800804 	movi	r2,32
    cd88:	1909883a 	add	r4,r3,r4
    cd8c:	1125c83a 	sub	r18,r2,r4
    cd90:	90000526 	beq	r18,zero,cda8 <__umoddi3+0x94>
    cd94:	8ca2983a 	sll	r17,r17,r18
    cd98:	8108d83a 	srl	r4,r16,r4
    cd9c:	34a6983a 	sll	r19,r6,r18
    cda0:	84a8983a 	sll	r20,r16,r18
    cda4:	2478b03a 	or	fp,r4,r17
    cda8:	982ed43a 	srli	r23,r19,16
    cdac:	e009883a 	mov	r4,fp
    cdb0:	9dbfffcc 	andi	r22,r19,65535
    cdb4:	b80b883a 	mov	r5,r23
    cdb8:	00030c80 	call	30c8 <__umodsi3>
    cdbc:	e009883a 	mov	r4,fp
    cdc0:	b80b883a 	mov	r5,r23
    cdc4:	102b883a 	mov	r21,r2
    cdc8:	00030640 	call	3064 <__udivsi3>
    cdcc:	a806943a 	slli	r3,r21,16
    cdd0:	a008d43a 	srli	r4,r20,16
    cdd4:	b085383a 	mul	r2,r22,r2
    cdd8:	20c8b03a 	or	r4,r4,r3
    cddc:	2080032e 	bgeu	r4,r2,cdec <__umoddi3+0xd8>
    cde0:	24c9883a 	add	r4,r4,r19
    cde4:	24c00136 	bltu	r4,r19,cdec <__umoddi3+0xd8>
    cde8:	20811036 	bltu	r4,r2,d22c <__umoddi3+0x518>
    cdec:	20abc83a 	sub	r21,r4,r2
    cdf0:	b80b883a 	mov	r5,r23
    cdf4:	a809883a 	mov	r4,r21
    cdf8:	00030c80 	call	30c8 <__umodsi3>
    cdfc:	1023883a 	mov	r17,r2
    ce00:	b80b883a 	mov	r5,r23
    ce04:	a809883a 	mov	r4,r21
    ce08:	00030640 	call	3064 <__udivsi3>
    ce0c:	8822943a 	slli	r17,r17,16
    ce10:	b085383a 	mul	r2,r22,r2
    ce14:	a0ffffcc 	andi	r3,r20,65535
    ce18:	1c46b03a 	or	r3,r3,r17
    ce1c:	1880042e 	bgeu	r3,r2,ce30 <__umoddi3+0x11c>
    ce20:	1cc7883a 	add	r3,r3,r19
    ce24:	1cc00236 	bltu	r3,r19,ce30 <__umoddi3+0x11c>
    ce28:	1880012e 	bgeu	r3,r2,ce30 <__umoddi3+0x11c>
    ce2c:	1cc7883a 	add	r3,r3,r19
    ce30:	1885c83a 	sub	r2,r3,r2
    ce34:	1484d83a 	srl	r2,r2,r18
    ce38:	0007883a 	mov	r3,zero
    ce3c:	00004f06 	br	cf7c <__umoddi3+0x268>
    ce40:	29c04c36 	bltu	r5,r7,cf74 <__umoddi3+0x260>
    ce44:	00bfffd4 	movui	r2,65535
    ce48:	11c0582e 	bgeu	r2,r7,cfac <__umoddi3+0x298>
    ce4c:	00804034 	movhi	r2,256
    ce50:	10bfffc4 	addi	r2,r2,-1
    ce54:	11c0e736 	bltu	r2,r7,d1f4 <__umoddi3+0x4e0>
    ce58:	01000404 	movi	r4,16
    ce5c:	3904d83a 	srl	r2,r7,r4
    ce60:	00c00074 	movhi	r3,1
    ce64:	18ca6204 	addi	r3,r3,10632
    ce68:	1885883a 	add	r2,r3,r2
    ce6c:	14c00003 	ldbu	r19,0(r2)
    ce70:	00c00804 	movi	r3,32
    ce74:	9927883a 	add	r19,r19,r4
    ce78:	1ce9c83a 	sub	r20,r3,r19
    ce7c:	a000581e 	bne	r20,zero,cfe0 <__umoddi3+0x2cc>
    ce80:	3c400136 	bltu	r7,r17,ce88 <__umoddi3+0x174>
    ce84:	8180eb36 	bltu	r16,r6,d234 <__umoddi3+0x520>
    ce88:	8185c83a 	sub	r2,r16,r6
    ce8c:	89e3c83a 	sub	r17,r17,r7
    ce90:	8089803a 	cmpltu	r4,r16,r2
    ce94:	8939c83a 	sub	fp,r17,r4
    ce98:	e007883a 	mov	r3,fp
    ce9c:	00003706 	br	cf7c <__umoddi3+0x268>
    cea0:	3000041e 	bne	r6,zero,ceb4 <__umoddi3+0x1a0>
    cea4:	000b883a 	mov	r5,zero
    cea8:	01000044 	movi	r4,1
    ceac:	00030640 	call	3064 <__udivsi3>
    ceb0:	1027883a 	mov	r19,r2
    ceb4:	00bfffd4 	movui	r2,65535
    ceb8:	14c0402e 	bgeu	r2,r19,cfbc <__umoddi3+0x2a8>
    cebc:	00804034 	movhi	r2,256
    cec0:	10bfffc4 	addi	r2,r2,-1
    cec4:	14c0cd36 	bltu	r2,r19,d1fc <__umoddi3+0x4e8>
    cec8:	00800404 	movi	r2,16
    cecc:	9886d83a 	srl	r3,r19,r2
    ced0:	01000074 	movhi	r4,1
    ced4:	210a6204 	addi	r4,r4,10632
    ced8:	20c7883a 	add	r3,r4,r3
    cedc:	18c00003 	ldbu	r3,0(r3)
    cee0:	1887883a 	add	r3,r3,r2
    cee4:	00800804 	movi	r2,32
    cee8:	10e5c83a 	sub	r18,r2,r3
    ceec:	9000901e 	bne	r18,zero,d130 <__umoddi3+0x41c>
    cef0:	982cd43a 	srli	r22,r19,16
    cef4:	8ce3c83a 	sub	r17,r17,r19
    cef8:	9d7fffcc 	andi	r21,r19,65535
    cefc:	b00b883a 	mov	r5,r22
    cf00:	8809883a 	mov	r4,r17
    cf04:	00030c80 	call	30c8 <__umodsi3>
    cf08:	8809883a 	mov	r4,r17
    cf0c:	b00b883a 	mov	r5,r22
    cf10:	1021883a 	mov	r16,r2
    cf14:	00030640 	call	3064 <__udivsi3>
    cf18:	8006943a 	slli	r3,r16,16
    cf1c:	a008d43a 	srli	r4,r20,16
    cf20:	1545383a 	mul	r2,r2,r21
    cf24:	20c8b03a 	or	r4,r4,r3
    cf28:	2080042e 	bgeu	r4,r2,cf3c <__umoddi3+0x228>
    cf2c:	24c9883a 	add	r4,r4,r19
    cf30:	24c00236 	bltu	r4,r19,cf3c <__umoddi3+0x228>
    cf34:	2080012e 	bgeu	r4,r2,cf3c <__umoddi3+0x228>
    cf38:	24c9883a 	add	r4,r4,r19
    cf3c:	20a1c83a 	sub	r16,r4,r2
    cf40:	b00b883a 	mov	r5,r22
    cf44:	8009883a 	mov	r4,r16
    cf48:	00030c80 	call	30c8 <__umodsi3>
    cf4c:	1023883a 	mov	r17,r2
    cf50:	b00b883a 	mov	r5,r22
    cf54:	8009883a 	mov	r4,r16
    cf58:	00030640 	call	3064 <__udivsi3>
    cf5c:	8822943a 	slli	r17,r17,16
    cf60:	1545383a 	mul	r2,r2,r21
    cf64:	a53fffcc 	andi	r20,r20,65535
    cf68:	a446b03a 	or	r3,r20,r17
    cf6c:	18bfb02e 	bgeu	r3,r2,ce30 <__alt_data_end+0xff00ce30>
    cf70:	003fab06 	br	ce20 <__alt_data_end+0xff00ce20>
    cf74:	2005883a 	mov	r2,r4
    cf78:	2807883a 	mov	r3,r5
    cf7c:	dfc00b17 	ldw	ra,44(sp)
    cf80:	df000a17 	ldw	fp,40(sp)
    cf84:	ddc00917 	ldw	r23,36(sp)
    cf88:	dd800817 	ldw	r22,32(sp)
    cf8c:	dd400717 	ldw	r21,28(sp)
    cf90:	dd000617 	ldw	r20,24(sp)
    cf94:	dcc00517 	ldw	r19,20(sp)
    cf98:	dc800417 	ldw	r18,16(sp)
    cf9c:	dc400317 	ldw	r17,12(sp)
    cfa0:	dc000217 	ldw	r16,8(sp)
    cfa4:	dec00c04 	addi	sp,sp,48
    cfa8:	f800283a 	ret
    cfac:	04c03fc4 	movi	r19,255
    cfb0:	99c9803a 	cmpltu	r4,r19,r7
    cfb4:	200890fa 	slli	r4,r4,3
    cfb8:	003fa806 	br	ce5c <__alt_data_end+0xff00ce5c>
    cfbc:	00803fc4 	movi	r2,255
    cfc0:	14c5803a 	cmpltu	r2,r2,r19
    cfc4:	100490fa 	slli	r2,r2,3
    cfc8:	003fc006 	br	cecc <__alt_data_end+0xff00cecc>
    cfcc:	00804034 	movhi	r2,256
    cfd0:	10bfffc4 	addi	r2,r2,-1
    cfd4:	11808b36 	bltu	r2,r6,d204 <__umoddi3+0x4f0>
    cfd8:	01000404 	movi	r4,16
    cfdc:	003f6406 	br	cd70 <__alt_data_end+0xff00cd70>
    cfe0:	34c4d83a 	srl	r2,r6,r19
    cfe4:	3d0e983a 	sll	r7,r7,r20
    cfe8:	8cf8d83a 	srl	fp,r17,r19
    cfec:	8d10983a 	sll	r8,r17,r20
    cff0:	38aab03a 	or	r21,r7,r2
    cff4:	a82cd43a 	srli	r22,r21,16
    cff8:	84e2d83a 	srl	r17,r16,r19
    cffc:	e009883a 	mov	r4,fp
    d000:	b00b883a 	mov	r5,r22
    d004:	8a22b03a 	or	r17,r17,r8
    d008:	3524983a 	sll	r18,r6,r20
    d00c:	00030c80 	call	30c8 <__umodsi3>
    d010:	e009883a 	mov	r4,fp
    d014:	b00b883a 	mov	r5,r22
    d018:	102f883a 	mov	r23,r2
    d01c:	00030640 	call	3064 <__udivsi3>
    d020:	100d883a 	mov	r6,r2
    d024:	b808943a 	slli	r4,r23,16
    d028:	aa3fffcc 	andi	r8,r21,65535
    d02c:	8804d43a 	srli	r2,r17,16
    d030:	41af383a 	mul	r23,r8,r6
    d034:	8520983a 	sll	r16,r16,r20
    d038:	1104b03a 	or	r2,r2,r4
    d03c:	15c0042e 	bgeu	r2,r23,d050 <__umoddi3+0x33c>
    d040:	1545883a 	add	r2,r2,r21
    d044:	30ffffc4 	addi	r3,r6,-1
    d048:	1540742e 	bgeu	r2,r21,d21c <__umoddi3+0x508>
    d04c:	180d883a 	mov	r6,r3
    d050:	15efc83a 	sub	r23,r2,r23
    d054:	b00b883a 	mov	r5,r22
    d058:	b809883a 	mov	r4,r23
    d05c:	d9800115 	stw	r6,4(sp)
    d060:	da000015 	stw	r8,0(sp)
    d064:	00030c80 	call	30c8 <__umodsi3>
    d068:	b00b883a 	mov	r5,r22
    d06c:	b809883a 	mov	r4,r23
    d070:	1039883a 	mov	fp,r2
    d074:	00030640 	call	3064 <__udivsi3>
    d078:	da000017 	ldw	r8,0(sp)
    d07c:	e038943a 	slli	fp,fp,16
    d080:	100b883a 	mov	r5,r2
    d084:	4089383a 	mul	r4,r8,r2
    d088:	8a3fffcc 	andi	r8,r17,65535
    d08c:	4710b03a 	or	r8,r8,fp
    d090:	d9800117 	ldw	r6,4(sp)
    d094:	4100042e 	bgeu	r8,r4,d0a8 <__umoddi3+0x394>
    d098:	4551883a 	add	r8,r8,r21
    d09c:	10bfffc4 	addi	r2,r2,-1
    d0a0:	45405a2e 	bgeu	r8,r21,d20c <__umoddi3+0x4f8>
    d0a4:	100b883a 	mov	r5,r2
    d0a8:	300c943a 	slli	r6,r6,16
    d0ac:	91ffffcc 	andi	r7,r18,65535
    d0b0:	9004d43a 	srli	r2,r18,16
    d0b4:	314cb03a 	or	r6,r6,r5
    d0b8:	317fffcc 	andi	r5,r6,65535
    d0bc:	300cd43a 	srli	r6,r6,16
    d0c0:	29d3383a 	mul	r9,r5,r7
    d0c4:	288b383a 	mul	r5,r5,r2
    d0c8:	31cf383a 	mul	r7,r6,r7
    d0cc:	4806d43a 	srli	r3,r9,16
    d0d0:	4111c83a 	sub	r8,r8,r4
    d0d4:	29cb883a 	add	r5,r5,r7
    d0d8:	194b883a 	add	r5,r3,r5
    d0dc:	3085383a 	mul	r2,r6,r2
    d0e0:	29c0022e 	bgeu	r5,r7,d0ec <__umoddi3+0x3d8>
    d0e4:	00c00074 	movhi	r3,1
    d0e8:	10c5883a 	add	r2,r2,r3
    d0ec:	2808d43a 	srli	r4,r5,16
    d0f0:	280a943a 	slli	r5,r5,16
    d0f4:	4a7fffcc 	andi	r9,r9,65535
    d0f8:	2085883a 	add	r2,r4,r2
    d0fc:	2a4b883a 	add	r5,r5,r9
    d100:	40803636 	bltu	r8,r2,d1dc <__umoddi3+0x4c8>
    d104:	40804d26 	beq	r8,r2,d23c <__umoddi3+0x528>
    d108:	4089c83a 	sub	r4,r8,r2
    d10c:	280f883a 	mov	r7,r5
    d110:	81cfc83a 	sub	r7,r16,r7
    d114:	81c7803a 	cmpltu	r3,r16,r7
    d118:	20c7c83a 	sub	r3,r4,r3
    d11c:	1cc4983a 	sll	r2,r3,r19
    d120:	3d0ed83a 	srl	r7,r7,r20
    d124:	1d06d83a 	srl	r3,r3,r20
    d128:	11c4b03a 	or	r2,r2,r7
    d12c:	003f9306 	br	cf7c <__alt_data_end+0xff00cf7c>
    d130:	9ca6983a 	sll	r19,r19,r18
    d134:	88e8d83a 	srl	r20,r17,r3
    d138:	80c4d83a 	srl	r2,r16,r3
    d13c:	982cd43a 	srli	r22,r19,16
    d140:	8ca2983a 	sll	r17,r17,r18
    d144:	a009883a 	mov	r4,r20
    d148:	b00b883a 	mov	r5,r22
    d14c:	1478b03a 	or	fp,r2,r17
    d150:	00030c80 	call	30c8 <__umodsi3>
    d154:	a009883a 	mov	r4,r20
    d158:	b00b883a 	mov	r5,r22
    d15c:	1023883a 	mov	r17,r2
    d160:	00030640 	call	3064 <__udivsi3>
    d164:	9d7fffcc 	andi	r21,r19,65535
    d168:	880a943a 	slli	r5,r17,16
    d16c:	e008d43a 	srli	r4,fp,16
    d170:	a885383a 	mul	r2,r21,r2
    d174:	84a8983a 	sll	r20,r16,r18
    d178:	2148b03a 	or	r4,r4,r5
    d17c:	2080042e 	bgeu	r4,r2,d190 <__umoddi3+0x47c>
    d180:	24c9883a 	add	r4,r4,r19
    d184:	24c00236 	bltu	r4,r19,d190 <__umoddi3+0x47c>
    d188:	2080012e 	bgeu	r4,r2,d190 <__umoddi3+0x47c>
    d18c:	24c9883a 	add	r4,r4,r19
    d190:	20a3c83a 	sub	r17,r4,r2
    d194:	b00b883a 	mov	r5,r22
    d198:	8809883a 	mov	r4,r17
    d19c:	00030c80 	call	30c8 <__umodsi3>
    d1a0:	102f883a 	mov	r23,r2
    d1a4:	8809883a 	mov	r4,r17
    d1a8:	b00b883a 	mov	r5,r22
    d1ac:	00030640 	call	3064 <__udivsi3>
    d1b0:	b82e943a 	slli	r23,r23,16
    d1b4:	a885383a 	mul	r2,r21,r2
    d1b8:	e13fffcc 	andi	r4,fp,65535
    d1bc:	25c8b03a 	or	r4,r4,r23
    d1c0:	2080042e 	bgeu	r4,r2,d1d4 <__umoddi3+0x4c0>
    d1c4:	24c9883a 	add	r4,r4,r19
    d1c8:	24c00236 	bltu	r4,r19,d1d4 <__umoddi3+0x4c0>
    d1cc:	2080012e 	bgeu	r4,r2,d1d4 <__umoddi3+0x4c0>
    d1d0:	24c9883a 	add	r4,r4,r19
    d1d4:	20a3c83a 	sub	r17,r4,r2
    d1d8:	003f4806 	br	cefc <__alt_data_end+0xff00cefc>
    d1dc:	2c8fc83a 	sub	r7,r5,r18
    d1e0:	1545c83a 	sub	r2,r2,r21
    d1e4:	29cb803a 	cmpltu	r5,r5,r7
    d1e8:	1145c83a 	sub	r2,r2,r5
    d1ec:	4089c83a 	sub	r4,r8,r2
    d1f0:	003fc706 	br	d110 <__alt_data_end+0xff00d110>
    d1f4:	01000604 	movi	r4,24
    d1f8:	003f1806 	br	ce5c <__alt_data_end+0xff00ce5c>
    d1fc:	00800604 	movi	r2,24
    d200:	003f3206 	br	cecc <__alt_data_end+0xff00cecc>
    d204:	01000604 	movi	r4,24
    d208:	003ed906 	br	cd70 <__alt_data_end+0xff00cd70>
    d20c:	413fa52e 	bgeu	r8,r4,d0a4 <__alt_data_end+0xff00d0a4>
    d210:	297fff84 	addi	r5,r5,-2
    d214:	4551883a 	add	r8,r8,r21
    d218:	003fa306 	br	d0a8 <__alt_data_end+0xff00d0a8>
    d21c:	15ff8b2e 	bgeu	r2,r23,d04c <__alt_data_end+0xff00d04c>
    d220:	31bfff84 	addi	r6,r6,-2
    d224:	1545883a 	add	r2,r2,r21
    d228:	003f8906 	br	d050 <__alt_data_end+0xff00d050>
    d22c:	24c9883a 	add	r4,r4,r19
    d230:	003eee06 	br	cdec <__alt_data_end+0xff00cdec>
    d234:	8005883a 	mov	r2,r16
    d238:	003f1706 	br	ce98 <__alt_data_end+0xff00ce98>
    d23c:	817fe736 	bltu	r16,r5,d1dc <__alt_data_end+0xff00d1dc>
    d240:	280f883a 	mov	r7,r5
    d244:	0009883a 	mov	r4,zero
    d248:	003fb106 	br	d110 <__alt_data_end+0xff00d110>

0000d24c <__adddf3>:
    d24c:	02c00434 	movhi	r11,16
    d250:	5affffc4 	addi	r11,r11,-1
    d254:	2806d7fa 	srli	r3,r5,31
    d258:	2ad4703a 	and	r10,r5,r11
    d25c:	3ad2703a 	and	r9,r7,r11
    d260:	3804d53a 	srli	r2,r7,20
    d264:	3018d77a 	srli	r12,r6,29
    d268:	280ad53a 	srli	r5,r5,20
    d26c:	501490fa 	slli	r10,r10,3
    d270:	2010d77a 	srli	r8,r4,29
    d274:	481290fa 	slli	r9,r9,3
    d278:	380ed7fa 	srli	r7,r7,31
    d27c:	defffb04 	addi	sp,sp,-20
    d280:	dc800215 	stw	r18,8(sp)
    d284:	dc400115 	stw	r17,4(sp)
    d288:	dc000015 	stw	r16,0(sp)
    d28c:	dfc00415 	stw	ra,16(sp)
    d290:	dcc00315 	stw	r19,12(sp)
    d294:	1c803fcc 	andi	r18,r3,255
    d298:	2c01ffcc 	andi	r16,r5,2047
    d29c:	5210b03a 	or	r8,r10,r8
    d2a0:	202290fa 	slli	r17,r4,3
    d2a4:	1081ffcc 	andi	r2,r2,2047
    d2a8:	4b12b03a 	or	r9,r9,r12
    d2ac:	300c90fa 	slli	r6,r6,3
    d2b0:	91c07526 	beq	r18,r7,d488 <__adddf3+0x23c>
    d2b4:	8087c83a 	sub	r3,r16,r2
    d2b8:	00c0ab0e 	bge	zero,r3,d568 <__adddf3+0x31c>
    d2bc:	10002a1e 	bne	r2,zero,d368 <__adddf3+0x11c>
    d2c0:	4984b03a 	or	r2,r9,r6
    d2c4:	1000961e 	bne	r2,zero,d520 <__adddf3+0x2d4>
    d2c8:	888001cc 	andi	r2,r17,7
    d2cc:	10000726 	beq	r2,zero,d2ec <__adddf3+0xa0>
    d2d0:	888003cc 	andi	r2,r17,15
    d2d4:	00c00104 	movi	r3,4
    d2d8:	10c00426 	beq	r2,r3,d2ec <__adddf3+0xa0>
    d2dc:	88c7883a 	add	r3,r17,r3
    d2e0:	1c63803a 	cmpltu	r17,r3,r17
    d2e4:	4451883a 	add	r8,r8,r17
    d2e8:	1823883a 	mov	r17,r3
    d2ec:	4080202c 	andhi	r2,r8,128
    d2f0:	10005926 	beq	r2,zero,d458 <__adddf3+0x20c>
    d2f4:	84000044 	addi	r16,r16,1
    d2f8:	0081ffc4 	movi	r2,2047
    d2fc:	8080ba26 	beq	r16,r2,d5e8 <__adddf3+0x39c>
    d300:	00bfe034 	movhi	r2,65408
    d304:	10bfffc4 	addi	r2,r2,-1
    d308:	4090703a 	and	r8,r8,r2
    d30c:	4004977a 	slli	r2,r8,29
    d310:	4010927a 	slli	r8,r8,9
    d314:	8822d0fa 	srli	r17,r17,3
    d318:	8401ffcc 	andi	r16,r16,2047
    d31c:	4010d33a 	srli	r8,r8,12
    d320:	9007883a 	mov	r3,r18
    d324:	1444b03a 	or	r2,r2,r17
    d328:	8401ffcc 	andi	r16,r16,2047
    d32c:	8020953a 	slli	r16,r16,20
    d330:	18c03fcc 	andi	r3,r3,255
    d334:	01000434 	movhi	r4,16
    d338:	213fffc4 	addi	r4,r4,-1
    d33c:	180697fa 	slli	r3,r3,31
    d340:	4110703a 	and	r8,r8,r4
    d344:	4410b03a 	or	r8,r8,r16
    d348:	40c6b03a 	or	r3,r8,r3
    d34c:	dfc00417 	ldw	ra,16(sp)
    d350:	dcc00317 	ldw	r19,12(sp)
    d354:	dc800217 	ldw	r18,8(sp)
    d358:	dc400117 	ldw	r17,4(sp)
    d35c:	dc000017 	ldw	r16,0(sp)
    d360:	dec00504 	addi	sp,sp,20
    d364:	f800283a 	ret
    d368:	0081ffc4 	movi	r2,2047
    d36c:	80bfd626 	beq	r16,r2,d2c8 <__alt_data_end+0xff00d2c8>
    d370:	4a402034 	orhi	r9,r9,128
    d374:	00800e04 	movi	r2,56
    d378:	10c09f16 	blt	r2,r3,d5f8 <__adddf3+0x3ac>
    d37c:	008007c4 	movi	r2,31
    d380:	10c0c216 	blt	r2,r3,d68c <__adddf3+0x440>
    d384:	00800804 	movi	r2,32
    d388:	10c5c83a 	sub	r2,r2,r3
    d38c:	488a983a 	sll	r5,r9,r2
    d390:	30c8d83a 	srl	r4,r6,r3
    d394:	3084983a 	sll	r2,r6,r2
    d398:	48c6d83a 	srl	r3,r9,r3
    d39c:	290cb03a 	or	r6,r5,r4
    d3a0:	1004c03a 	cmpne	r2,r2,zero
    d3a4:	308cb03a 	or	r6,r6,r2
    d3a8:	898dc83a 	sub	r6,r17,r6
    d3ac:	89a3803a 	cmpltu	r17,r17,r6
    d3b0:	40d1c83a 	sub	r8,r8,r3
    d3b4:	4451c83a 	sub	r8,r8,r17
    d3b8:	3023883a 	mov	r17,r6
    d3bc:	4080202c 	andhi	r2,r8,128
    d3c0:	10002326 	beq	r2,zero,d450 <__adddf3+0x204>
    d3c4:	04c02034 	movhi	r19,128
    d3c8:	9cffffc4 	addi	r19,r19,-1
    d3cc:	44e6703a 	and	r19,r8,r19
    d3d0:	98007626 	beq	r19,zero,d5ac <__adddf3+0x360>
    d3d4:	9809883a 	mov	r4,r19
    d3d8:	000f8500 	call	f850 <__clzsi2>
    d3dc:	10fffe04 	addi	r3,r2,-8
    d3e0:	010007c4 	movi	r4,31
    d3e4:	20c07716 	blt	r4,r3,d5c4 <__adddf3+0x378>
    d3e8:	00800804 	movi	r2,32
    d3ec:	10c5c83a 	sub	r2,r2,r3
    d3f0:	8884d83a 	srl	r2,r17,r2
    d3f4:	98d0983a 	sll	r8,r19,r3
    d3f8:	88e2983a 	sll	r17,r17,r3
    d3fc:	1204b03a 	or	r2,r2,r8
    d400:	1c007416 	blt	r3,r16,d5d4 <__adddf3+0x388>
    d404:	1c21c83a 	sub	r16,r3,r16
    d408:	82000044 	addi	r8,r16,1
    d40c:	00c007c4 	movi	r3,31
    d410:	1a009116 	blt	r3,r8,d658 <__adddf3+0x40c>
    d414:	00c00804 	movi	r3,32
    d418:	1a07c83a 	sub	r3,r3,r8
    d41c:	8a08d83a 	srl	r4,r17,r8
    d420:	88e2983a 	sll	r17,r17,r3
    d424:	10c6983a 	sll	r3,r2,r3
    d428:	1210d83a 	srl	r8,r2,r8
    d42c:	8804c03a 	cmpne	r2,r17,zero
    d430:	1906b03a 	or	r3,r3,r4
    d434:	18a2b03a 	or	r17,r3,r2
    d438:	0021883a 	mov	r16,zero
    d43c:	003fa206 	br	d2c8 <__alt_data_end+0xff00d2c8>
    d440:	1890b03a 	or	r8,r3,r2
    d444:	40017d26 	beq	r8,zero,da3c <__adddf3+0x7f0>
    d448:	1011883a 	mov	r8,r2
    d44c:	1823883a 	mov	r17,r3
    d450:	888001cc 	andi	r2,r17,7
    d454:	103f9e1e 	bne	r2,zero,d2d0 <__alt_data_end+0xff00d2d0>
    d458:	4004977a 	slli	r2,r8,29
    d45c:	8822d0fa 	srli	r17,r17,3
    d460:	4010d0fa 	srli	r8,r8,3
    d464:	9007883a 	mov	r3,r18
    d468:	1444b03a 	or	r2,r2,r17
    d46c:	0101ffc4 	movi	r4,2047
    d470:	81002426 	beq	r16,r4,d504 <__adddf3+0x2b8>
    d474:	8120703a 	and	r16,r16,r4
    d478:	01000434 	movhi	r4,16
    d47c:	213fffc4 	addi	r4,r4,-1
    d480:	4110703a 	and	r8,r8,r4
    d484:	003fa806 	br	d328 <__alt_data_end+0xff00d328>
    d488:	8089c83a 	sub	r4,r16,r2
    d48c:	01005e0e 	bge	zero,r4,d608 <__adddf3+0x3bc>
    d490:	10002b26 	beq	r2,zero,d540 <__adddf3+0x2f4>
    d494:	0081ffc4 	movi	r2,2047
    d498:	80bf8b26 	beq	r16,r2,d2c8 <__alt_data_end+0xff00d2c8>
    d49c:	4a402034 	orhi	r9,r9,128
    d4a0:	00800e04 	movi	r2,56
    d4a4:	1100a40e 	bge	r2,r4,d738 <__adddf3+0x4ec>
    d4a8:	498cb03a 	or	r6,r9,r6
    d4ac:	300ac03a 	cmpne	r5,r6,zero
    d4b0:	0013883a 	mov	r9,zero
    d4b4:	2c4b883a 	add	r5,r5,r17
    d4b8:	2c63803a 	cmpltu	r17,r5,r17
    d4bc:	4a11883a 	add	r8,r9,r8
    d4c0:	8a11883a 	add	r8,r17,r8
    d4c4:	2823883a 	mov	r17,r5
    d4c8:	4080202c 	andhi	r2,r8,128
    d4cc:	103fe026 	beq	r2,zero,d450 <__alt_data_end+0xff00d450>
    d4d0:	84000044 	addi	r16,r16,1
    d4d4:	0081ffc4 	movi	r2,2047
    d4d8:	8080d226 	beq	r16,r2,d824 <__adddf3+0x5d8>
    d4dc:	00bfe034 	movhi	r2,65408
    d4e0:	10bfffc4 	addi	r2,r2,-1
    d4e4:	4090703a 	and	r8,r8,r2
    d4e8:	880ad07a 	srli	r5,r17,1
    d4ec:	400897fa 	slli	r4,r8,31
    d4f0:	88c0004c 	andi	r3,r17,1
    d4f4:	28e2b03a 	or	r17,r5,r3
    d4f8:	4010d07a 	srli	r8,r8,1
    d4fc:	2462b03a 	or	r17,r4,r17
    d500:	003f7106 	br	d2c8 <__alt_data_end+0xff00d2c8>
    d504:	4088b03a 	or	r4,r8,r2
    d508:	20014526 	beq	r4,zero,da20 <__adddf3+0x7d4>
    d50c:	01000434 	movhi	r4,16
    d510:	42000234 	orhi	r8,r8,8
    d514:	213fffc4 	addi	r4,r4,-1
    d518:	4110703a 	and	r8,r8,r4
    d51c:	003f8206 	br	d328 <__alt_data_end+0xff00d328>
    d520:	18ffffc4 	addi	r3,r3,-1
    d524:	1800491e 	bne	r3,zero,d64c <__adddf3+0x400>
    d528:	898bc83a 	sub	r5,r17,r6
    d52c:	8963803a 	cmpltu	r17,r17,r5
    d530:	4251c83a 	sub	r8,r8,r9
    d534:	4451c83a 	sub	r8,r8,r17
    d538:	2823883a 	mov	r17,r5
    d53c:	003f9f06 	br	d3bc <__alt_data_end+0xff00d3bc>
    d540:	4984b03a 	or	r2,r9,r6
    d544:	103f6026 	beq	r2,zero,d2c8 <__alt_data_end+0xff00d2c8>
    d548:	213fffc4 	addi	r4,r4,-1
    d54c:	2000931e 	bne	r4,zero,d79c <__adddf3+0x550>
    d550:	898d883a 	add	r6,r17,r6
    d554:	3463803a 	cmpltu	r17,r6,r17
    d558:	4251883a 	add	r8,r8,r9
    d55c:	8a11883a 	add	r8,r17,r8
    d560:	3023883a 	mov	r17,r6
    d564:	003fd806 	br	d4c8 <__alt_data_end+0xff00d4c8>
    d568:	1800541e 	bne	r3,zero,d6bc <__adddf3+0x470>
    d56c:	80800044 	addi	r2,r16,1
    d570:	1081ffcc 	andi	r2,r2,2047
    d574:	00c00044 	movi	r3,1
    d578:	1880a00e 	bge	r3,r2,d7fc <__adddf3+0x5b0>
    d57c:	8989c83a 	sub	r4,r17,r6
    d580:	8905803a 	cmpltu	r2,r17,r4
    d584:	4267c83a 	sub	r19,r8,r9
    d588:	98a7c83a 	sub	r19,r19,r2
    d58c:	9880202c 	andhi	r2,r19,128
    d590:	10006326 	beq	r2,zero,d720 <__adddf3+0x4d4>
    d594:	3463c83a 	sub	r17,r6,r17
    d598:	4a07c83a 	sub	r3,r9,r8
    d59c:	344d803a 	cmpltu	r6,r6,r17
    d5a0:	19a7c83a 	sub	r19,r3,r6
    d5a4:	3825883a 	mov	r18,r7
    d5a8:	983f8a1e 	bne	r19,zero,d3d4 <__alt_data_end+0xff00d3d4>
    d5ac:	8809883a 	mov	r4,r17
    d5b0:	000f8500 	call	f850 <__clzsi2>
    d5b4:	10800804 	addi	r2,r2,32
    d5b8:	10fffe04 	addi	r3,r2,-8
    d5bc:	010007c4 	movi	r4,31
    d5c0:	20ff890e 	bge	r4,r3,d3e8 <__alt_data_end+0xff00d3e8>
    d5c4:	10bff604 	addi	r2,r2,-40
    d5c8:	8884983a 	sll	r2,r17,r2
    d5cc:	0023883a 	mov	r17,zero
    d5d0:	1c3f8c0e 	bge	r3,r16,d404 <__alt_data_end+0xff00d404>
    d5d4:	023fe034 	movhi	r8,65408
    d5d8:	423fffc4 	addi	r8,r8,-1
    d5dc:	80e1c83a 	sub	r16,r16,r3
    d5e0:	1210703a 	and	r8,r2,r8
    d5e4:	003f3806 	br	d2c8 <__alt_data_end+0xff00d2c8>
    d5e8:	9007883a 	mov	r3,r18
    d5ec:	0011883a 	mov	r8,zero
    d5f0:	0005883a 	mov	r2,zero
    d5f4:	003f4c06 	br	d328 <__alt_data_end+0xff00d328>
    d5f8:	498cb03a 	or	r6,r9,r6
    d5fc:	300cc03a 	cmpne	r6,r6,zero
    d600:	0007883a 	mov	r3,zero
    d604:	003f6806 	br	d3a8 <__alt_data_end+0xff00d3a8>
    d608:	20009c1e 	bne	r4,zero,d87c <__adddf3+0x630>
    d60c:	80800044 	addi	r2,r16,1
    d610:	1141ffcc 	andi	r5,r2,2047
    d614:	01000044 	movi	r4,1
    d618:	2140670e 	bge	r4,r5,d7b8 <__adddf3+0x56c>
    d61c:	0101ffc4 	movi	r4,2047
    d620:	11007f26 	beq	r2,r4,d820 <__adddf3+0x5d4>
    d624:	898d883a 	add	r6,r17,r6
    d628:	4247883a 	add	r3,r8,r9
    d62c:	3451803a 	cmpltu	r8,r6,r17
    d630:	40d1883a 	add	r8,r8,r3
    d634:	402297fa 	slli	r17,r8,31
    d638:	300cd07a 	srli	r6,r6,1
    d63c:	4010d07a 	srli	r8,r8,1
    d640:	1021883a 	mov	r16,r2
    d644:	89a2b03a 	or	r17,r17,r6
    d648:	003f1f06 	br	d2c8 <__alt_data_end+0xff00d2c8>
    d64c:	0081ffc4 	movi	r2,2047
    d650:	80bf481e 	bne	r16,r2,d374 <__alt_data_end+0xff00d374>
    d654:	003f1c06 	br	d2c8 <__alt_data_end+0xff00d2c8>
    d658:	843ff844 	addi	r16,r16,-31
    d65c:	01000804 	movi	r4,32
    d660:	1406d83a 	srl	r3,r2,r16
    d664:	41005026 	beq	r8,r4,d7a8 <__adddf3+0x55c>
    d668:	01001004 	movi	r4,64
    d66c:	2211c83a 	sub	r8,r4,r8
    d670:	1204983a 	sll	r2,r2,r8
    d674:	88a2b03a 	or	r17,r17,r2
    d678:	8822c03a 	cmpne	r17,r17,zero
    d67c:	1c62b03a 	or	r17,r3,r17
    d680:	0011883a 	mov	r8,zero
    d684:	0021883a 	mov	r16,zero
    d688:	003f7106 	br	d450 <__alt_data_end+0xff00d450>
    d68c:	193ff804 	addi	r4,r3,-32
    d690:	00800804 	movi	r2,32
    d694:	4908d83a 	srl	r4,r9,r4
    d698:	18804526 	beq	r3,r2,d7b0 <__adddf3+0x564>
    d69c:	00801004 	movi	r2,64
    d6a0:	10c5c83a 	sub	r2,r2,r3
    d6a4:	4886983a 	sll	r3,r9,r2
    d6a8:	198cb03a 	or	r6,r3,r6
    d6ac:	300cc03a 	cmpne	r6,r6,zero
    d6b0:	218cb03a 	or	r6,r4,r6
    d6b4:	0007883a 	mov	r3,zero
    d6b8:	003f3b06 	br	d3a8 <__alt_data_end+0xff00d3a8>
    d6bc:	80002a26 	beq	r16,zero,d768 <__adddf3+0x51c>
    d6c0:	0101ffc4 	movi	r4,2047
    d6c4:	11006826 	beq	r2,r4,d868 <__adddf3+0x61c>
    d6c8:	00c7c83a 	sub	r3,zero,r3
    d6cc:	42002034 	orhi	r8,r8,128
    d6d0:	01000e04 	movi	r4,56
    d6d4:	20c07c16 	blt	r4,r3,d8c8 <__adddf3+0x67c>
    d6d8:	010007c4 	movi	r4,31
    d6dc:	20c0da16 	blt	r4,r3,da48 <__adddf3+0x7fc>
    d6e0:	01000804 	movi	r4,32
    d6e4:	20c9c83a 	sub	r4,r4,r3
    d6e8:	4114983a 	sll	r10,r8,r4
    d6ec:	88cad83a 	srl	r5,r17,r3
    d6f0:	8908983a 	sll	r4,r17,r4
    d6f4:	40c6d83a 	srl	r3,r8,r3
    d6f8:	5162b03a 	or	r17,r10,r5
    d6fc:	2008c03a 	cmpne	r4,r4,zero
    d700:	8922b03a 	or	r17,r17,r4
    d704:	3463c83a 	sub	r17,r6,r17
    d708:	48c7c83a 	sub	r3,r9,r3
    d70c:	344d803a 	cmpltu	r6,r6,r17
    d710:	1991c83a 	sub	r8,r3,r6
    d714:	1021883a 	mov	r16,r2
    d718:	3825883a 	mov	r18,r7
    d71c:	003f2706 	br	d3bc <__alt_data_end+0xff00d3bc>
    d720:	24d0b03a 	or	r8,r4,r19
    d724:	40001b1e 	bne	r8,zero,d794 <__adddf3+0x548>
    d728:	0005883a 	mov	r2,zero
    d72c:	0007883a 	mov	r3,zero
    d730:	0021883a 	mov	r16,zero
    d734:	003f4d06 	br	d46c <__alt_data_end+0xff00d46c>
    d738:	008007c4 	movi	r2,31
    d73c:	11003c16 	blt	r2,r4,d830 <__adddf3+0x5e4>
    d740:	00800804 	movi	r2,32
    d744:	1105c83a 	sub	r2,r2,r4
    d748:	488e983a 	sll	r7,r9,r2
    d74c:	310ad83a 	srl	r5,r6,r4
    d750:	3084983a 	sll	r2,r6,r2
    d754:	4912d83a 	srl	r9,r9,r4
    d758:	394ab03a 	or	r5,r7,r5
    d75c:	1004c03a 	cmpne	r2,r2,zero
    d760:	288ab03a 	or	r5,r5,r2
    d764:	003f5306 	br	d4b4 <__alt_data_end+0xff00d4b4>
    d768:	4448b03a 	or	r4,r8,r17
    d76c:	20003e26 	beq	r4,zero,d868 <__adddf3+0x61c>
    d770:	00c6303a 	nor	r3,zero,r3
    d774:	18003a1e 	bne	r3,zero,d860 <__adddf3+0x614>
    d778:	3463c83a 	sub	r17,r6,r17
    d77c:	4a07c83a 	sub	r3,r9,r8
    d780:	344d803a 	cmpltu	r6,r6,r17
    d784:	1991c83a 	sub	r8,r3,r6
    d788:	1021883a 	mov	r16,r2
    d78c:	3825883a 	mov	r18,r7
    d790:	003f0a06 	br	d3bc <__alt_data_end+0xff00d3bc>
    d794:	2023883a 	mov	r17,r4
    d798:	003f0d06 	br	d3d0 <__alt_data_end+0xff00d3d0>
    d79c:	0081ffc4 	movi	r2,2047
    d7a0:	80bf3f1e 	bne	r16,r2,d4a0 <__alt_data_end+0xff00d4a0>
    d7a4:	003ec806 	br	d2c8 <__alt_data_end+0xff00d2c8>
    d7a8:	0005883a 	mov	r2,zero
    d7ac:	003fb106 	br	d674 <__alt_data_end+0xff00d674>
    d7b0:	0007883a 	mov	r3,zero
    d7b4:	003fbc06 	br	d6a8 <__alt_data_end+0xff00d6a8>
    d7b8:	4444b03a 	or	r2,r8,r17
    d7bc:	8000871e 	bne	r16,zero,d9dc <__adddf3+0x790>
    d7c0:	1000ba26 	beq	r2,zero,daac <__adddf3+0x860>
    d7c4:	4984b03a 	or	r2,r9,r6
    d7c8:	103ebf26 	beq	r2,zero,d2c8 <__alt_data_end+0xff00d2c8>
    d7cc:	8985883a 	add	r2,r17,r6
    d7d0:	4247883a 	add	r3,r8,r9
    d7d4:	1451803a 	cmpltu	r8,r2,r17
    d7d8:	40d1883a 	add	r8,r8,r3
    d7dc:	40c0202c 	andhi	r3,r8,128
    d7e0:	1023883a 	mov	r17,r2
    d7e4:	183f1a26 	beq	r3,zero,d450 <__alt_data_end+0xff00d450>
    d7e8:	00bfe034 	movhi	r2,65408
    d7ec:	10bfffc4 	addi	r2,r2,-1
    d7f0:	2021883a 	mov	r16,r4
    d7f4:	4090703a 	and	r8,r8,r2
    d7f8:	003eb306 	br	d2c8 <__alt_data_end+0xff00d2c8>
    d7fc:	4444b03a 	or	r2,r8,r17
    d800:	8000291e 	bne	r16,zero,d8a8 <__adddf3+0x65c>
    d804:	10004b1e 	bne	r2,zero,d934 <__adddf3+0x6e8>
    d808:	4990b03a 	or	r8,r9,r6
    d80c:	40008b26 	beq	r8,zero,da3c <__adddf3+0x7f0>
    d810:	4811883a 	mov	r8,r9
    d814:	3023883a 	mov	r17,r6
    d818:	3825883a 	mov	r18,r7
    d81c:	003eaa06 	br	d2c8 <__alt_data_end+0xff00d2c8>
    d820:	1021883a 	mov	r16,r2
    d824:	0011883a 	mov	r8,zero
    d828:	0005883a 	mov	r2,zero
    d82c:	003f0f06 	br	d46c <__alt_data_end+0xff00d46c>
    d830:	217ff804 	addi	r5,r4,-32
    d834:	00800804 	movi	r2,32
    d838:	494ad83a 	srl	r5,r9,r5
    d83c:	20807d26 	beq	r4,r2,da34 <__adddf3+0x7e8>
    d840:	00801004 	movi	r2,64
    d844:	1109c83a 	sub	r4,r2,r4
    d848:	4912983a 	sll	r9,r9,r4
    d84c:	498cb03a 	or	r6,r9,r6
    d850:	300cc03a 	cmpne	r6,r6,zero
    d854:	298ab03a 	or	r5,r5,r6
    d858:	0013883a 	mov	r9,zero
    d85c:	003f1506 	br	d4b4 <__alt_data_end+0xff00d4b4>
    d860:	0101ffc4 	movi	r4,2047
    d864:	113f9a1e 	bne	r2,r4,d6d0 <__alt_data_end+0xff00d6d0>
    d868:	4811883a 	mov	r8,r9
    d86c:	3023883a 	mov	r17,r6
    d870:	1021883a 	mov	r16,r2
    d874:	3825883a 	mov	r18,r7
    d878:	003e9306 	br	d2c8 <__alt_data_end+0xff00d2c8>
    d87c:	8000161e 	bne	r16,zero,d8d8 <__adddf3+0x68c>
    d880:	444ab03a 	or	r5,r8,r17
    d884:	28005126 	beq	r5,zero,d9cc <__adddf3+0x780>
    d888:	0108303a 	nor	r4,zero,r4
    d88c:	20004d1e 	bne	r4,zero,d9c4 <__adddf3+0x778>
    d890:	89a3883a 	add	r17,r17,r6
    d894:	4253883a 	add	r9,r8,r9
    d898:	898d803a 	cmpltu	r6,r17,r6
    d89c:	3251883a 	add	r8,r6,r9
    d8a0:	1021883a 	mov	r16,r2
    d8a4:	003f0806 	br	d4c8 <__alt_data_end+0xff00d4c8>
    d8a8:	1000301e 	bne	r2,zero,d96c <__adddf3+0x720>
    d8ac:	4984b03a 	or	r2,r9,r6
    d8b0:	10007126 	beq	r2,zero,da78 <__adddf3+0x82c>
    d8b4:	4811883a 	mov	r8,r9
    d8b8:	3023883a 	mov	r17,r6
    d8bc:	3825883a 	mov	r18,r7
    d8c0:	0401ffc4 	movi	r16,2047
    d8c4:	003e8006 	br	d2c8 <__alt_data_end+0xff00d2c8>
    d8c8:	4462b03a 	or	r17,r8,r17
    d8cc:	8822c03a 	cmpne	r17,r17,zero
    d8d0:	0007883a 	mov	r3,zero
    d8d4:	003f8b06 	br	d704 <__alt_data_end+0xff00d704>
    d8d8:	0141ffc4 	movi	r5,2047
    d8dc:	11403b26 	beq	r2,r5,d9cc <__adddf3+0x780>
    d8e0:	0109c83a 	sub	r4,zero,r4
    d8e4:	42002034 	orhi	r8,r8,128
    d8e8:	01400e04 	movi	r5,56
    d8ec:	29006716 	blt	r5,r4,da8c <__adddf3+0x840>
    d8f0:	014007c4 	movi	r5,31
    d8f4:	29007016 	blt	r5,r4,dab8 <__adddf3+0x86c>
    d8f8:	01400804 	movi	r5,32
    d8fc:	290bc83a 	sub	r5,r5,r4
    d900:	4154983a 	sll	r10,r8,r5
    d904:	890ed83a 	srl	r7,r17,r4
    d908:	894a983a 	sll	r5,r17,r5
    d90c:	4108d83a 	srl	r4,r8,r4
    d910:	51e2b03a 	or	r17,r10,r7
    d914:	280ac03a 	cmpne	r5,r5,zero
    d918:	8962b03a 	or	r17,r17,r5
    d91c:	89a3883a 	add	r17,r17,r6
    d920:	2253883a 	add	r9,r4,r9
    d924:	898d803a 	cmpltu	r6,r17,r6
    d928:	3251883a 	add	r8,r6,r9
    d92c:	1021883a 	mov	r16,r2
    d930:	003ee506 	br	d4c8 <__alt_data_end+0xff00d4c8>
    d934:	4984b03a 	or	r2,r9,r6
    d938:	103e6326 	beq	r2,zero,d2c8 <__alt_data_end+0xff00d2c8>
    d93c:	8987c83a 	sub	r3,r17,r6
    d940:	88c9803a 	cmpltu	r4,r17,r3
    d944:	4245c83a 	sub	r2,r8,r9
    d948:	1105c83a 	sub	r2,r2,r4
    d94c:	1100202c 	andhi	r4,r2,128
    d950:	203ebb26 	beq	r4,zero,d440 <__alt_data_end+0xff00d440>
    d954:	3463c83a 	sub	r17,r6,r17
    d958:	4a07c83a 	sub	r3,r9,r8
    d95c:	344d803a 	cmpltu	r6,r6,r17
    d960:	1991c83a 	sub	r8,r3,r6
    d964:	3825883a 	mov	r18,r7
    d968:	003e5706 	br	d2c8 <__alt_data_end+0xff00d2c8>
    d96c:	4984b03a 	or	r2,r9,r6
    d970:	10002e26 	beq	r2,zero,da2c <__adddf3+0x7e0>
    d974:	4004d0fa 	srli	r2,r8,3
    d978:	8822d0fa 	srli	r17,r17,3
    d97c:	4010977a 	slli	r8,r8,29
    d980:	10c0022c 	andhi	r3,r2,8
    d984:	4462b03a 	or	r17,r8,r17
    d988:	18000826 	beq	r3,zero,d9ac <__adddf3+0x760>
    d98c:	4808d0fa 	srli	r4,r9,3
    d990:	20c0022c 	andhi	r3,r4,8
    d994:	1800051e 	bne	r3,zero,d9ac <__adddf3+0x760>
    d998:	300cd0fa 	srli	r6,r6,3
    d99c:	4806977a 	slli	r3,r9,29
    d9a0:	2005883a 	mov	r2,r4
    d9a4:	3825883a 	mov	r18,r7
    d9a8:	19a2b03a 	or	r17,r3,r6
    d9ac:	8810d77a 	srli	r8,r17,29
    d9b0:	100490fa 	slli	r2,r2,3
    d9b4:	882290fa 	slli	r17,r17,3
    d9b8:	0401ffc4 	movi	r16,2047
    d9bc:	4090b03a 	or	r8,r8,r2
    d9c0:	003e4106 	br	d2c8 <__alt_data_end+0xff00d2c8>
    d9c4:	0141ffc4 	movi	r5,2047
    d9c8:	117fc71e 	bne	r2,r5,d8e8 <__alt_data_end+0xff00d8e8>
    d9cc:	4811883a 	mov	r8,r9
    d9d0:	3023883a 	mov	r17,r6
    d9d4:	1021883a 	mov	r16,r2
    d9d8:	003e3b06 	br	d2c8 <__alt_data_end+0xff00d2c8>
    d9dc:	10002f26 	beq	r2,zero,da9c <__adddf3+0x850>
    d9e0:	4984b03a 	or	r2,r9,r6
    d9e4:	10001126 	beq	r2,zero,da2c <__adddf3+0x7e0>
    d9e8:	4004d0fa 	srli	r2,r8,3
    d9ec:	8822d0fa 	srli	r17,r17,3
    d9f0:	4010977a 	slli	r8,r8,29
    d9f4:	10c0022c 	andhi	r3,r2,8
    d9f8:	4462b03a 	or	r17,r8,r17
    d9fc:	183feb26 	beq	r3,zero,d9ac <__alt_data_end+0xff00d9ac>
    da00:	4808d0fa 	srli	r4,r9,3
    da04:	20c0022c 	andhi	r3,r4,8
    da08:	183fe81e 	bne	r3,zero,d9ac <__alt_data_end+0xff00d9ac>
    da0c:	300cd0fa 	srli	r6,r6,3
    da10:	4806977a 	slli	r3,r9,29
    da14:	2005883a 	mov	r2,r4
    da18:	19a2b03a 	or	r17,r3,r6
    da1c:	003fe306 	br	d9ac <__alt_data_end+0xff00d9ac>
    da20:	0011883a 	mov	r8,zero
    da24:	0005883a 	mov	r2,zero
    da28:	003e3f06 	br	d328 <__alt_data_end+0xff00d328>
    da2c:	0401ffc4 	movi	r16,2047
    da30:	003e2506 	br	d2c8 <__alt_data_end+0xff00d2c8>
    da34:	0013883a 	mov	r9,zero
    da38:	003f8406 	br	d84c <__alt_data_end+0xff00d84c>
    da3c:	0005883a 	mov	r2,zero
    da40:	0007883a 	mov	r3,zero
    da44:	003e8906 	br	d46c <__alt_data_end+0xff00d46c>
    da48:	197ff804 	addi	r5,r3,-32
    da4c:	01000804 	movi	r4,32
    da50:	414ad83a 	srl	r5,r8,r5
    da54:	19002426 	beq	r3,r4,dae8 <__adddf3+0x89c>
    da58:	01001004 	movi	r4,64
    da5c:	20c7c83a 	sub	r3,r4,r3
    da60:	40c6983a 	sll	r3,r8,r3
    da64:	1c46b03a 	or	r3,r3,r17
    da68:	1806c03a 	cmpne	r3,r3,zero
    da6c:	28e2b03a 	or	r17,r5,r3
    da70:	0007883a 	mov	r3,zero
    da74:	003f2306 	br	d704 <__alt_data_end+0xff00d704>
    da78:	0007883a 	mov	r3,zero
    da7c:	5811883a 	mov	r8,r11
    da80:	00bfffc4 	movi	r2,-1
    da84:	0401ffc4 	movi	r16,2047
    da88:	003e7806 	br	d46c <__alt_data_end+0xff00d46c>
    da8c:	4462b03a 	or	r17,r8,r17
    da90:	8822c03a 	cmpne	r17,r17,zero
    da94:	0009883a 	mov	r4,zero
    da98:	003fa006 	br	d91c <__alt_data_end+0xff00d91c>
    da9c:	4811883a 	mov	r8,r9
    daa0:	3023883a 	mov	r17,r6
    daa4:	0401ffc4 	movi	r16,2047
    daa8:	003e0706 	br	d2c8 <__alt_data_end+0xff00d2c8>
    daac:	4811883a 	mov	r8,r9
    dab0:	3023883a 	mov	r17,r6
    dab4:	003e0406 	br	d2c8 <__alt_data_end+0xff00d2c8>
    dab8:	21fff804 	addi	r7,r4,-32
    dabc:	01400804 	movi	r5,32
    dac0:	41ced83a 	srl	r7,r8,r7
    dac4:	21400a26 	beq	r4,r5,daf0 <__adddf3+0x8a4>
    dac8:	01401004 	movi	r5,64
    dacc:	2909c83a 	sub	r4,r5,r4
    dad0:	4108983a 	sll	r4,r8,r4
    dad4:	2448b03a 	or	r4,r4,r17
    dad8:	2008c03a 	cmpne	r4,r4,zero
    dadc:	3922b03a 	or	r17,r7,r4
    dae0:	0009883a 	mov	r4,zero
    dae4:	003f8d06 	br	d91c <__alt_data_end+0xff00d91c>
    dae8:	0007883a 	mov	r3,zero
    daec:	003fdd06 	br	da64 <__alt_data_end+0xff00da64>
    daf0:	0009883a 	mov	r4,zero
    daf4:	003ff706 	br	dad4 <__alt_data_end+0xff00dad4>

0000daf8 <__divdf3>:
    daf8:	defff204 	addi	sp,sp,-56
    dafc:	dd400915 	stw	r21,36(sp)
    db00:	282ad53a 	srli	r21,r5,20
    db04:	dd000815 	stw	r20,32(sp)
    db08:	2828d7fa 	srli	r20,r5,31
    db0c:	dc000415 	stw	r16,16(sp)
    db10:	04000434 	movhi	r16,16
    db14:	df000c15 	stw	fp,48(sp)
    db18:	843fffc4 	addi	r16,r16,-1
    db1c:	dfc00d15 	stw	ra,52(sp)
    db20:	ddc00b15 	stw	r23,44(sp)
    db24:	dd800a15 	stw	r22,40(sp)
    db28:	dcc00715 	stw	r19,28(sp)
    db2c:	dc800615 	stw	r18,24(sp)
    db30:	dc400515 	stw	r17,20(sp)
    db34:	ad41ffcc 	andi	r21,r21,2047
    db38:	2c20703a 	and	r16,r5,r16
    db3c:	a7003fcc 	andi	fp,r20,255
    db40:	a8006126 	beq	r21,zero,dcc8 <__divdf3+0x1d0>
    db44:	0081ffc4 	movi	r2,2047
    db48:	2025883a 	mov	r18,r4
    db4c:	a8803726 	beq	r21,r2,dc2c <__divdf3+0x134>
    db50:	80800434 	orhi	r2,r16,16
    db54:	100490fa 	slli	r2,r2,3
    db58:	2020d77a 	srli	r16,r4,29
    db5c:	202490fa 	slli	r18,r4,3
    db60:	ad7f0044 	addi	r21,r21,-1023
    db64:	80a0b03a 	or	r16,r16,r2
    db68:	0027883a 	mov	r19,zero
    db6c:	0013883a 	mov	r9,zero
    db70:	3804d53a 	srli	r2,r7,20
    db74:	382cd7fa 	srli	r22,r7,31
    db78:	04400434 	movhi	r17,16
    db7c:	8c7fffc4 	addi	r17,r17,-1
    db80:	1081ffcc 	andi	r2,r2,2047
    db84:	3011883a 	mov	r8,r6
    db88:	3c62703a 	and	r17,r7,r17
    db8c:	b5c03fcc 	andi	r23,r22,255
    db90:	10006c26 	beq	r2,zero,dd44 <__divdf3+0x24c>
    db94:	00c1ffc4 	movi	r3,2047
    db98:	10c06426 	beq	r2,r3,dd2c <__divdf3+0x234>
    db9c:	88c00434 	orhi	r3,r17,16
    dba0:	180690fa 	slli	r3,r3,3
    dba4:	3022d77a 	srli	r17,r6,29
    dba8:	301090fa 	slli	r8,r6,3
    dbac:	10bf0044 	addi	r2,r2,-1023
    dbb0:	88e2b03a 	or	r17,r17,r3
    dbb4:	000f883a 	mov	r7,zero
    dbb8:	a58cf03a 	xor	r6,r20,r22
    dbbc:	3cc8b03a 	or	r4,r7,r19
    dbc0:	a8abc83a 	sub	r21,r21,r2
    dbc4:	008003c4 	movi	r2,15
    dbc8:	3007883a 	mov	r3,r6
    dbcc:	34c03fcc 	andi	r19,r6,255
    dbd0:	11009036 	bltu	r2,r4,de14 <__divdf3+0x31c>
    dbd4:	200890ba 	slli	r4,r4,2
    dbd8:	00800074 	movhi	r2,1
    dbdc:	10b6fb04 	addi	r2,r2,-9236
    dbe0:	2089883a 	add	r4,r4,r2
    dbe4:	20800017 	ldw	r2,0(r4)
    dbe8:	1000683a 	jmp	r2
    dbec:	0000de14 	movui	zero,888
    dbf0:	0000dc64 	muli	zero,zero,881
    dbf4:	0000de04 	movi	zero,888
    dbf8:	0000dc58 	cmpnei	zero,zero,881
    dbfc:	0000de04 	movi	zero,888
    dc00:	0000ddd8 	cmpnei	zero,zero,887
    dc04:	0000de04 	movi	zero,888
    dc08:	0000dc58 	cmpnei	zero,zero,881
    dc0c:	0000dc64 	muli	zero,zero,881
    dc10:	0000dc64 	muli	zero,zero,881
    dc14:	0000ddd8 	cmpnei	zero,zero,887
    dc18:	0000dc58 	cmpnei	zero,zero,881
    dc1c:	0000dc48 	cmpgei	zero,zero,881
    dc20:	0000dc48 	cmpgei	zero,zero,881
    dc24:	0000dc48 	cmpgei	zero,zero,881
    dc28:	0000e0f8 	rdprs	zero,zero,899
    dc2c:	2404b03a 	or	r2,r4,r16
    dc30:	1000661e 	bne	r2,zero,ddcc <__divdf3+0x2d4>
    dc34:	04c00204 	movi	r19,8
    dc38:	0021883a 	mov	r16,zero
    dc3c:	0025883a 	mov	r18,zero
    dc40:	02400084 	movi	r9,2
    dc44:	003fca06 	br	db70 <__alt_data_end+0xff00db70>
    dc48:	8023883a 	mov	r17,r16
    dc4c:	9011883a 	mov	r8,r18
    dc50:	e02f883a 	mov	r23,fp
    dc54:	480f883a 	mov	r7,r9
    dc58:	00800084 	movi	r2,2
    dc5c:	3881311e 	bne	r7,r2,e124 <__divdf3+0x62c>
    dc60:	b827883a 	mov	r19,r23
    dc64:	98c0004c 	andi	r3,r19,1
    dc68:	0081ffc4 	movi	r2,2047
    dc6c:	000b883a 	mov	r5,zero
    dc70:	0025883a 	mov	r18,zero
    dc74:	1004953a 	slli	r2,r2,20
    dc78:	18c03fcc 	andi	r3,r3,255
    dc7c:	04400434 	movhi	r17,16
    dc80:	8c7fffc4 	addi	r17,r17,-1
    dc84:	180697fa 	slli	r3,r3,31
    dc88:	2c4a703a 	and	r5,r5,r17
    dc8c:	288ab03a 	or	r5,r5,r2
    dc90:	28c6b03a 	or	r3,r5,r3
    dc94:	9005883a 	mov	r2,r18
    dc98:	dfc00d17 	ldw	ra,52(sp)
    dc9c:	df000c17 	ldw	fp,48(sp)
    dca0:	ddc00b17 	ldw	r23,44(sp)
    dca4:	dd800a17 	ldw	r22,40(sp)
    dca8:	dd400917 	ldw	r21,36(sp)
    dcac:	dd000817 	ldw	r20,32(sp)
    dcb0:	dcc00717 	ldw	r19,28(sp)
    dcb4:	dc800617 	ldw	r18,24(sp)
    dcb8:	dc400517 	ldw	r17,20(sp)
    dcbc:	dc000417 	ldw	r16,16(sp)
    dcc0:	dec00e04 	addi	sp,sp,56
    dcc4:	f800283a 	ret
    dcc8:	2404b03a 	or	r2,r4,r16
    dccc:	2027883a 	mov	r19,r4
    dcd0:	10003926 	beq	r2,zero,ddb8 <__divdf3+0x2c0>
    dcd4:	80012e26 	beq	r16,zero,e190 <__divdf3+0x698>
    dcd8:	8009883a 	mov	r4,r16
    dcdc:	d9800315 	stw	r6,12(sp)
    dce0:	d9c00215 	stw	r7,8(sp)
    dce4:	000f8500 	call	f850 <__clzsi2>
    dce8:	d9800317 	ldw	r6,12(sp)
    dcec:	d9c00217 	ldw	r7,8(sp)
    dcf0:	113ffd44 	addi	r4,r2,-11
    dcf4:	00c00704 	movi	r3,28
    dcf8:	19012116 	blt	r3,r4,e180 <__divdf3+0x688>
    dcfc:	00c00744 	movi	r3,29
    dd00:	147ffe04 	addi	r17,r2,-8
    dd04:	1907c83a 	sub	r3,r3,r4
    dd08:	8460983a 	sll	r16,r16,r17
    dd0c:	98c6d83a 	srl	r3,r19,r3
    dd10:	9c64983a 	sll	r18,r19,r17
    dd14:	1c20b03a 	or	r16,r3,r16
    dd18:	1080fcc4 	addi	r2,r2,1011
    dd1c:	00abc83a 	sub	r21,zero,r2
    dd20:	0027883a 	mov	r19,zero
    dd24:	0013883a 	mov	r9,zero
    dd28:	003f9106 	br	db70 <__alt_data_end+0xff00db70>
    dd2c:	3446b03a 	or	r3,r6,r17
    dd30:	18001f1e 	bne	r3,zero,ddb0 <__divdf3+0x2b8>
    dd34:	0023883a 	mov	r17,zero
    dd38:	0011883a 	mov	r8,zero
    dd3c:	01c00084 	movi	r7,2
    dd40:	003f9d06 	br	dbb8 <__alt_data_end+0xff00dbb8>
    dd44:	3446b03a 	or	r3,r6,r17
    dd48:	18001526 	beq	r3,zero,dda0 <__divdf3+0x2a8>
    dd4c:	88011b26 	beq	r17,zero,e1bc <__divdf3+0x6c4>
    dd50:	8809883a 	mov	r4,r17
    dd54:	d9800315 	stw	r6,12(sp)
    dd58:	da400115 	stw	r9,4(sp)
    dd5c:	000f8500 	call	f850 <__clzsi2>
    dd60:	d9800317 	ldw	r6,12(sp)
    dd64:	da400117 	ldw	r9,4(sp)
    dd68:	113ffd44 	addi	r4,r2,-11
    dd6c:	00c00704 	movi	r3,28
    dd70:	19010e16 	blt	r3,r4,e1ac <__divdf3+0x6b4>
    dd74:	00c00744 	movi	r3,29
    dd78:	123ffe04 	addi	r8,r2,-8
    dd7c:	1907c83a 	sub	r3,r3,r4
    dd80:	8a22983a 	sll	r17,r17,r8
    dd84:	30c6d83a 	srl	r3,r6,r3
    dd88:	3210983a 	sll	r8,r6,r8
    dd8c:	1c62b03a 	or	r17,r3,r17
    dd90:	1080fcc4 	addi	r2,r2,1011
    dd94:	0085c83a 	sub	r2,zero,r2
    dd98:	000f883a 	mov	r7,zero
    dd9c:	003f8606 	br	dbb8 <__alt_data_end+0xff00dbb8>
    dda0:	0023883a 	mov	r17,zero
    dda4:	0011883a 	mov	r8,zero
    dda8:	01c00044 	movi	r7,1
    ddac:	003f8206 	br	dbb8 <__alt_data_end+0xff00dbb8>
    ddb0:	01c000c4 	movi	r7,3
    ddb4:	003f8006 	br	dbb8 <__alt_data_end+0xff00dbb8>
    ddb8:	04c00104 	movi	r19,4
    ddbc:	0021883a 	mov	r16,zero
    ddc0:	0025883a 	mov	r18,zero
    ddc4:	02400044 	movi	r9,1
    ddc8:	003f6906 	br	db70 <__alt_data_end+0xff00db70>
    ddcc:	04c00304 	movi	r19,12
    ddd0:	024000c4 	movi	r9,3
    ddd4:	003f6606 	br	db70 <__alt_data_end+0xff00db70>
    ddd8:	01400434 	movhi	r5,16
    dddc:	0007883a 	mov	r3,zero
    dde0:	297fffc4 	addi	r5,r5,-1
    dde4:	04bfffc4 	movi	r18,-1
    dde8:	0081ffc4 	movi	r2,2047
    ddec:	003fa106 	br	dc74 <__alt_data_end+0xff00dc74>
    ddf0:	00c00044 	movi	r3,1
    ddf4:	1887c83a 	sub	r3,r3,r2
    ddf8:	01000e04 	movi	r4,56
    ddfc:	20c1210e 	bge	r4,r3,e284 <__divdf3+0x78c>
    de00:	98c0004c 	andi	r3,r19,1
    de04:	0005883a 	mov	r2,zero
    de08:	000b883a 	mov	r5,zero
    de0c:	0025883a 	mov	r18,zero
    de10:	003f9806 	br	dc74 <__alt_data_end+0xff00dc74>
    de14:	8c00fd36 	bltu	r17,r16,e20c <__divdf3+0x714>
    de18:	8440fb26 	beq	r16,r17,e208 <__divdf3+0x710>
    de1c:	8007883a 	mov	r3,r16
    de20:	ad7fffc4 	addi	r21,r21,-1
    de24:	0021883a 	mov	r16,zero
    de28:	4004d63a 	srli	r2,r8,24
    de2c:	8822923a 	slli	r17,r17,8
    de30:	1809883a 	mov	r4,r3
    de34:	402c923a 	slli	r22,r8,8
    de38:	88b8b03a 	or	fp,r17,r2
    de3c:	e028d43a 	srli	r20,fp,16
    de40:	d8c00015 	stw	r3,0(sp)
    de44:	e5ffffcc 	andi	r23,fp,65535
    de48:	a00b883a 	mov	r5,r20
    de4c:	00030640 	call	3064 <__udivsi3>
    de50:	d8c00017 	ldw	r3,0(sp)
    de54:	a00b883a 	mov	r5,r20
    de58:	d8800315 	stw	r2,12(sp)
    de5c:	1809883a 	mov	r4,r3
    de60:	00030c80 	call	30c8 <__umodsi3>
    de64:	d9800317 	ldw	r6,12(sp)
    de68:	1006943a 	slli	r3,r2,16
    de6c:	9004d43a 	srli	r2,r18,16
    de70:	b9a3383a 	mul	r17,r23,r6
    de74:	10c4b03a 	or	r2,r2,r3
    de78:	1440062e 	bgeu	r2,r17,de94 <__divdf3+0x39c>
    de7c:	1705883a 	add	r2,r2,fp
    de80:	30ffffc4 	addi	r3,r6,-1
    de84:	1700ee36 	bltu	r2,fp,e240 <__divdf3+0x748>
    de88:	1440ed2e 	bgeu	r2,r17,e240 <__divdf3+0x748>
    de8c:	31bfff84 	addi	r6,r6,-2
    de90:	1705883a 	add	r2,r2,fp
    de94:	1463c83a 	sub	r17,r2,r17
    de98:	a00b883a 	mov	r5,r20
    de9c:	8809883a 	mov	r4,r17
    dea0:	d9800315 	stw	r6,12(sp)
    dea4:	00030640 	call	3064 <__udivsi3>
    dea8:	a00b883a 	mov	r5,r20
    deac:	8809883a 	mov	r4,r17
    deb0:	d8800215 	stw	r2,8(sp)
    deb4:	00030c80 	call	30c8 <__umodsi3>
    deb8:	d9c00217 	ldw	r7,8(sp)
    debc:	1004943a 	slli	r2,r2,16
    dec0:	94bfffcc 	andi	r18,r18,65535
    dec4:	b9d1383a 	mul	r8,r23,r7
    dec8:	90a4b03a 	or	r18,r18,r2
    decc:	d9800317 	ldw	r6,12(sp)
    ded0:	9200062e 	bgeu	r18,r8,deec <__divdf3+0x3f4>
    ded4:	9725883a 	add	r18,r18,fp
    ded8:	38bfffc4 	addi	r2,r7,-1
    dedc:	9700d636 	bltu	r18,fp,e238 <__divdf3+0x740>
    dee0:	9200d52e 	bgeu	r18,r8,e238 <__divdf3+0x740>
    dee4:	39ffff84 	addi	r7,r7,-2
    dee8:	9725883a 	add	r18,r18,fp
    deec:	3004943a 	slli	r2,r6,16
    def0:	b012d43a 	srli	r9,r22,16
    def4:	b1bfffcc 	andi	r6,r22,65535
    def8:	11e2b03a 	or	r17,r2,r7
    defc:	8806d43a 	srli	r3,r17,16
    df00:	893fffcc 	andi	r4,r17,65535
    df04:	218b383a 	mul	r5,r4,r6
    df08:	30c5383a 	mul	r2,r6,r3
    df0c:	2249383a 	mul	r4,r4,r9
    df10:	280ed43a 	srli	r7,r5,16
    df14:	9225c83a 	sub	r18,r18,r8
    df18:	2089883a 	add	r4,r4,r2
    df1c:	3909883a 	add	r4,r7,r4
    df20:	1a47383a 	mul	r3,r3,r9
    df24:	2080022e 	bgeu	r4,r2,df30 <__divdf3+0x438>
    df28:	00800074 	movhi	r2,1
    df2c:	1887883a 	add	r3,r3,r2
    df30:	2004d43a 	srli	r2,r4,16
    df34:	2008943a 	slli	r4,r4,16
    df38:	297fffcc 	andi	r5,r5,65535
    df3c:	10c7883a 	add	r3,r2,r3
    df40:	2149883a 	add	r4,r4,r5
    df44:	90c0a536 	bltu	r18,r3,e1dc <__divdf3+0x6e4>
    df48:	90c0bf26 	beq	r18,r3,e248 <__divdf3+0x750>
    df4c:	90c7c83a 	sub	r3,r18,r3
    df50:	810fc83a 	sub	r7,r16,r4
    df54:	81e5803a 	cmpltu	r18,r16,r7
    df58:	1ca5c83a 	sub	r18,r3,r18
    df5c:	e480c126 	beq	fp,r18,e264 <__divdf3+0x76c>
    df60:	a00b883a 	mov	r5,r20
    df64:	9009883a 	mov	r4,r18
    df68:	d9800315 	stw	r6,12(sp)
    df6c:	d9c00215 	stw	r7,8(sp)
    df70:	da400115 	stw	r9,4(sp)
    df74:	00030640 	call	3064 <__udivsi3>
    df78:	a00b883a 	mov	r5,r20
    df7c:	9009883a 	mov	r4,r18
    df80:	d8800015 	stw	r2,0(sp)
    df84:	00030c80 	call	30c8 <__umodsi3>
    df88:	d9c00217 	ldw	r7,8(sp)
    df8c:	da000017 	ldw	r8,0(sp)
    df90:	1006943a 	slli	r3,r2,16
    df94:	3804d43a 	srli	r2,r7,16
    df98:	ba21383a 	mul	r16,r23,r8
    df9c:	d9800317 	ldw	r6,12(sp)
    dfa0:	10c4b03a 	or	r2,r2,r3
    dfa4:	da400117 	ldw	r9,4(sp)
    dfa8:	1400062e 	bgeu	r2,r16,dfc4 <__divdf3+0x4cc>
    dfac:	1705883a 	add	r2,r2,fp
    dfb0:	40ffffc4 	addi	r3,r8,-1
    dfb4:	1700ad36 	bltu	r2,fp,e26c <__divdf3+0x774>
    dfb8:	1400ac2e 	bgeu	r2,r16,e26c <__divdf3+0x774>
    dfbc:	423fff84 	addi	r8,r8,-2
    dfc0:	1705883a 	add	r2,r2,fp
    dfc4:	1421c83a 	sub	r16,r2,r16
    dfc8:	a00b883a 	mov	r5,r20
    dfcc:	8009883a 	mov	r4,r16
    dfd0:	d9800315 	stw	r6,12(sp)
    dfd4:	d9c00215 	stw	r7,8(sp)
    dfd8:	da000015 	stw	r8,0(sp)
    dfdc:	da400115 	stw	r9,4(sp)
    dfe0:	00030640 	call	3064 <__udivsi3>
    dfe4:	8009883a 	mov	r4,r16
    dfe8:	a00b883a 	mov	r5,r20
    dfec:	1025883a 	mov	r18,r2
    dff0:	00030c80 	call	30c8 <__umodsi3>
    dff4:	d9c00217 	ldw	r7,8(sp)
    dff8:	1004943a 	slli	r2,r2,16
    dffc:	bcaf383a 	mul	r23,r23,r18
    e000:	393fffcc 	andi	r4,r7,65535
    e004:	2088b03a 	or	r4,r4,r2
    e008:	d9800317 	ldw	r6,12(sp)
    e00c:	da000017 	ldw	r8,0(sp)
    e010:	da400117 	ldw	r9,4(sp)
    e014:	25c0062e 	bgeu	r4,r23,e030 <__divdf3+0x538>
    e018:	2709883a 	add	r4,r4,fp
    e01c:	90bfffc4 	addi	r2,r18,-1
    e020:	27009436 	bltu	r4,fp,e274 <__divdf3+0x77c>
    e024:	25c0932e 	bgeu	r4,r23,e274 <__divdf3+0x77c>
    e028:	94bfff84 	addi	r18,r18,-2
    e02c:	2709883a 	add	r4,r4,fp
    e030:	4004943a 	slli	r2,r8,16
    e034:	25efc83a 	sub	r23,r4,r23
    e038:	1490b03a 	or	r8,r2,r18
    e03c:	4008d43a 	srli	r4,r8,16
    e040:	40ffffcc 	andi	r3,r8,65535
    e044:	30c5383a 	mul	r2,r6,r3
    e048:	1a47383a 	mul	r3,r3,r9
    e04c:	310d383a 	mul	r6,r6,r4
    e050:	100ad43a 	srli	r5,r2,16
    e054:	4913383a 	mul	r9,r9,r4
    e058:	1987883a 	add	r3,r3,r6
    e05c:	28c7883a 	add	r3,r5,r3
    e060:	1980022e 	bgeu	r3,r6,e06c <__divdf3+0x574>
    e064:	01000074 	movhi	r4,1
    e068:	4913883a 	add	r9,r9,r4
    e06c:	1808d43a 	srli	r4,r3,16
    e070:	1806943a 	slli	r3,r3,16
    e074:	10bfffcc 	andi	r2,r2,65535
    e078:	2253883a 	add	r9,r4,r9
    e07c:	1887883a 	add	r3,r3,r2
    e080:	ba403836 	bltu	r23,r9,e164 <__divdf3+0x66c>
    e084:	ba403626 	beq	r23,r9,e160 <__divdf3+0x668>
    e088:	42000054 	ori	r8,r8,1
    e08c:	a880ffc4 	addi	r2,r21,1023
    e090:	00bf570e 	bge	zero,r2,ddf0 <__alt_data_end+0xff00ddf0>
    e094:	40c001cc 	andi	r3,r8,7
    e098:	18000726 	beq	r3,zero,e0b8 <__divdf3+0x5c0>
    e09c:	40c003cc 	andi	r3,r8,15
    e0a0:	01000104 	movi	r4,4
    e0a4:	19000426 	beq	r3,r4,e0b8 <__divdf3+0x5c0>
    e0a8:	4107883a 	add	r3,r8,r4
    e0ac:	1a11803a 	cmpltu	r8,r3,r8
    e0b0:	8a23883a 	add	r17,r17,r8
    e0b4:	1811883a 	mov	r8,r3
    e0b8:	88c0402c 	andhi	r3,r17,256
    e0bc:	18000426 	beq	r3,zero,e0d0 <__divdf3+0x5d8>
    e0c0:	00ffc034 	movhi	r3,65280
    e0c4:	18ffffc4 	addi	r3,r3,-1
    e0c8:	a8810004 	addi	r2,r21,1024
    e0cc:	88e2703a 	and	r17,r17,r3
    e0d0:	00c1ff84 	movi	r3,2046
    e0d4:	18bee316 	blt	r3,r2,dc64 <__alt_data_end+0xff00dc64>
    e0d8:	8824977a 	slli	r18,r17,29
    e0dc:	4010d0fa 	srli	r8,r8,3
    e0e0:	8822927a 	slli	r17,r17,9
    e0e4:	1081ffcc 	andi	r2,r2,2047
    e0e8:	9224b03a 	or	r18,r18,r8
    e0ec:	880ad33a 	srli	r5,r17,12
    e0f0:	98c0004c 	andi	r3,r19,1
    e0f4:	003edf06 	br	dc74 <__alt_data_end+0xff00dc74>
    e0f8:	8080022c 	andhi	r2,r16,8
    e0fc:	10001226 	beq	r2,zero,e148 <__divdf3+0x650>
    e100:	8880022c 	andhi	r2,r17,8
    e104:	1000101e 	bne	r2,zero,e148 <__divdf3+0x650>
    e108:	00800434 	movhi	r2,16
    e10c:	89400234 	orhi	r5,r17,8
    e110:	10bfffc4 	addi	r2,r2,-1
    e114:	b007883a 	mov	r3,r22
    e118:	288a703a 	and	r5,r5,r2
    e11c:	4025883a 	mov	r18,r8
    e120:	003f3106 	br	dde8 <__alt_data_end+0xff00dde8>
    e124:	008000c4 	movi	r2,3
    e128:	3880a626 	beq	r7,r2,e3c4 <__divdf3+0x8cc>
    e12c:	00800044 	movi	r2,1
    e130:	3880521e 	bne	r7,r2,e27c <__divdf3+0x784>
    e134:	b807883a 	mov	r3,r23
    e138:	0005883a 	mov	r2,zero
    e13c:	000b883a 	mov	r5,zero
    e140:	0025883a 	mov	r18,zero
    e144:	003ecb06 	br	dc74 <__alt_data_end+0xff00dc74>
    e148:	00800434 	movhi	r2,16
    e14c:	81400234 	orhi	r5,r16,8
    e150:	10bfffc4 	addi	r2,r2,-1
    e154:	a007883a 	mov	r3,r20
    e158:	288a703a 	and	r5,r5,r2
    e15c:	003f2206 	br	dde8 <__alt_data_end+0xff00dde8>
    e160:	183fca26 	beq	r3,zero,e08c <__alt_data_end+0xff00e08c>
    e164:	e5ef883a 	add	r23,fp,r23
    e168:	40bfffc4 	addi	r2,r8,-1
    e16c:	bf00392e 	bgeu	r23,fp,e254 <__divdf3+0x75c>
    e170:	1011883a 	mov	r8,r2
    e174:	ba7fc41e 	bne	r23,r9,e088 <__alt_data_end+0xff00e088>
    e178:	b0ffc31e 	bne	r22,r3,e088 <__alt_data_end+0xff00e088>
    e17c:	003fc306 	br	e08c <__alt_data_end+0xff00e08c>
    e180:	143ff604 	addi	r16,r2,-40
    e184:	9c20983a 	sll	r16,r19,r16
    e188:	0025883a 	mov	r18,zero
    e18c:	003ee206 	br	dd18 <__alt_data_end+0xff00dd18>
    e190:	d9800315 	stw	r6,12(sp)
    e194:	d9c00215 	stw	r7,8(sp)
    e198:	000f8500 	call	f850 <__clzsi2>
    e19c:	10800804 	addi	r2,r2,32
    e1a0:	d9c00217 	ldw	r7,8(sp)
    e1a4:	d9800317 	ldw	r6,12(sp)
    e1a8:	003ed106 	br	dcf0 <__alt_data_end+0xff00dcf0>
    e1ac:	147ff604 	addi	r17,r2,-40
    e1b0:	3462983a 	sll	r17,r6,r17
    e1b4:	0011883a 	mov	r8,zero
    e1b8:	003ef506 	br	dd90 <__alt_data_end+0xff00dd90>
    e1bc:	3009883a 	mov	r4,r6
    e1c0:	d9800315 	stw	r6,12(sp)
    e1c4:	da400115 	stw	r9,4(sp)
    e1c8:	000f8500 	call	f850 <__clzsi2>
    e1cc:	10800804 	addi	r2,r2,32
    e1d0:	da400117 	ldw	r9,4(sp)
    e1d4:	d9800317 	ldw	r6,12(sp)
    e1d8:	003ee306 	br	dd68 <__alt_data_end+0xff00dd68>
    e1dc:	85a1883a 	add	r16,r16,r22
    e1e0:	8585803a 	cmpltu	r2,r16,r22
    e1e4:	1705883a 	add	r2,r2,fp
    e1e8:	14a5883a 	add	r18,r2,r18
    e1ec:	88bfffc4 	addi	r2,r17,-1
    e1f0:	e4800c2e 	bgeu	fp,r18,e224 <__divdf3+0x72c>
    e1f4:	90c03e36 	bltu	r18,r3,e2f0 <__divdf3+0x7f8>
    e1f8:	1c806926 	beq	r3,r18,e3a0 <__divdf3+0x8a8>
    e1fc:	90c7c83a 	sub	r3,r18,r3
    e200:	1023883a 	mov	r17,r2
    e204:	003f5206 	br	df50 <__alt_data_end+0xff00df50>
    e208:	923f0436 	bltu	r18,r8,de1c <__alt_data_end+0xff00de1c>
    e20c:	800897fa 	slli	r4,r16,31
    e210:	9004d07a 	srli	r2,r18,1
    e214:	8006d07a 	srli	r3,r16,1
    e218:	902097fa 	slli	r16,r18,31
    e21c:	20a4b03a 	or	r18,r4,r2
    e220:	003f0106 	br	de28 <__alt_data_end+0xff00de28>
    e224:	e4bff51e 	bne	fp,r18,e1fc <__alt_data_end+0xff00e1fc>
    e228:	85bff22e 	bgeu	r16,r22,e1f4 <__alt_data_end+0xff00e1f4>
    e22c:	e0c7c83a 	sub	r3,fp,r3
    e230:	1023883a 	mov	r17,r2
    e234:	003f4606 	br	df50 <__alt_data_end+0xff00df50>
    e238:	100f883a 	mov	r7,r2
    e23c:	003f2b06 	br	deec <__alt_data_end+0xff00deec>
    e240:	180d883a 	mov	r6,r3
    e244:	003f1306 	br	de94 <__alt_data_end+0xff00de94>
    e248:	813fe436 	bltu	r16,r4,e1dc <__alt_data_end+0xff00e1dc>
    e24c:	0007883a 	mov	r3,zero
    e250:	003f3f06 	br	df50 <__alt_data_end+0xff00df50>
    e254:	ba402c36 	bltu	r23,r9,e308 <__divdf3+0x810>
    e258:	4dc05426 	beq	r9,r23,e3ac <__divdf3+0x8b4>
    e25c:	1011883a 	mov	r8,r2
    e260:	003f8906 	br	e088 <__alt_data_end+0xff00e088>
    e264:	023fffc4 	movi	r8,-1
    e268:	003f8806 	br	e08c <__alt_data_end+0xff00e08c>
    e26c:	1811883a 	mov	r8,r3
    e270:	003f5406 	br	dfc4 <__alt_data_end+0xff00dfc4>
    e274:	1025883a 	mov	r18,r2
    e278:	003f6d06 	br	e030 <__alt_data_end+0xff00e030>
    e27c:	b827883a 	mov	r19,r23
    e280:	003f8206 	br	e08c <__alt_data_end+0xff00e08c>
    e284:	010007c4 	movi	r4,31
    e288:	20c02616 	blt	r4,r3,e324 <__divdf3+0x82c>
    e28c:	00800804 	movi	r2,32
    e290:	10c5c83a 	sub	r2,r2,r3
    e294:	888a983a 	sll	r5,r17,r2
    e298:	40c8d83a 	srl	r4,r8,r3
    e29c:	4084983a 	sll	r2,r8,r2
    e2a0:	88e2d83a 	srl	r17,r17,r3
    e2a4:	2906b03a 	or	r3,r5,r4
    e2a8:	1004c03a 	cmpne	r2,r2,zero
    e2ac:	1886b03a 	or	r3,r3,r2
    e2b0:	188001cc 	andi	r2,r3,7
    e2b4:	10000726 	beq	r2,zero,e2d4 <__divdf3+0x7dc>
    e2b8:	188003cc 	andi	r2,r3,15
    e2bc:	01000104 	movi	r4,4
    e2c0:	11000426 	beq	r2,r4,e2d4 <__divdf3+0x7dc>
    e2c4:	1805883a 	mov	r2,r3
    e2c8:	10c00104 	addi	r3,r2,4
    e2cc:	1885803a 	cmpltu	r2,r3,r2
    e2d0:	88a3883a 	add	r17,r17,r2
    e2d4:	8880202c 	andhi	r2,r17,128
    e2d8:	10002726 	beq	r2,zero,e378 <__divdf3+0x880>
    e2dc:	98c0004c 	andi	r3,r19,1
    e2e0:	00800044 	movi	r2,1
    e2e4:	000b883a 	mov	r5,zero
    e2e8:	0025883a 	mov	r18,zero
    e2ec:	003e6106 	br	dc74 <__alt_data_end+0xff00dc74>
    e2f0:	85a1883a 	add	r16,r16,r22
    e2f4:	8585803a 	cmpltu	r2,r16,r22
    e2f8:	1705883a 	add	r2,r2,fp
    e2fc:	14a5883a 	add	r18,r2,r18
    e300:	8c7fff84 	addi	r17,r17,-2
    e304:	003f1106 	br	df4c <__alt_data_end+0xff00df4c>
    e308:	b589883a 	add	r4,r22,r22
    e30c:	25ad803a 	cmpltu	r22,r4,r22
    e310:	b739883a 	add	fp,r22,fp
    e314:	40bfff84 	addi	r2,r8,-2
    e318:	bf2f883a 	add	r23,r23,fp
    e31c:	202d883a 	mov	r22,r4
    e320:	003f9306 	br	e170 <__alt_data_end+0xff00e170>
    e324:	013ff844 	movi	r4,-31
    e328:	2085c83a 	sub	r2,r4,r2
    e32c:	8888d83a 	srl	r4,r17,r2
    e330:	00800804 	movi	r2,32
    e334:	18802126 	beq	r3,r2,e3bc <__divdf3+0x8c4>
    e338:	00801004 	movi	r2,64
    e33c:	10c5c83a 	sub	r2,r2,r3
    e340:	8884983a 	sll	r2,r17,r2
    e344:	1204b03a 	or	r2,r2,r8
    e348:	1004c03a 	cmpne	r2,r2,zero
    e34c:	2084b03a 	or	r2,r4,r2
    e350:	144001cc 	andi	r17,r2,7
    e354:	88000d1e 	bne	r17,zero,e38c <__divdf3+0x894>
    e358:	000b883a 	mov	r5,zero
    e35c:	1024d0fa 	srli	r18,r2,3
    e360:	98c0004c 	andi	r3,r19,1
    e364:	0005883a 	mov	r2,zero
    e368:	9464b03a 	or	r18,r18,r17
    e36c:	003e4106 	br	dc74 <__alt_data_end+0xff00dc74>
    e370:	1007883a 	mov	r3,r2
    e374:	0023883a 	mov	r17,zero
    e378:	880a927a 	slli	r5,r17,9
    e37c:	1805883a 	mov	r2,r3
    e380:	8822977a 	slli	r17,r17,29
    e384:	280ad33a 	srli	r5,r5,12
    e388:	003ff406 	br	e35c <__alt_data_end+0xff00e35c>
    e38c:	10c003cc 	andi	r3,r2,15
    e390:	01000104 	movi	r4,4
    e394:	193ff626 	beq	r3,r4,e370 <__alt_data_end+0xff00e370>
    e398:	0023883a 	mov	r17,zero
    e39c:	003fca06 	br	e2c8 <__alt_data_end+0xff00e2c8>
    e3a0:	813fd336 	bltu	r16,r4,e2f0 <__alt_data_end+0xff00e2f0>
    e3a4:	1023883a 	mov	r17,r2
    e3a8:	003fa806 	br	e24c <__alt_data_end+0xff00e24c>
    e3ac:	b0ffd636 	bltu	r22,r3,e308 <__alt_data_end+0xff00e308>
    e3b0:	1011883a 	mov	r8,r2
    e3b4:	b0ff341e 	bne	r22,r3,e088 <__alt_data_end+0xff00e088>
    e3b8:	003f3406 	br	e08c <__alt_data_end+0xff00e08c>
    e3bc:	0005883a 	mov	r2,zero
    e3c0:	003fe006 	br	e344 <__alt_data_end+0xff00e344>
    e3c4:	00800434 	movhi	r2,16
    e3c8:	89400234 	orhi	r5,r17,8
    e3cc:	10bfffc4 	addi	r2,r2,-1
    e3d0:	b807883a 	mov	r3,r23
    e3d4:	288a703a 	and	r5,r5,r2
    e3d8:	4025883a 	mov	r18,r8
    e3dc:	003e8206 	br	dde8 <__alt_data_end+0xff00dde8>

0000e3e0 <__eqdf2>:
    e3e0:	2804d53a 	srli	r2,r5,20
    e3e4:	3806d53a 	srli	r3,r7,20
    e3e8:	02000434 	movhi	r8,16
    e3ec:	423fffc4 	addi	r8,r8,-1
    e3f0:	1081ffcc 	andi	r2,r2,2047
    e3f4:	0281ffc4 	movi	r10,2047
    e3f8:	2a12703a 	and	r9,r5,r8
    e3fc:	18c1ffcc 	andi	r3,r3,2047
    e400:	3a10703a 	and	r8,r7,r8
    e404:	280ad7fa 	srli	r5,r5,31
    e408:	380ed7fa 	srli	r7,r7,31
    e40c:	12801026 	beq	r2,r10,e450 <__eqdf2+0x70>
    e410:	0281ffc4 	movi	r10,2047
    e414:	1a800a26 	beq	r3,r10,e440 <__eqdf2+0x60>
    e418:	10c00226 	beq	r2,r3,e424 <__eqdf2+0x44>
    e41c:	00800044 	movi	r2,1
    e420:	f800283a 	ret
    e424:	4a3ffd1e 	bne	r9,r8,e41c <__alt_data_end+0xff00e41c>
    e428:	21bffc1e 	bne	r4,r6,e41c <__alt_data_end+0xff00e41c>
    e42c:	29c00c26 	beq	r5,r7,e460 <__eqdf2+0x80>
    e430:	103ffa1e 	bne	r2,zero,e41c <__alt_data_end+0xff00e41c>
    e434:	2244b03a 	or	r2,r4,r9
    e438:	1004c03a 	cmpne	r2,r2,zero
    e43c:	f800283a 	ret
    e440:	3214b03a 	or	r10,r6,r8
    e444:	503ff426 	beq	r10,zero,e418 <__alt_data_end+0xff00e418>
    e448:	00800044 	movi	r2,1
    e44c:	f800283a 	ret
    e450:	2254b03a 	or	r10,r4,r9
    e454:	503fee26 	beq	r10,zero,e410 <__alt_data_end+0xff00e410>
    e458:	00800044 	movi	r2,1
    e45c:	f800283a 	ret
    e460:	0005883a 	mov	r2,zero
    e464:	f800283a 	ret

0000e468 <__gedf2>:
    e468:	2804d53a 	srli	r2,r5,20
    e46c:	3806d53a 	srli	r3,r7,20
    e470:	02000434 	movhi	r8,16
    e474:	423fffc4 	addi	r8,r8,-1
    e478:	1081ffcc 	andi	r2,r2,2047
    e47c:	0241ffc4 	movi	r9,2047
    e480:	2a14703a 	and	r10,r5,r8
    e484:	18c1ffcc 	andi	r3,r3,2047
    e488:	3a10703a 	and	r8,r7,r8
    e48c:	280ad7fa 	srli	r5,r5,31
    e490:	380ed7fa 	srli	r7,r7,31
    e494:	12401d26 	beq	r2,r9,e50c <__gedf2+0xa4>
    e498:	0241ffc4 	movi	r9,2047
    e49c:	1a401226 	beq	r3,r9,e4e8 <__gedf2+0x80>
    e4a0:	1000081e 	bne	r2,zero,e4c4 <__gedf2+0x5c>
    e4a4:	2296b03a 	or	r11,r4,r10
    e4a8:	5813003a 	cmpeq	r9,r11,zero
    e4ac:	1800091e 	bne	r3,zero,e4d4 <__gedf2+0x6c>
    e4b0:	3218b03a 	or	r12,r6,r8
    e4b4:	6000071e 	bne	r12,zero,e4d4 <__gedf2+0x6c>
    e4b8:	0005883a 	mov	r2,zero
    e4bc:	5800101e 	bne	r11,zero,e500 <__gedf2+0x98>
    e4c0:	f800283a 	ret
    e4c4:	18000c1e 	bne	r3,zero,e4f8 <__gedf2+0x90>
    e4c8:	3212b03a 	or	r9,r6,r8
    e4cc:	48000c26 	beq	r9,zero,e500 <__gedf2+0x98>
    e4d0:	0013883a 	mov	r9,zero
    e4d4:	39c03fcc 	andi	r7,r7,255
    e4d8:	48000826 	beq	r9,zero,e4fc <__gedf2+0x94>
    e4dc:	38000926 	beq	r7,zero,e504 <__gedf2+0x9c>
    e4e0:	00800044 	movi	r2,1
    e4e4:	f800283a 	ret
    e4e8:	3212b03a 	or	r9,r6,r8
    e4ec:	483fec26 	beq	r9,zero,e4a0 <__alt_data_end+0xff00e4a0>
    e4f0:	00bfff84 	movi	r2,-2
    e4f4:	f800283a 	ret
    e4f8:	39c03fcc 	andi	r7,r7,255
    e4fc:	29c00626 	beq	r5,r7,e518 <__gedf2+0xb0>
    e500:	283ff726 	beq	r5,zero,e4e0 <__alt_data_end+0xff00e4e0>
    e504:	00bfffc4 	movi	r2,-1
    e508:	f800283a 	ret
    e50c:	2292b03a 	or	r9,r4,r10
    e510:	483fe126 	beq	r9,zero,e498 <__alt_data_end+0xff00e498>
    e514:	003ff606 	br	e4f0 <__alt_data_end+0xff00e4f0>
    e518:	18bff916 	blt	r3,r2,e500 <__alt_data_end+0xff00e500>
    e51c:	10c00316 	blt	r2,r3,e52c <__gedf2+0xc4>
    e520:	42bff736 	bltu	r8,r10,e500 <__alt_data_end+0xff00e500>
    e524:	52000326 	beq	r10,r8,e534 <__gedf2+0xcc>
    e528:	5200042e 	bgeu	r10,r8,e53c <__gedf2+0xd4>
    e52c:	283fec1e 	bne	r5,zero,e4e0 <__alt_data_end+0xff00e4e0>
    e530:	003ff406 	br	e504 <__alt_data_end+0xff00e504>
    e534:	313ff236 	bltu	r6,r4,e500 <__alt_data_end+0xff00e500>
    e538:	21bffc36 	bltu	r4,r6,e52c <__alt_data_end+0xff00e52c>
    e53c:	0005883a 	mov	r2,zero
    e540:	f800283a 	ret

0000e544 <__ledf2>:
    e544:	2804d53a 	srli	r2,r5,20
    e548:	3810d53a 	srli	r8,r7,20
    e54c:	00c00434 	movhi	r3,16
    e550:	18ffffc4 	addi	r3,r3,-1
    e554:	1081ffcc 	andi	r2,r2,2047
    e558:	0241ffc4 	movi	r9,2047
    e55c:	28d4703a 	and	r10,r5,r3
    e560:	4201ffcc 	andi	r8,r8,2047
    e564:	38c6703a 	and	r3,r7,r3
    e568:	280ad7fa 	srli	r5,r5,31
    e56c:	380ed7fa 	srli	r7,r7,31
    e570:	12401f26 	beq	r2,r9,e5f0 <__ledf2+0xac>
    e574:	0241ffc4 	movi	r9,2047
    e578:	42401426 	beq	r8,r9,e5cc <__ledf2+0x88>
    e57c:	1000091e 	bne	r2,zero,e5a4 <__ledf2+0x60>
    e580:	2296b03a 	or	r11,r4,r10
    e584:	5813003a 	cmpeq	r9,r11,zero
    e588:	29403fcc 	andi	r5,r5,255
    e58c:	40000a1e 	bne	r8,zero,e5b8 <__ledf2+0x74>
    e590:	30d8b03a 	or	r12,r6,r3
    e594:	6000081e 	bne	r12,zero,e5b8 <__ledf2+0x74>
    e598:	0005883a 	mov	r2,zero
    e59c:	5800111e 	bne	r11,zero,e5e4 <__ledf2+0xa0>
    e5a0:	f800283a 	ret
    e5a4:	29403fcc 	andi	r5,r5,255
    e5a8:	40000c1e 	bne	r8,zero,e5dc <__ledf2+0x98>
    e5ac:	30d2b03a 	or	r9,r6,r3
    e5b0:	48000c26 	beq	r9,zero,e5e4 <__ledf2+0xa0>
    e5b4:	0013883a 	mov	r9,zero
    e5b8:	39c03fcc 	andi	r7,r7,255
    e5bc:	48000826 	beq	r9,zero,e5e0 <__ledf2+0x9c>
    e5c0:	38001126 	beq	r7,zero,e608 <__ledf2+0xc4>
    e5c4:	00800044 	movi	r2,1
    e5c8:	f800283a 	ret
    e5cc:	30d2b03a 	or	r9,r6,r3
    e5d0:	483fea26 	beq	r9,zero,e57c <__alt_data_end+0xff00e57c>
    e5d4:	00800084 	movi	r2,2
    e5d8:	f800283a 	ret
    e5dc:	39c03fcc 	andi	r7,r7,255
    e5e0:	39400726 	beq	r7,r5,e600 <__ledf2+0xbc>
    e5e4:	2800081e 	bne	r5,zero,e608 <__ledf2+0xc4>
    e5e8:	00800044 	movi	r2,1
    e5ec:	f800283a 	ret
    e5f0:	2292b03a 	or	r9,r4,r10
    e5f4:	483fdf26 	beq	r9,zero,e574 <__alt_data_end+0xff00e574>
    e5f8:	00800084 	movi	r2,2
    e5fc:	f800283a 	ret
    e600:	4080030e 	bge	r8,r2,e610 <__ledf2+0xcc>
    e604:	383fef26 	beq	r7,zero,e5c4 <__alt_data_end+0xff00e5c4>
    e608:	00bfffc4 	movi	r2,-1
    e60c:	f800283a 	ret
    e610:	123feb16 	blt	r2,r8,e5c0 <__alt_data_end+0xff00e5c0>
    e614:	1abff336 	bltu	r3,r10,e5e4 <__alt_data_end+0xff00e5e4>
    e618:	50c00326 	beq	r10,r3,e628 <__ledf2+0xe4>
    e61c:	50c0042e 	bgeu	r10,r3,e630 <__ledf2+0xec>
    e620:	283fe81e 	bne	r5,zero,e5c4 <__alt_data_end+0xff00e5c4>
    e624:	003ff806 	br	e608 <__alt_data_end+0xff00e608>
    e628:	313fee36 	bltu	r6,r4,e5e4 <__alt_data_end+0xff00e5e4>
    e62c:	21bffc36 	bltu	r4,r6,e620 <__alt_data_end+0xff00e620>
    e630:	0005883a 	mov	r2,zero
    e634:	f800283a 	ret

0000e638 <__muldf3>:
    e638:	defff304 	addi	sp,sp,-52
    e63c:	2804d53a 	srli	r2,r5,20
    e640:	dd800915 	stw	r22,36(sp)
    e644:	282cd7fa 	srli	r22,r5,31
    e648:	dc000315 	stw	r16,12(sp)
    e64c:	04000434 	movhi	r16,16
    e650:	dd400815 	stw	r21,32(sp)
    e654:	dc800515 	stw	r18,20(sp)
    e658:	843fffc4 	addi	r16,r16,-1
    e65c:	dfc00c15 	stw	ra,48(sp)
    e660:	df000b15 	stw	fp,44(sp)
    e664:	ddc00a15 	stw	r23,40(sp)
    e668:	dd000715 	stw	r20,28(sp)
    e66c:	dcc00615 	stw	r19,24(sp)
    e670:	dc400415 	stw	r17,16(sp)
    e674:	1481ffcc 	andi	r18,r2,2047
    e678:	2c20703a 	and	r16,r5,r16
    e67c:	b02b883a 	mov	r21,r22
    e680:	b2403fcc 	andi	r9,r22,255
    e684:	90006026 	beq	r18,zero,e808 <__muldf3+0x1d0>
    e688:	0081ffc4 	movi	r2,2047
    e68c:	2029883a 	mov	r20,r4
    e690:	90803626 	beq	r18,r2,e76c <__muldf3+0x134>
    e694:	80800434 	orhi	r2,r16,16
    e698:	100490fa 	slli	r2,r2,3
    e69c:	2020d77a 	srli	r16,r4,29
    e6a0:	202890fa 	slli	r20,r4,3
    e6a4:	94bf0044 	addi	r18,r18,-1023
    e6a8:	80a0b03a 	or	r16,r16,r2
    e6ac:	0027883a 	mov	r19,zero
    e6b0:	0039883a 	mov	fp,zero
    e6b4:	3804d53a 	srli	r2,r7,20
    e6b8:	382ed7fa 	srli	r23,r7,31
    e6bc:	04400434 	movhi	r17,16
    e6c0:	8c7fffc4 	addi	r17,r17,-1
    e6c4:	1081ffcc 	andi	r2,r2,2047
    e6c8:	3011883a 	mov	r8,r6
    e6cc:	3c62703a 	and	r17,r7,r17
    e6d0:	ba803fcc 	andi	r10,r23,255
    e6d4:	10006d26 	beq	r2,zero,e88c <__muldf3+0x254>
    e6d8:	00c1ffc4 	movi	r3,2047
    e6dc:	10c06526 	beq	r2,r3,e874 <__muldf3+0x23c>
    e6e0:	88c00434 	orhi	r3,r17,16
    e6e4:	180690fa 	slli	r3,r3,3
    e6e8:	3022d77a 	srli	r17,r6,29
    e6ec:	301090fa 	slli	r8,r6,3
    e6f0:	10bf0044 	addi	r2,r2,-1023
    e6f4:	88e2b03a 	or	r17,r17,r3
    e6f8:	000b883a 	mov	r5,zero
    e6fc:	9085883a 	add	r2,r18,r2
    e700:	2cc8b03a 	or	r4,r5,r19
    e704:	00c003c4 	movi	r3,15
    e708:	bdacf03a 	xor	r22,r23,r22
    e70c:	12c00044 	addi	r11,r2,1
    e710:	19009936 	bltu	r3,r4,e978 <__muldf3+0x340>
    e714:	200890ba 	slli	r4,r4,2
    e718:	00c00074 	movhi	r3,1
    e71c:	18f9cb04 	addi	r3,r3,-6356
    e720:	20c9883a 	add	r4,r4,r3
    e724:	20c00017 	ldw	r3,0(r4)
    e728:	1800683a 	jmp	r3
    e72c:	0000e978 	rdprs	zero,zero,933
    e730:	0000e78c 	andi	zero,zero,926
    e734:	0000e78c 	andi	zero,zero,926
    e738:	0000e788 	cmpgei	zero,zero,926
    e73c:	0000e954 	movui	zero,933
    e740:	0000e954 	movui	zero,933
    e744:	0000e93c 	xorhi	zero,zero,932
    e748:	0000e788 	cmpgei	zero,zero,926
    e74c:	0000e954 	movui	zero,933
    e750:	0000e93c 	xorhi	zero,zero,932
    e754:	0000e954 	movui	zero,933
    e758:	0000e788 	cmpgei	zero,zero,926
    e75c:	0000e964 	muli	zero,zero,933
    e760:	0000e964 	muli	zero,zero,933
    e764:	0000e964 	muli	zero,zero,933
    e768:	0000eb80 	call	eb8 <LCD_Write_Command+0x14>
    e76c:	2404b03a 	or	r2,r4,r16
    e770:	10006f1e 	bne	r2,zero,e930 <__muldf3+0x2f8>
    e774:	04c00204 	movi	r19,8
    e778:	0021883a 	mov	r16,zero
    e77c:	0029883a 	mov	r20,zero
    e780:	07000084 	movi	fp,2
    e784:	003fcb06 	br	e6b4 <__alt_data_end+0xff00e6b4>
    e788:	502d883a 	mov	r22,r10
    e78c:	00800084 	movi	r2,2
    e790:	28805726 	beq	r5,r2,e8f0 <__muldf3+0x2b8>
    e794:	008000c4 	movi	r2,3
    e798:	28816626 	beq	r5,r2,ed34 <__muldf3+0x6fc>
    e79c:	00800044 	movi	r2,1
    e7a0:	2881411e 	bne	r5,r2,eca8 <__muldf3+0x670>
    e7a4:	b02b883a 	mov	r21,r22
    e7a8:	0005883a 	mov	r2,zero
    e7ac:	000b883a 	mov	r5,zero
    e7b0:	0029883a 	mov	r20,zero
    e7b4:	1004953a 	slli	r2,r2,20
    e7b8:	a8c03fcc 	andi	r3,r21,255
    e7bc:	04400434 	movhi	r17,16
    e7c0:	8c7fffc4 	addi	r17,r17,-1
    e7c4:	180697fa 	slli	r3,r3,31
    e7c8:	2c4a703a 	and	r5,r5,r17
    e7cc:	288ab03a 	or	r5,r5,r2
    e7d0:	28c6b03a 	or	r3,r5,r3
    e7d4:	a005883a 	mov	r2,r20
    e7d8:	dfc00c17 	ldw	ra,48(sp)
    e7dc:	df000b17 	ldw	fp,44(sp)
    e7e0:	ddc00a17 	ldw	r23,40(sp)
    e7e4:	dd800917 	ldw	r22,36(sp)
    e7e8:	dd400817 	ldw	r21,32(sp)
    e7ec:	dd000717 	ldw	r20,28(sp)
    e7f0:	dcc00617 	ldw	r19,24(sp)
    e7f4:	dc800517 	ldw	r18,20(sp)
    e7f8:	dc400417 	ldw	r17,16(sp)
    e7fc:	dc000317 	ldw	r16,12(sp)
    e800:	dec00d04 	addi	sp,sp,52
    e804:	f800283a 	ret
    e808:	2404b03a 	or	r2,r4,r16
    e80c:	2027883a 	mov	r19,r4
    e810:	10004226 	beq	r2,zero,e91c <__muldf3+0x2e4>
    e814:	8000fc26 	beq	r16,zero,ec08 <__muldf3+0x5d0>
    e818:	8009883a 	mov	r4,r16
    e81c:	d9800215 	stw	r6,8(sp)
    e820:	d9c00015 	stw	r7,0(sp)
    e824:	da400115 	stw	r9,4(sp)
    e828:	000f8500 	call	f850 <__clzsi2>
    e82c:	d9800217 	ldw	r6,8(sp)
    e830:	d9c00017 	ldw	r7,0(sp)
    e834:	da400117 	ldw	r9,4(sp)
    e838:	113ffd44 	addi	r4,r2,-11
    e83c:	00c00704 	movi	r3,28
    e840:	1900ed16 	blt	r3,r4,ebf8 <__muldf3+0x5c0>
    e844:	00c00744 	movi	r3,29
    e848:	147ffe04 	addi	r17,r2,-8
    e84c:	1907c83a 	sub	r3,r3,r4
    e850:	8460983a 	sll	r16,r16,r17
    e854:	98c6d83a 	srl	r3,r19,r3
    e858:	9c68983a 	sll	r20,r19,r17
    e85c:	1c20b03a 	or	r16,r3,r16
    e860:	1080fcc4 	addi	r2,r2,1011
    e864:	00a5c83a 	sub	r18,zero,r2
    e868:	0027883a 	mov	r19,zero
    e86c:	0039883a 	mov	fp,zero
    e870:	003f9006 	br	e6b4 <__alt_data_end+0xff00e6b4>
    e874:	3446b03a 	or	r3,r6,r17
    e878:	1800261e 	bne	r3,zero,e914 <__muldf3+0x2dc>
    e87c:	0023883a 	mov	r17,zero
    e880:	0011883a 	mov	r8,zero
    e884:	01400084 	movi	r5,2
    e888:	003f9c06 	br	e6fc <__alt_data_end+0xff00e6fc>
    e88c:	3446b03a 	or	r3,r6,r17
    e890:	18001c26 	beq	r3,zero,e904 <__muldf3+0x2cc>
    e894:	8800ce26 	beq	r17,zero,ebd0 <__muldf3+0x598>
    e898:	8809883a 	mov	r4,r17
    e89c:	d9800215 	stw	r6,8(sp)
    e8a0:	da400115 	stw	r9,4(sp)
    e8a4:	da800015 	stw	r10,0(sp)
    e8a8:	000f8500 	call	f850 <__clzsi2>
    e8ac:	d9800217 	ldw	r6,8(sp)
    e8b0:	da400117 	ldw	r9,4(sp)
    e8b4:	da800017 	ldw	r10,0(sp)
    e8b8:	113ffd44 	addi	r4,r2,-11
    e8bc:	00c00704 	movi	r3,28
    e8c0:	1900bf16 	blt	r3,r4,ebc0 <__muldf3+0x588>
    e8c4:	00c00744 	movi	r3,29
    e8c8:	123ffe04 	addi	r8,r2,-8
    e8cc:	1907c83a 	sub	r3,r3,r4
    e8d0:	8a22983a 	sll	r17,r17,r8
    e8d4:	30c6d83a 	srl	r3,r6,r3
    e8d8:	3210983a 	sll	r8,r6,r8
    e8dc:	1c62b03a 	or	r17,r3,r17
    e8e0:	1080fcc4 	addi	r2,r2,1011
    e8e4:	0085c83a 	sub	r2,zero,r2
    e8e8:	000b883a 	mov	r5,zero
    e8ec:	003f8306 	br	e6fc <__alt_data_end+0xff00e6fc>
    e8f0:	b02b883a 	mov	r21,r22
    e8f4:	0081ffc4 	movi	r2,2047
    e8f8:	000b883a 	mov	r5,zero
    e8fc:	0029883a 	mov	r20,zero
    e900:	003fac06 	br	e7b4 <__alt_data_end+0xff00e7b4>
    e904:	0023883a 	mov	r17,zero
    e908:	0011883a 	mov	r8,zero
    e90c:	01400044 	movi	r5,1
    e910:	003f7a06 	br	e6fc <__alt_data_end+0xff00e6fc>
    e914:	014000c4 	movi	r5,3
    e918:	003f7806 	br	e6fc <__alt_data_end+0xff00e6fc>
    e91c:	04c00104 	movi	r19,4
    e920:	0021883a 	mov	r16,zero
    e924:	0029883a 	mov	r20,zero
    e928:	07000044 	movi	fp,1
    e92c:	003f6106 	br	e6b4 <__alt_data_end+0xff00e6b4>
    e930:	04c00304 	movi	r19,12
    e934:	070000c4 	movi	fp,3
    e938:	003f5e06 	br	e6b4 <__alt_data_end+0xff00e6b4>
    e93c:	01400434 	movhi	r5,16
    e940:	002b883a 	mov	r21,zero
    e944:	297fffc4 	addi	r5,r5,-1
    e948:	053fffc4 	movi	r20,-1
    e94c:	0081ffc4 	movi	r2,2047
    e950:	003f9806 	br	e7b4 <__alt_data_end+0xff00e7b4>
    e954:	8023883a 	mov	r17,r16
    e958:	a011883a 	mov	r8,r20
    e95c:	e00b883a 	mov	r5,fp
    e960:	003f8a06 	br	e78c <__alt_data_end+0xff00e78c>
    e964:	8023883a 	mov	r17,r16
    e968:	a011883a 	mov	r8,r20
    e96c:	482d883a 	mov	r22,r9
    e970:	e00b883a 	mov	r5,fp
    e974:	003f8506 	br	e78c <__alt_data_end+0xff00e78c>
    e978:	a00ad43a 	srli	r5,r20,16
    e97c:	401ad43a 	srli	r13,r8,16
    e980:	a53fffcc 	andi	r20,r20,65535
    e984:	423fffcc 	andi	r8,r8,65535
    e988:	4519383a 	mul	r12,r8,r20
    e98c:	4147383a 	mul	r3,r8,r5
    e990:	6d09383a 	mul	r4,r13,r20
    e994:	600cd43a 	srli	r6,r12,16
    e998:	2b5d383a 	mul	r14,r5,r13
    e99c:	20c9883a 	add	r4,r4,r3
    e9a0:	310d883a 	add	r6,r6,r4
    e9a4:	30c0022e 	bgeu	r6,r3,e9b0 <__muldf3+0x378>
    e9a8:	00c00074 	movhi	r3,1
    e9ac:	70dd883a 	add	r14,r14,r3
    e9b0:	8826d43a 	srli	r19,r17,16
    e9b4:	8bffffcc 	andi	r15,r17,65535
    e9b8:	7d23383a 	mul	r17,r15,r20
    e9bc:	7949383a 	mul	r4,r15,r5
    e9c0:	9d29383a 	mul	r20,r19,r20
    e9c4:	8814d43a 	srli	r10,r17,16
    e9c8:	3012943a 	slli	r9,r6,16
    e9cc:	a129883a 	add	r20,r20,r4
    e9d0:	633fffcc 	andi	r12,r12,65535
    e9d4:	5515883a 	add	r10,r10,r20
    e9d8:	3006d43a 	srli	r3,r6,16
    e9dc:	4b13883a 	add	r9,r9,r12
    e9e0:	2ccb383a 	mul	r5,r5,r19
    e9e4:	5100022e 	bgeu	r10,r4,e9f0 <__muldf3+0x3b8>
    e9e8:	01000074 	movhi	r4,1
    e9ec:	290b883a 	add	r5,r5,r4
    e9f0:	802ad43a 	srli	r21,r16,16
    e9f4:	843fffcc 	andi	r16,r16,65535
    e9f8:	440d383a 	mul	r6,r8,r16
    e9fc:	4565383a 	mul	r18,r8,r21
    ea00:	8349383a 	mul	r4,r16,r13
    ea04:	500e943a 	slli	r7,r10,16
    ea08:	3010d43a 	srli	r8,r6,16
    ea0c:	5028d43a 	srli	r20,r10,16
    ea10:	2489883a 	add	r4,r4,r18
    ea14:	8abfffcc 	andi	r10,r17,65535
    ea18:	3a95883a 	add	r10,r7,r10
    ea1c:	4119883a 	add	r12,r8,r4
    ea20:	a169883a 	add	r20,r20,r5
    ea24:	1a87883a 	add	r3,r3,r10
    ea28:	6d5b383a 	mul	r13,r13,r21
    ea2c:	6480022e 	bgeu	r12,r18,ea38 <__muldf3+0x400>
    ea30:	01000074 	movhi	r4,1
    ea34:	691b883a 	add	r13,r13,r4
    ea38:	7c25383a 	mul	r18,r15,r16
    ea3c:	7d4b383a 	mul	r5,r15,r21
    ea40:	84cf383a 	mul	r7,r16,r19
    ea44:	901ed43a 	srli	r15,r18,16
    ea48:	6008d43a 	srli	r4,r12,16
    ea4c:	6010943a 	slli	r8,r12,16
    ea50:	394f883a 	add	r7,r7,r5
    ea54:	333fffcc 	andi	r12,r6,65535
    ea58:	79df883a 	add	r15,r15,r7
    ea5c:	235b883a 	add	r13,r4,r13
    ea60:	9d63383a 	mul	r17,r19,r21
    ea64:	4309883a 	add	r4,r8,r12
    ea68:	7940022e 	bgeu	r15,r5,ea74 <__muldf3+0x43c>
    ea6c:	01400074 	movhi	r5,1
    ea70:	8963883a 	add	r17,r17,r5
    ea74:	780a943a 	slli	r5,r15,16
    ea78:	91bfffcc 	andi	r6,r18,65535
    ea7c:	70c7883a 	add	r3,r14,r3
    ea80:	298d883a 	add	r6,r5,r6
    ea84:	1a8f803a 	cmpltu	r7,r3,r10
    ea88:	350b883a 	add	r5,r6,r20
    ea8c:	20c7883a 	add	r3,r4,r3
    ea90:	3955883a 	add	r10,r7,r5
    ea94:	1909803a 	cmpltu	r4,r3,r4
    ea98:	6a91883a 	add	r8,r13,r10
    ea9c:	780cd43a 	srli	r6,r15,16
    eaa0:	2219883a 	add	r12,r4,r8
    eaa4:	2d0b803a 	cmpltu	r5,r5,r20
    eaa8:	51cf803a 	cmpltu	r7,r10,r7
    eaac:	29ceb03a 	or	r7,r5,r7
    eab0:	4351803a 	cmpltu	r8,r8,r13
    eab4:	610b803a 	cmpltu	r5,r12,r4
    eab8:	4148b03a 	or	r4,r8,r5
    eabc:	398f883a 	add	r7,r7,r6
    eac0:	3909883a 	add	r4,r7,r4
    eac4:	1810927a 	slli	r8,r3,9
    eac8:	2449883a 	add	r4,r4,r17
    eacc:	2008927a 	slli	r4,r4,9
    ead0:	6022d5fa 	srli	r17,r12,23
    ead4:	1806d5fa 	srli	r3,r3,23
    ead8:	4252b03a 	or	r9,r8,r9
    eadc:	600a927a 	slli	r5,r12,9
    eae0:	4810c03a 	cmpne	r8,r9,zero
    eae4:	2462b03a 	or	r17,r4,r17
    eae8:	40c6b03a 	or	r3,r8,r3
    eaec:	8900402c 	andhi	r4,r17,256
    eaf0:	1950b03a 	or	r8,r3,r5
    eaf4:	20000726 	beq	r4,zero,eb14 <__muldf3+0x4dc>
    eaf8:	4006d07a 	srli	r3,r8,1
    eafc:	880497fa 	slli	r2,r17,31
    eb00:	4200004c 	andi	r8,r8,1
    eb04:	8822d07a 	srli	r17,r17,1
    eb08:	1a10b03a 	or	r8,r3,r8
    eb0c:	1210b03a 	or	r8,r2,r8
    eb10:	5805883a 	mov	r2,r11
    eb14:	1140ffc4 	addi	r5,r2,1023
    eb18:	0140440e 	bge	zero,r5,ec2c <__muldf3+0x5f4>
    eb1c:	40c001cc 	andi	r3,r8,7
    eb20:	18000726 	beq	r3,zero,eb40 <__muldf3+0x508>
    eb24:	40c003cc 	andi	r3,r8,15
    eb28:	01000104 	movi	r4,4
    eb2c:	19000426 	beq	r3,r4,eb40 <__muldf3+0x508>
    eb30:	4107883a 	add	r3,r8,r4
    eb34:	1a11803a 	cmpltu	r8,r3,r8
    eb38:	8a23883a 	add	r17,r17,r8
    eb3c:	1811883a 	mov	r8,r3
    eb40:	88c0402c 	andhi	r3,r17,256
    eb44:	18000426 	beq	r3,zero,eb58 <__muldf3+0x520>
    eb48:	11410004 	addi	r5,r2,1024
    eb4c:	00bfc034 	movhi	r2,65280
    eb50:	10bfffc4 	addi	r2,r2,-1
    eb54:	88a2703a 	and	r17,r17,r2
    eb58:	0081ff84 	movi	r2,2046
    eb5c:	117f6416 	blt	r2,r5,e8f0 <__alt_data_end+0xff00e8f0>
    eb60:	8828977a 	slli	r20,r17,29
    eb64:	4010d0fa 	srli	r8,r8,3
    eb68:	8822927a 	slli	r17,r17,9
    eb6c:	2881ffcc 	andi	r2,r5,2047
    eb70:	a228b03a 	or	r20,r20,r8
    eb74:	880ad33a 	srli	r5,r17,12
    eb78:	b02b883a 	mov	r21,r22
    eb7c:	003f0d06 	br	e7b4 <__alt_data_end+0xff00e7b4>
    eb80:	8080022c 	andhi	r2,r16,8
    eb84:	10000926 	beq	r2,zero,ebac <__muldf3+0x574>
    eb88:	8880022c 	andhi	r2,r17,8
    eb8c:	1000071e 	bne	r2,zero,ebac <__muldf3+0x574>
    eb90:	00800434 	movhi	r2,16
    eb94:	89400234 	orhi	r5,r17,8
    eb98:	10bfffc4 	addi	r2,r2,-1
    eb9c:	b82b883a 	mov	r21,r23
    eba0:	288a703a 	and	r5,r5,r2
    eba4:	4029883a 	mov	r20,r8
    eba8:	003f6806 	br	e94c <__alt_data_end+0xff00e94c>
    ebac:	00800434 	movhi	r2,16
    ebb0:	81400234 	orhi	r5,r16,8
    ebb4:	10bfffc4 	addi	r2,r2,-1
    ebb8:	288a703a 	and	r5,r5,r2
    ebbc:	003f6306 	br	e94c <__alt_data_end+0xff00e94c>
    ebc0:	147ff604 	addi	r17,r2,-40
    ebc4:	3462983a 	sll	r17,r6,r17
    ebc8:	0011883a 	mov	r8,zero
    ebcc:	003f4406 	br	e8e0 <__alt_data_end+0xff00e8e0>
    ebd0:	3009883a 	mov	r4,r6
    ebd4:	d9800215 	stw	r6,8(sp)
    ebd8:	da400115 	stw	r9,4(sp)
    ebdc:	da800015 	stw	r10,0(sp)
    ebe0:	000f8500 	call	f850 <__clzsi2>
    ebe4:	10800804 	addi	r2,r2,32
    ebe8:	da800017 	ldw	r10,0(sp)
    ebec:	da400117 	ldw	r9,4(sp)
    ebf0:	d9800217 	ldw	r6,8(sp)
    ebf4:	003f3006 	br	e8b8 <__alt_data_end+0xff00e8b8>
    ebf8:	143ff604 	addi	r16,r2,-40
    ebfc:	9c20983a 	sll	r16,r19,r16
    ec00:	0029883a 	mov	r20,zero
    ec04:	003f1606 	br	e860 <__alt_data_end+0xff00e860>
    ec08:	d9800215 	stw	r6,8(sp)
    ec0c:	d9c00015 	stw	r7,0(sp)
    ec10:	da400115 	stw	r9,4(sp)
    ec14:	000f8500 	call	f850 <__clzsi2>
    ec18:	10800804 	addi	r2,r2,32
    ec1c:	da400117 	ldw	r9,4(sp)
    ec20:	d9c00017 	ldw	r7,0(sp)
    ec24:	d9800217 	ldw	r6,8(sp)
    ec28:	003f0306 	br	e838 <__alt_data_end+0xff00e838>
    ec2c:	00c00044 	movi	r3,1
    ec30:	1947c83a 	sub	r3,r3,r5
    ec34:	00800e04 	movi	r2,56
    ec38:	10feda16 	blt	r2,r3,e7a4 <__alt_data_end+0xff00e7a4>
    ec3c:	008007c4 	movi	r2,31
    ec40:	10c01b16 	blt	r2,r3,ecb0 <__muldf3+0x678>
    ec44:	00800804 	movi	r2,32
    ec48:	10c5c83a 	sub	r2,r2,r3
    ec4c:	888a983a 	sll	r5,r17,r2
    ec50:	40c8d83a 	srl	r4,r8,r3
    ec54:	4084983a 	sll	r2,r8,r2
    ec58:	88e2d83a 	srl	r17,r17,r3
    ec5c:	2906b03a 	or	r3,r5,r4
    ec60:	1004c03a 	cmpne	r2,r2,zero
    ec64:	1886b03a 	or	r3,r3,r2
    ec68:	188001cc 	andi	r2,r3,7
    ec6c:	10000726 	beq	r2,zero,ec8c <__muldf3+0x654>
    ec70:	188003cc 	andi	r2,r3,15
    ec74:	01000104 	movi	r4,4
    ec78:	11000426 	beq	r2,r4,ec8c <__muldf3+0x654>
    ec7c:	1805883a 	mov	r2,r3
    ec80:	10c00104 	addi	r3,r2,4
    ec84:	1885803a 	cmpltu	r2,r3,r2
    ec88:	88a3883a 	add	r17,r17,r2
    ec8c:	8880202c 	andhi	r2,r17,128
    ec90:	10001c26 	beq	r2,zero,ed04 <__muldf3+0x6cc>
    ec94:	b02b883a 	mov	r21,r22
    ec98:	00800044 	movi	r2,1
    ec9c:	000b883a 	mov	r5,zero
    eca0:	0029883a 	mov	r20,zero
    eca4:	003ec306 	br	e7b4 <__alt_data_end+0xff00e7b4>
    eca8:	5805883a 	mov	r2,r11
    ecac:	003f9906 	br	eb14 <__alt_data_end+0xff00eb14>
    ecb0:	00bff844 	movi	r2,-31
    ecb4:	1145c83a 	sub	r2,r2,r5
    ecb8:	8888d83a 	srl	r4,r17,r2
    ecbc:	00800804 	movi	r2,32
    ecc0:	18801a26 	beq	r3,r2,ed2c <__muldf3+0x6f4>
    ecc4:	00801004 	movi	r2,64
    ecc8:	10c5c83a 	sub	r2,r2,r3
    eccc:	8884983a 	sll	r2,r17,r2
    ecd0:	1204b03a 	or	r2,r2,r8
    ecd4:	1004c03a 	cmpne	r2,r2,zero
    ecd8:	2084b03a 	or	r2,r4,r2
    ecdc:	144001cc 	andi	r17,r2,7
    ece0:	88000d1e 	bne	r17,zero,ed18 <__muldf3+0x6e0>
    ece4:	000b883a 	mov	r5,zero
    ece8:	1028d0fa 	srli	r20,r2,3
    ecec:	b02b883a 	mov	r21,r22
    ecf0:	0005883a 	mov	r2,zero
    ecf4:	a468b03a 	or	r20,r20,r17
    ecf8:	003eae06 	br	e7b4 <__alt_data_end+0xff00e7b4>
    ecfc:	1007883a 	mov	r3,r2
    ed00:	0023883a 	mov	r17,zero
    ed04:	880a927a 	slli	r5,r17,9
    ed08:	1805883a 	mov	r2,r3
    ed0c:	8822977a 	slli	r17,r17,29
    ed10:	280ad33a 	srli	r5,r5,12
    ed14:	003ff406 	br	ece8 <__alt_data_end+0xff00ece8>
    ed18:	10c003cc 	andi	r3,r2,15
    ed1c:	01000104 	movi	r4,4
    ed20:	193ff626 	beq	r3,r4,ecfc <__alt_data_end+0xff00ecfc>
    ed24:	0023883a 	mov	r17,zero
    ed28:	003fd506 	br	ec80 <__alt_data_end+0xff00ec80>
    ed2c:	0005883a 	mov	r2,zero
    ed30:	003fe706 	br	ecd0 <__alt_data_end+0xff00ecd0>
    ed34:	00800434 	movhi	r2,16
    ed38:	89400234 	orhi	r5,r17,8
    ed3c:	10bfffc4 	addi	r2,r2,-1
    ed40:	b02b883a 	mov	r21,r22
    ed44:	288a703a 	and	r5,r5,r2
    ed48:	4029883a 	mov	r20,r8
    ed4c:	003eff06 	br	e94c <__alt_data_end+0xff00e94c>

0000ed50 <__subdf3>:
    ed50:	02000434 	movhi	r8,16
    ed54:	423fffc4 	addi	r8,r8,-1
    ed58:	defffb04 	addi	sp,sp,-20
    ed5c:	2a14703a 	and	r10,r5,r8
    ed60:	3812d53a 	srli	r9,r7,20
    ed64:	3a10703a 	and	r8,r7,r8
    ed68:	2006d77a 	srli	r3,r4,29
    ed6c:	3004d77a 	srli	r2,r6,29
    ed70:	dc000015 	stw	r16,0(sp)
    ed74:	501490fa 	slli	r10,r10,3
    ed78:	2820d53a 	srli	r16,r5,20
    ed7c:	401090fa 	slli	r8,r8,3
    ed80:	dc800215 	stw	r18,8(sp)
    ed84:	dc400115 	stw	r17,4(sp)
    ed88:	dfc00415 	stw	ra,16(sp)
    ed8c:	202290fa 	slli	r17,r4,3
    ed90:	dcc00315 	stw	r19,12(sp)
    ed94:	4a41ffcc 	andi	r9,r9,2047
    ed98:	0101ffc4 	movi	r4,2047
    ed9c:	2824d7fa 	srli	r18,r5,31
    eda0:	8401ffcc 	andi	r16,r16,2047
    eda4:	50c6b03a 	or	r3,r10,r3
    eda8:	380ed7fa 	srli	r7,r7,31
    edac:	408ab03a 	or	r5,r8,r2
    edb0:	300c90fa 	slli	r6,r6,3
    edb4:	49009626 	beq	r9,r4,f010 <__subdf3+0x2c0>
    edb8:	39c0005c 	xori	r7,r7,1
    edbc:	8245c83a 	sub	r2,r16,r9
    edc0:	3c807426 	beq	r7,r18,ef94 <__subdf3+0x244>
    edc4:	0080af0e 	bge	zero,r2,f084 <__subdf3+0x334>
    edc8:	48002a1e 	bne	r9,zero,ee74 <__subdf3+0x124>
    edcc:	2988b03a 	or	r4,r5,r6
    edd0:	20009a1e 	bne	r4,zero,f03c <__subdf3+0x2ec>
    edd4:	888001cc 	andi	r2,r17,7
    edd8:	10000726 	beq	r2,zero,edf8 <__subdf3+0xa8>
    eddc:	888003cc 	andi	r2,r17,15
    ede0:	01000104 	movi	r4,4
    ede4:	11000426 	beq	r2,r4,edf8 <__subdf3+0xa8>
    ede8:	890b883a 	add	r5,r17,r4
    edec:	2c63803a 	cmpltu	r17,r5,r17
    edf0:	1c47883a 	add	r3,r3,r17
    edf4:	2823883a 	mov	r17,r5
    edf8:	1880202c 	andhi	r2,r3,128
    edfc:	10005926 	beq	r2,zero,ef64 <__subdf3+0x214>
    ee00:	84000044 	addi	r16,r16,1
    ee04:	0081ffc4 	movi	r2,2047
    ee08:	8080be26 	beq	r16,r2,f104 <__subdf3+0x3b4>
    ee0c:	017fe034 	movhi	r5,65408
    ee10:	297fffc4 	addi	r5,r5,-1
    ee14:	1946703a 	and	r3,r3,r5
    ee18:	1804977a 	slli	r2,r3,29
    ee1c:	1806927a 	slli	r3,r3,9
    ee20:	8822d0fa 	srli	r17,r17,3
    ee24:	8401ffcc 	andi	r16,r16,2047
    ee28:	180ad33a 	srli	r5,r3,12
    ee2c:	9100004c 	andi	r4,r18,1
    ee30:	1444b03a 	or	r2,r2,r17
    ee34:	80c1ffcc 	andi	r3,r16,2047
    ee38:	1820953a 	slli	r16,r3,20
    ee3c:	20c03fcc 	andi	r3,r4,255
    ee40:	180897fa 	slli	r4,r3,31
    ee44:	00c00434 	movhi	r3,16
    ee48:	18ffffc4 	addi	r3,r3,-1
    ee4c:	28c6703a 	and	r3,r5,r3
    ee50:	1c06b03a 	or	r3,r3,r16
    ee54:	1906b03a 	or	r3,r3,r4
    ee58:	dfc00417 	ldw	ra,16(sp)
    ee5c:	dcc00317 	ldw	r19,12(sp)
    ee60:	dc800217 	ldw	r18,8(sp)
    ee64:	dc400117 	ldw	r17,4(sp)
    ee68:	dc000017 	ldw	r16,0(sp)
    ee6c:	dec00504 	addi	sp,sp,20
    ee70:	f800283a 	ret
    ee74:	0101ffc4 	movi	r4,2047
    ee78:	813fd626 	beq	r16,r4,edd4 <__alt_data_end+0xff00edd4>
    ee7c:	29402034 	orhi	r5,r5,128
    ee80:	01000e04 	movi	r4,56
    ee84:	2080a316 	blt	r4,r2,f114 <__subdf3+0x3c4>
    ee88:	010007c4 	movi	r4,31
    ee8c:	2080c616 	blt	r4,r2,f1a8 <__subdf3+0x458>
    ee90:	01000804 	movi	r4,32
    ee94:	2089c83a 	sub	r4,r4,r2
    ee98:	2910983a 	sll	r8,r5,r4
    ee9c:	308ed83a 	srl	r7,r6,r2
    eea0:	3108983a 	sll	r4,r6,r4
    eea4:	2884d83a 	srl	r2,r5,r2
    eea8:	41ccb03a 	or	r6,r8,r7
    eeac:	2008c03a 	cmpne	r4,r4,zero
    eeb0:	310cb03a 	or	r6,r6,r4
    eeb4:	898dc83a 	sub	r6,r17,r6
    eeb8:	89a3803a 	cmpltu	r17,r17,r6
    eebc:	1887c83a 	sub	r3,r3,r2
    eec0:	1c47c83a 	sub	r3,r3,r17
    eec4:	3023883a 	mov	r17,r6
    eec8:	1880202c 	andhi	r2,r3,128
    eecc:	10002326 	beq	r2,zero,ef5c <__subdf3+0x20c>
    eed0:	04c02034 	movhi	r19,128
    eed4:	9cffffc4 	addi	r19,r19,-1
    eed8:	1ce6703a 	and	r19,r3,r19
    eedc:	98007a26 	beq	r19,zero,f0c8 <__subdf3+0x378>
    eee0:	9809883a 	mov	r4,r19
    eee4:	000f8500 	call	f850 <__clzsi2>
    eee8:	113ffe04 	addi	r4,r2,-8
    eeec:	00c007c4 	movi	r3,31
    eef0:	19007b16 	blt	r3,r4,f0e0 <__subdf3+0x390>
    eef4:	00800804 	movi	r2,32
    eef8:	1105c83a 	sub	r2,r2,r4
    eefc:	8884d83a 	srl	r2,r17,r2
    ef00:	9906983a 	sll	r3,r19,r4
    ef04:	8922983a 	sll	r17,r17,r4
    ef08:	10c4b03a 	or	r2,r2,r3
    ef0c:	24007816 	blt	r4,r16,f0f0 <__subdf3+0x3a0>
    ef10:	2421c83a 	sub	r16,r4,r16
    ef14:	80c00044 	addi	r3,r16,1
    ef18:	010007c4 	movi	r4,31
    ef1c:	20c09516 	blt	r4,r3,f174 <__subdf3+0x424>
    ef20:	01400804 	movi	r5,32
    ef24:	28cbc83a 	sub	r5,r5,r3
    ef28:	88c8d83a 	srl	r4,r17,r3
    ef2c:	8962983a 	sll	r17,r17,r5
    ef30:	114a983a 	sll	r5,r2,r5
    ef34:	10c6d83a 	srl	r3,r2,r3
    ef38:	8804c03a 	cmpne	r2,r17,zero
    ef3c:	290ab03a 	or	r5,r5,r4
    ef40:	28a2b03a 	or	r17,r5,r2
    ef44:	0021883a 	mov	r16,zero
    ef48:	003fa206 	br	edd4 <__alt_data_end+0xff00edd4>
    ef4c:	2090b03a 	or	r8,r4,r2
    ef50:	40018e26 	beq	r8,zero,f58c <__subdf3+0x83c>
    ef54:	1007883a 	mov	r3,r2
    ef58:	2023883a 	mov	r17,r4
    ef5c:	888001cc 	andi	r2,r17,7
    ef60:	103f9e1e 	bne	r2,zero,eddc <__alt_data_end+0xff00eddc>
    ef64:	1804977a 	slli	r2,r3,29
    ef68:	8822d0fa 	srli	r17,r17,3
    ef6c:	1810d0fa 	srli	r8,r3,3
    ef70:	9100004c 	andi	r4,r18,1
    ef74:	1444b03a 	or	r2,r2,r17
    ef78:	00c1ffc4 	movi	r3,2047
    ef7c:	80c02826 	beq	r16,r3,f020 <__subdf3+0x2d0>
    ef80:	01400434 	movhi	r5,16
    ef84:	297fffc4 	addi	r5,r5,-1
    ef88:	80e0703a 	and	r16,r16,r3
    ef8c:	414a703a 	and	r5,r8,r5
    ef90:	003fa806 	br	ee34 <__alt_data_end+0xff00ee34>
    ef94:	0080630e 	bge	zero,r2,f124 <__subdf3+0x3d4>
    ef98:	48003026 	beq	r9,zero,f05c <__subdf3+0x30c>
    ef9c:	0101ffc4 	movi	r4,2047
    efa0:	813f8c26 	beq	r16,r4,edd4 <__alt_data_end+0xff00edd4>
    efa4:	29402034 	orhi	r5,r5,128
    efa8:	01000e04 	movi	r4,56
    efac:	2080a90e 	bge	r4,r2,f254 <__subdf3+0x504>
    efb0:	298cb03a 	or	r6,r5,r6
    efb4:	3012c03a 	cmpne	r9,r6,zero
    efb8:	0005883a 	mov	r2,zero
    efbc:	4c53883a 	add	r9,r9,r17
    efc0:	4c63803a 	cmpltu	r17,r9,r17
    efc4:	10c7883a 	add	r3,r2,r3
    efc8:	88c7883a 	add	r3,r17,r3
    efcc:	4823883a 	mov	r17,r9
    efd0:	1880202c 	andhi	r2,r3,128
    efd4:	1000d026 	beq	r2,zero,f318 <__subdf3+0x5c8>
    efd8:	84000044 	addi	r16,r16,1
    efdc:	0081ffc4 	movi	r2,2047
    efe0:	8080fe26 	beq	r16,r2,f3dc <__subdf3+0x68c>
    efe4:	00bfe034 	movhi	r2,65408
    efe8:	10bfffc4 	addi	r2,r2,-1
    efec:	1886703a 	and	r3,r3,r2
    eff0:	880ad07a 	srli	r5,r17,1
    eff4:	180497fa 	slli	r2,r3,31
    eff8:	8900004c 	andi	r4,r17,1
    effc:	2922b03a 	or	r17,r5,r4
    f000:	1806d07a 	srli	r3,r3,1
    f004:	1462b03a 	or	r17,r2,r17
    f008:	3825883a 	mov	r18,r7
    f00c:	003f7106 	br	edd4 <__alt_data_end+0xff00edd4>
    f010:	2984b03a 	or	r2,r5,r6
    f014:	103f6826 	beq	r2,zero,edb8 <__alt_data_end+0xff00edb8>
    f018:	39c03fcc 	andi	r7,r7,255
    f01c:	003f6706 	br	edbc <__alt_data_end+0xff00edbc>
    f020:	4086b03a 	or	r3,r8,r2
    f024:	18015226 	beq	r3,zero,f570 <__subdf3+0x820>
    f028:	00c00434 	movhi	r3,16
    f02c:	41400234 	orhi	r5,r8,8
    f030:	18ffffc4 	addi	r3,r3,-1
    f034:	28ca703a 	and	r5,r5,r3
    f038:	003f7e06 	br	ee34 <__alt_data_end+0xff00ee34>
    f03c:	10bfffc4 	addi	r2,r2,-1
    f040:	1000491e 	bne	r2,zero,f168 <__subdf3+0x418>
    f044:	898fc83a 	sub	r7,r17,r6
    f048:	89e3803a 	cmpltu	r17,r17,r7
    f04c:	1947c83a 	sub	r3,r3,r5
    f050:	1c47c83a 	sub	r3,r3,r17
    f054:	3823883a 	mov	r17,r7
    f058:	003f9b06 	br	eec8 <__alt_data_end+0xff00eec8>
    f05c:	2988b03a 	or	r4,r5,r6
    f060:	203f5c26 	beq	r4,zero,edd4 <__alt_data_end+0xff00edd4>
    f064:	10bfffc4 	addi	r2,r2,-1
    f068:	1000931e 	bne	r2,zero,f2b8 <__subdf3+0x568>
    f06c:	898d883a 	add	r6,r17,r6
    f070:	3463803a 	cmpltu	r17,r6,r17
    f074:	1947883a 	add	r3,r3,r5
    f078:	88c7883a 	add	r3,r17,r3
    f07c:	3023883a 	mov	r17,r6
    f080:	003fd306 	br	efd0 <__alt_data_end+0xff00efd0>
    f084:	1000541e 	bne	r2,zero,f1d8 <__subdf3+0x488>
    f088:	80800044 	addi	r2,r16,1
    f08c:	1081ffcc 	andi	r2,r2,2047
    f090:	01000044 	movi	r4,1
    f094:	2080a20e 	bge	r4,r2,f320 <__subdf3+0x5d0>
    f098:	8989c83a 	sub	r4,r17,r6
    f09c:	8905803a 	cmpltu	r2,r17,r4
    f0a0:	1967c83a 	sub	r19,r3,r5
    f0a4:	98a7c83a 	sub	r19,r19,r2
    f0a8:	9880202c 	andhi	r2,r19,128
    f0ac:	10006326 	beq	r2,zero,f23c <__subdf3+0x4ec>
    f0b0:	3463c83a 	sub	r17,r6,r17
    f0b4:	28c7c83a 	sub	r3,r5,r3
    f0b8:	344d803a 	cmpltu	r6,r6,r17
    f0bc:	19a7c83a 	sub	r19,r3,r6
    f0c0:	3825883a 	mov	r18,r7
    f0c4:	983f861e 	bne	r19,zero,eee0 <__alt_data_end+0xff00eee0>
    f0c8:	8809883a 	mov	r4,r17
    f0cc:	000f8500 	call	f850 <__clzsi2>
    f0d0:	10800804 	addi	r2,r2,32
    f0d4:	113ffe04 	addi	r4,r2,-8
    f0d8:	00c007c4 	movi	r3,31
    f0dc:	193f850e 	bge	r3,r4,eef4 <__alt_data_end+0xff00eef4>
    f0e0:	10bff604 	addi	r2,r2,-40
    f0e4:	8884983a 	sll	r2,r17,r2
    f0e8:	0023883a 	mov	r17,zero
    f0ec:	243f880e 	bge	r4,r16,ef10 <__alt_data_end+0xff00ef10>
    f0f0:	00ffe034 	movhi	r3,65408
    f0f4:	18ffffc4 	addi	r3,r3,-1
    f0f8:	8121c83a 	sub	r16,r16,r4
    f0fc:	10c6703a 	and	r3,r2,r3
    f100:	003f3406 	br	edd4 <__alt_data_end+0xff00edd4>
    f104:	9100004c 	andi	r4,r18,1
    f108:	000b883a 	mov	r5,zero
    f10c:	0005883a 	mov	r2,zero
    f110:	003f4806 	br	ee34 <__alt_data_end+0xff00ee34>
    f114:	298cb03a 	or	r6,r5,r6
    f118:	300cc03a 	cmpne	r6,r6,zero
    f11c:	0005883a 	mov	r2,zero
    f120:	003f6406 	br	eeb4 <__alt_data_end+0xff00eeb4>
    f124:	10009a1e 	bne	r2,zero,f390 <__subdf3+0x640>
    f128:	82400044 	addi	r9,r16,1
    f12c:	4881ffcc 	andi	r2,r9,2047
    f130:	02800044 	movi	r10,1
    f134:	5080670e 	bge	r10,r2,f2d4 <__subdf3+0x584>
    f138:	0081ffc4 	movi	r2,2047
    f13c:	4880af26 	beq	r9,r2,f3fc <__subdf3+0x6ac>
    f140:	898d883a 	add	r6,r17,r6
    f144:	1945883a 	add	r2,r3,r5
    f148:	3447803a 	cmpltu	r3,r6,r17
    f14c:	1887883a 	add	r3,r3,r2
    f150:	182297fa 	slli	r17,r3,31
    f154:	300cd07a 	srli	r6,r6,1
    f158:	1806d07a 	srli	r3,r3,1
    f15c:	4821883a 	mov	r16,r9
    f160:	89a2b03a 	or	r17,r17,r6
    f164:	003f1b06 	br	edd4 <__alt_data_end+0xff00edd4>
    f168:	0101ffc4 	movi	r4,2047
    f16c:	813f441e 	bne	r16,r4,ee80 <__alt_data_end+0xff00ee80>
    f170:	003f1806 	br	edd4 <__alt_data_end+0xff00edd4>
    f174:	843ff844 	addi	r16,r16,-31
    f178:	01400804 	movi	r5,32
    f17c:	1408d83a 	srl	r4,r2,r16
    f180:	19405026 	beq	r3,r5,f2c4 <__subdf3+0x574>
    f184:	01401004 	movi	r5,64
    f188:	28c7c83a 	sub	r3,r5,r3
    f18c:	10c4983a 	sll	r2,r2,r3
    f190:	88a2b03a 	or	r17,r17,r2
    f194:	8822c03a 	cmpne	r17,r17,zero
    f198:	2462b03a 	or	r17,r4,r17
    f19c:	0007883a 	mov	r3,zero
    f1a0:	0021883a 	mov	r16,zero
    f1a4:	003f6d06 	br	ef5c <__alt_data_end+0xff00ef5c>
    f1a8:	11fff804 	addi	r7,r2,-32
    f1ac:	01000804 	movi	r4,32
    f1b0:	29ced83a 	srl	r7,r5,r7
    f1b4:	11004526 	beq	r2,r4,f2cc <__subdf3+0x57c>
    f1b8:	01001004 	movi	r4,64
    f1bc:	2089c83a 	sub	r4,r4,r2
    f1c0:	2904983a 	sll	r2,r5,r4
    f1c4:	118cb03a 	or	r6,r2,r6
    f1c8:	300cc03a 	cmpne	r6,r6,zero
    f1cc:	398cb03a 	or	r6,r7,r6
    f1d0:	0005883a 	mov	r2,zero
    f1d4:	003f3706 	br	eeb4 <__alt_data_end+0xff00eeb4>
    f1d8:	80002a26 	beq	r16,zero,f284 <__subdf3+0x534>
    f1dc:	0101ffc4 	movi	r4,2047
    f1e0:	49006626 	beq	r9,r4,f37c <__subdf3+0x62c>
    f1e4:	0085c83a 	sub	r2,zero,r2
    f1e8:	18c02034 	orhi	r3,r3,128
    f1ec:	01000e04 	movi	r4,56
    f1f0:	20807e16 	blt	r4,r2,f3ec <__subdf3+0x69c>
    f1f4:	010007c4 	movi	r4,31
    f1f8:	2080e716 	blt	r4,r2,f598 <__subdf3+0x848>
    f1fc:	01000804 	movi	r4,32
    f200:	2089c83a 	sub	r4,r4,r2
    f204:	1914983a 	sll	r10,r3,r4
    f208:	8890d83a 	srl	r8,r17,r2
    f20c:	8908983a 	sll	r4,r17,r4
    f210:	1884d83a 	srl	r2,r3,r2
    f214:	5222b03a 	or	r17,r10,r8
    f218:	2006c03a 	cmpne	r3,r4,zero
    f21c:	88e2b03a 	or	r17,r17,r3
    f220:	3463c83a 	sub	r17,r6,r17
    f224:	2885c83a 	sub	r2,r5,r2
    f228:	344d803a 	cmpltu	r6,r6,r17
    f22c:	1187c83a 	sub	r3,r2,r6
    f230:	4821883a 	mov	r16,r9
    f234:	3825883a 	mov	r18,r7
    f238:	003f2306 	br	eec8 <__alt_data_end+0xff00eec8>
    f23c:	24d0b03a 	or	r8,r4,r19
    f240:	40001b1e 	bne	r8,zero,f2b0 <__subdf3+0x560>
    f244:	0005883a 	mov	r2,zero
    f248:	0009883a 	mov	r4,zero
    f24c:	0021883a 	mov	r16,zero
    f250:	003f4906 	br	ef78 <__alt_data_end+0xff00ef78>
    f254:	010007c4 	movi	r4,31
    f258:	20803a16 	blt	r4,r2,f344 <__subdf3+0x5f4>
    f25c:	01000804 	movi	r4,32
    f260:	2089c83a 	sub	r4,r4,r2
    f264:	2912983a 	sll	r9,r5,r4
    f268:	3090d83a 	srl	r8,r6,r2
    f26c:	3108983a 	sll	r4,r6,r4
    f270:	2884d83a 	srl	r2,r5,r2
    f274:	4a12b03a 	or	r9,r9,r8
    f278:	2008c03a 	cmpne	r4,r4,zero
    f27c:	4912b03a 	or	r9,r9,r4
    f280:	003f4e06 	br	efbc <__alt_data_end+0xff00efbc>
    f284:	1c48b03a 	or	r4,r3,r17
    f288:	20003c26 	beq	r4,zero,f37c <__subdf3+0x62c>
    f28c:	0084303a 	nor	r2,zero,r2
    f290:	1000381e 	bne	r2,zero,f374 <__subdf3+0x624>
    f294:	3463c83a 	sub	r17,r6,r17
    f298:	28c5c83a 	sub	r2,r5,r3
    f29c:	344d803a 	cmpltu	r6,r6,r17
    f2a0:	1187c83a 	sub	r3,r2,r6
    f2a4:	4821883a 	mov	r16,r9
    f2a8:	3825883a 	mov	r18,r7
    f2ac:	003f0606 	br	eec8 <__alt_data_end+0xff00eec8>
    f2b0:	2023883a 	mov	r17,r4
    f2b4:	003f0906 	br	eedc <__alt_data_end+0xff00eedc>
    f2b8:	0101ffc4 	movi	r4,2047
    f2bc:	813f3a1e 	bne	r16,r4,efa8 <__alt_data_end+0xff00efa8>
    f2c0:	003ec406 	br	edd4 <__alt_data_end+0xff00edd4>
    f2c4:	0005883a 	mov	r2,zero
    f2c8:	003fb106 	br	f190 <__alt_data_end+0xff00f190>
    f2cc:	0005883a 	mov	r2,zero
    f2d0:	003fbc06 	br	f1c4 <__alt_data_end+0xff00f1c4>
    f2d4:	1c44b03a 	or	r2,r3,r17
    f2d8:	80008e1e 	bne	r16,zero,f514 <__subdf3+0x7c4>
    f2dc:	1000c826 	beq	r2,zero,f600 <__subdf3+0x8b0>
    f2e0:	2984b03a 	or	r2,r5,r6
    f2e4:	103ebb26 	beq	r2,zero,edd4 <__alt_data_end+0xff00edd4>
    f2e8:	8989883a 	add	r4,r17,r6
    f2ec:	1945883a 	add	r2,r3,r5
    f2f0:	2447803a 	cmpltu	r3,r4,r17
    f2f4:	1887883a 	add	r3,r3,r2
    f2f8:	1880202c 	andhi	r2,r3,128
    f2fc:	2023883a 	mov	r17,r4
    f300:	103f1626 	beq	r2,zero,ef5c <__alt_data_end+0xff00ef5c>
    f304:	00bfe034 	movhi	r2,65408
    f308:	10bfffc4 	addi	r2,r2,-1
    f30c:	5021883a 	mov	r16,r10
    f310:	1886703a 	and	r3,r3,r2
    f314:	003eaf06 	br	edd4 <__alt_data_end+0xff00edd4>
    f318:	3825883a 	mov	r18,r7
    f31c:	003f0f06 	br	ef5c <__alt_data_end+0xff00ef5c>
    f320:	1c44b03a 	or	r2,r3,r17
    f324:	8000251e 	bne	r16,zero,f3bc <__subdf3+0x66c>
    f328:	1000661e 	bne	r2,zero,f4c4 <__subdf3+0x774>
    f32c:	2990b03a 	or	r8,r5,r6
    f330:	40009626 	beq	r8,zero,f58c <__subdf3+0x83c>
    f334:	2807883a 	mov	r3,r5
    f338:	3023883a 	mov	r17,r6
    f33c:	3825883a 	mov	r18,r7
    f340:	003ea406 	br	edd4 <__alt_data_end+0xff00edd4>
    f344:	127ff804 	addi	r9,r2,-32
    f348:	01000804 	movi	r4,32
    f34c:	2a52d83a 	srl	r9,r5,r9
    f350:	11008c26 	beq	r2,r4,f584 <__subdf3+0x834>
    f354:	01001004 	movi	r4,64
    f358:	2085c83a 	sub	r2,r4,r2
    f35c:	2884983a 	sll	r2,r5,r2
    f360:	118cb03a 	or	r6,r2,r6
    f364:	300cc03a 	cmpne	r6,r6,zero
    f368:	4992b03a 	or	r9,r9,r6
    f36c:	0005883a 	mov	r2,zero
    f370:	003f1206 	br	efbc <__alt_data_end+0xff00efbc>
    f374:	0101ffc4 	movi	r4,2047
    f378:	493f9c1e 	bne	r9,r4,f1ec <__alt_data_end+0xff00f1ec>
    f37c:	2807883a 	mov	r3,r5
    f380:	3023883a 	mov	r17,r6
    f384:	4821883a 	mov	r16,r9
    f388:	3825883a 	mov	r18,r7
    f38c:	003e9106 	br	edd4 <__alt_data_end+0xff00edd4>
    f390:	80001f1e 	bne	r16,zero,f410 <__subdf3+0x6c0>
    f394:	1c48b03a 	or	r4,r3,r17
    f398:	20005a26 	beq	r4,zero,f504 <__subdf3+0x7b4>
    f39c:	0084303a 	nor	r2,zero,r2
    f3a0:	1000561e 	bne	r2,zero,f4fc <__subdf3+0x7ac>
    f3a4:	89a3883a 	add	r17,r17,r6
    f3a8:	1945883a 	add	r2,r3,r5
    f3ac:	898d803a 	cmpltu	r6,r17,r6
    f3b0:	3087883a 	add	r3,r6,r2
    f3b4:	4821883a 	mov	r16,r9
    f3b8:	003f0506 	br	efd0 <__alt_data_end+0xff00efd0>
    f3bc:	10002b1e 	bne	r2,zero,f46c <__subdf3+0x71c>
    f3c0:	2984b03a 	or	r2,r5,r6
    f3c4:	10008026 	beq	r2,zero,f5c8 <__subdf3+0x878>
    f3c8:	2807883a 	mov	r3,r5
    f3cc:	3023883a 	mov	r17,r6
    f3d0:	3825883a 	mov	r18,r7
    f3d4:	0401ffc4 	movi	r16,2047
    f3d8:	003e7e06 	br	edd4 <__alt_data_end+0xff00edd4>
    f3dc:	3809883a 	mov	r4,r7
    f3e0:	0011883a 	mov	r8,zero
    f3e4:	0005883a 	mov	r2,zero
    f3e8:	003ee306 	br	ef78 <__alt_data_end+0xff00ef78>
    f3ec:	1c62b03a 	or	r17,r3,r17
    f3f0:	8822c03a 	cmpne	r17,r17,zero
    f3f4:	0005883a 	mov	r2,zero
    f3f8:	003f8906 	br	f220 <__alt_data_end+0xff00f220>
    f3fc:	3809883a 	mov	r4,r7
    f400:	4821883a 	mov	r16,r9
    f404:	0011883a 	mov	r8,zero
    f408:	0005883a 	mov	r2,zero
    f40c:	003eda06 	br	ef78 <__alt_data_end+0xff00ef78>
    f410:	0101ffc4 	movi	r4,2047
    f414:	49003b26 	beq	r9,r4,f504 <__subdf3+0x7b4>
    f418:	0085c83a 	sub	r2,zero,r2
    f41c:	18c02034 	orhi	r3,r3,128
    f420:	01000e04 	movi	r4,56
    f424:	20806e16 	blt	r4,r2,f5e0 <__subdf3+0x890>
    f428:	010007c4 	movi	r4,31
    f42c:	20807716 	blt	r4,r2,f60c <__subdf3+0x8bc>
    f430:	01000804 	movi	r4,32
    f434:	2089c83a 	sub	r4,r4,r2
    f438:	1914983a 	sll	r10,r3,r4
    f43c:	8890d83a 	srl	r8,r17,r2
    f440:	8908983a 	sll	r4,r17,r4
    f444:	1884d83a 	srl	r2,r3,r2
    f448:	5222b03a 	or	r17,r10,r8
    f44c:	2006c03a 	cmpne	r3,r4,zero
    f450:	88e2b03a 	or	r17,r17,r3
    f454:	89a3883a 	add	r17,r17,r6
    f458:	1145883a 	add	r2,r2,r5
    f45c:	898d803a 	cmpltu	r6,r17,r6
    f460:	3087883a 	add	r3,r6,r2
    f464:	4821883a 	mov	r16,r9
    f468:	003ed906 	br	efd0 <__alt_data_end+0xff00efd0>
    f46c:	2984b03a 	or	r2,r5,r6
    f470:	10004226 	beq	r2,zero,f57c <__subdf3+0x82c>
    f474:	1808d0fa 	srli	r4,r3,3
    f478:	8822d0fa 	srli	r17,r17,3
    f47c:	1806977a 	slli	r3,r3,29
    f480:	2080022c 	andhi	r2,r4,8
    f484:	1c62b03a 	or	r17,r3,r17
    f488:	10000826 	beq	r2,zero,f4ac <__subdf3+0x75c>
    f48c:	2812d0fa 	srli	r9,r5,3
    f490:	4880022c 	andhi	r2,r9,8
    f494:	1000051e 	bne	r2,zero,f4ac <__subdf3+0x75c>
    f498:	300cd0fa 	srli	r6,r6,3
    f49c:	2804977a 	slli	r2,r5,29
    f4a0:	4809883a 	mov	r4,r9
    f4a4:	3825883a 	mov	r18,r7
    f4a8:	11a2b03a 	or	r17,r2,r6
    f4ac:	8806d77a 	srli	r3,r17,29
    f4b0:	200890fa 	slli	r4,r4,3
    f4b4:	882290fa 	slli	r17,r17,3
    f4b8:	0401ffc4 	movi	r16,2047
    f4bc:	1906b03a 	or	r3,r3,r4
    f4c0:	003e4406 	br	edd4 <__alt_data_end+0xff00edd4>
    f4c4:	2984b03a 	or	r2,r5,r6
    f4c8:	103e4226 	beq	r2,zero,edd4 <__alt_data_end+0xff00edd4>
    f4cc:	8989c83a 	sub	r4,r17,r6
    f4d0:	8911803a 	cmpltu	r8,r17,r4
    f4d4:	1945c83a 	sub	r2,r3,r5
    f4d8:	1205c83a 	sub	r2,r2,r8
    f4dc:	1200202c 	andhi	r8,r2,128
    f4e0:	403e9a26 	beq	r8,zero,ef4c <__alt_data_end+0xff00ef4c>
    f4e4:	3463c83a 	sub	r17,r6,r17
    f4e8:	28c5c83a 	sub	r2,r5,r3
    f4ec:	344d803a 	cmpltu	r6,r6,r17
    f4f0:	1187c83a 	sub	r3,r2,r6
    f4f4:	3825883a 	mov	r18,r7
    f4f8:	003e3606 	br	edd4 <__alt_data_end+0xff00edd4>
    f4fc:	0101ffc4 	movi	r4,2047
    f500:	493fc71e 	bne	r9,r4,f420 <__alt_data_end+0xff00f420>
    f504:	2807883a 	mov	r3,r5
    f508:	3023883a 	mov	r17,r6
    f50c:	4821883a 	mov	r16,r9
    f510:	003e3006 	br	edd4 <__alt_data_end+0xff00edd4>
    f514:	10003626 	beq	r2,zero,f5f0 <__subdf3+0x8a0>
    f518:	2984b03a 	or	r2,r5,r6
    f51c:	10001726 	beq	r2,zero,f57c <__subdf3+0x82c>
    f520:	1808d0fa 	srli	r4,r3,3
    f524:	8822d0fa 	srli	r17,r17,3
    f528:	1806977a 	slli	r3,r3,29
    f52c:	2080022c 	andhi	r2,r4,8
    f530:	1c62b03a 	or	r17,r3,r17
    f534:	10000726 	beq	r2,zero,f554 <__subdf3+0x804>
    f538:	2812d0fa 	srli	r9,r5,3
    f53c:	4880022c 	andhi	r2,r9,8
    f540:	1000041e 	bne	r2,zero,f554 <__subdf3+0x804>
    f544:	300cd0fa 	srli	r6,r6,3
    f548:	2804977a 	slli	r2,r5,29
    f54c:	4809883a 	mov	r4,r9
    f550:	11a2b03a 	or	r17,r2,r6
    f554:	8806d77a 	srli	r3,r17,29
    f558:	200890fa 	slli	r4,r4,3
    f55c:	882290fa 	slli	r17,r17,3
    f560:	3825883a 	mov	r18,r7
    f564:	1906b03a 	or	r3,r3,r4
    f568:	0401ffc4 	movi	r16,2047
    f56c:	003e1906 	br	edd4 <__alt_data_end+0xff00edd4>
    f570:	000b883a 	mov	r5,zero
    f574:	0005883a 	mov	r2,zero
    f578:	003e2e06 	br	ee34 <__alt_data_end+0xff00ee34>
    f57c:	0401ffc4 	movi	r16,2047
    f580:	003e1406 	br	edd4 <__alt_data_end+0xff00edd4>
    f584:	0005883a 	mov	r2,zero
    f588:	003f7506 	br	f360 <__alt_data_end+0xff00f360>
    f58c:	0005883a 	mov	r2,zero
    f590:	0009883a 	mov	r4,zero
    f594:	003e7806 	br	ef78 <__alt_data_end+0xff00ef78>
    f598:	123ff804 	addi	r8,r2,-32
    f59c:	01000804 	movi	r4,32
    f5a0:	1a10d83a 	srl	r8,r3,r8
    f5a4:	11002526 	beq	r2,r4,f63c <__subdf3+0x8ec>
    f5a8:	01001004 	movi	r4,64
    f5ac:	2085c83a 	sub	r2,r4,r2
    f5b0:	1884983a 	sll	r2,r3,r2
    f5b4:	1444b03a 	or	r2,r2,r17
    f5b8:	1004c03a 	cmpne	r2,r2,zero
    f5bc:	40a2b03a 	or	r17,r8,r2
    f5c0:	0005883a 	mov	r2,zero
    f5c4:	003f1606 	br	f220 <__alt_data_end+0xff00f220>
    f5c8:	02000434 	movhi	r8,16
    f5cc:	0009883a 	mov	r4,zero
    f5d0:	423fffc4 	addi	r8,r8,-1
    f5d4:	00bfffc4 	movi	r2,-1
    f5d8:	0401ffc4 	movi	r16,2047
    f5dc:	003e6606 	br	ef78 <__alt_data_end+0xff00ef78>
    f5e0:	1c62b03a 	or	r17,r3,r17
    f5e4:	8822c03a 	cmpne	r17,r17,zero
    f5e8:	0005883a 	mov	r2,zero
    f5ec:	003f9906 	br	f454 <__alt_data_end+0xff00f454>
    f5f0:	2807883a 	mov	r3,r5
    f5f4:	3023883a 	mov	r17,r6
    f5f8:	0401ffc4 	movi	r16,2047
    f5fc:	003df506 	br	edd4 <__alt_data_end+0xff00edd4>
    f600:	2807883a 	mov	r3,r5
    f604:	3023883a 	mov	r17,r6
    f608:	003df206 	br	edd4 <__alt_data_end+0xff00edd4>
    f60c:	123ff804 	addi	r8,r2,-32
    f610:	01000804 	movi	r4,32
    f614:	1a10d83a 	srl	r8,r3,r8
    f618:	11000a26 	beq	r2,r4,f644 <__subdf3+0x8f4>
    f61c:	01001004 	movi	r4,64
    f620:	2085c83a 	sub	r2,r4,r2
    f624:	1884983a 	sll	r2,r3,r2
    f628:	1444b03a 	or	r2,r2,r17
    f62c:	1004c03a 	cmpne	r2,r2,zero
    f630:	40a2b03a 	or	r17,r8,r2
    f634:	0005883a 	mov	r2,zero
    f638:	003f8606 	br	f454 <__alt_data_end+0xff00f454>
    f63c:	0005883a 	mov	r2,zero
    f640:	003fdc06 	br	f5b4 <__alt_data_end+0xff00f5b4>
    f644:	0005883a 	mov	r2,zero
    f648:	003ff706 	br	f628 <__alt_data_end+0xff00f628>

0000f64c <__fixdfsi>:
    f64c:	280cd53a 	srli	r6,r5,20
    f650:	00c00434 	movhi	r3,16
    f654:	18ffffc4 	addi	r3,r3,-1
    f658:	3181ffcc 	andi	r6,r6,2047
    f65c:	01c0ff84 	movi	r7,1022
    f660:	28c6703a 	and	r3,r5,r3
    f664:	280ad7fa 	srli	r5,r5,31
    f668:	3980120e 	bge	r7,r6,f6b4 <__fixdfsi+0x68>
    f66c:	00810744 	movi	r2,1053
    f670:	11800c16 	blt	r2,r6,f6a4 <__fixdfsi+0x58>
    f674:	00810cc4 	movi	r2,1075
    f678:	1185c83a 	sub	r2,r2,r6
    f67c:	01c007c4 	movi	r7,31
    f680:	18c00434 	orhi	r3,r3,16
    f684:	38800d16 	blt	r7,r2,f6bc <__fixdfsi+0x70>
    f688:	31befb44 	addi	r6,r6,-1043
    f68c:	2084d83a 	srl	r2,r4,r2
    f690:	1986983a 	sll	r3,r3,r6
    f694:	1884b03a 	or	r2,r3,r2
    f698:	28000726 	beq	r5,zero,f6b8 <__fixdfsi+0x6c>
    f69c:	0085c83a 	sub	r2,zero,r2
    f6a0:	f800283a 	ret
    f6a4:	00a00034 	movhi	r2,32768
    f6a8:	10bfffc4 	addi	r2,r2,-1
    f6ac:	2885883a 	add	r2,r5,r2
    f6b0:	f800283a 	ret
    f6b4:	0005883a 	mov	r2,zero
    f6b8:	f800283a 	ret
    f6bc:	008104c4 	movi	r2,1043
    f6c0:	1185c83a 	sub	r2,r2,r6
    f6c4:	1884d83a 	srl	r2,r3,r2
    f6c8:	003ff306 	br	f698 <__alt_data_end+0xff00f698>

0000f6cc <__floatsidf>:
    f6cc:	defffd04 	addi	sp,sp,-12
    f6d0:	dfc00215 	stw	ra,8(sp)
    f6d4:	dc400115 	stw	r17,4(sp)
    f6d8:	dc000015 	stw	r16,0(sp)
    f6dc:	20002b26 	beq	r4,zero,f78c <__floatsidf+0xc0>
    f6e0:	2023883a 	mov	r17,r4
    f6e4:	2020d7fa 	srli	r16,r4,31
    f6e8:	20002d16 	blt	r4,zero,f7a0 <__floatsidf+0xd4>
    f6ec:	8809883a 	mov	r4,r17
    f6f0:	000f8500 	call	f850 <__clzsi2>
    f6f4:	01410784 	movi	r5,1054
    f6f8:	288bc83a 	sub	r5,r5,r2
    f6fc:	01010cc4 	movi	r4,1075
    f700:	2149c83a 	sub	r4,r4,r5
    f704:	00c007c4 	movi	r3,31
    f708:	1900160e 	bge	r3,r4,f764 <__floatsidf+0x98>
    f70c:	00c104c4 	movi	r3,1043
    f710:	1947c83a 	sub	r3,r3,r5
    f714:	88c6983a 	sll	r3,r17,r3
    f718:	00800434 	movhi	r2,16
    f71c:	10bfffc4 	addi	r2,r2,-1
    f720:	1886703a 	and	r3,r3,r2
    f724:	2941ffcc 	andi	r5,r5,2047
    f728:	800d883a 	mov	r6,r16
    f72c:	0005883a 	mov	r2,zero
    f730:	280a953a 	slli	r5,r5,20
    f734:	31803fcc 	andi	r6,r6,255
    f738:	01000434 	movhi	r4,16
    f73c:	300c97fa 	slli	r6,r6,31
    f740:	213fffc4 	addi	r4,r4,-1
    f744:	1906703a 	and	r3,r3,r4
    f748:	1946b03a 	or	r3,r3,r5
    f74c:	1986b03a 	or	r3,r3,r6
    f750:	dfc00217 	ldw	ra,8(sp)
    f754:	dc400117 	ldw	r17,4(sp)
    f758:	dc000017 	ldw	r16,0(sp)
    f75c:	dec00304 	addi	sp,sp,12
    f760:	f800283a 	ret
    f764:	00c002c4 	movi	r3,11
    f768:	1887c83a 	sub	r3,r3,r2
    f76c:	88c6d83a 	srl	r3,r17,r3
    f770:	8904983a 	sll	r2,r17,r4
    f774:	01000434 	movhi	r4,16
    f778:	213fffc4 	addi	r4,r4,-1
    f77c:	2941ffcc 	andi	r5,r5,2047
    f780:	1906703a 	and	r3,r3,r4
    f784:	800d883a 	mov	r6,r16
    f788:	003fe906 	br	f730 <__alt_data_end+0xff00f730>
    f78c:	000d883a 	mov	r6,zero
    f790:	000b883a 	mov	r5,zero
    f794:	0007883a 	mov	r3,zero
    f798:	0005883a 	mov	r2,zero
    f79c:	003fe406 	br	f730 <__alt_data_end+0xff00f730>
    f7a0:	0123c83a 	sub	r17,zero,r4
    f7a4:	003fd106 	br	f6ec <__alt_data_end+0xff00f6ec>

0000f7a8 <__floatunsidf>:
    f7a8:	defffe04 	addi	sp,sp,-8
    f7ac:	dc000015 	stw	r16,0(sp)
    f7b0:	dfc00115 	stw	ra,4(sp)
    f7b4:	2021883a 	mov	r16,r4
    f7b8:	20002226 	beq	r4,zero,f844 <__floatunsidf+0x9c>
    f7bc:	000f8500 	call	f850 <__clzsi2>
    f7c0:	01010784 	movi	r4,1054
    f7c4:	2089c83a 	sub	r4,r4,r2
    f7c8:	01810cc4 	movi	r6,1075
    f7cc:	310dc83a 	sub	r6,r6,r4
    f7d0:	00c007c4 	movi	r3,31
    f7d4:	1980120e 	bge	r3,r6,f820 <__floatunsidf+0x78>
    f7d8:	00c104c4 	movi	r3,1043
    f7dc:	1907c83a 	sub	r3,r3,r4
    f7e0:	80ca983a 	sll	r5,r16,r3
    f7e4:	00800434 	movhi	r2,16
    f7e8:	10bfffc4 	addi	r2,r2,-1
    f7ec:	2101ffcc 	andi	r4,r4,2047
    f7f0:	0021883a 	mov	r16,zero
    f7f4:	288a703a 	and	r5,r5,r2
    f7f8:	2008953a 	slli	r4,r4,20
    f7fc:	00c00434 	movhi	r3,16
    f800:	18ffffc4 	addi	r3,r3,-1
    f804:	28c6703a 	and	r3,r5,r3
    f808:	8005883a 	mov	r2,r16
    f80c:	1906b03a 	or	r3,r3,r4
    f810:	dfc00117 	ldw	ra,4(sp)
    f814:	dc000017 	ldw	r16,0(sp)
    f818:	dec00204 	addi	sp,sp,8
    f81c:	f800283a 	ret
    f820:	00c002c4 	movi	r3,11
    f824:	188bc83a 	sub	r5,r3,r2
    f828:	814ad83a 	srl	r5,r16,r5
    f82c:	00c00434 	movhi	r3,16
    f830:	18ffffc4 	addi	r3,r3,-1
    f834:	81a0983a 	sll	r16,r16,r6
    f838:	2101ffcc 	andi	r4,r4,2047
    f83c:	28ca703a 	and	r5,r5,r3
    f840:	003fed06 	br	f7f8 <__alt_data_end+0xff00f7f8>
    f844:	0009883a 	mov	r4,zero
    f848:	000b883a 	mov	r5,zero
    f84c:	003fea06 	br	f7f8 <__alt_data_end+0xff00f7f8>

0000f850 <__clzsi2>:
    f850:	00bfffd4 	movui	r2,65535
    f854:	11000536 	bltu	r2,r4,f86c <__clzsi2+0x1c>
    f858:	00803fc4 	movi	r2,255
    f85c:	11000f36 	bltu	r2,r4,f89c <__clzsi2+0x4c>
    f860:	00800804 	movi	r2,32
    f864:	0007883a 	mov	r3,zero
    f868:	00000506 	br	f880 <__clzsi2+0x30>
    f86c:	00804034 	movhi	r2,256
    f870:	10bfffc4 	addi	r2,r2,-1
    f874:	11000c2e 	bgeu	r2,r4,f8a8 <__clzsi2+0x58>
    f878:	00800204 	movi	r2,8
    f87c:	00c00604 	movi	r3,24
    f880:	20c8d83a 	srl	r4,r4,r3
    f884:	00c00074 	movhi	r3,1
    f888:	18ca6204 	addi	r3,r3,10632
    f88c:	1909883a 	add	r4,r3,r4
    f890:	20c00003 	ldbu	r3,0(r4)
    f894:	10c5c83a 	sub	r2,r2,r3
    f898:	f800283a 	ret
    f89c:	00800604 	movi	r2,24
    f8a0:	00c00204 	movi	r3,8
    f8a4:	003ff606 	br	f880 <__alt_data_end+0xff00f880>
    f8a8:	00800404 	movi	r2,16
    f8ac:	1007883a 	mov	r3,r2
    f8b0:	003ff306 	br	f880 <__alt_data_end+0xff00f880>

0000f8b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f8b4:	defffe04 	addi	sp,sp,-8
    f8b8:	dfc00115 	stw	ra,4(sp)
    f8bc:	df000015 	stw	fp,0(sp)
    f8c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f8c4:	d0a00b17 	ldw	r2,-32724(gp)
    f8c8:	10000326 	beq	r2,zero,f8d8 <alt_get_errno+0x24>
    f8cc:	d0a00b17 	ldw	r2,-32724(gp)
    f8d0:	103ee83a 	callr	r2
    f8d4:	00000106 	br	f8dc <alt_get_errno+0x28>
    f8d8:	d0a6d804 	addi	r2,gp,-25760
}
    f8dc:	e037883a 	mov	sp,fp
    f8e0:	dfc00117 	ldw	ra,4(sp)
    f8e4:	df000017 	ldw	fp,0(sp)
    f8e8:	dec00204 	addi	sp,sp,8
    f8ec:	f800283a 	ret

0000f8f0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    f8f0:	defffb04 	addi	sp,sp,-20
    f8f4:	dfc00415 	stw	ra,16(sp)
    f8f8:	df000315 	stw	fp,12(sp)
    f8fc:	df000304 	addi	fp,sp,12
    f900:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    f904:	e0bfff17 	ldw	r2,-4(fp)
    f908:	10000616 	blt	r2,zero,f924 <close+0x34>
    f90c:	e0bfff17 	ldw	r2,-4(fp)
    f910:	10c00324 	muli	r3,r2,12
    f914:	00800074 	movhi	r2,1
    f918:	108ce004 	addi	r2,r2,13184
    f91c:	1885883a 	add	r2,r3,r2
    f920:	00000106 	br	f928 <close+0x38>
    f924:	0005883a 	mov	r2,zero
    f928:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    f92c:	e0bffd17 	ldw	r2,-12(fp)
    f930:	10001926 	beq	r2,zero,f998 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    f934:	e0bffd17 	ldw	r2,-12(fp)
    f938:	10800017 	ldw	r2,0(r2)
    f93c:	10800417 	ldw	r2,16(r2)
    f940:	10000626 	beq	r2,zero,f95c <close+0x6c>
    f944:	e0bffd17 	ldw	r2,-12(fp)
    f948:	10800017 	ldw	r2,0(r2)
    f94c:	10800417 	ldw	r2,16(r2)
    f950:	e13ffd17 	ldw	r4,-12(fp)
    f954:	103ee83a 	callr	r2
    f958:	00000106 	br	f960 <close+0x70>
    f95c:	0005883a 	mov	r2,zero
    f960:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    f964:	e13fff17 	ldw	r4,-4(fp)
    f968:	000ffb00 	call	ffb0 <alt_release_fd>
    if (rval < 0)
    f96c:	e0bffe17 	ldw	r2,-8(fp)
    f970:	1000070e 	bge	r2,zero,f990 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    f974:	000f8b40 	call	f8b4 <alt_get_errno>
    f978:	1007883a 	mov	r3,r2
    f97c:	e0bffe17 	ldw	r2,-8(fp)
    f980:	0085c83a 	sub	r2,zero,r2
    f984:	18800015 	stw	r2,0(r3)
      return -1;
    f988:	00bfffc4 	movi	r2,-1
    f98c:	00000706 	br	f9ac <close+0xbc>
    }
    return 0;
    f990:	0005883a 	mov	r2,zero
    f994:	00000506 	br	f9ac <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f998:	000f8b40 	call	f8b4 <alt_get_errno>
    f99c:	1007883a 	mov	r3,r2
    f9a0:	00801444 	movi	r2,81
    f9a4:	18800015 	stw	r2,0(r3)
    return -1;
    f9a8:	00bfffc4 	movi	r2,-1
  }
}
    f9ac:	e037883a 	mov	sp,fp
    f9b0:	dfc00117 	ldw	ra,4(sp)
    f9b4:	df000017 	ldw	fp,0(sp)
    f9b8:	dec00204 	addi	sp,sp,8
    f9bc:	f800283a 	ret

0000f9c0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    f9c0:	defffc04 	addi	sp,sp,-16
    f9c4:	df000315 	stw	fp,12(sp)
    f9c8:	df000304 	addi	fp,sp,12
    f9cc:	e13ffd15 	stw	r4,-12(fp)
    f9d0:	e17ffe15 	stw	r5,-8(fp)
    f9d4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    f9d8:	e0bfff17 	ldw	r2,-4(fp)
}
    f9dc:	e037883a 	mov	sp,fp
    f9e0:	df000017 	ldw	fp,0(sp)
    f9e4:	dec00104 	addi	sp,sp,4
    f9e8:	f800283a 	ret

0000f9ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f9ec:	defffe04 	addi	sp,sp,-8
    f9f0:	dfc00115 	stw	ra,4(sp)
    f9f4:	df000015 	stw	fp,0(sp)
    f9f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f9fc:	d0a00b17 	ldw	r2,-32724(gp)
    fa00:	10000326 	beq	r2,zero,fa10 <alt_get_errno+0x24>
    fa04:	d0a00b17 	ldw	r2,-32724(gp)
    fa08:	103ee83a 	callr	r2
    fa0c:	00000106 	br	fa14 <alt_get_errno+0x28>
    fa10:	d0a6d804 	addi	r2,gp,-25760
}
    fa14:	e037883a 	mov	sp,fp
    fa18:	dfc00117 	ldw	ra,4(sp)
    fa1c:	df000017 	ldw	fp,0(sp)
    fa20:	dec00204 	addi	sp,sp,8
    fa24:	f800283a 	ret

0000fa28 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    fa28:	defffb04 	addi	sp,sp,-20
    fa2c:	dfc00415 	stw	ra,16(sp)
    fa30:	df000315 	stw	fp,12(sp)
    fa34:	df000304 	addi	fp,sp,12
    fa38:	e13ffe15 	stw	r4,-8(fp)
    fa3c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fa40:	e0bffe17 	ldw	r2,-8(fp)
    fa44:	10000616 	blt	r2,zero,fa60 <fstat+0x38>
    fa48:	e0bffe17 	ldw	r2,-8(fp)
    fa4c:	10c00324 	muli	r3,r2,12
    fa50:	00800074 	movhi	r2,1
    fa54:	108ce004 	addi	r2,r2,13184
    fa58:	1885883a 	add	r2,r3,r2
    fa5c:	00000106 	br	fa64 <fstat+0x3c>
    fa60:	0005883a 	mov	r2,zero
    fa64:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    fa68:	e0bffd17 	ldw	r2,-12(fp)
    fa6c:	10001026 	beq	r2,zero,fab0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    fa70:	e0bffd17 	ldw	r2,-12(fp)
    fa74:	10800017 	ldw	r2,0(r2)
    fa78:	10800817 	ldw	r2,32(r2)
    fa7c:	10000726 	beq	r2,zero,fa9c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    fa80:	e0bffd17 	ldw	r2,-12(fp)
    fa84:	10800017 	ldw	r2,0(r2)
    fa88:	10800817 	ldw	r2,32(r2)
    fa8c:	e17fff17 	ldw	r5,-4(fp)
    fa90:	e13ffd17 	ldw	r4,-12(fp)
    fa94:	103ee83a 	callr	r2
    fa98:	00000a06 	br	fac4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    fa9c:	e0bfff17 	ldw	r2,-4(fp)
    faa0:	00c80004 	movi	r3,8192
    faa4:	10c00115 	stw	r3,4(r2)
      return 0;
    faa8:	0005883a 	mov	r2,zero
    faac:	00000506 	br	fac4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    fab0:	000f9ec0 	call	f9ec <alt_get_errno>
    fab4:	1007883a 	mov	r3,r2
    fab8:	00801444 	movi	r2,81
    fabc:	18800015 	stw	r2,0(r3)
    return -1;
    fac0:	00bfffc4 	movi	r2,-1
  }
}
    fac4:	e037883a 	mov	sp,fp
    fac8:	dfc00117 	ldw	ra,4(sp)
    facc:	df000017 	ldw	fp,0(sp)
    fad0:	dec00204 	addi	sp,sp,8
    fad4:	f800283a 	ret

0000fad8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fad8:	defffe04 	addi	sp,sp,-8
    fadc:	dfc00115 	stw	ra,4(sp)
    fae0:	df000015 	stw	fp,0(sp)
    fae4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fae8:	d0a00b17 	ldw	r2,-32724(gp)
    faec:	10000326 	beq	r2,zero,fafc <alt_get_errno+0x24>
    faf0:	d0a00b17 	ldw	r2,-32724(gp)
    faf4:	103ee83a 	callr	r2
    faf8:	00000106 	br	fb00 <alt_get_errno+0x28>
    fafc:	d0a6d804 	addi	r2,gp,-25760
}
    fb00:	e037883a 	mov	sp,fp
    fb04:	dfc00117 	ldw	ra,4(sp)
    fb08:	df000017 	ldw	fp,0(sp)
    fb0c:	dec00204 	addi	sp,sp,8
    fb10:	f800283a 	ret

0000fb14 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    fb14:	deffed04 	addi	sp,sp,-76
    fb18:	dfc01215 	stw	ra,72(sp)
    fb1c:	df001115 	stw	fp,68(sp)
    fb20:	df001104 	addi	fp,sp,68
    fb24:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fb28:	e0bfff17 	ldw	r2,-4(fp)
    fb2c:	10000616 	blt	r2,zero,fb48 <isatty+0x34>
    fb30:	e0bfff17 	ldw	r2,-4(fp)
    fb34:	10c00324 	muli	r3,r2,12
    fb38:	00800074 	movhi	r2,1
    fb3c:	108ce004 	addi	r2,r2,13184
    fb40:	1885883a 	add	r2,r3,r2
    fb44:	00000106 	br	fb4c <isatty+0x38>
    fb48:	0005883a 	mov	r2,zero
    fb4c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    fb50:	e0bfef17 	ldw	r2,-68(fp)
    fb54:	10000e26 	beq	r2,zero,fb90 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    fb58:	e0bfef17 	ldw	r2,-68(fp)
    fb5c:	10800017 	ldw	r2,0(r2)
    fb60:	10800817 	ldw	r2,32(r2)
    fb64:	1000021e 	bne	r2,zero,fb70 <isatty+0x5c>
    {
      return 1;
    fb68:	00800044 	movi	r2,1
    fb6c:	00000d06 	br	fba4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    fb70:	e0bff004 	addi	r2,fp,-64
    fb74:	100b883a 	mov	r5,r2
    fb78:	e13fff17 	ldw	r4,-4(fp)
    fb7c:	000fa280 	call	fa28 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    fb80:	e0bff117 	ldw	r2,-60(fp)
    fb84:	10880020 	cmpeqi	r2,r2,8192
    fb88:	10803fcc 	andi	r2,r2,255
    fb8c:	00000506 	br	fba4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    fb90:	000fad80 	call	fad8 <alt_get_errno>
    fb94:	1007883a 	mov	r3,r2
    fb98:	00801444 	movi	r2,81
    fb9c:	18800015 	stw	r2,0(r3)
    return 0;
    fba0:	0005883a 	mov	r2,zero
  }
}
    fba4:	e037883a 	mov	sp,fp
    fba8:	dfc00117 	ldw	ra,4(sp)
    fbac:	df000017 	ldw	fp,0(sp)
    fbb0:	dec00204 	addi	sp,sp,8
    fbb4:	f800283a 	ret

0000fbb8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    fbb8:	defffc04 	addi	sp,sp,-16
    fbbc:	df000315 	stw	fp,12(sp)
    fbc0:	df000304 	addi	fp,sp,12
    fbc4:	e13ffd15 	stw	r4,-12(fp)
    fbc8:	e17ffe15 	stw	r5,-8(fp)
    fbcc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    fbd0:	e0fffe17 	ldw	r3,-8(fp)
    fbd4:	e0bffd17 	ldw	r2,-12(fp)
    fbd8:	18800c26 	beq	r3,r2,fc0c <alt_load_section+0x54>
  {
    while( to != end )
    fbdc:	00000806 	br	fc00 <alt_load_section+0x48>
    {
      *to++ = *from++;
    fbe0:	e0bffe17 	ldw	r2,-8(fp)
    fbe4:	10c00104 	addi	r3,r2,4
    fbe8:	e0fffe15 	stw	r3,-8(fp)
    fbec:	e0fffd17 	ldw	r3,-12(fp)
    fbf0:	19000104 	addi	r4,r3,4
    fbf4:	e13ffd15 	stw	r4,-12(fp)
    fbf8:	18c00017 	ldw	r3,0(r3)
    fbfc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    fc00:	e0fffe17 	ldw	r3,-8(fp)
    fc04:	e0bfff17 	ldw	r2,-4(fp)
    fc08:	18bff51e 	bne	r3,r2,fbe0 <__alt_data_end+0xff00fbe0>
    {
      *to++ = *from++;
    }
  }
}
    fc0c:	0001883a 	nop
    fc10:	e037883a 	mov	sp,fp
    fc14:	df000017 	ldw	fp,0(sp)
    fc18:	dec00104 	addi	sp,sp,4
    fc1c:	f800283a 	ret

0000fc20 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    fc20:	defffe04 	addi	sp,sp,-8
    fc24:	dfc00115 	stw	ra,4(sp)
    fc28:	df000015 	stw	fp,0(sp)
    fc2c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    fc30:	01800074 	movhi	r6,1
    fc34:	31916804 	addi	r6,r6,17824
    fc38:	01400074 	movhi	r5,1
    fc3c:	294aad04 	addi	r5,r5,10932
    fc40:	01000074 	movhi	r4,1
    fc44:	21116804 	addi	r4,r4,17824
    fc48:	000fbb80 	call	fbb8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    fc4c:	01800034 	movhi	r6,0
    fc50:	31809104 	addi	r6,r6,580
    fc54:	01400034 	movhi	r5,0
    fc58:	29400804 	addi	r5,r5,32
    fc5c:	01000034 	movhi	r4,0
    fc60:	21000804 	addi	r4,r4,32
    fc64:	000fbb80 	call	fbb8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    fc68:	01800074 	movhi	r6,1
    fc6c:	318aad04 	addi	r6,r6,10932
    fc70:	01400074 	movhi	r5,1
    fc74:	2948bd04 	addi	r5,r5,8948
    fc78:	01000074 	movhi	r4,1
    fc7c:	2108bd04 	addi	r4,r4,8948
    fc80:	000fbb80 	call	fbb8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    fc84:	00112080 	call	11208 <alt_dcache_flush_all>
  alt_icache_flush_all();
    fc88:	00113c80 	call	113c8 <alt_icache_flush_all>
}
    fc8c:	0001883a 	nop
    fc90:	e037883a 	mov	sp,fp
    fc94:	dfc00117 	ldw	ra,4(sp)
    fc98:	df000017 	ldw	fp,0(sp)
    fc9c:	dec00204 	addi	sp,sp,8
    fca0:	f800283a 	ret

0000fca4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fca4:	defffe04 	addi	sp,sp,-8
    fca8:	dfc00115 	stw	ra,4(sp)
    fcac:	df000015 	stw	fp,0(sp)
    fcb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fcb4:	d0a00b17 	ldw	r2,-32724(gp)
    fcb8:	10000326 	beq	r2,zero,fcc8 <alt_get_errno+0x24>
    fcbc:	d0a00b17 	ldw	r2,-32724(gp)
    fcc0:	103ee83a 	callr	r2
    fcc4:	00000106 	br	fccc <alt_get_errno+0x28>
    fcc8:	d0a6d804 	addi	r2,gp,-25760
}
    fccc:	e037883a 	mov	sp,fp
    fcd0:	dfc00117 	ldw	ra,4(sp)
    fcd4:	df000017 	ldw	fp,0(sp)
    fcd8:	dec00204 	addi	sp,sp,8
    fcdc:	f800283a 	ret

0000fce0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    fce0:	defff904 	addi	sp,sp,-28
    fce4:	dfc00615 	stw	ra,24(sp)
    fce8:	df000515 	stw	fp,20(sp)
    fcec:	df000504 	addi	fp,sp,20
    fcf0:	e13ffd15 	stw	r4,-12(fp)
    fcf4:	e17ffe15 	stw	r5,-8(fp)
    fcf8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    fcfc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fd00:	e0bffd17 	ldw	r2,-12(fp)
    fd04:	10000616 	blt	r2,zero,fd20 <lseek+0x40>
    fd08:	e0bffd17 	ldw	r2,-12(fp)
    fd0c:	10c00324 	muli	r3,r2,12
    fd10:	00800074 	movhi	r2,1
    fd14:	108ce004 	addi	r2,r2,13184
    fd18:	1885883a 	add	r2,r3,r2
    fd1c:	00000106 	br	fd24 <lseek+0x44>
    fd20:	0005883a 	mov	r2,zero
    fd24:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    fd28:	e0bffc17 	ldw	r2,-16(fp)
    fd2c:	10001026 	beq	r2,zero,fd70 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    fd30:	e0bffc17 	ldw	r2,-16(fp)
    fd34:	10800017 	ldw	r2,0(r2)
    fd38:	10800717 	ldw	r2,28(r2)
    fd3c:	10000926 	beq	r2,zero,fd64 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    fd40:	e0bffc17 	ldw	r2,-16(fp)
    fd44:	10800017 	ldw	r2,0(r2)
    fd48:	10800717 	ldw	r2,28(r2)
    fd4c:	e1bfff17 	ldw	r6,-4(fp)
    fd50:	e17ffe17 	ldw	r5,-8(fp)
    fd54:	e13ffc17 	ldw	r4,-16(fp)
    fd58:	103ee83a 	callr	r2
    fd5c:	e0bffb15 	stw	r2,-20(fp)
    fd60:	00000506 	br	fd78 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    fd64:	00bfde84 	movi	r2,-134
    fd68:	e0bffb15 	stw	r2,-20(fp)
    fd6c:	00000206 	br	fd78 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    fd70:	00bfebc4 	movi	r2,-81
    fd74:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    fd78:	e0bffb17 	ldw	r2,-20(fp)
    fd7c:	1000070e 	bge	r2,zero,fd9c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    fd80:	000fca40 	call	fca4 <alt_get_errno>
    fd84:	1007883a 	mov	r3,r2
    fd88:	e0bffb17 	ldw	r2,-20(fp)
    fd8c:	0085c83a 	sub	r2,zero,r2
    fd90:	18800015 	stw	r2,0(r3)
    rc = -1;
    fd94:	00bfffc4 	movi	r2,-1
    fd98:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    fd9c:	e0bffb17 	ldw	r2,-20(fp)
}
    fda0:	e037883a 	mov	sp,fp
    fda4:	dfc00117 	ldw	ra,4(sp)
    fda8:	df000017 	ldw	fp,0(sp)
    fdac:	dec00204 	addi	sp,sp,8
    fdb0:	f800283a 	ret

0000fdb4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    fdb4:	defffd04 	addi	sp,sp,-12
    fdb8:	dfc00215 	stw	ra,8(sp)
    fdbc:	df000115 	stw	fp,4(sp)
    fdc0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    fdc4:	0009883a 	mov	r4,zero
    fdc8:	001025c0 	call	1025c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    fdcc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    fdd0:	00102940 	call	10294 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    fdd4:	01800074 	movhi	r6,1
    fdd8:	318aa504 	addi	r6,r6,10900
    fddc:	01400074 	movhi	r5,1
    fde0:	294aa504 	addi	r5,r5,10900
    fde4:	01000074 	movhi	r4,1
    fde8:	210aa504 	addi	r4,r4,10900
    fdec:	00117600 	call	11760 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    fdf0:	00113080 	call	11308 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    fdf4:	01000074 	movhi	r4,1
    fdf8:	2104da04 	addi	r4,r4,4968
    fdfc:	0011f600 	call	11f60 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    fe00:	d0a6dc17 	ldw	r2,-25744(gp)
    fe04:	d0e6dd17 	ldw	r3,-25740(gp)
    fe08:	d126de17 	ldw	r4,-25736(gp)
    fe0c:	200d883a 	mov	r6,r4
    fe10:	180b883a 	mov	r5,r3
    fe14:	1009883a 	mov	r4,r2
    fe18:	00012d80 	call	12d8 <main>
    fe1c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    fe20:	01000044 	movi	r4,1
    fe24:	000f8f00 	call	f8f0 <close>
  exit (result);
    fe28:	e13fff17 	ldw	r4,-4(fp)
    fe2c:	0011f740 	call	11f74 <exit>

0000fe30 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    fe30:	defffe04 	addi	sp,sp,-8
    fe34:	df000115 	stw	fp,4(sp)
    fe38:	df000104 	addi	fp,sp,4
    fe3c:	e13fff15 	stw	r4,-4(fp)
}
    fe40:	0001883a 	nop
    fe44:	e037883a 	mov	sp,fp
    fe48:	df000017 	ldw	fp,0(sp)
    fe4c:	dec00104 	addi	sp,sp,4
    fe50:	f800283a 	ret

0000fe54 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    fe54:	defffe04 	addi	sp,sp,-8
    fe58:	df000115 	stw	fp,4(sp)
    fe5c:	df000104 	addi	fp,sp,4
    fe60:	e13fff15 	stw	r4,-4(fp)
}
    fe64:	0001883a 	nop
    fe68:	e037883a 	mov	sp,fp
    fe6c:	df000017 	ldw	fp,0(sp)
    fe70:	dec00104 	addi	sp,sp,4
    fe74:	f800283a 	ret

0000fe78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fe78:	defffe04 	addi	sp,sp,-8
    fe7c:	dfc00115 	stw	ra,4(sp)
    fe80:	df000015 	stw	fp,0(sp)
    fe84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fe88:	d0a00b17 	ldw	r2,-32724(gp)
    fe8c:	10000326 	beq	r2,zero,fe9c <alt_get_errno+0x24>
    fe90:	d0a00b17 	ldw	r2,-32724(gp)
    fe94:	103ee83a 	callr	r2
    fe98:	00000106 	br	fea0 <alt_get_errno+0x28>
    fe9c:	d0a6d804 	addi	r2,gp,-25760
}
    fea0:	e037883a 	mov	sp,fp
    fea4:	dfc00117 	ldw	ra,4(sp)
    fea8:	df000017 	ldw	fp,0(sp)
    feac:	dec00204 	addi	sp,sp,8
    feb0:	f800283a 	ret

0000feb4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    feb4:	defff904 	addi	sp,sp,-28
    feb8:	dfc00615 	stw	ra,24(sp)
    febc:	df000515 	stw	fp,20(sp)
    fec0:	df000504 	addi	fp,sp,20
    fec4:	e13ffd15 	stw	r4,-12(fp)
    fec8:	e17ffe15 	stw	r5,-8(fp)
    fecc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fed0:	e0bffd17 	ldw	r2,-12(fp)
    fed4:	10000616 	blt	r2,zero,fef0 <read+0x3c>
    fed8:	e0bffd17 	ldw	r2,-12(fp)
    fedc:	10c00324 	muli	r3,r2,12
    fee0:	00800074 	movhi	r2,1
    fee4:	108ce004 	addi	r2,r2,13184
    fee8:	1885883a 	add	r2,r3,r2
    feec:	00000106 	br	fef4 <read+0x40>
    fef0:	0005883a 	mov	r2,zero
    fef4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fef8:	e0bffb17 	ldw	r2,-20(fp)
    fefc:	10002226 	beq	r2,zero,ff88 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ff00:	e0bffb17 	ldw	r2,-20(fp)
    ff04:	10800217 	ldw	r2,8(r2)
    ff08:	108000cc 	andi	r2,r2,3
    ff0c:	10800060 	cmpeqi	r2,r2,1
    ff10:	1000181e 	bne	r2,zero,ff74 <read+0xc0>
        (fd->dev->read))
    ff14:	e0bffb17 	ldw	r2,-20(fp)
    ff18:	10800017 	ldw	r2,0(r2)
    ff1c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ff20:	10001426 	beq	r2,zero,ff74 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    ff24:	e0bffb17 	ldw	r2,-20(fp)
    ff28:	10800017 	ldw	r2,0(r2)
    ff2c:	10800517 	ldw	r2,20(r2)
    ff30:	e0ffff17 	ldw	r3,-4(fp)
    ff34:	180d883a 	mov	r6,r3
    ff38:	e17ffe17 	ldw	r5,-8(fp)
    ff3c:	e13ffb17 	ldw	r4,-20(fp)
    ff40:	103ee83a 	callr	r2
    ff44:	e0bffc15 	stw	r2,-16(fp)
    ff48:	e0bffc17 	ldw	r2,-16(fp)
    ff4c:	1000070e 	bge	r2,zero,ff6c <read+0xb8>
        {
          ALT_ERRNO = -rval;
    ff50:	000fe780 	call	fe78 <alt_get_errno>
    ff54:	1007883a 	mov	r3,r2
    ff58:	e0bffc17 	ldw	r2,-16(fp)
    ff5c:	0085c83a 	sub	r2,zero,r2
    ff60:	18800015 	stw	r2,0(r3)
          return -1;
    ff64:	00bfffc4 	movi	r2,-1
    ff68:	00000c06 	br	ff9c <read+0xe8>
        }
        return rval;
    ff6c:	e0bffc17 	ldw	r2,-16(fp)
    ff70:	00000a06 	br	ff9c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    ff74:	000fe780 	call	fe78 <alt_get_errno>
    ff78:	1007883a 	mov	r3,r2
    ff7c:	00800344 	movi	r2,13
    ff80:	18800015 	stw	r2,0(r3)
    ff84:	00000406 	br	ff98 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    ff88:	000fe780 	call	fe78 <alt_get_errno>
    ff8c:	1007883a 	mov	r3,r2
    ff90:	00801444 	movi	r2,81
    ff94:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ff98:	00bfffc4 	movi	r2,-1
}
    ff9c:	e037883a 	mov	sp,fp
    ffa0:	dfc00117 	ldw	ra,4(sp)
    ffa4:	df000017 	ldw	fp,0(sp)
    ffa8:	dec00204 	addi	sp,sp,8
    ffac:	f800283a 	ret

0000ffb0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    ffb0:	defffe04 	addi	sp,sp,-8
    ffb4:	df000115 	stw	fp,4(sp)
    ffb8:	df000104 	addi	fp,sp,4
    ffbc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    ffc0:	e0bfff17 	ldw	r2,-4(fp)
    ffc4:	108000d0 	cmplti	r2,r2,3
    ffc8:	10000d1e 	bne	r2,zero,10000 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    ffcc:	00800074 	movhi	r2,1
    ffd0:	108ce004 	addi	r2,r2,13184
    ffd4:	e0ffff17 	ldw	r3,-4(fp)
    ffd8:	18c00324 	muli	r3,r3,12
    ffdc:	10c5883a 	add	r2,r2,r3
    ffe0:	10800204 	addi	r2,r2,8
    ffe4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    ffe8:	00800074 	movhi	r2,1
    ffec:	108ce004 	addi	r2,r2,13184
    fff0:	e0ffff17 	ldw	r3,-4(fp)
    fff4:	18c00324 	muli	r3,r3,12
    fff8:	10c5883a 	add	r2,r2,r3
    fffc:	10000015 	stw	zero,0(r2)
  }
}
   10000:	0001883a 	nop
   10004:	e037883a 	mov	sp,fp
   10008:	df000017 	ldw	fp,0(sp)
   1000c:	dec00104 	addi	sp,sp,4
   10010:	f800283a 	ret

00010014 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   10014:	defff904 	addi	sp,sp,-28
   10018:	df000615 	stw	fp,24(sp)
   1001c:	df000604 	addi	fp,sp,24
   10020:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10024:	0005303a 	rdctl	r2,status
   10028:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1002c:	e0fffe17 	ldw	r3,-8(fp)
   10030:	00bfff84 	movi	r2,-2
   10034:	1884703a 	and	r2,r3,r2
   10038:	1001703a 	wrctl	status,r2
  
  return context;
   1003c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   10040:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   10044:	d0a00c17 	ldw	r2,-32720(gp)
   10048:	10c000c4 	addi	r3,r2,3
   1004c:	00bfff04 	movi	r2,-4
   10050:	1884703a 	and	r2,r3,r2
   10054:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   10058:	d0e00c17 	ldw	r3,-32720(gp)
   1005c:	e0bfff17 	ldw	r2,-4(fp)
   10060:	1887883a 	add	r3,r3,r2
   10064:	00804034 	movhi	r2,256
   10068:	10800004 	addi	r2,r2,0
   1006c:	10c0062e 	bgeu	r2,r3,10088 <sbrk+0x74>
   10070:	e0bffb17 	ldw	r2,-20(fp)
   10074:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10078:	e0bffa17 	ldw	r2,-24(fp)
   1007c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   10080:	00bfffc4 	movi	r2,-1
   10084:	00000b06 	br	100b4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   10088:	d0a00c17 	ldw	r2,-32720(gp)
   1008c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   10090:	d0e00c17 	ldw	r3,-32720(gp)
   10094:	e0bfff17 	ldw	r2,-4(fp)
   10098:	1885883a 	add	r2,r3,r2
   1009c:	d0a00c15 	stw	r2,-32720(gp)
   100a0:	e0bffb17 	ldw	r2,-20(fp)
   100a4:	e0bffc15 	stw	r2,-16(fp)
   100a8:	e0bffc17 	ldw	r2,-16(fp)
   100ac:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   100b0:	e0bffd17 	ldw	r2,-12(fp)
} 
   100b4:	e037883a 	mov	sp,fp
   100b8:	df000017 	ldw	fp,0(sp)
   100bc:	dec00104 	addi	sp,sp,4
   100c0:	f800283a 	ret

000100c4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   100c4:	defffd04 	addi	sp,sp,-12
   100c8:	dfc00215 	stw	ra,8(sp)
   100cc:	df000115 	stw	fp,4(sp)
   100d0:	df000104 	addi	fp,sp,4
   100d4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   100d8:	e13fff17 	ldw	r4,-4(fp)
   100dc:	00110b00 	call	110b0 <alt_busy_sleep>
}
   100e0:	e037883a 	mov	sp,fp
   100e4:	dfc00117 	ldw	ra,4(sp)
   100e8:	df000017 	ldw	fp,0(sp)
   100ec:	dec00204 	addi	sp,sp,8
   100f0:	f800283a 	ret

000100f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   100f4:	defffe04 	addi	sp,sp,-8
   100f8:	dfc00115 	stw	ra,4(sp)
   100fc:	df000015 	stw	fp,0(sp)
   10100:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10104:	d0a00b17 	ldw	r2,-32724(gp)
   10108:	10000326 	beq	r2,zero,10118 <alt_get_errno+0x24>
   1010c:	d0a00b17 	ldw	r2,-32724(gp)
   10110:	103ee83a 	callr	r2
   10114:	00000106 	br	1011c <alt_get_errno+0x28>
   10118:	d0a6d804 	addi	r2,gp,-25760
}
   1011c:	e037883a 	mov	sp,fp
   10120:	dfc00117 	ldw	ra,4(sp)
   10124:	df000017 	ldw	fp,0(sp)
   10128:	dec00204 	addi	sp,sp,8
   1012c:	f800283a 	ret

00010130 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10130:	defff904 	addi	sp,sp,-28
   10134:	dfc00615 	stw	ra,24(sp)
   10138:	df000515 	stw	fp,20(sp)
   1013c:	df000504 	addi	fp,sp,20
   10140:	e13ffd15 	stw	r4,-12(fp)
   10144:	e17ffe15 	stw	r5,-8(fp)
   10148:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1014c:	e0bffd17 	ldw	r2,-12(fp)
   10150:	10000616 	blt	r2,zero,1016c <write+0x3c>
   10154:	e0bffd17 	ldw	r2,-12(fp)
   10158:	10c00324 	muli	r3,r2,12
   1015c:	00800074 	movhi	r2,1
   10160:	108ce004 	addi	r2,r2,13184
   10164:	1885883a 	add	r2,r3,r2
   10168:	00000106 	br	10170 <write+0x40>
   1016c:	0005883a 	mov	r2,zero
   10170:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   10174:	e0bffb17 	ldw	r2,-20(fp)
   10178:	10002126 	beq	r2,zero,10200 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1017c:	e0bffb17 	ldw	r2,-20(fp)
   10180:	10800217 	ldw	r2,8(r2)
   10184:	108000cc 	andi	r2,r2,3
   10188:	10001826 	beq	r2,zero,101ec <write+0xbc>
   1018c:	e0bffb17 	ldw	r2,-20(fp)
   10190:	10800017 	ldw	r2,0(r2)
   10194:	10800617 	ldw	r2,24(r2)
   10198:	10001426 	beq	r2,zero,101ec <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1019c:	e0bffb17 	ldw	r2,-20(fp)
   101a0:	10800017 	ldw	r2,0(r2)
   101a4:	10800617 	ldw	r2,24(r2)
   101a8:	e0ffff17 	ldw	r3,-4(fp)
   101ac:	180d883a 	mov	r6,r3
   101b0:	e17ffe17 	ldw	r5,-8(fp)
   101b4:	e13ffb17 	ldw	r4,-20(fp)
   101b8:	103ee83a 	callr	r2
   101bc:	e0bffc15 	stw	r2,-16(fp)
   101c0:	e0bffc17 	ldw	r2,-16(fp)
   101c4:	1000070e 	bge	r2,zero,101e4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   101c8:	00100f40 	call	100f4 <alt_get_errno>
   101cc:	1007883a 	mov	r3,r2
   101d0:	e0bffc17 	ldw	r2,-16(fp)
   101d4:	0085c83a 	sub	r2,zero,r2
   101d8:	18800015 	stw	r2,0(r3)
        return -1;
   101dc:	00bfffc4 	movi	r2,-1
   101e0:	00000c06 	br	10214 <write+0xe4>
      }
      return rval;
   101e4:	e0bffc17 	ldw	r2,-16(fp)
   101e8:	00000a06 	br	10214 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   101ec:	00100f40 	call	100f4 <alt_get_errno>
   101f0:	1007883a 	mov	r3,r2
   101f4:	00800344 	movi	r2,13
   101f8:	18800015 	stw	r2,0(r3)
   101fc:	00000406 	br	10210 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   10200:	00100f40 	call	100f4 <alt_get_errno>
   10204:	1007883a 	mov	r3,r2
   10208:	00801444 	movi	r2,81
   1020c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10210:	00bfffc4 	movi	r2,-1
}
   10214:	e037883a 	mov	sp,fp
   10218:	dfc00117 	ldw	ra,4(sp)
   1021c:	df000017 	ldw	fp,0(sp)
   10220:	dec00204 	addi	sp,sp,8
   10224:	f800283a 	ret

00010228 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   10228:	defffd04 	addi	sp,sp,-12
   1022c:	dfc00215 	stw	ra,8(sp)
   10230:	df000115 	stw	fp,4(sp)
   10234:	df000104 	addi	fp,sp,4
   10238:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1023c:	d1600804 	addi	r5,gp,-32736
   10240:	e13fff17 	ldw	r4,-4(fp)
   10244:	00112640 	call	11264 <alt_dev_llist_insert>
}
   10248:	e037883a 	mov	sp,fp
   1024c:	dfc00117 	ldw	ra,4(sp)
   10250:	df000017 	ldw	fp,0(sp)
   10254:	dec00204 	addi	sp,sp,8
   10258:	f800283a 	ret

0001025c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1025c:	defffd04 	addi	sp,sp,-12
   10260:	dfc00215 	stw	ra,8(sp)
   10264:	df000115 	stw	fp,4(sp)
   10268:	df000104 	addi	fp,sp,4
   1026c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   10270:	0011bd40 	call	11bd4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10274:	00800044 	movi	r2,1
   10278:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1027c:	0001883a 	nop
   10280:	e037883a 	mov	sp,fp
   10284:	dfc00117 	ldw	ra,4(sp)
   10288:	df000017 	ldw	fp,0(sp)
   1028c:	dec00204 	addi	sp,sp,8
   10290:	f800283a 	ret

00010294 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10294:	defffe04 	addi	sp,sp,-8
   10298:	dfc00115 	stw	ra,4(sp)
   1029c:	df000015 	stw	fp,0(sp)
   102a0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
   102a4:	00804034 	movhi	r2,256
   102a8:	10840004 	addi	r2,r2,4096
   102ac:	d0a6df15 	stw	r2,-25732(gp)
   102b0:	0080bef4 	movhi	r2,763
   102b4:	10bc2004 	addi	r2,r2,-3968
   102b8:	d0a6e015 	stw	r2,-25728(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
   102bc:	01c0fa04 	movi	r7,1000
   102c0:	01800104 	movi	r6,4
   102c4:	000b883a 	mov	r5,zero
   102c8:	01004034 	movhi	r4,256
   102cc:	21040804 	addi	r4,r4,4128
   102d0:	0010df00 	call	10df0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   102d4:	000d883a 	mov	r6,zero
   102d8:	000b883a 	mov	r5,zero
   102dc:	01000074 	movhi	r4,1
   102e0:	210d4a04 	addi	r4,r4,13608
   102e4:	00104740 	call	10474 <altera_avalon_jtag_uart_init>
   102e8:	01000074 	movhi	r4,1
   102ec:	210d4004 	addi	r4,r4,13568
   102f0:	00102280 	call	10228 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   102f4:	0001883a 	nop
}
   102f8:	0001883a 	nop
   102fc:	e037883a 	mov	sp,fp
   10300:	dfc00117 	ldw	ra,4(sp)
   10304:	df000017 	ldw	fp,0(sp)
   10308:	dec00204 	addi	sp,sp,8
   1030c:	f800283a 	ret

00010310 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   10310:	defffa04 	addi	sp,sp,-24
   10314:	dfc00515 	stw	ra,20(sp)
   10318:	df000415 	stw	fp,16(sp)
   1031c:	df000404 	addi	fp,sp,16
   10320:	e13ffd15 	stw	r4,-12(fp)
   10324:	e17ffe15 	stw	r5,-8(fp)
   10328:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1032c:	e0bffd17 	ldw	r2,-12(fp)
   10330:	10800017 	ldw	r2,0(r2)
   10334:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   10338:	e0bffc17 	ldw	r2,-16(fp)
   1033c:	10c00a04 	addi	r3,r2,40
   10340:	e0bffd17 	ldw	r2,-12(fp)
   10344:	10800217 	ldw	r2,8(r2)
   10348:	100f883a 	mov	r7,r2
   1034c:	e1bfff17 	ldw	r6,-4(fp)
   10350:	e17ffe17 	ldw	r5,-8(fp)
   10354:	1809883a 	mov	r4,r3
   10358:	00109380 	call	10938 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1035c:	e037883a 	mov	sp,fp
   10360:	dfc00117 	ldw	ra,4(sp)
   10364:	df000017 	ldw	fp,0(sp)
   10368:	dec00204 	addi	sp,sp,8
   1036c:	f800283a 	ret

00010370 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   10370:	defffa04 	addi	sp,sp,-24
   10374:	dfc00515 	stw	ra,20(sp)
   10378:	df000415 	stw	fp,16(sp)
   1037c:	df000404 	addi	fp,sp,16
   10380:	e13ffd15 	stw	r4,-12(fp)
   10384:	e17ffe15 	stw	r5,-8(fp)
   10388:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1038c:	e0bffd17 	ldw	r2,-12(fp)
   10390:	10800017 	ldw	r2,0(r2)
   10394:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   10398:	e0bffc17 	ldw	r2,-16(fp)
   1039c:	10c00a04 	addi	r3,r2,40
   103a0:	e0bffd17 	ldw	r2,-12(fp)
   103a4:	10800217 	ldw	r2,8(r2)
   103a8:	100f883a 	mov	r7,r2
   103ac:	e1bfff17 	ldw	r6,-4(fp)
   103b0:	e17ffe17 	ldw	r5,-8(fp)
   103b4:	1809883a 	mov	r4,r3
   103b8:	0010b540 	call	10b54 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   103bc:	e037883a 	mov	sp,fp
   103c0:	dfc00117 	ldw	ra,4(sp)
   103c4:	df000017 	ldw	fp,0(sp)
   103c8:	dec00204 	addi	sp,sp,8
   103cc:	f800283a 	ret

000103d0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   103d0:	defffc04 	addi	sp,sp,-16
   103d4:	dfc00315 	stw	ra,12(sp)
   103d8:	df000215 	stw	fp,8(sp)
   103dc:	df000204 	addi	fp,sp,8
   103e0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   103e4:	e0bfff17 	ldw	r2,-4(fp)
   103e8:	10800017 	ldw	r2,0(r2)
   103ec:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   103f0:	e0bffe17 	ldw	r2,-8(fp)
   103f4:	10c00a04 	addi	r3,r2,40
   103f8:	e0bfff17 	ldw	r2,-4(fp)
   103fc:	10800217 	ldw	r2,8(r2)
   10400:	100b883a 	mov	r5,r2
   10404:	1809883a 	mov	r4,r3
   10408:	00107e00 	call	107e0 <altera_avalon_jtag_uart_close>
}
   1040c:	e037883a 	mov	sp,fp
   10410:	dfc00117 	ldw	ra,4(sp)
   10414:	df000017 	ldw	fp,0(sp)
   10418:	dec00204 	addi	sp,sp,8
   1041c:	f800283a 	ret

00010420 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   10420:	defffa04 	addi	sp,sp,-24
   10424:	dfc00515 	stw	ra,20(sp)
   10428:	df000415 	stw	fp,16(sp)
   1042c:	df000404 	addi	fp,sp,16
   10430:	e13ffd15 	stw	r4,-12(fp)
   10434:	e17ffe15 	stw	r5,-8(fp)
   10438:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1043c:	e0bffd17 	ldw	r2,-12(fp)
   10440:	10800017 	ldw	r2,0(r2)
   10444:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   10448:	e0bffc17 	ldw	r2,-16(fp)
   1044c:	10800a04 	addi	r2,r2,40
   10450:	e1bfff17 	ldw	r6,-4(fp)
   10454:	e17ffe17 	ldw	r5,-8(fp)
   10458:	1009883a 	mov	r4,r2
   1045c:	00108480 	call	10848 <altera_avalon_jtag_uart_ioctl>
}
   10460:	e037883a 	mov	sp,fp
   10464:	dfc00117 	ldw	ra,4(sp)
   10468:	df000017 	ldw	fp,0(sp)
   1046c:	dec00204 	addi	sp,sp,8
   10470:	f800283a 	ret

00010474 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   10474:	defffa04 	addi	sp,sp,-24
   10478:	dfc00515 	stw	ra,20(sp)
   1047c:	df000415 	stw	fp,16(sp)
   10480:	df000404 	addi	fp,sp,16
   10484:	e13ffd15 	stw	r4,-12(fp)
   10488:	e17ffe15 	stw	r5,-8(fp)
   1048c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10490:	e0bffd17 	ldw	r2,-12(fp)
   10494:	00c00044 	movi	r3,1
   10498:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1049c:	e0bffd17 	ldw	r2,-12(fp)
   104a0:	10800017 	ldw	r2,0(r2)
   104a4:	10800104 	addi	r2,r2,4
   104a8:	1007883a 	mov	r3,r2
   104ac:	e0bffd17 	ldw	r2,-12(fp)
   104b0:	10800817 	ldw	r2,32(r2)
   104b4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   104b8:	e0bffe17 	ldw	r2,-8(fp)
   104bc:	e0ffff17 	ldw	r3,-4(fp)
   104c0:	d8000015 	stw	zero,0(sp)
   104c4:	e1fffd17 	ldw	r7,-12(fp)
   104c8:	01800074 	movhi	r6,1
   104cc:	31814d04 	addi	r6,r6,1332
   104d0:	180b883a 	mov	r5,r3
   104d4:	1009883a 	mov	r4,r2
   104d8:	00113fc0 	call	113fc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   104dc:	e0bffd17 	ldw	r2,-12(fp)
   104e0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   104e4:	e0bffd17 	ldw	r2,-12(fp)
   104e8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   104ec:	d0e6e217 	ldw	r3,-25720(gp)
   104f0:	e1fffd17 	ldw	r7,-12(fp)
   104f4:	01800074 	movhi	r6,1
   104f8:	3181d004 	addi	r6,r6,1856
   104fc:	180b883a 	mov	r5,r3
   10500:	1009883a 	mov	r4,r2
   10504:	0010f840 	call	10f84 <alt_alarm_start>
   10508:	1000040e 	bge	r2,zero,1051c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1050c:	e0fffd17 	ldw	r3,-12(fp)
   10510:	00a00034 	movhi	r2,32768
   10514:	10bfffc4 	addi	r2,r2,-1
   10518:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1051c:	0001883a 	nop
   10520:	e037883a 	mov	sp,fp
   10524:	dfc00117 	ldw	ra,4(sp)
   10528:	df000017 	ldw	fp,0(sp)
   1052c:	dec00204 	addi	sp,sp,8
   10530:	f800283a 	ret

00010534 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   10534:	defff804 	addi	sp,sp,-32
   10538:	df000715 	stw	fp,28(sp)
   1053c:	df000704 	addi	fp,sp,28
   10540:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   10544:	e0bfff17 	ldw	r2,-4(fp)
   10548:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   1054c:	e0bffb17 	ldw	r2,-20(fp)
   10550:	10800017 	ldw	r2,0(r2)
   10554:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10558:	e0bffc17 	ldw	r2,-16(fp)
   1055c:	10800104 	addi	r2,r2,4
   10560:	10800037 	ldwio	r2,0(r2)
   10564:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   10568:	e0bffd17 	ldw	r2,-12(fp)
   1056c:	1080c00c 	andi	r2,r2,768
   10570:	10006d26 	beq	r2,zero,10728 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   10574:	e0bffd17 	ldw	r2,-12(fp)
   10578:	1080400c 	andi	r2,r2,256
   1057c:	10003526 	beq	r2,zero,10654 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   10580:	00800074 	movhi	r2,1
   10584:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10588:	e0bffb17 	ldw	r2,-20(fp)
   1058c:	10800a17 	ldw	r2,40(r2)
   10590:	10800044 	addi	r2,r2,1
   10594:	1081ffcc 	andi	r2,r2,2047
   10598:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   1059c:	e0bffb17 	ldw	r2,-20(fp)
   105a0:	10c00b17 	ldw	r3,44(r2)
   105a4:	e0bffe17 	ldw	r2,-8(fp)
   105a8:	18801526 	beq	r3,r2,10600 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   105ac:	e0bffc17 	ldw	r2,-16(fp)
   105b0:	10800037 	ldwio	r2,0(r2)
   105b4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   105b8:	e0bff917 	ldw	r2,-28(fp)
   105bc:	10a0000c 	andi	r2,r2,32768
   105c0:	10001126 	beq	r2,zero,10608 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   105c4:	e0bffb17 	ldw	r2,-20(fp)
   105c8:	10800a17 	ldw	r2,40(r2)
   105cc:	e0fff917 	ldw	r3,-28(fp)
   105d0:	1809883a 	mov	r4,r3
   105d4:	e0fffb17 	ldw	r3,-20(fp)
   105d8:	1885883a 	add	r2,r3,r2
   105dc:	10800e04 	addi	r2,r2,56
   105e0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   105e4:	e0bffb17 	ldw	r2,-20(fp)
   105e8:	10800a17 	ldw	r2,40(r2)
   105ec:	10800044 	addi	r2,r2,1
   105f0:	10c1ffcc 	andi	r3,r2,2047
   105f4:	e0bffb17 	ldw	r2,-20(fp)
   105f8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   105fc:	003fe206 	br	10588 <__alt_data_end+0xff010588>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   10600:	0001883a 	nop
   10604:	00000106 	br	1060c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   10608:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1060c:	e0bff917 	ldw	r2,-28(fp)
   10610:	10bfffec 	andhi	r2,r2,65535
   10614:	10000f26 	beq	r2,zero,10654 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10618:	e0bffb17 	ldw	r2,-20(fp)
   1061c:	10c00817 	ldw	r3,32(r2)
   10620:	00bfff84 	movi	r2,-2
   10624:	1886703a 	and	r3,r3,r2
   10628:	e0bffb17 	ldw	r2,-20(fp)
   1062c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   10630:	e0bffc17 	ldw	r2,-16(fp)
   10634:	10800104 	addi	r2,r2,4
   10638:	1007883a 	mov	r3,r2
   1063c:	e0bffb17 	ldw	r2,-20(fp)
   10640:	10800817 	ldw	r2,32(r2)
   10644:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10648:	e0bffc17 	ldw	r2,-16(fp)
   1064c:	10800104 	addi	r2,r2,4
   10650:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   10654:	e0bffd17 	ldw	r2,-12(fp)
   10658:	1080800c 	andi	r2,r2,512
   1065c:	103fbe26 	beq	r2,zero,10558 <__alt_data_end+0xff010558>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   10660:	e0bffd17 	ldw	r2,-12(fp)
   10664:	1004d43a 	srli	r2,r2,16
   10668:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1066c:	00001406 	br	106c0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   10670:	e0bffc17 	ldw	r2,-16(fp)
   10674:	e0fffb17 	ldw	r3,-20(fp)
   10678:	18c00d17 	ldw	r3,52(r3)
   1067c:	e13ffb17 	ldw	r4,-20(fp)
   10680:	20c7883a 	add	r3,r4,r3
   10684:	18c20e04 	addi	r3,r3,2104
   10688:	18c00003 	ldbu	r3,0(r3)
   1068c:	18c03fcc 	andi	r3,r3,255
   10690:	18c0201c 	xori	r3,r3,128
   10694:	18ffe004 	addi	r3,r3,-128
   10698:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1069c:	e0bffb17 	ldw	r2,-20(fp)
   106a0:	10800d17 	ldw	r2,52(r2)
   106a4:	10800044 	addi	r2,r2,1
   106a8:	10c1ffcc 	andi	r3,r2,2047
   106ac:	e0bffb17 	ldw	r2,-20(fp)
   106b0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   106b4:	e0bffa17 	ldw	r2,-24(fp)
   106b8:	10bfffc4 	addi	r2,r2,-1
   106bc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   106c0:	e0bffa17 	ldw	r2,-24(fp)
   106c4:	10000526 	beq	r2,zero,106dc <altera_avalon_jtag_uart_irq+0x1a8>
   106c8:	e0bffb17 	ldw	r2,-20(fp)
   106cc:	10c00d17 	ldw	r3,52(r2)
   106d0:	e0bffb17 	ldw	r2,-20(fp)
   106d4:	10800c17 	ldw	r2,48(r2)
   106d8:	18bfe51e 	bne	r3,r2,10670 <__alt_data_end+0xff010670>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   106dc:	e0bffa17 	ldw	r2,-24(fp)
   106e0:	103f9d26 	beq	r2,zero,10558 <__alt_data_end+0xff010558>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   106e4:	e0bffb17 	ldw	r2,-20(fp)
   106e8:	10c00817 	ldw	r3,32(r2)
   106ec:	00bfff44 	movi	r2,-3
   106f0:	1886703a 	and	r3,r3,r2
   106f4:	e0bffb17 	ldw	r2,-20(fp)
   106f8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   106fc:	e0bffb17 	ldw	r2,-20(fp)
   10700:	10800017 	ldw	r2,0(r2)
   10704:	10800104 	addi	r2,r2,4
   10708:	1007883a 	mov	r3,r2
   1070c:	e0bffb17 	ldw	r2,-20(fp)
   10710:	10800817 	ldw	r2,32(r2)
   10714:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10718:	e0bffc17 	ldw	r2,-16(fp)
   1071c:	10800104 	addi	r2,r2,4
   10720:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   10724:	003f8c06 	br	10558 <__alt_data_end+0xff010558>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   10728:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   1072c:	0001883a 	nop
   10730:	e037883a 	mov	sp,fp
   10734:	df000017 	ldw	fp,0(sp)
   10738:	dec00104 	addi	sp,sp,4
   1073c:	f800283a 	ret

00010740 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   10740:	defff804 	addi	sp,sp,-32
   10744:	df000715 	stw	fp,28(sp)
   10748:	df000704 	addi	fp,sp,28
   1074c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   10750:	e0bffb17 	ldw	r2,-20(fp)
   10754:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   10758:	e0bff917 	ldw	r2,-28(fp)
   1075c:	10800017 	ldw	r2,0(r2)
   10760:	10800104 	addi	r2,r2,4
   10764:	10800037 	ldwio	r2,0(r2)
   10768:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1076c:	e0bffa17 	ldw	r2,-24(fp)
   10770:	1081000c 	andi	r2,r2,1024
   10774:	10000b26 	beq	r2,zero,107a4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   10778:	e0bff917 	ldw	r2,-28(fp)
   1077c:	10800017 	ldw	r2,0(r2)
   10780:	10800104 	addi	r2,r2,4
   10784:	1007883a 	mov	r3,r2
   10788:	e0bff917 	ldw	r2,-28(fp)
   1078c:	10800817 	ldw	r2,32(r2)
   10790:	10810014 	ori	r2,r2,1024
   10794:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   10798:	e0bff917 	ldw	r2,-28(fp)
   1079c:	10000915 	stw	zero,36(r2)
   107a0:	00000a06 	br	107cc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   107a4:	e0bff917 	ldw	r2,-28(fp)
   107a8:	10c00917 	ldw	r3,36(r2)
   107ac:	00a00034 	movhi	r2,32768
   107b0:	10bfff04 	addi	r2,r2,-4
   107b4:	10c00536 	bltu	r2,r3,107cc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   107b8:	e0bff917 	ldw	r2,-28(fp)
   107bc:	10800917 	ldw	r2,36(r2)
   107c0:	10c00044 	addi	r3,r2,1
   107c4:	e0bff917 	ldw	r2,-28(fp)
   107c8:	10c00915 	stw	r3,36(r2)
   107cc:	d0a6e217 	ldw	r2,-25720(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   107d0:	e037883a 	mov	sp,fp
   107d4:	df000017 	ldw	fp,0(sp)
   107d8:	dec00104 	addi	sp,sp,4
   107dc:	f800283a 	ret

000107e0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   107e0:	defffd04 	addi	sp,sp,-12
   107e4:	df000215 	stw	fp,8(sp)
   107e8:	df000204 	addi	fp,sp,8
   107ec:	e13ffe15 	stw	r4,-8(fp)
   107f0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   107f4:	00000506 	br	1080c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   107f8:	e0bfff17 	ldw	r2,-4(fp)
   107fc:	1090000c 	andi	r2,r2,16384
   10800:	10000226 	beq	r2,zero,1080c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   10804:	00bffd44 	movi	r2,-11
   10808:	00000b06 	br	10838 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1080c:	e0bffe17 	ldw	r2,-8(fp)
   10810:	10c00d17 	ldw	r3,52(r2)
   10814:	e0bffe17 	ldw	r2,-8(fp)
   10818:	10800c17 	ldw	r2,48(r2)
   1081c:	18800526 	beq	r3,r2,10834 <altera_avalon_jtag_uart_close+0x54>
   10820:	e0bffe17 	ldw	r2,-8(fp)
   10824:	10c00917 	ldw	r3,36(r2)
   10828:	e0bffe17 	ldw	r2,-8(fp)
   1082c:	10800117 	ldw	r2,4(r2)
   10830:	18bff136 	bltu	r3,r2,107f8 <__alt_data_end+0xff0107f8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   10834:	0005883a 	mov	r2,zero
}
   10838:	e037883a 	mov	sp,fp
   1083c:	df000017 	ldw	fp,0(sp)
   10840:	dec00104 	addi	sp,sp,4
   10844:	f800283a 	ret

00010848 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   10848:	defffa04 	addi	sp,sp,-24
   1084c:	df000515 	stw	fp,20(sp)
   10850:	df000504 	addi	fp,sp,20
   10854:	e13ffd15 	stw	r4,-12(fp)
   10858:	e17ffe15 	stw	r5,-8(fp)
   1085c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   10860:	00bff9c4 	movi	r2,-25
   10864:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   10868:	e0bffe17 	ldw	r2,-8(fp)
   1086c:	10da8060 	cmpeqi	r3,r2,27137
   10870:	1800031e 	bne	r3,zero,10880 <altera_avalon_jtag_uart_ioctl+0x38>
   10874:	109a80a0 	cmpeqi	r2,r2,27138
   10878:	1000181e 	bne	r2,zero,108dc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   1087c:	00002906 	br	10924 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   10880:	e0bffd17 	ldw	r2,-12(fp)
   10884:	10c00117 	ldw	r3,4(r2)
   10888:	00a00034 	movhi	r2,32768
   1088c:	10bfffc4 	addi	r2,r2,-1
   10890:	18802126 	beq	r3,r2,10918 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   10894:	e0bfff17 	ldw	r2,-4(fp)
   10898:	10800017 	ldw	r2,0(r2)
   1089c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   108a0:	e0bffc17 	ldw	r2,-16(fp)
   108a4:	10800090 	cmplti	r2,r2,2
   108a8:	1000061e 	bne	r2,zero,108c4 <altera_avalon_jtag_uart_ioctl+0x7c>
   108ac:	e0fffc17 	ldw	r3,-16(fp)
   108b0:	00a00034 	movhi	r2,32768
   108b4:	10bfffc4 	addi	r2,r2,-1
   108b8:	18800226 	beq	r3,r2,108c4 <altera_avalon_jtag_uart_ioctl+0x7c>
   108bc:	e0bffc17 	ldw	r2,-16(fp)
   108c0:	00000206 	br	108cc <altera_avalon_jtag_uart_ioctl+0x84>
   108c4:	00a00034 	movhi	r2,32768
   108c8:	10bfff84 	addi	r2,r2,-2
   108cc:	e0fffd17 	ldw	r3,-12(fp)
   108d0:	18800115 	stw	r2,4(r3)
      rc = 0;
   108d4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   108d8:	00000f06 	br	10918 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   108dc:	e0bffd17 	ldw	r2,-12(fp)
   108e0:	10c00117 	ldw	r3,4(r2)
   108e4:	00a00034 	movhi	r2,32768
   108e8:	10bfffc4 	addi	r2,r2,-1
   108ec:	18800c26 	beq	r3,r2,10920 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   108f0:	e0bffd17 	ldw	r2,-12(fp)
   108f4:	10c00917 	ldw	r3,36(r2)
   108f8:	e0bffd17 	ldw	r2,-12(fp)
   108fc:	10800117 	ldw	r2,4(r2)
   10900:	1885803a 	cmpltu	r2,r3,r2
   10904:	10c03fcc 	andi	r3,r2,255
   10908:	e0bfff17 	ldw	r2,-4(fp)
   1090c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   10910:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10914:	00000206 	br	10920 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   10918:	0001883a 	nop
   1091c:	00000106 	br	10924 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   10920:	0001883a 	nop

  default:
    break;
  }

  return rc;
   10924:	e0bffb17 	ldw	r2,-20(fp)
}
   10928:	e037883a 	mov	sp,fp
   1092c:	df000017 	ldw	fp,0(sp)
   10930:	dec00104 	addi	sp,sp,4
   10934:	f800283a 	ret

00010938 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   10938:	defff304 	addi	sp,sp,-52
   1093c:	dfc00c15 	stw	ra,48(sp)
   10940:	df000b15 	stw	fp,44(sp)
   10944:	df000b04 	addi	fp,sp,44
   10948:	e13ffc15 	stw	r4,-16(fp)
   1094c:	e17ffd15 	stw	r5,-12(fp)
   10950:	e1bffe15 	stw	r6,-8(fp)
   10954:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   10958:	e0bffd17 	ldw	r2,-12(fp)
   1095c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10960:	00004706 	br	10a80 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   10964:	e0bffc17 	ldw	r2,-16(fp)
   10968:	10800a17 	ldw	r2,40(r2)
   1096c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   10970:	e0bffc17 	ldw	r2,-16(fp)
   10974:	10800b17 	ldw	r2,44(r2)
   10978:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   1097c:	e0fff717 	ldw	r3,-36(fp)
   10980:	e0bff817 	ldw	r2,-32(fp)
   10984:	18800536 	bltu	r3,r2,1099c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   10988:	e0fff717 	ldw	r3,-36(fp)
   1098c:	e0bff817 	ldw	r2,-32(fp)
   10990:	1885c83a 	sub	r2,r3,r2
   10994:	e0bff615 	stw	r2,-40(fp)
   10998:	00000406 	br	109ac <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1099c:	00c20004 	movi	r3,2048
   109a0:	e0bff817 	ldw	r2,-32(fp)
   109a4:	1885c83a 	sub	r2,r3,r2
   109a8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   109ac:	e0bff617 	ldw	r2,-40(fp)
   109b0:	10001e26 	beq	r2,zero,10a2c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   109b4:	e0fffe17 	ldw	r3,-8(fp)
   109b8:	e0bff617 	ldw	r2,-40(fp)
   109bc:	1880022e 	bgeu	r3,r2,109c8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   109c0:	e0bffe17 	ldw	r2,-8(fp)
   109c4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   109c8:	e0bffc17 	ldw	r2,-16(fp)
   109cc:	10c00e04 	addi	r3,r2,56
   109d0:	e0bff817 	ldw	r2,-32(fp)
   109d4:	1885883a 	add	r2,r3,r2
   109d8:	e1bff617 	ldw	r6,-40(fp)
   109dc:	100b883a 	mov	r5,r2
   109e0:	e13ff517 	ldw	r4,-44(fp)
   109e4:	0008c680 	call	8c68 <memcpy>
      ptr   += n;
   109e8:	e0fff517 	ldw	r3,-44(fp)
   109ec:	e0bff617 	ldw	r2,-40(fp)
   109f0:	1885883a 	add	r2,r3,r2
   109f4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   109f8:	e0fffe17 	ldw	r3,-8(fp)
   109fc:	e0bff617 	ldw	r2,-40(fp)
   10a00:	1885c83a 	sub	r2,r3,r2
   10a04:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10a08:	e0fff817 	ldw	r3,-32(fp)
   10a0c:	e0bff617 	ldw	r2,-40(fp)
   10a10:	1885883a 	add	r2,r3,r2
   10a14:	10c1ffcc 	andi	r3,r2,2047
   10a18:	e0bffc17 	ldw	r2,-16(fp)
   10a1c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   10a20:	e0bffe17 	ldw	r2,-8(fp)
   10a24:	00bfcf16 	blt	zero,r2,10964 <__alt_data_end+0xff010964>
   10a28:	00000106 	br	10a30 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   10a2c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   10a30:	e0fff517 	ldw	r3,-44(fp)
   10a34:	e0bffd17 	ldw	r2,-12(fp)
   10a38:	1880141e 	bne	r3,r2,10a8c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   10a3c:	e0bfff17 	ldw	r2,-4(fp)
   10a40:	1090000c 	andi	r2,r2,16384
   10a44:	1000131e 	bne	r2,zero,10a94 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   10a48:	0001883a 	nop
   10a4c:	e0bffc17 	ldw	r2,-16(fp)
   10a50:	10c00a17 	ldw	r3,40(r2)
   10a54:	e0bff717 	ldw	r2,-36(fp)
   10a58:	1880051e 	bne	r3,r2,10a70 <altera_avalon_jtag_uart_read+0x138>
   10a5c:	e0bffc17 	ldw	r2,-16(fp)
   10a60:	10c00917 	ldw	r3,36(r2)
   10a64:	e0bffc17 	ldw	r2,-16(fp)
   10a68:	10800117 	ldw	r2,4(r2)
   10a6c:	18bff736 	bltu	r3,r2,10a4c <__alt_data_end+0xff010a4c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   10a70:	e0bffc17 	ldw	r2,-16(fp)
   10a74:	10c00a17 	ldw	r3,40(r2)
   10a78:	e0bff717 	ldw	r2,-36(fp)
   10a7c:	18800726 	beq	r3,r2,10a9c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10a80:	e0bffe17 	ldw	r2,-8(fp)
   10a84:	00bfb716 	blt	zero,r2,10964 <__alt_data_end+0xff010964>
   10a88:	00000506 	br	10aa0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   10a8c:	0001883a 	nop
   10a90:	00000306 	br	10aa0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   10a94:	0001883a 	nop
   10a98:	00000106 	br	10aa0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   10a9c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   10aa0:	e0fff517 	ldw	r3,-44(fp)
   10aa4:	e0bffd17 	ldw	r2,-12(fp)
   10aa8:	18801826 	beq	r3,r2,10b0c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10aac:	0005303a 	rdctl	r2,status
   10ab0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ab4:	e0fffb17 	ldw	r3,-20(fp)
   10ab8:	00bfff84 	movi	r2,-2
   10abc:	1884703a 	and	r2,r3,r2
   10ac0:	1001703a 	wrctl	status,r2
  
  return context;
   10ac4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   10ac8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10acc:	e0bffc17 	ldw	r2,-16(fp)
   10ad0:	10800817 	ldw	r2,32(r2)
   10ad4:	10c00054 	ori	r3,r2,1
   10ad8:	e0bffc17 	ldw	r2,-16(fp)
   10adc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10ae0:	e0bffc17 	ldw	r2,-16(fp)
   10ae4:	10800017 	ldw	r2,0(r2)
   10ae8:	10800104 	addi	r2,r2,4
   10aec:	1007883a 	mov	r3,r2
   10af0:	e0bffc17 	ldw	r2,-16(fp)
   10af4:	10800817 	ldw	r2,32(r2)
   10af8:	18800035 	stwio	r2,0(r3)
   10afc:	e0bffa17 	ldw	r2,-24(fp)
   10b00:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10b04:	e0bff917 	ldw	r2,-28(fp)
   10b08:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   10b0c:	e0fff517 	ldw	r3,-44(fp)
   10b10:	e0bffd17 	ldw	r2,-12(fp)
   10b14:	18800426 	beq	r3,r2,10b28 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   10b18:	e0fff517 	ldw	r3,-44(fp)
   10b1c:	e0bffd17 	ldw	r2,-12(fp)
   10b20:	1885c83a 	sub	r2,r3,r2
   10b24:	00000606 	br	10b40 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   10b28:	e0bfff17 	ldw	r2,-4(fp)
   10b2c:	1090000c 	andi	r2,r2,16384
   10b30:	10000226 	beq	r2,zero,10b3c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   10b34:	00bffd44 	movi	r2,-11
   10b38:	00000106 	br	10b40 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   10b3c:	00bffec4 	movi	r2,-5
}
   10b40:	e037883a 	mov	sp,fp
   10b44:	dfc00117 	ldw	ra,4(sp)
   10b48:	df000017 	ldw	fp,0(sp)
   10b4c:	dec00204 	addi	sp,sp,8
   10b50:	f800283a 	ret

00010b54 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10b54:	defff304 	addi	sp,sp,-52
   10b58:	dfc00c15 	stw	ra,48(sp)
   10b5c:	df000b15 	stw	fp,44(sp)
   10b60:	df000b04 	addi	fp,sp,44
   10b64:	e13ffc15 	stw	r4,-16(fp)
   10b68:	e17ffd15 	stw	r5,-12(fp)
   10b6c:	e1bffe15 	stw	r6,-8(fp)
   10b70:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   10b74:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   10b78:	e0bffd17 	ldw	r2,-12(fp)
   10b7c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10b80:	00003706 	br	10c60 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   10b84:	e0bffc17 	ldw	r2,-16(fp)
   10b88:	10800c17 	ldw	r2,48(r2)
   10b8c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   10b90:	e0bffc17 	ldw	r2,-16(fp)
   10b94:	10800d17 	ldw	r2,52(r2)
   10b98:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   10b9c:	e0fff917 	ldw	r3,-28(fp)
   10ba0:	e0bff517 	ldw	r2,-44(fp)
   10ba4:	1880062e 	bgeu	r3,r2,10bc0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   10ba8:	e0fff517 	ldw	r3,-44(fp)
   10bac:	e0bff917 	ldw	r2,-28(fp)
   10bb0:	1885c83a 	sub	r2,r3,r2
   10bb4:	10bfffc4 	addi	r2,r2,-1
   10bb8:	e0bff615 	stw	r2,-40(fp)
   10bbc:	00000b06 	br	10bec <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   10bc0:	e0bff517 	ldw	r2,-44(fp)
   10bc4:	10000526 	beq	r2,zero,10bdc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   10bc8:	00c20004 	movi	r3,2048
   10bcc:	e0bff917 	ldw	r2,-28(fp)
   10bd0:	1885c83a 	sub	r2,r3,r2
   10bd4:	e0bff615 	stw	r2,-40(fp)
   10bd8:	00000406 	br	10bec <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   10bdc:	00c1ffc4 	movi	r3,2047
   10be0:	e0bff917 	ldw	r2,-28(fp)
   10be4:	1885c83a 	sub	r2,r3,r2
   10be8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10bec:	e0bff617 	ldw	r2,-40(fp)
   10bf0:	10001e26 	beq	r2,zero,10c6c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   10bf4:	e0fffe17 	ldw	r3,-8(fp)
   10bf8:	e0bff617 	ldw	r2,-40(fp)
   10bfc:	1880022e 	bgeu	r3,r2,10c08 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   10c00:	e0bffe17 	ldw	r2,-8(fp)
   10c04:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   10c08:	e0bffc17 	ldw	r2,-16(fp)
   10c0c:	10c20e04 	addi	r3,r2,2104
   10c10:	e0bff917 	ldw	r2,-28(fp)
   10c14:	1885883a 	add	r2,r3,r2
   10c18:	e1bff617 	ldw	r6,-40(fp)
   10c1c:	e17ffd17 	ldw	r5,-12(fp)
   10c20:	1009883a 	mov	r4,r2
   10c24:	0008c680 	call	8c68 <memcpy>
      ptr   += n;
   10c28:	e0fffd17 	ldw	r3,-12(fp)
   10c2c:	e0bff617 	ldw	r2,-40(fp)
   10c30:	1885883a 	add	r2,r3,r2
   10c34:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   10c38:	e0fffe17 	ldw	r3,-8(fp)
   10c3c:	e0bff617 	ldw	r2,-40(fp)
   10c40:	1885c83a 	sub	r2,r3,r2
   10c44:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10c48:	e0fff917 	ldw	r3,-28(fp)
   10c4c:	e0bff617 	ldw	r2,-40(fp)
   10c50:	1885883a 	add	r2,r3,r2
   10c54:	10c1ffcc 	andi	r3,r2,2047
   10c58:	e0bffc17 	ldw	r2,-16(fp)
   10c5c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10c60:	e0bffe17 	ldw	r2,-8(fp)
   10c64:	00bfc716 	blt	zero,r2,10b84 <__alt_data_end+0xff010b84>
   10c68:	00000106 	br	10c70 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   10c6c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10c70:	0005303a 	rdctl	r2,status
   10c74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c78:	e0fffb17 	ldw	r3,-20(fp)
   10c7c:	00bfff84 	movi	r2,-2
   10c80:	1884703a 	and	r2,r3,r2
   10c84:	1001703a 	wrctl	status,r2
  
  return context;
   10c88:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   10c8c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10c90:	e0bffc17 	ldw	r2,-16(fp)
   10c94:	10800817 	ldw	r2,32(r2)
   10c98:	10c00094 	ori	r3,r2,2
   10c9c:	e0bffc17 	ldw	r2,-16(fp)
   10ca0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10ca4:	e0bffc17 	ldw	r2,-16(fp)
   10ca8:	10800017 	ldw	r2,0(r2)
   10cac:	10800104 	addi	r2,r2,4
   10cb0:	1007883a 	mov	r3,r2
   10cb4:	e0bffc17 	ldw	r2,-16(fp)
   10cb8:	10800817 	ldw	r2,32(r2)
   10cbc:	18800035 	stwio	r2,0(r3)
   10cc0:	e0bffa17 	ldw	r2,-24(fp)
   10cc4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10cc8:	e0bff817 	ldw	r2,-32(fp)
   10ccc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   10cd0:	e0bffe17 	ldw	r2,-8(fp)
   10cd4:	0080100e 	bge	zero,r2,10d18 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   10cd8:	e0bfff17 	ldw	r2,-4(fp)
   10cdc:	1090000c 	andi	r2,r2,16384
   10ce0:	1000101e 	bne	r2,zero,10d24 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   10ce4:	0001883a 	nop
   10ce8:	e0bffc17 	ldw	r2,-16(fp)
   10cec:	10c00d17 	ldw	r3,52(r2)
   10cf0:	e0bff517 	ldw	r2,-44(fp)
   10cf4:	1880051e 	bne	r3,r2,10d0c <altera_avalon_jtag_uart_write+0x1b8>
   10cf8:	e0bffc17 	ldw	r2,-16(fp)
   10cfc:	10c00917 	ldw	r3,36(r2)
   10d00:	e0bffc17 	ldw	r2,-16(fp)
   10d04:	10800117 	ldw	r2,4(r2)
   10d08:	18bff736 	bltu	r3,r2,10ce8 <__alt_data_end+0xff010ce8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   10d0c:	e0bffc17 	ldw	r2,-16(fp)
   10d10:	10800917 	ldw	r2,36(r2)
   10d14:	1000051e 	bne	r2,zero,10d2c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   10d18:	e0bffe17 	ldw	r2,-8(fp)
   10d1c:	00bfd016 	blt	zero,r2,10c60 <__alt_data_end+0xff010c60>
   10d20:	00000306 	br	10d30 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   10d24:	0001883a 	nop
   10d28:	00000106 	br	10d30 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   10d2c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   10d30:	e0fffd17 	ldw	r3,-12(fp)
   10d34:	e0bff717 	ldw	r2,-36(fp)
   10d38:	18800426 	beq	r3,r2,10d4c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   10d3c:	e0fffd17 	ldw	r3,-12(fp)
   10d40:	e0bff717 	ldw	r2,-36(fp)
   10d44:	1885c83a 	sub	r2,r3,r2
   10d48:	00000606 	br	10d64 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   10d4c:	e0bfff17 	ldw	r2,-4(fp)
   10d50:	1090000c 	andi	r2,r2,16384
   10d54:	10000226 	beq	r2,zero,10d60 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   10d58:	00bffd44 	movi	r2,-11
   10d5c:	00000106 	br	10d64 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   10d60:	00bffec4 	movi	r2,-5
}
   10d64:	e037883a 	mov	sp,fp
   10d68:	dfc00117 	ldw	ra,4(sp)
   10d6c:	df000017 	ldw	fp,0(sp)
   10d70:	dec00204 	addi	sp,sp,8
   10d74:	f800283a 	ret

00010d78 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   10d78:	defffa04 	addi	sp,sp,-24
   10d7c:	dfc00515 	stw	ra,20(sp)
   10d80:	df000415 	stw	fp,16(sp)
   10d84:	df000404 	addi	fp,sp,16
   10d88:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   10d8c:	0007883a 	mov	r3,zero
   10d90:	e0bfff17 	ldw	r2,-4(fp)
   10d94:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   10d98:	e0bfff17 	ldw	r2,-4(fp)
   10d9c:	10800104 	addi	r2,r2,4
   10da0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10da4:	0005303a 	rdctl	r2,status
   10da8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10dac:	e0fffd17 	ldw	r3,-12(fp)
   10db0:	00bfff84 	movi	r2,-2
   10db4:	1884703a 	and	r2,r3,r2
   10db8:	1001703a 	wrctl	status,r2
  
  return context;
   10dbc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   10dc0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   10dc4:	0011acc0 	call	11acc <alt_tick>
   10dc8:	e0bffc17 	ldw	r2,-16(fp)
   10dcc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10dd0:	e0bffe17 	ldw	r2,-8(fp)
   10dd4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   10dd8:	0001883a 	nop
   10ddc:	e037883a 	mov	sp,fp
   10de0:	dfc00117 	ldw	ra,4(sp)
   10de4:	df000017 	ldw	fp,0(sp)
   10de8:	dec00204 	addi	sp,sp,8
   10dec:	f800283a 	ret

00010df0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   10df0:	defff804 	addi	sp,sp,-32
   10df4:	dfc00715 	stw	ra,28(sp)
   10df8:	df000615 	stw	fp,24(sp)
   10dfc:	df000604 	addi	fp,sp,24
   10e00:	e13ffc15 	stw	r4,-16(fp)
   10e04:	e17ffd15 	stw	r5,-12(fp)
   10e08:	e1bffe15 	stw	r6,-8(fp)
   10e0c:	e1ffff15 	stw	r7,-4(fp)
   10e10:	e0bfff17 	ldw	r2,-4(fp)
   10e14:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   10e18:	d0a6e217 	ldw	r2,-25720(gp)
   10e1c:	1000021e 	bne	r2,zero,10e28 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   10e20:	e0bffb17 	ldw	r2,-20(fp)
   10e24:	d0a6e215 	stw	r2,-25720(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   10e28:	e0bffc17 	ldw	r2,-16(fp)
   10e2c:	10800104 	addi	r2,r2,4
   10e30:	00c001c4 	movi	r3,7
   10e34:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   10e38:	d8000015 	stw	zero,0(sp)
   10e3c:	e1fffc17 	ldw	r7,-16(fp)
   10e40:	01800074 	movhi	r6,1
   10e44:	31835e04 	addi	r6,r6,3448
   10e48:	e17ffe17 	ldw	r5,-8(fp)
   10e4c:	e13ffd17 	ldw	r4,-12(fp)
   10e50:	00113fc0 	call	113fc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   10e54:	0001883a 	nop
   10e58:	e037883a 	mov	sp,fp
   10e5c:	dfc00117 	ldw	ra,4(sp)
   10e60:	df000017 	ldw	fp,0(sp)
   10e64:	dec00204 	addi	sp,sp,8
   10e68:	f800283a 	ret

00010e6c <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   10e6c:	defffe04 	addi	sp,sp,-8
   10e70:	df000115 	stw	fp,4(sp)
   10e74:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
   10e78:	d0a6df17 	ldw	r2,-25732(gp)
   10e7c:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
   10e80:	d0a6e017 	ldw	r2,-25728(gp)
   10e84:	1000021e 	bne	r2,zero,10e90 <alt_timestamp_start+0x24>
  {
    return -1;
   10e88:	00bfffc4 	movi	r2,-1
   10e8c:	00001106 	br	10ed4 <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   10e90:	e0bfff17 	ldw	r2,-4(fp)
   10e94:	10800104 	addi	r2,r2,4
   10e98:	00c00204 	movi	r3,8
   10e9c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   10ea0:	e0bfff17 	ldw	r2,-4(fp)
   10ea4:	10800204 	addi	r2,r2,8
   10ea8:	00ffffd4 	movui	r3,65535
   10eac:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   10eb0:	e0bfff17 	ldw	r2,-4(fp)
   10eb4:	10800304 	addi	r2,r2,12
   10eb8:	00ffffd4 	movui	r3,65535
   10ebc:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   10ec0:	e0bfff17 	ldw	r2,-4(fp)
   10ec4:	10800104 	addi	r2,r2,4
   10ec8:	00c00104 	movi	r3,4
   10ecc:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
   10ed0:	0005883a 	mov	r2,zero
}
   10ed4:	e037883a 	mov	sp,fp
   10ed8:	df000017 	ldw	fp,0(sp)
   10edc:	dec00104 	addi	sp,sp,4
   10ee0:	f800283a 	ret

00010ee4 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   10ee4:	defffc04 	addi	sp,sp,-16
   10ee8:	df000315 	stw	fp,12(sp)
   10eec:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
   10ef0:	d0a6df17 	ldw	r2,-25732(gp)
   10ef4:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
   10ef8:	d0a6e017 	ldw	r2,-25728(gp)
   10efc:	1000021e 	bne	r2,zero,10f08 <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
   10f00:	00bfffc4 	movi	r2,-1
   10f04:	00001306 	br	10f54 <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   10f08:	e0bffd17 	ldw	r2,-12(fp)
   10f0c:	10800404 	addi	r2,r2,16
   10f10:	0007883a 	mov	r3,zero
   10f14:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   10f18:	e0bffd17 	ldw	r2,-12(fp)
   10f1c:	10800404 	addi	r2,r2,16
   10f20:	10800037 	ldwio	r2,0(r2)
   10f24:	10bfffcc 	andi	r2,r2,65535
   10f28:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   10f2c:	e0bffd17 	ldw	r2,-12(fp)
   10f30:	10800504 	addi	r2,r2,20
   10f34:	10800037 	ldwio	r2,0(r2)
   10f38:	10bfffcc 	andi	r2,r2,65535
   10f3c:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   10f40:	e0bfff17 	ldw	r2,-4(fp)
   10f44:	1006943a 	slli	r3,r2,16
   10f48:	e0bffe17 	ldw	r2,-8(fp)
   10f4c:	1884b03a 	or	r2,r3,r2
   10f50:	0084303a 	nor	r2,zero,r2
#endif
  }
}
   10f54:	e037883a 	mov	sp,fp
   10f58:	df000017 	ldw	fp,0(sp)
   10f5c:	dec00104 	addi	sp,sp,4
   10f60:	f800283a 	ret

00010f64 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   10f64:	deffff04 	addi	sp,sp,-4
   10f68:	df000015 	stw	fp,0(sp)
   10f6c:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   10f70:	d0a6e017 	ldw	r2,-25728(gp)
}
   10f74:	e037883a 	mov	sp,fp
   10f78:	df000017 	ldw	fp,0(sp)
   10f7c:	dec00104 	addi	sp,sp,4
   10f80:	f800283a 	ret

00010f84 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   10f84:	defff504 	addi	sp,sp,-44
   10f88:	df000a15 	stw	fp,40(sp)
   10f8c:	df000a04 	addi	fp,sp,40
   10f90:	e13ffc15 	stw	r4,-16(fp)
   10f94:	e17ffd15 	stw	r5,-12(fp)
   10f98:	e1bffe15 	stw	r6,-8(fp)
   10f9c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   10fa0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10fa4:	d0a6e217 	ldw	r2,-25720(gp)
  
  if (alt_ticks_per_second ())
   10fa8:	10003c26 	beq	r2,zero,1109c <alt_alarm_start+0x118>
  {
    if (alarm)
   10fac:	e0bffc17 	ldw	r2,-16(fp)
   10fb0:	10003826 	beq	r2,zero,11094 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   10fb4:	e0bffc17 	ldw	r2,-16(fp)
   10fb8:	e0fffe17 	ldw	r3,-8(fp)
   10fbc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   10fc0:	e0bffc17 	ldw	r2,-16(fp)
   10fc4:	e0ffff17 	ldw	r3,-4(fp)
   10fc8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10fcc:	0005303a 	rdctl	r2,status
   10fd0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10fd4:	e0fff917 	ldw	r3,-28(fp)
   10fd8:	00bfff84 	movi	r2,-2
   10fdc:	1884703a 	and	r2,r3,r2
   10fe0:	1001703a 	wrctl	status,r2
  
  return context;
   10fe4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   10fe8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10fec:	d0a6e317 	ldw	r2,-25716(gp)
      
      current_nticks = alt_nticks();
   10ff0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10ff4:	e0fffd17 	ldw	r3,-12(fp)
   10ff8:	e0bff617 	ldw	r2,-40(fp)
   10ffc:	1885883a 	add	r2,r3,r2
   11000:	10c00044 	addi	r3,r2,1
   11004:	e0bffc17 	ldw	r2,-16(fp)
   11008:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1100c:	e0bffc17 	ldw	r2,-16(fp)
   11010:	10c00217 	ldw	r3,8(r2)
   11014:	e0bff617 	ldw	r2,-40(fp)
   11018:	1880042e 	bgeu	r3,r2,1102c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   1101c:	e0bffc17 	ldw	r2,-16(fp)
   11020:	00c00044 	movi	r3,1
   11024:	10c00405 	stb	r3,16(r2)
   11028:	00000206 	br	11034 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   1102c:	e0bffc17 	ldw	r2,-16(fp)
   11030:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   11034:	e0bffc17 	ldw	r2,-16(fp)
   11038:	d0e00e04 	addi	r3,gp,-32712
   1103c:	e0fffa15 	stw	r3,-24(fp)
   11040:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11044:	e0bffb17 	ldw	r2,-20(fp)
   11048:	e0fffa17 	ldw	r3,-24(fp)
   1104c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11050:	e0bffa17 	ldw	r2,-24(fp)
   11054:	10c00017 	ldw	r3,0(r2)
   11058:	e0bffb17 	ldw	r2,-20(fp)
   1105c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11060:	e0bffa17 	ldw	r2,-24(fp)
   11064:	10800017 	ldw	r2,0(r2)
   11068:	e0fffb17 	ldw	r3,-20(fp)
   1106c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11070:	e0bffa17 	ldw	r2,-24(fp)
   11074:	e0fffb17 	ldw	r3,-20(fp)
   11078:	10c00015 	stw	r3,0(r2)
   1107c:	e0bff817 	ldw	r2,-32(fp)
   11080:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11084:	e0bff717 	ldw	r2,-36(fp)
   11088:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1108c:	0005883a 	mov	r2,zero
   11090:	00000306 	br	110a0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   11094:	00bffa84 	movi	r2,-22
   11098:	00000106 	br	110a0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   1109c:	00bfde84 	movi	r2,-134
  }
}
   110a0:	e037883a 	mov	sp,fp
   110a4:	df000017 	ldw	fp,0(sp)
   110a8:	dec00104 	addi	sp,sp,4
   110ac:	f800283a 	ret

000110b0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   110b0:	defffa04 	addi	sp,sp,-24
   110b4:	dfc00515 	stw	ra,20(sp)
   110b8:	df000415 	stw	fp,16(sp)
   110bc:	df000404 	addi	fp,sp,16
   110c0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   110c4:	008000c4 	movi	r2,3
   110c8:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   110cc:	e0fffd17 	ldw	r3,-12(fp)
   110d0:	008003f4 	movhi	r2,15
   110d4:	10909004 	addi	r2,r2,16960
   110d8:	1885383a 	mul	r2,r3,r2
   110dc:	100b883a 	mov	r5,r2
   110e0:	0100bef4 	movhi	r4,763
   110e4:	213c2004 	addi	r4,r4,-3968
   110e8:	00030640 	call	3064 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   110ec:	100b883a 	mov	r5,r2
   110f0:	01200034 	movhi	r4,32768
   110f4:	213fffc4 	addi	r4,r4,-1
   110f8:	00030640 	call	3064 <__udivsi3>
   110fc:	100b883a 	mov	r5,r2
   11100:	e13fff17 	ldw	r4,-4(fp)
   11104:	00030640 	call	3064 <__udivsi3>
   11108:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   1110c:	e0bffe17 	ldw	r2,-8(fp)
   11110:	10002a26 	beq	r2,zero,111bc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   11114:	e03ffc15 	stw	zero,-16(fp)
   11118:	00001706 	br	11178 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   1111c:	00a00034 	movhi	r2,32768
   11120:	10bfffc4 	addi	r2,r2,-1
   11124:	10bfffc4 	addi	r2,r2,-1
   11128:	103ffe1e 	bne	r2,zero,11124 <__alt_data_end+0xff011124>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   1112c:	e0fffd17 	ldw	r3,-12(fp)
   11130:	008003f4 	movhi	r2,15
   11134:	10909004 	addi	r2,r2,16960
   11138:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   1113c:	100b883a 	mov	r5,r2
   11140:	0100bef4 	movhi	r4,763
   11144:	213c2004 	addi	r4,r4,-3968
   11148:	00030640 	call	3064 <__udivsi3>
   1114c:	100b883a 	mov	r5,r2
   11150:	01200034 	movhi	r4,32768
   11154:	213fffc4 	addi	r4,r4,-1
   11158:	00030640 	call	3064 <__udivsi3>
   1115c:	1007883a 	mov	r3,r2
   11160:	e0bfff17 	ldw	r2,-4(fp)
   11164:	10c5c83a 	sub	r2,r2,r3
   11168:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   1116c:	e0bffc17 	ldw	r2,-16(fp)
   11170:	10800044 	addi	r2,r2,1
   11174:	e0bffc15 	stw	r2,-16(fp)
   11178:	e0fffc17 	ldw	r3,-16(fp)
   1117c:	e0bffe17 	ldw	r2,-8(fp)
   11180:	18bfe616 	blt	r3,r2,1111c <__alt_data_end+0xff01111c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   11184:	e0fffd17 	ldw	r3,-12(fp)
   11188:	008003f4 	movhi	r2,15
   1118c:	10909004 	addi	r2,r2,16960
   11190:	1885383a 	mul	r2,r3,r2
   11194:	100b883a 	mov	r5,r2
   11198:	0100bef4 	movhi	r4,763
   1119c:	213c2004 	addi	r4,r4,-3968
   111a0:	00030640 	call	3064 <__udivsi3>
   111a4:	1007883a 	mov	r3,r2
   111a8:	e0bfff17 	ldw	r2,-4(fp)
   111ac:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   111b0:	10bfffc4 	addi	r2,r2,-1
   111b4:	103ffe1e 	bne	r2,zero,111b0 <__alt_data_end+0xff0111b0>
   111b8:	00000d06 	br	111f0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   111bc:	e0fffd17 	ldw	r3,-12(fp)
   111c0:	008003f4 	movhi	r2,15
   111c4:	10909004 	addi	r2,r2,16960
   111c8:	1885383a 	mul	r2,r3,r2
   111cc:	100b883a 	mov	r5,r2
   111d0:	0100bef4 	movhi	r4,763
   111d4:	213c2004 	addi	r4,r4,-3968
   111d8:	00030640 	call	3064 <__udivsi3>
   111dc:	1007883a 	mov	r3,r2
   111e0:	e0bfff17 	ldw	r2,-4(fp)
   111e4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   111e8:	10bfffc4 	addi	r2,r2,-1
   111ec:	00bffe16 	blt	zero,r2,111e8 <__alt_data_end+0xff0111e8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   111f0:	0005883a 	mov	r2,zero
}
   111f4:	e037883a 	mov	sp,fp
   111f8:	dfc00117 	ldw	ra,4(sp)
   111fc:	df000017 	ldw	fp,0(sp)
   11200:	dec00204 	addi	sp,sp,8
   11204:	f800283a 	ret

00011208 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11208:	deffff04 	addi	sp,sp,-4
   1120c:	df000015 	stw	fp,0(sp)
   11210:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   11214:	0001883a 	nop
   11218:	e037883a 	mov	sp,fp
   1121c:	df000017 	ldw	fp,0(sp)
   11220:	dec00104 	addi	sp,sp,4
   11224:	f800283a 	ret

00011228 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11228:	defffe04 	addi	sp,sp,-8
   1122c:	dfc00115 	stw	ra,4(sp)
   11230:	df000015 	stw	fp,0(sp)
   11234:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11238:	d0a00b17 	ldw	r2,-32724(gp)
   1123c:	10000326 	beq	r2,zero,1124c <alt_get_errno+0x24>
   11240:	d0a00b17 	ldw	r2,-32724(gp)
   11244:	103ee83a 	callr	r2
   11248:	00000106 	br	11250 <alt_get_errno+0x28>
   1124c:	d0a6d804 	addi	r2,gp,-25760
}
   11250:	e037883a 	mov	sp,fp
   11254:	dfc00117 	ldw	ra,4(sp)
   11258:	df000017 	ldw	fp,0(sp)
   1125c:	dec00204 	addi	sp,sp,8
   11260:	f800283a 	ret

00011264 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   11264:	defffa04 	addi	sp,sp,-24
   11268:	dfc00515 	stw	ra,20(sp)
   1126c:	df000415 	stw	fp,16(sp)
   11270:	df000404 	addi	fp,sp,16
   11274:	e13ffe15 	stw	r4,-8(fp)
   11278:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1127c:	e0bffe17 	ldw	r2,-8(fp)
   11280:	10000326 	beq	r2,zero,11290 <alt_dev_llist_insert+0x2c>
   11284:	e0bffe17 	ldw	r2,-8(fp)
   11288:	10800217 	ldw	r2,8(r2)
   1128c:	1000061e 	bne	r2,zero,112a8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   11290:	00112280 	call	11228 <alt_get_errno>
   11294:	1007883a 	mov	r3,r2
   11298:	00800584 	movi	r2,22
   1129c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   112a0:	00bffa84 	movi	r2,-22
   112a4:	00001306 	br	112f4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   112a8:	e0bffe17 	ldw	r2,-8(fp)
   112ac:	e0ffff17 	ldw	r3,-4(fp)
   112b0:	e0fffc15 	stw	r3,-16(fp)
   112b4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   112b8:	e0bffd17 	ldw	r2,-12(fp)
   112bc:	e0fffc17 	ldw	r3,-16(fp)
   112c0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   112c4:	e0bffc17 	ldw	r2,-16(fp)
   112c8:	10c00017 	ldw	r3,0(r2)
   112cc:	e0bffd17 	ldw	r2,-12(fp)
   112d0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   112d4:	e0bffc17 	ldw	r2,-16(fp)
   112d8:	10800017 	ldw	r2,0(r2)
   112dc:	e0fffd17 	ldw	r3,-12(fp)
   112e0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   112e4:	e0bffc17 	ldw	r2,-16(fp)
   112e8:	e0fffd17 	ldw	r3,-12(fp)
   112ec:	10c00015 	stw	r3,0(r2)

  return 0;  
   112f0:	0005883a 	mov	r2,zero
}
   112f4:	e037883a 	mov	sp,fp
   112f8:	dfc00117 	ldw	ra,4(sp)
   112fc:	df000017 	ldw	fp,0(sp)
   11300:	dec00204 	addi	sp,sp,8
   11304:	f800283a 	ret

00011308 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   11308:	defffd04 	addi	sp,sp,-12
   1130c:	dfc00215 	stw	ra,8(sp)
   11310:	df000115 	stw	fp,4(sp)
   11314:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11318:	00800074 	movhi	r2,1
   1131c:	1088bc04 	addi	r2,r2,8944
   11320:	e0bfff15 	stw	r2,-4(fp)
   11324:	00000606 	br	11340 <_do_ctors+0x38>
        (*ctor) (); 
   11328:	e0bfff17 	ldw	r2,-4(fp)
   1132c:	10800017 	ldw	r2,0(r2)
   11330:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11334:	e0bfff17 	ldw	r2,-4(fp)
   11338:	10bfff04 	addi	r2,r2,-4
   1133c:	e0bfff15 	stw	r2,-4(fp)
   11340:	e0ffff17 	ldw	r3,-4(fp)
   11344:	00800074 	movhi	r2,1
   11348:	1088bd04 	addi	r2,r2,8948
   1134c:	18bff62e 	bgeu	r3,r2,11328 <__alt_data_end+0xff011328>
        (*ctor) (); 
}
   11350:	0001883a 	nop
   11354:	e037883a 	mov	sp,fp
   11358:	dfc00117 	ldw	ra,4(sp)
   1135c:	df000017 	ldw	fp,0(sp)
   11360:	dec00204 	addi	sp,sp,8
   11364:	f800283a 	ret

00011368 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   11368:	defffd04 	addi	sp,sp,-12
   1136c:	dfc00215 	stw	ra,8(sp)
   11370:	df000115 	stw	fp,4(sp)
   11374:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11378:	00800074 	movhi	r2,1
   1137c:	1088bc04 	addi	r2,r2,8944
   11380:	e0bfff15 	stw	r2,-4(fp)
   11384:	00000606 	br	113a0 <_do_dtors+0x38>
        (*dtor) (); 
   11388:	e0bfff17 	ldw	r2,-4(fp)
   1138c:	10800017 	ldw	r2,0(r2)
   11390:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11394:	e0bfff17 	ldw	r2,-4(fp)
   11398:	10bfff04 	addi	r2,r2,-4
   1139c:	e0bfff15 	stw	r2,-4(fp)
   113a0:	e0ffff17 	ldw	r3,-4(fp)
   113a4:	00800074 	movhi	r2,1
   113a8:	1088bd04 	addi	r2,r2,8948
   113ac:	18bff62e 	bgeu	r3,r2,11388 <__alt_data_end+0xff011388>
        (*dtor) (); 
}
   113b0:	0001883a 	nop
   113b4:	e037883a 	mov	sp,fp
   113b8:	dfc00117 	ldw	ra,4(sp)
   113bc:	df000017 	ldw	fp,0(sp)
   113c0:	dec00204 	addi	sp,sp,8
   113c4:	f800283a 	ret

000113c8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   113c8:	defffe04 	addi	sp,sp,-8
   113cc:	dfc00115 	stw	ra,4(sp)
   113d0:	df000015 	stw	fp,0(sp)
   113d4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   113d8:	01440004 	movi	r5,4096
   113dc:	0009883a 	mov	r4,zero
   113e0:	0011e340 	call	11e34 <alt_icache_flush>
#endif
}
   113e4:	0001883a 	nop
   113e8:	e037883a 	mov	sp,fp
   113ec:	dfc00117 	ldw	ra,4(sp)
   113f0:	df000017 	ldw	fp,0(sp)
   113f4:	dec00204 	addi	sp,sp,8
   113f8:	f800283a 	ret

000113fc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   113fc:	defff904 	addi	sp,sp,-28
   11400:	dfc00615 	stw	ra,24(sp)
   11404:	df000515 	stw	fp,20(sp)
   11408:	df000504 	addi	fp,sp,20
   1140c:	e13ffc15 	stw	r4,-16(fp)
   11410:	e17ffd15 	stw	r5,-12(fp)
   11414:	e1bffe15 	stw	r6,-8(fp)
   11418:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1141c:	e0800217 	ldw	r2,8(fp)
   11420:	d8800015 	stw	r2,0(sp)
   11424:	e1ffff17 	ldw	r7,-4(fp)
   11428:	e1bffe17 	ldw	r6,-8(fp)
   1142c:	e17ffd17 	ldw	r5,-12(fp)
   11430:	e13ffc17 	ldw	r4,-16(fp)
   11434:	00115ac0 	call	115ac <alt_iic_isr_register>
}  
   11438:	e037883a 	mov	sp,fp
   1143c:	dfc00117 	ldw	ra,4(sp)
   11440:	df000017 	ldw	fp,0(sp)
   11444:	dec00204 	addi	sp,sp,8
   11448:	f800283a 	ret

0001144c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1144c:	defff904 	addi	sp,sp,-28
   11450:	df000615 	stw	fp,24(sp)
   11454:	df000604 	addi	fp,sp,24
   11458:	e13ffe15 	stw	r4,-8(fp)
   1145c:	e17fff15 	stw	r5,-4(fp)
   11460:	e0bfff17 	ldw	r2,-4(fp)
   11464:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11468:	0005303a 	rdctl	r2,status
   1146c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11470:	e0fffb17 	ldw	r3,-20(fp)
   11474:	00bfff84 	movi	r2,-2
   11478:	1884703a 	and	r2,r3,r2
   1147c:	1001703a 	wrctl	status,r2
  
  return context;
   11480:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11484:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   11488:	00c00044 	movi	r3,1
   1148c:	e0bffa17 	ldw	r2,-24(fp)
   11490:	1884983a 	sll	r2,r3,r2
   11494:	1007883a 	mov	r3,r2
   11498:	d0a6e117 	ldw	r2,-25724(gp)
   1149c:	1884b03a 	or	r2,r3,r2
   114a0:	d0a6e115 	stw	r2,-25724(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   114a4:	d0a6e117 	ldw	r2,-25724(gp)
   114a8:	100170fa 	wrctl	ienable,r2
   114ac:	e0bffc17 	ldw	r2,-16(fp)
   114b0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   114b4:	e0bffd17 	ldw	r2,-12(fp)
   114b8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   114bc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   114c0:	0001883a 	nop
}
   114c4:	e037883a 	mov	sp,fp
   114c8:	df000017 	ldw	fp,0(sp)
   114cc:	dec00104 	addi	sp,sp,4
   114d0:	f800283a 	ret

000114d4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   114d4:	defff904 	addi	sp,sp,-28
   114d8:	df000615 	stw	fp,24(sp)
   114dc:	df000604 	addi	fp,sp,24
   114e0:	e13ffe15 	stw	r4,-8(fp)
   114e4:	e17fff15 	stw	r5,-4(fp)
   114e8:	e0bfff17 	ldw	r2,-4(fp)
   114ec:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   114f0:	0005303a 	rdctl	r2,status
   114f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   114f8:	e0fffb17 	ldw	r3,-20(fp)
   114fc:	00bfff84 	movi	r2,-2
   11500:	1884703a 	and	r2,r3,r2
   11504:	1001703a 	wrctl	status,r2
  
  return context;
   11508:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1150c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   11510:	00c00044 	movi	r3,1
   11514:	e0bffa17 	ldw	r2,-24(fp)
   11518:	1884983a 	sll	r2,r3,r2
   1151c:	0084303a 	nor	r2,zero,r2
   11520:	1007883a 	mov	r3,r2
   11524:	d0a6e117 	ldw	r2,-25724(gp)
   11528:	1884703a 	and	r2,r3,r2
   1152c:	d0a6e115 	stw	r2,-25724(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11530:	d0a6e117 	ldw	r2,-25724(gp)
   11534:	100170fa 	wrctl	ienable,r2
   11538:	e0bffc17 	ldw	r2,-16(fp)
   1153c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11540:	e0bffd17 	ldw	r2,-12(fp)
   11544:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11548:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   1154c:	0001883a 	nop
}
   11550:	e037883a 	mov	sp,fp
   11554:	df000017 	ldw	fp,0(sp)
   11558:	dec00104 	addi	sp,sp,4
   1155c:	f800283a 	ret

00011560 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   11560:	defffc04 	addi	sp,sp,-16
   11564:	df000315 	stw	fp,12(sp)
   11568:	df000304 	addi	fp,sp,12
   1156c:	e13ffe15 	stw	r4,-8(fp)
   11570:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   11574:	000530fa 	rdctl	r2,ienable
   11578:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1157c:	00c00044 	movi	r3,1
   11580:	e0bfff17 	ldw	r2,-4(fp)
   11584:	1884983a 	sll	r2,r3,r2
   11588:	1007883a 	mov	r3,r2
   1158c:	e0bffd17 	ldw	r2,-12(fp)
   11590:	1884703a 	and	r2,r3,r2
   11594:	1004c03a 	cmpne	r2,r2,zero
   11598:	10803fcc 	andi	r2,r2,255
}
   1159c:	e037883a 	mov	sp,fp
   115a0:	df000017 	ldw	fp,0(sp)
   115a4:	dec00104 	addi	sp,sp,4
   115a8:	f800283a 	ret

000115ac <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   115ac:	defff504 	addi	sp,sp,-44
   115b0:	dfc00a15 	stw	ra,40(sp)
   115b4:	df000915 	stw	fp,36(sp)
   115b8:	df000904 	addi	fp,sp,36
   115bc:	e13ffc15 	stw	r4,-16(fp)
   115c0:	e17ffd15 	stw	r5,-12(fp)
   115c4:	e1bffe15 	stw	r6,-8(fp)
   115c8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   115cc:	00bffa84 	movi	r2,-22
   115d0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   115d4:	e0bffd17 	ldw	r2,-12(fp)
   115d8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   115dc:	e0bff817 	ldw	r2,-32(fp)
   115e0:	10800808 	cmpgei	r2,r2,32
   115e4:	1000271e 	bne	r2,zero,11684 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   115e8:	0005303a 	rdctl	r2,status
   115ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   115f0:	e0fffb17 	ldw	r3,-20(fp)
   115f4:	00bfff84 	movi	r2,-2
   115f8:	1884703a 	and	r2,r3,r2
   115fc:	1001703a 	wrctl	status,r2
  
  return context;
   11600:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   11604:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   11608:	00800074 	movhi	r2,1
   1160c:	10984704 	addi	r2,r2,24860
   11610:	e0fff817 	ldw	r3,-32(fp)
   11614:	180690fa 	slli	r3,r3,3
   11618:	10c5883a 	add	r2,r2,r3
   1161c:	e0fffe17 	ldw	r3,-8(fp)
   11620:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   11624:	00800074 	movhi	r2,1
   11628:	10984704 	addi	r2,r2,24860
   1162c:	e0fff817 	ldw	r3,-32(fp)
   11630:	180690fa 	slli	r3,r3,3
   11634:	10c5883a 	add	r2,r2,r3
   11638:	10800104 	addi	r2,r2,4
   1163c:	e0ffff17 	ldw	r3,-4(fp)
   11640:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   11644:	e0bffe17 	ldw	r2,-8(fp)
   11648:	10000526 	beq	r2,zero,11660 <alt_iic_isr_register+0xb4>
   1164c:	e0bff817 	ldw	r2,-32(fp)
   11650:	100b883a 	mov	r5,r2
   11654:	e13ffc17 	ldw	r4,-16(fp)
   11658:	001144c0 	call	1144c <alt_ic_irq_enable>
   1165c:	00000406 	br	11670 <alt_iic_isr_register+0xc4>
   11660:	e0bff817 	ldw	r2,-32(fp)
   11664:	100b883a 	mov	r5,r2
   11668:	e13ffc17 	ldw	r4,-16(fp)
   1166c:	00114d40 	call	114d4 <alt_ic_irq_disable>
   11670:	e0bff715 	stw	r2,-36(fp)
   11674:	e0bffa17 	ldw	r2,-24(fp)
   11678:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1167c:	e0bff917 	ldw	r2,-28(fp)
   11680:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   11684:	e0bff717 	ldw	r2,-36(fp)
}
   11688:	e037883a 	mov	sp,fp
   1168c:	dfc00117 	ldw	ra,4(sp)
   11690:	df000017 	ldw	fp,0(sp)
   11694:	dec00204 	addi	sp,sp,8
   11698:	f800283a 	ret

0001169c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1169c:	defff904 	addi	sp,sp,-28
   116a0:	dfc00615 	stw	ra,24(sp)
   116a4:	df000515 	stw	fp,20(sp)
   116a8:	df000504 	addi	fp,sp,20
   116ac:	e13ffc15 	stw	r4,-16(fp)
   116b0:	e17ffd15 	stw	r5,-12(fp)
   116b4:	e1bffe15 	stw	r6,-8(fp)
   116b8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   116bc:	e1bfff17 	ldw	r6,-4(fp)
   116c0:	e17ffe17 	ldw	r5,-8(fp)
   116c4:	e13ffd17 	ldw	r4,-12(fp)
   116c8:	00118dc0 	call	118dc <open>
   116cc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   116d0:	e0bffb17 	ldw	r2,-20(fp)
   116d4:	10001c16 	blt	r2,zero,11748 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   116d8:	00800074 	movhi	r2,1
   116dc:	108ce004 	addi	r2,r2,13184
   116e0:	e0fffb17 	ldw	r3,-20(fp)
   116e4:	18c00324 	muli	r3,r3,12
   116e8:	10c5883a 	add	r2,r2,r3
   116ec:	10c00017 	ldw	r3,0(r2)
   116f0:	e0bffc17 	ldw	r2,-16(fp)
   116f4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   116f8:	00800074 	movhi	r2,1
   116fc:	108ce004 	addi	r2,r2,13184
   11700:	e0fffb17 	ldw	r3,-20(fp)
   11704:	18c00324 	muli	r3,r3,12
   11708:	10c5883a 	add	r2,r2,r3
   1170c:	10800104 	addi	r2,r2,4
   11710:	10c00017 	ldw	r3,0(r2)
   11714:	e0bffc17 	ldw	r2,-16(fp)
   11718:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1171c:	00800074 	movhi	r2,1
   11720:	108ce004 	addi	r2,r2,13184
   11724:	e0fffb17 	ldw	r3,-20(fp)
   11728:	18c00324 	muli	r3,r3,12
   1172c:	10c5883a 	add	r2,r2,r3
   11730:	10800204 	addi	r2,r2,8
   11734:	10c00017 	ldw	r3,0(r2)
   11738:	e0bffc17 	ldw	r2,-16(fp)
   1173c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   11740:	e13ffb17 	ldw	r4,-20(fp)
   11744:	000ffb00 	call	ffb0 <alt_release_fd>
  }
} 
   11748:	0001883a 	nop
   1174c:	e037883a 	mov	sp,fp
   11750:	dfc00117 	ldw	ra,4(sp)
   11754:	df000017 	ldw	fp,0(sp)
   11758:	dec00204 	addi	sp,sp,8
   1175c:	f800283a 	ret

00011760 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   11760:	defffb04 	addi	sp,sp,-20
   11764:	dfc00415 	stw	ra,16(sp)
   11768:	df000315 	stw	fp,12(sp)
   1176c:	df000304 	addi	fp,sp,12
   11770:	e13ffd15 	stw	r4,-12(fp)
   11774:	e17ffe15 	stw	r5,-8(fp)
   11778:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1177c:	01c07fc4 	movi	r7,511
   11780:	01800044 	movi	r6,1
   11784:	e17ffd17 	ldw	r5,-12(fp)
   11788:	01000074 	movhi	r4,1
   1178c:	210ce304 	addi	r4,r4,13196
   11790:	001169c0 	call	1169c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   11794:	01c07fc4 	movi	r7,511
   11798:	000d883a 	mov	r6,zero
   1179c:	e17ffe17 	ldw	r5,-8(fp)
   117a0:	01000074 	movhi	r4,1
   117a4:	210ce004 	addi	r4,r4,13184
   117a8:	001169c0 	call	1169c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   117ac:	01c07fc4 	movi	r7,511
   117b0:	01800044 	movi	r6,1
   117b4:	e17fff17 	ldw	r5,-4(fp)
   117b8:	01000074 	movhi	r4,1
   117bc:	210ce604 	addi	r4,r4,13208
   117c0:	001169c0 	call	1169c <alt_open_fd>
}  
   117c4:	0001883a 	nop
   117c8:	e037883a 	mov	sp,fp
   117cc:	dfc00117 	ldw	ra,4(sp)
   117d0:	df000017 	ldw	fp,0(sp)
   117d4:	dec00204 	addi	sp,sp,8
   117d8:	f800283a 	ret

000117dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   117dc:	defffe04 	addi	sp,sp,-8
   117e0:	dfc00115 	stw	ra,4(sp)
   117e4:	df000015 	stw	fp,0(sp)
   117e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   117ec:	d0a00b17 	ldw	r2,-32724(gp)
   117f0:	10000326 	beq	r2,zero,11800 <alt_get_errno+0x24>
   117f4:	d0a00b17 	ldw	r2,-32724(gp)
   117f8:	103ee83a 	callr	r2
   117fc:	00000106 	br	11804 <alt_get_errno+0x28>
   11800:	d0a6d804 	addi	r2,gp,-25760
}
   11804:	e037883a 	mov	sp,fp
   11808:	dfc00117 	ldw	ra,4(sp)
   1180c:	df000017 	ldw	fp,0(sp)
   11810:	dec00204 	addi	sp,sp,8
   11814:	f800283a 	ret

00011818 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   11818:	defffd04 	addi	sp,sp,-12
   1181c:	df000215 	stw	fp,8(sp)
   11820:	df000204 	addi	fp,sp,8
   11824:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   11828:	e0bfff17 	ldw	r2,-4(fp)
   1182c:	10800217 	ldw	r2,8(r2)
   11830:	10d00034 	orhi	r3,r2,16384
   11834:	e0bfff17 	ldw	r2,-4(fp)
   11838:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1183c:	e03ffe15 	stw	zero,-8(fp)
   11840:	00001d06 	br	118b8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11844:	00800074 	movhi	r2,1
   11848:	108ce004 	addi	r2,r2,13184
   1184c:	e0fffe17 	ldw	r3,-8(fp)
   11850:	18c00324 	muli	r3,r3,12
   11854:	10c5883a 	add	r2,r2,r3
   11858:	10c00017 	ldw	r3,0(r2)
   1185c:	e0bfff17 	ldw	r2,-4(fp)
   11860:	10800017 	ldw	r2,0(r2)
   11864:	1880111e 	bne	r3,r2,118ac <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11868:	00800074 	movhi	r2,1
   1186c:	108ce004 	addi	r2,r2,13184
   11870:	e0fffe17 	ldw	r3,-8(fp)
   11874:	18c00324 	muli	r3,r3,12
   11878:	10c5883a 	add	r2,r2,r3
   1187c:	10800204 	addi	r2,r2,8
   11880:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11884:	1000090e 	bge	r2,zero,118ac <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   11888:	e0bffe17 	ldw	r2,-8(fp)
   1188c:	10c00324 	muli	r3,r2,12
   11890:	00800074 	movhi	r2,1
   11894:	108ce004 	addi	r2,r2,13184
   11898:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1189c:	e0bfff17 	ldw	r2,-4(fp)
   118a0:	18800226 	beq	r3,r2,118ac <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   118a4:	00bffcc4 	movi	r2,-13
   118a8:	00000806 	br	118cc <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   118ac:	e0bffe17 	ldw	r2,-8(fp)
   118b0:	10800044 	addi	r2,r2,1
   118b4:	e0bffe15 	stw	r2,-8(fp)
   118b8:	d0a00a17 	ldw	r2,-32728(gp)
   118bc:	1007883a 	mov	r3,r2
   118c0:	e0bffe17 	ldw	r2,-8(fp)
   118c4:	18bfdf2e 	bgeu	r3,r2,11844 <__alt_data_end+0xff011844>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   118c8:	0005883a 	mov	r2,zero
}
   118cc:	e037883a 	mov	sp,fp
   118d0:	df000017 	ldw	fp,0(sp)
   118d4:	dec00104 	addi	sp,sp,4
   118d8:	f800283a 	ret

000118dc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   118dc:	defff604 	addi	sp,sp,-40
   118e0:	dfc00915 	stw	ra,36(sp)
   118e4:	df000815 	stw	fp,32(sp)
   118e8:	df000804 	addi	fp,sp,32
   118ec:	e13ffd15 	stw	r4,-12(fp)
   118f0:	e17ffe15 	stw	r5,-8(fp)
   118f4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   118f8:	00bfffc4 	movi	r2,-1
   118fc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   11900:	00bffb44 	movi	r2,-19
   11904:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   11908:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1190c:	d1600804 	addi	r5,gp,-32736
   11910:	e13ffd17 	ldw	r4,-12(fp)
   11914:	0011bf80 	call	11bf8 <alt_find_dev>
   11918:	e0bff815 	stw	r2,-32(fp)
   1191c:	e0bff817 	ldw	r2,-32(fp)
   11920:	1000051e 	bne	r2,zero,11938 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   11924:	e13ffd17 	ldw	r4,-12(fp)
   11928:	0011c880 	call	11c88 <alt_find_file>
   1192c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   11930:	00800044 	movi	r2,1
   11934:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11938:	e0bff817 	ldw	r2,-32(fp)
   1193c:	10002926 	beq	r2,zero,119e4 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11940:	e13ff817 	ldw	r4,-32(fp)
   11944:	0011d900 	call	11d90 <alt_get_fd>
   11948:	e0bff915 	stw	r2,-28(fp)
   1194c:	e0bff917 	ldw	r2,-28(fp)
   11950:	1000030e 	bge	r2,zero,11960 <open+0x84>
    {
      status = index;
   11954:	e0bff917 	ldw	r2,-28(fp)
   11958:	e0bffa15 	stw	r2,-24(fp)
   1195c:	00002306 	br	119ec <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   11960:	e0bff917 	ldw	r2,-28(fp)
   11964:	10c00324 	muli	r3,r2,12
   11968:	00800074 	movhi	r2,1
   1196c:	108ce004 	addi	r2,r2,13184
   11970:	1885883a 	add	r2,r3,r2
   11974:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11978:	e0fffe17 	ldw	r3,-8(fp)
   1197c:	00900034 	movhi	r2,16384
   11980:	10bfffc4 	addi	r2,r2,-1
   11984:	1886703a 	and	r3,r3,r2
   11988:	e0bffc17 	ldw	r2,-16(fp)
   1198c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   11990:	e0bffb17 	ldw	r2,-20(fp)
   11994:	1000051e 	bne	r2,zero,119ac <open+0xd0>
   11998:	e13ffc17 	ldw	r4,-16(fp)
   1199c:	00118180 	call	11818 <alt_file_locked>
   119a0:	e0bffa15 	stw	r2,-24(fp)
   119a4:	e0bffa17 	ldw	r2,-24(fp)
   119a8:	10001016 	blt	r2,zero,119ec <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   119ac:	e0bff817 	ldw	r2,-32(fp)
   119b0:	10800317 	ldw	r2,12(r2)
   119b4:	10000826 	beq	r2,zero,119d8 <open+0xfc>
   119b8:	e0bff817 	ldw	r2,-32(fp)
   119bc:	10800317 	ldw	r2,12(r2)
   119c0:	e1ffff17 	ldw	r7,-4(fp)
   119c4:	e1bffe17 	ldw	r6,-8(fp)
   119c8:	e17ffd17 	ldw	r5,-12(fp)
   119cc:	e13ffc17 	ldw	r4,-16(fp)
   119d0:	103ee83a 	callr	r2
   119d4:	00000106 	br	119dc <open+0x100>
   119d8:	0005883a 	mov	r2,zero
   119dc:	e0bffa15 	stw	r2,-24(fp)
   119e0:	00000206 	br	119ec <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   119e4:	00bffb44 	movi	r2,-19
   119e8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   119ec:	e0bffa17 	ldw	r2,-24(fp)
   119f0:	1000090e 	bge	r2,zero,11a18 <open+0x13c>
  {
    alt_release_fd (index);  
   119f4:	e13ff917 	ldw	r4,-28(fp)
   119f8:	000ffb00 	call	ffb0 <alt_release_fd>
    ALT_ERRNO = -status;
   119fc:	00117dc0 	call	117dc <alt_get_errno>
   11a00:	1007883a 	mov	r3,r2
   11a04:	e0bffa17 	ldw	r2,-24(fp)
   11a08:	0085c83a 	sub	r2,zero,r2
   11a0c:	18800015 	stw	r2,0(r3)
    return -1;
   11a10:	00bfffc4 	movi	r2,-1
   11a14:	00000106 	br	11a1c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   11a18:	e0bff917 	ldw	r2,-28(fp)
}
   11a1c:	e037883a 	mov	sp,fp
   11a20:	dfc00117 	ldw	ra,4(sp)
   11a24:	df000017 	ldw	fp,0(sp)
   11a28:	dec00204 	addi	sp,sp,8
   11a2c:	f800283a 	ret

00011a30 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   11a30:	defffa04 	addi	sp,sp,-24
   11a34:	df000515 	stw	fp,20(sp)
   11a38:	df000504 	addi	fp,sp,20
   11a3c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11a40:	0005303a 	rdctl	r2,status
   11a44:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11a48:	e0fffc17 	ldw	r3,-16(fp)
   11a4c:	00bfff84 	movi	r2,-2
   11a50:	1884703a 	and	r2,r3,r2
   11a54:	1001703a 	wrctl	status,r2
  
  return context;
   11a58:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   11a5c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   11a60:	e0bfff17 	ldw	r2,-4(fp)
   11a64:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   11a68:	e0bffd17 	ldw	r2,-12(fp)
   11a6c:	10800017 	ldw	r2,0(r2)
   11a70:	e0fffd17 	ldw	r3,-12(fp)
   11a74:	18c00117 	ldw	r3,4(r3)
   11a78:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   11a7c:	e0bffd17 	ldw	r2,-12(fp)
   11a80:	10800117 	ldw	r2,4(r2)
   11a84:	e0fffd17 	ldw	r3,-12(fp)
   11a88:	18c00017 	ldw	r3,0(r3)
   11a8c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   11a90:	e0bffd17 	ldw	r2,-12(fp)
   11a94:	e0fffd17 	ldw	r3,-12(fp)
   11a98:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   11a9c:	e0bffd17 	ldw	r2,-12(fp)
   11aa0:	e0fffd17 	ldw	r3,-12(fp)
   11aa4:	10c00015 	stw	r3,0(r2)
   11aa8:	e0bffb17 	ldw	r2,-20(fp)
   11aac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11ab0:	e0bffe17 	ldw	r2,-8(fp)
   11ab4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   11ab8:	0001883a 	nop
   11abc:	e037883a 	mov	sp,fp
   11ac0:	df000017 	ldw	fp,0(sp)
   11ac4:	dec00104 	addi	sp,sp,4
   11ac8:	f800283a 	ret

00011acc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11acc:	defffb04 	addi	sp,sp,-20
   11ad0:	dfc00415 	stw	ra,16(sp)
   11ad4:	df000315 	stw	fp,12(sp)
   11ad8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   11adc:	d0a00e17 	ldw	r2,-32712(gp)
   11ae0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11ae4:	d0a6e317 	ldw	r2,-25716(gp)
   11ae8:	10800044 	addi	r2,r2,1
   11aec:	d0a6e315 	stw	r2,-25716(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11af0:	00002e06 	br	11bac <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   11af4:	e0bffd17 	ldw	r2,-12(fp)
   11af8:	10800017 	ldw	r2,0(r2)
   11afc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11b00:	e0bffd17 	ldw	r2,-12(fp)
   11b04:	10800403 	ldbu	r2,16(r2)
   11b08:	10803fcc 	andi	r2,r2,255
   11b0c:	10000426 	beq	r2,zero,11b20 <alt_tick+0x54>
   11b10:	d0a6e317 	ldw	r2,-25716(gp)
   11b14:	1000021e 	bne	r2,zero,11b20 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   11b18:	e0bffd17 	ldw	r2,-12(fp)
   11b1c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   11b20:	e0bffd17 	ldw	r2,-12(fp)
   11b24:	10800217 	ldw	r2,8(r2)
   11b28:	d0e6e317 	ldw	r3,-25716(gp)
   11b2c:	18801d36 	bltu	r3,r2,11ba4 <alt_tick+0xd8>
   11b30:	e0bffd17 	ldw	r2,-12(fp)
   11b34:	10800403 	ldbu	r2,16(r2)
   11b38:	10803fcc 	andi	r2,r2,255
   11b3c:	1000191e 	bne	r2,zero,11ba4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   11b40:	e0bffd17 	ldw	r2,-12(fp)
   11b44:	10800317 	ldw	r2,12(r2)
   11b48:	e0fffd17 	ldw	r3,-12(fp)
   11b4c:	18c00517 	ldw	r3,20(r3)
   11b50:	1809883a 	mov	r4,r3
   11b54:	103ee83a 	callr	r2
   11b58:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   11b5c:	e0bfff17 	ldw	r2,-4(fp)
   11b60:	1000031e 	bne	r2,zero,11b70 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   11b64:	e13ffd17 	ldw	r4,-12(fp)
   11b68:	0011a300 	call	11a30 <alt_alarm_stop>
   11b6c:	00000d06 	br	11ba4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   11b70:	e0bffd17 	ldw	r2,-12(fp)
   11b74:	10c00217 	ldw	r3,8(r2)
   11b78:	e0bfff17 	ldw	r2,-4(fp)
   11b7c:	1887883a 	add	r3,r3,r2
   11b80:	e0bffd17 	ldw	r2,-12(fp)
   11b84:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11b88:	e0bffd17 	ldw	r2,-12(fp)
   11b8c:	10c00217 	ldw	r3,8(r2)
   11b90:	d0a6e317 	ldw	r2,-25716(gp)
   11b94:	1880032e 	bgeu	r3,r2,11ba4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   11b98:	e0bffd17 	ldw	r2,-12(fp)
   11b9c:	00c00044 	movi	r3,1
   11ba0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   11ba4:	e0bffe17 	ldw	r2,-8(fp)
   11ba8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11bac:	e0fffd17 	ldw	r3,-12(fp)
   11bb0:	d0a00e04 	addi	r2,gp,-32712
   11bb4:	18bfcf1e 	bne	r3,r2,11af4 <__alt_data_end+0xff011af4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   11bb8:	0001883a 	nop
}
   11bbc:	0001883a 	nop
   11bc0:	e037883a 	mov	sp,fp
   11bc4:	dfc00117 	ldw	ra,4(sp)
   11bc8:	df000017 	ldw	fp,0(sp)
   11bcc:	dec00204 	addi	sp,sp,8
   11bd0:	f800283a 	ret

00011bd4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   11bd4:	deffff04 	addi	sp,sp,-4
   11bd8:	df000015 	stw	fp,0(sp)
   11bdc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11be0:	000170fa 	wrctl	ienable,zero
}
   11be4:	0001883a 	nop
   11be8:	e037883a 	mov	sp,fp
   11bec:	df000017 	ldw	fp,0(sp)
   11bf0:	dec00104 	addi	sp,sp,4
   11bf4:	f800283a 	ret

00011bf8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11bf8:	defffa04 	addi	sp,sp,-24
   11bfc:	dfc00515 	stw	ra,20(sp)
   11c00:	df000415 	stw	fp,16(sp)
   11c04:	df000404 	addi	fp,sp,16
   11c08:	e13ffe15 	stw	r4,-8(fp)
   11c0c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11c10:	e0bfff17 	ldw	r2,-4(fp)
   11c14:	10800017 	ldw	r2,0(r2)
   11c18:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11c1c:	e13ffe17 	ldw	r4,-8(fp)
   11c20:	0003ae80 	call	3ae8 <strlen>
   11c24:	10800044 	addi	r2,r2,1
   11c28:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11c2c:	00000d06 	br	11c64 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11c30:	e0bffc17 	ldw	r2,-16(fp)
   11c34:	10800217 	ldw	r2,8(r2)
   11c38:	e0fffd17 	ldw	r3,-12(fp)
   11c3c:	180d883a 	mov	r6,r3
   11c40:	e17ffe17 	ldw	r5,-8(fp)
   11c44:	1009883a 	mov	r4,r2
   11c48:	0011fac0 	call	11fac <memcmp>
   11c4c:	1000021e 	bne	r2,zero,11c58 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11c50:	e0bffc17 	ldw	r2,-16(fp)
   11c54:	00000706 	br	11c74 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   11c58:	e0bffc17 	ldw	r2,-16(fp)
   11c5c:	10800017 	ldw	r2,0(r2)
   11c60:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11c64:	e0fffc17 	ldw	r3,-16(fp)
   11c68:	e0bfff17 	ldw	r2,-4(fp)
   11c6c:	18bff01e 	bne	r3,r2,11c30 <__alt_data_end+0xff011c30>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   11c70:	0005883a 	mov	r2,zero
}
   11c74:	e037883a 	mov	sp,fp
   11c78:	dfc00117 	ldw	ra,4(sp)
   11c7c:	df000017 	ldw	fp,0(sp)
   11c80:	dec00204 	addi	sp,sp,8
   11c84:	f800283a 	ret

00011c88 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11c88:	defffb04 	addi	sp,sp,-20
   11c8c:	dfc00415 	stw	ra,16(sp)
   11c90:	df000315 	stw	fp,12(sp)
   11c94:	df000304 	addi	fp,sp,12
   11c98:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   11c9c:	d0a00617 	ldw	r2,-32744(gp)
   11ca0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11ca4:	00003106 	br	11d6c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   11ca8:	e0bffd17 	ldw	r2,-12(fp)
   11cac:	10800217 	ldw	r2,8(r2)
   11cb0:	1009883a 	mov	r4,r2
   11cb4:	0003ae80 	call	3ae8 <strlen>
   11cb8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   11cbc:	e0bffd17 	ldw	r2,-12(fp)
   11cc0:	10c00217 	ldw	r3,8(r2)
   11cc4:	e0bffe17 	ldw	r2,-8(fp)
   11cc8:	10bfffc4 	addi	r2,r2,-1
   11ccc:	1885883a 	add	r2,r3,r2
   11cd0:	10800003 	ldbu	r2,0(r2)
   11cd4:	10803fcc 	andi	r2,r2,255
   11cd8:	1080201c 	xori	r2,r2,128
   11cdc:	10bfe004 	addi	r2,r2,-128
   11ce0:	10800bd8 	cmpnei	r2,r2,47
   11ce4:	1000031e 	bne	r2,zero,11cf4 <alt_find_file+0x6c>
    {
      len -= 1;
   11ce8:	e0bffe17 	ldw	r2,-8(fp)
   11cec:	10bfffc4 	addi	r2,r2,-1
   11cf0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11cf4:	e0bffe17 	ldw	r2,-8(fp)
   11cf8:	e0ffff17 	ldw	r3,-4(fp)
   11cfc:	1885883a 	add	r2,r3,r2
   11d00:	10800003 	ldbu	r2,0(r2)
   11d04:	10803fcc 	andi	r2,r2,255
   11d08:	1080201c 	xori	r2,r2,128
   11d0c:	10bfe004 	addi	r2,r2,-128
   11d10:	10800be0 	cmpeqi	r2,r2,47
   11d14:	1000081e 	bne	r2,zero,11d38 <alt_find_file+0xb0>
   11d18:	e0bffe17 	ldw	r2,-8(fp)
   11d1c:	e0ffff17 	ldw	r3,-4(fp)
   11d20:	1885883a 	add	r2,r3,r2
   11d24:	10800003 	ldbu	r2,0(r2)
   11d28:	10803fcc 	andi	r2,r2,255
   11d2c:	1080201c 	xori	r2,r2,128
   11d30:	10bfe004 	addi	r2,r2,-128
   11d34:	10000a1e 	bne	r2,zero,11d60 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   11d38:	e0bffd17 	ldw	r2,-12(fp)
   11d3c:	10800217 	ldw	r2,8(r2)
   11d40:	e0fffe17 	ldw	r3,-8(fp)
   11d44:	180d883a 	mov	r6,r3
   11d48:	e17fff17 	ldw	r5,-4(fp)
   11d4c:	1009883a 	mov	r4,r2
   11d50:	0011fac0 	call	11fac <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11d54:	1000021e 	bne	r2,zero,11d60 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   11d58:	e0bffd17 	ldw	r2,-12(fp)
   11d5c:	00000706 	br	11d7c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   11d60:	e0bffd17 	ldw	r2,-12(fp)
   11d64:	10800017 	ldw	r2,0(r2)
   11d68:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11d6c:	e0fffd17 	ldw	r3,-12(fp)
   11d70:	d0a00604 	addi	r2,gp,-32744
   11d74:	18bfcc1e 	bne	r3,r2,11ca8 <__alt_data_end+0xff011ca8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   11d78:	0005883a 	mov	r2,zero
}
   11d7c:	e037883a 	mov	sp,fp
   11d80:	dfc00117 	ldw	ra,4(sp)
   11d84:	df000017 	ldw	fp,0(sp)
   11d88:	dec00204 	addi	sp,sp,8
   11d8c:	f800283a 	ret

00011d90 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   11d90:	defffc04 	addi	sp,sp,-16
   11d94:	df000315 	stw	fp,12(sp)
   11d98:	df000304 	addi	fp,sp,12
   11d9c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   11da0:	00bffa04 	movi	r2,-24
   11da4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11da8:	e03ffd15 	stw	zero,-12(fp)
   11dac:	00001906 	br	11e14 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   11db0:	00800074 	movhi	r2,1
   11db4:	108ce004 	addi	r2,r2,13184
   11db8:	e0fffd17 	ldw	r3,-12(fp)
   11dbc:	18c00324 	muli	r3,r3,12
   11dc0:	10c5883a 	add	r2,r2,r3
   11dc4:	10800017 	ldw	r2,0(r2)
   11dc8:	10000f1e 	bne	r2,zero,11e08 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   11dcc:	00800074 	movhi	r2,1
   11dd0:	108ce004 	addi	r2,r2,13184
   11dd4:	e0fffd17 	ldw	r3,-12(fp)
   11dd8:	18c00324 	muli	r3,r3,12
   11ddc:	10c5883a 	add	r2,r2,r3
   11de0:	e0ffff17 	ldw	r3,-4(fp)
   11de4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   11de8:	d0e00a17 	ldw	r3,-32728(gp)
   11dec:	e0bffd17 	ldw	r2,-12(fp)
   11df0:	1880020e 	bge	r3,r2,11dfc <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   11df4:	e0bffd17 	ldw	r2,-12(fp)
   11df8:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   11dfc:	e0bffd17 	ldw	r2,-12(fp)
   11e00:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   11e04:	00000606 	br	11e20 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11e08:	e0bffd17 	ldw	r2,-12(fp)
   11e0c:	10800044 	addi	r2,r2,1
   11e10:	e0bffd15 	stw	r2,-12(fp)
   11e14:	e0bffd17 	ldw	r2,-12(fp)
   11e18:	10800810 	cmplti	r2,r2,32
   11e1c:	103fe41e 	bne	r2,zero,11db0 <__alt_data_end+0xff011db0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   11e20:	e0bffe17 	ldw	r2,-8(fp)
}
   11e24:	e037883a 	mov	sp,fp
   11e28:	df000017 	ldw	fp,0(sp)
   11e2c:	dec00104 	addi	sp,sp,4
   11e30:	f800283a 	ret

00011e34 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   11e34:	defffb04 	addi	sp,sp,-20
   11e38:	df000415 	stw	fp,16(sp)
   11e3c:	df000404 	addi	fp,sp,16
   11e40:	e13ffe15 	stw	r4,-8(fp)
   11e44:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   11e48:	e0bfff17 	ldw	r2,-4(fp)
   11e4c:	10840070 	cmpltui	r2,r2,4097
   11e50:	1000021e 	bne	r2,zero,11e5c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   11e54:	00840004 	movi	r2,4096
   11e58:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   11e5c:	e0fffe17 	ldw	r3,-8(fp)
   11e60:	e0bfff17 	ldw	r2,-4(fp)
   11e64:	1885883a 	add	r2,r3,r2
   11e68:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11e6c:	e0bffe17 	ldw	r2,-8(fp)
   11e70:	e0bffc15 	stw	r2,-16(fp)
   11e74:	00000506 	br	11e8c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   11e78:	e0bffc17 	ldw	r2,-16(fp)
   11e7c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11e80:	e0bffc17 	ldw	r2,-16(fp)
   11e84:	10800804 	addi	r2,r2,32
   11e88:	e0bffc15 	stw	r2,-16(fp)
   11e8c:	e0fffc17 	ldw	r3,-16(fp)
   11e90:	e0bffd17 	ldw	r2,-12(fp)
   11e94:	18bff836 	bltu	r3,r2,11e78 <__alt_data_end+0xff011e78>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   11e98:	e0bffe17 	ldw	r2,-8(fp)
   11e9c:	108007cc 	andi	r2,r2,31
   11ea0:	10000226 	beq	r2,zero,11eac <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   11ea4:	e0bffc17 	ldw	r2,-16(fp)
   11ea8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   11eac:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   11eb0:	0001883a 	nop
   11eb4:	e037883a 	mov	sp,fp
   11eb8:	df000017 	ldw	fp,0(sp)
   11ebc:	dec00104 	addi	sp,sp,4
   11ec0:	f800283a 	ret

00011ec4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   11ec4:	defffe04 	addi	sp,sp,-8
   11ec8:	df000115 	stw	fp,4(sp)
   11ecc:	df000104 	addi	fp,sp,4
   11ed0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   11ed4:	e0bfff17 	ldw	r2,-4(fp)
   11ed8:	10bffe84 	addi	r2,r2,-6
   11edc:	10c00428 	cmpgeui	r3,r2,16
   11ee0:	18001a1e 	bne	r3,zero,11f4c <alt_exception_cause_generated_bad_addr+0x88>
   11ee4:	100690ba 	slli	r3,r2,2
   11ee8:	00800074 	movhi	r2,1
   11eec:	1087bf04 	addi	r2,r2,7932
   11ef0:	1885883a 	add	r2,r3,r2
   11ef4:	10800017 	ldw	r2,0(r2)
   11ef8:	1000683a 	jmp	r2
   11efc:	00011f3c 	xorhi	zero,zero,1148
   11f00:	00011f3c 	xorhi	zero,zero,1148
   11f04:	00011f4c 	andi	zero,zero,1149
   11f08:	00011f4c 	andi	zero,zero,1149
   11f0c:	00011f4c 	andi	zero,zero,1149
   11f10:	00011f3c 	xorhi	zero,zero,1148
   11f14:	00011f44 	movi	zero,1149
   11f18:	00011f4c 	andi	zero,zero,1149
   11f1c:	00011f3c 	xorhi	zero,zero,1148
   11f20:	00011f3c 	xorhi	zero,zero,1148
   11f24:	00011f4c 	andi	zero,zero,1149
   11f28:	00011f3c 	xorhi	zero,zero,1148
   11f2c:	00011f44 	movi	zero,1149
   11f30:	00011f4c 	andi	zero,zero,1149
   11f34:	00011f4c 	andi	zero,zero,1149
   11f38:	00011f3c 	xorhi	zero,zero,1148
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11f3c:	00800044 	movi	r2,1
   11f40:	00000306 	br	11f50 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11f44:	0005883a 	mov	r2,zero
   11f48:	00000106 	br	11f50 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   11f4c:	0005883a 	mov	r2,zero
  }
}
   11f50:	e037883a 	mov	sp,fp
   11f54:	df000017 	ldw	fp,0(sp)
   11f58:	dec00104 	addi	sp,sp,4
   11f5c:	f800283a 	ret

00011f60 <atexit>:
   11f60:	200b883a 	mov	r5,r4
   11f64:	000f883a 	mov	r7,zero
   11f68:	000d883a 	mov	r6,zero
   11f6c:	0009883a 	mov	r4,zero
   11f70:	00120281 	jmpi	12028 <__register_exitproc>

00011f74 <exit>:
   11f74:	defffe04 	addi	sp,sp,-8
   11f78:	000b883a 	mov	r5,zero
   11f7c:	dc000015 	stw	r16,0(sp)
   11f80:	dfc00115 	stw	ra,4(sp)
   11f84:	2021883a 	mov	r16,r4
   11f88:	00121400 	call	12140 <__call_exitprocs>
   11f8c:	00800074 	movhi	r2,1
   11f90:	10915a04 	addi	r2,r2,17768
   11f94:	11000017 	ldw	r4,0(r2)
   11f98:	20800f17 	ldw	r2,60(r4)
   11f9c:	10000126 	beq	r2,zero,11fa4 <exit+0x30>
   11fa0:	103ee83a 	callr	r2
   11fa4:	8009883a 	mov	r4,r16
   11fa8:	00122c00 	call	122c0 <_exit>

00011fac <memcmp>:
   11fac:	01c000c4 	movi	r7,3
   11fb0:	3980192e 	bgeu	r7,r6,12018 <memcmp+0x6c>
   11fb4:	2144b03a 	or	r2,r4,r5
   11fb8:	11c4703a 	and	r2,r2,r7
   11fbc:	10000f26 	beq	r2,zero,11ffc <memcmp+0x50>
   11fc0:	20800003 	ldbu	r2,0(r4)
   11fc4:	28c00003 	ldbu	r3,0(r5)
   11fc8:	10c0151e 	bne	r2,r3,12020 <memcmp+0x74>
   11fcc:	31bfff84 	addi	r6,r6,-2
   11fd0:	01ffffc4 	movi	r7,-1
   11fd4:	00000406 	br	11fe8 <memcmp+0x3c>
   11fd8:	20800003 	ldbu	r2,0(r4)
   11fdc:	28c00003 	ldbu	r3,0(r5)
   11fe0:	31bfffc4 	addi	r6,r6,-1
   11fe4:	10c00e1e 	bne	r2,r3,12020 <memcmp+0x74>
   11fe8:	21000044 	addi	r4,r4,1
   11fec:	29400044 	addi	r5,r5,1
   11ff0:	31fff91e 	bne	r6,r7,11fd8 <__alt_data_end+0xff011fd8>
   11ff4:	0005883a 	mov	r2,zero
   11ff8:	f800283a 	ret
   11ffc:	20c00017 	ldw	r3,0(r4)
   12000:	28800017 	ldw	r2,0(r5)
   12004:	18bfee1e 	bne	r3,r2,11fc0 <__alt_data_end+0xff011fc0>
   12008:	31bfff04 	addi	r6,r6,-4
   1200c:	21000104 	addi	r4,r4,4
   12010:	29400104 	addi	r5,r5,4
   12014:	39bff936 	bltu	r7,r6,11ffc <__alt_data_end+0xff011ffc>
   12018:	303fe91e 	bne	r6,zero,11fc0 <__alt_data_end+0xff011fc0>
   1201c:	003ff506 	br	11ff4 <__alt_data_end+0xff011ff4>
   12020:	10c5c83a 	sub	r2,r2,r3
   12024:	f800283a 	ret

00012028 <__register_exitproc>:
   12028:	defffa04 	addi	sp,sp,-24
   1202c:	dc000315 	stw	r16,12(sp)
   12030:	04000074 	movhi	r16,1
   12034:	84115a04 	addi	r16,r16,17768
   12038:	80c00017 	ldw	r3,0(r16)
   1203c:	dc400415 	stw	r17,16(sp)
   12040:	dfc00515 	stw	ra,20(sp)
   12044:	18805217 	ldw	r2,328(r3)
   12048:	2023883a 	mov	r17,r4
   1204c:	10003726 	beq	r2,zero,1212c <__register_exitproc+0x104>
   12050:	10c00117 	ldw	r3,4(r2)
   12054:	010007c4 	movi	r4,31
   12058:	20c00e16 	blt	r4,r3,12094 <__register_exitproc+0x6c>
   1205c:	1a000044 	addi	r8,r3,1
   12060:	8800221e 	bne	r17,zero,120ec <__register_exitproc+0xc4>
   12064:	18c00084 	addi	r3,r3,2
   12068:	18c7883a 	add	r3,r3,r3
   1206c:	18c7883a 	add	r3,r3,r3
   12070:	12000115 	stw	r8,4(r2)
   12074:	10c7883a 	add	r3,r2,r3
   12078:	19400015 	stw	r5,0(r3)
   1207c:	0005883a 	mov	r2,zero
   12080:	dfc00517 	ldw	ra,20(sp)
   12084:	dc400417 	ldw	r17,16(sp)
   12088:	dc000317 	ldw	r16,12(sp)
   1208c:	dec00604 	addi	sp,sp,24
   12090:	f800283a 	ret
   12094:	00800034 	movhi	r2,0
   12098:	108c4804 	addi	r2,r2,12576
   1209c:	10002626 	beq	r2,zero,12138 <__register_exitproc+0x110>
   120a0:	01006404 	movi	r4,400
   120a4:	d9400015 	stw	r5,0(sp)
   120a8:	d9800115 	stw	r6,4(sp)
   120ac:	d9c00215 	stw	r7,8(sp)
   120b0:	00031200 	call	3120 <malloc>
   120b4:	d9400017 	ldw	r5,0(sp)
   120b8:	d9800117 	ldw	r6,4(sp)
   120bc:	d9c00217 	ldw	r7,8(sp)
   120c0:	10001d26 	beq	r2,zero,12138 <__register_exitproc+0x110>
   120c4:	81000017 	ldw	r4,0(r16)
   120c8:	10000115 	stw	zero,4(r2)
   120cc:	02000044 	movi	r8,1
   120d0:	22405217 	ldw	r9,328(r4)
   120d4:	0007883a 	mov	r3,zero
   120d8:	12400015 	stw	r9,0(r2)
   120dc:	20805215 	stw	r2,328(r4)
   120e0:	10006215 	stw	zero,392(r2)
   120e4:	10006315 	stw	zero,396(r2)
   120e8:	883fde26 	beq	r17,zero,12064 <__alt_data_end+0xff012064>
   120ec:	18c9883a 	add	r4,r3,r3
   120f0:	2109883a 	add	r4,r4,r4
   120f4:	1109883a 	add	r4,r2,r4
   120f8:	21802215 	stw	r6,136(r4)
   120fc:	01800044 	movi	r6,1
   12100:	12406217 	ldw	r9,392(r2)
   12104:	30cc983a 	sll	r6,r6,r3
   12108:	4992b03a 	or	r9,r9,r6
   1210c:	12406215 	stw	r9,392(r2)
   12110:	21c04215 	stw	r7,264(r4)
   12114:	01000084 	movi	r4,2
   12118:	893fd21e 	bne	r17,r4,12064 <__alt_data_end+0xff012064>
   1211c:	11006317 	ldw	r4,396(r2)
   12120:	218cb03a 	or	r6,r4,r6
   12124:	11806315 	stw	r6,396(r2)
   12128:	003fce06 	br	12064 <__alt_data_end+0xff012064>
   1212c:	18805304 	addi	r2,r3,332
   12130:	18805215 	stw	r2,328(r3)
   12134:	003fc606 	br	12050 <__alt_data_end+0xff012050>
   12138:	00bfffc4 	movi	r2,-1
   1213c:	003fd006 	br	12080 <__alt_data_end+0xff012080>

00012140 <__call_exitprocs>:
   12140:	defff504 	addi	sp,sp,-44
   12144:	df000915 	stw	fp,36(sp)
   12148:	dd400615 	stw	r21,24(sp)
   1214c:	dc800315 	stw	r18,12(sp)
   12150:	dfc00a15 	stw	ra,40(sp)
   12154:	ddc00815 	stw	r23,32(sp)
   12158:	dd800715 	stw	r22,28(sp)
   1215c:	dd000515 	stw	r20,20(sp)
   12160:	dcc00415 	stw	r19,16(sp)
   12164:	dc400215 	stw	r17,8(sp)
   12168:	dc000115 	stw	r16,4(sp)
   1216c:	d9000015 	stw	r4,0(sp)
   12170:	2839883a 	mov	fp,r5
   12174:	04800044 	movi	r18,1
   12178:	057fffc4 	movi	r21,-1
   1217c:	00800074 	movhi	r2,1
   12180:	10915a04 	addi	r2,r2,17768
   12184:	12000017 	ldw	r8,0(r2)
   12188:	45005217 	ldw	r20,328(r8)
   1218c:	44c05204 	addi	r19,r8,328
   12190:	a0001c26 	beq	r20,zero,12204 <__call_exitprocs+0xc4>
   12194:	a0800117 	ldw	r2,4(r20)
   12198:	15ffffc4 	addi	r23,r2,-1
   1219c:	b8000d16 	blt	r23,zero,121d4 <__call_exitprocs+0x94>
   121a0:	14000044 	addi	r16,r2,1
   121a4:	8421883a 	add	r16,r16,r16
   121a8:	8421883a 	add	r16,r16,r16
   121ac:	84402004 	addi	r17,r16,128
   121b0:	a463883a 	add	r17,r20,r17
   121b4:	a421883a 	add	r16,r20,r16
   121b8:	e0001e26 	beq	fp,zero,12234 <__call_exitprocs+0xf4>
   121bc:	80804017 	ldw	r2,256(r16)
   121c0:	e0801c26 	beq	fp,r2,12234 <__call_exitprocs+0xf4>
   121c4:	bdffffc4 	addi	r23,r23,-1
   121c8:	843fff04 	addi	r16,r16,-4
   121cc:	8c7fff04 	addi	r17,r17,-4
   121d0:	bd7ff91e 	bne	r23,r21,121b8 <__alt_data_end+0xff0121b8>
   121d4:	00800034 	movhi	r2,0
   121d8:	108c4d04 	addi	r2,r2,12596
   121dc:	10000926 	beq	r2,zero,12204 <__call_exitprocs+0xc4>
   121e0:	a0800117 	ldw	r2,4(r20)
   121e4:	1000301e 	bne	r2,zero,122a8 <__call_exitprocs+0x168>
   121e8:	a0800017 	ldw	r2,0(r20)
   121ec:	10003226 	beq	r2,zero,122b8 <__call_exitprocs+0x178>
   121f0:	a009883a 	mov	r4,r20
   121f4:	98800015 	stw	r2,0(r19)
   121f8:	00031340 	call	3134 <free>
   121fc:	9d000017 	ldw	r20,0(r19)
   12200:	a03fe41e 	bne	r20,zero,12194 <__alt_data_end+0xff012194>
   12204:	dfc00a17 	ldw	ra,40(sp)
   12208:	df000917 	ldw	fp,36(sp)
   1220c:	ddc00817 	ldw	r23,32(sp)
   12210:	dd800717 	ldw	r22,28(sp)
   12214:	dd400617 	ldw	r21,24(sp)
   12218:	dd000517 	ldw	r20,20(sp)
   1221c:	dcc00417 	ldw	r19,16(sp)
   12220:	dc800317 	ldw	r18,12(sp)
   12224:	dc400217 	ldw	r17,8(sp)
   12228:	dc000117 	ldw	r16,4(sp)
   1222c:	dec00b04 	addi	sp,sp,44
   12230:	f800283a 	ret
   12234:	a0800117 	ldw	r2,4(r20)
   12238:	80c00017 	ldw	r3,0(r16)
   1223c:	10bfffc4 	addi	r2,r2,-1
   12240:	15c01426 	beq	r2,r23,12294 <__call_exitprocs+0x154>
   12244:	80000015 	stw	zero,0(r16)
   12248:	183fde26 	beq	r3,zero,121c4 <__alt_data_end+0xff0121c4>
   1224c:	95c8983a 	sll	r4,r18,r23
   12250:	a0806217 	ldw	r2,392(r20)
   12254:	a5800117 	ldw	r22,4(r20)
   12258:	2084703a 	and	r2,r4,r2
   1225c:	10000b26 	beq	r2,zero,1228c <__call_exitprocs+0x14c>
   12260:	a0806317 	ldw	r2,396(r20)
   12264:	2088703a 	and	r4,r4,r2
   12268:	20000c1e 	bne	r4,zero,1229c <__call_exitprocs+0x15c>
   1226c:	89400017 	ldw	r5,0(r17)
   12270:	d9000017 	ldw	r4,0(sp)
   12274:	183ee83a 	callr	r3
   12278:	a0800117 	ldw	r2,4(r20)
   1227c:	15bfbf1e 	bne	r2,r22,1217c <__alt_data_end+0xff01217c>
   12280:	98800017 	ldw	r2,0(r19)
   12284:	153fcf26 	beq	r2,r20,121c4 <__alt_data_end+0xff0121c4>
   12288:	003fbc06 	br	1217c <__alt_data_end+0xff01217c>
   1228c:	183ee83a 	callr	r3
   12290:	003ff906 	br	12278 <__alt_data_end+0xff012278>
   12294:	a5c00115 	stw	r23,4(r20)
   12298:	003feb06 	br	12248 <__alt_data_end+0xff012248>
   1229c:	89000017 	ldw	r4,0(r17)
   122a0:	183ee83a 	callr	r3
   122a4:	003ff406 	br	12278 <__alt_data_end+0xff012278>
   122a8:	a0800017 	ldw	r2,0(r20)
   122ac:	a027883a 	mov	r19,r20
   122b0:	1029883a 	mov	r20,r2
   122b4:	003fb606 	br	12190 <__alt_data_end+0xff012190>
   122b8:	0005883a 	mov	r2,zero
   122bc:	003ffb06 	br	122ac <__alt_data_end+0xff0122ac>

000122c0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   122c0:	defffd04 	addi	sp,sp,-12
   122c4:	df000215 	stw	fp,8(sp)
   122c8:	df000204 	addi	fp,sp,8
   122cc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   122d0:	0001883a 	nop
   122d4:	e0bfff17 	ldw	r2,-4(fp)
   122d8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   122dc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   122e0:	10000226 	beq	r2,zero,122ec <_exit+0x2c>
    ALT_SIM_FAIL();
   122e4:	002af070 	cmpltui	zero,zero,43969
   122e8:	00000106 	br	122f0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   122ec:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   122f0:	003fff06 	br	122f0 <__alt_data_end+0xff0122f0>
