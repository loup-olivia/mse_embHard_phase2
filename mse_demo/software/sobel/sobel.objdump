
sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000115d8 memsz 0x000115d8 flags r-x
    LOAD off    0x000125f8 vaddr 0x000115f8 paddr 0x000130e4 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00014bd0 vaddr 0x00014bd0 paddr 0x00014bd0 align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010c20  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000794  00010e64  00010e64  00011e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  000115f8  000130e4  000125f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  00014bd0  00014bd0  00014bd0  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  00014d60  00014d60  000140e4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000140e4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001038  00000000  00000000  00014108  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00026a2d  00000000  00000000  00015140  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009c8d  00000000  00000000  0003bb6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c379  00000000  00000000  000457fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000025b0  00000000  00000000  00051b74  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003e2d  00000000  00000000  00054124  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000191f0  00000000  00000000  00057f51  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00071144  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001980  00000000  00000000  000711a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007654e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00076551  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007655d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007655e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007655f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00076563  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00076567  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0007656b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00076574  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0007657d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00076586  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000049  00000000  00000000  00076591  2**0
                  CONTENTS, READONLY
 29 .jdi          00005ad8  00000000  00000000  000765da  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00072641  00000000  00000000  0007c0b2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00010e64 l    d  .rodata	00000000 .rodata
000115f8 l    d  .rwdata	00000000 .rwdata
00014bd0 l    d  .bss	00000000 .bss
00014d60 l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/olivi/master/embHard/mse_embHard_phase2/mse_demo/software/sobel_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 sobel_test.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00011346 l     O .rodata	00000010 zeroes.4404
00004728 l     F .text	000000bc __sbprintf
00011356 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00004938 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006468 l     F .text	00000008 __fp_unlock
0000647c l     F .text	0000019c __sinit.part.1
00006618 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00011a00 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00011e44 l     O .rwdata	00000020 lc_ctype_charset
00011e24 l     O .rwdata	00000020 lc_message_charset
00011e64 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00011388 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
000091b4 l     F .text	000000fc __sprint_r.part.0
000114bc l     O .rodata	00000010 blanks.4348
000114ac l     O .rodata	00000010 zeroes.4349
0000a740 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000e3fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000e508 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000e534 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000e620 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000e700 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000e7ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000e9c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000130d4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000ec3c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000ed70 l     F .text	00000034 alt_dev_reg
00012044 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f07c l     F .text	0000020c altera_avalon_jtag_uart_irq
0000f288 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000f8c0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000fd98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001020c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001034c l     F .text	0000003c alt_get_errno
00010388 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00014c34 g     O .bss	00000004 alt_instruction_exception_handler
0000884c g     F .text	00000074 _mprec_log10
00008938 g     F .text	0000008c __any_on
0000acdc g     F .text	00000054 _isatty_r
00011394 g     O .rodata	00000028 __mprec_tinytens
0000e8fc g     F .text	0000007c alt_main
00002354 g     F .text	000000c0 _puts_r
00014c60 g     O .bss	00000100 alt_irq
0000ad30 g     F .text	00000060 _lseek_r
000112eb g     O .rodata	00000009 gy_array
000130e4 g       *ABS*	00000000 __flash_rwdata_start
0000cf28 g     F .text	00000088 .hidden __eqdf2
00014d60 g       *ABS*	00000000 __alt_heap_start
00002318 g     F .text	0000003c printf
0000af48 g     F .text	0000009c _wcrtomb_r
00009074 g     F .text	0000005c __sseek
000067b8 g     F .text	00000010 __sinit
0000adf0 g     F .text	00000140 __swbuf_r
00007280 g     F .text	0000007c _setlocale_r
00006620 g     F .text	00000068 __sfmoreglue
0000e99c g     F .text	00000024 __malloc_unlock
00000a04 g     F .text	00000014 LCD_Write_Command
00014be0 g     O .bss	00000004 sobel_width
00014c24 g     O .bss	00000004 altera_avalon_timer_ts_freq
00007744 g     F .text	0000015c memmove
00000a18 g     F .text	00000014 LCD_Write_Data
000067a0 g     F .text	00000018 _cleanup
000079c8 g     F .text	000000a8 _Balloc
0000cfb0 g     F .text	000000dc .hidden __gtdf2
00010744 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000005a8 g     F .text	00000024 cam_get_xsize
0000ac80 g     F .text	0000005c _fstat_r
00014c04 g     O .bss	00000004 errno
00008ff0 g     F .text	00000008 __seofread
00014c18 g     O .bss	00000004 alt_argv
0001b0a4 g       *ABS*	00000000 _gp
0000ec0c g     F .text	00000030 usleep
00000668 g     F .text	00000074 cam_set_image_pointer
00011ec4 g     O .rwdata	00000180 alt_fd_list
00001a94 g     F .text	00000010 vga_set_pointer
00010768 g     F .text	00000090 alt_find_dev
000075fc g     F .text	00000148 memcpy
00006470 g     F .text	0000000c _cleanup_r
0000e214 g     F .text	000000dc .hidden __floatsidf
000102d0 g     F .text	0000007c alt_io_redirect
0000d08c g     F .text	000000f4 .hidden __ltdf2
00010e64 g       *ABS*	00000000 __DTOR_END__
00002414 g     F .text	00000014 puts
00010a34 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00008f28 g     F .text	00000074 __fpclassifyd
000087a8 g     F .text	000000a4 __ratio
0000a724 g     F .text	0000001c __vfiprintf_internal
0000f480 g     F .text	0000021c altera_avalon_jtag_uart_read
00001ab4 g     F .text	00000014 malloc
000022e8 g     F .text	00000030 _printf_r
00000858 g     F .text	00000008 get_grayscale_picture
0000bcd8 g     F .text	00000064 .hidden __udivsi3
00010ec4 g     O .rodata	00000128 lens_roll_off_tbl
00000290 g     F .text	00000318 init_camera
0000e65c g     F .text	000000a4 isatty
000113e4 g     O .rodata	000000c8 __mprec_tens
000072fc g     F .text	0000000c __locale_charset
000109a4 g     F .text	00000090 alt_icache_flush
00014c00 g     O .bss	00000004 __malloc_top_pad
000130b4 g     O .rwdata	00000004 __mb_cur_max
0000732c g     F .text	0000000c _localeconv_r
0000168c g     F .text	00000004 sobel_x
00007dd4 g     F .text	0000003c __i2b
00006c3c g     F .text	000004bc __sfvwrite_r
00000a2c g     F .text	00000414 init_LCD
00002428 g     F .text	00000054 _sbrk_r
000005f0 g     F .text	00000078 cam_get_profiling
0000ad90 g     F .text	00000060 _read_r
00014be4 g     O .bss	00000004 sobel_result
000130cc g     O .rwdata	00000004 alt_max_fd
0000a974 g     F .text	000000f0 _fclose_r
00006438 g     F .text	00000030 fflush
00014bfc g     O .bss	00000004 __malloc_max_sbrked_mem
00014bd8 g     O .bss	00000004 grayscale_array
0000bd94 g     F .text	000008ac .hidden __adddf3
000005cc g     F .text	00000024 cam_get_ysize
00008550 g     F .text	0000010c __b2d
0000b6a8 g     F .text	00000538 .hidden __umoddi3
0000e828 g     F .text	000000d4 lseek
00000920 g     F .text	0000008c i2c_short_read
000130ac g     O .rwdata	00000004 _global_impure_ptr
000089c4 g     F .text	00000564 _realloc_r
00014d60 g       *ABS*	00000000 __bss_end
0001011c g     F .text	000000f0 alt_iic_isr_register
0001063c g     F .text	00000108 alt_tick
0000b130 g     F .text	00000578 .hidden __udivdi3
0000abdc g     F .text	00000024 _fputwc_r
000113bc g     O .rodata	00000028 __mprec_bigtens
00007bb8 g     F .text	00000104 __s2b
0000e2f0 g     F .text	000000a8 .hidden __floatunsidf
00008290 g     F .text	00000060 __mcmp
000067d8 g     F .text	00000018 __fp_lock_all
000100d0 g     F .text	0000004c alt_ic_irq_enabled
00014bd0 g     O .bss	00000004 grayscape_height
000105a0 g     F .text	0000009c alt_alarm_stop
00014c28 g     O .bss	00000004 alt_irq_active
000014ec g     F .text	0000019c sobel_complete_V2
000000fc g     F .exceptions	000000d4 alt_irq_handler
00011e9c g     O .rwdata	00000028 alt_dev_null
00000ecc g     F .text	00000078 transfer_LCD_with_dma
00001688 g     F .text	00000004 sobel_complete
0000fd50 g     F .text	00000048 alt_dcache_flush_all
00007cbc g     F .text	00000068 __hi0bits
0000e194 g     F .text	00000080 .hidden __fixdfsi
000130e4 g       *ABS*	00000000 __ram_rwdata_end
000130c4 g     O .rwdata	00000008 alt_dev_list
0000ec78 g     F .text	000000f8 write
0000faac g     F .text	00000020 alt_timestamp_freq
000115f8 g       *ABS*	00000000 __ram_rodata_end
0000e570 g     F .text	000000b0 fstat
0000d08c g     F .text	000000f4 .hidden __ledf2
00008008 g     F .text	00000140 __pow5mult
000092c8 g     F .text	0000145c ___vfiprintf_internal_r
00014c10 g     O .bss	00000004 __nlocale_changed
0000bd3c g     F .text	00000058 .hidden __umodsi3
00001a84 g     F .text	00000008 GetSobel_rgb
00014d60 g       *ABS*	00000000 end
00001a8c g     F .text	00000008 GetSobelResult
00000700 g     F .text	00000020 take_picture_blocking
00000760 g     F .text	00000014 DIPSW_get_value
00001834 g     F .text	00000190 sobel_y_with_rgb
0000efbc g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000006f0 g     F .text	00000010 current_image_pointer
00010e64 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0000f938 g     F .text	0000007c alt_avalon_timer_sc_init
0000e398 g     F .text	00000064 .hidden __clzsi2
0000f69c g     F .text	00000224 altera_avalon_jtag_uart_write
000067c8 g     F .text	00000004 __sfp_lock_acquire
00007518 g     F .text	000000e4 memchr
00002514 g     F .text	000021f8 ___vfprintf_internal_r
0000692c g     F .text	00000310 _free_r
00007308 g     F .text	00000010 __locale_mb_cur_max
00001830 g     F .text	00000004 sobel_y
00010fec g     O .rodata	00000140 noise_reduction_reg_settings_array
00010cb0 g     F .text	00000180 __call_exitprocs
00014c0c g     O .bss	00000004 __mlocale_changed
000130a4 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
00014c2c g     O .bss	00000004 _alt_tick_rate
00008148 g     F .text	00000148 __lshift
00014c30 g     O .bss	00000004 _alt_nticks
0000e9fc g     F .text	000000fc read
0000eddc g     F .text	0000007c alt_sys_init
00001690 g     F .text	000001a0 sobel_x_with_rgb
00010b98 g     F .text	00000118 __register_exitproc
00007e10 g     F .text	000001f8 __multiply
0000f328 g     F .text	00000068 altera_avalon_jtag_uart_close
000115f8 g       *ABS*	00000000 __ram_rwdata_start
00010e64 g       *ABS*	00000000 __ram_rodata_start
00014c38 g     O .bss	00000028 __malloc_current_mallinfo
0000865c g     F .text	0000014c __d2b
00014be8 g     O .bss	00000004 sobel_height
00000720 g     F .text	00000014 enable_continues_mode
0000ee58 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00001410 g     F .text	000000dc init_sobel_arrays
00010900 g     F .text	000000a4 alt_get_fd
0000fbf8 g     F .text	00000158 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000a85c g     F .text	00000054 _close_r
00010b1c g     F .text	0000007c memcmp
0000ef18 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00014d60 g       *ABS*	00000000 __alt_stack_base
0000ef68 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000047e4 g     F .text	00000154 __swsetup_r
0000c640 g     F .text	000008e8 .hidden __divdf3
00006688 g     F .text	00000118 __sfp
000088c0 g     F .text	00000078 __copybits
000115f8 g     O .rwdata	00000408 __malloc_av_
000067d4 g     F .text	00000004 __sinit_lock_release
0000d180 g     F .text	00000718 .hidden __muldf3
00008f9c g     F .text	00000054 __sread
000107f8 g     F .text	00000108 alt_find_file
0000fdd4 g     F .text	000000a4 alt_dev_llist_insert
0000e978 g     F .text	00000024 __malloc_lock
0000eb5c g     F .text	000000b0 sbrk
000063dc g     F .text	0000005c _fflush_r
0000a8b0 g     F .text	000000c4 _calloc_r
00014bd0 g       *ABS*	00000000 __bss_start
000078a0 g     F .text	00000128 memset
00000f44 g     F .text	000004cc main
00014c1c g     O .bss	00000004 alt_envp
00014bf8 g     O .bss	00000004 __malloc_max_total_mem
00000848 g     F .text	00000008 get_grayscale_width
0000eeb8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000af30 g     F .text	00000018 __swbuf
00014bec g     O .bss	00000004 sobel_x_result
000090d0 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000aa64 g     F .text	00000014 fclose
0000f9b4 g     F .text	00000078 alt_timestamp_start
00004b38 g     F .text	00001688 _dtoa_r
00001adc g     F .text	0000080c _malloc_r
0000b0a4 g     F .text	00000030 __ascii_wctomb
000130d0 g     O .rwdata	00000004 alt_errno
000070f8 g     F .text	000000c4 _fwalk
0000bbe0 g     F .text	00000084 .hidden __divsi3
00006808 g     F .text	00000124 _malloc_trim_r
00010e64 g       *ABS*	00000000 __CTOR_END__
00014bd4 g     O .bss	00000004 grayscale_width
000090d8 g     F .text	000000dc strcmp
00000e40 g     F .text	0000008c transfer_LCD_no_dma
00010e64 g       *ABS*	00000000 __flash_rodata_start
00010e64 g       *ABS*	00000000 __DTOR_LIST__
0000cf28 g     F .text	00000088 .hidden __nedf2
0001112c g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000eda4 g     F .text	00000038 alt_irq_init
0000eaf8 g     F .text	00000064 alt_release_fd
00000878 g     F .text	000000a8 i2c_auto_detect
000114cc g     O .rodata	00000100 .hidden __clz_tab
000006dc g     F .text	00000014 current_image_valid
00014c08 g     O .bss	00000004 _PathLocale
00000860 g     F .text	00000018 i2c_busy_wait
00010ad0 g     F .text	00000014 atexit
0000a7fc g     F .text	00000060 _write_r
00007338 g     F .text	00000018 setlocale
000130b0 g     O .rwdata	00000004 _impure_ptr
00014c14 g     O .bss	00000004 alt_argc
000061c0 g     F .text	0000021c __sflush_r
00014c20 g     O .bss	00000004 altera_avalon_timer_ts_base
0000fed8 g     F .text	00000060 _do_dtors
00007324 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
000084ec g     F .text	00000064 __ulp
000067f0 g     F .text	00000018 __fp_unlock_all
000130bc g     O .rwdata	00000008 alt_fs_list
00014bf0 g     O .bss	00000004 sobel_y_result
000009ac g     F .text	00000058 i2c_short_write
00000020 g       *ABS*	00000000 __ram_exceptions_start
00014bdc g     O .bss	00000002 LCD_height
00007350 g     F .text	0000000c localeconv
0000fa2c g     F .text	00000080 alt_timestamp
00001aa4 g     F .text	00000010 vga_set_swap
0000ff6c g     F .text	00000050 alt_ic_isr_register
000019c4 g     F .text	000000c0 sobel_threshold
000130e4 g       *ABS*	00000000 _edata
00014d60 g       *ABS*	00000000 _end
0000aa78 g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000f390 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000112f4 g     O .rodata	00000009 gx_array
00010044 g     F .text	0000008c alt_ic_irq_disable
00008ff8 g     F .text	0000007c __swrite
000130a8 g     O .rwdata	00000004 __malloc_trim_threshold
00014bde g     O .bss	00000002 LCD_width
00000774 g     F .text	000000d4 conv_grayscale
00007318 g     F .text	0000000c __locale_msgcharset
00010ae4 g     F .text	00000038 exit
000071bc g     F .text	000000c4 _fwalk_reent
000082f0 g     F .text	000001fc __mdiff
0000bc64 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000067cc g     F .text	00000004 __sfp_lock_release
00000850 g     F .text	00000008 get_grayscale_height
00010e30 g     F .text	00000034 _exit
0000facc g     F .text	0000012c alt_alarm_start
0000735c g     F .text	000001bc __smakebuf_r
00014bf4 g     O .bss	00000004 sobel_rgb565
0000247c g     F .text	00000098 strlen
0001044c g     F .text	00000154 open
0000cfb0 g     F .text	000000dc .hidden __gedf2
000130b8 g     O .rwdata	00000004 __wctomb
000092b0 g     F .text	00000018 __sprint_r
0000ff38 g     F .text	00000034 alt_icache_flush_all
000130d8 g     O .rwdata	00000004 alt_priority_mask
0000ffbc g     F .text	00000088 alt_ic_irq_enable
0000470c g     F .text	0000001c __vfprintf_internal
0000b0d4 g     F .text	0000005c _wctomb_r
0000d898 g     F .text	000008fc .hidden __subdf3
00007d24 g     F .text	000000b0 __lo0bits
000130dc g     O .rwdata	00000008 alt_alarm_list
0000fe78 g     F .text	00000060 _do_ctors
0000afe4 g     F .text	000000c0 wcrtomb
0000e438 g     F .text	000000d0 close
0000e768 g     F .text	00000084 alt_load
0000ac00 g     F .text	00000080 fputwc
00001ac8 g     F .text	00000014 free
000067d0 g     F .text	00000004 __sinit_lock_acquire
00007a98 g     F .text	00000120 __multadd
00007a70 g     F .text	00000028 _Bfree
00000734 g     F .text	0000002c new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10931804 	addi	r2,r2,19552
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10931804 	addi	r2,r2,19552
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a6e417 	ldw	r2,-25712(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a6e417 	ldw	r2,-25712(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00900014 	movui	r2,16384
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <__alt_data_end+0xff000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     25c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     260:	d6ac2914 	ori	gp,gp,45220
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     268:	1092f414 	ori	r2,r2,19408

    movhi r3, %hi(__bss_end)
     26c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     270:	18d35814 	ori	r3,r3,19808

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <__alt_data_end+0xff000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	000e7680 	call	e768 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	000e8fc0 	call	e8fc <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <__alt_data_end+0xff00028c>

00000290 <init_camera>:
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     290:	00804034 	movhi	r2,256
     294:	10842744 	addi	r2,r2,4253
     298:	00c00084 	movi	r3,2
     29c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     2a0:	00804034 	movhi	r2,256
     2a4:	10841304 	addi	r2,r2,4172
     2a8:	00c00044 	movi	r3,1
     2ac:	10c00025 	stbio	r3,0(r2)
     2b0:	008003f4 	movhi	r2,15
     2b4:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2b8:	0001883a 	nop
     2bc:	10bfffc4 	addi	r2,r2,-1

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     2c0:	103ffd1e 	bne	r2,zero,2b8 <__alt_data_end+0xff0002b8>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     2c4:	00804034 	movhi	r2,256
     2c8:	10841304 	addi	r2,r2,4172
     2cc:	10000025 	stbio	zero,0(r2)
     2d0:	008003f4 	movhi	r2,15
     2d4:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2d8:	0001883a 	nop
     2dc:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     2e0:	103ffd1e 	bne	r2,zero,2d8 <__alt_data_end+0xff0002d8>
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     2e4:	defffc04 	addi	sp,sp,-16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     2e8:	01800044 	movi	r6,1
     2ec:	014ce184 	movi	r5,13190
     2f0:	01001e04 	movi	r4,120
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     2f4:	dfc00315 	stw	ra,12(sp)
     2f8:	dc800215 	stw	r18,8(sp)
     2fc:	dc400115 	stw	r17,4(sp)
     300:	dc000015 	stw	r16,0(sp)
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     304:	00009ac0 	call	9ac <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     308:	000d883a 	mov	r6,zero
     30c:	014ce184 	movi	r5,13190
     310:	01001e04 	movi	r4,120
     314:	00009ac0 	call	9ac <i2c_short_write>
     318:	008003f4 	movhi	r2,15
     31c:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     320:	0001883a 	nop
     324:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     328:	103ffd1e 	bne	r2,zero,320 <__alt_data_end+0xff000320>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     32c:	01803104 	movi	r6,196
     330:	014c0684 	movi	r5,12314
     334:	01001e04 	movi	r4,120
     338:	00009ac0 	call	9ac <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     33c:	01800204 	movi	r6,8
     340:	014c8084 	movi	r5,12802
     344:	01001e04 	movi	r4,120
     348:	00009ac0 	call	9ac <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     34c:	0180c744 	movi	r6,797
     350:	014cfd04 	movi	r5,13300
     354:	01001e04 	movi	r4,120
     358:	00009ac0 	call	9ac <i2c_short_write>
     35c:	008000b4 	movhi	r2,2
     360:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     364:	0001883a 	nop
     368:	10bfffc4 	addi	r2,r2,-1
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     36c:	103ffd1e 	bne	r2,zero,364 <__alt_data_end+0xff000364>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     370:	01a3c254 	movui	r6,36617
     374:	014d0784 	movi	r5,13342
     378:	01001e04 	movi	r4,120
     37c:	00009ac0 	call	9ac <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     380:	01805404 	movi	r6,336
     384:	014d0704 	movi	r5,13340
     388:	01001e04 	movi	r4,120
     38c:	00009ac0 	call	9ac <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     390:	01a3c254 	movui	r6,36617
     394:	014d0784 	movi	r5,13342
     398:	01001e04 	movi	r4,120
     39c:	00009ac0 	call	9ac <i2c_short_write>
     3a0:	008000b4 	movhi	r2,2
     3a4:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     3a8:	0001883a 	nop
     3ac:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     3b0:	103ffd1e 	bne	r2,zero,3a8 <__alt_data_end+0xff0003a8>
     3b4:	04000074 	movhi	r16,1
     3b8:	84044b04 	addi	r16,r16,4396
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     3bc:	01a3c214 	movui	r6,36616
     3c0:	014d0784 	movi	r5,13342
     3c4:	01001e04 	movi	r4,120
     3c8:	00009ac0 	call	9ac <i2c_short_write>
     3cc:	84400084 	addi	r17,r16,2
     3d0:	84804604 	addi	r18,r16,280
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     3d4:	8980000b 	ldhu	r6,0(r17)
     3d8:	8140000b 	ldhu	r5,0(r16)
     3dc:	01001e04 	movi	r4,120
     3e0:	84000104 	addi	r16,r16,4
     3e4:	00009ac0 	call	9ac <i2c_short_write>
     3e8:	8c400104 	addi	r17,r17,4
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     3ec:	84bff91e 	bne	r16,r18,3d4 <__alt_data_end+0xff0003d4>
     3f0:	04000074 	movhi	r16,1
     3f4:	8403fb04 	addi	r16,r16,4076
     3f8:	84400084 	addi	r17,r16,2
     3fc:	84805004 	addi	r18,r16,320
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     400:	8980000b 	ldhu	r6,0(r17)
     404:	8140000b 	ldhu	r5,0(r16)
     408:	01001e04 	movi	r4,120
     40c:	84000104 	addi	r16,r16,4
     410:	00009ac0 	call	9ac <i2c_short_write>
     414:	8c400104 	addi	r17,r17,4
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     418:	943ff91e 	bne	r18,r16,400 <__alt_data_end+0xff000400>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     41c:	018164c4 	movi	r6,1427
     420:	014d6904 	movi	r5,13732
     424:	01001e04 	movi	r4,120
     428:	00009ac0 	call	9ac <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     42c:	0189e644 	movi	r6,10137
     430:	014ce304 	movi	r5,13196
     434:	01001e04 	movi	r4,120
     438:	00009ac0 	call	9ac <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     43c:	01991004 	movi	r6,25664
     440:	014ce404 	movi	r5,13200
     444:	01001e04 	movi	r4,120
     448:	00009ac0 	call	9ac <i2c_short_write>
     44c:	008000b4 	movhi	r2,2
     450:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     454:	0001883a 	nop
     458:	10bfffc4 	addi	r2,r2,-1
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     45c:	103ffd1e 	bne	r2,zero,454 <__alt_data_end+0xff000454>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     460:	0189e6c4 	movi	r6,10139
     464:	014ce304 	movi	r5,13196
     468:	01001e04 	movi	r4,120
     46c:	00009ac0 	call	9ac <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     470:	01991004 	movi	r6,25664
     474:	014ce404 	movi	r5,13200
     478:	01001e04 	movi	r4,120
     47c:	00009ac0 	call	9ac <i2c_short_write>
     480:	008000b4 	movhi	r2,2
     484:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     488:	0001883a 	nop
     48c:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     490:	103ffd1e 	bne	r2,zero,488 <__alt_data_end+0xff000488>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     494:	01a840d4 	movui	r6,41219
     498:	014ce304 	movi	r5,13196
     49c:	01001e04 	movi	r4,120
     4a0:	00009ac0 	call	9ac <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     4a4:	01800144 	movi	r6,5
     4a8:	014ce404 	movi	r5,13200
     4ac:	01001e04 	movi	r4,120
     4b0:	00009ac0 	call	9ac <i2c_short_write>
     4b4:	008000b4 	movhi	r2,2
     4b8:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     4bc:	0001883a 	nop
     4c0:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     4c4:	103ffd1e 	bne	r2,zero,4bc <__alt_data_end+0xff0004bc>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     4c8:	01a840d4 	movui	r6,41219
     4cc:	014ce304 	movi	r5,13196
     4d0:	01001e04 	movi	r4,120
     4d4:	00009ac0 	call	9ac <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     4d8:	01800184 	movi	r6,6
     4dc:	014ce404 	movi	r5,13200
     4e0:	01001e04 	movi	r4,120
     4e4:	00009ac0 	call	9ac <i2c_short_write>
     4e8:	008000b4 	movhi	r2,2
     4ec:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     4f0:	0001883a 	nop
     4f4:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     4f8:	103ffd1e 	bne	r2,zero,4f0 <__alt_data_end+0xff0004f0>
     4fc:	04000074 	movhi	r16,1
     500:	8403b104 	addi	r16,r16,3780
     504:	84400084 	addi	r17,r16,2
     508:	84804a04 	addi	r18,r16,296
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     50c:	8980000b 	ldhu	r6,0(r17)
     510:	8140000b 	ldhu	r5,0(r16)
     514:	01001e04 	movi	r4,120
     518:	84000104 	addi	r16,r16,4
     51c:	00009ac0 	call	9ac <i2c_short_write>
     520:	8c400104 	addi	r17,r17,4
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     524:	943ff91e 	bne	r18,r16,50c <__alt_data_end+0xff00050c>
     528:	008003f4 	movhi	r2,15
     52c:	10909004 	addi	r2,r2,16960
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     530:	0001883a 	nop
     534:	10bfffc4 	addi	r2,r2,-1
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     538:	103ffd1e 	bne	r2,zero,530 <__alt_data_end+0xff000530>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     53c:	01800804 	movi	r6,32
     540:	014ccb84 	movi	r5,13102
     544:	01001e04 	movi	r4,120
     548:	00009ac0 	call	9ac <i2c_short_write>
     54c:	008003f4 	movhi	r2,15
     550:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     554:	0001883a 	nop
     558:	10bfffc4 	addi	r2,r2,-1
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     55c:	103ffd1e 	bne	r2,zero,554 <__alt_data_end+0xff000554>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     560:	01800884 	movi	r6,34
     564:	014d0104 	movi	r5,13316
     568:	01001e04 	movi	r4,120
     56c:	00009ac0 	call	9ac <i2c_short_write>
     570:	008003f4 	movhi	r2,15
     574:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     578:	0001883a 	nop
     57c:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     580:	103ffd1e 	bne	r2,zero,578 <__alt_data_end+0xff000578>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     584:	018009c4 	movi	r6,39
     588:	014c1004 	movi	r5,12352
     58c:	01001e04 	movi	r4,120
}
     590:	dfc00317 	ldw	ra,12(sp)
     594:	dc800217 	ldw	r18,8(sp)
     598:	dc400117 	ldw	r17,4(sp)
     59c:	dc000017 	ldw	r16,0(sp)
     5a0:	dec00404 	addi	sp,sp,16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     5a4:	00009ac1 	jmpi	9ac <i2c_short_write>

000005a8 <cam_get_xsize>:
}

unsigned short cam_get_xsize(){
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5a8:	00c04034 	movhi	r3,256
     5ac:	18c41304 	addi	r3,r3,4172
     5b0:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5b4:	1080010c 	andi	r2,r2,4
     5b8:	103ffd26 	beq	r2,zero,5b0 <__alt_data_end+0xff0005b0>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     5bc:	00804034 	movhi	r2,256
     5c0:	10841004 	addi	r2,r2,4160
}
     5c4:	1080002b 	ldhuio	r2,0(r2)
     5c8:	f800283a 	ret

000005cc <cam_get_ysize>:

unsigned short cam_get_ysize() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5cc:	00c04034 	movhi	r3,256
     5d0:	18c41304 	addi	r3,r3,4172
     5d4:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5d8:	1080010c 	andi	r2,r2,4
     5dc:	103ffd26 	beq	r2,zero,5d4 <__alt_data_end+0xff0005d4>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     5e0:	00804034 	movhi	r2,256
     5e4:	10841104 	addi	r2,r2,4164
}
     5e8:	1080002b 	ldhuio	r2,0(r2)
     5ec:	f800283a 	ret

000005f0 <cam_get_profiling>:

void cam_get_profiling() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5f0:	00c04034 	movhi	r3,256
     5f4:	18c41304 	addi	r3,r3,4172
     5f8:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5fc:	1080010c 	andi	r2,r2,4
     600:	103ffd26 	beq	r2,zero,5f8 <__alt_data_end+0xff0005f8>
	printf("Nr. of bytes each line    : %d\n",
     604:	00804034 	movhi	r2,256
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     608:	deffff04 	addi	sp,sp,-4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     60c:	10841004 	addi	r2,r2,4160
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     610:	dfc00015 	stw	ra,0(sp)
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     614:	1140002b 	ldhuio	r5,0(r2)
     618:	01000074 	movhi	r4,1
     61c:	21039904 	addi	r4,r4,3684
     620:	297fffcc 	andi	r5,r5,65535
     624:	00023180 	call	2318 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     628:	00804034 	movhi	r2,256
     62c:	10841104 	addi	r2,r2,4164
     630:	1140002b 	ldhuio	r5,0(r2)
     634:	01000074 	movhi	r4,1
     638:	2103a104 	addi	r4,r4,3716
     63c:	297fffcc 	andi	r5,r5,65535
     640:	00023180 	call	2318 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     644:	00804034 	movhi	r2,256
     648:	10841204 	addi	r2,r2,4168
     64c:	1140002b 	ldhuio	r5,0(r2)
     650:	01000074 	movhi	r4,1
     654:	2103a904 	addi	r4,r4,3748
     658:	297fffcc 	andi	r5,r5,65535
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     65c:	dfc00017 	ldw	ra,0(sp)
     660:	dec00104 	addi	sp,sp,4
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     664:	00023181 	jmpi	2318 <printf>

00000668 <cam_set_image_pointer>:
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     668:	21003fcc 	andi	r4,r4,255
     66c:	2100201c 	xori	r4,r4,128
     670:	213fe004 	addi	r4,r4,-128
     674:	00800044 	movi	r2,1
     678:	20801226 	beq	r4,r2,6c4 <cam_set_image_pointer+0x5c>
     67c:	11000c0e 	bge	r2,r4,6b0 <cam_set_image_pointer+0x48>
     680:	00800084 	movi	r2,2
     684:	20800626 	beq	r4,r2,6a0 <cam_set_image_pointer+0x38>
     688:	008000c4 	movi	r2,3
     68c:	2080111e 	bne	r4,r2,6d4 <cam_set_image_pointer+0x6c>
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     690:	00804034 	movhi	r2,256
     694:	10841704 	addi	r2,r2,4188
     698:	11400035 	stwio	r5,0(r2)
     69c:	f800283a 	ret
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     6a0:	00804034 	movhi	r2,256
     6a4:	10841604 	addi	r2,r2,4184
     6a8:	11400035 	stwio	r5,0(r2)
                break;
     6ac:	f800283a 	ret
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     6b0:	2000091e 	bne	r4,zero,6d8 <cam_set_image_pointer+0x70>
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     6b4:	00804034 	movhi	r2,256
     6b8:	10841404 	addi	r2,r2,4176
     6bc:	11400035 	stwio	r5,0(r2)
	            break;
     6c0:	f800283a 	ret
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     6c4:	00804034 	movhi	r2,256
     6c8:	10841504 	addi	r2,r2,4180
     6cc:	11400035 	stwio	r5,0(r2)
                break;
     6d0:	f800283a 	ret
     6d4:	f800283a 	ret
     6d8:	f800283a 	ret

000006dc <current_image_valid>:
	}
}

short current_image_valid() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     6dc:	00804034 	movhi	r2,256
     6e0:	10841304 	addi	r2,r2,4172
     6e4:	1080002b 	ldhuio	r2,0(r2)
	return (value&CAM_Current_Image_Valid);
}
     6e8:	1080800c 	andi	r2,r2,512
     6ec:	f800283a 	ret

000006f0 <current_image_pointer>:

void *current_image_pointer() {
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     6f0:	00804034 	movhi	r2,256
     6f4:	10841404 	addi	r2,r2,4176
}
     6f8:	10800037 	ldwio	r2,0(r2)
     6fc:	f800283a 	ret

00000700 <take_picture_blocking>:

void take_picture_blocking() {
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     700:	00c04034 	movhi	r3,256
     704:	18c41304 	addi	r3,r3,4172
     708:	00800204 	movi	r2,8
     70c:	1880002d 	sthio	r2,0(r3)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     710:	1880002b 	ldhuio	r2,0(r3)
	} while ((value&CAM_Busy)!= 0);
     714:	1080020c 	andi	r2,r2,8
     718:	103ffd1e 	bne	r2,zero,710 <__alt_data_end+0xff000710>
}
     71c:	f800283a 	ret

00000720 <enable_continues_mode>:

void enable_continues_mode() {
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     720:	00804034 	movhi	r2,256
     724:	10841304 	addi	r2,r2,4172
     728:	00c00404 	movi	r3,16
     72c:	10c0002d 	sthio	r3,0(r2)
     730:	f800283a 	ret

00000734 <new_image_available>:
}

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     734:	00c04034 	movhi	r3,256
     738:	18c41304 	addi	r3,r3,4172
     73c:	1880002b 	ldhuio	r2,0(r3)
	if ((value&CAM_IRQ_Generated)!=0) {
     740:	1080200c 	andi	r2,r2,128
     744:	1000021e 	bne	r2,zero,750 <new_image_available+0x1c>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
		return 1;
	} else return 0;
     748:	0005883a 	mov	r2,zero
}
     74c:	f800283a 	ret

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	if ((value&CAM_IRQ_Generated)!=0) {
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     750:	00804004 	movi	r2,256
     754:	1880002d 	sthio	r2,0(r3)
		return 1;
     758:	00800044 	movi	r2,1
     75c:	f800283a 	ret

00000760 <DIPSW_get_value>:

#include <system.h>
#include <io.h>

unsigned char DIPSW_get_value() {
	return IORD_8DIRECT(PIO_0_BASE,0)^0xFF;
     760:	00804034 	movhi	r2,256
     764:	10842804 	addi	r2,r2,4256
     768:	10800023 	ldbuio	r2,0(r2)
}
     76c:	0084303a 	nor	r2,zero,r2
     770:	f800283a 	ret

00000774 <conv_grayscale>:
		            int height) {
	int x,y,gray,arrayY, arrayXY,r,g,b;
	unsigned short *pixels = (unsigned short *)picture , rgb;
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
     774:	d0a6cd17 	ldw	r2,-25804(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
		            int width,
		            int height) {
     778:	defffc04 	addi	sp,sp,-16
     77c:	dc800215 	stw	r18,8(sp)
     780:	dc400115 	stw	r17,4(sp)
     784:	dc000015 	stw	r16,0(sp)
     788:	dfc00315 	stw	ra,12(sp)
	int x,y,gray,arrayY, arrayXY,r,g,b;
	unsigned short *pixels = (unsigned short *)picture , rgb;
	grayscale_width = width;
     78c:	d166cc15 	stw	r5,-25808(gp)
	grayscape_height = height;
     790:	d1a6cb15 	stw	r6,-25812(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
		            int width,
		            int height) {
     794:	2821883a 	mov	r16,r5
     798:	3025883a 	mov	r18,r6
     79c:	2023883a 	mov	r17,r4
	int x,y,gray,arrayY, arrayXY,r,g,b;
	unsigned short *pixels = (unsigned short *)picture , rgb;
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
     7a0:	10000226 	beq	r2,zero,7ac <conv_grayscale+0x38>
		free(grayscale_array);
     7a4:	1009883a 	mov	r4,r2
     7a8:	0001ac80 	call	1ac8 <free>
	grayscale_array = (unsigned char *) malloc(width*height);
     7ac:	8489383a 	mul	r4,r16,r18
     7b0:	0001ab40 	call	1ab4 <malloc>
     7b4:	d0a6cd15 	stw	r2,-25804(gp)
	for (y = 0 ; y < height ; y++) {
     7b8:	04801d0e 	bge	zero,r18,830 <conv_grayscale+0xbc>
     7bc:	840d883a 	add	r6,r16,r16
     7c0:	8809883a 	mov	r4,r17
     7c4:	8019883a 	mov	r12,r16
     7c8:	000b883a 	mov	r5,zero
		arrayY = y*width;
		for (x = 0 ; x < width ; x++) {
     7cc:	0400140e 	bge	zero,r16,820 <conv_grayscale+0xac>
     7d0:	6413c83a 	sub	r9,r12,r16
     7d4:	2017883a 	mov	r11,r4
			arrayXY= arrayY+x;
			rgb = pixels[arrayXY];
     7d8:	5880000b 	ldhu	r2,0(r11)
			r = ((rgb>>11)&0x1F)*21; // red part
			g = ((rgb>>5)&0x3F)*72; // green part
			b = (rgb&0x1F)*7; // blue part
			gray =(r+g+b)>> 8;// /= 100; / // do a decalage 2^6=64 depend result /= 100
			IOWR_8DIRECT(grayscale_array, arrayXY, gray);
     7dc:	d2a6cd17 	ldw	r10,-25804(gp)
     7e0:	10ffffcc 	andi	r3,r2,65535
     7e4:	1810d17a 	srli	r8,r3,5
     7e8:	1806d2fa 	srli	r3,r3,11
     7ec:	108007cc 	andi	r2,r2,31
     7f0:	42000fcc 	andi	r8,r8,63
     7f4:	19c00564 	muli	r7,r3,21
     7f8:	42001224 	muli	r8,r8,72
     7fc:	10c001e4 	muli	r3,r2,7
     800:	5255883a 	add	r10,r10,r9
     804:	41c5883a 	add	r2,r8,r7
     808:	10c5883a 	add	r2,r2,r3
     80c:	1005d23a 	srai	r2,r2,8
     810:	50800025 	stbio	r2,0(r10)
     814:	4a400044 	addi	r9,r9,1
     818:	5ac00084 	addi	r11,r11,2
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		arrayY = y*width;
		for (x = 0 ; x < width ; x++) {
     81c:	627fee1e 	bne	r12,r9,7d8 <__alt_data_end+0xff0007d8>
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
     820:	29400044 	addi	r5,r5,1
     824:	2189883a 	add	r4,r4,r6
     828:	6419883a 	add	r12,r12,r16
     82c:	917fe71e 	bne	r18,r5,7cc <__alt_data_end+0xff0007cc>
			b = (rgb&0x1F)*7; // blue part
			gray =(r+g+b)>> 8;// /= 100; / // do a decalage 2^6=64 depend result /= 100
			IOWR_8DIRECT(grayscale_array, arrayXY, gray);
		}
	}
}
     830:	dfc00317 	ldw	ra,12(sp)
     834:	dc800217 	ldw	r18,8(sp)
     838:	dc400117 	ldw	r17,4(sp)
     83c:	dc000017 	ldw	r16,0(sp)
     840:	dec00404 	addi	sp,sp,16
     844:	f800283a 	ret

00000848 <get_grayscale_width>:


int get_grayscale_width() {
	return grayscale_width;
}
     848:	d0a6cc17 	ldw	r2,-25808(gp)
     84c:	f800283a 	ret

00000850 <get_grayscale_height>:

int get_grayscale_height() {
	return grayscape_height;
}
     850:	d0a6cb17 	ldw	r2,-25812(gp)
     854:	f800283a 	ret

00000858 <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
	return grayscale_array;
}
     858:	d0a6cd17 	ldw	r2,-25804(gp)
     85c:	f800283a 	ret

00000860 <i2c_busy_wait>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     860:	00c04034 	movhi	r3,256
     864:	18c42704 	addi	r3,r3,4252
     868:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     86c:	108000cc 	andi	r2,r2,3
     870:	103ffd1e 	bne	r2,zero,868 <__alt_data_end+0xff000868>
}
     874:	f800283a 	ret

00000878 <i2c_auto_detect>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     878:	01004034 	movhi	r4,256
     87c:	21042704 	addi	r4,r4,4252
     880:	00c04034 	movhi	r3,256
     884:	18c42704 	addi	r3,r3,4252
     888:	20800037 	ldwio	r2,0(r4)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     88c:	108000cc 	andi	r2,r2,3
     890:	103ffb1e 	bne	r2,zero,880 <__alt_data_end+0xff000880>
}

void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     894:	00800104 	movi	r2,4
     898:	18800035 	stwio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     89c:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8a0:	108000cc 	andi	r2,r2,3
     8a4:	103ffd1e 	bne	r2,zero,89c <__alt_data_end+0xff00089c>
void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     8a8:	00804034 	movhi	r2,256
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     8ac:	defffc04 	addi	sp,sp,-16
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     8b0:	10842504 	addi	r2,r2,4244
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     8b4:	dfc00315 	stw	ra,12(sp)
     8b8:	dc800215 	stw	r18,8(sp)
     8bc:	dc400115 	stw	r17,4(sp)
     8c0:	dc000015 	stw	r16,0(sp)
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     8c4:	14800037 	ldwio	r18,0(r2)
    printf("Number of I2C devices detected: %d\n",nrdef);
     8c8:	01000074 	movhi	r4,1
     8cc:	21049104 	addi	r4,r4,4676
     8d0:	900b883a 	mov	r5,r18
    for (loop = 0 ; loop < nrdef ; loop++) {
     8d4:	0021883a 	mov	r16,zero
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
     8d8:	00023180 	call	2318 <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     8dc:	04800a0e 	bge	zero,r18,908 <i2c_auto_detect+0x90>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     8e0:	04404034 	movhi	r17,256
     8e4:	8c442404 	addi	r17,r17,4240
     8e8:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     8ec:	89800037 	ldwio	r6,0(r17)
     8f0:	01000074 	movhi	r4,1
     8f4:	800b883a 	mov	r5,r16
     8f8:	21049a04 	addi	r4,r4,4712
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     8fc:	84000044 	addi	r16,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     900:	00023180 	call	2318 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     904:	943ff81e 	bne	r18,r16,8e8 <__alt_data_end+0xff0008e8>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     908:	dfc00317 	ldw	ra,12(sp)
     90c:	dc800217 	ldw	r18,8(sp)
     910:	dc400117 	ldw	r17,4(sp)
     914:	dc000017 	ldw	r16,0(sp)
     918:	dec00404 	addi	sp,sp,16
     91c:	f800283a 	ret

00000920 <i2c_short_read>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     920:	01804034 	movhi	r6,256
     924:	31842704 	addi	r6,r6,4252
     928:	00c04034 	movhi	r3,256
     92c:	18c42704 	addi	r3,r3,4252
     930:	30800037 	ldwio	r2,0(r6)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     934:	108000cc 	andi	r2,r2,3
     938:	103ffb1e 	bne	r2,zero,928 <__alt_data_end+0xff000928>
}

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     93c:	00804034 	movhi	r2,256
     940:	21003fcc 	andi	r4,r4,255
     944:	10842404 	addi	r2,r2,4240
     948:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     94c:	00804034 	movhi	r2,256
     950:	10842504 	addi	r2,r2,4244
     954:	1140002d 	sthio	r5,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     958:	008010c4 	movi	r2,67
     95c:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     960:	180b883a 	mov	r5,r3
     964:	00c04034 	movhi	r3,256
     968:	18c42704 	addi	r3,r3,4252
     96c:	28800037 	ldwio	r2,0(r5)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     970:	108000cc 	andi	r2,r2,3
     974:	103ffb1e 	bne	r2,zero,964 <__alt_data_end+0xff000964>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     978:	00804034 	movhi	r2,256
     97c:	21000044 	addi	r4,r4,1
     980:	10842404 	addi	r2,r2,4240
     984:	11000025 	stbio	r4,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     988:	00800884 	movi	r2,34
     98c:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     990:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     994:	108000cc 	andi	r2,r2,3
     998:	103ffd1e 	bne	r2,zero,990 <__alt_data_end+0xff000990>
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     99c:	00804034 	movhi	r2,256
     9a0:	10842604 	addi	r2,r2,4248
}
     9a4:	10800037 	ldwio	r2,0(r2)
     9a8:	f800283a 	ret

000009ac <i2c_short_write>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     9ac:	01c04034 	movhi	r7,256
     9b0:	39c42704 	addi	r7,r7,4252
     9b4:	00c04034 	movhi	r3,256
     9b8:	18c42704 	addi	r3,r3,4252
     9bc:	38800037 	ldwio	r2,0(r7)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     9c0:	108000cc 	andi	r2,r2,3
     9c4:	103ffb1e 	bne	r2,zero,9b4 <__alt_data_end+0xff0009b4>

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     9c8:	00804034 	movhi	r2,256
     9cc:	10842404 	addi	r2,r2,4240
     9d0:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     9d4:	00804034 	movhi	r2,256
     9d8:	10842504 	addi	r2,r2,4244
     9dc:	1140002d 	sthio	r5,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
     9e0:	00804034 	movhi	r2,256
     9e4:	10842604 	addi	r2,r2,4248
     9e8:	1180002d 	sthio	r6,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     9ec:	00801084 	movi	r2,66
     9f0:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     9f4:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     9f8:	108000cc 	andi	r2,r2,3
     9fc:	103ffd1e 	bne	r2,zero,9f4 <__alt_data_end+0xff0009f4>
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
}
     a00:	f800283a 	ret

00000a04 <LCD_Write_Command>:

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a04:	00804034 	movhi	r2,256
     a08:	10841804 	addi	r2,r2,4192
     a0c:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     a10:	01000284 	movi	r4,10
     a14:	000ec0c1 	jmpi	ec0c <usleep>

00000a18 <LCD_Write_Data>:
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a18:	00804034 	movhi	r2,256
     a1c:	10841904 	addi	r2,r2,4196
     a20:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     a24:	01000284 	movi	r4,10
     a28:	000ec0c1 	jmpi	ec0c <usleep>

00000a2c <init_LCD>:
}


void init_LCD() {
     a2c:	defff704 	addi	sp,sp,-36
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     a30:	00804034 	movhi	r2,256
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
}


void init_LCD() {
     a34:	dd400515 	stw	r21,20(sp)
     a38:	dfc00815 	stw	ra,32(sp)
     a3c:	ddc00715 	stw	r23,28(sp)
     a40:	dd800615 	stw	r22,24(sp)
     a44:	dd000415 	stw	r20,16(sp)
     a48:	dcc00315 	stw	r19,12(sp)
     a4c:	dc800215 	stw	r18,8(sp)
     a50:	dc400115 	stw	r17,4(sp)
     a54:	dc000015 	stw	r16,0(sp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     a58:	05400084 	movi	r21,2
     a5c:	10841a04 	addi	r2,r2,4200
     a60:	1540002d 	sthio	r21,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a64:	04804034 	movhi	r18,256
     a68:	94841804 	addi	r18,r18,4192
     a6c:	00800a04 	movi	r2,40
     a70:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a74:	04000284 	movi	r16,10
     a78:	8009883a 	mov	r4,r16
     a7c:	000ec0c0 	call	ec0c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a80:	05c00444 	movi	r23,17
     a84:	95c0002d 	sthio	r23,0(r18)
	usleep(10);
     a88:	8009883a 	mov	r4,r16
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a8c:	04404034 	movhi	r17,256
     a90:	8c441904 	addi	r17,r17,4196
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     a94:	000ec0c0 	call	ec0c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a98:	0027883a 	mov	r19,zero
     a9c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     aa0:	8009883a 	mov	r4,r16
     aa4:	000ec0c0 	call	ec0c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     aa8:	008032c4 	movi	r2,203
     aac:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     ab0:	8009883a 	mov	r4,r16
     ab4:	000ec0c0 	call	ec0c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ab8:	00800e44 	movi	r2,57
     abc:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ac0:	8009883a 	mov	r4,r16
     ac4:	000ec0c0 	call	ec0c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ac8:	00800b04 	movi	r2,44
     acc:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ad0:	8009883a 	mov	r4,r16
     ad4:	000ec0c0 	call	ec0c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ad8:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     adc:	8009883a 	mov	r4,r16
     ae0:	000ec0c0 	call	ec0c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ae4:	00800d04 	movi	r2,52
     ae8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     aec:	8009883a 	mov	r4,r16
     af0:	000ec0c0 	call	ec0c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     af4:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     af8:	8009883a 	mov	r4,r16
     afc:	000ec0c0 	call	ec0c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b00:	008033c4 	movi	r2,207
     b04:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b08:	8009883a 	mov	r4,r16
     b0c:	000ec0c0 	call	ec0c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b10:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b14:	8009883a 	mov	r4,r16
     b18:	000ec0c0 	call	ec0c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b1c:	05802044 	movi	r22,129
     b20:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     b24:	8009883a 	mov	r4,r16
     b28:	000ec0c0 	call	ec0c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b2c:	00800c04 	movi	r2,48
     b30:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b34:	8009883a 	mov	r4,r16
     b38:	000ec0c0 	call	ec0c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b3c:	00803a04 	movi	r2,232
     b40:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b44:	8009883a 	mov	r4,r16
     b48:	000ec0c0 	call	ec0c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b4c:	00802144 	movi	r2,133
     b50:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b54:	8009883a 	mov	r4,r16
     b58:	000ec0c0 	call	ec0c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b5c:	05000044 	movi	r20,1
     b60:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     b64:	8009883a 	mov	r4,r16
     b68:	000ec0c0 	call	ec0c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b6c:	00801e44 	movi	r2,121
     b70:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b74:	8009883a 	mov	r4,r16
     b78:	000ec0c0 	call	ec0c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b7c:	00803a84 	movi	r2,234
     b80:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b84:	8009883a 	mov	r4,r16
     b88:	000ec0c0 	call	ec0c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b8c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b90:	8009883a 	mov	r4,r16
     b94:	000ec0c0 	call	ec0c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b98:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b9c:	8009883a 	mov	r4,r16
     ba0:	000ec0c0 	call	ec0c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ba4:	00801904 	movi	r2,100
     ba8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bac:	8009883a 	mov	r4,r16
     bb0:	000ec0c0 	call	ec0c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bb4:	008000c4 	movi	r2,3
     bb8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bbc:	8009883a 	mov	r4,r16
     bc0:	000ec0c0 	call	ec0c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bc4:	00800484 	movi	r2,18
     bc8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bcc:	8009883a 	mov	r4,r16
     bd0:	000ec0c0 	call	ec0c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bd4:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     bd8:	8009883a 	mov	r4,r16
     bdc:	000ec0c0 	call	ec0c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     be0:	00803dc4 	movi	r2,247
     be4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     be8:	8009883a 	mov	r4,r16
     bec:	000ec0c0 	call	ec0c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bf0:	00800804 	movi	r2,32
     bf4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bf8:	8009883a 	mov	r4,r16
     bfc:	000ec0c0 	call	ec0c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c00:	00803004 	movi	r2,192
     c04:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c08:	8009883a 	mov	r4,r16
     c0c:	000ec0c0 	call	ec0c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c10:	05800984 	movi	r22,38
     c14:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     c18:	8009883a 	mov	r4,r16
     c1c:	000ec0c0 	call	ec0c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c20:	00800104 	movi	r2,4
     c24:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c28:	8009883a 	mov	r4,r16
     c2c:	000ec0c0 	call	ec0c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c30:	00803044 	movi	r2,193
     c34:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c38:	8009883a 	mov	r4,r16
     c3c:	000ec0c0 	call	ec0c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c40:	8dc0002d 	sthio	r23,0(r17)
	usleep(10);
     c44:	8009883a 	mov	r4,r16
     c48:	000ec0c0 	call	ec0c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c4c:	00803144 	movi	r2,197
     c50:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c54:	8009883a 	mov	r4,r16
     c58:	000ec0c0 	call	ec0c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c5c:	00800d44 	movi	r2,53
     c60:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c64:	8009883a 	mov	r4,r16
     c68:	000ec0c0 	call	ec0c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c6c:	00800f84 	movi	r2,62
     c70:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c74:	8009883a 	mov	r4,r16
     c78:	000ec0c0 	call	ec0c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c7c:	008031c4 	movi	r2,199
     c80:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c84:	8009883a 	mov	r4,r16
     c88:	000ec0c0 	call	ec0c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c8c:	00802f84 	movi	r2,190
     c90:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c94:	8009883a 	mov	r4,r16
     c98:	000ec0c0 	call	ec0c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c9c:	00802c44 	movi	r2,177
     ca0:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     ca4:	8009883a 	mov	r4,r16
     ca8:	000ec0c0 	call	ec0c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cac:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     cb0:	8009883a 	mov	r4,r16
     cb4:	000ec0c0 	call	ec0c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cb8:	00800404 	movi	r2,16
     cbc:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cc0:	8009883a 	mov	r4,r16
     cc4:	000ec0c0 	call	ec0c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cc8:	00800e84 	movi	r2,58
     ccc:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cd0:	8009883a 	mov	r4,r16
     cd4:	000ec0c0 	call	ec0c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cd8:	00801544 	movi	r2,85
     cdc:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ce0:	8009883a 	mov	r4,r16
     ce4:	000ec0c0 	call	ec0c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ce8:	00802d84 	movi	r2,182
     cec:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cf0:	8009883a 	mov	r4,r16
     cf4:	000ec0c0 	call	ec0c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cf8:	8c00002d 	sthio	r16,0(r17)
	usleep(10);
     cfc:	8009883a 	mov	r4,r16
     d00:	000ec0c0 	call	ec0c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d04:	00802884 	movi	r2,162
     d08:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d0c:	8009883a 	mov	r4,r16
     d10:	000ec0c0 	call	ec0c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d14:	00803c84 	movi	r2,242
     d18:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d1c:	8009883a 	mov	r4,r16
     d20:	000ec0c0 	call	ec0c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d24:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     d28:	8009883a 	mov	r4,r16
     d2c:	000ec0c0 	call	ec0c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d30:	9580002d 	sthio	r22,0(r18)
	usleep(10);
     d34:	8009883a 	mov	r4,r16
     d38:	000ec0c0 	call	ec0c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d3c:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     d40:	8009883a 	mov	r4,r16
     d44:	000ec0c0 	call	ec0c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d48:	00800d84 	movi	r2,54
     d4c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d50:	8009883a 	mov	r4,r16
     d54:	000ec0c0 	call	ec0c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d58:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d5c:	8009883a 	mov	r4,r16
     d60:	000ec0c0 	call	ec0c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d64:	00800a84 	movi	r2,42
     d68:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d6c:	8009883a 	mov	r4,r16
     d70:	000ec0c0 	call	ec0c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d74:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d78:	8009883a 	mov	r4,r16
     d7c:	000ec0c0 	call	ec0c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d80:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d84:	8009883a 	mov	r4,r16
     d88:	000ec0c0 	call	ec0c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d8c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d90:	8009883a 	mov	r4,r16
     d94:	000ec0c0 	call	ec0c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d98:	00803bc4 	movi	r2,239
     d9c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     da0:	8009883a 	mov	r4,r16
     da4:	000ec0c0 	call	ec0c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     da8:	00800ac4 	movi	r2,43
     dac:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     db0:	8009883a 	mov	r4,r16
     db4:	000ec0c0 	call	ec0c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     db8:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     dbc:	8009883a 	mov	r4,r16
     dc0:	000ec0c0 	call	ec0c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     dc4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     dc8:	8009883a 	mov	r4,r16
     dcc:	000ec0c0 	call	ec0c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     dd0:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     dd4:	8009883a 	mov	r4,r16
     dd8:	000ec0c0 	call	ec0c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ddc:	00800fc4 	movi	r2,63
     de0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     de4:	8009883a 	mov	r4,r16
     de8:	000ec0c0 	call	ec0c <usleep>
	LCD_Write_Command(0x002B);	//page address set 
	LCD_Write_Data(0x0000);
	LCD_Write_Data(0x0000);		//start 0x0000 
	LCD_Write_Data(0x0001);
	LCD_Write_Data(0x003F);		//end 0x013F 
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
     dec:	00c04034 	movhi	r3,256
     df0:	00803c04 	movi	r2,240
     df4:	18c41d04 	addi	r3,r3,4212
     df8:	18800035 	stwio	r2,0(r3)
	LCD_width = 240;
     dfc:	d0a6ce8d 	sth	r2,-25798(gp)
	LCD_height = 320;
     e00:	00805004 	movi	r2,320
     e04:	d0a6ce0d 	sth	r2,-25800(gp)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     e08:	00800a44 	movi	r2,41
     e0c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     e10:	8009883a 	mov	r4,r16
	LCD_height = 320;


	LCD_Write_Command(0x0029);

}
     e14:	dfc00817 	ldw	ra,32(sp)
     e18:	ddc00717 	ldw	r23,28(sp)
     e1c:	dd800617 	ldw	r22,24(sp)
     e20:	dd400517 	ldw	r21,20(sp)
     e24:	dd000417 	ldw	r20,16(sp)
     e28:	dcc00317 	ldw	r19,12(sp)
     e2c:	dc800217 	ldw	r18,8(sp)
     e30:	dc400117 	ldw	r17,4(sp)
     e34:	dc000017 	ldw	r16,0(sp)
     e38:	dec00904 	addi	sp,sp,36
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     e3c:	000ec0c1 	jmpi	ec0c <usleep>

00000e40 <transfer_LCD_no_dma>:

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     e40:	defffb04 	addi	sp,sp,-20
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     e44:	00804034 	movhi	r2,256

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     e48:	dc000015 	stw	r16,0(sp)
     e4c:	dfc00415 	stw	ra,16(sp)
     e50:	dcc00315 	stw	r19,12(sp)
     e54:	dc800215 	stw	r18,8(sp)
     e58:	dc400115 	stw	r17,4(sp)
     e5c:	2021883a 	mov	r16,r4
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     e60:	10841e04 	addi	r2,r2,4216
     e64:	11400035 	stwio	r5,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     e68:	00804034 	movhi	r2,256
     e6c:	10841804 	addi	r2,r2,4192
     e70:	00c00b04 	movi	r3,44
     e74:	10c0002d 	sthio	r3,0(r2)
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e78:	29a5383a 	mul	r18,r5,r6
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     e7c:	01000284 	movi	r4,10
     e80:	000ec0c0 	call	ec0c <usleep>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e84:	90000a26 	beq	r18,zero,eb0 <transfer_LCD_no_dma+0x70>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e88:	04c04034 	movhi	r19,256
     e8c:	9cc41904 	addi	r19,r19,4196
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e90:	0023883a 	mov	r17,zero
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e94:	8080000b 	ldhu	r2,0(r16)
     e98:	9880002d 	sthio	r2,0(r19)
	usleep(10);
     e9c:	01000284 	movi	r4,10
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     ea0:	8c400044 	addi	r17,r17,1
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
     ea4:	000ec0c0 	call	ec0c <usleep>
     ea8:	84000084 	addi	r16,r16,2
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     eac:	8cbff91e 	bne	r17,r18,e94 <__alt_data_end+0xff000e94>
		LCD_Write_Data(data_array[pixels]);
}
     eb0:	dfc00417 	ldw	ra,16(sp)
     eb4:	dcc00317 	ldw	r19,12(sp)
     eb8:	dc800217 	ldw	r18,8(sp)
     ebc:	dc400117 	ldw	r17,4(sp)
     ec0:	dc000017 	ldw	r16,0(sp)
     ec4:	dec00504 	addi	sp,sp,20
     ec8:	f800283a 	ret

00000ecc <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
     ecc:	d0a6ce0b 	ldhu	r2,-25800(gp)
     ed0:	3080010e 	bge	r6,r2,ed8 <transfer_LCD_with_dma+0xc>
     ed4:	3005883a 	mov	r2,r6
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
     ed8:	d0e6ce8b 	ldhu	r3,-25798(gp)
     edc:	28c0010e 	bge	r5,r3,ee4 <transfer_LCD_with_dma+0x18>
     ee0:	2807883a 	mov	r3,r5
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     ee4:	01804034 	movhi	r6,256
     ee8:	31841e04 	addi	r6,r6,4216
     eec:	31400035 	stwio	r5,0(r6)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
     ef0:	01404034 	movhi	r5,256
     ef4:	29441b04 	addi	r5,r5,4204
     ef8:	29000035 	stwio	r4,0(r5)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
     efc:	18ffffcc 	andi	r3,r3,65535
     f00:	10bfffcc 	andi	r2,r2,65535
     f04:	1885383a 	mul	r2,r3,r2
     f08:	00c04034 	movhi	r3,256
     f0c:	18c41c04 	addi	r3,r3,4208
     f10:	18800035 	stwio	r2,0(r3)
	if (grayscale==0)
     f14:	39c03fcc 	andi	r7,r7,255
     f18:	39c0201c 	xori	r7,r7,128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f1c:	00804034 	movhi	r2,256
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     f20:	39ffe004 	addi	r7,r7,-128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f24:	10841a04 	addi	r2,r2,4200
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     f28:	38000326 	beq	r7,zero,f38 <transfer_LCD_with_dma+0x6c>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f2c:	00c04404 	movi	r3,272
     f30:	10c0002d 	sthio	r3,0(r2)
     f34:	f800283a 	ret
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f38:	00c04004 	movi	r3,256
     f3c:	10c0002d 	sthio	r3,0(r2)
     f40:	f800283a 	ret

00000f44 <main>:
#include "sys/alt_timestamp.h"
#include "alt_types.h"

// check makefile tohave -O1,-O2,-O3
int main()
{
     f44:	defff304 	addi	sp,sp,-52
     f48:	dfc00c15 	stw	ra,48(sp)
     f4c:	df000b15 	stw	fp,44(sp)
     f50:	dc400415 	stw	r17,16(sp)
     f54:	ddc00a15 	stw	r23,40(sp)
     f58:	dd800915 	stw	r22,36(sp)
     f5c:	dd400815 	stw	r21,32(sp)
     f60:	dd000715 	stw	r20,28(sp)
     f64:	dcc00615 	stw	r19,24(sp)
     f68:	dc800515 	stw	r18,20(sp)
     f6c:	dc000315 	stw	r16,12(sp)
  alt_u32 start_sobel_threshold;
  alt_u32 end_sobel_threshold;
  alt_u32 start_sobel_conv_graycale;
  alt_u32 end_sobel_conv_graycale;
  //init time
  alt_timestamp_start();
     f70:	000f9b40 	call	f9b4 <alt_timestamp_start>
  init_LCD();
     f74:	0000a2c0 	call	a2c <init_LCD>
  init_camera();
     f78:	00002900 	call	290 <init_camera>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
     f7c:	01000604 	movi	r4,24
     f80:	0001aa40 	call	1aa4 <vga_set_swap>
  printf("Hello from Nios II!\n");
     f84:	01000074 	movhi	r4,1
     f88:	2104a304 	addi	r4,r4,4748
     f8c:	00024140 	call	2414 <puts>
  cam_get_profiling();
     f90:	00005f00 	call	5f0 <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f94:	00005a80 	call	5a8 <cam_get_xsize>
     f98:	1023883a 	mov	r17,r2
     f9c:	00005cc0 	call	5cc <cam_get_ysize>
     fa0:	10bfffcc 	andi	r2,r2,65535
     fa4:	893fffcc 	andi	r4,r17,65535
     fa8:	2089383a 	mul	r4,r4,r2
     fac:	0001ab40 	call	1ab4 <malloc>
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     fb0:	d8800115 	stw	r2,4(sp)
     fb4:	00005a80 	call	5a8 <cam_get_xsize>
     fb8:	1023883a 	mov	r17,r2
     fbc:	00005cc0 	call	5cc <cam_get_ysize>
     fc0:	10bfffcc 	andi	r2,r2,65535
     fc4:	893fffcc 	andi	r4,r17,65535
     fc8:	2089383a 	mul	r4,r4,r2
     fcc:	0001ab40 	call	1ab4 <malloc>
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     fd0:	d8800215 	stw	r2,8(sp)
     fd4:	00005a80 	call	5a8 <cam_get_xsize>
     fd8:	1023883a 	mov	r17,r2
     fdc:	00005cc0 	call	5cc <cam_get_ysize>
     fe0:	10bfffcc 	andi	r2,r2,65535
     fe4:	893fffcc 	andi	r4,r17,65535
     fe8:	2089383a 	mul	r4,r4,r2
     fec:	0001ab40 	call	1ab4 <malloc>
     ff0:	1039883a 	mov	fp,r2
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     ff4:	00005a80 	call	5a8 <cam_get_xsize>
     ff8:	1023883a 	mov	r17,r2
     ffc:	00005cc0 	call	5cc <cam_get_ysize>
    1000:	10bfffcc 	andi	r2,r2,65535
    1004:	893fffcc 	andi	r4,r17,65535
    1008:	2089383a 	mul	r4,r4,r2
    100c:	0001ab40 	call	1ab4 <malloc>
  cam_set_image_pointer(0,buffer1);
    1010:	d9400117 	ldw	r5,4(sp)
    1014:	0009883a 	mov	r4,zero
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1018:	1023883a 	mov	r17,r2
  cam_set_image_pointer(0,buffer1);
    101c:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
    1020:	d8c00217 	ldw	r3,8(sp)
    1024:	01000044 	movi	r4,1
    1028:	180b883a 	mov	r5,r3
    102c:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
    1030:	e00b883a 	mov	r5,fp
    1034:	01000084 	movi	r4,2
    1038:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
    103c:	880b883a 	mov	r5,r17
    1040:	010000c4 	movi	r4,3
    1044:	00006680 	call	668 <cam_set_image_pointer>
  enable_continues_mode();
    1048:	00007200 	call	720 <enable_continues_mode>
  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
    104c:	00005a80 	call	5a8 <cam_get_xsize>
    1050:	1023883a 	mov	r17,r2
    1054:	00005cc0 	call	5cc <cam_get_ysize>
    1058:	893fffcc 	andi	r4,r17,65535
    105c:	2008d07a 	srli	r4,r4,1
    1060:	117fffcc 	andi	r5,r2,65535
    1064:	00014100 	call	1410 <init_sobel_arrays>
  do {
	  if (new_image_available() != 0) {
    1068:	00007340 	call	734 <new_image_available>
    106c:	10803fcc 	andi	r2,r2,255
    1070:	1080201c 	xori	r2,r2,128
    1074:	10bfe004 	addi	r2,r2,-128
    1078:	103ffb26 	beq	r2,zero,1068 <__alt_data_end+0xff001068>
		  if (current_image_valid()!=0) {
    107c:	00006dc0 	call	6dc <current_image_valid>
    1080:	10bfffcc 	andi	r2,r2,65535
    1084:	10a0001c 	xori	r2,r2,32768
    1088:	10a00004 	addi	r2,r2,-32768
    108c:	10000f1e 	bne	r2,zero,10cc <main+0x188>
    1090:	84403fcc 	andi	r17,r16,255
							vga_set_pointer(grayscale);
		      	  	   	}
		      	  	   	break;
		      }
		  }
		  printf("sobel %lu\n",end_sobel-start_sobel);
    1094:	01000074 	movhi	r4,1
    1098:	ad0bc83a 	sub	r5,r21,r20
    109c:	2104a804 	addi	r4,r4,4768
    10a0:	00023180 	call	2318 <printf>
		  //printf("sobel x def %lu\n",end_sobel_x-start_sobel_x);
		  //printf("sobel y %lu\n",end_sobel_y-start_sobel_y);
		  printf("sobel threshold %lu\n",end_sobel_threshold-start_sobel_threshold);
    10a4:	01000074 	movhi	r4,1
    10a8:	bd8bc83a 	sub	r5,r23,r22
    10ac:	2104ab04 	addi	r4,r4,4780
    10b0:	00023180 	call	2318 <printf>
		  printf("sobel conv grayscale in mode %d : %lu\n",mode,end_sobel_conv_graycale-start_sobel_conv_graycale);
    10b4:	01000074 	movhi	r4,1
    10b8:	2104b104 	addi	r4,r4,4804
    10bc:	9c8dc83a 	sub	r6,r19,r18
    10c0:	880b883a 	mov	r5,r17
    10c4:	00023180 	call	2318 <printf>
    10c8:	003fe706 	br	1068 <__alt_data_end+0xff001068>
  enable_continues_mode();
  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
  do {
	  if (new_image_available() != 0) {
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
    10cc:	00007600 	call	760 <DIPSW_get_value>
    10d0:	1023883a 	mov	r17,r2
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
    10d4:	8c0001cc 	andi	r16,r17,7
			  image = (unsigned short*)current_image_pointer();
    10d8:	00006f00 	call	6f0 <current_image_pointer>
    10dc:	d8800015 	stw	r2,0(sp)
		      switch (mode) {
    10e0:	87003fcc 	andi	fp,r16,255
    10e4:	00800044 	movi	r2,1
    10e8:	e0802b26 	beq	fp,r2,1198 <main+0x254>
    10ec:	e0009a26 	beq	fp,zero,1358 <main+0x414>
    10f0:	00c00084 	movi	r3,2
    10f4:	e0c07526 	beq	fp,r3,12cc <main+0x388>
    10f8:	008000c4 	movi	r2,3
    10fc:	e080451e 	bne	fp,r2,1214 <main+0x2d0>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : 
			  			
						start_sobel_conv_graycale =  alt_timestamp();
    1100:	000fa2c0 	call	fa2c <alt_timestamp>
    1104:	1025883a 	mov	r18,r2
						conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    1108:	00005a80 	call	5a8 <cam_get_xsize>
    110c:	1027883a 	mov	r19,r2
		    		                  cam_get_ysize());
    1110:	00005cc0 	call	5cc <cam_get_ysize>
		      	  	   }
		      	  	   break;
		      case 3 : 
			  			
						start_sobel_conv_graycale =  alt_timestamp();
						conv_grayscale((void *)image,
    1114:	997fffcc 	andi	r5,r19,65535
    1118:	280ad07a 	srli	r5,r5,1
    111c:	d9000017 	ldw	r4,0(sp)
    1120:	11bfffcc 	andi	r6,r2,65535
		               	sobel_y_with_rgb(grayscale);
		               	image = GetSobel_rgb();
		               	transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   	if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1124:	8c403fcc 	andi	r17,r17,255
		      	  	   }
		      	  	   break;
		      case 3 : 
			  			
						start_sobel_conv_graycale =  alt_timestamp();
						conv_grayscale((void *)image,
    1128:	00007740 	call	774 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
						end_sobel_conv_graycale = alt_timestamp();
    112c:	000fa2c0 	call	fa2c <alt_timestamp>
    1130:	1027883a 	mov	r19,r2
		               	grayscale = get_grayscale_picture();
    1134:	00008580 	call	858 <get_grayscale_picture>
					   	//start_sobel_x_m2 =  alt_timestamp();
		               	sobel_x(grayscale);
    1138:	1009883a 	mov	r4,r2
						start_sobel_conv_graycale =  alt_timestamp();
						conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
						end_sobel_conv_graycale = alt_timestamp();
		               	grayscale = get_grayscale_picture();
    113c:	1039883a 	mov	fp,r2
					   	//start_sobel_x_m2 =  alt_timestamp();
		               	sobel_x(grayscale);
    1140:	000168c0 	call	168c <sobel_x>
						//end_sobel_x_m2 = alt_timestamp();
		               	sobel_y_with_rgb(grayscale);
    1144:	e009883a 	mov	r4,fp
    1148:	00018340 	call	1834 <sobel_y_with_rgb>
		               	image = GetSobel_rgb();
    114c:	0001a840 	call	1a84 <GetSobel_rgb>
    1150:	1039883a 	mov	fp,r2
		               	transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
    1154:	00005a80 	call	5a8 <cam_get_xsize>
    1158:	1007883a 	mov	r3,r2
		      		                	cam_get_ysize(),0);
    115c:	d8c00215 	stw	r3,8(sp)
    1160:	00005cc0 	call	5cc <cam_get_ysize>
					   	//start_sobel_x_m2 =  alt_timestamp();
		               	sobel_x(grayscale);
						//end_sobel_x_m2 = alt_timestamp();
		               	sobel_y_with_rgb(grayscale);
		               	image = GetSobel_rgb();
		               	transfer_LCD_with_dma(&image[16520],
    1164:	d8c00217 	ldw	r3,8(sp)
    1168:	11bfffcc 	andi	r6,r2,65535
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   	if ((current_mode&DIPSW_SW8_MASK)!=0) {
    116c:	8c40201c 	xori	r17,r17,128
					   	//start_sobel_x_m2 =  alt_timestamp();
		               	sobel_x(grayscale);
						//end_sobel_x_m2 = alt_timestamp();
		               	sobel_y_with_rgb(grayscale);
		               	image = GetSobel_rgb();
		               	transfer_LCD_with_dma(&image[16520],
    1170:	197fffcc 	andi	r5,r3,65535
    1174:	280ad07a 	srli	r5,r5,1
    1178:	00a04414 	movui	r2,33040
    117c:	000f883a 	mov	r7,zero
    1180:	e089883a 	add	r4,fp,r2
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   	if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1184:	8c7fe004 	addi	r17,r17,-128
					   	//start_sobel_x_m2 =  alt_timestamp();
		               	sobel_x(grayscale);
						//end_sobel_x_m2 = alt_timestamp();
		               	sobel_y_with_rgb(grayscale);
		               	image = GetSobel_rgb();
		               	transfer_LCD_with_dma(&image[16520],
    1188:	0000ecc0 	call	ecc <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   	if ((current_mode&DIPSW_SW8_MASK)!=0) {
    118c:	88008316 	blt	r17,zero,139c <main+0x458>
    1190:	044000c4 	movi	r17,3
    1194:	003fbf06 	br	1094 <__alt_data_end+0xff001094>
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : 
			  			start_sobel_conv_graycale =  alt_timestamp();
    1198:	000fa2c0 	call	fa2c <alt_timestamp>
    119c:	1025883a 	mov	r18,r2
						conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    11a0:	00005a80 	call	5a8 <cam_get_xsize>
    11a4:	1027883a 	mov	r19,r2
		    		                  cam_get_ysize());
    11a8:	00005cc0 	call	5cc <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : 
			  			start_sobel_conv_graycale =  alt_timestamp();
						conv_grayscale((void *)image,
    11ac:	997fffcc 	andi	r5,r19,65535
    11b0:	280ad07a 	srli	r5,r5,1
    11b4:	d9000017 	ldw	r4,0(sp)
    11b8:	11bfffcc 	andi	r6,r2,65535
						end_sobel_conv_graycale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11bc:	8c403fcc 	andi	r17,r17,255
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : 
			  			start_sobel_conv_graycale =  alt_timestamp();
						conv_grayscale((void *)image,
    11c0:	00007740 	call	774 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
						end_sobel_conv_graycale = alt_timestamp();
    11c4:	000fa2c0 	call	fa2c <alt_timestamp>
    11c8:	1027883a 	mov	r19,r2
		               grayscale = get_grayscale_picture();
    11cc:	00008580 	call	858 <get_grayscale_picture>
    11d0:	1039883a 	mov	fp,r2
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    11d4:	00005a80 	call	5a8 <cam_get_xsize>
    11d8:	1007883a 	mov	r3,r2
		      		                	cam_get_ysize(),1);
    11dc:	d8c00215 	stw	r3,8(sp)
    11e0:	00005cc0 	call	5cc <cam_get_ysize>
						conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
						end_sobel_conv_graycale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    11e4:	d8c00217 	ldw	r3,8(sp)
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11e8:	8c40201c 	xori	r17,r17,128
						conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
						end_sobel_conv_graycale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    11ec:	01c00044 	movi	r7,1
    11f0:	197fffcc 	andi	r5,r3,65535
    11f4:	280ad07a 	srli	r5,r5,1
    11f8:	11bfffcc 	andi	r6,r2,65535
    11fc:	e1102204 	addi	r4,fp,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1200:	8c7fe004 	addi	r17,r17,-128
						conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
						end_sobel_conv_graycale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    1204:	0000ecc0 	call	ecc <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1208:	88007516 	blt	r17,zero,13e0 <main+0x49c>
    120c:	04400044 	movi	r17,1
    1210:	003fa006 	br	1094 <__alt_data_end+0xff001094>
		      	  			  vga_set_swap(VGA_QuarterScreen);
		      	  			  vga_set_pointer(image);
		      	  	   	}
		      	  	   	break;
		      default: 
			  			start_sobel_conv_graycale =  alt_timestamp();
    1214:	000fa2c0 	call	fa2c <alt_timestamp>
    1218:	1025883a 	mov	r18,r2
						conv_grayscale((void *)image,
	                                  cam_get_xsize()>>1,
    121c:	00005a80 	call	5a8 <cam_get_xsize>
    1220:	1027883a 	mov	r19,r2
	                                  cam_get_ysize());
    1224:	00005cc0 	call	5cc <cam_get_ysize>
		      	  			  vga_set_pointer(image);
		      	  	   	}
		      	  	   	break;
		      default: 
			  			start_sobel_conv_graycale =  alt_timestamp();
						conv_grayscale((void *)image,
    1228:	997fffcc 	andi	r5,r19,65535
    122c:	280ad07a 	srli	r5,r5,1
    1230:	d9000017 	ldw	r4,0(sp)
    1234:	11bfffcc 	andi	r6,r2,65535
		               	end_sobel_threshold = alt_timestamp();
						grayscale=GetSobelResult();
						transfer_LCD_with_dma(&grayscale[16520],
		      		   	             	cam_get_xsize()>>1,
		      		   	             	cam_get_ysize(),1);
		      	  	   	if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1238:	8c403fcc 	andi	r17,r17,255
		      	  			  vga_set_pointer(image);
		      	  	   	}
		      	  	   	break;
		      default: 
			  			start_sobel_conv_graycale =  alt_timestamp();
						conv_grayscale((void *)image,
    123c:	00007740 	call	774 <conv_grayscale>
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
						end_sobel_conv_graycale = alt_timestamp();
    1240:	000fa2c0 	call	fa2c <alt_timestamp>
    1244:	1027883a 	mov	r19,r2
                       	grayscale = get_grayscale_picture();
    1248:	00008580 	call	858 <get_grayscale_picture>
    124c:	102b883a 	mov	r21,r2
                       	start_sobel = alt_timestamp();
    1250:	000fa2c0 	call	fa2c <alt_timestamp>
                       	sobel_complete_V2(grayscale);
    1254:	a809883a 	mov	r4,r21
						conv_grayscale((void *)image,
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
						end_sobel_conv_graycale = alt_timestamp();
                       	grayscale = get_grayscale_picture();
                       	start_sobel = alt_timestamp();
    1258:	1029883a 	mov	r20,r2
                       	sobel_complete_V2(grayscale);
    125c:	00014ec0 	call	14ec <sobel_complete_V2>
                       	end_sobel = alt_timestamp();
    1260:	000fa2c0 	call	fa2c <alt_timestamp>
    1264:	102b883a 	mov	r21,r2
					   	sobel_x(grayscale);
					   	end_sobel_x = alt_timestamp();
					   	start_sobel_y =  alt_timestamp();
					   	sobel_y(grayscale);
                       	end_sobel_y = alt_timestamp();*/
                       	start_sobel_threshold =  alt_timestamp();
    1268:	000fa2c0 	call	fa2c <alt_timestamp>
						sobel_threshold(128);
    126c:	01002004 	movi	r4,128
					   	sobel_x(grayscale);
					   	end_sobel_x = alt_timestamp();
					   	start_sobel_y =  alt_timestamp();
					   	sobel_y(grayscale);
                       	end_sobel_y = alt_timestamp();*/
                       	start_sobel_threshold =  alt_timestamp();
    1270:	102d883a 	mov	r22,r2
						sobel_threshold(128);
    1274:	00019c40 	call	19c4 <sobel_threshold>
		               	end_sobel_threshold = alt_timestamp();
    1278:	000fa2c0 	call	fa2c <alt_timestamp>
    127c:	102f883a 	mov	r23,r2
						grayscale=GetSobelResult();
    1280:	0001a8c0 	call	1a8c <GetSobelResult>
    1284:	d8800015 	stw	r2,0(sp)
						transfer_LCD_with_dma(&grayscale[16520],
		      		   	             	cam_get_xsize()>>1,
    1288:	00005a80 	call	5a8 <cam_get_xsize>
    128c:	1009883a 	mov	r4,r2
		      		   	             	cam_get_ysize(),1);
    1290:	d9000115 	stw	r4,4(sp)
    1294:	00005cc0 	call	5cc <cam_get_ysize>
                       	end_sobel_y = alt_timestamp();*/
                       	start_sobel_threshold =  alt_timestamp();
						sobel_threshold(128);
		               	end_sobel_threshold = alt_timestamp();
						grayscale=GetSobelResult();
						transfer_LCD_with_dma(&grayscale[16520],
    1298:	d9000117 	ldw	r4,4(sp)
    129c:	d8c00017 	ldw	r3,0(sp)
		      		   	             	cam_get_xsize()>>1,
		      		   	             	cam_get_ysize(),1);
		      	  	   	if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12a0:	8c40201c 	xori	r17,r17,128
                       	end_sobel_y = alt_timestamp();*/
                       	start_sobel_threshold =  alt_timestamp();
						sobel_threshold(128);
		               	end_sobel_threshold = alt_timestamp();
						grayscale=GetSobelResult();
						transfer_LCD_with_dma(&grayscale[16520],
    12a4:	217fffcc 	andi	r5,r4,65535
    12a8:	280ad07a 	srli	r5,r5,1
    12ac:	01c00044 	movi	r7,1
    12b0:	11bfffcc 	andi	r6,r2,65535
    12b4:	19102204 	addi	r4,r3,16520
		      		   	             	cam_get_xsize()>>1,
		      		   	             	cam_get_ysize(),1);
		      	  	   	if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12b8:	8c7fe004 	addi	r17,r17,-128
                       	end_sobel_y = alt_timestamp();*/
                       	start_sobel_threshold =  alt_timestamp();
						sobel_threshold(128);
		               	end_sobel_threshold = alt_timestamp();
						grayscale=GetSobelResult();
						transfer_LCD_with_dma(&grayscale[16520],
    12bc:	0000ecc0 	call	ecc <transfer_LCD_with_dma>
		      		   	             	cam_get_xsize()>>1,
		      		   	             	cam_get_ysize(),1);
		      	  	   	if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12c0:	88003c16 	blt	r17,zero,13b4 <main+0x470>
    12c4:	e023883a 	mov	r17,fp
    12c8:	003f7206 	br	1094 <__alt_data_end+0xff001094>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : 
			  			start_sobel_conv_graycale =  alt_timestamp();
    12cc:	000fa2c0 	call	fa2c <alt_timestamp>
    12d0:	1025883a 	mov	r18,r2
						conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    12d4:	00005a80 	call	5a8 <cam_get_xsize>
    12d8:	1027883a 	mov	r19,r2
		    		                  cam_get_ysize());
    12dc:	00005cc0 	call	5cc <cam_get_ysize>
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : 
			  			start_sobel_conv_graycale =  alt_timestamp();
						conv_grayscale((void *)image,
    12e0:	997fffcc 	andi	r5,r19,65535
    12e4:	280ad07a 	srli	r5,r5,1
    12e8:	d9000017 	ldw	r4,0(sp)
    12ec:	11bfffcc 	andi	r6,r2,65535
					   //end_sobel_x_m2 = alt_timestamp();
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12f0:	8c403fcc 	andi	r17,r17,255
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : 
			  			start_sobel_conv_graycale =  alt_timestamp();
						conv_grayscale((void *)image,
    12f4:	00007740 	call	774 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
						end_sobel_conv_graycale = alt_timestamp();
    12f8:	000fa2c0 	call	fa2c <alt_timestamp>
    12fc:	1027883a 	mov	r19,r2
		               grayscale = get_grayscale_picture();
    1300:	00008580 	call	858 <get_grayscale_picture>
					   //start_sobel_x_m2 =  alt_timestamp();
		               sobel_x_with_rgb(grayscale);
    1304:	1009883a 	mov	r4,r2
    1308:	00016900 	call	1690 <sobel_x_with_rgb>
					   //end_sobel_x_m2 = alt_timestamp();
		               image = GetSobel_rgb();
    130c:	0001a840 	call	1a84 <GetSobel_rgb>
    1310:	1039883a 	mov	fp,r2
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
    1314:	00005a80 	call	5a8 <cam_get_xsize>
    1318:	1007883a 	mov	r3,r2
		      		                	cam_get_ysize(),0);
    131c:	d8c00215 	stw	r3,8(sp)
    1320:	00005cc0 	call	5cc <cam_get_ysize>
		               grayscale = get_grayscale_picture();
					   //start_sobel_x_m2 =  alt_timestamp();
		               sobel_x_with_rgb(grayscale);
					   //end_sobel_x_m2 = alt_timestamp();
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1324:	d8c00217 	ldw	r3,8(sp)
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1328:	8c40201c 	xori	r17,r17,128
		               grayscale = get_grayscale_picture();
					   //start_sobel_x_m2 =  alt_timestamp();
		               sobel_x_with_rgb(grayscale);
					   //end_sobel_x_m2 = alt_timestamp();
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    132c:	000f883a 	mov	r7,zero
    1330:	197fffcc 	andi	r5,r3,65535
    1334:	280ad07a 	srli	r5,r5,1
    1338:	00e04414 	movui	r3,33040
    133c:	11bfffcc 	andi	r6,r2,65535
    1340:	e0c9883a 	add	r4,fp,r3
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1344:	8c7fe004 	addi	r17,r17,-128
		               grayscale = get_grayscale_picture();
					   //start_sobel_x_m2 =  alt_timestamp();
		               sobel_x_with_rgb(grayscale);
					   //end_sobel_x_m2 = alt_timestamp();
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1348:	0000ecc0 	call	ecc <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    134c:	88001e16 	blt	r17,zero,13c8 <main+0x484>
    1350:	04400084 	movi	r17,2
    1354:	003f4f06 	br	1094 <__alt_data_end+0xff001094>
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
    1358:	00005a80 	call	5a8 <cam_get_xsize>
    135c:	1039883a 	mov	fp,r2
		                	cam_get_ysize(),0);
    1360:	00005cc0 	call	5cc <cam_get_ysize>
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1364:	d8c00017 	ldw	r3,0(sp)
    1368:	e17fffcc 	andi	r5,fp,65535
    136c:	280ad07a 	srli	r5,r5,1
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1370:	8c403fcc 	andi	r17,r17,255
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1374:	11bfffcc 	andi	r6,r2,65535
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1378:	8c40201c 	xori	r17,r17,128
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    137c:	00a04414 	movui	r2,33040
    1380:	000f883a 	mov	r7,zero
    1384:	1889883a 	add	r4,r3,r2
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1388:	8c7fe004 	addi	r17,r17,-128
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    138c:	0000ecc0 	call	ecc <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1390:	88001916 	blt	r17,zero,13f8 <main+0x4b4>
    1394:	0023883a 	mov	r17,zero
    1398:	003f3e06 	br	1094 <__alt_data_end+0xff001094>
		               	image = GetSobel_rgb();
		               	transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   	if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  			  vga_set_swap(VGA_QuarterScreen);
    139c:	01000204 	movi	r4,8
    13a0:	0001aa40 	call	1aa4 <vga_set_swap>
		      	  			  vga_set_pointer(image);
    13a4:	e009883a 	mov	r4,fp
    13a8:	0001a940 	call	1a94 <vga_set_pointer>
    13ac:	044000c4 	movi	r17,3
    13b0:	003f3806 	br	1094 <__alt_data_end+0xff001094>
						grayscale=GetSobelResult();
						transfer_LCD_with_dma(&grayscale[16520],
		      		   	             	cam_get_xsize()>>1,
		      		   	             	cam_get_ysize(),1);
		      	  	   	if ((current_mode&DIPSW_SW8_MASK)!=0) {
							vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    13b4:	01000604 	movi	r4,24
    13b8:	0001aa40 	call	1aa4 <vga_set_swap>
							vga_set_pointer(grayscale);
    13bc:	d9000017 	ldw	r4,0(sp)
    13c0:	0001a940 	call	1a94 <vga_set_pointer>
    13c4:	003fbf06 	br	12c4 <__alt_data_end+0xff0012c4>
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
    13c8:	01000204 	movi	r4,8
    13cc:	0001aa40 	call	1aa4 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    13d0:	e009883a 	mov	r4,fp
    13d4:	0001a940 	call	1a94 <vga_set_pointer>
    13d8:	04400084 	movi	r17,2
    13dc:	003f2d06 	br	1094 <__alt_data_end+0xff001094>
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    13e0:	01000604 	movi	r4,24
    13e4:	0001aa40 	call	1aa4 <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    13e8:	e009883a 	mov	r4,fp
    13ec:	0001a940 	call	1a94 <vga_set_pointer>
    13f0:	04400044 	movi	r17,1
    13f4:	003f2706 	br	1094 <__alt_data_end+0xff001094>
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
    13f8:	01000204 	movi	r4,8
    13fc:	0001aa40 	call	1aa4 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    1400:	d9000017 	ldw	r4,0(sp)
    1404:	0023883a 	mov	r17,zero
    1408:	0001a940 	call	1a94 <vga_set_pointer>
    140c:	003f2106 	br	1094 <__alt_data_end+0xff001094>

00001410 <init_sobel_arrays>:
	int loop;
	sobel_width = width;
	sobel_height = height;
	int mult_size = width*height;

	if (sobel_x_result != NULL)
    1410:	d0a6d217 	ldw	r2,-25784(gp)
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    1414:	defffd04 	addi	sp,sp,-12
    1418:	dc000015 	stw	r16,0(sp)
    141c:	dfc00215 	stw	ra,8(sp)
    1420:	dc400115 	stw	r17,4(sp)
	int loop;
	sobel_width = width;
    1424:	d126cf15 	stw	r4,-25796(gp)
	sobel_height = height;
    1428:	d166d115 	stw	r5,-25788(gp)
	int mult_size = width*height;
    142c:	2161383a 	mul	r16,r4,r5

	if (sobel_x_result != NULL)
    1430:	10000226 	beq	r2,zero,143c <init_sobel_arrays+0x2c>
		free(sobel_x_result);
    1434:	1009883a 	mov	r4,r2
    1438:	0001ac80 	call	1ac8 <free>
	sobel_x_result = (short *)malloc(mult_size*sizeof(short));
    143c:	8423883a 	add	r17,r16,r16
    1440:	8809883a 	mov	r4,r17
    1444:	0001ab40 	call	1ab4 <malloc>
	if (sobel_y_result != NULL)
    1448:	d126d317 	ldw	r4,-25780(gp)
	sobel_height = height;
	int mult_size = width*height;

	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(mult_size*sizeof(short));
    144c:	d0a6d215 	stw	r2,-25784(gp)
	if (sobel_y_result != NULL)
    1450:	20000126 	beq	r4,zero,1458 <init_sobel_arrays+0x48>
		free(sobel_y_result);
    1454:	0001ac80 	call	1ac8 <free>
	sobel_y_result = (short *)malloc(mult_size*sizeof(short));
    1458:	8809883a 	mov	r4,r17
    145c:	0001ab40 	call	1ab4 <malloc>
	if (sobel_result != NULL)
    1460:	d126d017 	ldw	r4,-25792(gp)
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(mult_size*sizeof(short));
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(mult_size*sizeof(short));
    1464:	d0a6d315 	stw	r2,-25780(gp)
	if (sobel_result != NULL)
    1468:	20000126 	beq	r4,zero,1470 <init_sobel_arrays+0x60>
		free(sobel_result);
    146c:	0001ac80 	call	1ac8 <free>
	sobel_result = (unsigned char *)malloc(mult_size*sizeof(unsigned char));
    1470:	8009883a 	mov	r4,r16
    1474:	0001ab40 	call	1ab4 <malloc>
	if (sobel_rgb565 != NULL)
    1478:	d126d417 	ldw	r4,-25776(gp)
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(mult_size*sizeof(short));
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(mult_size*sizeof(unsigned char));
    147c:	d0a6d015 	stw	r2,-25792(gp)
	if (sobel_rgb565 != NULL)
    1480:	20000126 	beq	r4,zero,1488 <init_sobel_arrays+0x78>
		free(sobel_rgb565);
    1484:	0001ac80 	call	1ac8 <free>
	sobel_rgb565 = (unsigned short *)malloc(mult_size*sizeof(unsigned short));
    1488:	8809883a 	mov	r4,r17
    148c:	0001ab40 	call	1ab4 <malloc>
    1490:	d0a6d415 	stw	r2,-25776(gp)
	for (loop = 0 ; loop < mult_size ; loop++) {
    1494:	0005883a 	mov	r2,zero
    1498:	04000f0e 	bge	zero,r16,14d8 <init_sobel_arrays+0xc8>
		sobel_x_result[loop] = 0;
    149c:	d226d217 	ldw	r8,-25784(gp)
		sobel_y_result[loop] = 0;
    14a0:	d1e6d317 	ldw	r7,-25780(gp)
		sobel_result[loop] = 0;
    14a4:	d1a6d017 	ldw	r6,-25792(gp)
    14a8:	1087883a 	add	r3,r2,r2
	sobel_result = (unsigned char *)malloc(mult_size*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(mult_size*sizeof(unsigned short));
	for (loop = 0 ; loop < mult_size ; loop++) {
		sobel_x_result[loop] = 0;
    14ac:	40d1883a 	add	r8,r8,r3
    14b0:	4000000d 	sth	zero,0(r8)
		sobel_y_result[loop] = 0;
    14b4:	38cf883a 	add	r7,r7,r3
		sobel_result[loop] = 0;
    14b8:	308d883a 	add	r6,r6,r2
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(mult_size*sizeof(unsigned short));
	for (loop = 0 ; loop < mult_size ; loop++) {
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
    14bc:	3800000d 	sth	zero,0(r7)
		sobel_result[loop] = 0;
    14c0:	30000005 	stb	zero,0(r6)
		sobel_rgb565[loop] = 0;
    14c4:	d1a6d417 	ldw	r6,-25776(gp)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(mult_size*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(mult_size*sizeof(unsigned short));
	for (loop = 0 ; loop < mult_size ; loop++) {
    14c8:	10800044 	addi	r2,r2,1
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
    14cc:	30c7883a 	add	r3,r6,r3
    14d0:	1800000d 	sth	zero,0(r3)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(mult_size*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(mult_size*sizeof(unsigned short));
	for (loop = 0 ; loop < mult_size ; loop++) {
    14d4:	80bff11e 	bne	r16,r2,149c <__alt_data_end+0xff00149c>
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
    14d8:	dfc00217 	ldw	ra,8(sp)
    14dc:	dc400117 	ldw	r17,4(sp)
    14e0:	dc000017 	ldw	r16,0(sp)
    14e4:	dec00304 	addi	sp,sp,12
    14e8:	f800283a 	ret

000014ec <sobel_complete_V2>:
         pixels[idy+(x+1)];

   return result;
}
void sobel_complete_V2( unsigned char * source )
{
    14ec:	defff504 	addi	sp,sp,-44
    14f0:	ddc00815 	stw	r23,32(sp)
    14f4:	dd400615 	stw	r21,24(sp)
    int index_array_x_0[3]= {0,0,0};
    int index_array_x_2[3]= {0,0,0};
    index_array[1] = sobel_width;
    index_array[2] = sobel_width<<1;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    14f8:	d5e6d117 	ldw	r23,-25788(gp)
{
    int x,y;
    int index_array[4]= {0,0,0,0};
    int index_array_x_0[3]= {0,0,0};
    int index_array_x_2[3]= {0,0,0};
    index_array[1] = sobel_width;
    14fc:	d566cf17 	ldw	r21,-25796(gp)
         pixels[idy+(x+1)];

   return result;
}
void sobel_complete_V2( unsigned char * source )
{
    1500:	dd800715 	stw	r22,28(sp)
    1504:	dc800315 	stw	r18,12(sp)
    1508:	dfc00a15 	stw	ra,40(sp)
    150c:	df000915 	stw	fp,36(sp)
    1510:	dd000515 	stw	r20,20(sp)
    1514:	dcc00415 	stw	r19,16(sp)
    1518:	dc400215 	stw	r17,8(sp)
    151c:	dc000115 	stw	r16,4(sp)
    int index_array_x_0[3]= {0,0,0};
    int index_array_x_2[3]= {0,0,0};
    index_array[1] = sobel_width;
    index_array[2] = sobel_width<<1;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1520:	05800084 	movi	r22,2
    int x,y;
    int index_array[4]= {0,0,0,0};
    int index_array_x_0[3]= {0,0,0};
    int index_array_x_2[3]= {0,0,0};
    index_array[1] = sobel_width;
    index_array[2] = sobel_width<<1;
    1524:	ad65883a 	add	r18,r21,r21

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1528:	b5c0460e 	bge	r22,r23,1644 <sobel_complete_V2+0x158>
    152c:	d0a6d317 	ldw	r2,-25780(gp)
    1530:	d726d217 	ldw	fp,-25784(gp)
    1534:	94bfffc4 	addi	r18,r18,-1
    1538:	d8800015 	stw	r2,0(sp)
    153c:	bdffffc4 	addi	r23,r23,-1
    1540:	a817883a 	mov	r11,r21
    1544:	04c00044 	movi	r19,1
    1548:	97c00044 	addi	ra,r18,1
	  index_array_x_0[0] = index_array[1]-1;
    154c:	5b7fffc4 	addi	r13,r11,-1
	  index_array_x_2[0] = index_array[2]-1;
    1550:	9015883a 	mov	r10,r18
	  index_array_x_0[1] = index_array[1];
	  index_array_x_2[1] = index_array[2];
	  index_array_x_0[2] = index_array[1]+1;
    1554:	5b000044 	addi	r12,r11,1
	  index_array_x_2[2] = index_array[2]+1;
	  for (x = 1 ; x < (sobel_width-1) ; x++) {
    1558:	b540460e 	bge	r22,r21,1674 <sobel_complete_V2+0x188>
    155c:	d8800017 	ldw	r2,0(sp)
    1560:	631d883a 	add	r14,r12,r12
    1564:	92400084 	addi	r9,r18,2
    1568:	aca5883a 	add	r18,r21,r18
    156c:	e39f883a 	add	r15,fp,r14
    1570:	22d7883a 	add	r11,r4,r11
    1574:	235b883a 	add	r13,r4,r13
    1578:	2319883a 	add	r12,r4,r12
    157c:	2253883a 	add	r9,r4,r9
    1580:	139d883a 	add	r14,r2,r14
    1584:	24a9883a 	add	r20,r4,r18
    1588:	f823883a 	mov	r17,ra
    158c:	00000106 	br	1594 <sobel_complete_V2+0xa8>
    1590:	1823883a 	mov	r17,r3
		index_array[4] = index_array[1]+ x;

		sobel_x_result[index_array[4]] = (source[index_array_x_0[1]])-(source[index_array_x_0[0]])-(source[index_array_x_0[2]] << 1)+(source[index_array_x_2[0]]<<2)-(source[index_array_x_2[1]]) + (source[index_array_x_2[2]]);
    1594:	2295883a 	add	r10,r4,r10
    1598:	50800003 	ldbu	r2,0(r10)
    159c:	59400003 	ldbu	r5,0(r11)
    15a0:	48c00003 	ldbu	r3,0(r9)
    15a4:	6c000003 	ldbu	r16,0(r13)
    15a8:	244d883a 	add	r6,r4,r17
    15ac:	1085883a 	add	r2,r2,r2
    15b0:	32000003 	ldbu	r8,0(r6)
    15b4:	61c00003 	ldbu	r7,0(r12)
    15b8:	28c7883a 	add	r3,r5,r3
    15bc:	108b883a 	add	r5,r2,r2
    15c0:	194b883a 	add	r5,r3,r5
    15c4:	2c07c83a 	sub	r3,r5,r16
    15c8:	1a07c83a 	sub	r3,r3,r8
    15cc:	39cf883a 	add	r7,r7,r7
    15d0:	19c5c83a 	sub	r2,r3,r7
    15d4:	7880000d 	sth	r2,0(r15)
		sobel_y_result[index_array[4]] = (source[index_array_x_0[0]])+(source[index_array_x_0[1]]<<1)+(source[index_array_x_0[2]])-(source[index_array_x_2[0]])-(source[index_array_x_2[1]]<<2) - (source[index_array_x_2[2]]);
    15d8:	6c000003 	ldbu	r16,0(r13)
    15dc:	62000003 	ldbu	r8,0(r12)
    15e0:	58800003 	ldbu	r2,0(r11)
    15e4:	50c00003 	ldbu	r3,0(r10)
    15e8:	31400003 	ldbu	r5,0(r6)
    15ec:	49c00003 	ldbu	r7,0(r9)
    15f0:	820d883a 	add	r6,r16,r8
    15f4:	1085883a 	add	r2,r2,r2
    15f8:	30c7c83a 	sub	r3,r6,r3
    15fc:	1887883a 	add	r3,r3,r2
    1600:	294b883a 	add	r5,r5,r5
    1604:	19c7c83a 	sub	r3,r3,r7
    1608:	294b883a 	add	r5,r5,r5
    160c:	1945c83a 	sub	r2,r3,r5
    1610:	7080000d 	sth	r2,0(r14)
    1614:	4907c83a 	sub	r3,r9,r4
    1618:	4a400044 	addi	r9,r9,1
    161c:	8815883a 	mov	r10,r17
    1620:	5ac00044 	addi	r11,r11,1
    1624:	6b400044 	addi	r13,r13,1
    1628:	63000044 	addi	r12,r12,1
    162c:	7bc00084 	addi	r15,r15,2
    1630:	73800084 	addi	r14,r14,2
	  index_array_x_2[0] = index_array[2]-1;
	  index_array_x_0[1] = index_array[1];
	  index_array_x_2[1] = index_array[2];
	  index_array_x_0[2] = index_array[1]+1;
	  index_array_x_2[2] = index_array[2]+1;
	  for (x = 1 ; x < (sobel_width-1) ; x++) {
    1634:	a27fd61e 	bne	r20,r9,1590 <__alt_data_end+0xff001590>
    int index_array_x_0[3]= {0,0,0};
    int index_array_x_2[3]= {0,0,0};
    index_array[1] = sobel_width;
    index_array[2] = sobel_width<<1;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1638:	9cc00044 	addi	r19,r19,1
    163c:	f817883a 	mov	r11,ra
    1640:	bcffc11e 	bne	r23,r19,1548 <__alt_data_end+0xff001548>
	  index_array[0] = index_array[1];
	  index_array[1] = index_array[2];
	  index_array[2] = index_array[1]+sobel_width;
   }

}
    1644:	dfc00a17 	ldw	ra,40(sp)
    1648:	df000917 	ldw	fp,36(sp)
    164c:	ddc00817 	ldw	r23,32(sp)
    1650:	dd800717 	ldw	r22,28(sp)
    1654:	dd400617 	ldw	r21,24(sp)
    1658:	dd000517 	ldw	r20,20(sp)
    165c:	dcc00417 	ldw	r19,16(sp)
    1660:	dc800317 	ldw	r18,12(sp)
    1664:	dc400217 	ldw	r17,8(sp)
    1668:	dc000117 	ldw	r16,4(sp)
    166c:	dec00b04 	addi	sp,sp,44
    1670:	f800283a 	ret
    int index_array_x_0[3]= {0,0,0};
    int index_array_x_2[3]= {0,0,0};
    index_array[1] = sobel_width;
    index_array[2] = sobel_width<<1;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1674:	9cc00044 	addi	r19,r19,1
    1678:	9565883a 	add	r18,r18,r21
    167c:	f817883a 	mov	r11,ra
    1680:	bcffb11e 	bne	r23,r19,1548 <__alt_data_end+0xff001548>
    1684:	003fef06 	br	1644 <__alt_data_end+0xff001644>

00001688 <sobel_complete>:
    1688:	f800283a 	ret

0000168c <sobel_x>:
    168c:	f800283a 	ret

00001690 <sobel_x_with_rgb>:

void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;
   int idy;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1690:	d0a6d117 	ldw	r2,-25788(gp)
    1694:	00c00084 	movi	r3,2
    1698:	18805f0e 	bge	r3,r2,1818 <sobel_x_with_rgb+0x188>
    169c:	d0e6cf17 	ldw	r3,-25796(gp)
    	  	  sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    16a0:	defff404 	addi	sp,sp,-48
    16a4:	dd400715 	stw	r21,28(sp)
    16a8:	d8c00015 	stw	r3,0(sp)
    16ac:	d566d417 	ldw	r21,-25776(gp)
    16b0:	d9400017 	ldw	r5,0(sp)
    16b4:	dd800815 	stw	r22,32(sp)
    16b8:	dd000615 	stw	r20,24(sp)
    16bc:	18ed883a 	add	r22,r3,r3
    16c0:	d526d217 	ldw	r20,-25784(gp)
    16c4:	b0c00084 	addi	r3,r22,2
    16c8:	a8eb883a 	add	r21,r21,r3
    16cc:	10bfffc4 	addi	r2,r2,-1
    16d0:	df000a15 	stw	fp,40(sp)
    16d4:	ddc00915 	stw	r23,36(sp)
    16d8:	dc800415 	stw	r18,16(sp)
    16dc:	dc400315 	stw	r17,12(sp)
    16e0:	dfc00b15 	stw	ra,44(sp)
    16e4:	dcc00515 	stw	r19,20(sp)
    16e8:	dc000215 	stw	r16,8(sp)
    16ec:	2c7fffc4 	addi	r17,r5,-1
    16f0:	a839883a 	mov	fp,r21
    16f4:	a0e9883a 	add	r20,r20,r3
    16f8:	d8800115 	stw	r2,4(sp)
	   idy = y*sobel_width;
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[idy+x] = result;
          if (result < 0) {
        	  sobel_rgb565[idy+x] = ((-result)>>2)<<5;
    16fc:	2811883a 	mov	r8,r5
    1700:	0025883a 	mov	r18,zero
    1704:	05c00044 	movi	r23,1
    1708:	d8800017 	ldw	r2,0(sp)
    170c:	42c00084 	addi	r11,r8,2
    1710:	92400084 	addi	r9,r18,2
    1714:	40bf883a 	add	ra,r8,r2
    1718:	fa800084 	addi	r10,ra,2
   short result;
   int idy;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	   // because multi take more than add
	   idy = y*sobel_width;
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    171c:	03000044 	movi	r12,1
    1720:	bdc00044 	addi	r23,r23,1
    1724:	249f883a 	add	r15,r4,r18
    1728:	2253883a 	add	r9,r4,r9
    172c:	2211883a 	add	r8,r4,r8
    1730:	22d7883a 	add	r11,r4,r11
    1734:	27dd883a 	add	r14,r4,ra
    1738:	2295883a 	add	r10,r4,r10
    173c:	a01b883a 	mov	r13,r20
    1740:	e021883a 	mov	r16,fp
    1744:	a827883a 	mov	r19,r21
    1748:	6440200e 	bge	r12,r17,17cc <sobel_x_with_rgb+0x13c>
   idy = (y+1)*width;
   result += filter[6]*
         pixels[idy+(x-1)];
   result += filter[7]*
         pixels[idy+(x)];
   result += filter[8]*
    174c:	50800003 	ldbu	r2,0(r10)
    1750:	49800003 	ldbu	r6,0(r9)
    1754:	41c00003 	ldbu	r7,0(r8)
    1758:	58c00003 	ldbu	r3,0(r11)
    175c:	308d883a 	add	r6,r6,r2
    1760:	31cdc83a 	sub	r6,r6,r7
    1764:	78800003 	ldbu	r2,0(r15)
    1768:	71400003 	ldbu	r5,0(r14)
    176c:	31cdc83a 	sub	r6,r6,r7
    1770:	18c7883a 	add	r3,r3,r3
    1774:	30c7883a 	add	r3,r6,r3
    1778:	1887c83a 	sub	r3,r3,r2
    177c:	1945c83a 	sub	r2,r3,r5
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	   // because multi take more than add
	   idy = y*sobel_width;
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[idy+x] = result;
    1780:	6880000d 	sth	r2,0(r13)
          if (result < 0) {
    1784:	10bfffcc 	andi	r2,r2,65535
    1788:	10a0001c 	xori	r2,r2,32768
    178c:	10a00004 	addi	r2,r2,-32768
        	  sobel_rgb565[idy+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[idy+x] = ((result>>3)&0x1F)<<11;
    1790:	1007d0fa 	srai	r3,r2,3
   result += filter[0]*
         pixels[idy+(x-1)];
   result += filter[1]*
         pixels[idy+(x)];
   result += filter[2]*
         pixels[idy+(x+1)];
    1794:	63000044 	addi	r12,r12,1
	   // because multi take more than add
	   idy = y*sobel_width;
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[idy+x] = result;
          if (result < 0) {
    1798:	10002016 	blt	r2,zero,181c <sobel_x_with_rgb+0x18c>
        	  sobel_rgb565[idy+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[idy+x] = ((result>>3)&0x1F)<<11;
    179c:	180692fa 	slli	r3,r3,11
    17a0:	80c0000d 	sth	r3,0(r16)
    17a4:	9cc00084 	addi	r19,r19,2
    17a8:	84000084 	addi	r16,r16,2
    17ac:	7bc00044 	addi	r15,r15,1
    17b0:	4a400044 	addi	r9,r9,1
    17b4:	42000044 	addi	r8,r8,1
    17b8:	5ac00044 	addi	r11,r11,1
    17bc:	73800044 	addi	r14,r14,1
    17c0:	52800044 	addi	r10,r10,1
    17c4:	6b400084 	addi	r13,r13,2
   short result;
   int idy;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	   // because multi take more than add
	   idy = y*sobel_width;
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    17c8:	647fe016 	blt	r12,r17,174c <__alt_data_end+0xff00174c>
    17cc:	d8c00017 	ldw	r3,0(sp)

void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;
   int idy;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    17d0:	d9400117 	ldw	r5,4(sp)
    17d4:	adab883a 	add	r21,r21,r22
    17d8:	90e5883a 	add	r18,r18,r3
    17dc:	e5b9883a 	add	fp,fp,r22
    17e0:	a5a9883a 	add	r20,r20,r22
    17e4:	f811883a 	mov	r8,ra
    17e8:	b97fc71e 	bne	r23,r5,1708 <__alt_data_end+0xff001708>
          } else {
        	  sobel_rgb565[idy+x] = ((result>>3)&0x1F)<<11;
          }
      }
   }
}
    17ec:	dfc00b17 	ldw	ra,44(sp)
    17f0:	df000a17 	ldw	fp,40(sp)
    17f4:	ddc00917 	ldw	r23,36(sp)
    17f8:	dd800817 	ldw	r22,32(sp)
    17fc:	dd400717 	ldw	r21,28(sp)
    1800:	dd000617 	ldw	r20,24(sp)
    1804:	dcc00517 	ldw	r19,20(sp)
    1808:	dc800417 	ldw	r18,16(sp)
    180c:	dc400317 	ldw	r17,12(sp)
    1810:	dc000217 	ldw	r16,8(sp)
    1814:	dec00c04 	addi	sp,sp,48
    1818:	f800283a 	ret
	   idy = y*sobel_width;
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[idy+x] = result;
          if (result < 0) {
        	  sobel_rgb565[idy+x] = ((-result)>>2)<<5;
    181c:	0085c83a 	sub	r2,zero,r2
    1820:	1005d0ba 	srai	r2,r2,2
    1824:	1004917a 	slli	r2,r2,5
    1828:	9880000d 	sth	r2,0(r19)
    182c:	003fdd06 	br	17a4 <__alt_data_end+0xff0017a4>

00001830 <sobel_y>:
          }
      }
   }
}

void sobel_y( unsigned char *source ) {
    1830:	f800283a 	ret

00001834 <sobel_y_with_rgb>:
      }
   }
}

//change here,
void sobel_y_with_rgb( unsigned char *source ) {
    1834:	defff504 	addi	sp,sp,-44
    1838:	df000915 	stw	fp,36(sp)
   int x,y;
   short result;
   int idy;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    183c:	d726d117 	ldw	fp,-25788(gp)
      }
   }
}

//change here,
void sobel_y_with_rgb( unsigned char *source ) {
    1840:	dfc00a15 	stw	ra,40(sp)
    1844:	ddc00815 	stw	r23,32(sp)
    1848:	dd800715 	stw	r22,28(sp)
    184c:	dd400615 	stw	r21,24(sp)
    1850:	dd000515 	stw	r20,20(sp)
    1854:	dcc00415 	stw	r19,16(sp)
    1858:	dc800315 	stw	r18,12(sp)
    185c:	dc400215 	stw	r17,8(sp)
    1860:	dc000115 	stw	r16,4(sp)
   int x,y;
   short result;
   int idy;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1864:	00800084 	movi	r2,2
    1868:	17004a0e 	bge	r2,fp,1994 <sobel_y_with_rgb+0x160>
    186c:	d526cf17 	ldw	r20,-25796(gp)
    1870:	d4e6d417 	ldw	r19,-25776(gp)
    1874:	e73fffc4 	addi	fp,fp,-1
    1878:	a52f883a 	add	r23,r20,r20
    187c:	b885883a 	add	r2,r23,r2
    1880:	98a7883a 	add	r19,r19,r2
    1884:	d0a6d317 	ldw	r2,-25780(gp)
    1888:	25ff883a 	add	ra,r4,r23
    188c:	a43fffc4 	addi	r16,r20,-1
    1890:	10800084 	addi	r2,r2,2
    1894:	982d883a 	mov	r22,r19
    1898:	07ffc83a 	sub	ra,zero,ra
	   idy = y*sobel_width;
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[+x] = result;
         if (result < 0) {
       	  sobel_rgb565[idy+x] = ((-result)>>2)<<5;
    189c:	b825883a 	mov	r18,r23
    18a0:	0023883a 	mov	r17,zero
    18a4:	05400044 	movi	r21,1
    18a8:	d8800015 	stw	r2,0(sp)
    18ac:	8a800044 	addi	r10,r17,1
    18b0:	8a400084 	addi	r9,r17,2
    18b4:	91c00044 	addi	r7,r18,1
    18b8:	92000084 	addi	r8,r18,2
    18bc:	ad400044 	addi	r21,r21,1
    18c0:	245b883a 	add	r13,r4,r17
    18c4:	2295883a 	add	r10,r4,r10
    18c8:	2253883a 	add	r9,r4,r9
    18cc:	2499883a 	add	r12,r4,r18
    18d0:	21cf883a 	add	r7,r4,r7
    18d4:	2211883a 	add	r8,r4,r8
    18d8:	dac00017 	ldw	r11,0(sp)
   int x,y;
   short result;
   int idy;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	   idy = y*sobel_width;
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    18dc:	b01d883a 	mov	r14,r22
    18e0:	981f883a 	mov	r15,r19
    18e4:	00000b06 	br	1914 <sobel_y_with_rgb+0xe0>
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[+x] = result;
         if (result < 0) {
       	  sobel_rgb565[idy+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[idy+x] = ((result>>3)&0x1F)<<11;
    18e8:	180692fa 	slli	r3,r3,11
    18ec:	70c0000d 	sth	r3,0(r14)
    18f0:	7bc00084 	addi	r15,r15,2
    18f4:	73800084 	addi	r14,r14,2
    18f8:	6b400044 	addi	r13,r13,1
    18fc:	52800044 	addi	r10,r10,1
    1900:	4a400044 	addi	r9,r9,1
    1904:	63000044 	addi	r12,r12,1
    1908:	39c00044 	addi	r7,r7,1
    190c:	42000044 	addi	r8,r8,1
    1910:	5ac00084 	addi	r11,r11,2
   int x,y;
   short result;
   int idy;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	   idy = y*sobel_width;
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1914:	f9c5883a 	add	r2,ra,r7
    1918:	1400180e 	bge	r2,r16,197c <sobel_y_with_rgb+0x148>
   idy = (y+1)*width;
   result += filter[6]*
         pixels[idy+(x-1)];
   result += filter[7]*
         pixels[idy+(x)];
   result += filter[8]*
    191c:	48800003 	ldbu	r2,0(r9)
    1920:	69800003 	ldbu	r6,0(r13)
    1924:	50c00003 	ldbu	r3,0(r10)
    1928:	39400003 	ldbu	r5,0(r7)
    192c:	308d883a 	add	r6,r6,r2
    1930:	18c7883a 	add	r3,r3,r3
    1934:	60800003 	ldbu	r2,0(r12)
    1938:	30c7883a 	add	r3,r6,r3
    193c:	1947c83a 	sub	r3,r3,r5
    1940:	41800003 	ldbu	r6,0(r8)
    1944:	1947c83a 	sub	r3,r3,r5
    1948:	1885c83a 	sub	r2,r3,r2
    194c:	1185c83a 	sub	r2,r2,r6
   int idy;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	   idy = y*sobel_width;
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[+x] = result;
    1950:	5880000d 	sth	r2,0(r11)
         if (result < 0) {
    1954:	10bfffcc 	andi	r2,r2,65535
    1958:	10a0001c 	xori	r2,r2,32768
    195c:	10a00004 	addi	r2,r2,-32768
       	  sobel_rgb565[idy+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[idy+x] = ((result>>3)&0x1F)<<11;
    1960:	1007d0fa 	srai	r3,r2,3
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	   idy = y*sobel_width;
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[+x] = result;
         if (result < 0) {
    1964:	103fe00e 	bge	r2,zero,18e8 <__alt_data_end+0xff0018e8>
       	  sobel_rgb565[idy+x] = ((-result)>>2)<<5;
    1968:	0085c83a 	sub	r2,zero,r2
    196c:	1005d0ba 	srai	r2,r2,2
    1970:	1004917a 	slli	r2,r2,5
    1974:	7880000d 	sth	r2,0(r15)
    1978:	003fdd06 	br	18f0 <__alt_data_end+0xff0018f0>
    197c:	8d23883a 	add	r17,r17,r20
    1980:	9525883a 	add	r18,r18,r20
    1984:	9de7883a 	add	r19,r19,r23
    1988:	b5ed883a 	add	r22,r22,r23
    198c:	fd3fc83a 	sub	ra,ra,r20
//change here,
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;
   int idy;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1990:	af3fc61e 	bne	r21,fp,18ac <__alt_data_end+0xff0018ac>
         } else {
       	  sobel_rgb565[idy+x] = ((result>>3)&0x1F)<<11;
         }
      }
   }
}
    1994:	dfc00a17 	ldw	ra,40(sp)
    1998:	df000917 	ldw	fp,36(sp)
    199c:	ddc00817 	ldw	r23,32(sp)
    19a0:	dd800717 	ldw	r22,28(sp)
    19a4:	dd400617 	ldw	r21,24(sp)
    19a8:	dd000517 	ldw	r20,20(sp)
    19ac:	dcc00417 	ldw	r19,16(sp)
    19b0:	dc800317 	ldw	r18,12(sp)
    19b4:	dc400217 	ldw	r17,8(sp)
    19b8:	dc000117 	ldw	r16,4(sp)
    19bc:	dec00b04 	addi	sp,sp,44
    19c0:	f800283a 	ret

000019c4 <sobel_threshold>:

void sobel_threshold(short threshold) {
	int x,y,arrayindex,arrayY;
	short sum,value;
   //unrolling loop
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    19c4:	d0e6d117 	ldw	r3,-25788(gp)
    19c8:	02c00084 	movi	r11,2
    19cc:	58c02c0e 	bge	r11,r3,1a80 <sobel_threshold+0xbc>
    19d0:	227fffcc 	andi	r9,r4,65535
    19d4:	d0a6cf17 	ldw	r2,-25796(gp)
    19d8:	4a60001c 	xori	r9,r9,32768
    19dc:	02800044 	movi	r10,1
    19e0:	4a600004 	addi	r9,r9,-32768
		arrayY = (y*sobel_width);
    19e4:	5091383a 	mul	r8,r10,r2
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    19e8:	5880220e 	bge	r11,r2,1a74 <sobel_threshold+0xb0>
    19ec:	41000044 	addi	r4,r8,1
    19f0:	2109883a 	add	r4,r4,r4
    19f4:	01400044 	movi	r5,1
    19f8:	00000d06 	br	1a30 <sobel_threshold+0x6c>
			arrayindex = arrayY+x;
			value = sobel_x_result[arrayindex];
			sum = abs(value);
			value = sobel_y_result[arrayindex];
			sum += abs(value);
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    19fc:	3080000f 	ldh	r2,0(r6)
    1a00:	21000084 	addi	r4,r4,2
    1a04:	10001816 	blt	r2,zero,1a68 <sobel_threshold+0xa4>
    1a08:	3885883a 	add	r2,r7,r2
    1a0c:	10bfffcc 	andi	r2,r2,65535
    1a10:	10a0001c 	xori	r2,r2,32768
    1a14:	10a00004 	addi	r2,r2,-32768
    1a18:	4884803a 	cmplt	r2,r9,r2
    1a1c:	0085c83a 	sub	r2,zero,r2
    1a20:	18800005 	stb	r2,0(r3)
	int x,y,arrayindex,arrayY;
	short sum,value;
   //unrolling loop
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		arrayY = (y*sobel_width);
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1a24:	d0a6cf17 	ldw	r2,-25796(gp)
    1a28:	10ffffc4 	addi	r3,r2,-1
    1a2c:	28c0100e 	bge	r5,r3,1a70 <sobel_threshold+0xac>
			arrayindex = arrayY+x;
			value = sobel_x_result[arrayindex];
			sum = abs(value);
			value = sobel_y_result[arrayindex];
    1a30:	d0a6d317 	ldw	r2,-25780(gp)
			sum += abs(value);
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1a34:	d0e6d017 	ldw	r3,-25792(gp)
   //unrolling loop
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		arrayY = (y*sobel_width);
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = arrayY+x;
			value = sobel_x_result[arrayindex];
    1a38:	d1a6d217 	ldw	r6,-25784(gp)
			sum = abs(value);
			value = sobel_y_result[arrayindex];
    1a3c:	1105883a 	add	r2,r2,r4
			sum += abs(value);
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1a40:	11c0000f 	ldh	r7,0(r2)
    1a44:	1a07883a 	add	r3,r3,r8
    1a48:	1947883a 	add	r3,r3,r5
   //unrolling loop
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		arrayY = (y*sobel_width);
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = arrayY+x;
			value = sobel_x_result[arrayindex];
    1a4c:	310d883a 	add	r6,r6,r4
	int x,y,arrayindex,arrayY;
	short sum,value;
   //unrolling loop
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		arrayY = (y*sobel_width);
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1a50:	29400044 	addi	r5,r5,1
			arrayindex = arrayY+x;
			value = sobel_x_result[arrayindex];
			sum = abs(value);
			value = sobel_y_result[arrayindex];
			sum += abs(value);
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1a54:	383fe90e 	bge	r7,zero,19fc <__alt_data_end+0xff0019fc>
    1a58:	3080000f 	ldh	r2,0(r6)
    1a5c:	01cfc83a 	sub	r7,zero,r7
    1a60:	21000084 	addi	r4,r4,2
    1a64:	103fe80e 	bge	r2,zero,1a08 <__alt_data_end+0xff001a08>
    1a68:	0085c83a 	sub	r2,zero,r2
    1a6c:	003fe606 	br	1a08 <__alt_data_end+0xff001a08>
    1a70:	d0e6d117 	ldw	r3,-25788(gp)

void sobel_threshold(short threshold) {
	int x,y,arrayindex,arrayY;
	short sum,value;
   //unrolling loop
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1a74:	52800044 	addi	r10,r10,1
    1a78:	193fffc4 	addi	r4,r3,-1
    1a7c:	513fd916 	blt	r10,r4,19e4 <__alt_data_end+0xff0019e4>
    1a80:	f800283a 	ret

00001a84 <GetSobel_rgb>:
	}
}

unsigned short *GetSobel_rgb() {
	return sobel_rgb565;
}
    1a84:	d0a6d417 	ldw	r2,-25776(gp)
    1a88:	f800283a 	ret

00001a8c <GetSobelResult>:

unsigned char *GetSobelResult() {
	return sobel_result;
}
    1a8c:	d0a6d017 	ldw	r2,-25792(gp)
    1a90:	f800283a 	ret

00001a94 <vga_set_pointer>:

#include <system.h>
#include <io.h>

void vga_set_pointer( void* image ) {
	IOWR_32DIRECT(VGA_DMA_0_BASE,0,(int)image);
    1a94:	00804034 	movhi	r2,256
    1a98:	10843404 	addi	r2,r2,4304
    1a9c:	11000035 	stwio	r4,0(r2)
    1aa0:	f800283a 	ret

00001aa4 <vga_set_swap>:
}

void vga_set_swap(char swap) {
	IOWR_8DIRECT(VGA_DMA_0_BASE,4,swap);
    1aa4:	00804034 	movhi	r2,256
    1aa8:	10843504 	addi	r2,r2,4308
    1aac:	11000025 	stbio	r4,0(r2)
    1ab0:	f800283a 	ret

00001ab4 <malloc>:
    1ab4:	00800074 	movhi	r2,1
    1ab8:	108c2c04 	addi	r2,r2,12464
    1abc:	200b883a 	mov	r5,r4
    1ac0:	11000017 	ldw	r4,0(r2)
    1ac4:	0001adc1 	jmpi	1adc <_malloc_r>

00001ac8 <free>:
    1ac8:	00800074 	movhi	r2,1
    1acc:	108c2c04 	addi	r2,r2,12464
    1ad0:	200b883a 	mov	r5,r4
    1ad4:	11000017 	ldw	r4,0(r2)
    1ad8:	000692c1 	jmpi	692c <_free_r>

00001adc <_malloc_r>:
    1adc:	defff504 	addi	sp,sp,-44
    1ae0:	dc800315 	stw	r18,12(sp)
    1ae4:	dfc00a15 	stw	ra,40(sp)
    1ae8:	df000915 	stw	fp,36(sp)
    1aec:	ddc00815 	stw	r23,32(sp)
    1af0:	dd800715 	stw	r22,28(sp)
    1af4:	dd400615 	stw	r21,24(sp)
    1af8:	dd000515 	stw	r20,20(sp)
    1afc:	dcc00415 	stw	r19,16(sp)
    1b00:	dc400215 	stw	r17,8(sp)
    1b04:	dc000115 	stw	r16,4(sp)
    1b08:	288002c4 	addi	r2,r5,11
    1b0c:	00c00584 	movi	r3,22
    1b10:	2025883a 	mov	r18,r4
    1b14:	18807f2e 	bgeu	r3,r2,1d14 <_malloc_r+0x238>
    1b18:	047ffe04 	movi	r17,-8
    1b1c:	1462703a 	and	r17,r2,r17
    1b20:	8800a316 	blt	r17,zero,1db0 <_malloc_r+0x2d4>
    1b24:	8940a236 	bltu	r17,r5,1db0 <_malloc_r+0x2d4>
    1b28:	000e9780 	call	e978 <__malloc_lock>
    1b2c:	00807dc4 	movi	r2,503
    1b30:	1441e92e 	bgeu	r2,r17,22d8 <_malloc_r+0x7fc>
    1b34:	8804d27a 	srli	r2,r17,9
    1b38:	1000a126 	beq	r2,zero,1dc0 <_malloc_r+0x2e4>
    1b3c:	00c00104 	movi	r3,4
    1b40:	18811e36 	bltu	r3,r2,1fbc <_malloc_r+0x4e0>
    1b44:	8804d1ba 	srli	r2,r17,6
    1b48:	12000e44 	addi	r8,r2,57
    1b4c:	11c00e04 	addi	r7,r2,56
    1b50:	4209883a 	add	r4,r8,r8
    1b54:	04c00074 	movhi	r19,1
    1b58:	2109883a 	add	r4,r4,r4
    1b5c:	9cc57e04 	addi	r19,r19,5624
    1b60:	2109883a 	add	r4,r4,r4
    1b64:	9909883a 	add	r4,r19,r4
    1b68:	24000117 	ldw	r16,4(r4)
    1b6c:	213ffe04 	addi	r4,r4,-8
    1b70:	24009726 	beq	r4,r16,1dd0 <_malloc_r+0x2f4>
    1b74:	80800117 	ldw	r2,4(r16)
    1b78:	01bfff04 	movi	r6,-4
    1b7c:	014003c4 	movi	r5,15
    1b80:	1184703a 	and	r2,r2,r6
    1b84:	1447c83a 	sub	r3,r2,r17
    1b88:	28c00716 	blt	r5,r3,1ba8 <_malloc_r+0xcc>
    1b8c:	1800920e 	bge	r3,zero,1dd8 <_malloc_r+0x2fc>
    1b90:	84000317 	ldw	r16,12(r16)
    1b94:	24008e26 	beq	r4,r16,1dd0 <_malloc_r+0x2f4>
    1b98:	80800117 	ldw	r2,4(r16)
    1b9c:	1184703a 	and	r2,r2,r6
    1ba0:	1447c83a 	sub	r3,r2,r17
    1ba4:	28fff90e 	bge	r5,r3,1b8c <__alt_data_end+0xff001b8c>
    1ba8:	3809883a 	mov	r4,r7
    1bac:	01800074 	movhi	r6,1
    1bb0:	9c000417 	ldw	r16,16(r19)
    1bb4:	31857e04 	addi	r6,r6,5624
    1bb8:	32000204 	addi	r8,r6,8
    1bbc:	82013426 	beq	r16,r8,2090 <_malloc_r+0x5b4>
    1bc0:	80c00117 	ldw	r3,4(r16)
    1bc4:	00bfff04 	movi	r2,-4
    1bc8:	188e703a 	and	r7,r3,r2
    1bcc:	3c45c83a 	sub	r2,r7,r17
    1bd0:	00c003c4 	movi	r3,15
    1bd4:	18811f16 	blt	r3,r2,2054 <_malloc_r+0x578>
    1bd8:	32000515 	stw	r8,20(r6)
    1bdc:	32000415 	stw	r8,16(r6)
    1be0:	10007f0e 	bge	r2,zero,1de0 <_malloc_r+0x304>
    1be4:	00807fc4 	movi	r2,511
    1be8:	11c0fd36 	bltu	r2,r7,1fe0 <_malloc_r+0x504>
    1bec:	3806d0fa 	srli	r3,r7,3
    1bf0:	01c00044 	movi	r7,1
    1bf4:	30800117 	ldw	r2,4(r6)
    1bf8:	19400044 	addi	r5,r3,1
    1bfc:	294b883a 	add	r5,r5,r5
    1c00:	1807d0ba 	srai	r3,r3,2
    1c04:	294b883a 	add	r5,r5,r5
    1c08:	294b883a 	add	r5,r5,r5
    1c0c:	298b883a 	add	r5,r5,r6
    1c10:	38c6983a 	sll	r3,r7,r3
    1c14:	29c00017 	ldw	r7,0(r5)
    1c18:	2a7ffe04 	addi	r9,r5,-8
    1c1c:	1886b03a 	or	r3,r3,r2
    1c20:	82400315 	stw	r9,12(r16)
    1c24:	81c00215 	stw	r7,8(r16)
    1c28:	30c00115 	stw	r3,4(r6)
    1c2c:	2c000015 	stw	r16,0(r5)
    1c30:	3c000315 	stw	r16,12(r7)
    1c34:	2005d0ba 	srai	r2,r4,2
    1c38:	01400044 	movi	r5,1
    1c3c:	288a983a 	sll	r5,r5,r2
    1c40:	19406f36 	bltu	r3,r5,1e00 <_malloc_r+0x324>
    1c44:	28c4703a 	and	r2,r5,r3
    1c48:	10000a1e 	bne	r2,zero,1c74 <_malloc_r+0x198>
    1c4c:	00bfff04 	movi	r2,-4
    1c50:	294b883a 	add	r5,r5,r5
    1c54:	2088703a 	and	r4,r4,r2
    1c58:	28c4703a 	and	r2,r5,r3
    1c5c:	21000104 	addi	r4,r4,4
    1c60:	1000041e 	bne	r2,zero,1c74 <_malloc_r+0x198>
    1c64:	294b883a 	add	r5,r5,r5
    1c68:	28c4703a 	and	r2,r5,r3
    1c6c:	21000104 	addi	r4,r4,4
    1c70:	103ffc26 	beq	r2,zero,1c64 <__alt_data_end+0xff001c64>
    1c74:	02bfff04 	movi	r10,-4
    1c78:	024003c4 	movi	r9,15
    1c7c:	21800044 	addi	r6,r4,1
    1c80:	318d883a 	add	r6,r6,r6
    1c84:	318d883a 	add	r6,r6,r6
    1c88:	318d883a 	add	r6,r6,r6
    1c8c:	998d883a 	add	r6,r19,r6
    1c90:	333ffe04 	addi	r12,r6,-8
    1c94:	2017883a 	mov	r11,r4
    1c98:	31800104 	addi	r6,r6,4
    1c9c:	34000017 	ldw	r16,0(r6)
    1ca0:	31fffd04 	addi	r7,r6,-12
    1ca4:	81c0041e 	bne	r16,r7,1cb8 <_malloc_r+0x1dc>
    1ca8:	0000fb06 	br	2098 <_malloc_r+0x5bc>
    1cac:	1801030e 	bge	r3,zero,20bc <_malloc_r+0x5e0>
    1cb0:	84000317 	ldw	r16,12(r16)
    1cb4:	81c0f826 	beq	r16,r7,2098 <_malloc_r+0x5bc>
    1cb8:	80800117 	ldw	r2,4(r16)
    1cbc:	1284703a 	and	r2,r2,r10
    1cc0:	1447c83a 	sub	r3,r2,r17
    1cc4:	48fff90e 	bge	r9,r3,1cac <__alt_data_end+0xff001cac>
    1cc8:	80800317 	ldw	r2,12(r16)
    1ccc:	81000217 	ldw	r4,8(r16)
    1cd0:	89400054 	ori	r5,r17,1
    1cd4:	81400115 	stw	r5,4(r16)
    1cd8:	20800315 	stw	r2,12(r4)
    1cdc:	11000215 	stw	r4,8(r2)
    1ce0:	8463883a 	add	r17,r16,r17
    1ce4:	9c400515 	stw	r17,20(r19)
    1ce8:	9c400415 	stw	r17,16(r19)
    1cec:	18800054 	ori	r2,r3,1
    1cf0:	88800115 	stw	r2,4(r17)
    1cf4:	8a000315 	stw	r8,12(r17)
    1cf8:	8a000215 	stw	r8,8(r17)
    1cfc:	88e3883a 	add	r17,r17,r3
    1d00:	88c00015 	stw	r3,0(r17)
    1d04:	9009883a 	mov	r4,r18
    1d08:	000e99c0 	call	e99c <__malloc_unlock>
    1d0c:	80800204 	addi	r2,r16,8
    1d10:	00001b06 	br	1d80 <_malloc_r+0x2a4>
    1d14:	04400404 	movi	r17,16
    1d18:	89402536 	bltu	r17,r5,1db0 <_malloc_r+0x2d4>
    1d1c:	000e9780 	call	e978 <__malloc_lock>
    1d20:	00800184 	movi	r2,6
    1d24:	01000084 	movi	r4,2
    1d28:	04c00074 	movhi	r19,1
    1d2c:	1085883a 	add	r2,r2,r2
    1d30:	9cc57e04 	addi	r19,r19,5624
    1d34:	1085883a 	add	r2,r2,r2
    1d38:	9885883a 	add	r2,r19,r2
    1d3c:	14000117 	ldw	r16,4(r2)
    1d40:	10fffe04 	addi	r3,r2,-8
    1d44:	80c0d926 	beq	r16,r3,20ac <_malloc_r+0x5d0>
    1d48:	80c00117 	ldw	r3,4(r16)
    1d4c:	81000317 	ldw	r4,12(r16)
    1d50:	00bfff04 	movi	r2,-4
    1d54:	1884703a 	and	r2,r3,r2
    1d58:	81400217 	ldw	r5,8(r16)
    1d5c:	8085883a 	add	r2,r16,r2
    1d60:	10c00117 	ldw	r3,4(r2)
    1d64:	29000315 	stw	r4,12(r5)
    1d68:	21400215 	stw	r5,8(r4)
    1d6c:	18c00054 	ori	r3,r3,1
    1d70:	10c00115 	stw	r3,4(r2)
    1d74:	9009883a 	mov	r4,r18
    1d78:	000e99c0 	call	e99c <__malloc_unlock>
    1d7c:	80800204 	addi	r2,r16,8
    1d80:	dfc00a17 	ldw	ra,40(sp)
    1d84:	df000917 	ldw	fp,36(sp)
    1d88:	ddc00817 	ldw	r23,32(sp)
    1d8c:	dd800717 	ldw	r22,28(sp)
    1d90:	dd400617 	ldw	r21,24(sp)
    1d94:	dd000517 	ldw	r20,20(sp)
    1d98:	dcc00417 	ldw	r19,16(sp)
    1d9c:	dc800317 	ldw	r18,12(sp)
    1da0:	dc400217 	ldw	r17,8(sp)
    1da4:	dc000117 	ldw	r16,4(sp)
    1da8:	dec00b04 	addi	sp,sp,44
    1dac:	f800283a 	ret
    1db0:	00800304 	movi	r2,12
    1db4:	90800015 	stw	r2,0(r18)
    1db8:	0005883a 	mov	r2,zero
    1dbc:	003ff006 	br	1d80 <__alt_data_end+0xff001d80>
    1dc0:	01002004 	movi	r4,128
    1dc4:	02001004 	movi	r8,64
    1dc8:	01c00fc4 	movi	r7,63
    1dcc:	003f6106 	br	1b54 <__alt_data_end+0xff001b54>
    1dd0:	4009883a 	mov	r4,r8
    1dd4:	003f7506 	br	1bac <__alt_data_end+0xff001bac>
    1dd8:	81000317 	ldw	r4,12(r16)
    1ddc:	003fde06 	br	1d58 <__alt_data_end+0xff001d58>
    1de0:	81c5883a 	add	r2,r16,r7
    1de4:	11400117 	ldw	r5,4(r2)
    1de8:	9009883a 	mov	r4,r18
    1dec:	29400054 	ori	r5,r5,1
    1df0:	11400115 	stw	r5,4(r2)
    1df4:	000e99c0 	call	e99c <__malloc_unlock>
    1df8:	80800204 	addi	r2,r16,8
    1dfc:	003fe006 	br	1d80 <__alt_data_end+0xff001d80>
    1e00:	9c000217 	ldw	r16,8(r19)
    1e04:	00bfff04 	movi	r2,-4
    1e08:	85800117 	ldw	r22,4(r16)
    1e0c:	b0ac703a 	and	r22,r22,r2
    1e10:	b4400336 	bltu	r22,r17,1e20 <_malloc_r+0x344>
    1e14:	b445c83a 	sub	r2,r22,r17
    1e18:	00c003c4 	movi	r3,15
    1e1c:	18805d16 	blt	r3,r2,1f94 <_malloc_r+0x4b8>
    1e20:	05c00074 	movhi	r23,1
    1e24:	00800074 	movhi	r2,1
    1e28:	10930004 	addi	r2,r2,19456
    1e2c:	bdcc2904 	addi	r23,r23,12452
    1e30:	15400017 	ldw	r21,0(r2)
    1e34:	b8c00017 	ldw	r3,0(r23)
    1e38:	00bfffc4 	movi	r2,-1
    1e3c:	858d883a 	add	r6,r16,r22
    1e40:	8d6b883a 	add	r21,r17,r21
    1e44:	1880ea26 	beq	r3,r2,21f0 <_malloc_r+0x714>
    1e48:	ad4403c4 	addi	r21,r21,4111
    1e4c:	00bc0004 	movi	r2,-4096
    1e50:	a8aa703a 	and	r21,r21,r2
    1e54:	a80b883a 	mov	r5,r21
    1e58:	9009883a 	mov	r4,r18
    1e5c:	d9800015 	stw	r6,0(sp)
    1e60:	00024280 	call	2428 <_sbrk_r>
    1e64:	1029883a 	mov	r20,r2
    1e68:	00bfffc4 	movi	r2,-1
    1e6c:	d9800017 	ldw	r6,0(sp)
    1e70:	a080e826 	beq	r20,r2,2214 <_malloc_r+0x738>
    1e74:	a180a636 	bltu	r20,r6,2110 <_malloc_r+0x634>
    1e78:	07000074 	movhi	fp,1
    1e7c:	e7130e04 	addi	fp,fp,19512
    1e80:	e0800017 	ldw	r2,0(fp)
    1e84:	a887883a 	add	r3,r21,r2
    1e88:	e0c00015 	stw	r3,0(fp)
    1e8c:	3500e626 	beq	r6,r20,2228 <_malloc_r+0x74c>
    1e90:	b9000017 	ldw	r4,0(r23)
    1e94:	00bfffc4 	movi	r2,-1
    1e98:	2080ee26 	beq	r4,r2,2254 <_malloc_r+0x778>
    1e9c:	a185c83a 	sub	r2,r20,r6
    1ea0:	10c5883a 	add	r2,r2,r3
    1ea4:	e0800015 	stw	r2,0(fp)
    1ea8:	a0c001cc 	andi	r3,r20,7
    1eac:	1800bc26 	beq	r3,zero,21a0 <_malloc_r+0x6c4>
    1eb0:	a0e9c83a 	sub	r20,r20,r3
    1eb4:	00840204 	movi	r2,4104
    1eb8:	a5000204 	addi	r20,r20,8
    1ebc:	10c7c83a 	sub	r3,r2,r3
    1ec0:	a545883a 	add	r2,r20,r21
    1ec4:	1083ffcc 	andi	r2,r2,4095
    1ec8:	18abc83a 	sub	r21,r3,r2
    1ecc:	a80b883a 	mov	r5,r21
    1ed0:	9009883a 	mov	r4,r18
    1ed4:	00024280 	call	2428 <_sbrk_r>
    1ed8:	00ffffc4 	movi	r3,-1
    1edc:	10c0e126 	beq	r2,r3,2264 <_malloc_r+0x788>
    1ee0:	1505c83a 	sub	r2,r2,r20
    1ee4:	1545883a 	add	r2,r2,r21
    1ee8:	10800054 	ori	r2,r2,1
    1eec:	e0c00017 	ldw	r3,0(fp)
    1ef0:	9d000215 	stw	r20,8(r19)
    1ef4:	a0800115 	stw	r2,4(r20)
    1ef8:	a8c7883a 	add	r3,r21,r3
    1efc:	e0c00015 	stw	r3,0(fp)
    1f00:	84c00e26 	beq	r16,r19,1f3c <_malloc_r+0x460>
    1f04:	018003c4 	movi	r6,15
    1f08:	3580a72e 	bgeu	r6,r22,21a8 <_malloc_r+0x6cc>
    1f0c:	81400117 	ldw	r5,4(r16)
    1f10:	013ffe04 	movi	r4,-8
    1f14:	b0bffd04 	addi	r2,r22,-12
    1f18:	1104703a 	and	r2,r2,r4
    1f1c:	2900004c 	andi	r4,r5,1
    1f20:	2088b03a 	or	r4,r4,r2
    1f24:	81000115 	stw	r4,4(r16)
    1f28:	01400144 	movi	r5,5
    1f2c:	8089883a 	add	r4,r16,r2
    1f30:	21400115 	stw	r5,4(r4)
    1f34:	21400215 	stw	r5,8(r4)
    1f38:	3080cd36 	bltu	r6,r2,2270 <_malloc_r+0x794>
    1f3c:	00800074 	movhi	r2,1
    1f40:	1092ff04 	addi	r2,r2,19452
    1f44:	11000017 	ldw	r4,0(r2)
    1f48:	20c0012e 	bgeu	r4,r3,1f50 <_malloc_r+0x474>
    1f4c:	10c00015 	stw	r3,0(r2)
    1f50:	00800074 	movhi	r2,1
    1f54:	1092fe04 	addi	r2,r2,19448
    1f58:	11000017 	ldw	r4,0(r2)
    1f5c:	9c000217 	ldw	r16,8(r19)
    1f60:	20c0012e 	bgeu	r4,r3,1f68 <_malloc_r+0x48c>
    1f64:	10c00015 	stw	r3,0(r2)
    1f68:	80c00117 	ldw	r3,4(r16)
    1f6c:	00bfff04 	movi	r2,-4
    1f70:	1886703a 	and	r3,r3,r2
    1f74:	1c45c83a 	sub	r2,r3,r17
    1f78:	1c400236 	bltu	r3,r17,1f84 <_malloc_r+0x4a8>
    1f7c:	00c003c4 	movi	r3,15
    1f80:	18800416 	blt	r3,r2,1f94 <_malloc_r+0x4b8>
    1f84:	9009883a 	mov	r4,r18
    1f88:	000e99c0 	call	e99c <__malloc_unlock>
    1f8c:	0005883a 	mov	r2,zero
    1f90:	003f7b06 	br	1d80 <__alt_data_end+0xff001d80>
    1f94:	88c00054 	ori	r3,r17,1
    1f98:	80c00115 	stw	r3,4(r16)
    1f9c:	8463883a 	add	r17,r16,r17
    1fa0:	10800054 	ori	r2,r2,1
    1fa4:	9c400215 	stw	r17,8(r19)
    1fa8:	88800115 	stw	r2,4(r17)
    1fac:	9009883a 	mov	r4,r18
    1fb0:	000e99c0 	call	e99c <__malloc_unlock>
    1fb4:	80800204 	addi	r2,r16,8
    1fb8:	003f7106 	br	1d80 <__alt_data_end+0xff001d80>
    1fbc:	00c00504 	movi	r3,20
    1fc0:	18804a2e 	bgeu	r3,r2,20ec <_malloc_r+0x610>
    1fc4:	00c01504 	movi	r3,84
    1fc8:	18806e36 	bltu	r3,r2,2184 <_malloc_r+0x6a8>
    1fcc:	8804d33a 	srli	r2,r17,12
    1fd0:	12001bc4 	addi	r8,r2,111
    1fd4:	11c01b84 	addi	r7,r2,110
    1fd8:	4209883a 	add	r4,r8,r8
    1fdc:	003edd06 	br	1b54 <__alt_data_end+0xff001b54>
    1fe0:	3804d27a 	srli	r2,r7,9
    1fe4:	00c00104 	movi	r3,4
    1fe8:	1880442e 	bgeu	r3,r2,20fc <_malloc_r+0x620>
    1fec:	00c00504 	movi	r3,20
    1ff0:	18808136 	bltu	r3,r2,21f8 <_malloc_r+0x71c>
    1ff4:	11401704 	addi	r5,r2,92
    1ff8:	10c016c4 	addi	r3,r2,91
    1ffc:	294b883a 	add	r5,r5,r5
    2000:	294b883a 	add	r5,r5,r5
    2004:	294b883a 	add	r5,r5,r5
    2008:	994b883a 	add	r5,r19,r5
    200c:	28800017 	ldw	r2,0(r5)
    2010:	01800074 	movhi	r6,1
    2014:	297ffe04 	addi	r5,r5,-8
    2018:	31857e04 	addi	r6,r6,5624
    201c:	28806526 	beq	r5,r2,21b4 <_malloc_r+0x6d8>
    2020:	01bfff04 	movi	r6,-4
    2024:	10c00117 	ldw	r3,4(r2)
    2028:	1986703a 	and	r3,r3,r6
    202c:	38c0022e 	bgeu	r7,r3,2038 <_malloc_r+0x55c>
    2030:	10800217 	ldw	r2,8(r2)
    2034:	28bffb1e 	bne	r5,r2,2024 <__alt_data_end+0xff002024>
    2038:	11400317 	ldw	r5,12(r2)
    203c:	98c00117 	ldw	r3,4(r19)
    2040:	81400315 	stw	r5,12(r16)
    2044:	80800215 	stw	r2,8(r16)
    2048:	2c000215 	stw	r16,8(r5)
    204c:	14000315 	stw	r16,12(r2)
    2050:	003ef806 	br	1c34 <__alt_data_end+0xff001c34>
    2054:	88c00054 	ori	r3,r17,1
    2058:	80c00115 	stw	r3,4(r16)
    205c:	8463883a 	add	r17,r16,r17
    2060:	34400515 	stw	r17,20(r6)
    2064:	34400415 	stw	r17,16(r6)
    2068:	10c00054 	ori	r3,r2,1
    206c:	8a000315 	stw	r8,12(r17)
    2070:	8a000215 	stw	r8,8(r17)
    2074:	88c00115 	stw	r3,4(r17)
    2078:	88a3883a 	add	r17,r17,r2
    207c:	88800015 	stw	r2,0(r17)
    2080:	9009883a 	mov	r4,r18
    2084:	000e99c0 	call	e99c <__malloc_unlock>
    2088:	80800204 	addi	r2,r16,8
    208c:	003f3c06 	br	1d80 <__alt_data_end+0xff001d80>
    2090:	30c00117 	ldw	r3,4(r6)
    2094:	003ee706 	br	1c34 <__alt_data_end+0xff001c34>
    2098:	5ac00044 	addi	r11,r11,1
    209c:	588000cc 	andi	r2,r11,3
    20a0:	31800204 	addi	r6,r6,8
    20a4:	103efd1e 	bne	r2,zero,1c9c <__alt_data_end+0xff001c9c>
    20a8:	00002406 	br	213c <_malloc_r+0x660>
    20ac:	14000317 	ldw	r16,12(r2)
    20b0:	143f251e 	bne	r2,r16,1d48 <__alt_data_end+0xff001d48>
    20b4:	21000084 	addi	r4,r4,2
    20b8:	003ebc06 	br	1bac <__alt_data_end+0xff001bac>
    20bc:	8085883a 	add	r2,r16,r2
    20c0:	10c00117 	ldw	r3,4(r2)
    20c4:	81000317 	ldw	r4,12(r16)
    20c8:	81400217 	ldw	r5,8(r16)
    20cc:	18c00054 	ori	r3,r3,1
    20d0:	10c00115 	stw	r3,4(r2)
    20d4:	29000315 	stw	r4,12(r5)
    20d8:	21400215 	stw	r5,8(r4)
    20dc:	9009883a 	mov	r4,r18
    20e0:	000e99c0 	call	e99c <__malloc_unlock>
    20e4:	80800204 	addi	r2,r16,8
    20e8:	003f2506 	br	1d80 <__alt_data_end+0xff001d80>
    20ec:	12001704 	addi	r8,r2,92
    20f0:	11c016c4 	addi	r7,r2,91
    20f4:	4209883a 	add	r4,r8,r8
    20f8:	003e9606 	br	1b54 <__alt_data_end+0xff001b54>
    20fc:	3804d1ba 	srli	r2,r7,6
    2100:	11400e44 	addi	r5,r2,57
    2104:	10c00e04 	addi	r3,r2,56
    2108:	294b883a 	add	r5,r5,r5
    210c:	003fbc06 	br	2000 <__alt_data_end+0xff002000>
    2110:	84ff5926 	beq	r16,r19,1e78 <__alt_data_end+0xff001e78>
    2114:	00800074 	movhi	r2,1
    2118:	10857e04 	addi	r2,r2,5624
    211c:	14000217 	ldw	r16,8(r2)
    2120:	00bfff04 	movi	r2,-4
    2124:	80c00117 	ldw	r3,4(r16)
    2128:	1886703a 	and	r3,r3,r2
    212c:	003f9106 	br	1f74 <__alt_data_end+0xff001f74>
    2130:	60800217 	ldw	r2,8(r12)
    2134:	213fffc4 	addi	r4,r4,-1
    2138:	1300651e 	bne	r2,r12,22d0 <_malloc_r+0x7f4>
    213c:	208000cc 	andi	r2,r4,3
    2140:	633ffe04 	addi	r12,r12,-8
    2144:	103ffa1e 	bne	r2,zero,2130 <__alt_data_end+0xff002130>
    2148:	98800117 	ldw	r2,4(r19)
    214c:	0146303a 	nor	r3,zero,r5
    2150:	1884703a 	and	r2,r3,r2
    2154:	98800115 	stw	r2,4(r19)
    2158:	294b883a 	add	r5,r5,r5
    215c:	117f2836 	bltu	r2,r5,1e00 <__alt_data_end+0xff001e00>
    2160:	283f2726 	beq	r5,zero,1e00 <__alt_data_end+0xff001e00>
    2164:	2886703a 	and	r3,r5,r2
    2168:	5809883a 	mov	r4,r11
    216c:	183ec31e 	bne	r3,zero,1c7c <__alt_data_end+0xff001c7c>
    2170:	294b883a 	add	r5,r5,r5
    2174:	2886703a 	and	r3,r5,r2
    2178:	21000104 	addi	r4,r4,4
    217c:	183ffc26 	beq	r3,zero,2170 <__alt_data_end+0xff002170>
    2180:	003ebe06 	br	1c7c <__alt_data_end+0xff001c7c>
    2184:	00c05504 	movi	r3,340
    2188:	18801236 	bltu	r3,r2,21d4 <_malloc_r+0x6f8>
    218c:	8804d3fa 	srli	r2,r17,15
    2190:	12001e04 	addi	r8,r2,120
    2194:	11c01dc4 	addi	r7,r2,119
    2198:	4209883a 	add	r4,r8,r8
    219c:	003e6d06 	br	1b54 <__alt_data_end+0xff001b54>
    21a0:	00c40004 	movi	r3,4096
    21a4:	003f4606 	br	1ec0 <__alt_data_end+0xff001ec0>
    21a8:	00800044 	movi	r2,1
    21ac:	a0800115 	stw	r2,4(r20)
    21b0:	003f7406 	br	1f84 <__alt_data_end+0xff001f84>
    21b4:	1805d0ba 	srai	r2,r3,2
    21b8:	01c00044 	movi	r7,1
    21bc:	30c00117 	ldw	r3,4(r6)
    21c0:	388e983a 	sll	r7,r7,r2
    21c4:	2805883a 	mov	r2,r5
    21c8:	38c6b03a 	or	r3,r7,r3
    21cc:	30c00115 	stw	r3,4(r6)
    21d0:	003f9b06 	br	2040 <__alt_data_end+0xff002040>
    21d4:	00c15504 	movi	r3,1364
    21d8:	18801a36 	bltu	r3,r2,2244 <_malloc_r+0x768>
    21dc:	8804d4ba 	srli	r2,r17,18
    21e0:	12001f44 	addi	r8,r2,125
    21e4:	11c01f04 	addi	r7,r2,124
    21e8:	4209883a 	add	r4,r8,r8
    21ec:	003e5906 	br	1b54 <__alt_data_end+0xff001b54>
    21f0:	ad400404 	addi	r21,r21,16
    21f4:	003f1706 	br	1e54 <__alt_data_end+0xff001e54>
    21f8:	00c01504 	movi	r3,84
    21fc:	18802336 	bltu	r3,r2,228c <_malloc_r+0x7b0>
    2200:	3804d33a 	srli	r2,r7,12
    2204:	11401bc4 	addi	r5,r2,111
    2208:	10c01b84 	addi	r3,r2,110
    220c:	294b883a 	add	r5,r5,r5
    2210:	003f7b06 	br	2000 <__alt_data_end+0xff002000>
    2214:	9c000217 	ldw	r16,8(r19)
    2218:	00bfff04 	movi	r2,-4
    221c:	80c00117 	ldw	r3,4(r16)
    2220:	1886703a 	and	r3,r3,r2
    2224:	003f5306 	br	1f74 <__alt_data_end+0xff001f74>
    2228:	3083ffcc 	andi	r2,r6,4095
    222c:	103f181e 	bne	r2,zero,1e90 <__alt_data_end+0xff001e90>
    2230:	99000217 	ldw	r4,8(r19)
    2234:	b545883a 	add	r2,r22,r21
    2238:	10800054 	ori	r2,r2,1
    223c:	20800115 	stw	r2,4(r4)
    2240:	003f3e06 	br	1f3c <__alt_data_end+0xff001f3c>
    2244:	01003f84 	movi	r4,254
    2248:	02001fc4 	movi	r8,127
    224c:	01c01f84 	movi	r7,126
    2250:	003e4006 	br	1b54 <__alt_data_end+0xff001b54>
    2254:	00800074 	movhi	r2,1
    2258:	108c2904 	addi	r2,r2,12452
    225c:	15000015 	stw	r20,0(r2)
    2260:	003f1106 	br	1ea8 <__alt_data_end+0xff001ea8>
    2264:	00800044 	movi	r2,1
    2268:	002b883a 	mov	r21,zero
    226c:	003f1f06 	br	1eec <__alt_data_end+0xff001eec>
    2270:	81400204 	addi	r5,r16,8
    2274:	9009883a 	mov	r4,r18
    2278:	000692c0 	call	692c <_free_r>
    227c:	00800074 	movhi	r2,1
    2280:	10930e04 	addi	r2,r2,19512
    2284:	10c00017 	ldw	r3,0(r2)
    2288:	003f2c06 	br	1f3c <__alt_data_end+0xff001f3c>
    228c:	00c05504 	movi	r3,340
    2290:	18800536 	bltu	r3,r2,22a8 <_malloc_r+0x7cc>
    2294:	3804d3fa 	srli	r2,r7,15
    2298:	11401e04 	addi	r5,r2,120
    229c:	10c01dc4 	addi	r3,r2,119
    22a0:	294b883a 	add	r5,r5,r5
    22a4:	003f5606 	br	2000 <__alt_data_end+0xff002000>
    22a8:	00c15504 	movi	r3,1364
    22ac:	18800536 	bltu	r3,r2,22c4 <_malloc_r+0x7e8>
    22b0:	3804d4ba 	srli	r2,r7,18
    22b4:	11401f44 	addi	r5,r2,125
    22b8:	10c01f04 	addi	r3,r2,124
    22bc:	294b883a 	add	r5,r5,r5
    22c0:	003f4f06 	br	2000 <__alt_data_end+0xff002000>
    22c4:	01403f84 	movi	r5,254
    22c8:	00c01f84 	movi	r3,126
    22cc:	003f4c06 	br	2000 <__alt_data_end+0xff002000>
    22d0:	98800117 	ldw	r2,4(r19)
    22d4:	003fa006 	br	2158 <__alt_data_end+0xff002158>
    22d8:	8808d0fa 	srli	r4,r17,3
    22dc:	20800044 	addi	r2,r4,1
    22e0:	1085883a 	add	r2,r2,r2
    22e4:	003e9006 	br	1d28 <__alt_data_end+0xff001d28>

000022e8 <_printf_r>:
    22e8:	defffd04 	addi	sp,sp,-12
    22ec:	2805883a 	mov	r2,r5
    22f0:	dfc00015 	stw	ra,0(sp)
    22f4:	d9800115 	stw	r6,4(sp)
    22f8:	d9c00215 	stw	r7,8(sp)
    22fc:	21400217 	ldw	r5,8(r4)
    2300:	d9c00104 	addi	r7,sp,4
    2304:	100d883a 	mov	r6,r2
    2308:	00025140 	call	2514 <___vfprintf_internal_r>
    230c:	dfc00017 	ldw	ra,0(sp)
    2310:	dec00304 	addi	sp,sp,12
    2314:	f800283a 	ret

00002318 <printf>:
    2318:	defffc04 	addi	sp,sp,-16
    231c:	dfc00015 	stw	ra,0(sp)
    2320:	d9400115 	stw	r5,4(sp)
    2324:	d9800215 	stw	r6,8(sp)
    2328:	d9c00315 	stw	r7,12(sp)
    232c:	00800074 	movhi	r2,1
    2330:	108c2c04 	addi	r2,r2,12464
    2334:	10800017 	ldw	r2,0(r2)
    2338:	200b883a 	mov	r5,r4
    233c:	d9800104 	addi	r6,sp,4
    2340:	11000217 	ldw	r4,8(r2)
    2344:	000470c0 	call	470c <__vfprintf_internal>
    2348:	dfc00017 	ldw	ra,0(sp)
    234c:	dec00404 	addi	sp,sp,16
    2350:	f800283a 	ret

00002354 <_puts_r>:
    2354:	defff604 	addi	sp,sp,-40
    2358:	dc000715 	stw	r16,28(sp)
    235c:	2021883a 	mov	r16,r4
    2360:	2809883a 	mov	r4,r5
    2364:	dc400815 	stw	r17,32(sp)
    2368:	dfc00915 	stw	ra,36(sp)
    236c:	2823883a 	mov	r17,r5
    2370:	000247c0 	call	247c <strlen>
    2374:	10c00044 	addi	r3,r2,1
    2378:	d8800115 	stw	r2,4(sp)
    237c:	00800074 	movhi	r2,1
    2380:	1084c004 	addi	r2,r2,4864
    2384:	d8800215 	stw	r2,8(sp)
    2388:	00800044 	movi	r2,1
    238c:	d8800315 	stw	r2,12(sp)
    2390:	00800084 	movi	r2,2
    2394:	dc400015 	stw	r17,0(sp)
    2398:	d8c00615 	stw	r3,24(sp)
    239c:	dec00415 	stw	sp,16(sp)
    23a0:	d8800515 	stw	r2,20(sp)
    23a4:	80000226 	beq	r16,zero,23b0 <_puts_r+0x5c>
    23a8:	80800e17 	ldw	r2,56(r16)
    23ac:	10001426 	beq	r2,zero,2400 <_puts_r+0xac>
    23b0:	81400217 	ldw	r5,8(r16)
    23b4:	2880030b 	ldhu	r2,12(r5)
    23b8:	10c8000c 	andi	r3,r2,8192
    23bc:	1800061e 	bne	r3,zero,23d8 <_puts_r+0x84>
    23c0:	29001917 	ldw	r4,100(r5)
    23c4:	00f7ffc4 	movi	r3,-8193
    23c8:	10880014 	ori	r2,r2,8192
    23cc:	20c6703a 	and	r3,r4,r3
    23d0:	2880030d 	sth	r2,12(r5)
    23d4:	28c01915 	stw	r3,100(r5)
    23d8:	d9800404 	addi	r6,sp,16
    23dc:	8009883a 	mov	r4,r16
    23e0:	0006c3c0 	call	6c3c <__sfvwrite_r>
    23e4:	1000091e 	bne	r2,zero,240c <_puts_r+0xb8>
    23e8:	00800284 	movi	r2,10
    23ec:	dfc00917 	ldw	ra,36(sp)
    23f0:	dc400817 	ldw	r17,32(sp)
    23f4:	dc000717 	ldw	r16,28(sp)
    23f8:	dec00a04 	addi	sp,sp,40
    23fc:	f800283a 	ret
    2400:	8009883a 	mov	r4,r16
    2404:	00067b80 	call	67b8 <__sinit>
    2408:	003fe906 	br	23b0 <__alt_data_end+0xff0023b0>
    240c:	00bfffc4 	movi	r2,-1
    2410:	003ff606 	br	23ec <__alt_data_end+0xff0023ec>

00002414 <puts>:
    2414:	00800074 	movhi	r2,1
    2418:	108c2c04 	addi	r2,r2,12464
    241c:	200b883a 	mov	r5,r4
    2420:	11000017 	ldw	r4,0(r2)
    2424:	00023541 	jmpi	2354 <_puts_r>

00002428 <_sbrk_r>:
    2428:	defffd04 	addi	sp,sp,-12
    242c:	dc000015 	stw	r16,0(sp)
    2430:	04000074 	movhi	r16,1
    2434:	dc400115 	stw	r17,4(sp)
    2438:	84130104 	addi	r16,r16,19460
    243c:	2023883a 	mov	r17,r4
    2440:	2809883a 	mov	r4,r5
    2444:	dfc00215 	stw	ra,8(sp)
    2448:	80000015 	stw	zero,0(r16)
    244c:	000eb5c0 	call	eb5c <sbrk>
    2450:	00ffffc4 	movi	r3,-1
    2454:	10c00526 	beq	r2,r3,246c <_sbrk_r+0x44>
    2458:	dfc00217 	ldw	ra,8(sp)
    245c:	dc400117 	ldw	r17,4(sp)
    2460:	dc000017 	ldw	r16,0(sp)
    2464:	dec00304 	addi	sp,sp,12
    2468:	f800283a 	ret
    246c:	80c00017 	ldw	r3,0(r16)
    2470:	183ff926 	beq	r3,zero,2458 <__alt_data_end+0xff002458>
    2474:	88c00015 	stw	r3,0(r17)
    2478:	003ff706 	br	2458 <__alt_data_end+0xff002458>

0000247c <strlen>:
    247c:	208000cc 	andi	r2,r4,3
    2480:	10002026 	beq	r2,zero,2504 <strlen+0x88>
    2484:	20800007 	ldb	r2,0(r4)
    2488:	10002026 	beq	r2,zero,250c <strlen+0x90>
    248c:	2005883a 	mov	r2,r4
    2490:	00000206 	br	249c <strlen+0x20>
    2494:	10c00007 	ldb	r3,0(r2)
    2498:	18001826 	beq	r3,zero,24fc <strlen+0x80>
    249c:	10800044 	addi	r2,r2,1
    24a0:	10c000cc 	andi	r3,r2,3
    24a4:	183ffb1e 	bne	r3,zero,2494 <__alt_data_end+0xff002494>
    24a8:	10c00017 	ldw	r3,0(r2)
    24ac:	01ffbff4 	movhi	r7,65279
    24b0:	39ffbfc4 	addi	r7,r7,-257
    24b4:	00ca303a 	nor	r5,zero,r3
    24b8:	01a02074 	movhi	r6,32897
    24bc:	19c7883a 	add	r3,r3,r7
    24c0:	31a02004 	addi	r6,r6,-32640
    24c4:	1946703a 	and	r3,r3,r5
    24c8:	1986703a 	and	r3,r3,r6
    24cc:	1800091e 	bne	r3,zero,24f4 <strlen+0x78>
    24d0:	10800104 	addi	r2,r2,4
    24d4:	10c00017 	ldw	r3,0(r2)
    24d8:	19cb883a 	add	r5,r3,r7
    24dc:	00c6303a 	nor	r3,zero,r3
    24e0:	28c6703a 	and	r3,r5,r3
    24e4:	1986703a 	and	r3,r3,r6
    24e8:	183ff926 	beq	r3,zero,24d0 <__alt_data_end+0xff0024d0>
    24ec:	00000106 	br	24f4 <strlen+0x78>
    24f0:	10800044 	addi	r2,r2,1
    24f4:	10c00007 	ldb	r3,0(r2)
    24f8:	183ffd1e 	bne	r3,zero,24f0 <__alt_data_end+0xff0024f0>
    24fc:	1105c83a 	sub	r2,r2,r4
    2500:	f800283a 	ret
    2504:	2005883a 	mov	r2,r4
    2508:	003fe706 	br	24a8 <__alt_data_end+0xff0024a8>
    250c:	0005883a 	mov	r2,zero
    2510:	f800283a 	ret

00002514 <___vfprintf_internal_r>:
    2514:	deffb804 	addi	sp,sp,-288
    2518:	dfc04715 	stw	ra,284(sp)
    251c:	ddc04515 	stw	r23,276(sp)
    2520:	dd404315 	stw	r21,268(sp)
    2524:	d9002c15 	stw	r4,176(sp)
    2528:	282f883a 	mov	r23,r5
    252c:	302b883a 	mov	r21,r6
    2530:	d9c02d15 	stw	r7,180(sp)
    2534:	df004615 	stw	fp,280(sp)
    2538:	dd804415 	stw	r22,272(sp)
    253c:	dd004215 	stw	r20,264(sp)
    2540:	dcc04115 	stw	r19,260(sp)
    2544:	dc804015 	stw	r18,256(sp)
    2548:	dc403f15 	stw	r17,252(sp)
    254c:	dc003e15 	stw	r16,248(sp)
    2550:	000732c0 	call	732c <_localeconv_r>
    2554:	10800017 	ldw	r2,0(r2)
    2558:	1009883a 	mov	r4,r2
    255c:	d8803415 	stw	r2,208(sp)
    2560:	000247c0 	call	247c <strlen>
    2564:	d8803715 	stw	r2,220(sp)
    2568:	d8802c17 	ldw	r2,176(sp)
    256c:	10000226 	beq	r2,zero,2578 <___vfprintf_internal_r+0x64>
    2570:	10800e17 	ldw	r2,56(r2)
    2574:	1000f926 	beq	r2,zero,295c <___vfprintf_internal_r+0x448>
    2578:	b880030b 	ldhu	r2,12(r23)
    257c:	10c8000c 	andi	r3,r2,8192
    2580:	1800061e 	bne	r3,zero,259c <___vfprintf_internal_r+0x88>
    2584:	b9001917 	ldw	r4,100(r23)
    2588:	00f7ffc4 	movi	r3,-8193
    258c:	10880014 	ori	r2,r2,8192
    2590:	20c6703a 	and	r3,r4,r3
    2594:	b880030d 	sth	r2,12(r23)
    2598:	b8c01915 	stw	r3,100(r23)
    259c:	10c0020c 	andi	r3,r2,8
    25a0:	1800c126 	beq	r3,zero,28a8 <___vfprintf_internal_r+0x394>
    25a4:	b8c00417 	ldw	r3,16(r23)
    25a8:	1800bf26 	beq	r3,zero,28a8 <___vfprintf_internal_r+0x394>
    25ac:	1080068c 	andi	r2,r2,26
    25b0:	00c00284 	movi	r3,10
    25b4:	10c0c426 	beq	r2,r3,28c8 <___vfprintf_internal_r+0x3b4>
    25b8:	d8c00404 	addi	r3,sp,16
    25bc:	05000074 	movhi	r20,1
    25c0:	d9001e04 	addi	r4,sp,120
    25c4:	a504d184 	addi	r20,r20,4934
    25c8:	d8c01e15 	stw	r3,120(sp)
    25cc:	d8002015 	stw	zero,128(sp)
    25d0:	d8001f15 	stw	zero,124(sp)
    25d4:	d8003315 	stw	zero,204(sp)
    25d8:	d8003615 	stw	zero,216(sp)
    25dc:	d8003815 	stw	zero,224(sp)
    25e0:	1811883a 	mov	r8,r3
    25e4:	d8003915 	stw	zero,228(sp)
    25e8:	d8003a15 	stw	zero,232(sp)
    25ec:	d8002f15 	stw	zero,188(sp)
    25f0:	d9002815 	stw	r4,160(sp)
    25f4:	a8800007 	ldb	r2,0(r21)
    25f8:	10027b26 	beq	r2,zero,2fe8 <___vfprintf_internal_r+0xad4>
    25fc:	00c00944 	movi	r3,37
    2600:	a821883a 	mov	r16,r21
    2604:	10c0021e 	bne	r2,r3,2610 <___vfprintf_internal_r+0xfc>
    2608:	00001406 	br	265c <___vfprintf_internal_r+0x148>
    260c:	10c00326 	beq	r2,r3,261c <___vfprintf_internal_r+0x108>
    2610:	84000044 	addi	r16,r16,1
    2614:	80800007 	ldb	r2,0(r16)
    2618:	103ffc1e 	bne	r2,zero,260c <__alt_data_end+0xff00260c>
    261c:	8563c83a 	sub	r17,r16,r21
    2620:	88000e26 	beq	r17,zero,265c <___vfprintf_internal_r+0x148>
    2624:	d8c02017 	ldw	r3,128(sp)
    2628:	d8801f17 	ldw	r2,124(sp)
    262c:	45400015 	stw	r21,0(r8)
    2630:	1c47883a 	add	r3,r3,r17
    2634:	10800044 	addi	r2,r2,1
    2638:	d8c02015 	stw	r3,128(sp)
    263c:	44400115 	stw	r17,4(r8)
    2640:	d8801f15 	stw	r2,124(sp)
    2644:	00c001c4 	movi	r3,7
    2648:	1880a716 	blt	r3,r2,28e8 <___vfprintf_internal_r+0x3d4>
    264c:	42000204 	addi	r8,r8,8
    2650:	d9402f17 	ldw	r5,188(sp)
    2654:	2c4b883a 	add	r5,r5,r17
    2658:	d9402f15 	stw	r5,188(sp)
    265c:	80800007 	ldb	r2,0(r16)
    2660:	1000a826 	beq	r2,zero,2904 <___vfprintf_internal_r+0x3f0>
    2664:	84400047 	ldb	r17,1(r16)
    2668:	00bfffc4 	movi	r2,-1
    266c:	85400044 	addi	r21,r16,1
    2670:	d8002785 	stb	zero,158(sp)
    2674:	0007883a 	mov	r3,zero
    2678:	000f883a 	mov	r7,zero
    267c:	d8802915 	stw	r2,164(sp)
    2680:	d8003115 	stw	zero,196(sp)
    2684:	0025883a 	mov	r18,zero
    2688:	01401604 	movi	r5,88
    268c:	01800244 	movi	r6,9
    2690:	02800a84 	movi	r10,42
    2694:	02401b04 	movi	r9,108
    2698:	ad400044 	addi	r21,r21,1
    269c:	88bff804 	addi	r2,r17,-32
    26a0:	28830436 	bltu	r5,r2,32b4 <___vfprintf_internal_r+0xda0>
    26a4:	100490ba 	slli	r2,r2,2
    26a8:	01000034 	movhi	r4,0
    26ac:	2109af04 	addi	r4,r4,9916
    26b0:	1105883a 	add	r2,r2,r4
    26b4:	10800017 	ldw	r2,0(r2)
    26b8:	1000683a 	jmp	r2
    26bc:	000031d4 	movui	zero,199
    26c0:	000032b4 	movhi	zero,202
    26c4:	000032b4 	movhi	zero,202
    26c8:	000031f4 	movhi	zero,199
    26cc:	000032b4 	movhi	zero,202
    26d0:	000032b4 	movhi	zero,202
    26d4:	000032b4 	movhi	zero,202
    26d8:	000032b4 	movhi	zero,202
    26dc:	000032b4 	movhi	zero,202
    26e0:	000032b4 	movhi	zero,202
    26e4:	00002968 	cmpgeui	zero,zero,165
    26e8:	00003110 	cmplti	zero,zero,196
    26ec:	000032b4 	movhi	zero,202
    26f0:	00002830 	cmpltui	zero,zero,160
    26f4:	00002990 	cmplti	zero,zero,166
    26f8:	000032b4 	movhi	zero,202
    26fc:	000029d0 	cmplti	zero,zero,167
    2700:	000029dc 	xori	zero,zero,167
    2704:	000029dc 	xori	zero,zero,167
    2708:	000029dc 	xori	zero,zero,167
    270c:	000029dc 	xori	zero,zero,167
    2710:	000029dc 	xori	zero,zero,167
    2714:	000029dc 	xori	zero,zero,167
    2718:	000029dc 	xori	zero,zero,167
    271c:	000029dc 	xori	zero,zero,167
    2720:	000029dc 	xori	zero,zero,167
    2724:	000032b4 	movhi	zero,202
    2728:	000032b4 	movhi	zero,202
    272c:	000032b4 	movhi	zero,202
    2730:	000032b4 	movhi	zero,202
    2734:	000032b4 	movhi	zero,202
    2738:	000032b4 	movhi	zero,202
    273c:	000032b4 	movhi	zero,202
    2740:	000032b4 	movhi	zero,202
    2744:	000032b4 	movhi	zero,202
    2748:	000032b4 	movhi	zero,202
    274c:	00002a10 	cmplti	zero,zero,168
    2750:	00002acc 	andi	zero,zero,171
    2754:	000032b4 	movhi	zero,202
    2758:	00002acc 	andi	zero,zero,171
    275c:	000032b4 	movhi	zero,202
    2760:	000032b4 	movhi	zero,202
    2764:	000032b4 	movhi	zero,202
    2768:	000032b4 	movhi	zero,202
    276c:	00002b6c 	andhi	zero,zero,173
    2770:	000032b4 	movhi	zero,202
    2774:	000032b4 	movhi	zero,202
    2778:	00002b78 	rdprs	zero,zero,173
    277c:	000032b4 	movhi	zero,202
    2780:	000032b4 	movhi	zero,202
    2784:	000032b4 	movhi	zero,202
    2788:	000032b4 	movhi	zero,202
    278c:	000032b4 	movhi	zero,202
    2790:	00002ff0 	cmpltui	zero,zero,191
    2794:	000032b4 	movhi	zero,202
    2798:	000032b4 	movhi	zero,202
    279c:	00003050 	cmplti	zero,zero,193
    27a0:	000032b4 	movhi	zero,202
    27a4:	000032b4 	movhi	zero,202
    27a8:	000032b4 	movhi	zero,202
    27ac:	000032b4 	movhi	zero,202
    27b0:	000032b4 	movhi	zero,202
    27b4:	000032b4 	movhi	zero,202
    27b8:	000032b4 	movhi	zero,202
    27bc:	000032b4 	movhi	zero,202
    27c0:	000032b4 	movhi	zero,202
    27c4:	000032b4 	movhi	zero,202
    27c8:	00003260 	cmpeqi	zero,zero,201
    27cc:	00003200 	call	320 <init_camera+0x90>
    27d0:	00002acc 	andi	zero,zero,171
    27d4:	00002acc 	andi	zero,zero,171
    27d8:	00002acc 	andi	zero,zero,171
    27dc:	00003210 	cmplti	zero,zero,200
    27e0:	00003200 	call	320 <init_camera+0x90>
    27e4:	000032b4 	movhi	zero,202
    27e8:	000032b4 	movhi	zero,202
    27ec:	0000321c 	xori	zero,zero,200
    27f0:	000032b4 	movhi	zero,202
    27f4:	0000322c 	andhi	zero,zero,200
    27f8:	00003100 	call	310 <init_camera+0x80>
    27fc:	0000283c 	xorhi	zero,zero,160
    2800:	00003120 	cmpeqi	zero,zero,196
    2804:	000032b4 	movhi	zero,202
    2808:	0000312c 	andhi	zero,zero,196
    280c:	000032b4 	movhi	zero,202
    2810:	00003188 	cmpgei	zero,zero,198
    2814:	000032b4 	movhi	zero,202
    2818:	000032b4 	movhi	zero,202
    281c:	00003198 	cmpnei	zero,zero,198
    2820:	d9003117 	ldw	r4,196(sp)
    2824:	d8802d15 	stw	r2,180(sp)
    2828:	0109c83a 	sub	r4,zero,r4
    282c:	d9003115 	stw	r4,196(sp)
    2830:	94800114 	ori	r18,r18,4
    2834:	ac400007 	ldb	r17,0(r21)
    2838:	003f9706 	br	2698 <__alt_data_end+0xff002698>
    283c:	00800c04 	movi	r2,48
    2840:	d9002d17 	ldw	r4,180(sp)
    2844:	d9402917 	ldw	r5,164(sp)
    2848:	d8802705 	stb	r2,156(sp)
    284c:	00801e04 	movi	r2,120
    2850:	d8802745 	stb	r2,157(sp)
    2854:	d8002785 	stb	zero,158(sp)
    2858:	20c00104 	addi	r3,r4,4
    285c:	24c00017 	ldw	r19,0(r4)
    2860:	002d883a 	mov	r22,zero
    2864:	90800094 	ori	r2,r18,2
    2868:	28029a16 	blt	r5,zero,32d4 <___vfprintf_internal_r+0xdc0>
    286c:	00bfdfc4 	movi	r2,-129
    2870:	90a4703a 	and	r18,r18,r2
    2874:	d8c02d15 	stw	r3,180(sp)
    2878:	94800094 	ori	r18,r18,2
    287c:	9802871e 	bne	r19,zero,329c <___vfprintf_internal_r+0xd88>
    2880:	00800074 	movhi	r2,1
    2884:	1084ca04 	addi	r2,r2,4904
    2888:	d8803915 	stw	r2,228(sp)
    288c:	04401e04 	movi	r17,120
    2890:	d8802917 	ldw	r2,164(sp)
    2894:	0039883a 	mov	fp,zero
    2898:	1001e926 	beq	r2,zero,3040 <___vfprintf_internal_r+0xb2c>
    289c:	0027883a 	mov	r19,zero
    28a0:	002d883a 	mov	r22,zero
    28a4:	00020506 	br	30bc <___vfprintf_internal_r+0xba8>
    28a8:	d9002c17 	ldw	r4,176(sp)
    28ac:	b80b883a 	mov	r5,r23
    28b0:	00047e40 	call	47e4 <__swsetup_r>
    28b4:	1005ac1e 	bne	r2,zero,3f68 <___vfprintf_internal_r+0x1a54>
    28b8:	b880030b 	ldhu	r2,12(r23)
    28bc:	00c00284 	movi	r3,10
    28c0:	1080068c 	andi	r2,r2,26
    28c4:	10ff3c1e 	bne	r2,r3,25b8 <__alt_data_end+0xff0025b8>
    28c8:	b880038f 	ldh	r2,14(r23)
    28cc:	103f3a16 	blt	r2,zero,25b8 <__alt_data_end+0xff0025b8>
    28d0:	d9c02d17 	ldw	r7,180(sp)
    28d4:	d9002c17 	ldw	r4,176(sp)
    28d8:	a80d883a 	mov	r6,r21
    28dc:	b80b883a 	mov	r5,r23
    28e0:	00047280 	call	4728 <__sbprintf>
    28e4:	00001106 	br	292c <___vfprintf_internal_r+0x418>
    28e8:	d9002c17 	ldw	r4,176(sp)
    28ec:	d9801e04 	addi	r6,sp,120
    28f0:	b80b883a 	mov	r5,r23
    28f4:	00092b00 	call	92b0 <__sprint_r>
    28f8:	1000081e 	bne	r2,zero,291c <___vfprintf_internal_r+0x408>
    28fc:	da000404 	addi	r8,sp,16
    2900:	003f5306 	br	2650 <__alt_data_end+0xff002650>
    2904:	d8802017 	ldw	r2,128(sp)
    2908:	10000426 	beq	r2,zero,291c <___vfprintf_internal_r+0x408>
    290c:	d9002c17 	ldw	r4,176(sp)
    2910:	d9801e04 	addi	r6,sp,120
    2914:	b80b883a 	mov	r5,r23
    2918:	00092b00 	call	92b0 <__sprint_r>
    291c:	b880030b 	ldhu	r2,12(r23)
    2920:	1080100c 	andi	r2,r2,64
    2924:	1005901e 	bne	r2,zero,3f68 <___vfprintf_internal_r+0x1a54>
    2928:	d8802f17 	ldw	r2,188(sp)
    292c:	dfc04717 	ldw	ra,284(sp)
    2930:	df004617 	ldw	fp,280(sp)
    2934:	ddc04517 	ldw	r23,276(sp)
    2938:	dd804417 	ldw	r22,272(sp)
    293c:	dd404317 	ldw	r21,268(sp)
    2940:	dd004217 	ldw	r20,264(sp)
    2944:	dcc04117 	ldw	r19,260(sp)
    2948:	dc804017 	ldw	r18,256(sp)
    294c:	dc403f17 	ldw	r17,252(sp)
    2950:	dc003e17 	ldw	r16,248(sp)
    2954:	dec04804 	addi	sp,sp,288
    2958:	f800283a 	ret
    295c:	d9002c17 	ldw	r4,176(sp)
    2960:	00067b80 	call	67b8 <__sinit>
    2964:	003f0406 	br	2578 <__alt_data_end+0xff002578>
    2968:	d8802d17 	ldw	r2,180(sp)
    296c:	d9002d17 	ldw	r4,180(sp)
    2970:	10800017 	ldw	r2,0(r2)
    2974:	d8803115 	stw	r2,196(sp)
    2978:	20800104 	addi	r2,r4,4
    297c:	d9003117 	ldw	r4,196(sp)
    2980:	203fa716 	blt	r4,zero,2820 <__alt_data_end+0xff002820>
    2984:	d8802d15 	stw	r2,180(sp)
    2988:	ac400007 	ldb	r17,0(r21)
    298c:	003f4206 	br	2698 <__alt_data_end+0xff002698>
    2990:	ac400007 	ldb	r17,0(r21)
    2994:	aac00044 	addi	r11,r21,1
    2998:	8a872826 	beq	r17,r10,463c <___vfprintf_internal_r+0x2128>
    299c:	88bff404 	addi	r2,r17,-48
    29a0:	0009883a 	mov	r4,zero
    29a4:	30867d36 	bltu	r6,r2,439c <___vfprintf_internal_r+0x1e88>
    29a8:	5c400007 	ldb	r17,0(r11)
    29ac:	210002a4 	muli	r4,r4,10
    29b0:	5d400044 	addi	r21,r11,1
    29b4:	a817883a 	mov	r11,r21
    29b8:	2089883a 	add	r4,r4,r2
    29bc:	88bff404 	addi	r2,r17,-48
    29c0:	30bff92e 	bgeu	r6,r2,29a8 <__alt_data_end+0xff0029a8>
    29c4:	2005c916 	blt	r4,zero,40ec <___vfprintf_internal_r+0x1bd8>
    29c8:	d9002915 	stw	r4,164(sp)
    29cc:	003f3306 	br	269c <__alt_data_end+0xff00269c>
    29d0:	94802014 	ori	r18,r18,128
    29d4:	ac400007 	ldb	r17,0(r21)
    29d8:	003f2f06 	br	2698 <__alt_data_end+0xff002698>
    29dc:	a809883a 	mov	r4,r21
    29e0:	d8003115 	stw	zero,196(sp)
    29e4:	88bff404 	addi	r2,r17,-48
    29e8:	0017883a 	mov	r11,zero
    29ec:	24400007 	ldb	r17,0(r4)
    29f0:	5ac002a4 	muli	r11,r11,10
    29f4:	ad400044 	addi	r21,r21,1
    29f8:	a809883a 	mov	r4,r21
    29fc:	12d7883a 	add	r11,r2,r11
    2a00:	88bff404 	addi	r2,r17,-48
    2a04:	30bff92e 	bgeu	r6,r2,29ec <__alt_data_end+0xff0029ec>
    2a08:	dac03115 	stw	r11,196(sp)
    2a0c:	003f2306 	br	269c <__alt_data_end+0xff00269c>
    2a10:	18c03fcc 	andi	r3,r3,255
    2a14:	18072b1e 	bne	r3,zero,46c4 <___vfprintf_internal_r+0x21b0>
    2a18:	94800414 	ori	r18,r18,16
    2a1c:	9080080c 	andi	r2,r18,32
    2a20:	10037b26 	beq	r2,zero,3810 <___vfprintf_internal_r+0x12fc>
    2a24:	d9402d17 	ldw	r5,180(sp)
    2a28:	28800117 	ldw	r2,4(r5)
    2a2c:	2cc00017 	ldw	r19,0(r5)
    2a30:	29400204 	addi	r5,r5,8
    2a34:	d9402d15 	stw	r5,180(sp)
    2a38:	102d883a 	mov	r22,r2
    2a3c:	10044b16 	blt	r2,zero,3b6c <___vfprintf_internal_r+0x1658>
    2a40:	d9402917 	ldw	r5,164(sp)
    2a44:	df002783 	ldbu	fp,158(sp)
    2a48:	2803bc16 	blt	r5,zero,393c <___vfprintf_internal_r+0x1428>
    2a4c:	00ffdfc4 	movi	r3,-129
    2a50:	9d84b03a 	or	r2,r19,r22
    2a54:	90e4703a 	and	r18,r18,r3
    2a58:	10017726 	beq	r2,zero,3038 <___vfprintf_internal_r+0xb24>
    2a5c:	b0038326 	beq	r22,zero,386c <___vfprintf_internal_r+0x1358>
    2a60:	dc402a15 	stw	r17,168(sp)
    2a64:	dc001e04 	addi	r16,sp,120
    2a68:	b023883a 	mov	r17,r22
    2a6c:	402d883a 	mov	r22,r8
    2a70:	9809883a 	mov	r4,r19
    2a74:	880b883a 	mov	r5,r17
    2a78:	01800284 	movi	r6,10
    2a7c:	000f883a 	mov	r7,zero
    2a80:	000b6a80 	call	b6a8 <__umoddi3>
    2a84:	10800c04 	addi	r2,r2,48
    2a88:	843fffc4 	addi	r16,r16,-1
    2a8c:	9809883a 	mov	r4,r19
    2a90:	880b883a 	mov	r5,r17
    2a94:	80800005 	stb	r2,0(r16)
    2a98:	01800284 	movi	r6,10
    2a9c:	000f883a 	mov	r7,zero
    2aa0:	000b1300 	call	b130 <__udivdi3>
    2aa4:	1027883a 	mov	r19,r2
    2aa8:	10c4b03a 	or	r2,r2,r3
    2aac:	1823883a 	mov	r17,r3
    2ab0:	103fef1e 	bne	r2,zero,2a70 <__alt_data_end+0xff002a70>
    2ab4:	d8c02817 	ldw	r3,160(sp)
    2ab8:	dc402a17 	ldw	r17,168(sp)
    2abc:	b011883a 	mov	r8,r22
    2ac0:	1c07c83a 	sub	r3,r3,r16
    2ac4:	d8c02e15 	stw	r3,184(sp)
    2ac8:	00005906 	br	2c30 <___vfprintf_internal_r+0x71c>
    2acc:	18c03fcc 	andi	r3,r3,255
    2ad0:	1806fa1e 	bne	r3,zero,46bc <___vfprintf_internal_r+0x21a8>
    2ad4:	9080020c 	andi	r2,r18,8
    2ad8:	10048a26 	beq	r2,zero,3d04 <___vfprintf_internal_r+0x17f0>
    2adc:	d8c02d17 	ldw	r3,180(sp)
    2ae0:	d9002d17 	ldw	r4,180(sp)
    2ae4:	d9402d17 	ldw	r5,180(sp)
    2ae8:	18c00017 	ldw	r3,0(r3)
    2aec:	21000117 	ldw	r4,4(r4)
    2af0:	29400204 	addi	r5,r5,8
    2af4:	d8c03615 	stw	r3,216(sp)
    2af8:	d9003815 	stw	r4,224(sp)
    2afc:	d9402d15 	stw	r5,180(sp)
    2b00:	d9003617 	ldw	r4,216(sp)
    2b04:	d9403817 	ldw	r5,224(sp)
    2b08:	da003d15 	stw	r8,244(sp)
    2b0c:	04000044 	movi	r16,1
    2b10:	0008f280 	call	8f28 <__fpclassifyd>
    2b14:	da003d17 	ldw	r8,244(sp)
    2b18:	14041f1e 	bne	r2,r16,3b98 <___vfprintf_internal_r+0x1684>
    2b1c:	d9003617 	ldw	r4,216(sp)
    2b20:	d9403817 	ldw	r5,224(sp)
    2b24:	000d883a 	mov	r6,zero
    2b28:	000f883a 	mov	r7,zero
    2b2c:	000d08c0 	call	d08c <__ledf2>
    2b30:	da003d17 	ldw	r8,244(sp)
    2b34:	1005be16 	blt	r2,zero,4230 <___vfprintf_internal_r+0x1d1c>
    2b38:	df002783 	ldbu	fp,158(sp)
    2b3c:	008011c4 	movi	r2,71
    2b40:	1445330e 	bge	r2,r17,4010 <___vfprintf_internal_r+0x1afc>
    2b44:	04000074 	movhi	r16,1
    2b48:	8404c204 	addi	r16,r16,4872
    2b4c:	00c000c4 	movi	r3,3
    2b50:	00bfdfc4 	movi	r2,-129
    2b54:	d8c02a15 	stw	r3,168(sp)
    2b58:	90a4703a 	and	r18,r18,r2
    2b5c:	d8c02e15 	stw	r3,184(sp)
    2b60:	d8002915 	stw	zero,164(sp)
    2b64:	d8003215 	stw	zero,200(sp)
    2b68:	00003706 	br	2c48 <___vfprintf_internal_r+0x734>
    2b6c:	94800214 	ori	r18,r18,8
    2b70:	ac400007 	ldb	r17,0(r21)
    2b74:	003ec806 	br	2698 <__alt_data_end+0xff002698>
    2b78:	18c03fcc 	andi	r3,r3,255
    2b7c:	1806db1e 	bne	r3,zero,46ec <___vfprintf_internal_r+0x21d8>
    2b80:	94800414 	ori	r18,r18,16
    2b84:	9080080c 	andi	r2,r18,32
    2b88:	1002d826 	beq	r2,zero,36ec <___vfprintf_internal_r+0x11d8>
    2b8c:	d9402d17 	ldw	r5,180(sp)
    2b90:	d8c02917 	ldw	r3,164(sp)
    2b94:	d8002785 	stb	zero,158(sp)
    2b98:	28800204 	addi	r2,r5,8
    2b9c:	2cc00017 	ldw	r19,0(r5)
    2ba0:	2d800117 	ldw	r22,4(r5)
    2ba4:	18048f16 	blt	r3,zero,3de4 <___vfprintf_internal_r+0x18d0>
    2ba8:	013fdfc4 	movi	r4,-129
    2bac:	9d86b03a 	or	r3,r19,r22
    2bb0:	d8802d15 	stw	r2,180(sp)
    2bb4:	9124703a 	and	r18,r18,r4
    2bb8:	1802d91e 	bne	r3,zero,3720 <___vfprintf_internal_r+0x120c>
    2bbc:	d8c02917 	ldw	r3,164(sp)
    2bc0:	0039883a 	mov	fp,zero
    2bc4:	1805c326 	beq	r3,zero,42d4 <___vfprintf_internal_r+0x1dc0>
    2bc8:	0027883a 	mov	r19,zero
    2bcc:	002d883a 	mov	r22,zero
    2bd0:	dc001e04 	addi	r16,sp,120
    2bd4:	9806d0fa 	srli	r3,r19,3
    2bd8:	b008977a 	slli	r4,r22,29
    2bdc:	b02cd0fa 	srli	r22,r22,3
    2be0:	9cc001cc 	andi	r19,r19,7
    2be4:	98800c04 	addi	r2,r19,48
    2be8:	843fffc4 	addi	r16,r16,-1
    2bec:	20e6b03a 	or	r19,r4,r3
    2bf0:	80800005 	stb	r2,0(r16)
    2bf4:	9d86b03a 	or	r3,r19,r22
    2bf8:	183ff61e 	bne	r3,zero,2bd4 <__alt_data_end+0xff002bd4>
    2bfc:	90c0004c 	andi	r3,r18,1
    2c00:	18013b26 	beq	r3,zero,30f0 <___vfprintf_internal_r+0xbdc>
    2c04:	10803fcc 	andi	r2,r2,255
    2c08:	1080201c 	xori	r2,r2,128
    2c0c:	10bfe004 	addi	r2,r2,-128
    2c10:	00c00c04 	movi	r3,48
    2c14:	10c13626 	beq	r2,r3,30f0 <___vfprintf_internal_r+0xbdc>
    2c18:	80ffffc5 	stb	r3,-1(r16)
    2c1c:	d8c02817 	ldw	r3,160(sp)
    2c20:	80bfffc4 	addi	r2,r16,-1
    2c24:	1021883a 	mov	r16,r2
    2c28:	1887c83a 	sub	r3,r3,r2
    2c2c:	d8c02e15 	stw	r3,184(sp)
    2c30:	d8802e17 	ldw	r2,184(sp)
    2c34:	d9002917 	ldw	r4,164(sp)
    2c38:	1100010e 	bge	r2,r4,2c40 <___vfprintf_internal_r+0x72c>
    2c3c:	2005883a 	mov	r2,r4
    2c40:	d8802a15 	stw	r2,168(sp)
    2c44:	d8003215 	stw	zero,200(sp)
    2c48:	e7003fcc 	andi	fp,fp,255
    2c4c:	e700201c 	xori	fp,fp,128
    2c50:	e73fe004 	addi	fp,fp,-128
    2c54:	e0000326 	beq	fp,zero,2c64 <___vfprintf_internal_r+0x750>
    2c58:	d8c02a17 	ldw	r3,168(sp)
    2c5c:	18c00044 	addi	r3,r3,1
    2c60:	d8c02a15 	stw	r3,168(sp)
    2c64:	90c0008c 	andi	r3,r18,2
    2c68:	d8c02b15 	stw	r3,172(sp)
    2c6c:	18000326 	beq	r3,zero,2c7c <___vfprintf_internal_r+0x768>
    2c70:	d8c02a17 	ldw	r3,168(sp)
    2c74:	18c00084 	addi	r3,r3,2
    2c78:	d8c02a15 	stw	r3,168(sp)
    2c7c:	90c0210c 	andi	r3,r18,132
    2c80:	d8c03015 	stw	r3,192(sp)
    2c84:	1801a31e 	bne	r3,zero,3314 <___vfprintf_internal_r+0xe00>
    2c88:	d9003117 	ldw	r4,196(sp)
    2c8c:	d8c02a17 	ldw	r3,168(sp)
    2c90:	20e7c83a 	sub	r19,r4,r3
    2c94:	04c19f0e 	bge	zero,r19,3314 <___vfprintf_internal_r+0xe00>
    2c98:	02400404 	movi	r9,16
    2c9c:	d8c02017 	ldw	r3,128(sp)
    2ca0:	d8801f17 	ldw	r2,124(sp)
    2ca4:	4cc50d0e 	bge	r9,r19,40dc <___vfprintf_internal_r+0x1bc8>
    2ca8:	01400074 	movhi	r5,1
    2cac:	2944d584 	addi	r5,r5,4950
    2cb0:	dc403b15 	stw	r17,236(sp)
    2cb4:	d9403515 	stw	r5,212(sp)
    2cb8:	9823883a 	mov	r17,r19
    2cbc:	482d883a 	mov	r22,r9
    2cc0:	9027883a 	mov	r19,r18
    2cc4:	070001c4 	movi	fp,7
    2cc8:	8025883a 	mov	r18,r16
    2ccc:	dc002c17 	ldw	r16,176(sp)
    2cd0:	00000306 	br	2ce0 <___vfprintf_internal_r+0x7cc>
    2cd4:	8c7ffc04 	addi	r17,r17,-16
    2cd8:	42000204 	addi	r8,r8,8
    2cdc:	b440130e 	bge	r22,r17,2d2c <___vfprintf_internal_r+0x818>
    2ce0:	01000074 	movhi	r4,1
    2ce4:	18c00404 	addi	r3,r3,16
    2ce8:	10800044 	addi	r2,r2,1
    2cec:	2104d584 	addi	r4,r4,4950
    2cf0:	41000015 	stw	r4,0(r8)
    2cf4:	45800115 	stw	r22,4(r8)
    2cf8:	d8c02015 	stw	r3,128(sp)
    2cfc:	d8801f15 	stw	r2,124(sp)
    2d00:	e0bff40e 	bge	fp,r2,2cd4 <__alt_data_end+0xff002cd4>
    2d04:	d9801e04 	addi	r6,sp,120
    2d08:	b80b883a 	mov	r5,r23
    2d0c:	8009883a 	mov	r4,r16
    2d10:	00092b00 	call	92b0 <__sprint_r>
    2d14:	103f011e 	bne	r2,zero,291c <__alt_data_end+0xff00291c>
    2d18:	8c7ffc04 	addi	r17,r17,-16
    2d1c:	d8c02017 	ldw	r3,128(sp)
    2d20:	d8801f17 	ldw	r2,124(sp)
    2d24:	da000404 	addi	r8,sp,16
    2d28:	b47fed16 	blt	r22,r17,2ce0 <__alt_data_end+0xff002ce0>
    2d2c:	9021883a 	mov	r16,r18
    2d30:	9825883a 	mov	r18,r19
    2d34:	8827883a 	mov	r19,r17
    2d38:	dc403b17 	ldw	r17,236(sp)
    2d3c:	d9403517 	ldw	r5,212(sp)
    2d40:	98c7883a 	add	r3,r19,r3
    2d44:	10800044 	addi	r2,r2,1
    2d48:	41400015 	stw	r5,0(r8)
    2d4c:	44c00115 	stw	r19,4(r8)
    2d50:	d8c02015 	stw	r3,128(sp)
    2d54:	d8801f15 	stw	r2,124(sp)
    2d58:	010001c4 	movi	r4,7
    2d5c:	2082a316 	blt	r4,r2,37ec <___vfprintf_internal_r+0x12d8>
    2d60:	df002787 	ldb	fp,158(sp)
    2d64:	42000204 	addi	r8,r8,8
    2d68:	e0000c26 	beq	fp,zero,2d9c <___vfprintf_internal_r+0x888>
    2d6c:	d8801f17 	ldw	r2,124(sp)
    2d70:	d9002784 	addi	r4,sp,158
    2d74:	18c00044 	addi	r3,r3,1
    2d78:	10800044 	addi	r2,r2,1
    2d7c:	41000015 	stw	r4,0(r8)
    2d80:	01000044 	movi	r4,1
    2d84:	41000115 	stw	r4,4(r8)
    2d88:	d8c02015 	stw	r3,128(sp)
    2d8c:	d8801f15 	stw	r2,124(sp)
    2d90:	010001c4 	movi	r4,7
    2d94:	20823c16 	blt	r4,r2,3688 <___vfprintf_internal_r+0x1174>
    2d98:	42000204 	addi	r8,r8,8
    2d9c:	d8802b17 	ldw	r2,172(sp)
    2da0:	10000c26 	beq	r2,zero,2dd4 <___vfprintf_internal_r+0x8c0>
    2da4:	d8801f17 	ldw	r2,124(sp)
    2da8:	d9002704 	addi	r4,sp,156
    2dac:	18c00084 	addi	r3,r3,2
    2db0:	10800044 	addi	r2,r2,1
    2db4:	41000015 	stw	r4,0(r8)
    2db8:	01000084 	movi	r4,2
    2dbc:	41000115 	stw	r4,4(r8)
    2dc0:	d8c02015 	stw	r3,128(sp)
    2dc4:	d8801f15 	stw	r2,124(sp)
    2dc8:	010001c4 	movi	r4,7
    2dcc:	20823616 	blt	r4,r2,36a8 <___vfprintf_internal_r+0x1194>
    2dd0:	42000204 	addi	r8,r8,8
    2dd4:	d9003017 	ldw	r4,192(sp)
    2dd8:	00802004 	movi	r2,128
    2ddc:	20819926 	beq	r4,r2,3444 <___vfprintf_internal_r+0xf30>
    2de0:	d9402917 	ldw	r5,164(sp)
    2de4:	d8802e17 	ldw	r2,184(sp)
    2de8:	28adc83a 	sub	r22,r5,r2
    2dec:	0580310e 	bge	zero,r22,2eb4 <___vfprintf_internal_r+0x9a0>
    2df0:	07000404 	movi	fp,16
    2df4:	d8801f17 	ldw	r2,124(sp)
    2df8:	e584140e 	bge	fp,r22,3e4c <___vfprintf_internal_r+0x1938>
    2dfc:	01400074 	movhi	r5,1
    2e00:	2944d184 	addi	r5,r5,4934
    2e04:	dc402915 	stw	r17,164(sp)
    2e08:	d9402b15 	stw	r5,172(sp)
    2e0c:	b023883a 	mov	r17,r22
    2e10:	04c001c4 	movi	r19,7
    2e14:	a82d883a 	mov	r22,r21
    2e18:	902b883a 	mov	r21,r18
    2e1c:	8025883a 	mov	r18,r16
    2e20:	dc002c17 	ldw	r16,176(sp)
    2e24:	00000306 	br	2e34 <___vfprintf_internal_r+0x920>
    2e28:	8c7ffc04 	addi	r17,r17,-16
    2e2c:	42000204 	addi	r8,r8,8
    2e30:	e440110e 	bge	fp,r17,2e78 <___vfprintf_internal_r+0x964>
    2e34:	18c00404 	addi	r3,r3,16
    2e38:	10800044 	addi	r2,r2,1
    2e3c:	45000015 	stw	r20,0(r8)
    2e40:	47000115 	stw	fp,4(r8)
    2e44:	d8c02015 	stw	r3,128(sp)
    2e48:	d8801f15 	stw	r2,124(sp)
    2e4c:	98bff60e 	bge	r19,r2,2e28 <__alt_data_end+0xff002e28>
    2e50:	d9801e04 	addi	r6,sp,120
    2e54:	b80b883a 	mov	r5,r23
    2e58:	8009883a 	mov	r4,r16
    2e5c:	00092b00 	call	92b0 <__sprint_r>
    2e60:	103eae1e 	bne	r2,zero,291c <__alt_data_end+0xff00291c>
    2e64:	8c7ffc04 	addi	r17,r17,-16
    2e68:	d8c02017 	ldw	r3,128(sp)
    2e6c:	d8801f17 	ldw	r2,124(sp)
    2e70:	da000404 	addi	r8,sp,16
    2e74:	e47fef16 	blt	fp,r17,2e34 <__alt_data_end+0xff002e34>
    2e78:	9021883a 	mov	r16,r18
    2e7c:	a825883a 	mov	r18,r21
    2e80:	b02b883a 	mov	r21,r22
    2e84:	882d883a 	mov	r22,r17
    2e88:	dc402917 	ldw	r17,164(sp)
    2e8c:	d9002b17 	ldw	r4,172(sp)
    2e90:	1d87883a 	add	r3,r3,r22
    2e94:	10800044 	addi	r2,r2,1
    2e98:	41000015 	stw	r4,0(r8)
    2e9c:	45800115 	stw	r22,4(r8)
    2ea0:	d8c02015 	stw	r3,128(sp)
    2ea4:	d8801f15 	stw	r2,124(sp)
    2ea8:	010001c4 	movi	r4,7
    2eac:	2081ee16 	blt	r4,r2,3668 <___vfprintf_internal_r+0x1154>
    2eb0:	42000204 	addi	r8,r8,8
    2eb4:	9080400c 	andi	r2,r18,256
    2eb8:	1001181e 	bne	r2,zero,331c <___vfprintf_internal_r+0xe08>
    2ebc:	d9402e17 	ldw	r5,184(sp)
    2ec0:	d8801f17 	ldw	r2,124(sp)
    2ec4:	44000015 	stw	r16,0(r8)
    2ec8:	1947883a 	add	r3,r3,r5
    2ecc:	10800044 	addi	r2,r2,1
    2ed0:	41400115 	stw	r5,4(r8)
    2ed4:	d8c02015 	stw	r3,128(sp)
    2ed8:	d8801f15 	stw	r2,124(sp)
    2edc:	010001c4 	movi	r4,7
    2ee0:	2081d316 	blt	r4,r2,3630 <___vfprintf_internal_r+0x111c>
    2ee4:	42000204 	addi	r8,r8,8
    2ee8:	9480010c 	andi	r18,r18,4
    2eec:	90003226 	beq	r18,zero,2fb8 <___vfprintf_internal_r+0xaa4>
    2ef0:	d9403117 	ldw	r5,196(sp)
    2ef4:	d8802a17 	ldw	r2,168(sp)
    2ef8:	28a1c83a 	sub	r16,r5,r2
    2efc:	04002e0e 	bge	zero,r16,2fb8 <___vfprintf_internal_r+0xaa4>
    2f00:	04400404 	movi	r17,16
    2f04:	d8801f17 	ldw	r2,124(sp)
    2f08:	8c04a20e 	bge	r17,r16,4194 <___vfprintf_internal_r+0x1c80>
    2f0c:	01400074 	movhi	r5,1
    2f10:	2944d584 	addi	r5,r5,4950
    2f14:	d9403515 	stw	r5,212(sp)
    2f18:	048001c4 	movi	r18,7
    2f1c:	dcc02c17 	ldw	r19,176(sp)
    2f20:	00000306 	br	2f30 <___vfprintf_internal_r+0xa1c>
    2f24:	843ffc04 	addi	r16,r16,-16
    2f28:	42000204 	addi	r8,r8,8
    2f2c:	8c00130e 	bge	r17,r16,2f7c <___vfprintf_internal_r+0xa68>
    2f30:	01000074 	movhi	r4,1
    2f34:	18c00404 	addi	r3,r3,16
    2f38:	10800044 	addi	r2,r2,1
    2f3c:	2104d584 	addi	r4,r4,4950
    2f40:	41000015 	stw	r4,0(r8)
    2f44:	44400115 	stw	r17,4(r8)
    2f48:	d8c02015 	stw	r3,128(sp)
    2f4c:	d8801f15 	stw	r2,124(sp)
    2f50:	90bff40e 	bge	r18,r2,2f24 <__alt_data_end+0xff002f24>
    2f54:	d9801e04 	addi	r6,sp,120
    2f58:	b80b883a 	mov	r5,r23
    2f5c:	9809883a 	mov	r4,r19
    2f60:	00092b00 	call	92b0 <__sprint_r>
    2f64:	103e6d1e 	bne	r2,zero,291c <__alt_data_end+0xff00291c>
    2f68:	843ffc04 	addi	r16,r16,-16
    2f6c:	d8c02017 	ldw	r3,128(sp)
    2f70:	d8801f17 	ldw	r2,124(sp)
    2f74:	da000404 	addi	r8,sp,16
    2f78:	8c3fed16 	blt	r17,r16,2f30 <__alt_data_end+0xff002f30>
    2f7c:	d9403517 	ldw	r5,212(sp)
    2f80:	1c07883a 	add	r3,r3,r16
    2f84:	10800044 	addi	r2,r2,1
    2f88:	41400015 	stw	r5,0(r8)
    2f8c:	44000115 	stw	r16,4(r8)
    2f90:	d8c02015 	stw	r3,128(sp)
    2f94:	d8801f15 	stw	r2,124(sp)
    2f98:	010001c4 	movi	r4,7
    2f9c:	2080060e 	bge	r4,r2,2fb8 <___vfprintf_internal_r+0xaa4>
    2fa0:	d9002c17 	ldw	r4,176(sp)
    2fa4:	d9801e04 	addi	r6,sp,120
    2fa8:	b80b883a 	mov	r5,r23
    2fac:	00092b00 	call	92b0 <__sprint_r>
    2fb0:	103e5a1e 	bne	r2,zero,291c <__alt_data_end+0xff00291c>
    2fb4:	d8c02017 	ldw	r3,128(sp)
    2fb8:	d8803117 	ldw	r2,196(sp)
    2fbc:	d9002a17 	ldw	r4,168(sp)
    2fc0:	1100010e 	bge	r2,r4,2fc8 <___vfprintf_internal_r+0xab4>
    2fc4:	2005883a 	mov	r2,r4
    2fc8:	d9402f17 	ldw	r5,188(sp)
    2fcc:	288b883a 	add	r5,r5,r2
    2fd0:	d9402f15 	stw	r5,188(sp)
    2fd4:	18019e1e 	bne	r3,zero,3650 <___vfprintf_internal_r+0x113c>
    2fd8:	a8800007 	ldb	r2,0(r21)
    2fdc:	d8001f15 	stw	zero,124(sp)
    2fe0:	da000404 	addi	r8,sp,16
    2fe4:	103d851e 	bne	r2,zero,25fc <__alt_data_end+0xff0025fc>
    2fe8:	a821883a 	mov	r16,r21
    2fec:	003d9b06 	br	265c <__alt_data_end+0xff00265c>
    2ff0:	18c03fcc 	andi	r3,r3,255
    2ff4:	1805c11e 	bne	r3,zero,46fc <___vfprintf_internal_r+0x21e8>
    2ff8:	94800414 	ori	r18,r18,16
    2ffc:	9080080c 	andi	r2,r18,32
    3000:	10020c26 	beq	r2,zero,3834 <___vfprintf_internal_r+0x1320>
    3004:	d8802d17 	ldw	r2,180(sp)
    3008:	d9002917 	ldw	r4,164(sp)
    300c:	d8002785 	stb	zero,158(sp)
    3010:	10c00204 	addi	r3,r2,8
    3014:	14c00017 	ldw	r19,0(r2)
    3018:	15800117 	ldw	r22,4(r2)
    301c:	20040f16 	blt	r4,zero,405c <___vfprintf_internal_r+0x1b48>
    3020:	013fdfc4 	movi	r4,-129
    3024:	9d84b03a 	or	r2,r19,r22
    3028:	d8c02d15 	stw	r3,180(sp)
    302c:	9124703a 	and	r18,r18,r4
    3030:	0039883a 	mov	fp,zero
    3034:	103e891e 	bne	r2,zero,2a5c <__alt_data_end+0xff002a5c>
    3038:	d9002917 	ldw	r4,164(sp)
    303c:	2002c11e 	bne	r4,zero,3b44 <___vfprintf_internal_r+0x1630>
    3040:	d8002915 	stw	zero,164(sp)
    3044:	d8002e15 	stw	zero,184(sp)
    3048:	dc001e04 	addi	r16,sp,120
    304c:	003ef806 	br	2c30 <__alt_data_end+0xff002c30>
    3050:	18c03fcc 	andi	r3,r3,255
    3054:	18059d1e 	bne	r3,zero,46cc <___vfprintf_internal_r+0x21b8>
    3058:	01400074 	movhi	r5,1
    305c:	2944c504 	addi	r5,r5,4884
    3060:	d9403915 	stw	r5,228(sp)
    3064:	9080080c 	andi	r2,r18,32
    3068:	10005226 	beq	r2,zero,31b4 <___vfprintf_internal_r+0xca0>
    306c:	d8802d17 	ldw	r2,180(sp)
    3070:	14c00017 	ldw	r19,0(r2)
    3074:	15800117 	ldw	r22,4(r2)
    3078:	10800204 	addi	r2,r2,8
    307c:	d8802d15 	stw	r2,180(sp)
    3080:	9080004c 	andi	r2,r18,1
    3084:	10019026 	beq	r2,zero,36c8 <___vfprintf_internal_r+0x11b4>
    3088:	9d84b03a 	or	r2,r19,r22
    308c:	10036926 	beq	r2,zero,3e34 <___vfprintf_internal_r+0x1920>
    3090:	d8c02917 	ldw	r3,164(sp)
    3094:	00800c04 	movi	r2,48
    3098:	d8802705 	stb	r2,156(sp)
    309c:	dc402745 	stb	r17,157(sp)
    30a0:	d8002785 	stb	zero,158(sp)
    30a4:	90800094 	ori	r2,r18,2
    30a8:	18045d16 	blt	r3,zero,4220 <___vfprintf_internal_r+0x1d0c>
    30ac:	00bfdfc4 	movi	r2,-129
    30b0:	90a4703a 	and	r18,r18,r2
    30b4:	94800094 	ori	r18,r18,2
    30b8:	0039883a 	mov	fp,zero
    30bc:	d9003917 	ldw	r4,228(sp)
    30c0:	dc001e04 	addi	r16,sp,120
    30c4:	988003cc 	andi	r2,r19,15
    30c8:	b006973a 	slli	r3,r22,28
    30cc:	2085883a 	add	r2,r4,r2
    30d0:	9826d13a 	srli	r19,r19,4
    30d4:	10800003 	ldbu	r2,0(r2)
    30d8:	b02cd13a 	srli	r22,r22,4
    30dc:	843fffc4 	addi	r16,r16,-1
    30e0:	1ce6b03a 	or	r19,r3,r19
    30e4:	80800005 	stb	r2,0(r16)
    30e8:	9d84b03a 	or	r2,r19,r22
    30ec:	103ff51e 	bne	r2,zero,30c4 <__alt_data_end+0xff0030c4>
    30f0:	d8c02817 	ldw	r3,160(sp)
    30f4:	1c07c83a 	sub	r3,r3,r16
    30f8:	d8c02e15 	stw	r3,184(sp)
    30fc:	003ecc06 	br	2c30 <__alt_data_end+0xff002c30>
    3100:	18c03fcc 	andi	r3,r3,255
    3104:	183e9f26 	beq	r3,zero,2b84 <__alt_data_end+0xff002b84>
    3108:	d9c02785 	stb	r7,158(sp)
    310c:	003e9d06 	br	2b84 <__alt_data_end+0xff002b84>
    3110:	00c00044 	movi	r3,1
    3114:	01c00ac4 	movi	r7,43
    3118:	ac400007 	ldb	r17,0(r21)
    311c:	003d5e06 	br	2698 <__alt_data_end+0xff002698>
    3120:	94800814 	ori	r18,r18,32
    3124:	ac400007 	ldb	r17,0(r21)
    3128:	003d5b06 	br	2698 <__alt_data_end+0xff002698>
    312c:	d8c02d17 	ldw	r3,180(sp)
    3130:	d8002785 	stb	zero,158(sp)
    3134:	1c000017 	ldw	r16,0(r3)
    3138:	1cc00104 	addi	r19,r3,4
    313c:	80041926 	beq	r16,zero,41a4 <___vfprintf_internal_r+0x1c90>
    3140:	d9002917 	ldw	r4,164(sp)
    3144:	2003d016 	blt	r4,zero,4088 <___vfprintf_internal_r+0x1b74>
    3148:	200d883a 	mov	r6,r4
    314c:	000b883a 	mov	r5,zero
    3150:	8009883a 	mov	r4,r16
    3154:	da003d15 	stw	r8,244(sp)
    3158:	00075180 	call	7518 <memchr>
    315c:	da003d17 	ldw	r8,244(sp)
    3160:	10045426 	beq	r2,zero,42b4 <___vfprintf_internal_r+0x1da0>
    3164:	1405c83a 	sub	r2,r2,r16
    3168:	d8802e15 	stw	r2,184(sp)
    316c:	1003cc16 	blt	r2,zero,40a0 <___vfprintf_internal_r+0x1b8c>
    3170:	df002783 	ldbu	fp,158(sp)
    3174:	d8802a15 	stw	r2,168(sp)
    3178:	dcc02d15 	stw	r19,180(sp)
    317c:	d8002915 	stw	zero,164(sp)
    3180:	d8003215 	stw	zero,200(sp)
    3184:	003eb006 	br	2c48 <__alt_data_end+0xff002c48>
    3188:	18c03fcc 	andi	r3,r3,255
    318c:	183f9b26 	beq	r3,zero,2ffc <__alt_data_end+0xff002ffc>
    3190:	d9c02785 	stb	r7,158(sp)
    3194:	003f9906 	br	2ffc <__alt_data_end+0xff002ffc>
    3198:	18c03fcc 	andi	r3,r3,255
    319c:	1805551e 	bne	r3,zero,46f4 <___vfprintf_internal_r+0x21e0>
    31a0:	01400074 	movhi	r5,1
    31a4:	2944ca04 	addi	r5,r5,4904
    31a8:	d9403915 	stw	r5,228(sp)
    31ac:	9080080c 	andi	r2,r18,32
    31b0:	103fae1e 	bne	r2,zero,306c <__alt_data_end+0xff00306c>
    31b4:	9080040c 	andi	r2,r18,16
    31b8:	1002de26 	beq	r2,zero,3d34 <___vfprintf_internal_r+0x1820>
    31bc:	d8c02d17 	ldw	r3,180(sp)
    31c0:	002d883a 	mov	r22,zero
    31c4:	1cc00017 	ldw	r19,0(r3)
    31c8:	18c00104 	addi	r3,r3,4
    31cc:	d8c02d15 	stw	r3,180(sp)
    31d0:	003fab06 	br	3080 <__alt_data_end+0xff003080>
    31d4:	38803fcc 	andi	r2,r7,255
    31d8:	1080201c 	xori	r2,r2,128
    31dc:	10bfe004 	addi	r2,r2,-128
    31e0:	1002d21e 	bne	r2,zero,3d2c <___vfprintf_internal_r+0x1818>
    31e4:	00c00044 	movi	r3,1
    31e8:	01c00804 	movi	r7,32
    31ec:	ac400007 	ldb	r17,0(r21)
    31f0:	003d2906 	br	2698 <__alt_data_end+0xff002698>
    31f4:	94800054 	ori	r18,r18,1
    31f8:	ac400007 	ldb	r17,0(r21)
    31fc:	003d2606 	br	2698 <__alt_data_end+0xff002698>
    3200:	18c03fcc 	andi	r3,r3,255
    3204:	183e0526 	beq	r3,zero,2a1c <__alt_data_end+0xff002a1c>
    3208:	d9c02785 	stb	r7,158(sp)
    320c:	003e0306 	br	2a1c <__alt_data_end+0xff002a1c>
    3210:	94801014 	ori	r18,r18,64
    3214:	ac400007 	ldb	r17,0(r21)
    3218:	003d1f06 	br	2698 <__alt_data_end+0xff002698>
    321c:	ac400007 	ldb	r17,0(r21)
    3220:	8a438726 	beq	r17,r9,4040 <___vfprintf_internal_r+0x1b2c>
    3224:	94800414 	ori	r18,r18,16
    3228:	003d1b06 	br	2698 <__alt_data_end+0xff002698>
    322c:	18c03fcc 	andi	r3,r3,255
    3230:	1805341e 	bne	r3,zero,4704 <___vfprintf_internal_r+0x21f0>
    3234:	9080080c 	andi	r2,r18,32
    3238:	1002cd26 	beq	r2,zero,3d70 <___vfprintf_internal_r+0x185c>
    323c:	d9402d17 	ldw	r5,180(sp)
    3240:	d9002f17 	ldw	r4,188(sp)
    3244:	28800017 	ldw	r2,0(r5)
    3248:	2007d7fa 	srai	r3,r4,31
    324c:	29400104 	addi	r5,r5,4
    3250:	d9402d15 	stw	r5,180(sp)
    3254:	11000015 	stw	r4,0(r2)
    3258:	10c00115 	stw	r3,4(r2)
    325c:	003ce506 	br	25f4 <__alt_data_end+0xff0025f4>
    3260:	d8c02d17 	ldw	r3,180(sp)
    3264:	d9002d17 	ldw	r4,180(sp)
    3268:	d8002785 	stb	zero,158(sp)
    326c:	18800017 	ldw	r2,0(r3)
    3270:	21000104 	addi	r4,r4,4
    3274:	00c00044 	movi	r3,1
    3278:	d8c02a15 	stw	r3,168(sp)
    327c:	d8801405 	stb	r2,80(sp)
    3280:	d9002d15 	stw	r4,180(sp)
    3284:	d8c02e15 	stw	r3,184(sp)
    3288:	d8002915 	stw	zero,164(sp)
    328c:	d8003215 	stw	zero,200(sp)
    3290:	dc001404 	addi	r16,sp,80
    3294:	0039883a 	mov	fp,zero
    3298:	003e7206 	br	2c64 <__alt_data_end+0xff002c64>
    329c:	01000074 	movhi	r4,1
    32a0:	2104ca04 	addi	r4,r4,4904
    32a4:	0039883a 	mov	fp,zero
    32a8:	d9003915 	stw	r4,228(sp)
    32ac:	04401e04 	movi	r17,120
    32b0:	003f8206 	br	30bc <__alt_data_end+0xff0030bc>
    32b4:	18c03fcc 	andi	r3,r3,255
    32b8:	1805061e 	bne	r3,zero,46d4 <___vfprintf_internal_r+0x21c0>
    32bc:	883d9126 	beq	r17,zero,2904 <__alt_data_end+0xff002904>
    32c0:	00c00044 	movi	r3,1
    32c4:	d8c02a15 	stw	r3,168(sp)
    32c8:	dc401405 	stb	r17,80(sp)
    32cc:	d8002785 	stb	zero,158(sp)
    32d0:	003fec06 	br	3284 <__alt_data_end+0xff003284>
    32d4:	01400074 	movhi	r5,1
    32d8:	2944ca04 	addi	r5,r5,4904
    32dc:	d9403915 	stw	r5,228(sp)
    32e0:	d8c02d15 	stw	r3,180(sp)
    32e4:	1025883a 	mov	r18,r2
    32e8:	04401e04 	movi	r17,120
    32ec:	9d84b03a 	or	r2,r19,r22
    32f0:	1000fc1e 	bne	r2,zero,36e4 <___vfprintf_internal_r+0x11d0>
    32f4:	0039883a 	mov	fp,zero
    32f8:	00800084 	movi	r2,2
    32fc:	10803fcc 	andi	r2,r2,255
    3300:	00c00044 	movi	r3,1
    3304:	10c20f26 	beq	r2,r3,3b44 <___vfprintf_internal_r+0x1630>
    3308:	00c00084 	movi	r3,2
    330c:	10fd6326 	beq	r2,r3,289c <__alt_data_end+0xff00289c>
    3310:	003e2d06 	br	2bc8 <__alt_data_end+0xff002bc8>
    3314:	d8c02017 	ldw	r3,128(sp)
    3318:	003e9306 	br	2d68 <__alt_data_end+0xff002d68>
    331c:	00801944 	movi	r2,101
    3320:	14407e0e 	bge	r2,r17,351c <___vfprintf_internal_r+0x1008>
    3324:	d9003617 	ldw	r4,216(sp)
    3328:	d9403817 	ldw	r5,224(sp)
    332c:	000d883a 	mov	r6,zero
    3330:	000f883a 	mov	r7,zero
    3334:	d8c03c15 	stw	r3,240(sp)
    3338:	da003d15 	stw	r8,244(sp)
    333c:	000cf280 	call	cf28 <__eqdf2>
    3340:	d8c03c17 	ldw	r3,240(sp)
    3344:	da003d17 	ldw	r8,244(sp)
    3348:	1000f71e 	bne	r2,zero,3728 <___vfprintf_internal_r+0x1214>
    334c:	d8801f17 	ldw	r2,124(sp)
    3350:	01000074 	movhi	r4,1
    3354:	2104d104 	addi	r4,r4,4932
    3358:	18c00044 	addi	r3,r3,1
    335c:	10800044 	addi	r2,r2,1
    3360:	41000015 	stw	r4,0(r8)
    3364:	01000044 	movi	r4,1
    3368:	41000115 	stw	r4,4(r8)
    336c:	d8c02015 	stw	r3,128(sp)
    3370:	d8801f15 	stw	r2,124(sp)
    3374:	010001c4 	movi	r4,7
    3378:	2082b816 	blt	r4,r2,3e5c <___vfprintf_internal_r+0x1948>
    337c:	42000204 	addi	r8,r8,8
    3380:	d8802617 	ldw	r2,152(sp)
    3384:	d9403317 	ldw	r5,204(sp)
    3388:	11400216 	blt	r2,r5,3394 <___vfprintf_internal_r+0xe80>
    338c:	9080004c 	andi	r2,r18,1
    3390:	103ed526 	beq	r2,zero,2ee8 <__alt_data_end+0xff002ee8>
    3394:	d8803717 	ldw	r2,220(sp)
    3398:	d9003417 	ldw	r4,208(sp)
    339c:	d9403717 	ldw	r5,220(sp)
    33a0:	1887883a 	add	r3,r3,r2
    33a4:	d8801f17 	ldw	r2,124(sp)
    33a8:	41000015 	stw	r4,0(r8)
    33ac:	41400115 	stw	r5,4(r8)
    33b0:	10800044 	addi	r2,r2,1
    33b4:	d8c02015 	stw	r3,128(sp)
    33b8:	d8801f15 	stw	r2,124(sp)
    33bc:	010001c4 	movi	r4,7
    33c0:	20832916 	blt	r4,r2,4068 <___vfprintf_internal_r+0x1b54>
    33c4:	42000204 	addi	r8,r8,8
    33c8:	d8803317 	ldw	r2,204(sp)
    33cc:	143fffc4 	addi	r16,r2,-1
    33d0:	043ec50e 	bge	zero,r16,2ee8 <__alt_data_end+0xff002ee8>
    33d4:	04400404 	movi	r17,16
    33d8:	d8801f17 	ldw	r2,124(sp)
    33dc:	8c00880e 	bge	r17,r16,3600 <___vfprintf_internal_r+0x10ec>
    33e0:	01400074 	movhi	r5,1
    33e4:	2944d184 	addi	r5,r5,4934
    33e8:	d9402b15 	stw	r5,172(sp)
    33ec:	058001c4 	movi	r22,7
    33f0:	dcc02c17 	ldw	r19,176(sp)
    33f4:	00000306 	br	3404 <___vfprintf_internal_r+0xef0>
    33f8:	42000204 	addi	r8,r8,8
    33fc:	843ffc04 	addi	r16,r16,-16
    3400:	8c00820e 	bge	r17,r16,360c <___vfprintf_internal_r+0x10f8>
    3404:	18c00404 	addi	r3,r3,16
    3408:	10800044 	addi	r2,r2,1
    340c:	45000015 	stw	r20,0(r8)
    3410:	44400115 	stw	r17,4(r8)
    3414:	d8c02015 	stw	r3,128(sp)
    3418:	d8801f15 	stw	r2,124(sp)
    341c:	b0bff60e 	bge	r22,r2,33f8 <__alt_data_end+0xff0033f8>
    3420:	d9801e04 	addi	r6,sp,120
    3424:	b80b883a 	mov	r5,r23
    3428:	9809883a 	mov	r4,r19
    342c:	00092b00 	call	92b0 <__sprint_r>
    3430:	103d3a1e 	bne	r2,zero,291c <__alt_data_end+0xff00291c>
    3434:	d8c02017 	ldw	r3,128(sp)
    3438:	d8801f17 	ldw	r2,124(sp)
    343c:	da000404 	addi	r8,sp,16
    3440:	003fee06 	br	33fc <__alt_data_end+0xff0033fc>
    3444:	d9403117 	ldw	r5,196(sp)
    3448:	d8802a17 	ldw	r2,168(sp)
    344c:	28adc83a 	sub	r22,r5,r2
    3450:	05be630e 	bge	zero,r22,2de0 <__alt_data_end+0xff002de0>
    3454:	07000404 	movi	fp,16
    3458:	d8801f17 	ldw	r2,124(sp)
    345c:	e5838f0e 	bge	fp,r22,429c <___vfprintf_internal_r+0x1d88>
    3460:	01400074 	movhi	r5,1
    3464:	2944d184 	addi	r5,r5,4934
    3468:	dc403015 	stw	r17,192(sp)
    346c:	d9402b15 	stw	r5,172(sp)
    3470:	b023883a 	mov	r17,r22
    3474:	04c001c4 	movi	r19,7
    3478:	a82d883a 	mov	r22,r21
    347c:	902b883a 	mov	r21,r18
    3480:	8025883a 	mov	r18,r16
    3484:	dc002c17 	ldw	r16,176(sp)
    3488:	00000306 	br	3498 <___vfprintf_internal_r+0xf84>
    348c:	8c7ffc04 	addi	r17,r17,-16
    3490:	42000204 	addi	r8,r8,8
    3494:	e440110e 	bge	fp,r17,34dc <___vfprintf_internal_r+0xfc8>
    3498:	18c00404 	addi	r3,r3,16
    349c:	10800044 	addi	r2,r2,1
    34a0:	45000015 	stw	r20,0(r8)
    34a4:	47000115 	stw	fp,4(r8)
    34a8:	d8c02015 	stw	r3,128(sp)
    34ac:	d8801f15 	stw	r2,124(sp)
    34b0:	98bff60e 	bge	r19,r2,348c <__alt_data_end+0xff00348c>
    34b4:	d9801e04 	addi	r6,sp,120
    34b8:	b80b883a 	mov	r5,r23
    34bc:	8009883a 	mov	r4,r16
    34c0:	00092b00 	call	92b0 <__sprint_r>
    34c4:	103d151e 	bne	r2,zero,291c <__alt_data_end+0xff00291c>
    34c8:	8c7ffc04 	addi	r17,r17,-16
    34cc:	d8c02017 	ldw	r3,128(sp)
    34d0:	d8801f17 	ldw	r2,124(sp)
    34d4:	da000404 	addi	r8,sp,16
    34d8:	e47fef16 	blt	fp,r17,3498 <__alt_data_end+0xff003498>
    34dc:	9021883a 	mov	r16,r18
    34e0:	a825883a 	mov	r18,r21
    34e4:	b02b883a 	mov	r21,r22
    34e8:	882d883a 	mov	r22,r17
    34ec:	dc403017 	ldw	r17,192(sp)
    34f0:	d9002b17 	ldw	r4,172(sp)
    34f4:	1d87883a 	add	r3,r3,r22
    34f8:	10800044 	addi	r2,r2,1
    34fc:	41000015 	stw	r4,0(r8)
    3500:	45800115 	stw	r22,4(r8)
    3504:	d8c02015 	stw	r3,128(sp)
    3508:	d8801f15 	stw	r2,124(sp)
    350c:	010001c4 	movi	r4,7
    3510:	20818e16 	blt	r4,r2,3b4c <___vfprintf_internal_r+0x1638>
    3514:	42000204 	addi	r8,r8,8
    3518:	003e3106 	br	2de0 <__alt_data_end+0xff002de0>
    351c:	d9403317 	ldw	r5,204(sp)
    3520:	00800044 	movi	r2,1
    3524:	18c00044 	addi	r3,r3,1
    3528:	1141530e 	bge	r2,r5,3a78 <___vfprintf_internal_r+0x1564>
    352c:	dc401f17 	ldw	r17,124(sp)
    3530:	00800044 	movi	r2,1
    3534:	40800115 	stw	r2,4(r8)
    3538:	8c400044 	addi	r17,r17,1
    353c:	44000015 	stw	r16,0(r8)
    3540:	d8c02015 	stw	r3,128(sp)
    3544:	dc401f15 	stw	r17,124(sp)
    3548:	008001c4 	movi	r2,7
    354c:	14416b16 	blt	r2,r17,3afc <___vfprintf_internal_r+0x15e8>
    3550:	42000204 	addi	r8,r8,8
    3554:	d8803717 	ldw	r2,220(sp)
    3558:	d9003417 	ldw	r4,208(sp)
    355c:	8c400044 	addi	r17,r17,1
    3560:	10c7883a 	add	r3,r2,r3
    3564:	40800115 	stw	r2,4(r8)
    3568:	41000015 	stw	r4,0(r8)
    356c:	d8c02015 	stw	r3,128(sp)
    3570:	dc401f15 	stw	r17,124(sp)
    3574:	008001c4 	movi	r2,7
    3578:	14416916 	blt	r2,r17,3b20 <___vfprintf_internal_r+0x160c>
    357c:	45800204 	addi	r22,r8,8
    3580:	d9003617 	ldw	r4,216(sp)
    3584:	d9403817 	ldw	r5,224(sp)
    3588:	000d883a 	mov	r6,zero
    358c:	000f883a 	mov	r7,zero
    3590:	d8c03c15 	stw	r3,240(sp)
    3594:	000cf280 	call	cf28 <__eqdf2>
    3598:	d8c03c17 	ldw	r3,240(sp)
    359c:	1000bc26 	beq	r2,zero,3890 <___vfprintf_internal_r+0x137c>
    35a0:	d9403317 	ldw	r5,204(sp)
    35a4:	84000044 	addi	r16,r16,1
    35a8:	8c400044 	addi	r17,r17,1
    35ac:	28bfffc4 	addi	r2,r5,-1
    35b0:	1887883a 	add	r3,r3,r2
    35b4:	b0800115 	stw	r2,4(r22)
    35b8:	b4000015 	stw	r16,0(r22)
    35bc:	d8c02015 	stw	r3,128(sp)
    35c0:	dc401f15 	stw	r17,124(sp)
    35c4:	008001c4 	movi	r2,7
    35c8:	14414316 	blt	r2,r17,3ad8 <___vfprintf_internal_r+0x15c4>
    35cc:	b5800204 	addi	r22,r22,8
    35d0:	d9003a17 	ldw	r4,232(sp)
    35d4:	df0022c4 	addi	fp,sp,139
    35d8:	8c400044 	addi	r17,r17,1
    35dc:	20c7883a 	add	r3,r4,r3
    35e0:	b7000015 	stw	fp,0(r22)
    35e4:	b1000115 	stw	r4,4(r22)
    35e8:	d8c02015 	stw	r3,128(sp)
    35ec:	dc401f15 	stw	r17,124(sp)
    35f0:	008001c4 	movi	r2,7
    35f4:	14400e16 	blt	r2,r17,3630 <___vfprintf_internal_r+0x111c>
    35f8:	b2000204 	addi	r8,r22,8
    35fc:	003e3a06 	br	2ee8 <__alt_data_end+0xff002ee8>
    3600:	01000074 	movhi	r4,1
    3604:	2104d184 	addi	r4,r4,4934
    3608:	d9002b15 	stw	r4,172(sp)
    360c:	d9002b17 	ldw	r4,172(sp)
    3610:	1c07883a 	add	r3,r3,r16
    3614:	44000115 	stw	r16,4(r8)
    3618:	41000015 	stw	r4,0(r8)
    361c:	10800044 	addi	r2,r2,1
    3620:	d8c02015 	stw	r3,128(sp)
    3624:	d8801f15 	stw	r2,124(sp)
    3628:	010001c4 	movi	r4,7
    362c:	20be2d0e 	bge	r4,r2,2ee4 <__alt_data_end+0xff002ee4>
    3630:	d9002c17 	ldw	r4,176(sp)
    3634:	d9801e04 	addi	r6,sp,120
    3638:	b80b883a 	mov	r5,r23
    363c:	00092b00 	call	92b0 <__sprint_r>
    3640:	103cb61e 	bne	r2,zero,291c <__alt_data_end+0xff00291c>
    3644:	d8c02017 	ldw	r3,128(sp)
    3648:	da000404 	addi	r8,sp,16
    364c:	003e2606 	br	2ee8 <__alt_data_end+0xff002ee8>
    3650:	d9002c17 	ldw	r4,176(sp)
    3654:	d9801e04 	addi	r6,sp,120
    3658:	b80b883a 	mov	r5,r23
    365c:	00092b00 	call	92b0 <__sprint_r>
    3660:	103e5d26 	beq	r2,zero,2fd8 <__alt_data_end+0xff002fd8>
    3664:	003cad06 	br	291c <__alt_data_end+0xff00291c>
    3668:	d9002c17 	ldw	r4,176(sp)
    366c:	d9801e04 	addi	r6,sp,120
    3670:	b80b883a 	mov	r5,r23
    3674:	00092b00 	call	92b0 <__sprint_r>
    3678:	103ca81e 	bne	r2,zero,291c <__alt_data_end+0xff00291c>
    367c:	d8c02017 	ldw	r3,128(sp)
    3680:	da000404 	addi	r8,sp,16
    3684:	003e0b06 	br	2eb4 <__alt_data_end+0xff002eb4>
    3688:	d9002c17 	ldw	r4,176(sp)
    368c:	d9801e04 	addi	r6,sp,120
    3690:	b80b883a 	mov	r5,r23
    3694:	00092b00 	call	92b0 <__sprint_r>
    3698:	103ca01e 	bne	r2,zero,291c <__alt_data_end+0xff00291c>
    369c:	d8c02017 	ldw	r3,128(sp)
    36a0:	da000404 	addi	r8,sp,16
    36a4:	003dbd06 	br	2d9c <__alt_data_end+0xff002d9c>
    36a8:	d9002c17 	ldw	r4,176(sp)
    36ac:	d9801e04 	addi	r6,sp,120
    36b0:	b80b883a 	mov	r5,r23
    36b4:	00092b00 	call	92b0 <__sprint_r>
    36b8:	103c981e 	bne	r2,zero,291c <__alt_data_end+0xff00291c>
    36bc:	d8c02017 	ldw	r3,128(sp)
    36c0:	da000404 	addi	r8,sp,16
    36c4:	003dc306 	br	2dd4 <__alt_data_end+0xff002dd4>
    36c8:	d8802917 	ldw	r2,164(sp)
    36cc:	d8002785 	stb	zero,158(sp)
    36d0:	103f0616 	blt	r2,zero,32ec <__alt_data_end+0xff0032ec>
    36d4:	00ffdfc4 	movi	r3,-129
    36d8:	9d84b03a 	or	r2,r19,r22
    36dc:	90e4703a 	and	r18,r18,r3
    36e0:	103c6b26 	beq	r2,zero,2890 <__alt_data_end+0xff002890>
    36e4:	0039883a 	mov	fp,zero
    36e8:	003e7406 	br	30bc <__alt_data_end+0xff0030bc>
    36ec:	9080040c 	andi	r2,r18,16
    36f0:	1001b326 	beq	r2,zero,3dc0 <___vfprintf_internal_r+0x18ac>
    36f4:	d9002d17 	ldw	r4,180(sp)
    36f8:	d9402917 	ldw	r5,164(sp)
    36fc:	d8002785 	stb	zero,158(sp)
    3700:	20800104 	addi	r2,r4,4
    3704:	24c00017 	ldw	r19,0(r4)
    3708:	002d883a 	mov	r22,zero
    370c:	2801b516 	blt	r5,zero,3de4 <___vfprintf_internal_r+0x18d0>
    3710:	00ffdfc4 	movi	r3,-129
    3714:	d8802d15 	stw	r2,180(sp)
    3718:	90e4703a 	and	r18,r18,r3
    371c:	983d2726 	beq	r19,zero,2bbc <__alt_data_end+0xff002bbc>
    3720:	0039883a 	mov	fp,zero
    3724:	003d2a06 	br	2bd0 <__alt_data_end+0xff002bd0>
    3728:	dc402617 	ldw	r17,152(sp)
    372c:	0441d30e 	bge	zero,r17,3e7c <___vfprintf_internal_r+0x1968>
    3730:	dc403217 	ldw	r17,200(sp)
    3734:	d8803317 	ldw	r2,204(sp)
    3738:	1440010e 	bge	r2,r17,3740 <___vfprintf_internal_r+0x122c>
    373c:	1023883a 	mov	r17,r2
    3740:	04400a0e 	bge	zero,r17,376c <___vfprintf_internal_r+0x1258>
    3744:	d8801f17 	ldw	r2,124(sp)
    3748:	1c47883a 	add	r3,r3,r17
    374c:	44000015 	stw	r16,0(r8)
    3750:	10800044 	addi	r2,r2,1
    3754:	44400115 	stw	r17,4(r8)
    3758:	d8c02015 	stw	r3,128(sp)
    375c:	d8801f15 	stw	r2,124(sp)
    3760:	010001c4 	movi	r4,7
    3764:	20826516 	blt	r4,r2,40fc <___vfprintf_internal_r+0x1be8>
    3768:	42000204 	addi	r8,r8,8
    376c:	88026116 	blt	r17,zero,40f4 <___vfprintf_internal_r+0x1be0>
    3770:	d9003217 	ldw	r4,200(sp)
    3774:	2463c83a 	sub	r17,r4,r17
    3778:	04407b0e 	bge	zero,r17,3968 <___vfprintf_internal_r+0x1454>
    377c:	05800404 	movi	r22,16
    3780:	d8801f17 	ldw	r2,124(sp)
    3784:	b4419d0e 	bge	r22,r17,3dfc <___vfprintf_internal_r+0x18e8>
    3788:	01000074 	movhi	r4,1
    378c:	2104d184 	addi	r4,r4,4934
    3790:	d9002b15 	stw	r4,172(sp)
    3794:	070001c4 	movi	fp,7
    3798:	dcc02c17 	ldw	r19,176(sp)
    379c:	00000306 	br	37ac <___vfprintf_internal_r+0x1298>
    37a0:	42000204 	addi	r8,r8,8
    37a4:	8c7ffc04 	addi	r17,r17,-16
    37a8:	b441970e 	bge	r22,r17,3e08 <___vfprintf_internal_r+0x18f4>
    37ac:	18c00404 	addi	r3,r3,16
    37b0:	10800044 	addi	r2,r2,1
    37b4:	45000015 	stw	r20,0(r8)
    37b8:	45800115 	stw	r22,4(r8)
    37bc:	d8c02015 	stw	r3,128(sp)
    37c0:	d8801f15 	stw	r2,124(sp)
    37c4:	e0bff60e 	bge	fp,r2,37a0 <__alt_data_end+0xff0037a0>
    37c8:	d9801e04 	addi	r6,sp,120
    37cc:	b80b883a 	mov	r5,r23
    37d0:	9809883a 	mov	r4,r19
    37d4:	00092b00 	call	92b0 <__sprint_r>
    37d8:	103c501e 	bne	r2,zero,291c <__alt_data_end+0xff00291c>
    37dc:	d8c02017 	ldw	r3,128(sp)
    37e0:	d8801f17 	ldw	r2,124(sp)
    37e4:	da000404 	addi	r8,sp,16
    37e8:	003fee06 	br	37a4 <__alt_data_end+0xff0037a4>
    37ec:	d9002c17 	ldw	r4,176(sp)
    37f0:	d9801e04 	addi	r6,sp,120
    37f4:	b80b883a 	mov	r5,r23
    37f8:	00092b00 	call	92b0 <__sprint_r>
    37fc:	103c471e 	bne	r2,zero,291c <__alt_data_end+0xff00291c>
    3800:	d8c02017 	ldw	r3,128(sp)
    3804:	df002787 	ldb	fp,158(sp)
    3808:	da000404 	addi	r8,sp,16
    380c:	003d5606 	br	2d68 <__alt_data_end+0xff002d68>
    3810:	9080040c 	andi	r2,r18,16
    3814:	10016126 	beq	r2,zero,3d9c <___vfprintf_internal_r+0x1888>
    3818:	d8802d17 	ldw	r2,180(sp)
    381c:	14c00017 	ldw	r19,0(r2)
    3820:	10800104 	addi	r2,r2,4
    3824:	d8802d15 	stw	r2,180(sp)
    3828:	982dd7fa 	srai	r22,r19,31
    382c:	b005883a 	mov	r2,r22
    3830:	003c8206 	br	2a3c <__alt_data_end+0xff002a3c>
    3834:	9080040c 	andi	r2,r18,16
    3838:	10003526 	beq	r2,zero,3910 <___vfprintf_internal_r+0x13fc>
    383c:	d9402d17 	ldw	r5,180(sp)
    3840:	d8c02917 	ldw	r3,164(sp)
    3844:	d8002785 	stb	zero,158(sp)
    3848:	28800104 	addi	r2,r5,4
    384c:	2cc00017 	ldw	r19,0(r5)
    3850:	002d883a 	mov	r22,zero
    3854:	18003716 	blt	r3,zero,3934 <___vfprintf_internal_r+0x1420>
    3858:	00ffdfc4 	movi	r3,-129
    385c:	d8802d15 	stw	r2,180(sp)
    3860:	90e4703a 	and	r18,r18,r3
    3864:	0039883a 	mov	fp,zero
    3868:	983df326 	beq	r19,zero,3038 <__alt_data_end+0xff003038>
    386c:	00800244 	movi	r2,9
    3870:	14fc7b36 	bltu	r2,r19,2a60 <__alt_data_end+0xff002a60>
    3874:	d8c02817 	ldw	r3,160(sp)
    3878:	dc001dc4 	addi	r16,sp,119
    387c:	9cc00c04 	addi	r19,r19,48
    3880:	1c07c83a 	sub	r3,r3,r16
    3884:	dcc01dc5 	stb	r19,119(sp)
    3888:	d8c02e15 	stw	r3,184(sp)
    388c:	003ce806 	br	2c30 <__alt_data_end+0xff002c30>
    3890:	d8803317 	ldw	r2,204(sp)
    3894:	143fffc4 	addi	r16,r2,-1
    3898:	043f4d0e 	bge	zero,r16,35d0 <__alt_data_end+0xff0035d0>
    389c:	07000404 	movi	fp,16
    38a0:	e400810e 	bge	fp,r16,3aa8 <___vfprintf_internal_r+0x1594>
    38a4:	01400074 	movhi	r5,1
    38a8:	2944d184 	addi	r5,r5,4934
    38ac:	d9402b15 	stw	r5,172(sp)
    38b0:	01c001c4 	movi	r7,7
    38b4:	dcc02c17 	ldw	r19,176(sp)
    38b8:	00000306 	br	38c8 <___vfprintf_internal_r+0x13b4>
    38bc:	b5800204 	addi	r22,r22,8
    38c0:	843ffc04 	addi	r16,r16,-16
    38c4:	e4007b0e 	bge	fp,r16,3ab4 <___vfprintf_internal_r+0x15a0>
    38c8:	18c00404 	addi	r3,r3,16
    38cc:	8c400044 	addi	r17,r17,1
    38d0:	b5000015 	stw	r20,0(r22)
    38d4:	b7000115 	stw	fp,4(r22)
    38d8:	d8c02015 	stw	r3,128(sp)
    38dc:	dc401f15 	stw	r17,124(sp)
    38e0:	3c7ff60e 	bge	r7,r17,38bc <__alt_data_end+0xff0038bc>
    38e4:	d9801e04 	addi	r6,sp,120
    38e8:	b80b883a 	mov	r5,r23
    38ec:	9809883a 	mov	r4,r19
    38f0:	d9c03c15 	stw	r7,240(sp)
    38f4:	00092b00 	call	92b0 <__sprint_r>
    38f8:	d9c03c17 	ldw	r7,240(sp)
    38fc:	103c071e 	bne	r2,zero,291c <__alt_data_end+0xff00291c>
    3900:	d8c02017 	ldw	r3,128(sp)
    3904:	dc401f17 	ldw	r17,124(sp)
    3908:	dd800404 	addi	r22,sp,16
    390c:	003fec06 	br	38c0 <__alt_data_end+0xff0038c0>
    3910:	9080100c 	andi	r2,r18,64
    3914:	d8002785 	stb	zero,158(sp)
    3918:	10010e26 	beq	r2,zero,3d54 <___vfprintf_internal_r+0x1840>
    391c:	d9002d17 	ldw	r4,180(sp)
    3920:	d9402917 	ldw	r5,164(sp)
    3924:	002d883a 	mov	r22,zero
    3928:	20800104 	addi	r2,r4,4
    392c:	24c0000b 	ldhu	r19,0(r4)
    3930:	283fc90e 	bge	r5,zero,3858 <__alt_data_end+0xff003858>
    3934:	d8802d15 	stw	r2,180(sp)
    3938:	0039883a 	mov	fp,zero
    393c:	9d84b03a 	or	r2,r19,r22
    3940:	103c461e 	bne	r2,zero,2a5c <__alt_data_end+0xff002a5c>
    3944:	00800044 	movi	r2,1
    3948:	003e6c06 	br	32fc <__alt_data_end+0xff0032fc>
    394c:	d9002c17 	ldw	r4,176(sp)
    3950:	d9801e04 	addi	r6,sp,120
    3954:	b80b883a 	mov	r5,r23
    3958:	00092b00 	call	92b0 <__sprint_r>
    395c:	103bef1e 	bne	r2,zero,291c <__alt_data_end+0xff00291c>
    3960:	d8c02017 	ldw	r3,128(sp)
    3964:	da000404 	addi	r8,sp,16
    3968:	d9003217 	ldw	r4,200(sp)
    396c:	d8802617 	ldw	r2,152(sp)
    3970:	d9403317 	ldw	r5,204(sp)
    3974:	8123883a 	add	r17,r16,r4
    3978:	11400216 	blt	r2,r5,3984 <___vfprintf_internal_r+0x1470>
    397c:	9100004c 	andi	r4,r18,1
    3980:	20000d26 	beq	r4,zero,39b8 <___vfprintf_internal_r+0x14a4>
    3984:	d9003717 	ldw	r4,220(sp)
    3988:	d9403417 	ldw	r5,208(sp)
    398c:	1907883a 	add	r3,r3,r4
    3990:	d9001f17 	ldw	r4,124(sp)
    3994:	41400015 	stw	r5,0(r8)
    3998:	d9403717 	ldw	r5,220(sp)
    399c:	21000044 	addi	r4,r4,1
    39a0:	d8c02015 	stw	r3,128(sp)
    39a4:	41400115 	stw	r5,4(r8)
    39a8:	d9001f15 	stw	r4,124(sp)
    39ac:	014001c4 	movi	r5,7
    39b0:	2901e816 	blt	r5,r4,4154 <___vfprintf_internal_r+0x1c40>
    39b4:	42000204 	addi	r8,r8,8
    39b8:	d9003317 	ldw	r4,204(sp)
    39bc:	8121883a 	add	r16,r16,r4
    39c0:	2085c83a 	sub	r2,r4,r2
    39c4:	8461c83a 	sub	r16,r16,r17
    39c8:	1400010e 	bge	r2,r16,39d0 <___vfprintf_internal_r+0x14bc>
    39cc:	1021883a 	mov	r16,r2
    39d0:	04000a0e 	bge	zero,r16,39fc <___vfprintf_internal_r+0x14e8>
    39d4:	d9001f17 	ldw	r4,124(sp)
    39d8:	1c07883a 	add	r3,r3,r16
    39dc:	44400015 	stw	r17,0(r8)
    39e0:	21000044 	addi	r4,r4,1
    39e4:	44000115 	stw	r16,4(r8)
    39e8:	d8c02015 	stw	r3,128(sp)
    39ec:	d9001f15 	stw	r4,124(sp)
    39f0:	014001c4 	movi	r5,7
    39f4:	2901fb16 	blt	r5,r4,41e4 <___vfprintf_internal_r+0x1cd0>
    39f8:	42000204 	addi	r8,r8,8
    39fc:	8001f716 	blt	r16,zero,41dc <___vfprintf_internal_r+0x1cc8>
    3a00:	1421c83a 	sub	r16,r2,r16
    3a04:	043d380e 	bge	zero,r16,2ee8 <__alt_data_end+0xff002ee8>
    3a08:	04400404 	movi	r17,16
    3a0c:	d8801f17 	ldw	r2,124(sp)
    3a10:	8c3efb0e 	bge	r17,r16,3600 <__alt_data_end+0xff003600>
    3a14:	01400074 	movhi	r5,1
    3a18:	2944d184 	addi	r5,r5,4934
    3a1c:	d9402b15 	stw	r5,172(sp)
    3a20:	058001c4 	movi	r22,7
    3a24:	dcc02c17 	ldw	r19,176(sp)
    3a28:	00000306 	br	3a38 <___vfprintf_internal_r+0x1524>
    3a2c:	42000204 	addi	r8,r8,8
    3a30:	843ffc04 	addi	r16,r16,-16
    3a34:	8c3ef50e 	bge	r17,r16,360c <__alt_data_end+0xff00360c>
    3a38:	18c00404 	addi	r3,r3,16
    3a3c:	10800044 	addi	r2,r2,1
    3a40:	45000015 	stw	r20,0(r8)
    3a44:	44400115 	stw	r17,4(r8)
    3a48:	d8c02015 	stw	r3,128(sp)
    3a4c:	d8801f15 	stw	r2,124(sp)
    3a50:	b0bff60e 	bge	r22,r2,3a2c <__alt_data_end+0xff003a2c>
    3a54:	d9801e04 	addi	r6,sp,120
    3a58:	b80b883a 	mov	r5,r23
    3a5c:	9809883a 	mov	r4,r19
    3a60:	00092b00 	call	92b0 <__sprint_r>
    3a64:	103bad1e 	bne	r2,zero,291c <__alt_data_end+0xff00291c>
    3a68:	d8c02017 	ldw	r3,128(sp)
    3a6c:	d8801f17 	ldw	r2,124(sp)
    3a70:	da000404 	addi	r8,sp,16
    3a74:	003fee06 	br	3a30 <__alt_data_end+0xff003a30>
    3a78:	9088703a 	and	r4,r18,r2
    3a7c:	203eab1e 	bne	r4,zero,352c <__alt_data_end+0xff00352c>
    3a80:	dc401f17 	ldw	r17,124(sp)
    3a84:	40800115 	stw	r2,4(r8)
    3a88:	44000015 	stw	r16,0(r8)
    3a8c:	8c400044 	addi	r17,r17,1
    3a90:	d8c02015 	stw	r3,128(sp)
    3a94:	dc401f15 	stw	r17,124(sp)
    3a98:	008001c4 	movi	r2,7
    3a9c:	14400e16 	blt	r2,r17,3ad8 <___vfprintf_internal_r+0x15c4>
    3aa0:	45800204 	addi	r22,r8,8
    3aa4:	003eca06 	br	35d0 <__alt_data_end+0xff0035d0>
    3aa8:	01000074 	movhi	r4,1
    3aac:	2104d184 	addi	r4,r4,4934
    3ab0:	d9002b15 	stw	r4,172(sp)
    3ab4:	d8802b17 	ldw	r2,172(sp)
    3ab8:	1c07883a 	add	r3,r3,r16
    3abc:	8c400044 	addi	r17,r17,1
    3ac0:	b0800015 	stw	r2,0(r22)
    3ac4:	b4000115 	stw	r16,4(r22)
    3ac8:	d8c02015 	stw	r3,128(sp)
    3acc:	dc401f15 	stw	r17,124(sp)
    3ad0:	008001c4 	movi	r2,7
    3ad4:	147ebd0e 	bge	r2,r17,35cc <__alt_data_end+0xff0035cc>
    3ad8:	d9002c17 	ldw	r4,176(sp)
    3adc:	d9801e04 	addi	r6,sp,120
    3ae0:	b80b883a 	mov	r5,r23
    3ae4:	00092b00 	call	92b0 <__sprint_r>
    3ae8:	103b8c1e 	bne	r2,zero,291c <__alt_data_end+0xff00291c>
    3aec:	d8c02017 	ldw	r3,128(sp)
    3af0:	dc401f17 	ldw	r17,124(sp)
    3af4:	dd800404 	addi	r22,sp,16
    3af8:	003eb506 	br	35d0 <__alt_data_end+0xff0035d0>
    3afc:	d9002c17 	ldw	r4,176(sp)
    3b00:	d9801e04 	addi	r6,sp,120
    3b04:	b80b883a 	mov	r5,r23
    3b08:	00092b00 	call	92b0 <__sprint_r>
    3b0c:	103b831e 	bne	r2,zero,291c <__alt_data_end+0xff00291c>
    3b10:	d8c02017 	ldw	r3,128(sp)
    3b14:	dc401f17 	ldw	r17,124(sp)
    3b18:	da000404 	addi	r8,sp,16
    3b1c:	003e8d06 	br	3554 <__alt_data_end+0xff003554>
    3b20:	d9002c17 	ldw	r4,176(sp)
    3b24:	d9801e04 	addi	r6,sp,120
    3b28:	b80b883a 	mov	r5,r23
    3b2c:	00092b00 	call	92b0 <__sprint_r>
    3b30:	103b7a1e 	bne	r2,zero,291c <__alt_data_end+0xff00291c>
    3b34:	d8c02017 	ldw	r3,128(sp)
    3b38:	dc401f17 	ldw	r17,124(sp)
    3b3c:	dd800404 	addi	r22,sp,16
    3b40:	003e8f06 	br	3580 <__alt_data_end+0xff003580>
    3b44:	0027883a 	mov	r19,zero
    3b48:	003f4a06 	br	3874 <__alt_data_end+0xff003874>
    3b4c:	d9002c17 	ldw	r4,176(sp)
    3b50:	d9801e04 	addi	r6,sp,120
    3b54:	b80b883a 	mov	r5,r23
    3b58:	00092b00 	call	92b0 <__sprint_r>
    3b5c:	103b6f1e 	bne	r2,zero,291c <__alt_data_end+0xff00291c>
    3b60:	d8c02017 	ldw	r3,128(sp)
    3b64:	da000404 	addi	r8,sp,16
    3b68:	003c9d06 	br	2de0 <__alt_data_end+0xff002de0>
    3b6c:	04e7c83a 	sub	r19,zero,r19
    3b70:	9804c03a 	cmpne	r2,r19,zero
    3b74:	05adc83a 	sub	r22,zero,r22
    3b78:	b0adc83a 	sub	r22,r22,r2
    3b7c:	d8802917 	ldw	r2,164(sp)
    3b80:	07000b44 	movi	fp,45
    3b84:	df002785 	stb	fp,158(sp)
    3b88:	10017b16 	blt	r2,zero,4178 <___vfprintf_internal_r+0x1c64>
    3b8c:	00bfdfc4 	movi	r2,-129
    3b90:	90a4703a 	and	r18,r18,r2
    3b94:	003bb106 	br	2a5c <__alt_data_end+0xff002a5c>
    3b98:	d9003617 	ldw	r4,216(sp)
    3b9c:	d9403817 	ldw	r5,224(sp)
    3ba0:	da003d15 	stw	r8,244(sp)
    3ba4:	0008f280 	call	8f28 <__fpclassifyd>
    3ba8:	da003d17 	ldw	r8,244(sp)
    3bac:	1000f026 	beq	r2,zero,3f70 <___vfprintf_internal_r+0x1a5c>
    3bb0:	d9002917 	ldw	r4,164(sp)
    3bb4:	05bff7c4 	movi	r22,-33
    3bb8:	00bfffc4 	movi	r2,-1
    3bbc:	8dac703a 	and	r22,r17,r22
    3bc0:	20820026 	beq	r4,r2,43c4 <___vfprintf_internal_r+0x1eb0>
    3bc4:	008011c4 	movi	r2,71
    3bc8:	b081f726 	beq	r22,r2,43a8 <___vfprintf_internal_r+0x1e94>
    3bcc:	d9003817 	ldw	r4,224(sp)
    3bd0:	90c04014 	ori	r3,r18,256
    3bd4:	d8c02b15 	stw	r3,172(sp)
    3bd8:	20021516 	blt	r4,zero,4430 <___vfprintf_internal_r+0x1f1c>
    3bdc:	dcc03817 	ldw	r19,224(sp)
    3be0:	d8002a05 	stb	zero,168(sp)
    3be4:	00801984 	movi	r2,102
    3be8:	8881f926 	beq	r17,r2,43d0 <___vfprintf_internal_r+0x1ebc>
    3bec:	00801184 	movi	r2,70
    3bf0:	88821c26 	beq	r17,r2,4464 <___vfprintf_internal_r+0x1f50>
    3bf4:	00801144 	movi	r2,69
    3bf8:	b081ef26 	beq	r22,r2,43b8 <___vfprintf_internal_r+0x1ea4>
    3bfc:	d8c02917 	ldw	r3,164(sp)
    3c00:	d8802104 	addi	r2,sp,132
    3c04:	d8800315 	stw	r2,12(sp)
    3c08:	d9403617 	ldw	r5,216(sp)
    3c0c:	d8802504 	addi	r2,sp,148
    3c10:	d9002c17 	ldw	r4,176(sp)
    3c14:	d8800215 	stw	r2,8(sp)
    3c18:	d8802604 	addi	r2,sp,152
    3c1c:	d8c00015 	stw	r3,0(sp)
    3c20:	d8800115 	stw	r2,4(sp)
    3c24:	01c00084 	movi	r7,2
    3c28:	980d883a 	mov	r6,r19
    3c2c:	d8c03c15 	stw	r3,240(sp)
    3c30:	da003d15 	stw	r8,244(sp)
    3c34:	0004b380 	call	4b38 <_dtoa_r>
    3c38:	1021883a 	mov	r16,r2
    3c3c:	008019c4 	movi	r2,103
    3c40:	d8c03c17 	ldw	r3,240(sp)
    3c44:	da003d17 	ldw	r8,244(sp)
    3c48:	88817126 	beq	r17,r2,4210 <___vfprintf_internal_r+0x1cfc>
    3c4c:	008011c4 	movi	r2,71
    3c50:	88829226 	beq	r17,r2,469c <___vfprintf_internal_r+0x2188>
    3c54:	80f9883a 	add	fp,r16,r3
    3c58:	d9003617 	ldw	r4,216(sp)
    3c5c:	000d883a 	mov	r6,zero
    3c60:	000f883a 	mov	r7,zero
    3c64:	980b883a 	mov	r5,r19
    3c68:	da003d15 	stw	r8,244(sp)
    3c6c:	000cf280 	call	cf28 <__eqdf2>
    3c70:	da003d17 	ldw	r8,244(sp)
    3c74:	10018d26 	beq	r2,zero,42ac <___vfprintf_internal_r+0x1d98>
    3c78:	d8802117 	ldw	r2,132(sp)
    3c7c:	1700062e 	bgeu	r2,fp,3c98 <___vfprintf_internal_r+0x1784>
    3c80:	01000c04 	movi	r4,48
    3c84:	10c00044 	addi	r3,r2,1
    3c88:	d8c02115 	stw	r3,132(sp)
    3c8c:	11000005 	stb	r4,0(r2)
    3c90:	d8802117 	ldw	r2,132(sp)
    3c94:	173ffb36 	bltu	r2,fp,3c84 <__alt_data_end+0xff003c84>
    3c98:	1405c83a 	sub	r2,r2,r16
    3c9c:	d8803315 	stw	r2,204(sp)
    3ca0:	008011c4 	movi	r2,71
    3ca4:	b0817626 	beq	r22,r2,4280 <___vfprintf_internal_r+0x1d6c>
    3ca8:	00801944 	movi	r2,101
    3cac:	1442810e 	bge	r2,r17,46b4 <___vfprintf_internal_r+0x21a0>
    3cb0:	d8c02617 	ldw	r3,152(sp)
    3cb4:	00801984 	movi	r2,102
    3cb8:	d8c03215 	stw	r3,200(sp)
    3cbc:	8881fe26 	beq	r17,r2,44b8 <___vfprintf_internal_r+0x1fa4>
    3cc0:	d8c03217 	ldw	r3,200(sp)
    3cc4:	d9003317 	ldw	r4,204(sp)
    3cc8:	1901dd16 	blt	r3,r4,4440 <___vfprintf_internal_r+0x1f2c>
    3ccc:	9480004c 	andi	r18,r18,1
    3cd0:	90022b1e 	bne	r18,zero,4580 <___vfprintf_internal_r+0x206c>
    3cd4:	1805883a 	mov	r2,r3
    3cd8:	18028016 	blt	r3,zero,46dc <___vfprintf_internal_r+0x21c8>
    3cdc:	d8c03217 	ldw	r3,200(sp)
    3ce0:	044019c4 	movi	r17,103
    3ce4:	d8c02e15 	stw	r3,184(sp)
    3ce8:	df002a07 	ldb	fp,168(sp)
    3cec:	e001531e 	bne	fp,zero,423c <___vfprintf_internal_r+0x1d28>
    3cf0:	df002783 	ldbu	fp,158(sp)
    3cf4:	d8802a15 	stw	r2,168(sp)
    3cf8:	dc802b17 	ldw	r18,172(sp)
    3cfc:	d8002915 	stw	zero,164(sp)
    3d00:	003bd106 	br	2c48 <__alt_data_end+0xff002c48>
    3d04:	d8802d17 	ldw	r2,180(sp)
    3d08:	d8c02d17 	ldw	r3,180(sp)
    3d0c:	d9002d17 	ldw	r4,180(sp)
    3d10:	10800017 	ldw	r2,0(r2)
    3d14:	18c00117 	ldw	r3,4(r3)
    3d18:	21000204 	addi	r4,r4,8
    3d1c:	d8803615 	stw	r2,216(sp)
    3d20:	d8c03815 	stw	r3,224(sp)
    3d24:	d9002d15 	stw	r4,180(sp)
    3d28:	003b7506 	br	2b00 <__alt_data_end+0xff002b00>
    3d2c:	ac400007 	ldb	r17,0(r21)
    3d30:	003a5906 	br	2698 <__alt_data_end+0xff002698>
    3d34:	9080100c 	andi	r2,r18,64
    3d38:	1000a826 	beq	r2,zero,3fdc <___vfprintf_internal_r+0x1ac8>
    3d3c:	d9002d17 	ldw	r4,180(sp)
    3d40:	002d883a 	mov	r22,zero
    3d44:	24c0000b 	ldhu	r19,0(r4)
    3d48:	21000104 	addi	r4,r4,4
    3d4c:	d9002d15 	stw	r4,180(sp)
    3d50:	003ccb06 	br	3080 <__alt_data_end+0xff003080>
    3d54:	d8c02d17 	ldw	r3,180(sp)
    3d58:	d9002917 	ldw	r4,164(sp)
    3d5c:	002d883a 	mov	r22,zero
    3d60:	18800104 	addi	r2,r3,4
    3d64:	1cc00017 	ldw	r19,0(r3)
    3d68:	203ebb0e 	bge	r4,zero,3858 <__alt_data_end+0xff003858>
    3d6c:	003ef106 	br	3934 <__alt_data_end+0xff003934>
    3d70:	9080040c 	andi	r2,r18,16
    3d74:	1000921e 	bne	r2,zero,3fc0 <___vfprintf_internal_r+0x1aac>
    3d78:	9480100c 	andi	r18,r18,64
    3d7c:	90013926 	beq	r18,zero,4264 <___vfprintf_internal_r+0x1d50>
    3d80:	d9002d17 	ldw	r4,180(sp)
    3d84:	d9402f17 	ldw	r5,188(sp)
    3d88:	20800017 	ldw	r2,0(r4)
    3d8c:	21000104 	addi	r4,r4,4
    3d90:	d9002d15 	stw	r4,180(sp)
    3d94:	1140000d 	sth	r5,0(r2)
    3d98:	003a1606 	br	25f4 <__alt_data_end+0xff0025f4>
    3d9c:	9080100c 	andi	r2,r18,64
    3da0:	10008026 	beq	r2,zero,3fa4 <___vfprintf_internal_r+0x1a90>
    3da4:	d8c02d17 	ldw	r3,180(sp)
    3da8:	1cc0000f 	ldh	r19,0(r3)
    3dac:	18c00104 	addi	r3,r3,4
    3db0:	d8c02d15 	stw	r3,180(sp)
    3db4:	982dd7fa 	srai	r22,r19,31
    3db8:	b005883a 	mov	r2,r22
    3dbc:	003b1f06 	br	2a3c <__alt_data_end+0xff002a3c>
    3dc0:	9080100c 	andi	r2,r18,64
    3dc4:	d8002785 	stb	zero,158(sp)
    3dc8:	10008a1e 	bne	r2,zero,3ff4 <___vfprintf_internal_r+0x1ae0>
    3dcc:	d9402d17 	ldw	r5,180(sp)
    3dd0:	d8c02917 	ldw	r3,164(sp)
    3dd4:	002d883a 	mov	r22,zero
    3dd8:	28800104 	addi	r2,r5,4
    3ddc:	2cc00017 	ldw	r19,0(r5)
    3de0:	183e4b0e 	bge	r3,zero,3710 <__alt_data_end+0xff003710>
    3de4:	9d86b03a 	or	r3,r19,r22
    3de8:	d8802d15 	stw	r2,180(sp)
    3dec:	183e4c1e 	bne	r3,zero,3720 <__alt_data_end+0xff003720>
    3df0:	0039883a 	mov	fp,zero
    3df4:	0005883a 	mov	r2,zero
    3df8:	003d4006 	br	32fc <__alt_data_end+0xff0032fc>
    3dfc:	01400074 	movhi	r5,1
    3e00:	2944d184 	addi	r5,r5,4934
    3e04:	d9402b15 	stw	r5,172(sp)
    3e08:	d9402b17 	ldw	r5,172(sp)
    3e0c:	1c47883a 	add	r3,r3,r17
    3e10:	10800044 	addi	r2,r2,1
    3e14:	41400015 	stw	r5,0(r8)
    3e18:	44400115 	stw	r17,4(r8)
    3e1c:	d8c02015 	stw	r3,128(sp)
    3e20:	d8801f15 	stw	r2,124(sp)
    3e24:	010001c4 	movi	r4,7
    3e28:	20bec816 	blt	r4,r2,394c <__alt_data_end+0xff00394c>
    3e2c:	42000204 	addi	r8,r8,8
    3e30:	003ecd06 	br	3968 <__alt_data_end+0xff003968>
    3e34:	d9002917 	ldw	r4,164(sp)
    3e38:	d8002785 	stb	zero,158(sp)
    3e3c:	203d2d16 	blt	r4,zero,32f4 <__alt_data_end+0xff0032f4>
    3e40:	00bfdfc4 	movi	r2,-129
    3e44:	90a4703a 	and	r18,r18,r2
    3e48:	003a9106 	br	2890 <__alt_data_end+0xff002890>
    3e4c:	01000074 	movhi	r4,1
    3e50:	2104d184 	addi	r4,r4,4934
    3e54:	d9002b15 	stw	r4,172(sp)
    3e58:	003c0c06 	br	2e8c <__alt_data_end+0xff002e8c>
    3e5c:	d9002c17 	ldw	r4,176(sp)
    3e60:	d9801e04 	addi	r6,sp,120
    3e64:	b80b883a 	mov	r5,r23
    3e68:	00092b00 	call	92b0 <__sprint_r>
    3e6c:	103aab1e 	bne	r2,zero,291c <__alt_data_end+0xff00291c>
    3e70:	d8c02017 	ldw	r3,128(sp)
    3e74:	da000404 	addi	r8,sp,16
    3e78:	003d4106 	br	3380 <__alt_data_end+0xff003380>
    3e7c:	d8801f17 	ldw	r2,124(sp)
    3e80:	01400074 	movhi	r5,1
    3e84:	01000044 	movi	r4,1
    3e88:	18c00044 	addi	r3,r3,1
    3e8c:	10800044 	addi	r2,r2,1
    3e90:	2944d104 	addi	r5,r5,4932
    3e94:	41000115 	stw	r4,4(r8)
    3e98:	41400015 	stw	r5,0(r8)
    3e9c:	d8c02015 	stw	r3,128(sp)
    3ea0:	d8801f15 	stw	r2,124(sp)
    3ea4:	010001c4 	movi	r4,7
    3ea8:	20805c16 	blt	r4,r2,401c <___vfprintf_internal_r+0x1b08>
    3eac:	42000204 	addi	r8,r8,8
    3eb0:	8800041e 	bne	r17,zero,3ec4 <___vfprintf_internal_r+0x19b0>
    3eb4:	d8803317 	ldw	r2,204(sp)
    3eb8:	1000021e 	bne	r2,zero,3ec4 <___vfprintf_internal_r+0x19b0>
    3ebc:	9080004c 	andi	r2,r18,1
    3ec0:	103c0926 	beq	r2,zero,2ee8 <__alt_data_end+0xff002ee8>
    3ec4:	d9003717 	ldw	r4,220(sp)
    3ec8:	d8801f17 	ldw	r2,124(sp)
    3ecc:	d9403417 	ldw	r5,208(sp)
    3ed0:	20c7883a 	add	r3,r4,r3
    3ed4:	10800044 	addi	r2,r2,1
    3ed8:	41000115 	stw	r4,4(r8)
    3edc:	41400015 	stw	r5,0(r8)
    3ee0:	d8c02015 	stw	r3,128(sp)
    3ee4:	d8801f15 	stw	r2,124(sp)
    3ee8:	010001c4 	movi	r4,7
    3eec:	20812116 	blt	r4,r2,4374 <___vfprintf_internal_r+0x1e60>
    3ef0:	42000204 	addi	r8,r8,8
    3ef4:	0463c83a 	sub	r17,zero,r17
    3ef8:	0440730e 	bge	zero,r17,40c8 <___vfprintf_internal_r+0x1bb4>
    3efc:	05800404 	movi	r22,16
    3f00:	b440860e 	bge	r22,r17,411c <___vfprintf_internal_r+0x1c08>
    3f04:	01400074 	movhi	r5,1
    3f08:	2944d184 	addi	r5,r5,4934
    3f0c:	d9402b15 	stw	r5,172(sp)
    3f10:	070001c4 	movi	fp,7
    3f14:	dcc02c17 	ldw	r19,176(sp)
    3f18:	00000306 	br	3f28 <___vfprintf_internal_r+0x1a14>
    3f1c:	42000204 	addi	r8,r8,8
    3f20:	8c7ffc04 	addi	r17,r17,-16
    3f24:	b440800e 	bge	r22,r17,4128 <___vfprintf_internal_r+0x1c14>
    3f28:	18c00404 	addi	r3,r3,16
    3f2c:	10800044 	addi	r2,r2,1
    3f30:	45000015 	stw	r20,0(r8)
    3f34:	45800115 	stw	r22,4(r8)
    3f38:	d8c02015 	stw	r3,128(sp)
    3f3c:	d8801f15 	stw	r2,124(sp)
    3f40:	e0bff60e 	bge	fp,r2,3f1c <__alt_data_end+0xff003f1c>
    3f44:	d9801e04 	addi	r6,sp,120
    3f48:	b80b883a 	mov	r5,r23
    3f4c:	9809883a 	mov	r4,r19
    3f50:	00092b00 	call	92b0 <__sprint_r>
    3f54:	103a711e 	bne	r2,zero,291c <__alt_data_end+0xff00291c>
    3f58:	d8c02017 	ldw	r3,128(sp)
    3f5c:	d8801f17 	ldw	r2,124(sp)
    3f60:	da000404 	addi	r8,sp,16
    3f64:	003fee06 	br	3f20 <__alt_data_end+0xff003f20>
    3f68:	00bfffc4 	movi	r2,-1
    3f6c:	003a6f06 	br	292c <__alt_data_end+0xff00292c>
    3f70:	008011c4 	movi	r2,71
    3f74:	1440b816 	blt	r2,r17,4258 <___vfprintf_internal_r+0x1d44>
    3f78:	04000074 	movhi	r16,1
    3f7c:	8404c304 	addi	r16,r16,4876
    3f80:	00c000c4 	movi	r3,3
    3f84:	00bfdfc4 	movi	r2,-129
    3f88:	d8c02a15 	stw	r3,168(sp)
    3f8c:	90a4703a 	and	r18,r18,r2
    3f90:	df002783 	ldbu	fp,158(sp)
    3f94:	d8c02e15 	stw	r3,184(sp)
    3f98:	d8002915 	stw	zero,164(sp)
    3f9c:	d8003215 	stw	zero,200(sp)
    3fa0:	003b2906 	br	2c48 <__alt_data_end+0xff002c48>
    3fa4:	d9002d17 	ldw	r4,180(sp)
    3fa8:	24c00017 	ldw	r19,0(r4)
    3fac:	21000104 	addi	r4,r4,4
    3fb0:	d9002d15 	stw	r4,180(sp)
    3fb4:	982dd7fa 	srai	r22,r19,31
    3fb8:	b005883a 	mov	r2,r22
    3fbc:	003a9f06 	br	2a3c <__alt_data_end+0xff002a3c>
    3fc0:	d9402d17 	ldw	r5,180(sp)
    3fc4:	d8c02f17 	ldw	r3,188(sp)
    3fc8:	28800017 	ldw	r2,0(r5)
    3fcc:	29400104 	addi	r5,r5,4
    3fd0:	d9402d15 	stw	r5,180(sp)
    3fd4:	10c00015 	stw	r3,0(r2)
    3fd8:	00398606 	br	25f4 <__alt_data_end+0xff0025f4>
    3fdc:	d9402d17 	ldw	r5,180(sp)
    3fe0:	002d883a 	mov	r22,zero
    3fe4:	2cc00017 	ldw	r19,0(r5)
    3fe8:	29400104 	addi	r5,r5,4
    3fec:	d9402d15 	stw	r5,180(sp)
    3ff0:	003c2306 	br	3080 <__alt_data_end+0xff003080>
    3ff4:	d8c02d17 	ldw	r3,180(sp)
    3ff8:	d9002917 	ldw	r4,164(sp)
    3ffc:	002d883a 	mov	r22,zero
    4000:	18800104 	addi	r2,r3,4
    4004:	1cc0000b 	ldhu	r19,0(r3)
    4008:	203dc10e 	bge	r4,zero,3710 <__alt_data_end+0xff003710>
    400c:	003f7506 	br	3de4 <__alt_data_end+0xff003de4>
    4010:	04000074 	movhi	r16,1
    4014:	8404c104 	addi	r16,r16,4868
    4018:	003acc06 	br	2b4c <__alt_data_end+0xff002b4c>
    401c:	d9002c17 	ldw	r4,176(sp)
    4020:	d9801e04 	addi	r6,sp,120
    4024:	b80b883a 	mov	r5,r23
    4028:	00092b00 	call	92b0 <__sprint_r>
    402c:	103a3b1e 	bne	r2,zero,291c <__alt_data_end+0xff00291c>
    4030:	dc402617 	ldw	r17,152(sp)
    4034:	d8c02017 	ldw	r3,128(sp)
    4038:	da000404 	addi	r8,sp,16
    403c:	003f9c06 	br	3eb0 <__alt_data_end+0xff003eb0>
    4040:	ac400043 	ldbu	r17,1(r21)
    4044:	94800814 	ori	r18,r18,32
    4048:	ad400044 	addi	r21,r21,1
    404c:	8c403fcc 	andi	r17,r17,255
    4050:	8c40201c 	xori	r17,r17,128
    4054:	8c7fe004 	addi	r17,r17,-128
    4058:	00398f06 	br	2698 <__alt_data_end+0xff002698>
    405c:	d8c02d15 	stw	r3,180(sp)
    4060:	0039883a 	mov	fp,zero
    4064:	003e3506 	br	393c <__alt_data_end+0xff00393c>
    4068:	d9002c17 	ldw	r4,176(sp)
    406c:	d9801e04 	addi	r6,sp,120
    4070:	b80b883a 	mov	r5,r23
    4074:	00092b00 	call	92b0 <__sprint_r>
    4078:	103a281e 	bne	r2,zero,291c <__alt_data_end+0xff00291c>
    407c:	d8c02017 	ldw	r3,128(sp)
    4080:	da000404 	addi	r8,sp,16
    4084:	003cd006 	br	33c8 <__alt_data_end+0xff0033c8>
    4088:	8009883a 	mov	r4,r16
    408c:	da003d15 	stw	r8,244(sp)
    4090:	000247c0 	call	247c <strlen>
    4094:	d8802e15 	stw	r2,184(sp)
    4098:	da003d17 	ldw	r8,244(sp)
    409c:	103c340e 	bge	r2,zero,3170 <__alt_data_end+0xff003170>
    40a0:	0005883a 	mov	r2,zero
    40a4:	003c3206 	br	3170 <__alt_data_end+0xff003170>
    40a8:	d9002c17 	ldw	r4,176(sp)
    40ac:	d9801e04 	addi	r6,sp,120
    40b0:	b80b883a 	mov	r5,r23
    40b4:	00092b00 	call	92b0 <__sprint_r>
    40b8:	103a181e 	bne	r2,zero,291c <__alt_data_end+0xff00291c>
    40bc:	d8c02017 	ldw	r3,128(sp)
    40c0:	d8801f17 	ldw	r2,124(sp)
    40c4:	da000404 	addi	r8,sp,16
    40c8:	d9403317 	ldw	r5,204(sp)
    40cc:	10800044 	addi	r2,r2,1
    40d0:	44000015 	stw	r16,0(r8)
    40d4:	28c7883a 	add	r3,r5,r3
    40d8:	003b7d06 	br	2ed0 <__alt_data_end+0xff002ed0>
    40dc:	01000074 	movhi	r4,1
    40e0:	2104d584 	addi	r4,r4,4950
    40e4:	d9003515 	stw	r4,212(sp)
    40e8:	003b1406 	br	2d3c <__alt_data_end+0xff002d3c>
    40ec:	013fffc4 	movi	r4,-1
    40f0:	003a3506 	br	29c8 <__alt_data_end+0xff0029c8>
    40f4:	0023883a 	mov	r17,zero
    40f8:	003d9d06 	br	3770 <__alt_data_end+0xff003770>
    40fc:	d9002c17 	ldw	r4,176(sp)
    4100:	d9801e04 	addi	r6,sp,120
    4104:	b80b883a 	mov	r5,r23
    4108:	00092b00 	call	92b0 <__sprint_r>
    410c:	103a031e 	bne	r2,zero,291c <__alt_data_end+0xff00291c>
    4110:	d8c02017 	ldw	r3,128(sp)
    4114:	da000404 	addi	r8,sp,16
    4118:	003d9406 	br	376c <__alt_data_end+0xff00376c>
    411c:	01000074 	movhi	r4,1
    4120:	2104d184 	addi	r4,r4,4934
    4124:	d9002b15 	stw	r4,172(sp)
    4128:	d9002b17 	ldw	r4,172(sp)
    412c:	1c47883a 	add	r3,r3,r17
    4130:	10800044 	addi	r2,r2,1
    4134:	41000015 	stw	r4,0(r8)
    4138:	44400115 	stw	r17,4(r8)
    413c:	d8c02015 	stw	r3,128(sp)
    4140:	d8801f15 	stw	r2,124(sp)
    4144:	010001c4 	movi	r4,7
    4148:	20bfd716 	blt	r4,r2,40a8 <__alt_data_end+0xff0040a8>
    414c:	42000204 	addi	r8,r8,8
    4150:	003fdd06 	br	40c8 <__alt_data_end+0xff0040c8>
    4154:	d9002c17 	ldw	r4,176(sp)
    4158:	d9801e04 	addi	r6,sp,120
    415c:	b80b883a 	mov	r5,r23
    4160:	00092b00 	call	92b0 <__sprint_r>
    4164:	1039ed1e 	bne	r2,zero,291c <__alt_data_end+0xff00291c>
    4168:	d8802617 	ldw	r2,152(sp)
    416c:	d8c02017 	ldw	r3,128(sp)
    4170:	da000404 	addi	r8,sp,16
    4174:	003e1006 	br	39b8 <__alt_data_end+0xff0039b8>
    4178:	00800044 	movi	r2,1
    417c:	10803fcc 	andi	r2,r2,255
    4180:	00c00044 	movi	r3,1
    4184:	10fa3526 	beq	r2,r3,2a5c <__alt_data_end+0xff002a5c>
    4188:	00c00084 	movi	r3,2
    418c:	10fbcb26 	beq	r2,r3,30bc <__alt_data_end+0xff0030bc>
    4190:	003a8f06 	br	2bd0 <__alt_data_end+0xff002bd0>
    4194:	01000074 	movhi	r4,1
    4198:	2104d584 	addi	r4,r4,4950
    419c:	d9003515 	stw	r4,212(sp)
    41a0:	003b7606 	br	2f7c <__alt_data_end+0xff002f7c>
    41a4:	d8802917 	ldw	r2,164(sp)
    41a8:	00c00184 	movi	r3,6
    41ac:	1880012e 	bgeu	r3,r2,41b4 <___vfprintf_internal_r+0x1ca0>
    41b0:	1805883a 	mov	r2,r3
    41b4:	d8802e15 	stw	r2,184(sp)
    41b8:	1000ef16 	blt	r2,zero,4578 <___vfprintf_internal_r+0x2064>
    41bc:	04000074 	movhi	r16,1
    41c0:	d8802a15 	stw	r2,168(sp)
    41c4:	dcc02d15 	stw	r19,180(sp)
    41c8:	d8002915 	stw	zero,164(sp)
    41cc:	d8003215 	stw	zero,200(sp)
    41d0:	8404cf04 	addi	r16,r16,4924
    41d4:	0039883a 	mov	fp,zero
    41d8:	003aa206 	br	2c64 <__alt_data_end+0xff002c64>
    41dc:	0021883a 	mov	r16,zero
    41e0:	003e0706 	br	3a00 <__alt_data_end+0xff003a00>
    41e4:	d9002c17 	ldw	r4,176(sp)
    41e8:	d9801e04 	addi	r6,sp,120
    41ec:	b80b883a 	mov	r5,r23
    41f0:	00092b00 	call	92b0 <__sprint_r>
    41f4:	1039c91e 	bne	r2,zero,291c <__alt_data_end+0xff00291c>
    41f8:	d8802617 	ldw	r2,152(sp)
    41fc:	d9403317 	ldw	r5,204(sp)
    4200:	d8c02017 	ldw	r3,128(sp)
    4204:	da000404 	addi	r8,sp,16
    4208:	2885c83a 	sub	r2,r5,r2
    420c:	003dfb06 	br	39fc <__alt_data_end+0xff0039fc>
    4210:	9080004c 	andi	r2,r18,1
    4214:	103e8f1e 	bne	r2,zero,3c54 <__alt_data_end+0xff003c54>
    4218:	d8802117 	ldw	r2,132(sp)
    421c:	003e9e06 	br	3c98 <__alt_data_end+0xff003c98>
    4220:	1025883a 	mov	r18,r2
    4224:	0039883a 	mov	fp,zero
    4228:	00800084 	movi	r2,2
    422c:	003fd306 	br	417c <__alt_data_end+0xff00417c>
    4230:	07000b44 	movi	fp,45
    4234:	df002785 	stb	fp,158(sp)
    4238:	003a4006 	br	2b3c <__alt_data_end+0xff002b3c>
    423c:	00c00b44 	movi	r3,45
    4240:	d8c02785 	stb	r3,158(sp)
    4244:	d8802a15 	stw	r2,168(sp)
    4248:	dc802b17 	ldw	r18,172(sp)
    424c:	d8002915 	stw	zero,164(sp)
    4250:	07000b44 	movi	fp,45
    4254:	003a8006 	br	2c58 <__alt_data_end+0xff002c58>
    4258:	04000074 	movhi	r16,1
    425c:	8404c404 	addi	r16,r16,4880
    4260:	003f4706 	br	3f80 <__alt_data_end+0xff003f80>
    4264:	d8c02d17 	ldw	r3,180(sp)
    4268:	d9002f17 	ldw	r4,188(sp)
    426c:	18800017 	ldw	r2,0(r3)
    4270:	18c00104 	addi	r3,r3,4
    4274:	d8c02d15 	stw	r3,180(sp)
    4278:	11000015 	stw	r4,0(r2)
    427c:	0038dd06 	br	25f4 <__alt_data_end+0xff0025f4>
    4280:	dd802617 	ldw	r22,152(sp)
    4284:	00bfff44 	movi	r2,-3
    4288:	b0801c16 	blt	r22,r2,42fc <___vfprintf_internal_r+0x1de8>
    428c:	d9402917 	ldw	r5,164(sp)
    4290:	2d801a16 	blt	r5,r22,42fc <___vfprintf_internal_r+0x1de8>
    4294:	dd803215 	stw	r22,200(sp)
    4298:	003e8906 	br	3cc0 <__alt_data_end+0xff003cc0>
    429c:	01000074 	movhi	r4,1
    42a0:	2104d184 	addi	r4,r4,4934
    42a4:	d9002b15 	stw	r4,172(sp)
    42a8:	003c9106 	br	34f0 <__alt_data_end+0xff0034f0>
    42ac:	e005883a 	mov	r2,fp
    42b0:	003e7906 	br	3c98 <__alt_data_end+0xff003c98>
    42b4:	d9402917 	ldw	r5,164(sp)
    42b8:	df002783 	ldbu	fp,158(sp)
    42bc:	dcc02d15 	stw	r19,180(sp)
    42c0:	d9402a15 	stw	r5,168(sp)
    42c4:	d9402e15 	stw	r5,184(sp)
    42c8:	d8002915 	stw	zero,164(sp)
    42cc:	d8003215 	stw	zero,200(sp)
    42d0:	003a5d06 	br	2c48 <__alt_data_end+0xff002c48>
    42d4:	9080004c 	andi	r2,r18,1
    42d8:	0039883a 	mov	fp,zero
    42dc:	10000426 	beq	r2,zero,42f0 <___vfprintf_internal_r+0x1ddc>
    42e0:	00800c04 	movi	r2,48
    42e4:	dc001dc4 	addi	r16,sp,119
    42e8:	d8801dc5 	stb	r2,119(sp)
    42ec:	003b8006 	br	30f0 <__alt_data_end+0xff0030f0>
    42f0:	d8002e15 	stw	zero,184(sp)
    42f4:	dc001e04 	addi	r16,sp,120
    42f8:	003a4d06 	br	2c30 <__alt_data_end+0xff002c30>
    42fc:	8c7fff84 	addi	r17,r17,-2
    4300:	b5bfffc4 	addi	r22,r22,-1
    4304:	dd802615 	stw	r22,152(sp)
    4308:	dc4022c5 	stb	r17,139(sp)
    430c:	b000bf16 	blt	r22,zero,460c <___vfprintf_internal_r+0x20f8>
    4310:	00800ac4 	movi	r2,43
    4314:	d8802305 	stb	r2,140(sp)
    4318:	00800244 	movi	r2,9
    431c:	15807016 	blt	r2,r22,44e0 <___vfprintf_internal_r+0x1fcc>
    4320:	00800c04 	movi	r2,48
    4324:	b5800c04 	addi	r22,r22,48
    4328:	d8802345 	stb	r2,141(sp)
    432c:	dd802385 	stb	r22,142(sp)
    4330:	d88023c4 	addi	r2,sp,143
    4334:	df0022c4 	addi	fp,sp,139
    4338:	d8c03317 	ldw	r3,204(sp)
    433c:	1739c83a 	sub	fp,r2,fp
    4340:	d9003317 	ldw	r4,204(sp)
    4344:	e0c7883a 	add	r3,fp,r3
    4348:	df003a15 	stw	fp,232(sp)
    434c:	d8c02e15 	stw	r3,184(sp)
    4350:	00800044 	movi	r2,1
    4354:	1100b30e 	bge	r2,r4,4624 <___vfprintf_internal_r+0x2110>
    4358:	d8c02e17 	ldw	r3,184(sp)
    435c:	18c00044 	addi	r3,r3,1
    4360:	d8c02e15 	stw	r3,184(sp)
    4364:	1805883a 	mov	r2,r3
    4368:	1800ac16 	blt	r3,zero,461c <___vfprintf_internal_r+0x2108>
    436c:	d8003215 	stw	zero,200(sp)
    4370:	003e5d06 	br	3ce8 <__alt_data_end+0xff003ce8>
    4374:	d9002c17 	ldw	r4,176(sp)
    4378:	d9801e04 	addi	r6,sp,120
    437c:	b80b883a 	mov	r5,r23
    4380:	00092b00 	call	92b0 <__sprint_r>
    4384:	1039651e 	bne	r2,zero,291c <__alt_data_end+0xff00291c>
    4388:	dc402617 	ldw	r17,152(sp)
    438c:	d8c02017 	ldw	r3,128(sp)
    4390:	d8801f17 	ldw	r2,124(sp)
    4394:	da000404 	addi	r8,sp,16
    4398:	003ed606 	br	3ef4 <__alt_data_end+0xff003ef4>
    439c:	582b883a 	mov	r21,r11
    43a0:	d8002915 	stw	zero,164(sp)
    43a4:	0038bd06 	br	269c <__alt_data_end+0xff00269c>
    43a8:	d8802917 	ldw	r2,164(sp)
    43ac:	103e071e 	bne	r2,zero,3bcc <__alt_data_end+0xff003bcc>
    43b0:	dc002915 	stw	r16,164(sp)
    43b4:	003e0506 	br	3bcc <__alt_data_end+0xff003bcc>
    43b8:	d9002917 	ldw	r4,164(sp)
    43bc:	20c00044 	addi	r3,r4,1
    43c0:	003e0f06 	br	3c00 <__alt_data_end+0xff003c00>
    43c4:	01400184 	movi	r5,6
    43c8:	d9402915 	stw	r5,164(sp)
    43cc:	003dff06 	br	3bcc <__alt_data_end+0xff003bcc>
    43d0:	d8802104 	addi	r2,sp,132
    43d4:	d8800315 	stw	r2,12(sp)
    43d8:	d8802504 	addi	r2,sp,148
    43dc:	d8800215 	stw	r2,8(sp)
    43e0:	d8802604 	addi	r2,sp,152
    43e4:	d8800115 	stw	r2,4(sp)
    43e8:	d8802917 	ldw	r2,164(sp)
    43ec:	d9403617 	ldw	r5,216(sp)
    43f0:	d9002c17 	ldw	r4,176(sp)
    43f4:	d8800015 	stw	r2,0(sp)
    43f8:	01c000c4 	movi	r7,3
    43fc:	980d883a 	mov	r6,r19
    4400:	da003d15 	stw	r8,244(sp)
    4404:	0004b380 	call	4b38 <_dtoa_r>
    4408:	d8c02917 	ldw	r3,164(sp)
    440c:	da003d17 	ldw	r8,244(sp)
    4410:	1021883a 	mov	r16,r2
    4414:	10f9883a 	add	fp,r2,r3
    4418:	81000007 	ldb	r4,0(r16)
    441c:	00800c04 	movi	r2,48
    4420:	20805e26 	beq	r4,r2,459c <___vfprintf_internal_r+0x2088>
    4424:	d8c02617 	ldw	r3,152(sp)
    4428:	e0f9883a 	add	fp,fp,r3
    442c:	003e0a06 	br	3c58 <__alt_data_end+0xff003c58>
    4430:	00c00b44 	movi	r3,45
    4434:	24e0003c 	xorhi	r19,r4,32768
    4438:	d8c02a05 	stb	r3,168(sp)
    443c:	003de906 	br	3be4 <__alt_data_end+0xff003be4>
    4440:	d8c03217 	ldw	r3,200(sp)
    4444:	00c07a0e 	bge	zero,r3,4630 <___vfprintf_internal_r+0x211c>
    4448:	00800044 	movi	r2,1
    444c:	d9003317 	ldw	r4,204(sp)
    4450:	1105883a 	add	r2,r2,r4
    4454:	d8802e15 	stw	r2,184(sp)
    4458:	10004e16 	blt	r2,zero,4594 <___vfprintf_internal_r+0x2080>
    445c:	044019c4 	movi	r17,103
    4460:	003e2106 	br	3ce8 <__alt_data_end+0xff003ce8>
    4464:	d9002917 	ldw	r4,164(sp)
    4468:	d8802104 	addi	r2,sp,132
    446c:	d8800315 	stw	r2,12(sp)
    4470:	d9000015 	stw	r4,0(sp)
    4474:	d8802504 	addi	r2,sp,148
    4478:	d9403617 	ldw	r5,216(sp)
    447c:	d9002c17 	ldw	r4,176(sp)
    4480:	d8800215 	stw	r2,8(sp)
    4484:	d8802604 	addi	r2,sp,152
    4488:	d8800115 	stw	r2,4(sp)
    448c:	01c000c4 	movi	r7,3
    4490:	980d883a 	mov	r6,r19
    4494:	da003d15 	stw	r8,244(sp)
    4498:	0004b380 	call	4b38 <_dtoa_r>
    449c:	d8c02917 	ldw	r3,164(sp)
    44a0:	da003d17 	ldw	r8,244(sp)
    44a4:	1021883a 	mov	r16,r2
    44a8:	00801184 	movi	r2,70
    44ac:	80f9883a 	add	fp,r16,r3
    44b0:	88bfd926 	beq	r17,r2,4418 <__alt_data_end+0xff004418>
    44b4:	003de806 	br	3c58 <__alt_data_end+0xff003c58>
    44b8:	d9002917 	ldw	r4,164(sp)
    44bc:	00c04d0e 	bge	zero,r3,45f4 <___vfprintf_internal_r+0x20e0>
    44c0:	2000441e 	bne	r4,zero,45d4 <___vfprintf_internal_r+0x20c0>
    44c4:	9480004c 	andi	r18,r18,1
    44c8:	9000421e 	bne	r18,zero,45d4 <___vfprintf_internal_r+0x20c0>
    44cc:	1805883a 	mov	r2,r3
    44d0:	18007016 	blt	r3,zero,4694 <___vfprintf_internal_r+0x2180>
    44d4:	d8c03217 	ldw	r3,200(sp)
    44d8:	d8c02e15 	stw	r3,184(sp)
    44dc:	003e0206 	br	3ce8 <__alt_data_end+0xff003ce8>
    44e0:	df0022c4 	addi	fp,sp,139
    44e4:	dc002915 	stw	r16,164(sp)
    44e8:	4027883a 	mov	r19,r8
    44ec:	e021883a 	mov	r16,fp
    44f0:	b009883a 	mov	r4,r22
    44f4:	01400284 	movi	r5,10
    44f8:	000bc640 	call	bc64 <__modsi3>
    44fc:	10800c04 	addi	r2,r2,48
    4500:	843fffc4 	addi	r16,r16,-1
    4504:	b009883a 	mov	r4,r22
    4508:	01400284 	movi	r5,10
    450c:	80800005 	stb	r2,0(r16)
    4510:	000bbe00 	call	bbe0 <__divsi3>
    4514:	102d883a 	mov	r22,r2
    4518:	00800244 	movi	r2,9
    451c:	15bff416 	blt	r2,r22,44f0 <__alt_data_end+0xff0044f0>
    4520:	9811883a 	mov	r8,r19
    4524:	b0800c04 	addi	r2,r22,48
    4528:	8027883a 	mov	r19,r16
    452c:	997fffc4 	addi	r5,r19,-1
    4530:	98bfffc5 	stb	r2,-1(r19)
    4534:	dc002917 	ldw	r16,164(sp)
    4538:	2f006a2e 	bgeu	r5,fp,46e4 <___vfprintf_internal_r+0x21d0>
    453c:	d9c02384 	addi	r7,sp,142
    4540:	3ccfc83a 	sub	r7,r7,r19
    4544:	d9002344 	addi	r4,sp,141
    4548:	e1cf883a 	add	r7,fp,r7
    454c:	00000106 	br	4554 <___vfprintf_internal_r+0x2040>
    4550:	28800003 	ldbu	r2,0(r5)
    4554:	20800005 	stb	r2,0(r4)
    4558:	21000044 	addi	r4,r4,1
    455c:	29400044 	addi	r5,r5,1
    4560:	393ffb1e 	bne	r7,r4,4550 <__alt_data_end+0xff004550>
    4564:	d8802304 	addi	r2,sp,140
    4568:	14c5c83a 	sub	r2,r2,r19
    456c:	d8c02344 	addi	r3,sp,141
    4570:	1885883a 	add	r2,r3,r2
    4574:	003f7006 	br	4338 <__alt_data_end+0xff004338>
    4578:	0005883a 	mov	r2,zero
    457c:	003f0f06 	br	41bc <__alt_data_end+0xff0041bc>
    4580:	d8c03217 	ldw	r3,200(sp)
    4584:	18c00044 	addi	r3,r3,1
    4588:	d8c02e15 	stw	r3,184(sp)
    458c:	1805883a 	mov	r2,r3
    4590:	183fb20e 	bge	r3,zero,445c <__alt_data_end+0xff00445c>
    4594:	0005883a 	mov	r2,zero
    4598:	003fb006 	br	445c <__alt_data_end+0xff00445c>
    459c:	d9003617 	ldw	r4,216(sp)
    45a0:	000d883a 	mov	r6,zero
    45a4:	000f883a 	mov	r7,zero
    45a8:	980b883a 	mov	r5,r19
    45ac:	d8c03c15 	stw	r3,240(sp)
    45b0:	da003d15 	stw	r8,244(sp)
    45b4:	000cf280 	call	cf28 <__eqdf2>
    45b8:	d8c03c17 	ldw	r3,240(sp)
    45bc:	da003d17 	ldw	r8,244(sp)
    45c0:	103f9826 	beq	r2,zero,4424 <__alt_data_end+0xff004424>
    45c4:	00800044 	movi	r2,1
    45c8:	10c7c83a 	sub	r3,r2,r3
    45cc:	d8c02615 	stw	r3,152(sp)
    45d0:	003f9506 	br	4428 <__alt_data_end+0xff004428>
    45d4:	d9002917 	ldw	r4,164(sp)
    45d8:	d8c03217 	ldw	r3,200(sp)
    45dc:	20800044 	addi	r2,r4,1
    45e0:	1885883a 	add	r2,r3,r2
    45e4:	d8802e15 	stw	r2,184(sp)
    45e8:	103dbf0e 	bge	r2,zero,3ce8 <__alt_data_end+0xff003ce8>
    45ec:	0005883a 	mov	r2,zero
    45f0:	003dbd06 	br	3ce8 <__alt_data_end+0xff003ce8>
    45f4:	2000211e 	bne	r4,zero,467c <___vfprintf_internal_r+0x2168>
    45f8:	9480004c 	andi	r18,r18,1
    45fc:	90001f1e 	bne	r18,zero,467c <___vfprintf_internal_r+0x2168>
    4600:	00800044 	movi	r2,1
    4604:	d8802e15 	stw	r2,184(sp)
    4608:	003db706 	br	3ce8 <__alt_data_end+0xff003ce8>
    460c:	00800b44 	movi	r2,45
    4610:	05adc83a 	sub	r22,zero,r22
    4614:	d8802305 	stb	r2,140(sp)
    4618:	003f3f06 	br	4318 <__alt_data_end+0xff004318>
    461c:	0005883a 	mov	r2,zero
    4620:	003f5206 	br	436c <__alt_data_end+0xff00436c>
    4624:	90a4703a 	and	r18,r18,r2
    4628:	903f4e26 	beq	r18,zero,4364 <__alt_data_end+0xff004364>
    462c:	003f4a06 	br	4358 <__alt_data_end+0xff004358>
    4630:	00800084 	movi	r2,2
    4634:	10c5c83a 	sub	r2,r2,r3
    4638:	003f8406 	br	444c <__alt_data_end+0xff00444c>
    463c:	d8802d17 	ldw	r2,180(sp)
    4640:	d9002d17 	ldw	r4,180(sp)
    4644:	ac400043 	ldbu	r17,1(r21)
    4648:	10800017 	ldw	r2,0(r2)
    464c:	582b883a 	mov	r21,r11
    4650:	d8802915 	stw	r2,164(sp)
    4654:	20800104 	addi	r2,r4,4
    4658:	d9002917 	ldw	r4,164(sp)
    465c:	d8802d15 	stw	r2,180(sp)
    4660:	203e7a0e 	bge	r4,zero,404c <__alt_data_end+0xff00404c>
    4664:	8c403fcc 	andi	r17,r17,255
    4668:	00bfffc4 	movi	r2,-1
    466c:	8c40201c 	xori	r17,r17,128
    4670:	d8802915 	stw	r2,164(sp)
    4674:	8c7fe004 	addi	r17,r17,-128
    4678:	00380706 	br	2698 <__alt_data_end+0xff002698>
    467c:	d8c02917 	ldw	r3,164(sp)
    4680:	18c00084 	addi	r3,r3,2
    4684:	d8c02e15 	stw	r3,184(sp)
    4688:	1805883a 	mov	r2,r3
    468c:	183d960e 	bge	r3,zero,3ce8 <__alt_data_end+0xff003ce8>
    4690:	003fd606 	br	45ec <__alt_data_end+0xff0045ec>
    4694:	0005883a 	mov	r2,zero
    4698:	003f8e06 	br	44d4 <__alt_data_end+0xff0044d4>
    469c:	9080004c 	andi	r2,r18,1
    46a0:	103f811e 	bne	r2,zero,44a8 <__alt_data_end+0xff0044a8>
    46a4:	d8802117 	ldw	r2,132(sp)
    46a8:	1405c83a 	sub	r2,r2,r16
    46ac:	d8803315 	stw	r2,204(sp)
    46b0:	b47ef326 	beq	r22,r17,4280 <__alt_data_end+0xff004280>
    46b4:	dd802617 	ldw	r22,152(sp)
    46b8:	003f1106 	br	4300 <__alt_data_end+0xff004300>
    46bc:	d9c02785 	stb	r7,158(sp)
    46c0:	00390406 	br	2ad4 <__alt_data_end+0xff002ad4>
    46c4:	d9c02785 	stb	r7,158(sp)
    46c8:	0038d306 	br	2a18 <__alt_data_end+0xff002a18>
    46cc:	d9c02785 	stb	r7,158(sp)
    46d0:	003a6106 	br	3058 <__alt_data_end+0xff003058>
    46d4:	d9c02785 	stb	r7,158(sp)
    46d8:	003af806 	br	32bc <__alt_data_end+0xff0032bc>
    46dc:	0005883a 	mov	r2,zero
    46e0:	003d7e06 	br	3cdc <__alt_data_end+0xff003cdc>
    46e4:	d8802344 	addi	r2,sp,141
    46e8:	003f1306 	br	4338 <__alt_data_end+0xff004338>
    46ec:	d9c02785 	stb	r7,158(sp)
    46f0:	00392306 	br	2b80 <__alt_data_end+0xff002b80>
    46f4:	d9c02785 	stb	r7,158(sp)
    46f8:	003aa906 	br	31a0 <__alt_data_end+0xff0031a0>
    46fc:	d9c02785 	stb	r7,158(sp)
    4700:	003a3d06 	br	2ff8 <__alt_data_end+0xff002ff8>
    4704:	d9c02785 	stb	r7,158(sp)
    4708:	003aca06 	br	3234 <__alt_data_end+0xff003234>

0000470c <__vfprintf_internal>:
    470c:	00800074 	movhi	r2,1
    4710:	108c2c04 	addi	r2,r2,12464
    4714:	300f883a 	mov	r7,r6
    4718:	280d883a 	mov	r6,r5
    471c:	200b883a 	mov	r5,r4
    4720:	11000017 	ldw	r4,0(r2)
    4724:	00025141 	jmpi	2514 <___vfprintf_internal_r>

00004728 <__sbprintf>:
    4728:	2880030b 	ldhu	r2,12(r5)
    472c:	2ac01917 	ldw	r11,100(r5)
    4730:	2a80038b 	ldhu	r10,14(r5)
    4734:	2a400717 	ldw	r9,28(r5)
    4738:	2a000917 	ldw	r8,36(r5)
    473c:	defee204 	addi	sp,sp,-1144
    4740:	00c10004 	movi	r3,1024
    4744:	dc011a15 	stw	r16,1128(sp)
    4748:	10bfff4c 	andi	r2,r2,65533
    474c:	2821883a 	mov	r16,r5
    4750:	d8cb883a 	add	r5,sp,r3
    4754:	dc811c15 	stw	r18,1136(sp)
    4758:	dc411b15 	stw	r17,1132(sp)
    475c:	dfc11d15 	stw	ra,1140(sp)
    4760:	2025883a 	mov	r18,r4
    4764:	d881030d 	sth	r2,1036(sp)
    4768:	dac11915 	stw	r11,1124(sp)
    476c:	da81038d 	sth	r10,1038(sp)
    4770:	da410715 	stw	r9,1052(sp)
    4774:	da010915 	stw	r8,1060(sp)
    4778:	dec10015 	stw	sp,1024(sp)
    477c:	dec10415 	stw	sp,1040(sp)
    4780:	d8c10215 	stw	r3,1032(sp)
    4784:	d8c10515 	stw	r3,1044(sp)
    4788:	d8010615 	stw	zero,1048(sp)
    478c:	00025140 	call	2514 <___vfprintf_internal_r>
    4790:	1023883a 	mov	r17,r2
    4794:	10000416 	blt	r2,zero,47a8 <__sbprintf+0x80>
    4798:	d9410004 	addi	r5,sp,1024
    479c:	9009883a 	mov	r4,r18
    47a0:	00063dc0 	call	63dc <_fflush_r>
    47a4:	10000d1e 	bne	r2,zero,47dc <__sbprintf+0xb4>
    47a8:	d881030b 	ldhu	r2,1036(sp)
    47ac:	1080100c 	andi	r2,r2,64
    47b0:	10000326 	beq	r2,zero,47c0 <__sbprintf+0x98>
    47b4:	8080030b 	ldhu	r2,12(r16)
    47b8:	10801014 	ori	r2,r2,64
    47bc:	8080030d 	sth	r2,12(r16)
    47c0:	8805883a 	mov	r2,r17
    47c4:	dfc11d17 	ldw	ra,1140(sp)
    47c8:	dc811c17 	ldw	r18,1136(sp)
    47cc:	dc411b17 	ldw	r17,1132(sp)
    47d0:	dc011a17 	ldw	r16,1128(sp)
    47d4:	dec11e04 	addi	sp,sp,1144
    47d8:	f800283a 	ret
    47dc:	047fffc4 	movi	r17,-1
    47e0:	003ff106 	br	47a8 <__alt_data_end+0xff0047a8>

000047e4 <__swsetup_r>:
    47e4:	00800074 	movhi	r2,1
    47e8:	defffd04 	addi	sp,sp,-12
    47ec:	108c2c04 	addi	r2,r2,12464
    47f0:	dc400115 	stw	r17,4(sp)
    47f4:	2023883a 	mov	r17,r4
    47f8:	11000017 	ldw	r4,0(r2)
    47fc:	dc000015 	stw	r16,0(sp)
    4800:	dfc00215 	stw	ra,8(sp)
    4804:	2821883a 	mov	r16,r5
    4808:	20000226 	beq	r4,zero,4814 <__swsetup_r+0x30>
    480c:	20800e17 	ldw	r2,56(r4)
    4810:	10003126 	beq	r2,zero,48d8 <__swsetup_r+0xf4>
    4814:	8080030b 	ldhu	r2,12(r16)
    4818:	10c0020c 	andi	r3,r2,8
    481c:	1009883a 	mov	r4,r2
    4820:	18000f26 	beq	r3,zero,4860 <__swsetup_r+0x7c>
    4824:	80c00417 	ldw	r3,16(r16)
    4828:	18001526 	beq	r3,zero,4880 <__swsetup_r+0x9c>
    482c:	1100004c 	andi	r4,r2,1
    4830:	20001c1e 	bne	r4,zero,48a4 <__swsetup_r+0xc0>
    4834:	1080008c 	andi	r2,r2,2
    4838:	1000291e 	bne	r2,zero,48e0 <__swsetup_r+0xfc>
    483c:	80800517 	ldw	r2,20(r16)
    4840:	80800215 	stw	r2,8(r16)
    4844:	18001c26 	beq	r3,zero,48b8 <__swsetup_r+0xd4>
    4848:	0005883a 	mov	r2,zero
    484c:	dfc00217 	ldw	ra,8(sp)
    4850:	dc400117 	ldw	r17,4(sp)
    4854:	dc000017 	ldw	r16,0(sp)
    4858:	dec00304 	addi	sp,sp,12
    485c:	f800283a 	ret
    4860:	2080040c 	andi	r2,r4,16
    4864:	10002e26 	beq	r2,zero,4920 <__swsetup_r+0x13c>
    4868:	2080010c 	andi	r2,r4,4
    486c:	10001e1e 	bne	r2,zero,48e8 <__swsetup_r+0x104>
    4870:	80c00417 	ldw	r3,16(r16)
    4874:	20800214 	ori	r2,r4,8
    4878:	8080030d 	sth	r2,12(r16)
    487c:	183feb1e 	bne	r3,zero,482c <__alt_data_end+0xff00482c>
    4880:	1100a00c 	andi	r4,r2,640
    4884:	01408004 	movi	r5,512
    4888:	217fe826 	beq	r4,r5,482c <__alt_data_end+0xff00482c>
    488c:	800b883a 	mov	r5,r16
    4890:	8809883a 	mov	r4,r17
    4894:	000735c0 	call	735c <__smakebuf_r>
    4898:	8080030b 	ldhu	r2,12(r16)
    489c:	80c00417 	ldw	r3,16(r16)
    48a0:	003fe206 	br	482c <__alt_data_end+0xff00482c>
    48a4:	80800517 	ldw	r2,20(r16)
    48a8:	80000215 	stw	zero,8(r16)
    48ac:	0085c83a 	sub	r2,zero,r2
    48b0:	80800615 	stw	r2,24(r16)
    48b4:	183fe41e 	bne	r3,zero,4848 <__alt_data_end+0xff004848>
    48b8:	80c0030b 	ldhu	r3,12(r16)
    48bc:	0005883a 	mov	r2,zero
    48c0:	1900200c 	andi	r4,r3,128
    48c4:	203fe126 	beq	r4,zero,484c <__alt_data_end+0xff00484c>
    48c8:	18c01014 	ori	r3,r3,64
    48cc:	80c0030d 	sth	r3,12(r16)
    48d0:	00bfffc4 	movi	r2,-1
    48d4:	003fdd06 	br	484c <__alt_data_end+0xff00484c>
    48d8:	00067b80 	call	67b8 <__sinit>
    48dc:	003fcd06 	br	4814 <__alt_data_end+0xff004814>
    48e0:	0005883a 	mov	r2,zero
    48e4:	003fd606 	br	4840 <__alt_data_end+0xff004840>
    48e8:	81400c17 	ldw	r5,48(r16)
    48ec:	28000626 	beq	r5,zero,4908 <__swsetup_r+0x124>
    48f0:	80801004 	addi	r2,r16,64
    48f4:	28800326 	beq	r5,r2,4904 <__swsetup_r+0x120>
    48f8:	8809883a 	mov	r4,r17
    48fc:	000692c0 	call	692c <_free_r>
    4900:	8100030b 	ldhu	r4,12(r16)
    4904:	80000c15 	stw	zero,48(r16)
    4908:	80c00417 	ldw	r3,16(r16)
    490c:	00bff6c4 	movi	r2,-37
    4910:	1108703a 	and	r4,r2,r4
    4914:	80000115 	stw	zero,4(r16)
    4918:	80c00015 	stw	r3,0(r16)
    491c:	003fd506 	br	4874 <__alt_data_end+0xff004874>
    4920:	00800244 	movi	r2,9
    4924:	88800015 	stw	r2,0(r17)
    4928:	20801014 	ori	r2,r4,64
    492c:	8080030d 	sth	r2,12(r16)
    4930:	00bfffc4 	movi	r2,-1
    4934:	003fc506 	br	484c <__alt_data_end+0xff00484c>

00004938 <quorem>:
    4938:	defff704 	addi	sp,sp,-36
    493c:	dc800215 	stw	r18,8(sp)
    4940:	20800417 	ldw	r2,16(r4)
    4944:	2c800417 	ldw	r18,16(r5)
    4948:	dfc00815 	stw	ra,32(sp)
    494c:	ddc00715 	stw	r23,28(sp)
    4950:	dd800615 	stw	r22,24(sp)
    4954:	dd400515 	stw	r21,20(sp)
    4958:	dd000415 	stw	r20,16(sp)
    495c:	dcc00315 	stw	r19,12(sp)
    4960:	dc400115 	stw	r17,4(sp)
    4964:	dc000015 	stw	r16,0(sp)
    4968:	14807116 	blt	r2,r18,4b30 <quorem+0x1f8>
    496c:	94bfffc4 	addi	r18,r18,-1
    4970:	94ad883a 	add	r22,r18,r18
    4974:	b5ad883a 	add	r22,r22,r22
    4978:	2c400504 	addi	r17,r5,20
    497c:	8da9883a 	add	r20,r17,r22
    4980:	25400504 	addi	r21,r4,20
    4984:	282f883a 	mov	r23,r5
    4988:	adad883a 	add	r22,r21,r22
    498c:	a1400017 	ldw	r5,0(r20)
    4990:	2021883a 	mov	r16,r4
    4994:	b1000017 	ldw	r4,0(r22)
    4998:	29400044 	addi	r5,r5,1
    499c:	000bcd80 	call	bcd8 <__udivsi3>
    49a0:	1027883a 	mov	r19,r2
    49a4:	10002c26 	beq	r2,zero,4a58 <quorem+0x120>
    49a8:	a813883a 	mov	r9,r21
    49ac:	880b883a 	mov	r5,r17
    49b0:	0009883a 	mov	r4,zero
    49b4:	000d883a 	mov	r6,zero
    49b8:	2a000017 	ldw	r8,0(r5)
    49bc:	49c00017 	ldw	r7,0(r9)
    49c0:	29400104 	addi	r5,r5,4
    49c4:	40bfffcc 	andi	r2,r8,65535
    49c8:	14c5383a 	mul	r2,r2,r19
    49cc:	4010d43a 	srli	r8,r8,16
    49d0:	38ffffcc 	andi	r3,r7,65535
    49d4:	1105883a 	add	r2,r2,r4
    49d8:	1008d43a 	srli	r4,r2,16
    49dc:	44d1383a 	mul	r8,r8,r19
    49e0:	198d883a 	add	r6,r3,r6
    49e4:	10ffffcc 	andi	r3,r2,65535
    49e8:	30c7c83a 	sub	r3,r6,r3
    49ec:	380ed43a 	srli	r7,r7,16
    49f0:	4105883a 	add	r2,r8,r4
    49f4:	180dd43a 	srai	r6,r3,16
    49f8:	113fffcc 	andi	r4,r2,65535
    49fc:	390fc83a 	sub	r7,r7,r4
    4a00:	398d883a 	add	r6,r7,r6
    4a04:	300e943a 	slli	r7,r6,16
    4a08:	18ffffcc 	andi	r3,r3,65535
    4a0c:	1008d43a 	srli	r4,r2,16
    4a10:	38ceb03a 	or	r7,r7,r3
    4a14:	49c00015 	stw	r7,0(r9)
    4a18:	300dd43a 	srai	r6,r6,16
    4a1c:	4a400104 	addi	r9,r9,4
    4a20:	a17fe52e 	bgeu	r20,r5,49b8 <__alt_data_end+0xff0049b8>
    4a24:	b0800017 	ldw	r2,0(r22)
    4a28:	10000b1e 	bne	r2,zero,4a58 <quorem+0x120>
    4a2c:	b0bfff04 	addi	r2,r22,-4
    4a30:	a880082e 	bgeu	r21,r2,4a54 <quorem+0x11c>
    4a34:	b0ffff17 	ldw	r3,-4(r22)
    4a38:	18000326 	beq	r3,zero,4a48 <quorem+0x110>
    4a3c:	00000506 	br	4a54 <quorem+0x11c>
    4a40:	10c00017 	ldw	r3,0(r2)
    4a44:	1800031e 	bne	r3,zero,4a54 <quorem+0x11c>
    4a48:	10bfff04 	addi	r2,r2,-4
    4a4c:	94bfffc4 	addi	r18,r18,-1
    4a50:	a8bffb36 	bltu	r21,r2,4a40 <__alt_data_end+0xff004a40>
    4a54:	84800415 	stw	r18,16(r16)
    4a58:	b80b883a 	mov	r5,r23
    4a5c:	8009883a 	mov	r4,r16
    4a60:	00082900 	call	8290 <__mcmp>
    4a64:	10002616 	blt	r2,zero,4b00 <quorem+0x1c8>
    4a68:	9cc00044 	addi	r19,r19,1
    4a6c:	a805883a 	mov	r2,r21
    4a70:	000b883a 	mov	r5,zero
    4a74:	11000017 	ldw	r4,0(r2)
    4a78:	89800017 	ldw	r6,0(r17)
    4a7c:	10800104 	addi	r2,r2,4
    4a80:	20ffffcc 	andi	r3,r4,65535
    4a84:	194b883a 	add	r5,r3,r5
    4a88:	30ffffcc 	andi	r3,r6,65535
    4a8c:	28c7c83a 	sub	r3,r5,r3
    4a90:	300cd43a 	srli	r6,r6,16
    4a94:	2008d43a 	srli	r4,r4,16
    4a98:	180bd43a 	srai	r5,r3,16
    4a9c:	18ffffcc 	andi	r3,r3,65535
    4aa0:	2189c83a 	sub	r4,r4,r6
    4aa4:	2149883a 	add	r4,r4,r5
    4aa8:	200c943a 	slli	r6,r4,16
    4aac:	8c400104 	addi	r17,r17,4
    4ab0:	200bd43a 	srai	r5,r4,16
    4ab4:	30c6b03a 	or	r3,r6,r3
    4ab8:	10ffff15 	stw	r3,-4(r2)
    4abc:	a47fed2e 	bgeu	r20,r17,4a74 <__alt_data_end+0xff004a74>
    4ac0:	9485883a 	add	r2,r18,r18
    4ac4:	1085883a 	add	r2,r2,r2
    4ac8:	a887883a 	add	r3,r21,r2
    4acc:	18800017 	ldw	r2,0(r3)
    4ad0:	10000b1e 	bne	r2,zero,4b00 <quorem+0x1c8>
    4ad4:	18bfff04 	addi	r2,r3,-4
    4ad8:	a880082e 	bgeu	r21,r2,4afc <quorem+0x1c4>
    4adc:	18ffff17 	ldw	r3,-4(r3)
    4ae0:	18000326 	beq	r3,zero,4af0 <quorem+0x1b8>
    4ae4:	00000506 	br	4afc <quorem+0x1c4>
    4ae8:	10c00017 	ldw	r3,0(r2)
    4aec:	1800031e 	bne	r3,zero,4afc <quorem+0x1c4>
    4af0:	10bfff04 	addi	r2,r2,-4
    4af4:	94bfffc4 	addi	r18,r18,-1
    4af8:	a8bffb36 	bltu	r21,r2,4ae8 <__alt_data_end+0xff004ae8>
    4afc:	84800415 	stw	r18,16(r16)
    4b00:	9805883a 	mov	r2,r19
    4b04:	dfc00817 	ldw	ra,32(sp)
    4b08:	ddc00717 	ldw	r23,28(sp)
    4b0c:	dd800617 	ldw	r22,24(sp)
    4b10:	dd400517 	ldw	r21,20(sp)
    4b14:	dd000417 	ldw	r20,16(sp)
    4b18:	dcc00317 	ldw	r19,12(sp)
    4b1c:	dc800217 	ldw	r18,8(sp)
    4b20:	dc400117 	ldw	r17,4(sp)
    4b24:	dc000017 	ldw	r16,0(sp)
    4b28:	dec00904 	addi	sp,sp,36
    4b2c:	f800283a 	ret
    4b30:	0005883a 	mov	r2,zero
    4b34:	003ff306 	br	4b04 <__alt_data_end+0xff004b04>

00004b38 <_dtoa_r>:
    4b38:	20801017 	ldw	r2,64(r4)
    4b3c:	deffde04 	addi	sp,sp,-136
    4b40:	df002015 	stw	fp,128(sp)
    4b44:	dcc01b15 	stw	r19,108(sp)
    4b48:	dc801a15 	stw	r18,104(sp)
    4b4c:	dc401915 	stw	r17,100(sp)
    4b50:	dc001815 	stw	r16,96(sp)
    4b54:	dfc02115 	stw	ra,132(sp)
    4b58:	ddc01f15 	stw	r23,124(sp)
    4b5c:	dd801e15 	stw	r22,120(sp)
    4b60:	dd401d15 	stw	r21,116(sp)
    4b64:	dd001c15 	stw	r20,112(sp)
    4b68:	d9c00315 	stw	r7,12(sp)
    4b6c:	2039883a 	mov	fp,r4
    4b70:	3023883a 	mov	r17,r6
    4b74:	2825883a 	mov	r18,r5
    4b78:	dc002417 	ldw	r16,144(sp)
    4b7c:	3027883a 	mov	r19,r6
    4b80:	10000826 	beq	r2,zero,4ba4 <_dtoa_r+0x6c>
    4b84:	21801117 	ldw	r6,68(r4)
    4b88:	00c00044 	movi	r3,1
    4b8c:	100b883a 	mov	r5,r2
    4b90:	1986983a 	sll	r3,r3,r6
    4b94:	11800115 	stw	r6,4(r2)
    4b98:	10c00215 	stw	r3,8(r2)
    4b9c:	0007a700 	call	7a70 <_Bfree>
    4ba0:	e0001015 	stw	zero,64(fp)
    4ba4:	88002e16 	blt	r17,zero,4c60 <_dtoa_r+0x128>
    4ba8:	80000015 	stw	zero,0(r16)
    4bac:	889ffc2c 	andhi	r2,r17,32752
    4bb0:	00dffc34 	movhi	r3,32752
    4bb4:	10c01c26 	beq	r2,r3,4c28 <_dtoa_r+0xf0>
    4bb8:	000d883a 	mov	r6,zero
    4bbc:	000f883a 	mov	r7,zero
    4bc0:	9009883a 	mov	r4,r18
    4bc4:	980b883a 	mov	r5,r19
    4bc8:	000cf280 	call	cf28 <__eqdf2>
    4bcc:	10002b1e 	bne	r2,zero,4c7c <_dtoa_r+0x144>
    4bd0:	d9c02317 	ldw	r7,140(sp)
    4bd4:	00800044 	movi	r2,1
    4bd8:	38800015 	stw	r2,0(r7)
    4bdc:	d8802517 	ldw	r2,148(sp)
    4be0:	10019e26 	beq	r2,zero,525c <_dtoa_r+0x724>
    4be4:	d8c02517 	ldw	r3,148(sp)
    4be8:	00800074 	movhi	r2,1
    4bec:	1084d144 	addi	r2,r2,4933
    4bf0:	18800015 	stw	r2,0(r3)
    4bf4:	10bfffc4 	addi	r2,r2,-1
    4bf8:	dfc02117 	ldw	ra,132(sp)
    4bfc:	df002017 	ldw	fp,128(sp)
    4c00:	ddc01f17 	ldw	r23,124(sp)
    4c04:	dd801e17 	ldw	r22,120(sp)
    4c08:	dd401d17 	ldw	r21,116(sp)
    4c0c:	dd001c17 	ldw	r20,112(sp)
    4c10:	dcc01b17 	ldw	r19,108(sp)
    4c14:	dc801a17 	ldw	r18,104(sp)
    4c18:	dc401917 	ldw	r17,100(sp)
    4c1c:	dc001817 	ldw	r16,96(sp)
    4c20:	dec02204 	addi	sp,sp,136
    4c24:	f800283a 	ret
    4c28:	d8c02317 	ldw	r3,140(sp)
    4c2c:	0089c3c4 	movi	r2,9999
    4c30:	18800015 	stw	r2,0(r3)
    4c34:	90017726 	beq	r18,zero,5214 <_dtoa_r+0x6dc>
    4c38:	00800074 	movhi	r2,1
    4c3c:	1084dd04 	addi	r2,r2,4980
    4c40:	d9002517 	ldw	r4,148(sp)
    4c44:	203fec26 	beq	r4,zero,4bf8 <__alt_data_end+0xff004bf8>
    4c48:	10c000c7 	ldb	r3,3(r2)
    4c4c:	1801781e 	bne	r3,zero,5230 <_dtoa_r+0x6f8>
    4c50:	10c000c4 	addi	r3,r2,3
    4c54:	d9802517 	ldw	r6,148(sp)
    4c58:	30c00015 	stw	r3,0(r6)
    4c5c:	003fe606 	br	4bf8 <__alt_data_end+0xff004bf8>
    4c60:	04e00034 	movhi	r19,32768
    4c64:	9cffffc4 	addi	r19,r19,-1
    4c68:	00800044 	movi	r2,1
    4c6c:	8ce6703a 	and	r19,r17,r19
    4c70:	80800015 	stw	r2,0(r16)
    4c74:	9823883a 	mov	r17,r19
    4c78:	003fcc06 	br	4bac <__alt_data_end+0xff004bac>
    4c7c:	d8800204 	addi	r2,sp,8
    4c80:	d8800015 	stw	r2,0(sp)
    4c84:	d9c00104 	addi	r7,sp,4
    4c88:	900b883a 	mov	r5,r18
    4c8c:	980d883a 	mov	r6,r19
    4c90:	e009883a 	mov	r4,fp
    4c94:	8820d53a 	srli	r16,r17,20
    4c98:	000865c0 	call	865c <__d2b>
    4c9c:	d8800915 	stw	r2,36(sp)
    4ca0:	8001651e 	bne	r16,zero,5238 <_dtoa_r+0x700>
    4ca4:	dd800217 	ldw	r22,8(sp)
    4ca8:	dc000117 	ldw	r16,4(sp)
    4cac:	00800804 	movi	r2,32
    4cb0:	b421883a 	add	r16,r22,r16
    4cb4:	80c10c84 	addi	r3,r16,1074
    4cb8:	10c2d10e 	bge	r2,r3,5800 <_dtoa_r+0xcc8>
    4cbc:	00801004 	movi	r2,64
    4cc0:	81010484 	addi	r4,r16,1042
    4cc4:	10c7c83a 	sub	r3,r2,r3
    4cc8:	9108d83a 	srl	r4,r18,r4
    4ccc:	88e2983a 	sll	r17,r17,r3
    4cd0:	2448b03a 	or	r4,r4,r17
    4cd4:	000e2f00 	call	e2f0 <__floatunsidf>
    4cd8:	017f8434 	movhi	r5,65040
    4cdc:	01800044 	movi	r6,1
    4ce0:	1009883a 	mov	r4,r2
    4ce4:	194b883a 	add	r5,r3,r5
    4ce8:	843fffc4 	addi	r16,r16,-1
    4cec:	d9801115 	stw	r6,68(sp)
    4cf0:	000d883a 	mov	r6,zero
    4cf4:	01cffe34 	movhi	r7,16376
    4cf8:	000d8980 	call	d898 <__subdf3>
    4cfc:	0198dbf4 	movhi	r6,25455
    4d00:	01cff4f4 	movhi	r7,16339
    4d04:	3190d844 	addi	r6,r6,17249
    4d08:	39e1e9c4 	addi	r7,r7,-30809
    4d0c:	1009883a 	mov	r4,r2
    4d10:	180b883a 	mov	r5,r3
    4d14:	000d1800 	call	d180 <__muldf3>
    4d18:	01a2d874 	movhi	r6,35681
    4d1c:	01cff1f4 	movhi	r7,16327
    4d20:	31b22cc4 	addi	r6,r6,-14157
    4d24:	39e28a04 	addi	r7,r7,-30168
    4d28:	180b883a 	mov	r5,r3
    4d2c:	1009883a 	mov	r4,r2
    4d30:	000bd940 	call	bd94 <__adddf3>
    4d34:	8009883a 	mov	r4,r16
    4d38:	1029883a 	mov	r20,r2
    4d3c:	1823883a 	mov	r17,r3
    4d40:	000e2140 	call	e214 <__floatsidf>
    4d44:	019427f4 	movhi	r6,20639
    4d48:	01cff4f4 	movhi	r7,16339
    4d4c:	319e7ec4 	addi	r6,r6,31227
    4d50:	39d104c4 	addi	r7,r7,17427
    4d54:	1009883a 	mov	r4,r2
    4d58:	180b883a 	mov	r5,r3
    4d5c:	000d1800 	call	d180 <__muldf3>
    4d60:	100d883a 	mov	r6,r2
    4d64:	180f883a 	mov	r7,r3
    4d68:	a009883a 	mov	r4,r20
    4d6c:	880b883a 	mov	r5,r17
    4d70:	000bd940 	call	bd94 <__adddf3>
    4d74:	1009883a 	mov	r4,r2
    4d78:	180b883a 	mov	r5,r3
    4d7c:	1029883a 	mov	r20,r2
    4d80:	1823883a 	mov	r17,r3
    4d84:	000e1940 	call	e194 <__fixdfsi>
    4d88:	000d883a 	mov	r6,zero
    4d8c:	000f883a 	mov	r7,zero
    4d90:	a009883a 	mov	r4,r20
    4d94:	880b883a 	mov	r5,r17
    4d98:	d8800515 	stw	r2,20(sp)
    4d9c:	000d08c0 	call	d08c <__ledf2>
    4da0:	10028716 	blt	r2,zero,57c0 <_dtoa_r+0xc88>
    4da4:	d8c00517 	ldw	r3,20(sp)
    4da8:	00800584 	movi	r2,22
    4dac:	10c27536 	bltu	r2,r3,5784 <_dtoa_r+0xc4c>
    4db0:	180490fa 	slli	r2,r3,3
    4db4:	00c00074 	movhi	r3,1
    4db8:	18c4f904 	addi	r3,r3,5092
    4dbc:	1885883a 	add	r2,r3,r2
    4dc0:	11000017 	ldw	r4,0(r2)
    4dc4:	11400117 	ldw	r5,4(r2)
    4dc8:	900d883a 	mov	r6,r18
    4dcc:	980f883a 	mov	r7,r19
    4dd0:	000cfb00 	call	cfb0 <__gedf2>
    4dd4:	00828d0e 	bge	zero,r2,580c <_dtoa_r+0xcd4>
    4dd8:	d9000517 	ldw	r4,20(sp)
    4ddc:	d8000e15 	stw	zero,56(sp)
    4de0:	213fffc4 	addi	r4,r4,-1
    4de4:	d9000515 	stw	r4,20(sp)
    4de8:	b42dc83a 	sub	r22,r22,r16
    4dec:	b5bfffc4 	addi	r22,r22,-1
    4df0:	b0026f16 	blt	r22,zero,57b0 <_dtoa_r+0xc78>
    4df4:	d8000815 	stw	zero,32(sp)
    4df8:	d9c00517 	ldw	r7,20(sp)
    4dfc:	38026416 	blt	r7,zero,5790 <_dtoa_r+0xc58>
    4e00:	b1ed883a 	add	r22,r22,r7
    4e04:	d9c00d15 	stw	r7,52(sp)
    4e08:	d8000a15 	stw	zero,40(sp)
    4e0c:	d9800317 	ldw	r6,12(sp)
    4e10:	00800244 	movi	r2,9
    4e14:	11811436 	bltu	r2,r6,5268 <_dtoa_r+0x730>
    4e18:	00800144 	movi	r2,5
    4e1c:	1184e10e 	bge	r2,r6,61a4 <_dtoa_r+0x166c>
    4e20:	31bfff04 	addi	r6,r6,-4
    4e24:	d9800315 	stw	r6,12(sp)
    4e28:	0023883a 	mov	r17,zero
    4e2c:	d9800317 	ldw	r6,12(sp)
    4e30:	008000c4 	movi	r2,3
    4e34:	30836726 	beq	r6,r2,5bd4 <_dtoa_r+0x109c>
    4e38:	1183410e 	bge	r2,r6,5b40 <_dtoa_r+0x1008>
    4e3c:	d9c00317 	ldw	r7,12(sp)
    4e40:	00800104 	movi	r2,4
    4e44:	38827c26 	beq	r7,r2,5838 <_dtoa_r+0xd00>
    4e48:	00800144 	movi	r2,5
    4e4c:	3884c41e 	bne	r7,r2,6160 <_dtoa_r+0x1628>
    4e50:	00800044 	movi	r2,1
    4e54:	d8800b15 	stw	r2,44(sp)
    4e58:	d8c00517 	ldw	r3,20(sp)
    4e5c:	d9002217 	ldw	r4,136(sp)
    4e60:	1907883a 	add	r3,r3,r4
    4e64:	19800044 	addi	r6,r3,1
    4e68:	d8c00c15 	stw	r3,48(sp)
    4e6c:	d9800615 	stw	r6,24(sp)
    4e70:	0183a40e 	bge	zero,r6,5d04 <_dtoa_r+0x11cc>
    4e74:	d9800617 	ldw	r6,24(sp)
    4e78:	3021883a 	mov	r16,r6
    4e7c:	e0001115 	stw	zero,68(fp)
    4e80:	008005c4 	movi	r2,23
    4e84:	1184c92e 	bgeu	r2,r6,61ac <_dtoa_r+0x1674>
    4e88:	00c00044 	movi	r3,1
    4e8c:	00800104 	movi	r2,4
    4e90:	1085883a 	add	r2,r2,r2
    4e94:	11000504 	addi	r4,r2,20
    4e98:	180b883a 	mov	r5,r3
    4e9c:	18c00044 	addi	r3,r3,1
    4ea0:	313ffb2e 	bgeu	r6,r4,4e90 <__alt_data_end+0xff004e90>
    4ea4:	e1401115 	stw	r5,68(fp)
    4ea8:	e009883a 	mov	r4,fp
    4eac:	00079c80 	call	79c8 <_Balloc>
    4eb0:	d8800715 	stw	r2,28(sp)
    4eb4:	e0801015 	stw	r2,64(fp)
    4eb8:	00800384 	movi	r2,14
    4ebc:	1400f736 	bltu	r2,r16,529c <_dtoa_r+0x764>
    4ec0:	8800f626 	beq	r17,zero,529c <_dtoa_r+0x764>
    4ec4:	d9c00517 	ldw	r7,20(sp)
    4ec8:	01c39a0e 	bge	zero,r7,5d34 <_dtoa_r+0x11fc>
    4ecc:	388003cc 	andi	r2,r7,15
    4ed0:	100490fa 	slli	r2,r2,3
    4ed4:	382bd13a 	srai	r21,r7,4
    4ed8:	00c00074 	movhi	r3,1
    4edc:	18c4f904 	addi	r3,r3,5092
    4ee0:	1885883a 	add	r2,r3,r2
    4ee4:	a8c0040c 	andi	r3,r21,16
    4ee8:	12400017 	ldw	r9,0(r2)
    4eec:	12000117 	ldw	r8,4(r2)
    4ef0:	18037926 	beq	r3,zero,5cd8 <_dtoa_r+0x11a0>
    4ef4:	00800074 	movhi	r2,1
    4ef8:	1084ef04 	addi	r2,r2,5052
    4efc:	11800817 	ldw	r6,32(r2)
    4f00:	11c00917 	ldw	r7,36(r2)
    4f04:	9009883a 	mov	r4,r18
    4f08:	980b883a 	mov	r5,r19
    4f0c:	da001715 	stw	r8,92(sp)
    4f10:	da401615 	stw	r9,88(sp)
    4f14:	000c6400 	call	c640 <__divdf3>
    4f18:	da001717 	ldw	r8,92(sp)
    4f1c:	da401617 	ldw	r9,88(sp)
    4f20:	ad4003cc 	andi	r21,r21,15
    4f24:	040000c4 	movi	r16,3
    4f28:	1023883a 	mov	r17,r2
    4f2c:	1829883a 	mov	r20,r3
    4f30:	a8001126 	beq	r21,zero,4f78 <_dtoa_r+0x440>
    4f34:	05c00074 	movhi	r23,1
    4f38:	bdc4ef04 	addi	r23,r23,5052
    4f3c:	4805883a 	mov	r2,r9
    4f40:	4007883a 	mov	r3,r8
    4f44:	a980004c 	andi	r6,r21,1
    4f48:	1009883a 	mov	r4,r2
    4f4c:	a82bd07a 	srai	r21,r21,1
    4f50:	180b883a 	mov	r5,r3
    4f54:	30000426 	beq	r6,zero,4f68 <_dtoa_r+0x430>
    4f58:	b9800017 	ldw	r6,0(r23)
    4f5c:	b9c00117 	ldw	r7,4(r23)
    4f60:	84000044 	addi	r16,r16,1
    4f64:	000d1800 	call	d180 <__muldf3>
    4f68:	bdc00204 	addi	r23,r23,8
    4f6c:	a83ff51e 	bne	r21,zero,4f44 <__alt_data_end+0xff004f44>
    4f70:	1013883a 	mov	r9,r2
    4f74:	1811883a 	mov	r8,r3
    4f78:	480d883a 	mov	r6,r9
    4f7c:	400f883a 	mov	r7,r8
    4f80:	8809883a 	mov	r4,r17
    4f84:	a00b883a 	mov	r5,r20
    4f88:	000c6400 	call	c640 <__divdf3>
    4f8c:	d8800f15 	stw	r2,60(sp)
    4f90:	d8c01015 	stw	r3,64(sp)
    4f94:	d8c00e17 	ldw	r3,56(sp)
    4f98:	18000626 	beq	r3,zero,4fb4 <_dtoa_r+0x47c>
    4f9c:	d9000f17 	ldw	r4,60(sp)
    4fa0:	d9401017 	ldw	r5,64(sp)
    4fa4:	000d883a 	mov	r6,zero
    4fa8:	01cffc34 	movhi	r7,16368
    4fac:	000d08c0 	call	d08c <__ledf2>
    4fb0:	10040b16 	blt	r2,zero,5fe0 <_dtoa_r+0x14a8>
    4fb4:	8009883a 	mov	r4,r16
    4fb8:	000e2140 	call	e214 <__floatsidf>
    4fbc:	d9800f17 	ldw	r6,60(sp)
    4fc0:	d9c01017 	ldw	r7,64(sp)
    4fc4:	1009883a 	mov	r4,r2
    4fc8:	180b883a 	mov	r5,r3
    4fcc:	000d1800 	call	d180 <__muldf3>
    4fd0:	000d883a 	mov	r6,zero
    4fd4:	01d00734 	movhi	r7,16412
    4fd8:	1009883a 	mov	r4,r2
    4fdc:	180b883a 	mov	r5,r3
    4fe0:	000bd940 	call	bd94 <__adddf3>
    4fe4:	1021883a 	mov	r16,r2
    4fe8:	d8800617 	ldw	r2,24(sp)
    4fec:	047f3034 	movhi	r17,64704
    4ff0:	1c63883a 	add	r17,r3,r17
    4ff4:	10031826 	beq	r2,zero,5c58 <_dtoa_r+0x1120>
    4ff8:	d8c00517 	ldw	r3,20(sp)
    4ffc:	db000617 	ldw	r12,24(sp)
    5000:	d8c01315 	stw	r3,76(sp)
    5004:	d9000b17 	ldw	r4,44(sp)
    5008:	20038f26 	beq	r4,zero,5e48 <_dtoa_r+0x1310>
    500c:	60bfffc4 	addi	r2,r12,-1
    5010:	100490fa 	slli	r2,r2,3
    5014:	00c00074 	movhi	r3,1
    5018:	18c4f904 	addi	r3,r3,5092
    501c:	1885883a 	add	r2,r3,r2
    5020:	11800017 	ldw	r6,0(r2)
    5024:	11c00117 	ldw	r7,4(r2)
    5028:	d8800717 	ldw	r2,28(sp)
    502c:	0009883a 	mov	r4,zero
    5030:	014ff834 	movhi	r5,16352
    5034:	db001615 	stw	r12,88(sp)
    5038:	15c00044 	addi	r23,r2,1
    503c:	000c6400 	call	c640 <__divdf3>
    5040:	800d883a 	mov	r6,r16
    5044:	880f883a 	mov	r7,r17
    5048:	1009883a 	mov	r4,r2
    504c:	180b883a 	mov	r5,r3
    5050:	000d8980 	call	d898 <__subdf3>
    5054:	d9401017 	ldw	r5,64(sp)
    5058:	d9000f17 	ldw	r4,60(sp)
    505c:	102b883a 	mov	r21,r2
    5060:	d8c01215 	stw	r3,72(sp)
    5064:	000e1940 	call	e194 <__fixdfsi>
    5068:	1009883a 	mov	r4,r2
    506c:	1029883a 	mov	r20,r2
    5070:	000e2140 	call	e214 <__floatsidf>
    5074:	d9000f17 	ldw	r4,60(sp)
    5078:	d9401017 	ldw	r5,64(sp)
    507c:	100d883a 	mov	r6,r2
    5080:	180f883a 	mov	r7,r3
    5084:	000d8980 	call	d898 <__subdf3>
    5088:	1823883a 	mov	r17,r3
    508c:	d8c00717 	ldw	r3,28(sp)
    5090:	d9401217 	ldw	r5,72(sp)
    5094:	a2000c04 	addi	r8,r20,48
    5098:	1021883a 	mov	r16,r2
    509c:	1a000005 	stb	r8,0(r3)
    50a0:	800d883a 	mov	r6,r16
    50a4:	880f883a 	mov	r7,r17
    50a8:	a809883a 	mov	r4,r21
    50ac:	4029883a 	mov	r20,r8
    50b0:	000cfb00 	call	cfb0 <__gedf2>
    50b4:	00841d16 	blt	zero,r2,612c <_dtoa_r+0x15f4>
    50b8:	800d883a 	mov	r6,r16
    50bc:	880f883a 	mov	r7,r17
    50c0:	0009883a 	mov	r4,zero
    50c4:	014ffc34 	movhi	r5,16368
    50c8:	000d8980 	call	d898 <__subdf3>
    50cc:	d9401217 	ldw	r5,72(sp)
    50d0:	100d883a 	mov	r6,r2
    50d4:	180f883a 	mov	r7,r3
    50d8:	a809883a 	mov	r4,r21
    50dc:	000cfb00 	call	cfb0 <__gedf2>
    50e0:	db001617 	ldw	r12,88(sp)
    50e4:	00840e16 	blt	zero,r2,6120 <_dtoa_r+0x15e8>
    50e8:	00800044 	movi	r2,1
    50ec:	13006b0e 	bge	r2,r12,529c <_dtoa_r+0x764>
    50f0:	d9000717 	ldw	r4,28(sp)
    50f4:	dd800f15 	stw	r22,60(sp)
    50f8:	dcc01015 	stw	r19,64(sp)
    50fc:	2319883a 	add	r12,r4,r12
    5100:	dcc01217 	ldw	r19,72(sp)
    5104:	602d883a 	mov	r22,r12
    5108:	dc801215 	stw	r18,72(sp)
    510c:	b825883a 	mov	r18,r23
    5110:	00000906 	br	5138 <_dtoa_r+0x600>
    5114:	000d8980 	call	d898 <__subdf3>
    5118:	a80d883a 	mov	r6,r21
    511c:	980f883a 	mov	r7,r19
    5120:	1009883a 	mov	r4,r2
    5124:	180b883a 	mov	r5,r3
    5128:	000d08c0 	call	d08c <__ledf2>
    512c:	1003e816 	blt	r2,zero,60d0 <_dtoa_r+0x1598>
    5130:	b825883a 	mov	r18,r23
    5134:	bd83e926 	beq	r23,r22,60dc <_dtoa_r+0x15a4>
    5138:	a809883a 	mov	r4,r21
    513c:	980b883a 	mov	r5,r19
    5140:	000d883a 	mov	r6,zero
    5144:	01d00934 	movhi	r7,16420
    5148:	000d1800 	call	d180 <__muldf3>
    514c:	000d883a 	mov	r6,zero
    5150:	01d00934 	movhi	r7,16420
    5154:	8009883a 	mov	r4,r16
    5158:	880b883a 	mov	r5,r17
    515c:	102b883a 	mov	r21,r2
    5160:	1827883a 	mov	r19,r3
    5164:	000d1800 	call	d180 <__muldf3>
    5168:	180b883a 	mov	r5,r3
    516c:	1009883a 	mov	r4,r2
    5170:	1821883a 	mov	r16,r3
    5174:	1023883a 	mov	r17,r2
    5178:	000e1940 	call	e194 <__fixdfsi>
    517c:	1009883a 	mov	r4,r2
    5180:	1029883a 	mov	r20,r2
    5184:	000e2140 	call	e214 <__floatsidf>
    5188:	8809883a 	mov	r4,r17
    518c:	800b883a 	mov	r5,r16
    5190:	100d883a 	mov	r6,r2
    5194:	180f883a 	mov	r7,r3
    5198:	000d8980 	call	d898 <__subdf3>
    519c:	a5000c04 	addi	r20,r20,48
    51a0:	a80d883a 	mov	r6,r21
    51a4:	980f883a 	mov	r7,r19
    51a8:	1009883a 	mov	r4,r2
    51ac:	180b883a 	mov	r5,r3
    51b0:	95000005 	stb	r20,0(r18)
    51b4:	1021883a 	mov	r16,r2
    51b8:	1823883a 	mov	r17,r3
    51bc:	000d08c0 	call	d08c <__ledf2>
    51c0:	bdc00044 	addi	r23,r23,1
    51c4:	800d883a 	mov	r6,r16
    51c8:	880f883a 	mov	r7,r17
    51cc:	0009883a 	mov	r4,zero
    51d0:	014ffc34 	movhi	r5,16368
    51d4:	103fcf0e 	bge	r2,zero,5114 <__alt_data_end+0xff005114>
    51d8:	d8c01317 	ldw	r3,76(sp)
    51dc:	d8c00515 	stw	r3,20(sp)
    51e0:	d9400917 	ldw	r5,36(sp)
    51e4:	e009883a 	mov	r4,fp
    51e8:	0007a700 	call	7a70 <_Bfree>
    51ec:	d9000517 	ldw	r4,20(sp)
    51f0:	d9802317 	ldw	r6,140(sp)
    51f4:	d9c02517 	ldw	r7,148(sp)
    51f8:	b8000005 	stb	zero,0(r23)
    51fc:	20800044 	addi	r2,r4,1
    5200:	30800015 	stw	r2,0(r6)
    5204:	3802aa26 	beq	r7,zero,5cb0 <_dtoa_r+0x1178>
    5208:	3dc00015 	stw	r23,0(r7)
    520c:	d8800717 	ldw	r2,28(sp)
    5210:	003e7906 	br	4bf8 <__alt_data_end+0xff004bf8>
    5214:	00800434 	movhi	r2,16
    5218:	10bfffc4 	addi	r2,r2,-1
    521c:	88a2703a 	and	r17,r17,r2
    5220:	883e851e 	bne	r17,zero,4c38 <__alt_data_end+0xff004c38>
    5224:	00800074 	movhi	r2,1
    5228:	1084da04 	addi	r2,r2,4968
    522c:	003e8406 	br	4c40 <__alt_data_end+0xff004c40>
    5230:	10c00204 	addi	r3,r2,8
    5234:	003e8706 	br	4c54 <__alt_data_end+0xff004c54>
    5238:	01400434 	movhi	r5,16
    523c:	297fffc4 	addi	r5,r5,-1
    5240:	994a703a 	and	r5,r19,r5
    5244:	9009883a 	mov	r4,r18
    5248:	843f0044 	addi	r16,r16,-1023
    524c:	294ffc34 	orhi	r5,r5,16368
    5250:	dd800217 	ldw	r22,8(sp)
    5254:	d8001115 	stw	zero,68(sp)
    5258:	003ea506 	br	4cf0 <__alt_data_end+0xff004cf0>
    525c:	00800074 	movhi	r2,1
    5260:	1084d104 	addi	r2,r2,4932
    5264:	003e6406 	br	4bf8 <__alt_data_end+0xff004bf8>
    5268:	e0001115 	stw	zero,68(fp)
    526c:	000b883a 	mov	r5,zero
    5270:	e009883a 	mov	r4,fp
    5274:	00079c80 	call	79c8 <_Balloc>
    5278:	01bfffc4 	movi	r6,-1
    527c:	01c00044 	movi	r7,1
    5280:	d8800715 	stw	r2,28(sp)
    5284:	d9800c15 	stw	r6,48(sp)
    5288:	e0801015 	stw	r2,64(fp)
    528c:	d8000315 	stw	zero,12(sp)
    5290:	d9c00b15 	stw	r7,44(sp)
    5294:	d9800615 	stw	r6,24(sp)
    5298:	d8002215 	stw	zero,136(sp)
    529c:	d8800117 	ldw	r2,4(sp)
    52a0:	10008916 	blt	r2,zero,54c8 <_dtoa_r+0x990>
    52a4:	d9000517 	ldw	r4,20(sp)
    52a8:	00c00384 	movi	r3,14
    52ac:	19008616 	blt	r3,r4,54c8 <_dtoa_r+0x990>
    52b0:	200490fa 	slli	r2,r4,3
    52b4:	00c00074 	movhi	r3,1
    52b8:	d9802217 	ldw	r6,136(sp)
    52bc:	18c4f904 	addi	r3,r3,5092
    52c0:	1885883a 	add	r2,r3,r2
    52c4:	14000017 	ldw	r16,0(r2)
    52c8:	14400117 	ldw	r17,4(r2)
    52cc:	30016316 	blt	r6,zero,585c <_dtoa_r+0xd24>
    52d0:	800d883a 	mov	r6,r16
    52d4:	880f883a 	mov	r7,r17
    52d8:	9009883a 	mov	r4,r18
    52dc:	980b883a 	mov	r5,r19
    52e0:	000c6400 	call	c640 <__divdf3>
    52e4:	180b883a 	mov	r5,r3
    52e8:	1009883a 	mov	r4,r2
    52ec:	000e1940 	call	e194 <__fixdfsi>
    52f0:	1009883a 	mov	r4,r2
    52f4:	102b883a 	mov	r21,r2
    52f8:	000e2140 	call	e214 <__floatsidf>
    52fc:	800d883a 	mov	r6,r16
    5300:	880f883a 	mov	r7,r17
    5304:	1009883a 	mov	r4,r2
    5308:	180b883a 	mov	r5,r3
    530c:	000d1800 	call	d180 <__muldf3>
    5310:	100d883a 	mov	r6,r2
    5314:	180f883a 	mov	r7,r3
    5318:	9009883a 	mov	r4,r18
    531c:	980b883a 	mov	r5,r19
    5320:	000d8980 	call	d898 <__subdf3>
    5324:	d9c00717 	ldw	r7,28(sp)
    5328:	1009883a 	mov	r4,r2
    532c:	a8800c04 	addi	r2,r21,48
    5330:	38800005 	stb	r2,0(r7)
    5334:	3dc00044 	addi	r23,r7,1
    5338:	d9c00617 	ldw	r7,24(sp)
    533c:	01800044 	movi	r6,1
    5340:	180b883a 	mov	r5,r3
    5344:	2005883a 	mov	r2,r4
    5348:	39803826 	beq	r7,r6,542c <_dtoa_r+0x8f4>
    534c:	000d883a 	mov	r6,zero
    5350:	01d00934 	movhi	r7,16420
    5354:	000d1800 	call	d180 <__muldf3>
    5358:	000d883a 	mov	r6,zero
    535c:	000f883a 	mov	r7,zero
    5360:	1009883a 	mov	r4,r2
    5364:	180b883a 	mov	r5,r3
    5368:	1025883a 	mov	r18,r2
    536c:	1827883a 	mov	r19,r3
    5370:	000cf280 	call	cf28 <__eqdf2>
    5374:	103f9a26 	beq	r2,zero,51e0 <__alt_data_end+0xff0051e0>
    5378:	d9c00617 	ldw	r7,24(sp)
    537c:	d8c00717 	ldw	r3,28(sp)
    5380:	b829883a 	mov	r20,r23
    5384:	38bfffc4 	addi	r2,r7,-1
    5388:	18ad883a 	add	r22,r3,r2
    538c:	00000a06 	br	53b8 <_dtoa_r+0x880>
    5390:	000d1800 	call	d180 <__muldf3>
    5394:	000d883a 	mov	r6,zero
    5398:	000f883a 	mov	r7,zero
    539c:	1009883a 	mov	r4,r2
    53a0:	180b883a 	mov	r5,r3
    53a4:	1025883a 	mov	r18,r2
    53a8:	1827883a 	mov	r19,r3
    53ac:	b829883a 	mov	r20,r23
    53b0:	000cf280 	call	cf28 <__eqdf2>
    53b4:	103f8a26 	beq	r2,zero,51e0 <__alt_data_end+0xff0051e0>
    53b8:	800d883a 	mov	r6,r16
    53bc:	880f883a 	mov	r7,r17
    53c0:	9009883a 	mov	r4,r18
    53c4:	980b883a 	mov	r5,r19
    53c8:	000c6400 	call	c640 <__divdf3>
    53cc:	180b883a 	mov	r5,r3
    53d0:	1009883a 	mov	r4,r2
    53d4:	000e1940 	call	e194 <__fixdfsi>
    53d8:	1009883a 	mov	r4,r2
    53dc:	102b883a 	mov	r21,r2
    53e0:	000e2140 	call	e214 <__floatsidf>
    53e4:	800d883a 	mov	r6,r16
    53e8:	880f883a 	mov	r7,r17
    53ec:	1009883a 	mov	r4,r2
    53f0:	180b883a 	mov	r5,r3
    53f4:	000d1800 	call	d180 <__muldf3>
    53f8:	100d883a 	mov	r6,r2
    53fc:	180f883a 	mov	r7,r3
    5400:	9009883a 	mov	r4,r18
    5404:	980b883a 	mov	r5,r19
    5408:	000d8980 	call	d898 <__subdf3>
    540c:	aa000c04 	addi	r8,r21,48
    5410:	a2000005 	stb	r8,0(r20)
    5414:	000d883a 	mov	r6,zero
    5418:	01d00934 	movhi	r7,16420
    541c:	1009883a 	mov	r4,r2
    5420:	180b883a 	mov	r5,r3
    5424:	a5c00044 	addi	r23,r20,1
    5428:	b53fd91e 	bne	r22,r20,5390 <__alt_data_end+0xff005390>
    542c:	100d883a 	mov	r6,r2
    5430:	180f883a 	mov	r7,r3
    5434:	1009883a 	mov	r4,r2
    5438:	180b883a 	mov	r5,r3
    543c:	000bd940 	call	bd94 <__adddf3>
    5440:	100d883a 	mov	r6,r2
    5444:	180f883a 	mov	r7,r3
    5448:	8009883a 	mov	r4,r16
    544c:	880b883a 	mov	r5,r17
    5450:	1027883a 	mov	r19,r2
    5454:	1825883a 	mov	r18,r3
    5458:	000d08c0 	call	d08c <__ledf2>
    545c:	10000816 	blt	r2,zero,5480 <_dtoa_r+0x948>
    5460:	980d883a 	mov	r6,r19
    5464:	900f883a 	mov	r7,r18
    5468:	8009883a 	mov	r4,r16
    546c:	880b883a 	mov	r5,r17
    5470:	000cf280 	call	cf28 <__eqdf2>
    5474:	103f5a1e 	bne	r2,zero,51e0 <__alt_data_end+0xff0051e0>
    5478:	ad40004c 	andi	r21,r21,1
    547c:	a83f5826 	beq	r21,zero,51e0 <__alt_data_end+0xff0051e0>
    5480:	bd3fffc3 	ldbu	r20,-1(r23)
    5484:	b8bfffc4 	addi	r2,r23,-1
    5488:	1007883a 	mov	r3,r2
    548c:	01400e44 	movi	r5,57
    5490:	d9800717 	ldw	r6,28(sp)
    5494:	00000506 	br	54ac <_dtoa_r+0x974>
    5498:	18ffffc4 	addi	r3,r3,-1
    549c:	11824726 	beq	r2,r6,5dbc <_dtoa_r+0x1284>
    54a0:	1d000003 	ldbu	r20,0(r3)
    54a4:	102f883a 	mov	r23,r2
    54a8:	10bfffc4 	addi	r2,r2,-1
    54ac:	a1003fcc 	andi	r4,r20,255
    54b0:	2100201c 	xori	r4,r4,128
    54b4:	213fe004 	addi	r4,r4,-128
    54b8:	217ff726 	beq	r4,r5,5498 <__alt_data_end+0xff005498>
    54bc:	a2000044 	addi	r8,r20,1
    54c0:	12000005 	stb	r8,0(r2)
    54c4:	003f4606 	br	51e0 <__alt_data_end+0xff0051e0>
    54c8:	d9000b17 	ldw	r4,44(sp)
    54cc:	2000c826 	beq	r4,zero,57f0 <_dtoa_r+0xcb8>
    54d0:	d9800317 	ldw	r6,12(sp)
    54d4:	00c00044 	movi	r3,1
    54d8:	1980f90e 	bge	r3,r6,58c0 <_dtoa_r+0xd88>
    54dc:	d8800617 	ldw	r2,24(sp)
    54e0:	d8c00a17 	ldw	r3,40(sp)
    54e4:	157fffc4 	addi	r21,r2,-1
    54e8:	1d41f316 	blt	r3,r21,5cb8 <_dtoa_r+0x1180>
    54ec:	1d6bc83a 	sub	r21,r3,r21
    54f0:	d9c00617 	ldw	r7,24(sp)
    54f4:	3802aa16 	blt	r7,zero,5fa0 <_dtoa_r+0x1468>
    54f8:	dd000817 	ldw	r20,32(sp)
    54fc:	d8800617 	ldw	r2,24(sp)
    5500:	d8c00817 	ldw	r3,32(sp)
    5504:	01400044 	movi	r5,1
    5508:	e009883a 	mov	r4,fp
    550c:	1887883a 	add	r3,r3,r2
    5510:	d8c00815 	stw	r3,32(sp)
    5514:	b0ad883a 	add	r22,r22,r2
    5518:	0007dd40 	call	7dd4 <__i2b>
    551c:	1023883a 	mov	r17,r2
    5520:	a0000826 	beq	r20,zero,5544 <_dtoa_r+0xa0c>
    5524:	0580070e 	bge	zero,r22,5544 <_dtoa_r+0xa0c>
    5528:	a005883a 	mov	r2,r20
    552c:	b500b916 	blt	r22,r20,5814 <_dtoa_r+0xcdc>
    5530:	d9000817 	ldw	r4,32(sp)
    5534:	a0a9c83a 	sub	r20,r20,r2
    5538:	b0adc83a 	sub	r22,r22,r2
    553c:	2089c83a 	sub	r4,r4,r2
    5540:	d9000815 	stw	r4,32(sp)
    5544:	d9800a17 	ldw	r6,40(sp)
    5548:	0181810e 	bge	zero,r6,5b50 <_dtoa_r+0x1018>
    554c:	d9c00b17 	ldw	r7,44(sp)
    5550:	3800b326 	beq	r7,zero,5820 <_dtoa_r+0xce8>
    5554:	a800b226 	beq	r21,zero,5820 <_dtoa_r+0xce8>
    5558:	880b883a 	mov	r5,r17
    555c:	a80d883a 	mov	r6,r21
    5560:	e009883a 	mov	r4,fp
    5564:	00080080 	call	8008 <__pow5mult>
    5568:	d9800917 	ldw	r6,36(sp)
    556c:	100b883a 	mov	r5,r2
    5570:	e009883a 	mov	r4,fp
    5574:	1023883a 	mov	r17,r2
    5578:	0007e100 	call	7e10 <__multiply>
    557c:	1021883a 	mov	r16,r2
    5580:	d8800a17 	ldw	r2,40(sp)
    5584:	d9400917 	ldw	r5,36(sp)
    5588:	e009883a 	mov	r4,fp
    558c:	1545c83a 	sub	r2,r2,r21
    5590:	d8800a15 	stw	r2,40(sp)
    5594:	0007a700 	call	7a70 <_Bfree>
    5598:	d8c00a17 	ldw	r3,40(sp)
    559c:	18009f1e 	bne	r3,zero,581c <_dtoa_r+0xce4>
    55a0:	05c00044 	movi	r23,1
    55a4:	e009883a 	mov	r4,fp
    55a8:	b80b883a 	mov	r5,r23
    55ac:	0007dd40 	call	7dd4 <__i2b>
    55b0:	d9000d17 	ldw	r4,52(sp)
    55b4:	102b883a 	mov	r21,r2
    55b8:	2000ce26 	beq	r4,zero,58f4 <_dtoa_r+0xdbc>
    55bc:	200d883a 	mov	r6,r4
    55c0:	100b883a 	mov	r5,r2
    55c4:	e009883a 	mov	r4,fp
    55c8:	00080080 	call	8008 <__pow5mult>
    55cc:	d9800317 	ldw	r6,12(sp)
    55d0:	102b883a 	mov	r21,r2
    55d4:	b981810e 	bge	r23,r6,5bdc <_dtoa_r+0x10a4>
    55d8:	0027883a 	mov	r19,zero
    55dc:	a8800417 	ldw	r2,16(r21)
    55e0:	05c00804 	movi	r23,32
    55e4:	10800104 	addi	r2,r2,4
    55e8:	1085883a 	add	r2,r2,r2
    55ec:	1085883a 	add	r2,r2,r2
    55f0:	a885883a 	add	r2,r21,r2
    55f4:	11000017 	ldw	r4,0(r2)
    55f8:	0007cbc0 	call	7cbc <__hi0bits>
    55fc:	b885c83a 	sub	r2,r23,r2
    5600:	1585883a 	add	r2,r2,r22
    5604:	108007cc 	andi	r2,r2,31
    5608:	1000b326 	beq	r2,zero,58d8 <_dtoa_r+0xda0>
    560c:	00c00804 	movi	r3,32
    5610:	1887c83a 	sub	r3,r3,r2
    5614:	01000104 	movi	r4,4
    5618:	20c2cd0e 	bge	r4,r3,6150 <_dtoa_r+0x1618>
    561c:	00c00704 	movi	r3,28
    5620:	1885c83a 	sub	r2,r3,r2
    5624:	d8c00817 	ldw	r3,32(sp)
    5628:	a0a9883a 	add	r20,r20,r2
    562c:	b0ad883a 	add	r22,r22,r2
    5630:	1887883a 	add	r3,r3,r2
    5634:	d8c00815 	stw	r3,32(sp)
    5638:	d9800817 	ldw	r6,32(sp)
    563c:	0180040e 	bge	zero,r6,5650 <_dtoa_r+0xb18>
    5640:	800b883a 	mov	r5,r16
    5644:	e009883a 	mov	r4,fp
    5648:	00081480 	call	8148 <__lshift>
    564c:	1021883a 	mov	r16,r2
    5650:	0580050e 	bge	zero,r22,5668 <_dtoa_r+0xb30>
    5654:	a80b883a 	mov	r5,r21
    5658:	b00d883a 	mov	r6,r22
    565c:	e009883a 	mov	r4,fp
    5660:	00081480 	call	8148 <__lshift>
    5664:	102b883a 	mov	r21,r2
    5668:	d9c00e17 	ldw	r7,56(sp)
    566c:	3801211e 	bne	r7,zero,5af4 <_dtoa_r+0xfbc>
    5670:	d9800617 	ldw	r6,24(sp)
    5674:	0181380e 	bge	zero,r6,5b58 <_dtoa_r+0x1020>
    5678:	d8c00b17 	ldw	r3,44(sp)
    567c:	1800ab1e 	bne	r3,zero,592c <_dtoa_r+0xdf4>
    5680:	dc800717 	ldw	r18,28(sp)
    5684:	dcc00617 	ldw	r19,24(sp)
    5688:	9029883a 	mov	r20,r18
    568c:	00000206 	br	5698 <_dtoa_r+0xb60>
    5690:	0007a980 	call	7a98 <__multadd>
    5694:	1021883a 	mov	r16,r2
    5698:	a80b883a 	mov	r5,r21
    569c:	8009883a 	mov	r4,r16
    56a0:	00049380 	call	4938 <quorem>
    56a4:	10800c04 	addi	r2,r2,48
    56a8:	90800005 	stb	r2,0(r18)
    56ac:	94800044 	addi	r18,r18,1
    56b0:	9507c83a 	sub	r3,r18,r20
    56b4:	000f883a 	mov	r7,zero
    56b8:	01800284 	movi	r6,10
    56bc:	800b883a 	mov	r5,r16
    56c0:	e009883a 	mov	r4,fp
    56c4:	1cfff216 	blt	r3,r19,5690 <__alt_data_end+0xff005690>
    56c8:	1011883a 	mov	r8,r2
    56cc:	d8800617 	ldw	r2,24(sp)
    56d0:	0082370e 	bge	zero,r2,5fb0 <_dtoa_r+0x1478>
    56d4:	d9000717 	ldw	r4,28(sp)
    56d8:	0025883a 	mov	r18,zero
    56dc:	20af883a 	add	r23,r4,r2
    56e0:	01800044 	movi	r6,1
    56e4:	800b883a 	mov	r5,r16
    56e8:	e009883a 	mov	r4,fp
    56ec:	da001715 	stw	r8,92(sp)
    56f0:	00081480 	call	8148 <__lshift>
    56f4:	a80b883a 	mov	r5,r21
    56f8:	1009883a 	mov	r4,r2
    56fc:	d8800915 	stw	r2,36(sp)
    5700:	00082900 	call	8290 <__mcmp>
    5704:	da001717 	ldw	r8,92(sp)
    5708:	0081800e 	bge	zero,r2,5d0c <_dtoa_r+0x11d4>
    570c:	b93fffc3 	ldbu	r4,-1(r23)
    5710:	b8bfffc4 	addi	r2,r23,-1
    5714:	1007883a 	mov	r3,r2
    5718:	01800e44 	movi	r6,57
    571c:	d9c00717 	ldw	r7,28(sp)
    5720:	00000506 	br	5738 <_dtoa_r+0xc00>
    5724:	18ffffc4 	addi	r3,r3,-1
    5728:	11c12326 	beq	r2,r7,5bb8 <_dtoa_r+0x1080>
    572c:	19000003 	ldbu	r4,0(r3)
    5730:	102f883a 	mov	r23,r2
    5734:	10bfffc4 	addi	r2,r2,-1
    5738:	21403fcc 	andi	r5,r4,255
    573c:	2940201c 	xori	r5,r5,128
    5740:	297fe004 	addi	r5,r5,-128
    5744:	29bff726 	beq	r5,r6,5724 <__alt_data_end+0xff005724>
    5748:	21000044 	addi	r4,r4,1
    574c:	11000005 	stb	r4,0(r2)
    5750:	a80b883a 	mov	r5,r21
    5754:	e009883a 	mov	r4,fp
    5758:	0007a700 	call	7a70 <_Bfree>
    575c:	883ea026 	beq	r17,zero,51e0 <__alt_data_end+0xff0051e0>
    5760:	90000426 	beq	r18,zero,5774 <_dtoa_r+0xc3c>
    5764:	94400326 	beq	r18,r17,5774 <_dtoa_r+0xc3c>
    5768:	900b883a 	mov	r5,r18
    576c:	e009883a 	mov	r4,fp
    5770:	0007a700 	call	7a70 <_Bfree>
    5774:	880b883a 	mov	r5,r17
    5778:	e009883a 	mov	r4,fp
    577c:	0007a700 	call	7a70 <_Bfree>
    5780:	003e9706 	br	51e0 <__alt_data_end+0xff0051e0>
    5784:	01800044 	movi	r6,1
    5788:	d9800e15 	stw	r6,56(sp)
    578c:	003d9606 	br	4de8 <__alt_data_end+0xff004de8>
    5790:	d8800817 	ldw	r2,32(sp)
    5794:	d8c00517 	ldw	r3,20(sp)
    5798:	d8000d15 	stw	zero,52(sp)
    579c:	10c5c83a 	sub	r2,r2,r3
    57a0:	00c9c83a 	sub	r4,zero,r3
    57a4:	d8800815 	stw	r2,32(sp)
    57a8:	d9000a15 	stw	r4,40(sp)
    57ac:	003d9706 	br	4e0c <__alt_data_end+0xff004e0c>
    57b0:	05adc83a 	sub	r22,zero,r22
    57b4:	dd800815 	stw	r22,32(sp)
    57b8:	002d883a 	mov	r22,zero
    57bc:	003d8e06 	br	4df8 <__alt_data_end+0xff004df8>
    57c0:	d9000517 	ldw	r4,20(sp)
    57c4:	000e2140 	call	e214 <__floatsidf>
    57c8:	100d883a 	mov	r6,r2
    57cc:	180f883a 	mov	r7,r3
    57d0:	a009883a 	mov	r4,r20
    57d4:	880b883a 	mov	r5,r17
    57d8:	000cf280 	call	cf28 <__eqdf2>
    57dc:	103d7126 	beq	r2,zero,4da4 <__alt_data_end+0xff004da4>
    57e0:	d9c00517 	ldw	r7,20(sp)
    57e4:	39ffffc4 	addi	r7,r7,-1
    57e8:	d9c00515 	stw	r7,20(sp)
    57ec:	003d6d06 	br	4da4 <__alt_data_end+0xff004da4>
    57f0:	dd400a17 	ldw	r21,40(sp)
    57f4:	dd000817 	ldw	r20,32(sp)
    57f8:	0023883a 	mov	r17,zero
    57fc:	003f4806 	br	5520 <__alt_data_end+0xff005520>
    5800:	10e3c83a 	sub	r17,r2,r3
    5804:	9448983a 	sll	r4,r18,r17
    5808:	003d3206 	br	4cd4 <__alt_data_end+0xff004cd4>
    580c:	d8000e15 	stw	zero,56(sp)
    5810:	003d7506 	br	4de8 <__alt_data_end+0xff004de8>
    5814:	b005883a 	mov	r2,r22
    5818:	003f4506 	br	5530 <__alt_data_end+0xff005530>
    581c:	dc000915 	stw	r16,36(sp)
    5820:	d9800a17 	ldw	r6,40(sp)
    5824:	d9400917 	ldw	r5,36(sp)
    5828:	e009883a 	mov	r4,fp
    582c:	00080080 	call	8008 <__pow5mult>
    5830:	1021883a 	mov	r16,r2
    5834:	003f5a06 	br	55a0 <__alt_data_end+0xff0055a0>
    5838:	01c00044 	movi	r7,1
    583c:	d9c00b15 	stw	r7,44(sp)
    5840:	d8802217 	ldw	r2,136(sp)
    5844:	0081280e 	bge	zero,r2,5ce8 <_dtoa_r+0x11b0>
    5848:	100d883a 	mov	r6,r2
    584c:	1021883a 	mov	r16,r2
    5850:	d8800c15 	stw	r2,48(sp)
    5854:	d8800615 	stw	r2,24(sp)
    5858:	003d8806 	br	4e7c <__alt_data_end+0xff004e7c>
    585c:	d8800617 	ldw	r2,24(sp)
    5860:	00be9b16 	blt	zero,r2,52d0 <__alt_data_end+0xff0052d0>
    5864:	10010f1e 	bne	r2,zero,5ca4 <_dtoa_r+0x116c>
    5868:	880b883a 	mov	r5,r17
    586c:	000d883a 	mov	r6,zero
    5870:	01d00534 	movhi	r7,16404
    5874:	8009883a 	mov	r4,r16
    5878:	000d1800 	call	d180 <__muldf3>
    587c:	900d883a 	mov	r6,r18
    5880:	980f883a 	mov	r7,r19
    5884:	1009883a 	mov	r4,r2
    5888:	180b883a 	mov	r5,r3
    588c:	000cfb00 	call	cfb0 <__gedf2>
    5890:	002b883a 	mov	r21,zero
    5894:	0023883a 	mov	r17,zero
    5898:	1000bf16 	blt	r2,zero,5b98 <_dtoa_r+0x1060>
    589c:	d9802217 	ldw	r6,136(sp)
    58a0:	ddc00717 	ldw	r23,28(sp)
    58a4:	018c303a 	nor	r6,zero,r6
    58a8:	d9800515 	stw	r6,20(sp)
    58ac:	a80b883a 	mov	r5,r21
    58b0:	e009883a 	mov	r4,fp
    58b4:	0007a700 	call	7a70 <_Bfree>
    58b8:	883e4926 	beq	r17,zero,51e0 <__alt_data_end+0xff0051e0>
    58bc:	003fad06 	br	5774 <__alt_data_end+0xff005774>
    58c0:	d9c01117 	ldw	r7,68(sp)
    58c4:	3801bc26 	beq	r7,zero,5fb8 <_dtoa_r+0x1480>
    58c8:	10810cc4 	addi	r2,r2,1075
    58cc:	dd400a17 	ldw	r21,40(sp)
    58d0:	dd000817 	ldw	r20,32(sp)
    58d4:	003f0a06 	br	5500 <__alt_data_end+0xff005500>
    58d8:	00800704 	movi	r2,28
    58dc:	d9000817 	ldw	r4,32(sp)
    58e0:	a0a9883a 	add	r20,r20,r2
    58e4:	b0ad883a 	add	r22,r22,r2
    58e8:	2089883a 	add	r4,r4,r2
    58ec:	d9000815 	stw	r4,32(sp)
    58f0:	003f5106 	br	5638 <__alt_data_end+0xff005638>
    58f4:	d8c00317 	ldw	r3,12(sp)
    58f8:	b8c1fc0e 	bge	r23,r3,60ec <_dtoa_r+0x15b4>
    58fc:	0027883a 	mov	r19,zero
    5900:	b805883a 	mov	r2,r23
    5904:	003f3e06 	br	5600 <__alt_data_end+0xff005600>
    5908:	880b883a 	mov	r5,r17
    590c:	e009883a 	mov	r4,fp
    5910:	000f883a 	mov	r7,zero
    5914:	01800284 	movi	r6,10
    5918:	0007a980 	call	7a98 <__multadd>
    591c:	d9000c17 	ldw	r4,48(sp)
    5920:	1023883a 	mov	r17,r2
    5924:	0102040e 	bge	zero,r4,6138 <_dtoa_r+0x1600>
    5928:	d9000615 	stw	r4,24(sp)
    592c:	0500050e 	bge	zero,r20,5944 <_dtoa_r+0xe0c>
    5930:	880b883a 	mov	r5,r17
    5934:	a00d883a 	mov	r6,r20
    5938:	e009883a 	mov	r4,fp
    593c:	00081480 	call	8148 <__lshift>
    5940:	1023883a 	mov	r17,r2
    5944:	9801241e 	bne	r19,zero,5dd8 <_dtoa_r+0x12a0>
    5948:	8829883a 	mov	r20,r17
    594c:	d9000617 	ldw	r4,24(sp)
    5950:	dcc00717 	ldw	r19,28(sp)
    5954:	9480004c 	andi	r18,r18,1
    5958:	20bfffc4 	addi	r2,r4,-1
    595c:	9885883a 	add	r2,r19,r2
    5960:	d8800415 	stw	r2,16(sp)
    5964:	dc800615 	stw	r18,24(sp)
    5968:	a80b883a 	mov	r5,r21
    596c:	8009883a 	mov	r4,r16
    5970:	00049380 	call	4938 <quorem>
    5974:	880b883a 	mov	r5,r17
    5978:	8009883a 	mov	r4,r16
    597c:	102f883a 	mov	r23,r2
    5980:	00082900 	call	8290 <__mcmp>
    5984:	a80b883a 	mov	r5,r21
    5988:	a00d883a 	mov	r6,r20
    598c:	e009883a 	mov	r4,fp
    5990:	102d883a 	mov	r22,r2
    5994:	00082f00 	call	82f0 <__mdiff>
    5998:	1007883a 	mov	r3,r2
    599c:	10800317 	ldw	r2,12(r2)
    59a0:	bc800c04 	addi	r18,r23,48
    59a4:	180b883a 	mov	r5,r3
    59a8:	10004e1e 	bne	r2,zero,5ae4 <_dtoa_r+0xfac>
    59ac:	8009883a 	mov	r4,r16
    59b0:	d8c01615 	stw	r3,88(sp)
    59b4:	00082900 	call	8290 <__mcmp>
    59b8:	d8c01617 	ldw	r3,88(sp)
    59bc:	e009883a 	mov	r4,fp
    59c0:	d8801615 	stw	r2,88(sp)
    59c4:	180b883a 	mov	r5,r3
    59c8:	0007a700 	call	7a70 <_Bfree>
    59cc:	d8801617 	ldw	r2,88(sp)
    59d0:	1000041e 	bne	r2,zero,59e4 <_dtoa_r+0xeac>
    59d4:	d9800317 	ldw	r6,12(sp)
    59d8:	3000021e 	bne	r6,zero,59e4 <_dtoa_r+0xeac>
    59dc:	d8c00617 	ldw	r3,24(sp)
    59e0:	18003726 	beq	r3,zero,5ac0 <_dtoa_r+0xf88>
    59e4:	b0002016 	blt	r22,zero,5a68 <_dtoa_r+0xf30>
    59e8:	b000041e 	bne	r22,zero,59fc <_dtoa_r+0xec4>
    59ec:	d9000317 	ldw	r4,12(sp)
    59f0:	2000021e 	bne	r4,zero,59fc <_dtoa_r+0xec4>
    59f4:	d8c00617 	ldw	r3,24(sp)
    59f8:	18001b26 	beq	r3,zero,5a68 <_dtoa_r+0xf30>
    59fc:	00810716 	blt	zero,r2,5e1c <_dtoa_r+0x12e4>
    5a00:	d8c00417 	ldw	r3,16(sp)
    5a04:	9d800044 	addi	r22,r19,1
    5a08:	9c800005 	stb	r18,0(r19)
    5a0c:	b02f883a 	mov	r23,r22
    5a10:	98c10626 	beq	r19,r3,5e2c <_dtoa_r+0x12f4>
    5a14:	800b883a 	mov	r5,r16
    5a18:	000f883a 	mov	r7,zero
    5a1c:	01800284 	movi	r6,10
    5a20:	e009883a 	mov	r4,fp
    5a24:	0007a980 	call	7a98 <__multadd>
    5a28:	1021883a 	mov	r16,r2
    5a2c:	000f883a 	mov	r7,zero
    5a30:	01800284 	movi	r6,10
    5a34:	880b883a 	mov	r5,r17
    5a38:	e009883a 	mov	r4,fp
    5a3c:	8d002526 	beq	r17,r20,5ad4 <_dtoa_r+0xf9c>
    5a40:	0007a980 	call	7a98 <__multadd>
    5a44:	a00b883a 	mov	r5,r20
    5a48:	000f883a 	mov	r7,zero
    5a4c:	01800284 	movi	r6,10
    5a50:	e009883a 	mov	r4,fp
    5a54:	1023883a 	mov	r17,r2
    5a58:	0007a980 	call	7a98 <__multadd>
    5a5c:	1029883a 	mov	r20,r2
    5a60:	b027883a 	mov	r19,r22
    5a64:	003fc006 	br	5968 <__alt_data_end+0xff005968>
    5a68:	9011883a 	mov	r8,r18
    5a6c:	00800e0e 	bge	zero,r2,5aa8 <_dtoa_r+0xf70>
    5a70:	800b883a 	mov	r5,r16
    5a74:	01800044 	movi	r6,1
    5a78:	e009883a 	mov	r4,fp
    5a7c:	da001715 	stw	r8,92(sp)
    5a80:	00081480 	call	8148 <__lshift>
    5a84:	a80b883a 	mov	r5,r21
    5a88:	1009883a 	mov	r4,r2
    5a8c:	1021883a 	mov	r16,r2
    5a90:	00082900 	call	8290 <__mcmp>
    5a94:	da001717 	ldw	r8,92(sp)
    5a98:	0081960e 	bge	zero,r2,60f4 <_dtoa_r+0x15bc>
    5a9c:	00800e44 	movi	r2,57
    5aa0:	40817026 	beq	r8,r2,6064 <_dtoa_r+0x152c>
    5aa4:	ba000c44 	addi	r8,r23,49
    5aa8:	8825883a 	mov	r18,r17
    5aac:	9dc00044 	addi	r23,r19,1
    5ab0:	9a000005 	stb	r8,0(r19)
    5ab4:	a023883a 	mov	r17,r20
    5ab8:	dc000915 	stw	r16,36(sp)
    5abc:	003f2406 	br	5750 <__alt_data_end+0xff005750>
    5ac0:	00800e44 	movi	r2,57
    5ac4:	9011883a 	mov	r8,r18
    5ac8:	90816626 	beq	r18,r2,6064 <_dtoa_r+0x152c>
    5acc:	05bff516 	blt	zero,r22,5aa4 <__alt_data_end+0xff005aa4>
    5ad0:	003ff506 	br	5aa8 <__alt_data_end+0xff005aa8>
    5ad4:	0007a980 	call	7a98 <__multadd>
    5ad8:	1023883a 	mov	r17,r2
    5adc:	1029883a 	mov	r20,r2
    5ae0:	003fdf06 	br	5a60 <__alt_data_end+0xff005a60>
    5ae4:	e009883a 	mov	r4,fp
    5ae8:	0007a700 	call	7a70 <_Bfree>
    5aec:	00800044 	movi	r2,1
    5af0:	003fbc06 	br	59e4 <__alt_data_end+0xff0059e4>
    5af4:	a80b883a 	mov	r5,r21
    5af8:	8009883a 	mov	r4,r16
    5afc:	00082900 	call	8290 <__mcmp>
    5b00:	103edb0e 	bge	r2,zero,5670 <__alt_data_end+0xff005670>
    5b04:	800b883a 	mov	r5,r16
    5b08:	000f883a 	mov	r7,zero
    5b0c:	01800284 	movi	r6,10
    5b10:	e009883a 	mov	r4,fp
    5b14:	0007a980 	call	7a98 <__multadd>
    5b18:	1021883a 	mov	r16,r2
    5b1c:	d8800517 	ldw	r2,20(sp)
    5b20:	d8c00b17 	ldw	r3,44(sp)
    5b24:	10bfffc4 	addi	r2,r2,-1
    5b28:	d8800515 	stw	r2,20(sp)
    5b2c:	183f761e 	bne	r3,zero,5908 <__alt_data_end+0xff005908>
    5b30:	d9000c17 	ldw	r4,48(sp)
    5b34:	0101730e 	bge	zero,r4,6104 <_dtoa_r+0x15cc>
    5b38:	d9000615 	stw	r4,24(sp)
    5b3c:	003ed006 	br	5680 <__alt_data_end+0xff005680>
    5b40:	00800084 	movi	r2,2
    5b44:	3081861e 	bne	r6,r2,6160 <_dtoa_r+0x1628>
    5b48:	d8000b15 	stw	zero,44(sp)
    5b4c:	003f3c06 	br	5840 <__alt_data_end+0xff005840>
    5b50:	dc000917 	ldw	r16,36(sp)
    5b54:	003e9206 	br	55a0 <__alt_data_end+0xff0055a0>
    5b58:	d9c00317 	ldw	r7,12(sp)
    5b5c:	00800084 	movi	r2,2
    5b60:	11fec50e 	bge	r2,r7,5678 <__alt_data_end+0xff005678>
    5b64:	d9000617 	ldw	r4,24(sp)
    5b68:	20013c1e 	bne	r4,zero,605c <_dtoa_r+0x1524>
    5b6c:	a80b883a 	mov	r5,r21
    5b70:	000f883a 	mov	r7,zero
    5b74:	01800144 	movi	r6,5
    5b78:	e009883a 	mov	r4,fp
    5b7c:	0007a980 	call	7a98 <__multadd>
    5b80:	100b883a 	mov	r5,r2
    5b84:	8009883a 	mov	r4,r16
    5b88:	102b883a 	mov	r21,r2
    5b8c:	00082900 	call	8290 <__mcmp>
    5b90:	dc000915 	stw	r16,36(sp)
    5b94:	00bf410e 	bge	zero,r2,589c <__alt_data_end+0xff00589c>
    5b98:	d9c00717 	ldw	r7,28(sp)
    5b9c:	00800c44 	movi	r2,49
    5ba0:	38800005 	stb	r2,0(r7)
    5ba4:	d8800517 	ldw	r2,20(sp)
    5ba8:	3dc00044 	addi	r23,r7,1
    5bac:	10800044 	addi	r2,r2,1
    5bb0:	d8800515 	stw	r2,20(sp)
    5bb4:	003f3d06 	br	58ac <__alt_data_end+0xff0058ac>
    5bb8:	d9800517 	ldw	r6,20(sp)
    5bbc:	d9c00717 	ldw	r7,28(sp)
    5bc0:	00800c44 	movi	r2,49
    5bc4:	31800044 	addi	r6,r6,1
    5bc8:	d9800515 	stw	r6,20(sp)
    5bcc:	38800005 	stb	r2,0(r7)
    5bd0:	003edf06 	br	5750 <__alt_data_end+0xff005750>
    5bd4:	d8000b15 	stw	zero,44(sp)
    5bd8:	003c9f06 	br	4e58 <__alt_data_end+0xff004e58>
    5bdc:	903e7e1e 	bne	r18,zero,55d8 <__alt_data_end+0xff0055d8>
    5be0:	00800434 	movhi	r2,16
    5be4:	10bfffc4 	addi	r2,r2,-1
    5be8:	9884703a 	and	r2,r19,r2
    5bec:	1000ea1e 	bne	r2,zero,5f98 <_dtoa_r+0x1460>
    5bf0:	9cdffc2c 	andhi	r19,r19,32752
    5bf4:	9800e826 	beq	r19,zero,5f98 <_dtoa_r+0x1460>
    5bf8:	d9c00817 	ldw	r7,32(sp)
    5bfc:	b5800044 	addi	r22,r22,1
    5c00:	04c00044 	movi	r19,1
    5c04:	39c00044 	addi	r7,r7,1
    5c08:	d9c00815 	stw	r7,32(sp)
    5c0c:	d8800d17 	ldw	r2,52(sp)
    5c10:	103e721e 	bne	r2,zero,55dc <__alt_data_end+0xff0055dc>
    5c14:	00800044 	movi	r2,1
    5c18:	003e7906 	br	5600 <__alt_data_end+0xff005600>
    5c1c:	8009883a 	mov	r4,r16
    5c20:	000e2140 	call	e214 <__floatsidf>
    5c24:	d9800f17 	ldw	r6,60(sp)
    5c28:	d9c01017 	ldw	r7,64(sp)
    5c2c:	1009883a 	mov	r4,r2
    5c30:	180b883a 	mov	r5,r3
    5c34:	000d1800 	call	d180 <__muldf3>
    5c38:	000d883a 	mov	r6,zero
    5c3c:	01d00734 	movhi	r7,16412
    5c40:	1009883a 	mov	r4,r2
    5c44:	180b883a 	mov	r5,r3
    5c48:	000bd940 	call	bd94 <__adddf3>
    5c4c:	047f3034 	movhi	r17,64704
    5c50:	1021883a 	mov	r16,r2
    5c54:	1c63883a 	add	r17,r3,r17
    5c58:	d9000f17 	ldw	r4,60(sp)
    5c5c:	d9401017 	ldw	r5,64(sp)
    5c60:	000d883a 	mov	r6,zero
    5c64:	01d00534 	movhi	r7,16404
    5c68:	000d8980 	call	d898 <__subdf3>
    5c6c:	800d883a 	mov	r6,r16
    5c70:	880f883a 	mov	r7,r17
    5c74:	1009883a 	mov	r4,r2
    5c78:	180b883a 	mov	r5,r3
    5c7c:	102b883a 	mov	r21,r2
    5c80:	1829883a 	mov	r20,r3
    5c84:	000cfb00 	call	cfb0 <__gedf2>
    5c88:	00806c16 	blt	zero,r2,5e3c <_dtoa_r+0x1304>
    5c8c:	89e0003c 	xorhi	r7,r17,32768
    5c90:	800d883a 	mov	r6,r16
    5c94:	a809883a 	mov	r4,r21
    5c98:	a00b883a 	mov	r5,r20
    5c9c:	000d08c0 	call	d08c <__ledf2>
    5ca0:	103d7e0e 	bge	r2,zero,529c <__alt_data_end+0xff00529c>
    5ca4:	002b883a 	mov	r21,zero
    5ca8:	0023883a 	mov	r17,zero
    5cac:	003efb06 	br	589c <__alt_data_end+0xff00589c>
    5cb0:	d8800717 	ldw	r2,28(sp)
    5cb4:	003bd006 	br	4bf8 <__alt_data_end+0xff004bf8>
    5cb8:	d9000a17 	ldw	r4,40(sp)
    5cbc:	d9800d17 	ldw	r6,52(sp)
    5cc0:	dd400a15 	stw	r21,40(sp)
    5cc4:	a905c83a 	sub	r2,r21,r4
    5cc8:	308d883a 	add	r6,r6,r2
    5ccc:	d9800d15 	stw	r6,52(sp)
    5cd0:	002b883a 	mov	r21,zero
    5cd4:	003e0606 	br	54f0 <__alt_data_end+0xff0054f0>
    5cd8:	9023883a 	mov	r17,r18
    5cdc:	9829883a 	mov	r20,r19
    5ce0:	04000084 	movi	r16,2
    5ce4:	003c9206 	br	4f30 <__alt_data_end+0xff004f30>
    5ce8:	04000044 	movi	r16,1
    5cec:	dc000c15 	stw	r16,48(sp)
    5cf0:	dc000615 	stw	r16,24(sp)
    5cf4:	dc002215 	stw	r16,136(sp)
    5cf8:	e0001115 	stw	zero,68(fp)
    5cfc:	000b883a 	mov	r5,zero
    5d00:	003c6906 	br	4ea8 <__alt_data_end+0xff004ea8>
    5d04:	3021883a 	mov	r16,r6
    5d08:	003ffb06 	br	5cf8 <__alt_data_end+0xff005cf8>
    5d0c:	1000021e 	bne	r2,zero,5d18 <_dtoa_r+0x11e0>
    5d10:	4200004c 	andi	r8,r8,1
    5d14:	403e7d1e 	bne	r8,zero,570c <__alt_data_end+0xff00570c>
    5d18:	01000c04 	movi	r4,48
    5d1c:	00000106 	br	5d24 <_dtoa_r+0x11ec>
    5d20:	102f883a 	mov	r23,r2
    5d24:	b8bfffc4 	addi	r2,r23,-1
    5d28:	10c00007 	ldb	r3,0(r2)
    5d2c:	193ffc26 	beq	r3,r4,5d20 <__alt_data_end+0xff005d20>
    5d30:	003e8706 	br	5750 <__alt_data_end+0xff005750>
    5d34:	d8800517 	ldw	r2,20(sp)
    5d38:	00a3c83a 	sub	r17,zero,r2
    5d3c:	8800a426 	beq	r17,zero,5fd0 <_dtoa_r+0x1498>
    5d40:	888003cc 	andi	r2,r17,15
    5d44:	100490fa 	slli	r2,r2,3
    5d48:	00c00074 	movhi	r3,1
    5d4c:	18c4f904 	addi	r3,r3,5092
    5d50:	1885883a 	add	r2,r3,r2
    5d54:	11800017 	ldw	r6,0(r2)
    5d58:	11c00117 	ldw	r7,4(r2)
    5d5c:	9009883a 	mov	r4,r18
    5d60:	980b883a 	mov	r5,r19
    5d64:	8823d13a 	srai	r17,r17,4
    5d68:	000d1800 	call	d180 <__muldf3>
    5d6c:	d8800f15 	stw	r2,60(sp)
    5d70:	d8c01015 	stw	r3,64(sp)
    5d74:	8800e826 	beq	r17,zero,6118 <_dtoa_r+0x15e0>
    5d78:	05000074 	movhi	r20,1
    5d7c:	a504ef04 	addi	r20,r20,5052
    5d80:	04000084 	movi	r16,2
    5d84:	8980004c 	andi	r6,r17,1
    5d88:	1009883a 	mov	r4,r2
    5d8c:	8823d07a 	srai	r17,r17,1
    5d90:	180b883a 	mov	r5,r3
    5d94:	30000426 	beq	r6,zero,5da8 <_dtoa_r+0x1270>
    5d98:	a1800017 	ldw	r6,0(r20)
    5d9c:	a1c00117 	ldw	r7,4(r20)
    5da0:	84000044 	addi	r16,r16,1
    5da4:	000d1800 	call	d180 <__muldf3>
    5da8:	a5000204 	addi	r20,r20,8
    5dac:	883ff51e 	bne	r17,zero,5d84 <__alt_data_end+0xff005d84>
    5db0:	d8800f15 	stw	r2,60(sp)
    5db4:	d8c01015 	stw	r3,64(sp)
    5db8:	003c7606 	br	4f94 <__alt_data_end+0xff004f94>
    5dbc:	00c00c04 	movi	r3,48
    5dc0:	10c00005 	stb	r3,0(r2)
    5dc4:	d8c00517 	ldw	r3,20(sp)
    5dc8:	bd3fffc3 	ldbu	r20,-1(r23)
    5dcc:	18c00044 	addi	r3,r3,1
    5dd0:	d8c00515 	stw	r3,20(sp)
    5dd4:	003db906 	br	54bc <__alt_data_end+0xff0054bc>
    5dd8:	89400117 	ldw	r5,4(r17)
    5ddc:	e009883a 	mov	r4,fp
    5de0:	00079c80 	call	79c8 <_Balloc>
    5de4:	89800417 	ldw	r6,16(r17)
    5de8:	89400304 	addi	r5,r17,12
    5dec:	11000304 	addi	r4,r2,12
    5df0:	31800084 	addi	r6,r6,2
    5df4:	318d883a 	add	r6,r6,r6
    5df8:	318d883a 	add	r6,r6,r6
    5dfc:	1027883a 	mov	r19,r2
    5e00:	00075fc0 	call	75fc <memcpy>
    5e04:	01800044 	movi	r6,1
    5e08:	980b883a 	mov	r5,r19
    5e0c:	e009883a 	mov	r4,fp
    5e10:	00081480 	call	8148 <__lshift>
    5e14:	1029883a 	mov	r20,r2
    5e18:	003ecc06 	br	594c <__alt_data_end+0xff00594c>
    5e1c:	00800e44 	movi	r2,57
    5e20:	90809026 	beq	r18,r2,6064 <_dtoa_r+0x152c>
    5e24:	92000044 	addi	r8,r18,1
    5e28:	003f1f06 	br	5aa8 <__alt_data_end+0xff005aa8>
    5e2c:	9011883a 	mov	r8,r18
    5e30:	8825883a 	mov	r18,r17
    5e34:	a023883a 	mov	r17,r20
    5e38:	003e2906 	br	56e0 <__alt_data_end+0xff0056e0>
    5e3c:	002b883a 	mov	r21,zero
    5e40:	0023883a 	mov	r17,zero
    5e44:	003f5406 	br	5b98 <__alt_data_end+0xff005b98>
    5e48:	61bfffc4 	addi	r6,r12,-1
    5e4c:	300490fa 	slli	r2,r6,3
    5e50:	00c00074 	movhi	r3,1
    5e54:	18c4f904 	addi	r3,r3,5092
    5e58:	1885883a 	add	r2,r3,r2
    5e5c:	11000017 	ldw	r4,0(r2)
    5e60:	11400117 	ldw	r5,4(r2)
    5e64:	d8800717 	ldw	r2,28(sp)
    5e68:	880f883a 	mov	r7,r17
    5e6c:	d9801215 	stw	r6,72(sp)
    5e70:	800d883a 	mov	r6,r16
    5e74:	db001615 	stw	r12,88(sp)
    5e78:	15c00044 	addi	r23,r2,1
    5e7c:	000d1800 	call	d180 <__muldf3>
    5e80:	d9401017 	ldw	r5,64(sp)
    5e84:	d9000f17 	ldw	r4,60(sp)
    5e88:	d8c01515 	stw	r3,84(sp)
    5e8c:	d8801415 	stw	r2,80(sp)
    5e90:	000e1940 	call	e194 <__fixdfsi>
    5e94:	1009883a 	mov	r4,r2
    5e98:	1021883a 	mov	r16,r2
    5e9c:	000e2140 	call	e214 <__floatsidf>
    5ea0:	d9000f17 	ldw	r4,60(sp)
    5ea4:	d9401017 	ldw	r5,64(sp)
    5ea8:	100d883a 	mov	r6,r2
    5eac:	180f883a 	mov	r7,r3
    5eb0:	000d8980 	call	d898 <__subdf3>
    5eb4:	1829883a 	mov	r20,r3
    5eb8:	d8c00717 	ldw	r3,28(sp)
    5ebc:	84000c04 	addi	r16,r16,48
    5ec0:	1023883a 	mov	r17,r2
    5ec4:	1c000005 	stb	r16,0(r3)
    5ec8:	db001617 	ldw	r12,88(sp)
    5ecc:	00800044 	movi	r2,1
    5ed0:	60802226 	beq	r12,r2,5f5c <_dtoa_r+0x1424>
    5ed4:	d9c00717 	ldw	r7,28(sp)
    5ed8:	8805883a 	mov	r2,r17
    5edc:	b82b883a 	mov	r21,r23
    5ee0:	3b19883a 	add	r12,r7,r12
    5ee4:	6023883a 	mov	r17,r12
    5ee8:	a007883a 	mov	r3,r20
    5eec:	dc800f15 	stw	r18,60(sp)
    5ef0:	000d883a 	mov	r6,zero
    5ef4:	01d00934 	movhi	r7,16420
    5ef8:	1009883a 	mov	r4,r2
    5efc:	180b883a 	mov	r5,r3
    5f00:	000d1800 	call	d180 <__muldf3>
    5f04:	180b883a 	mov	r5,r3
    5f08:	1009883a 	mov	r4,r2
    5f0c:	1829883a 	mov	r20,r3
    5f10:	1025883a 	mov	r18,r2
    5f14:	000e1940 	call	e194 <__fixdfsi>
    5f18:	1009883a 	mov	r4,r2
    5f1c:	1021883a 	mov	r16,r2
    5f20:	000e2140 	call	e214 <__floatsidf>
    5f24:	100d883a 	mov	r6,r2
    5f28:	180f883a 	mov	r7,r3
    5f2c:	9009883a 	mov	r4,r18
    5f30:	a00b883a 	mov	r5,r20
    5f34:	84000c04 	addi	r16,r16,48
    5f38:	000d8980 	call	d898 <__subdf3>
    5f3c:	ad400044 	addi	r21,r21,1
    5f40:	ac3fffc5 	stb	r16,-1(r21)
    5f44:	ac7fea1e 	bne	r21,r17,5ef0 <__alt_data_end+0xff005ef0>
    5f48:	1023883a 	mov	r17,r2
    5f4c:	d8801217 	ldw	r2,72(sp)
    5f50:	dc800f17 	ldw	r18,60(sp)
    5f54:	1829883a 	mov	r20,r3
    5f58:	b8af883a 	add	r23,r23,r2
    5f5c:	d9001417 	ldw	r4,80(sp)
    5f60:	d9401517 	ldw	r5,84(sp)
    5f64:	000d883a 	mov	r6,zero
    5f68:	01cff834 	movhi	r7,16352
    5f6c:	000bd940 	call	bd94 <__adddf3>
    5f70:	880d883a 	mov	r6,r17
    5f74:	a00f883a 	mov	r7,r20
    5f78:	1009883a 	mov	r4,r2
    5f7c:	180b883a 	mov	r5,r3
    5f80:	000d08c0 	call	d08c <__ledf2>
    5f84:	10003e0e 	bge	r2,zero,6080 <_dtoa_r+0x1548>
    5f88:	d9001317 	ldw	r4,76(sp)
    5f8c:	bd3fffc3 	ldbu	r20,-1(r23)
    5f90:	d9000515 	stw	r4,20(sp)
    5f94:	003d3b06 	br	5484 <__alt_data_end+0xff005484>
    5f98:	0027883a 	mov	r19,zero
    5f9c:	003f1b06 	br	5c0c <__alt_data_end+0xff005c0c>
    5fa0:	d8800817 	ldw	r2,32(sp)
    5fa4:	11e9c83a 	sub	r20,r2,r7
    5fa8:	0005883a 	mov	r2,zero
    5fac:	003d5406 	br	5500 <__alt_data_end+0xff005500>
    5fb0:	00800044 	movi	r2,1
    5fb4:	003dc706 	br	56d4 <__alt_data_end+0xff0056d4>
    5fb8:	d8c00217 	ldw	r3,8(sp)
    5fbc:	00800d84 	movi	r2,54
    5fc0:	dd400a17 	ldw	r21,40(sp)
    5fc4:	10c5c83a 	sub	r2,r2,r3
    5fc8:	dd000817 	ldw	r20,32(sp)
    5fcc:	003d4c06 	br	5500 <__alt_data_end+0xff005500>
    5fd0:	dc800f15 	stw	r18,60(sp)
    5fd4:	dcc01015 	stw	r19,64(sp)
    5fd8:	04000084 	movi	r16,2
    5fdc:	003bed06 	br	4f94 <__alt_data_end+0xff004f94>
    5fe0:	d9000617 	ldw	r4,24(sp)
    5fe4:	203f0d26 	beq	r4,zero,5c1c <__alt_data_end+0xff005c1c>
    5fe8:	d9800c17 	ldw	r6,48(sp)
    5fec:	01bcab0e 	bge	zero,r6,529c <__alt_data_end+0xff00529c>
    5ff0:	d9401017 	ldw	r5,64(sp)
    5ff4:	d9000f17 	ldw	r4,60(sp)
    5ff8:	000d883a 	mov	r6,zero
    5ffc:	01d00934 	movhi	r7,16420
    6000:	000d1800 	call	d180 <__muldf3>
    6004:	81000044 	addi	r4,r16,1
    6008:	d8800f15 	stw	r2,60(sp)
    600c:	d8c01015 	stw	r3,64(sp)
    6010:	000e2140 	call	e214 <__floatsidf>
    6014:	d9800f17 	ldw	r6,60(sp)
    6018:	d9c01017 	ldw	r7,64(sp)
    601c:	1009883a 	mov	r4,r2
    6020:	180b883a 	mov	r5,r3
    6024:	000d1800 	call	d180 <__muldf3>
    6028:	01d00734 	movhi	r7,16412
    602c:	000d883a 	mov	r6,zero
    6030:	1009883a 	mov	r4,r2
    6034:	180b883a 	mov	r5,r3
    6038:	000bd940 	call	bd94 <__adddf3>
    603c:	d9c00517 	ldw	r7,20(sp)
    6040:	047f3034 	movhi	r17,64704
    6044:	1021883a 	mov	r16,r2
    6048:	39ffffc4 	addi	r7,r7,-1
    604c:	d9c01315 	stw	r7,76(sp)
    6050:	1c63883a 	add	r17,r3,r17
    6054:	db000c17 	ldw	r12,48(sp)
    6058:	003bea06 	br	5004 <__alt_data_end+0xff005004>
    605c:	dc000915 	stw	r16,36(sp)
    6060:	003e0e06 	br	589c <__alt_data_end+0xff00589c>
    6064:	01000e44 	movi	r4,57
    6068:	8825883a 	mov	r18,r17
    606c:	9dc00044 	addi	r23,r19,1
    6070:	99000005 	stb	r4,0(r19)
    6074:	a023883a 	mov	r17,r20
    6078:	dc000915 	stw	r16,36(sp)
    607c:	003da406 	br	5710 <__alt_data_end+0xff005710>
    6080:	d9801417 	ldw	r6,80(sp)
    6084:	d9c01517 	ldw	r7,84(sp)
    6088:	0009883a 	mov	r4,zero
    608c:	014ff834 	movhi	r5,16352
    6090:	000d8980 	call	d898 <__subdf3>
    6094:	880d883a 	mov	r6,r17
    6098:	a00f883a 	mov	r7,r20
    609c:	1009883a 	mov	r4,r2
    60a0:	180b883a 	mov	r5,r3
    60a4:	000cfb00 	call	cfb0 <__gedf2>
    60a8:	00bc7c0e 	bge	zero,r2,529c <__alt_data_end+0xff00529c>
    60ac:	01000c04 	movi	r4,48
    60b0:	00000106 	br	60b8 <_dtoa_r+0x1580>
    60b4:	102f883a 	mov	r23,r2
    60b8:	b8bfffc4 	addi	r2,r23,-1
    60bc:	10c00007 	ldb	r3,0(r2)
    60c0:	193ffc26 	beq	r3,r4,60b4 <__alt_data_end+0xff0060b4>
    60c4:	d9801317 	ldw	r6,76(sp)
    60c8:	d9800515 	stw	r6,20(sp)
    60cc:	003c4406 	br	51e0 <__alt_data_end+0xff0051e0>
    60d0:	d9801317 	ldw	r6,76(sp)
    60d4:	d9800515 	stw	r6,20(sp)
    60d8:	003cea06 	br	5484 <__alt_data_end+0xff005484>
    60dc:	dd800f17 	ldw	r22,60(sp)
    60e0:	dcc01017 	ldw	r19,64(sp)
    60e4:	dc801217 	ldw	r18,72(sp)
    60e8:	003c6c06 	br	529c <__alt_data_end+0xff00529c>
    60ec:	903e031e 	bne	r18,zero,58fc <__alt_data_end+0xff0058fc>
    60f0:	003ebb06 	br	5be0 <__alt_data_end+0xff005be0>
    60f4:	103e6c1e 	bne	r2,zero,5aa8 <__alt_data_end+0xff005aa8>
    60f8:	4080004c 	andi	r2,r8,1
    60fc:	103e6a26 	beq	r2,zero,5aa8 <__alt_data_end+0xff005aa8>
    6100:	003e6606 	br	5a9c <__alt_data_end+0xff005a9c>
    6104:	d8c00317 	ldw	r3,12(sp)
    6108:	00800084 	movi	r2,2
    610c:	10c02916 	blt	r2,r3,61b4 <_dtoa_r+0x167c>
    6110:	d9000c17 	ldw	r4,48(sp)
    6114:	003e8806 	br	5b38 <__alt_data_end+0xff005b38>
    6118:	04000084 	movi	r16,2
    611c:	003b9d06 	br	4f94 <__alt_data_end+0xff004f94>
    6120:	d9001317 	ldw	r4,76(sp)
    6124:	d9000515 	stw	r4,20(sp)
    6128:	003cd606 	br	5484 <__alt_data_end+0xff005484>
    612c:	d8801317 	ldw	r2,76(sp)
    6130:	d8800515 	stw	r2,20(sp)
    6134:	003c2a06 	br	51e0 <__alt_data_end+0xff0051e0>
    6138:	d9800317 	ldw	r6,12(sp)
    613c:	00800084 	movi	r2,2
    6140:	11801516 	blt	r2,r6,6198 <_dtoa_r+0x1660>
    6144:	d9c00c17 	ldw	r7,48(sp)
    6148:	d9c00615 	stw	r7,24(sp)
    614c:	003df706 	br	592c <__alt_data_end+0xff00592c>
    6150:	193d3926 	beq	r3,r4,5638 <__alt_data_end+0xff005638>
    6154:	00c00f04 	movi	r3,60
    6158:	1885c83a 	sub	r2,r3,r2
    615c:	003ddf06 	br	58dc <__alt_data_end+0xff0058dc>
    6160:	e009883a 	mov	r4,fp
    6164:	e0001115 	stw	zero,68(fp)
    6168:	000b883a 	mov	r5,zero
    616c:	00079c80 	call	79c8 <_Balloc>
    6170:	d8800715 	stw	r2,28(sp)
    6174:	d8c00717 	ldw	r3,28(sp)
    6178:	00bfffc4 	movi	r2,-1
    617c:	01000044 	movi	r4,1
    6180:	d8800c15 	stw	r2,48(sp)
    6184:	e0c01015 	stw	r3,64(fp)
    6188:	d9000b15 	stw	r4,44(sp)
    618c:	d8800615 	stw	r2,24(sp)
    6190:	d8002215 	stw	zero,136(sp)
    6194:	003c4106 	br	529c <__alt_data_end+0xff00529c>
    6198:	d8c00c17 	ldw	r3,48(sp)
    619c:	d8c00615 	stw	r3,24(sp)
    61a0:	003e7006 	br	5b64 <__alt_data_end+0xff005b64>
    61a4:	04400044 	movi	r17,1
    61a8:	003b2006 	br	4e2c <__alt_data_end+0xff004e2c>
    61ac:	000b883a 	mov	r5,zero
    61b0:	003b3d06 	br	4ea8 <__alt_data_end+0xff004ea8>
    61b4:	d8800c17 	ldw	r2,48(sp)
    61b8:	d8800615 	stw	r2,24(sp)
    61bc:	003e6906 	br	5b64 <__alt_data_end+0xff005b64>

000061c0 <__sflush_r>:
    61c0:	2880030b 	ldhu	r2,12(r5)
    61c4:	defffb04 	addi	sp,sp,-20
    61c8:	dcc00315 	stw	r19,12(sp)
    61cc:	dc400115 	stw	r17,4(sp)
    61d0:	dfc00415 	stw	ra,16(sp)
    61d4:	dc800215 	stw	r18,8(sp)
    61d8:	dc000015 	stw	r16,0(sp)
    61dc:	10c0020c 	andi	r3,r2,8
    61e0:	2823883a 	mov	r17,r5
    61e4:	2027883a 	mov	r19,r4
    61e8:	1800311e 	bne	r3,zero,62b0 <__sflush_r+0xf0>
    61ec:	28c00117 	ldw	r3,4(r5)
    61f0:	10820014 	ori	r2,r2,2048
    61f4:	2880030d 	sth	r2,12(r5)
    61f8:	00c04b0e 	bge	zero,r3,6328 <__sflush_r+0x168>
    61fc:	8a000a17 	ldw	r8,40(r17)
    6200:	40002326 	beq	r8,zero,6290 <__sflush_r+0xd0>
    6204:	9c000017 	ldw	r16,0(r19)
    6208:	10c4000c 	andi	r3,r2,4096
    620c:	98000015 	stw	zero,0(r19)
    6210:	18004826 	beq	r3,zero,6334 <__sflush_r+0x174>
    6214:	89801417 	ldw	r6,80(r17)
    6218:	10c0010c 	andi	r3,r2,4
    621c:	18000626 	beq	r3,zero,6238 <__sflush_r+0x78>
    6220:	88c00117 	ldw	r3,4(r17)
    6224:	88800c17 	ldw	r2,48(r17)
    6228:	30cdc83a 	sub	r6,r6,r3
    622c:	10000226 	beq	r2,zero,6238 <__sflush_r+0x78>
    6230:	88800f17 	ldw	r2,60(r17)
    6234:	308dc83a 	sub	r6,r6,r2
    6238:	89400717 	ldw	r5,28(r17)
    623c:	000f883a 	mov	r7,zero
    6240:	9809883a 	mov	r4,r19
    6244:	403ee83a 	callr	r8
    6248:	00ffffc4 	movi	r3,-1
    624c:	10c04426 	beq	r2,r3,6360 <__sflush_r+0x1a0>
    6250:	88c0030b 	ldhu	r3,12(r17)
    6254:	89000417 	ldw	r4,16(r17)
    6258:	88000115 	stw	zero,4(r17)
    625c:	197dffcc 	andi	r5,r3,63487
    6260:	8940030d 	sth	r5,12(r17)
    6264:	89000015 	stw	r4,0(r17)
    6268:	18c4000c 	andi	r3,r3,4096
    626c:	18002c1e 	bne	r3,zero,6320 <__sflush_r+0x160>
    6270:	89400c17 	ldw	r5,48(r17)
    6274:	9c000015 	stw	r16,0(r19)
    6278:	28000526 	beq	r5,zero,6290 <__sflush_r+0xd0>
    627c:	88801004 	addi	r2,r17,64
    6280:	28800226 	beq	r5,r2,628c <__sflush_r+0xcc>
    6284:	9809883a 	mov	r4,r19
    6288:	000692c0 	call	692c <_free_r>
    628c:	88000c15 	stw	zero,48(r17)
    6290:	0005883a 	mov	r2,zero
    6294:	dfc00417 	ldw	ra,16(sp)
    6298:	dcc00317 	ldw	r19,12(sp)
    629c:	dc800217 	ldw	r18,8(sp)
    62a0:	dc400117 	ldw	r17,4(sp)
    62a4:	dc000017 	ldw	r16,0(sp)
    62a8:	dec00504 	addi	sp,sp,20
    62ac:	f800283a 	ret
    62b0:	2c800417 	ldw	r18,16(r5)
    62b4:	903ff626 	beq	r18,zero,6290 <__alt_data_end+0xff006290>
    62b8:	2c000017 	ldw	r16,0(r5)
    62bc:	108000cc 	andi	r2,r2,3
    62c0:	2c800015 	stw	r18,0(r5)
    62c4:	84a1c83a 	sub	r16,r16,r18
    62c8:	1000131e 	bne	r2,zero,6318 <__sflush_r+0x158>
    62cc:	28800517 	ldw	r2,20(r5)
    62d0:	88800215 	stw	r2,8(r17)
    62d4:	04000316 	blt	zero,r16,62e4 <__sflush_r+0x124>
    62d8:	003fed06 	br	6290 <__alt_data_end+0xff006290>
    62dc:	90a5883a 	add	r18,r18,r2
    62e0:	043feb0e 	bge	zero,r16,6290 <__alt_data_end+0xff006290>
    62e4:	88800917 	ldw	r2,36(r17)
    62e8:	89400717 	ldw	r5,28(r17)
    62ec:	800f883a 	mov	r7,r16
    62f0:	900d883a 	mov	r6,r18
    62f4:	9809883a 	mov	r4,r19
    62f8:	103ee83a 	callr	r2
    62fc:	80a1c83a 	sub	r16,r16,r2
    6300:	00bff616 	blt	zero,r2,62dc <__alt_data_end+0xff0062dc>
    6304:	88c0030b 	ldhu	r3,12(r17)
    6308:	00bfffc4 	movi	r2,-1
    630c:	18c01014 	ori	r3,r3,64
    6310:	88c0030d 	sth	r3,12(r17)
    6314:	003fdf06 	br	6294 <__alt_data_end+0xff006294>
    6318:	0005883a 	mov	r2,zero
    631c:	003fec06 	br	62d0 <__alt_data_end+0xff0062d0>
    6320:	88801415 	stw	r2,80(r17)
    6324:	003fd206 	br	6270 <__alt_data_end+0xff006270>
    6328:	28c00f17 	ldw	r3,60(r5)
    632c:	00ffb316 	blt	zero,r3,61fc <__alt_data_end+0xff0061fc>
    6330:	003fd706 	br	6290 <__alt_data_end+0xff006290>
    6334:	89400717 	ldw	r5,28(r17)
    6338:	000d883a 	mov	r6,zero
    633c:	01c00044 	movi	r7,1
    6340:	9809883a 	mov	r4,r19
    6344:	403ee83a 	callr	r8
    6348:	100d883a 	mov	r6,r2
    634c:	00bfffc4 	movi	r2,-1
    6350:	30801426 	beq	r6,r2,63a4 <__sflush_r+0x1e4>
    6354:	8880030b 	ldhu	r2,12(r17)
    6358:	8a000a17 	ldw	r8,40(r17)
    635c:	003fae06 	br	6218 <__alt_data_end+0xff006218>
    6360:	98c00017 	ldw	r3,0(r19)
    6364:	183fba26 	beq	r3,zero,6250 <__alt_data_end+0xff006250>
    6368:	01000744 	movi	r4,29
    636c:	19000626 	beq	r3,r4,6388 <__sflush_r+0x1c8>
    6370:	01000584 	movi	r4,22
    6374:	19000426 	beq	r3,r4,6388 <__sflush_r+0x1c8>
    6378:	88c0030b 	ldhu	r3,12(r17)
    637c:	18c01014 	ori	r3,r3,64
    6380:	88c0030d 	sth	r3,12(r17)
    6384:	003fc306 	br	6294 <__alt_data_end+0xff006294>
    6388:	8880030b 	ldhu	r2,12(r17)
    638c:	88c00417 	ldw	r3,16(r17)
    6390:	88000115 	stw	zero,4(r17)
    6394:	10bdffcc 	andi	r2,r2,63487
    6398:	8880030d 	sth	r2,12(r17)
    639c:	88c00015 	stw	r3,0(r17)
    63a0:	003fb306 	br	6270 <__alt_data_end+0xff006270>
    63a4:	98800017 	ldw	r2,0(r19)
    63a8:	103fea26 	beq	r2,zero,6354 <__alt_data_end+0xff006354>
    63ac:	00c00744 	movi	r3,29
    63b0:	10c00226 	beq	r2,r3,63bc <__sflush_r+0x1fc>
    63b4:	00c00584 	movi	r3,22
    63b8:	10c0031e 	bne	r2,r3,63c8 <__sflush_r+0x208>
    63bc:	9c000015 	stw	r16,0(r19)
    63c0:	0005883a 	mov	r2,zero
    63c4:	003fb306 	br	6294 <__alt_data_end+0xff006294>
    63c8:	88c0030b 	ldhu	r3,12(r17)
    63cc:	3005883a 	mov	r2,r6
    63d0:	18c01014 	ori	r3,r3,64
    63d4:	88c0030d 	sth	r3,12(r17)
    63d8:	003fae06 	br	6294 <__alt_data_end+0xff006294>

000063dc <_fflush_r>:
    63dc:	defffd04 	addi	sp,sp,-12
    63e0:	dc000115 	stw	r16,4(sp)
    63e4:	dfc00215 	stw	ra,8(sp)
    63e8:	2021883a 	mov	r16,r4
    63ec:	20000226 	beq	r4,zero,63f8 <_fflush_r+0x1c>
    63f0:	20800e17 	ldw	r2,56(r4)
    63f4:	10000c26 	beq	r2,zero,6428 <_fflush_r+0x4c>
    63f8:	2880030f 	ldh	r2,12(r5)
    63fc:	1000051e 	bne	r2,zero,6414 <_fflush_r+0x38>
    6400:	0005883a 	mov	r2,zero
    6404:	dfc00217 	ldw	ra,8(sp)
    6408:	dc000117 	ldw	r16,4(sp)
    640c:	dec00304 	addi	sp,sp,12
    6410:	f800283a 	ret
    6414:	8009883a 	mov	r4,r16
    6418:	dfc00217 	ldw	ra,8(sp)
    641c:	dc000117 	ldw	r16,4(sp)
    6420:	dec00304 	addi	sp,sp,12
    6424:	00061c01 	jmpi	61c0 <__sflush_r>
    6428:	d9400015 	stw	r5,0(sp)
    642c:	00067b80 	call	67b8 <__sinit>
    6430:	d9400017 	ldw	r5,0(sp)
    6434:	003ff006 	br	63f8 <__alt_data_end+0xff0063f8>

00006438 <fflush>:
    6438:	20000526 	beq	r4,zero,6450 <fflush+0x18>
    643c:	00800074 	movhi	r2,1
    6440:	108c2c04 	addi	r2,r2,12464
    6444:	200b883a 	mov	r5,r4
    6448:	11000017 	ldw	r4,0(r2)
    644c:	00063dc1 	jmpi	63dc <_fflush_r>
    6450:	00800074 	movhi	r2,1
    6454:	108c2b04 	addi	r2,r2,12460
    6458:	11000017 	ldw	r4,0(r2)
    645c:	01400034 	movhi	r5,0
    6460:	2958f704 	addi	r5,r5,25564
    6464:	00071bc1 	jmpi	71bc <_fwalk_reent>

00006468 <__fp_unlock>:
    6468:	0005883a 	mov	r2,zero
    646c:	f800283a 	ret

00006470 <_cleanup_r>:
    6470:	01400074 	movhi	r5,1
    6474:	296a5d04 	addi	r5,r5,-22156
    6478:	00071bc1 	jmpi	71bc <_fwalk_reent>

0000647c <__sinit.part.1>:
    647c:	defff704 	addi	sp,sp,-36
    6480:	00c00034 	movhi	r3,0
    6484:	dfc00815 	stw	ra,32(sp)
    6488:	ddc00715 	stw	r23,28(sp)
    648c:	dd800615 	stw	r22,24(sp)
    6490:	dd400515 	stw	r21,20(sp)
    6494:	dd000415 	stw	r20,16(sp)
    6498:	dcc00315 	stw	r19,12(sp)
    649c:	dc800215 	stw	r18,8(sp)
    64a0:	dc400115 	stw	r17,4(sp)
    64a4:	dc000015 	stw	r16,0(sp)
    64a8:	18d91c04 	addi	r3,r3,25712
    64ac:	24000117 	ldw	r16,4(r4)
    64b0:	20c00f15 	stw	r3,60(r4)
    64b4:	2080bb04 	addi	r2,r4,748
    64b8:	00c000c4 	movi	r3,3
    64bc:	20c0b915 	stw	r3,740(r4)
    64c0:	2080ba15 	stw	r2,744(r4)
    64c4:	2000b815 	stw	zero,736(r4)
    64c8:	05c00204 	movi	r23,8
    64cc:	00800104 	movi	r2,4
    64d0:	2025883a 	mov	r18,r4
    64d4:	b80d883a 	mov	r6,r23
    64d8:	81001704 	addi	r4,r16,92
    64dc:	000b883a 	mov	r5,zero
    64e0:	80000015 	stw	zero,0(r16)
    64e4:	80000115 	stw	zero,4(r16)
    64e8:	80000215 	stw	zero,8(r16)
    64ec:	8080030d 	sth	r2,12(r16)
    64f0:	80001915 	stw	zero,100(r16)
    64f4:	8000038d 	sth	zero,14(r16)
    64f8:	80000415 	stw	zero,16(r16)
    64fc:	80000515 	stw	zero,20(r16)
    6500:	80000615 	stw	zero,24(r16)
    6504:	00078a00 	call	78a0 <memset>
    6508:	05800074 	movhi	r22,1
    650c:	94400217 	ldw	r17,8(r18)
    6510:	05400074 	movhi	r21,1
    6514:	05000074 	movhi	r20,1
    6518:	04c00074 	movhi	r19,1
    651c:	b5a3e704 	addi	r22,r22,-28772
    6520:	ad63fe04 	addi	r21,r21,-28680
    6524:	a5241d04 	addi	r20,r20,-28556
    6528:	9ce43404 	addi	r19,r19,-28464
    652c:	85800815 	stw	r22,32(r16)
    6530:	85400915 	stw	r21,36(r16)
    6534:	85000a15 	stw	r20,40(r16)
    6538:	84c00b15 	stw	r19,44(r16)
    653c:	84000715 	stw	r16,28(r16)
    6540:	00800284 	movi	r2,10
    6544:	8880030d 	sth	r2,12(r17)
    6548:	00800044 	movi	r2,1
    654c:	b80d883a 	mov	r6,r23
    6550:	89001704 	addi	r4,r17,92
    6554:	000b883a 	mov	r5,zero
    6558:	88000015 	stw	zero,0(r17)
    655c:	88000115 	stw	zero,4(r17)
    6560:	88000215 	stw	zero,8(r17)
    6564:	88001915 	stw	zero,100(r17)
    6568:	8880038d 	sth	r2,14(r17)
    656c:	88000415 	stw	zero,16(r17)
    6570:	88000515 	stw	zero,20(r17)
    6574:	88000615 	stw	zero,24(r17)
    6578:	00078a00 	call	78a0 <memset>
    657c:	94000317 	ldw	r16,12(r18)
    6580:	00800484 	movi	r2,18
    6584:	8c400715 	stw	r17,28(r17)
    6588:	8d800815 	stw	r22,32(r17)
    658c:	8d400915 	stw	r21,36(r17)
    6590:	8d000a15 	stw	r20,40(r17)
    6594:	8cc00b15 	stw	r19,44(r17)
    6598:	8080030d 	sth	r2,12(r16)
    659c:	00800084 	movi	r2,2
    65a0:	80000015 	stw	zero,0(r16)
    65a4:	80000115 	stw	zero,4(r16)
    65a8:	80000215 	stw	zero,8(r16)
    65ac:	80001915 	stw	zero,100(r16)
    65b0:	8080038d 	sth	r2,14(r16)
    65b4:	80000415 	stw	zero,16(r16)
    65b8:	80000515 	stw	zero,20(r16)
    65bc:	80000615 	stw	zero,24(r16)
    65c0:	b80d883a 	mov	r6,r23
    65c4:	000b883a 	mov	r5,zero
    65c8:	81001704 	addi	r4,r16,92
    65cc:	00078a00 	call	78a0 <memset>
    65d0:	00800044 	movi	r2,1
    65d4:	84000715 	stw	r16,28(r16)
    65d8:	85800815 	stw	r22,32(r16)
    65dc:	85400915 	stw	r21,36(r16)
    65e0:	85000a15 	stw	r20,40(r16)
    65e4:	84c00b15 	stw	r19,44(r16)
    65e8:	90800e15 	stw	r2,56(r18)
    65ec:	dfc00817 	ldw	ra,32(sp)
    65f0:	ddc00717 	ldw	r23,28(sp)
    65f4:	dd800617 	ldw	r22,24(sp)
    65f8:	dd400517 	ldw	r21,20(sp)
    65fc:	dd000417 	ldw	r20,16(sp)
    6600:	dcc00317 	ldw	r19,12(sp)
    6604:	dc800217 	ldw	r18,8(sp)
    6608:	dc400117 	ldw	r17,4(sp)
    660c:	dc000017 	ldw	r16,0(sp)
    6610:	dec00904 	addi	sp,sp,36
    6614:	f800283a 	ret

00006618 <__fp_lock>:
    6618:	0005883a 	mov	r2,zero
    661c:	f800283a 	ret

00006620 <__sfmoreglue>:
    6620:	defffc04 	addi	sp,sp,-16
    6624:	dc400115 	stw	r17,4(sp)
    6628:	2c7fffc4 	addi	r17,r5,-1
    662c:	8c401a24 	muli	r17,r17,104
    6630:	dc800215 	stw	r18,8(sp)
    6634:	2825883a 	mov	r18,r5
    6638:	89401d04 	addi	r5,r17,116
    663c:	dc000015 	stw	r16,0(sp)
    6640:	dfc00315 	stw	ra,12(sp)
    6644:	0001adc0 	call	1adc <_malloc_r>
    6648:	1021883a 	mov	r16,r2
    664c:	10000726 	beq	r2,zero,666c <__sfmoreglue+0x4c>
    6650:	11000304 	addi	r4,r2,12
    6654:	10000015 	stw	zero,0(r2)
    6658:	14800115 	stw	r18,4(r2)
    665c:	11000215 	stw	r4,8(r2)
    6660:	89801a04 	addi	r6,r17,104
    6664:	000b883a 	mov	r5,zero
    6668:	00078a00 	call	78a0 <memset>
    666c:	8005883a 	mov	r2,r16
    6670:	dfc00317 	ldw	ra,12(sp)
    6674:	dc800217 	ldw	r18,8(sp)
    6678:	dc400117 	ldw	r17,4(sp)
    667c:	dc000017 	ldw	r16,0(sp)
    6680:	dec00404 	addi	sp,sp,16
    6684:	f800283a 	ret

00006688 <__sfp>:
    6688:	defffb04 	addi	sp,sp,-20
    668c:	dc000015 	stw	r16,0(sp)
    6690:	04000074 	movhi	r16,1
    6694:	840c2b04 	addi	r16,r16,12460
    6698:	dcc00315 	stw	r19,12(sp)
    669c:	2027883a 	mov	r19,r4
    66a0:	81000017 	ldw	r4,0(r16)
    66a4:	dfc00415 	stw	ra,16(sp)
    66a8:	dc800215 	stw	r18,8(sp)
    66ac:	20800e17 	ldw	r2,56(r4)
    66b0:	dc400115 	stw	r17,4(sp)
    66b4:	1000021e 	bne	r2,zero,66c0 <__sfp+0x38>
    66b8:	000647c0 	call	647c <__sinit.part.1>
    66bc:	81000017 	ldw	r4,0(r16)
    66c0:	2480b804 	addi	r18,r4,736
    66c4:	047fffc4 	movi	r17,-1
    66c8:	91000117 	ldw	r4,4(r18)
    66cc:	94000217 	ldw	r16,8(r18)
    66d0:	213fffc4 	addi	r4,r4,-1
    66d4:	20000a16 	blt	r4,zero,6700 <__sfp+0x78>
    66d8:	8080030f 	ldh	r2,12(r16)
    66dc:	10000c26 	beq	r2,zero,6710 <__sfp+0x88>
    66e0:	80c01d04 	addi	r3,r16,116
    66e4:	00000206 	br	66f0 <__sfp+0x68>
    66e8:	18bfe60f 	ldh	r2,-104(r3)
    66ec:	10000826 	beq	r2,zero,6710 <__sfp+0x88>
    66f0:	213fffc4 	addi	r4,r4,-1
    66f4:	1c3ffd04 	addi	r16,r3,-12
    66f8:	18c01a04 	addi	r3,r3,104
    66fc:	247ffa1e 	bne	r4,r17,66e8 <__alt_data_end+0xff0066e8>
    6700:	90800017 	ldw	r2,0(r18)
    6704:	10001d26 	beq	r2,zero,677c <__sfp+0xf4>
    6708:	1025883a 	mov	r18,r2
    670c:	003fee06 	br	66c8 <__alt_data_end+0xff0066c8>
    6710:	00bfffc4 	movi	r2,-1
    6714:	8080038d 	sth	r2,14(r16)
    6718:	00800044 	movi	r2,1
    671c:	8080030d 	sth	r2,12(r16)
    6720:	80001915 	stw	zero,100(r16)
    6724:	80000015 	stw	zero,0(r16)
    6728:	80000215 	stw	zero,8(r16)
    672c:	80000115 	stw	zero,4(r16)
    6730:	80000415 	stw	zero,16(r16)
    6734:	80000515 	stw	zero,20(r16)
    6738:	80000615 	stw	zero,24(r16)
    673c:	01800204 	movi	r6,8
    6740:	000b883a 	mov	r5,zero
    6744:	81001704 	addi	r4,r16,92
    6748:	00078a00 	call	78a0 <memset>
    674c:	8005883a 	mov	r2,r16
    6750:	80000c15 	stw	zero,48(r16)
    6754:	80000d15 	stw	zero,52(r16)
    6758:	80001115 	stw	zero,68(r16)
    675c:	80001215 	stw	zero,72(r16)
    6760:	dfc00417 	ldw	ra,16(sp)
    6764:	dcc00317 	ldw	r19,12(sp)
    6768:	dc800217 	ldw	r18,8(sp)
    676c:	dc400117 	ldw	r17,4(sp)
    6770:	dc000017 	ldw	r16,0(sp)
    6774:	dec00504 	addi	sp,sp,20
    6778:	f800283a 	ret
    677c:	01400104 	movi	r5,4
    6780:	9809883a 	mov	r4,r19
    6784:	00066200 	call	6620 <__sfmoreglue>
    6788:	90800015 	stw	r2,0(r18)
    678c:	103fde1e 	bne	r2,zero,6708 <__alt_data_end+0xff006708>
    6790:	00800304 	movi	r2,12
    6794:	98800015 	stw	r2,0(r19)
    6798:	0005883a 	mov	r2,zero
    679c:	003ff006 	br	6760 <__alt_data_end+0xff006760>

000067a0 <_cleanup>:
    67a0:	00800074 	movhi	r2,1
    67a4:	108c2b04 	addi	r2,r2,12460
    67a8:	11000017 	ldw	r4,0(r2)
    67ac:	01400074 	movhi	r5,1
    67b0:	296a5d04 	addi	r5,r5,-22156
    67b4:	00071bc1 	jmpi	71bc <_fwalk_reent>

000067b8 <__sinit>:
    67b8:	20800e17 	ldw	r2,56(r4)
    67bc:	10000126 	beq	r2,zero,67c4 <__sinit+0xc>
    67c0:	f800283a 	ret
    67c4:	000647c1 	jmpi	647c <__sinit.part.1>

000067c8 <__sfp_lock_acquire>:
    67c8:	f800283a 	ret

000067cc <__sfp_lock_release>:
    67cc:	f800283a 	ret

000067d0 <__sinit_lock_acquire>:
    67d0:	f800283a 	ret

000067d4 <__sinit_lock_release>:
    67d4:	f800283a 	ret

000067d8 <__fp_lock_all>:
    67d8:	00800074 	movhi	r2,1
    67dc:	108c2c04 	addi	r2,r2,12464
    67e0:	11000017 	ldw	r4,0(r2)
    67e4:	01400034 	movhi	r5,0
    67e8:	29598604 	addi	r5,r5,26136
    67ec:	00070f81 	jmpi	70f8 <_fwalk>

000067f0 <__fp_unlock_all>:
    67f0:	00800074 	movhi	r2,1
    67f4:	108c2c04 	addi	r2,r2,12464
    67f8:	11000017 	ldw	r4,0(r2)
    67fc:	01400034 	movhi	r5,0
    6800:	29591a04 	addi	r5,r5,25704
    6804:	00070f81 	jmpi	70f8 <_fwalk>

00006808 <_malloc_trim_r>:
    6808:	defffb04 	addi	sp,sp,-20
    680c:	dcc00315 	stw	r19,12(sp)
    6810:	04c00074 	movhi	r19,1
    6814:	dc800215 	stw	r18,8(sp)
    6818:	dc400115 	stw	r17,4(sp)
    681c:	dc000015 	stw	r16,0(sp)
    6820:	dfc00415 	stw	ra,16(sp)
    6824:	2821883a 	mov	r16,r5
    6828:	9cc57e04 	addi	r19,r19,5624
    682c:	2025883a 	mov	r18,r4
    6830:	000e9780 	call	e978 <__malloc_lock>
    6834:	98800217 	ldw	r2,8(r19)
    6838:	14400117 	ldw	r17,4(r2)
    683c:	00bfff04 	movi	r2,-4
    6840:	88a2703a 	and	r17,r17,r2
    6844:	8c21c83a 	sub	r16,r17,r16
    6848:	8403fbc4 	addi	r16,r16,4079
    684c:	8020d33a 	srli	r16,r16,12
    6850:	0083ffc4 	movi	r2,4095
    6854:	843fffc4 	addi	r16,r16,-1
    6858:	8020933a 	slli	r16,r16,12
    685c:	1400060e 	bge	r2,r16,6878 <_malloc_trim_r+0x70>
    6860:	000b883a 	mov	r5,zero
    6864:	9009883a 	mov	r4,r18
    6868:	00024280 	call	2428 <_sbrk_r>
    686c:	98c00217 	ldw	r3,8(r19)
    6870:	1c47883a 	add	r3,r3,r17
    6874:	10c00a26 	beq	r2,r3,68a0 <_malloc_trim_r+0x98>
    6878:	9009883a 	mov	r4,r18
    687c:	000e99c0 	call	e99c <__malloc_unlock>
    6880:	0005883a 	mov	r2,zero
    6884:	dfc00417 	ldw	ra,16(sp)
    6888:	dcc00317 	ldw	r19,12(sp)
    688c:	dc800217 	ldw	r18,8(sp)
    6890:	dc400117 	ldw	r17,4(sp)
    6894:	dc000017 	ldw	r16,0(sp)
    6898:	dec00504 	addi	sp,sp,20
    689c:	f800283a 	ret
    68a0:	040bc83a 	sub	r5,zero,r16
    68a4:	9009883a 	mov	r4,r18
    68a8:	00024280 	call	2428 <_sbrk_r>
    68ac:	00ffffc4 	movi	r3,-1
    68b0:	10c00d26 	beq	r2,r3,68e8 <_malloc_trim_r+0xe0>
    68b4:	00c00074 	movhi	r3,1
    68b8:	18d30e04 	addi	r3,r3,19512
    68bc:	18800017 	ldw	r2,0(r3)
    68c0:	99000217 	ldw	r4,8(r19)
    68c4:	8c23c83a 	sub	r17,r17,r16
    68c8:	8c400054 	ori	r17,r17,1
    68cc:	1421c83a 	sub	r16,r2,r16
    68d0:	24400115 	stw	r17,4(r4)
    68d4:	9009883a 	mov	r4,r18
    68d8:	1c000015 	stw	r16,0(r3)
    68dc:	000e99c0 	call	e99c <__malloc_unlock>
    68e0:	00800044 	movi	r2,1
    68e4:	003fe706 	br	6884 <__alt_data_end+0xff006884>
    68e8:	000b883a 	mov	r5,zero
    68ec:	9009883a 	mov	r4,r18
    68f0:	00024280 	call	2428 <_sbrk_r>
    68f4:	99000217 	ldw	r4,8(r19)
    68f8:	014003c4 	movi	r5,15
    68fc:	1107c83a 	sub	r3,r2,r4
    6900:	28ffdd0e 	bge	r5,r3,6878 <__alt_data_end+0xff006878>
    6904:	01400074 	movhi	r5,1
    6908:	294c2904 	addi	r5,r5,12452
    690c:	29400017 	ldw	r5,0(r5)
    6910:	18c00054 	ori	r3,r3,1
    6914:	20c00115 	stw	r3,4(r4)
    6918:	00c00074 	movhi	r3,1
    691c:	1145c83a 	sub	r2,r2,r5
    6920:	18d30e04 	addi	r3,r3,19512
    6924:	18800015 	stw	r2,0(r3)
    6928:	003fd306 	br	6878 <__alt_data_end+0xff006878>

0000692c <_free_r>:
    692c:	28004126 	beq	r5,zero,6a34 <_free_r+0x108>
    6930:	defffd04 	addi	sp,sp,-12
    6934:	dc400115 	stw	r17,4(sp)
    6938:	dc000015 	stw	r16,0(sp)
    693c:	2023883a 	mov	r17,r4
    6940:	2821883a 	mov	r16,r5
    6944:	dfc00215 	stw	ra,8(sp)
    6948:	000e9780 	call	e978 <__malloc_lock>
    694c:	81ffff17 	ldw	r7,-4(r16)
    6950:	00bfff84 	movi	r2,-2
    6954:	01000074 	movhi	r4,1
    6958:	81bffe04 	addi	r6,r16,-8
    695c:	3884703a 	and	r2,r7,r2
    6960:	21057e04 	addi	r4,r4,5624
    6964:	308b883a 	add	r5,r6,r2
    6968:	2a400117 	ldw	r9,4(r5)
    696c:	22000217 	ldw	r8,8(r4)
    6970:	00ffff04 	movi	r3,-4
    6974:	48c6703a 	and	r3,r9,r3
    6978:	2a005726 	beq	r5,r8,6ad8 <_free_r+0x1ac>
    697c:	28c00115 	stw	r3,4(r5)
    6980:	39c0004c 	andi	r7,r7,1
    6984:	3800091e 	bne	r7,zero,69ac <_free_r+0x80>
    6988:	823ffe17 	ldw	r8,-8(r16)
    698c:	22400204 	addi	r9,r4,8
    6990:	320dc83a 	sub	r6,r6,r8
    6994:	31c00217 	ldw	r7,8(r6)
    6998:	1205883a 	add	r2,r2,r8
    699c:	3a406526 	beq	r7,r9,6b34 <_free_r+0x208>
    69a0:	32000317 	ldw	r8,12(r6)
    69a4:	3a000315 	stw	r8,12(r7)
    69a8:	41c00215 	stw	r7,8(r8)
    69ac:	28cf883a 	add	r7,r5,r3
    69b0:	39c00117 	ldw	r7,4(r7)
    69b4:	39c0004c 	andi	r7,r7,1
    69b8:	38003a26 	beq	r7,zero,6aa4 <_free_r+0x178>
    69bc:	10c00054 	ori	r3,r2,1
    69c0:	30c00115 	stw	r3,4(r6)
    69c4:	3087883a 	add	r3,r6,r2
    69c8:	18800015 	stw	r2,0(r3)
    69cc:	00c07fc4 	movi	r3,511
    69d0:	18801936 	bltu	r3,r2,6a38 <_free_r+0x10c>
    69d4:	1004d0fa 	srli	r2,r2,3
    69d8:	01c00044 	movi	r7,1
    69dc:	21400117 	ldw	r5,4(r4)
    69e0:	10c00044 	addi	r3,r2,1
    69e4:	18c7883a 	add	r3,r3,r3
    69e8:	1005d0ba 	srai	r2,r2,2
    69ec:	18c7883a 	add	r3,r3,r3
    69f0:	18c7883a 	add	r3,r3,r3
    69f4:	1907883a 	add	r3,r3,r4
    69f8:	3884983a 	sll	r2,r7,r2
    69fc:	19c00017 	ldw	r7,0(r3)
    6a00:	1a3ffe04 	addi	r8,r3,-8
    6a04:	1144b03a 	or	r2,r2,r5
    6a08:	32000315 	stw	r8,12(r6)
    6a0c:	31c00215 	stw	r7,8(r6)
    6a10:	20800115 	stw	r2,4(r4)
    6a14:	19800015 	stw	r6,0(r3)
    6a18:	39800315 	stw	r6,12(r7)
    6a1c:	8809883a 	mov	r4,r17
    6a20:	dfc00217 	ldw	ra,8(sp)
    6a24:	dc400117 	ldw	r17,4(sp)
    6a28:	dc000017 	ldw	r16,0(sp)
    6a2c:	dec00304 	addi	sp,sp,12
    6a30:	000e99c1 	jmpi	e99c <__malloc_unlock>
    6a34:	f800283a 	ret
    6a38:	100ad27a 	srli	r5,r2,9
    6a3c:	00c00104 	movi	r3,4
    6a40:	19404a36 	bltu	r3,r5,6b6c <_free_r+0x240>
    6a44:	100ad1ba 	srli	r5,r2,6
    6a48:	28c00e44 	addi	r3,r5,57
    6a4c:	18c7883a 	add	r3,r3,r3
    6a50:	29400e04 	addi	r5,r5,56
    6a54:	18c7883a 	add	r3,r3,r3
    6a58:	18c7883a 	add	r3,r3,r3
    6a5c:	1909883a 	add	r4,r3,r4
    6a60:	20c00017 	ldw	r3,0(r4)
    6a64:	01c00074 	movhi	r7,1
    6a68:	213ffe04 	addi	r4,r4,-8
    6a6c:	39c57e04 	addi	r7,r7,5624
    6a70:	20c04426 	beq	r4,r3,6b84 <_free_r+0x258>
    6a74:	01ffff04 	movi	r7,-4
    6a78:	19400117 	ldw	r5,4(r3)
    6a7c:	29ca703a 	and	r5,r5,r7
    6a80:	1140022e 	bgeu	r2,r5,6a8c <_free_r+0x160>
    6a84:	18c00217 	ldw	r3,8(r3)
    6a88:	20fffb1e 	bne	r4,r3,6a78 <__alt_data_end+0xff006a78>
    6a8c:	19000317 	ldw	r4,12(r3)
    6a90:	31000315 	stw	r4,12(r6)
    6a94:	30c00215 	stw	r3,8(r6)
    6a98:	21800215 	stw	r6,8(r4)
    6a9c:	19800315 	stw	r6,12(r3)
    6aa0:	003fde06 	br	6a1c <__alt_data_end+0xff006a1c>
    6aa4:	29c00217 	ldw	r7,8(r5)
    6aa8:	10c5883a 	add	r2,r2,r3
    6aac:	00c00074 	movhi	r3,1
    6ab0:	18c58004 	addi	r3,r3,5632
    6ab4:	38c03b26 	beq	r7,r3,6ba4 <_free_r+0x278>
    6ab8:	2a000317 	ldw	r8,12(r5)
    6abc:	11400054 	ori	r5,r2,1
    6ac0:	3087883a 	add	r3,r6,r2
    6ac4:	3a000315 	stw	r8,12(r7)
    6ac8:	41c00215 	stw	r7,8(r8)
    6acc:	31400115 	stw	r5,4(r6)
    6ad0:	18800015 	stw	r2,0(r3)
    6ad4:	003fbd06 	br	69cc <__alt_data_end+0xff0069cc>
    6ad8:	39c0004c 	andi	r7,r7,1
    6adc:	10c5883a 	add	r2,r2,r3
    6ae0:	3800071e 	bne	r7,zero,6b00 <_free_r+0x1d4>
    6ae4:	81fffe17 	ldw	r7,-8(r16)
    6ae8:	31cdc83a 	sub	r6,r6,r7
    6aec:	30c00317 	ldw	r3,12(r6)
    6af0:	31400217 	ldw	r5,8(r6)
    6af4:	11c5883a 	add	r2,r2,r7
    6af8:	28c00315 	stw	r3,12(r5)
    6afc:	19400215 	stw	r5,8(r3)
    6b00:	10c00054 	ori	r3,r2,1
    6b04:	30c00115 	stw	r3,4(r6)
    6b08:	00c00074 	movhi	r3,1
    6b0c:	18cc2a04 	addi	r3,r3,12456
    6b10:	18c00017 	ldw	r3,0(r3)
    6b14:	21800215 	stw	r6,8(r4)
    6b18:	10ffc036 	bltu	r2,r3,6a1c <__alt_data_end+0xff006a1c>
    6b1c:	00800074 	movhi	r2,1
    6b20:	10930004 	addi	r2,r2,19456
    6b24:	11400017 	ldw	r5,0(r2)
    6b28:	8809883a 	mov	r4,r17
    6b2c:	00068080 	call	6808 <_malloc_trim_r>
    6b30:	003fba06 	br	6a1c <__alt_data_end+0xff006a1c>
    6b34:	28c9883a 	add	r4,r5,r3
    6b38:	21000117 	ldw	r4,4(r4)
    6b3c:	2100004c 	andi	r4,r4,1
    6b40:	2000391e 	bne	r4,zero,6c28 <_free_r+0x2fc>
    6b44:	29c00217 	ldw	r7,8(r5)
    6b48:	29000317 	ldw	r4,12(r5)
    6b4c:	1885883a 	add	r2,r3,r2
    6b50:	10c00054 	ori	r3,r2,1
    6b54:	39000315 	stw	r4,12(r7)
    6b58:	21c00215 	stw	r7,8(r4)
    6b5c:	30c00115 	stw	r3,4(r6)
    6b60:	308d883a 	add	r6,r6,r2
    6b64:	30800015 	stw	r2,0(r6)
    6b68:	003fac06 	br	6a1c <__alt_data_end+0xff006a1c>
    6b6c:	00c00504 	movi	r3,20
    6b70:	19401536 	bltu	r3,r5,6bc8 <_free_r+0x29c>
    6b74:	28c01704 	addi	r3,r5,92
    6b78:	18c7883a 	add	r3,r3,r3
    6b7c:	294016c4 	addi	r5,r5,91
    6b80:	003fb406 	br	6a54 <__alt_data_end+0xff006a54>
    6b84:	280bd0ba 	srai	r5,r5,2
    6b88:	00c00044 	movi	r3,1
    6b8c:	38800117 	ldw	r2,4(r7)
    6b90:	194a983a 	sll	r5,r3,r5
    6b94:	2007883a 	mov	r3,r4
    6b98:	2884b03a 	or	r2,r5,r2
    6b9c:	38800115 	stw	r2,4(r7)
    6ba0:	003fbb06 	br	6a90 <__alt_data_end+0xff006a90>
    6ba4:	21800515 	stw	r6,20(r4)
    6ba8:	21800415 	stw	r6,16(r4)
    6bac:	10c00054 	ori	r3,r2,1
    6bb0:	31c00315 	stw	r7,12(r6)
    6bb4:	31c00215 	stw	r7,8(r6)
    6bb8:	30c00115 	stw	r3,4(r6)
    6bbc:	308d883a 	add	r6,r6,r2
    6bc0:	30800015 	stw	r2,0(r6)
    6bc4:	003f9506 	br	6a1c <__alt_data_end+0xff006a1c>
    6bc8:	00c01504 	movi	r3,84
    6bcc:	19400536 	bltu	r3,r5,6be4 <_free_r+0x2b8>
    6bd0:	100ad33a 	srli	r5,r2,12
    6bd4:	28c01bc4 	addi	r3,r5,111
    6bd8:	18c7883a 	add	r3,r3,r3
    6bdc:	29401b84 	addi	r5,r5,110
    6be0:	003f9c06 	br	6a54 <__alt_data_end+0xff006a54>
    6be4:	00c05504 	movi	r3,340
    6be8:	19400536 	bltu	r3,r5,6c00 <_free_r+0x2d4>
    6bec:	100ad3fa 	srli	r5,r2,15
    6bf0:	28c01e04 	addi	r3,r5,120
    6bf4:	18c7883a 	add	r3,r3,r3
    6bf8:	29401dc4 	addi	r5,r5,119
    6bfc:	003f9506 	br	6a54 <__alt_data_end+0xff006a54>
    6c00:	00c15504 	movi	r3,1364
    6c04:	19400536 	bltu	r3,r5,6c1c <_free_r+0x2f0>
    6c08:	100ad4ba 	srli	r5,r2,18
    6c0c:	28c01f44 	addi	r3,r5,125
    6c10:	18c7883a 	add	r3,r3,r3
    6c14:	29401f04 	addi	r5,r5,124
    6c18:	003f8e06 	br	6a54 <__alt_data_end+0xff006a54>
    6c1c:	00c03f84 	movi	r3,254
    6c20:	01401f84 	movi	r5,126
    6c24:	003f8b06 	br	6a54 <__alt_data_end+0xff006a54>
    6c28:	10c00054 	ori	r3,r2,1
    6c2c:	30c00115 	stw	r3,4(r6)
    6c30:	308d883a 	add	r6,r6,r2
    6c34:	30800015 	stw	r2,0(r6)
    6c38:	003f7806 	br	6a1c <__alt_data_end+0xff006a1c>

00006c3c <__sfvwrite_r>:
    6c3c:	30800217 	ldw	r2,8(r6)
    6c40:	10006726 	beq	r2,zero,6de0 <__sfvwrite_r+0x1a4>
    6c44:	28c0030b 	ldhu	r3,12(r5)
    6c48:	defff404 	addi	sp,sp,-48
    6c4c:	dd400715 	stw	r21,28(sp)
    6c50:	dd000615 	stw	r20,24(sp)
    6c54:	dc000215 	stw	r16,8(sp)
    6c58:	dfc00b15 	stw	ra,44(sp)
    6c5c:	df000a15 	stw	fp,40(sp)
    6c60:	ddc00915 	stw	r23,36(sp)
    6c64:	dd800815 	stw	r22,32(sp)
    6c68:	dcc00515 	stw	r19,20(sp)
    6c6c:	dc800415 	stw	r18,16(sp)
    6c70:	dc400315 	stw	r17,12(sp)
    6c74:	1880020c 	andi	r2,r3,8
    6c78:	2821883a 	mov	r16,r5
    6c7c:	202b883a 	mov	r21,r4
    6c80:	3029883a 	mov	r20,r6
    6c84:	10002726 	beq	r2,zero,6d24 <__sfvwrite_r+0xe8>
    6c88:	28800417 	ldw	r2,16(r5)
    6c8c:	10002526 	beq	r2,zero,6d24 <__sfvwrite_r+0xe8>
    6c90:	1880008c 	andi	r2,r3,2
    6c94:	a4400017 	ldw	r17,0(r20)
    6c98:	10002a26 	beq	r2,zero,6d44 <__sfvwrite_r+0x108>
    6c9c:	05a00034 	movhi	r22,32768
    6ca0:	0027883a 	mov	r19,zero
    6ca4:	0025883a 	mov	r18,zero
    6ca8:	b5bf0004 	addi	r22,r22,-1024
    6cac:	980d883a 	mov	r6,r19
    6cb0:	a809883a 	mov	r4,r21
    6cb4:	90004626 	beq	r18,zero,6dd0 <__sfvwrite_r+0x194>
    6cb8:	900f883a 	mov	r7,r18
    6cbc:	b480022e 	bgeu	r22,r18,6cc8 <__sfvwrite_r+0x8c>
    6cc0:	01e00034 	movhi	r7,32768
    6cc4:	39ff0004 	addi	r7,r7,-1024
    6cc8:	80800917 	ldw	r2,36(r16)
    6ccc:	81400717 	ldw	r5,28(r16)
    6cd0:	103ee83a 	callr	r2
    6cd4:	0080570e 	bge	zero,r2,6e34 <__sfvwrite_r+0x1f8>
    6cd8:	a0c00217 	ldw	r3,8(r20)
    6cdc:	98a7883a 	add	r19,r19,r2
    6ce0:	90a5c83a 	sub	r18,r18,r2
    6ce4:	1885c83a 	sub	r2,r3,r2
    6ce8:	a0800215 	stw	r2,8(r20)
    6cec:	103fef1e 	bne	r2,zero,6cac <__alt_data_end+0xff006cac>
    6cf0:	0005883a 	mov	r2,zero
    6cf4:	dfc00b17 	ldw	ra,44(sp)
    6cf8:	df000a17 	ldw	fp,40(sp)
    6cfc:	ddc00917 	ldw	r23,36(sp)
    6d00:	dd800817 	ldw	r22,32(sp)
    6d04:	dd400717 	ldw	r21,28(sp)
    6d08:	dd000617 	ldw	r20,24(sp)
    6d0c:	dcc00517 	ldw	r19,20(sp)
    6d10:	dc800417 	ldw	r18,16(sp)
    6d14:	dc400317 	ldw	r17,12(sp)
    6d18:	dc000217 	ldw	r16,8(sp)
    6d1c:	dec00c04 	addi	sp,sp,48
    6d20:	f800283a 	ret
    6d24:	800b883a 	mov	r5,r16
    6d28:	a809883a 	mov	r4,r21
    6d2c:	00047e40 	call	47e4 <__swsetup_r>
    6d30:	1000eb1e 	bne	r2,zero,70e0 <__sfvwrite_r+0x4a4>
    6d34:	80c0030b 	ldhu	r3,12(r16)
    6d38:	a4400017 	ldw	r17,0(r20)
    6d3c:	1880008c 	andi	r2,r3,2
    6d40:	103fd61e 	bne	r2,zero,6c9c <__alt_data_end+0xff006c9c>
    6d44:	1880004c 	andi	r2,r3,1
    6d48:	10003f1e 	bne	r2,zero,6e48 <__sfvwrite_r+0x20c>
    6d4c:	0039883a 	mov	fp,zero
    6d50:	0025883a 	mov	r18,zero
    6d54:	90001a26 	beq	r18,zero,6dc0 <__sfvwrite_r+0x184>
    6d58:	1880800c 	andi	r2,r3,512
    6d5c:	84c00217 	ldw	r19,8(r16)
    6d60:	10002126 	beq	r2,zero,6de8 <__sfvwrite_r+0x1ac>
    6d64:	982f883a 	mov	r23,r19
    6d68:	94c09336 	bltu	r18,r19,6fb8 <__sfvwrite_r+0x37c>
    6d6c:	1881200c 	andi	r2,r3,1152
    6d70:	10009e1e 	bne	r2,zero,6fec <__sfvwrite_r+0x3b0>
    6d74:	81000017 	ldw	r4,0(r16)
    6d78:	b80d883a 	mov	r6,r23
    6d7c:	e00b883a 	mov	r5,fp
    6d80:	00077440 	call	7744 <memmove>
    6d84:	80c00217 	ldw	r3,8(r16)
    6d88:	81000017 	ldw	r4,0(r16)
    6d8c:	9005883a 	mov	r2,r18
    6d90:	1ce7c83a 	sub	r19,r3,r19
    6d94:	25cf883a 	add	r7,r4,r23
    6d98:	84c00215 	stw	r19,8(r16)
    6d9c:	81c00015 	stw	r7,0(r16)
    6da0:	a0c00217 	ldw	r3,8(r20)
    6da4:	e0b9883a 	add	fp,fp,r2
    6da8:	90a5c83a 	sub	r18,r18,r2
    6dac:	18a7c83a 	sub	r19,r3,r2
    6db0:	a4c00215 	stw	r19,8(r20)
    6db4:	983fce26 	beq	r19,zero,6cf0 <__alt_data_end+0xff006cf0>
    6db8:	80c0030b 	ldhu	r3,12(r16)
    6dbc:	903fe61e 	bne	r18,zero,6d58 <__alt_data_end+0xff006d58>
    6dc0:	8f000017 	ldw	fp,0(r17)
    6dc4:	8c800117 	ldw	r18,4(r17)
    6dc8:	8c400204 	addi	r17,r17,8
    6dcc:	003fe106 	br	6d54 <__alt_data_end+0xff006d54>
    6dd0:	8cc00017 	ldw	r19,0(r17)
    6dd4:	8c800117 	ldw	r18,4(r17)
    6dd8:	8c400204 	addi	r17,r17,8
    6ddc:	003fb306 	br	6cac <__alt_data_end+0xff006cac>
    6de0:	0005883a 	mov	r2,zero
    6de4:	f800283a 	ret
    6de8:	81000017 	ldw	r4,0(r16)
    6dec:	80800417 	ldw	r2,16(r16)
    6df0:	11005736 	bltu	r2,r4,6f50 <__sfvwrite_r+0x314>
    6df4:	85c00517 	ldw	r23,20(r16)
    6df8:	95c05536 	bltu	r18,r23,6f50 <__sfvwrite_r+0x314>
    6dfc:	00a00034 	movhi	r2,32768
    6e00:	10bfffc4 	addi	r2,r2,-1
    6e04:	9009883a 	mov	r4,r18
    6e08:	1480012e 	bgeu	r2,r18,6e10 <__sfvwrite_r+0x1d4>
    6e0c:	1009883a 	mov	r4,r2
    6e10:	b80b883a 	mov	r5,r23
    6e14:	000bbe00 	call	bbe0 <__divsi3>
    6e18:	15cf383a 	mul	r7,r2,r23
    6e1c:	81400717 	ldw	r5,28(r16)
    6e20:	80800917 	ldw	r2,36(r16)
    6e24:	e00d883a 	mov	r6,fp
    6e28:	a809883a 	mov	r4,r21
    6e2c:	103ee83a 	callr	r2
    6e30:	00bfdb16 	blt	zero,r2,6da0 <__alt_data_end+0xff006da0>
    6e34:	8080030b 	ldhu	r2,12(r16)
    6e38:	10801014 	ori	r2,r2,64
    6e3c:	8080030d 	sth	r2,12(r16)
    6e40:	00bfffc4 	movi	r2,-1
    6e44:	003fab06 	br	6cf4 <__alt_data_end+0xff006cf4>
    6e48:	0027883a 	mov	r19,zero
    6e4c:	0011883a 	mov	r8,zero
    6e50:	0039883a 	mov	fp,zero
    6e54:	0025883a 	mov	r18,zero
    6e58:	90001f26 	beq	r18,zero,6ed8 <__sfvwrite_r+0x29c>
    6e5c:	40005a26 	beq	r8,zero,6fc8 <__sfvwrite_r+0x38c>
    6e60:	982d883a 	mov	r22,r19
    6e64:	94c0012e 	bgeu	r18,r19,6e6c <__sfvwrite_r+0x230>
    6e68:	902d883a 	mov	r22,r18
    6e6c:	81000017 	ldw	r4,0(r16)
    6e70:	80800417 	ldw	r2,16(r16)
    6e74:	b02f883a 	mov	r23,r22
    6e78:	81c00517 	ldw	r7,20(r16)
    6e7c:	1100032e 	bgeu	r2,r4,6e8c <__sfvwrite_r+0x250>
    6e80:	80c00217 	ldw	r3,8(r16)
    6e84:	38c7883a 	add	r3,r7,r3
    6e88:	1d801816 	blt	r3,r22,6eec <__sfvwrite_r+0x2b0>
    6e8c:	b1c03e16 	blt	r22,r7,6f88 <__sfvwrite_r+0x34c>
    6e90:	80800917 	ldw	r2,36(r16)
    6e94:	81400717 	ldw	r5,28(r16)
    6e98:	e00d883a 	mov	r6,fp
    6e9c:	da000115 	stw	r8,4(sp)
    6ea0:	a809883a 	mov	r4,r21
    6ea4:	103ee83a 	callr	r2
    6ea8:	102f883a 	mov	r23,r2
    6eac:	da000117 	ldw	r8,4(sp)
    6eb0:	00bfe00e 	bge	zero,r2,6e34 <__alt_data_end+0xff006e34>
    6eb4:	9de7c83a 	sub	r19,r19,r23
    6eb8:	98001f26 	beq	r19,zero,6f38 <__sfvwrite_r+0x2fc>
    6ebc:	a0800217 	ldw	r2,8(r20)
    6ec0:	e5f9883a 	add	fp,fp,r23
    6ec4:	95e5c83a 	sub	r18,r18,r23
    6ec8:	15efc83a 	sub	r23,r2,r23
    6ecc:	a5c00215 	stw	r23,8(r20)
    6ed0:	b83f8726 	beq	r23,zero,6cf0 <__alt_data_end+0xff006cf0>
    6ed4:	903fe11e 	bne	r18,zero,6e5c <__alt_data_end+0xff006e5c>
    6ed8:	8f000017 	ldw	fp,0(r17)
    6edc:	8c800117 	ldw	r18,4(r17)
    6ee0:	0011883a 	mov	r8,zero
    6ee4:	8c400204 	addi	r17,r17,8
    6ee8:	003fdb06 	br	6e58 <__alt_data_end+0xff006e58>
    6eec:	180d883a 	mov	r6,r3
    6ef0:	e00b883a 	mov	r5,fp
    6ef4:	da000115 	stw	r8,4(sp)
    6ef8:	d8c00015 	stw	r3,0(sp)
    6efc:	00077440 	call	7744 <memmove>
    6f00:	d8c00017 	ldw	r3,0(sp)
    6f04:	80800017 	ldw	r2,0(r16)
    6f08:	800b883a 	mov	r5,r16
    6f0c:	a809883a 	mov	r4,r21
    6f10:	10c5883a 	add	r2,r2,r3
    6f14:	80800015 	stw	r2,0(r16)
    6f18:	d8c00015 	stw	r3,0(sp)
    6f1c:	00063dc0 	call	63dc <_fflush_r>
    6f20:	d8c00017 	ldw	r3,0(sp)
    6f24:	da000117 	ldw	r8,4(sp)
    6f28:	103fc21e 	bne	r2,zero,6e34 <__alt_data_end+0xff006e34>
    6f2c:	182f883a 	mov	r23,r3
    6f30:	9de7c83a 	sub	r19,r19,r23
    6f34:	983fe11e 	bne	r19,zero,6ebc <__alt_data_end+0xff006ebc>
    6f38:	800b883a 	mov	r5,r16
    6f3c:	a809883a 	mov	r4,r21
    6f40:	00063dc0 	call	63dc <_fflush_r>
    6f44:	103fbb1e 	bne	r2,zero,6e34 <__alt_data_end+0xff006e34>
    6f48:	0011883a 	mov	r8,zero
    6f4c:	003fdb06 	br	6ebc <__alt_data_end+0xff006ebc>
    6f50:	94c0012e 	bgeu	r18,r19,6f58 <__sfvwrite_r+0x31c>
    6f54:	9027883a 	mov	r19,r18
    6f58:	980d883a 	mov	r6,r19
    6f5c:	e00b883a 	mov	r5,fp
    6f60:	00077440 	call	7744 <memmove>
    6f64:	80800217 	ldw	r2,8(r16)
    6f68:	80c00017 	ldw	r3,0(r16)
    6f6c:	14c5c83a 	sub	r2,r2,r19
    6f70:	1cc7883a 	add	r3,r3,r19
    6f74:	80800215 	stw	r2,8(r16)
    6f78:	80c00015 	stw	r3,0(r16)
    6f7c:	10004326 	beq	r2,zero,708c <__sfvwrite_r+0x450>
    6f80:	9805883a 	mov	r2,r19
    6f84:	003f8606 	br	6da0 <__alt_data_end+0xff006da0>
    6f88:	b00d883a 	mov	r6,r22
    6f8c:	e00b883a 	mov	r5,fp
    6f90:	da000115 	stw	r8,4(sp)
    6f94:	00077440 	call	7744 <memmove>
    6f98:	80800217 	ldw	r2,8(r16)
    6f9c:	80c00017 	ldw	r3,0(r16)
    6fa0:	da000117 	ldw	r8,4(sp)
    6fa4:	1585c83a 	sub	r2,r2,r22
    6fa8:	1dad883a 	add	r22,r3,r22
    6fac:	80800215 	stw	r2,8(r16)
    6fb0:	85800015 	stw	r22,0(r16)
    6fb4:	003fbf06 	br	6eb4 <__alt_data_end+0xff006eb4>
    6fb8:	81000017 	ldw	r4,0(r16)
    6fbc:	9027883a 	mov	r19,r18
    6fc0:	902f883a 	mov	r23,r18
    6fc4:	003f6c06 	br	6d78 <__alt_data_end+0xff006d78>
    6fc8:	900d883a 	mov	r6,r18
    6fcc:	01400284 	movi	r5,10
    6fd0:	e009883a 	mov	r4,fp
    6fd4:	00075180 	call	7518 <memchr>
    6fd8:	10003e26 	beq	r2,zero,70d4 <__sfvwrite_r+0x498>
    6fdc:	10800044 	addi	r2,r2,1
    6fe0:	1727c83a 	sub	r19,r2,fp
    6fe4:	02000044 	movi	r8,1
    6fe8:	003f9d06 	br	6e60 <__alt_data_end+0xff006e60>
    6fec:	80800517 	ldw	r2,20(r16)
    6ff0:	81400417 	ldw	r5,16(r16)
    6ff4:	81c00017 	ldw	r7,0(r16)
    6ff8:	10a7883a 	add	r19,r2,r2
    6ffc:	9885883a 	add	r2,r19,r2
    7000:	1026d7fa 	srli	r19,r2,31
    7004:	396dc83a 	sub	r22,r7,r5
    7008:	b1000044 	addi	r4,r22,1
    700c:	9885883a 	add	r2,r19,r2
    7010:	1027d07a 	srai	r19,r2,1
    7014:	2485883a 	add	r2,r4,r18
    7018:	980d883a 	mov	r6,r19
    701c:	9880022e 	bgeu	r19,r2,7028 <__sfvwrite_r+0x3ec>
    7020:	1027883a 	mov	r19,r2
    7024:	100d883a 	mov	r6,r2
    7028:	18c1000c 	andi	r3,r3,1024
    702c:	18001c26 	beq	r3,zero,70a0 <__sfvwrite_r+0x464>
    7030:	300b883a 	mov	r5,r6
    7034:	a809883a 	mov	r4,r21
    7038:	0001adc0 	call	1adc <_malloc_r>
    703c:	102f883a 	mov	r23,r2
    7040:	10002926 	beq	r2,zero,70e8 <__sfvwrite_r+0x4ac>
    7044:	81400417 	ldw	r5,16(r16)
    7048:	b00d883a 	mov	r6,r22
    704c:	1009883a 	mov	r4,r2
    7050:	00075fc0 	call	75fc <memcpy>
    7054:	8080030b 	ldhu	r2,12(r16)
    7058:	00fedfc4 	movi	r3,-1153
    705c:	10c4703a 	and	r2,r2,r3
    7060:	10802014 	ori	r2,r2,128
    7064:	8080030d 	sth	r2,12(r16)
    7068:	bd89883a 	add	r4,r23,r22
    706c:	9d8fc83a 	sub	r7,r19,r22
    7070:	85c00415 	stw	r23,16(r16)
    7074:	84c00515 	stw	r19,20(r16)
    7078:	81000015 	stw	r4,0(r16)
    707c:	9027883a 	mov	r19,r18
    7080:	81c00215 	stw	r7,8(r16)
    7084:	902f883a 	mov	r23,r18
    7088:	003f3b06 	br	6d78 <__alt_data_end+0xff006d78>
    708c:	800b883a 	mov	r5,r16
    7090:	a809883a 	mov	r4,r21
    7094:	00063dc0 	call	63dc <_fflush_r>
    7098:	103fb926 	beq	r2,zero,6f80 <__alt_data_end+0xff006f80>
    709c:	003f6506 	br	6e34 <__alt_data_end+0xff006e34>
    70a0:	a809883a 	mov	r4,r21
    70a4:	00089c40 	call	89c4 <_realloc_r>
    70a8:	102f883a 	mov	r23,r2
    70ac:	103fee1e 	bne	r2,zero,7068 <__alt_data_end+0xff007068>
    70b0:	81400417 	ldw	r5,16(r16)
    70b4:	a809883a 	mov	r4,r21
    70b8:	000692c0 	call	692c <_free_r>
    70bc:	8080030b 	ldhu	r2,12(r16)
    70c0:	00ffdfc4 	movi	r3,-129
    70c4:	1884703a 	and	r2,r3,r2
    70c8:	00c00304 	movi	r3,12
    70cc:	a8c00015 	stw	r3,0(r21)
    70d0:	003f5906 	br	6e38 <__alt_data_end+0xff006e38>
    70d4:	94c00044 	addi	r19,r18,1
    70d8:	02000044 	movi	r8,1
    70dc:	003f6006 	br	6e60 <__alt_data_end+0xff006e60>
    70e0:	00bfffc4 	movi	r2,-1
    70e4:	003f0306 	br	6cf4 <__alt_data_end+0xff006cf4>
    70e8:	00800304 	movi	r2,12
    70ec:	a8800015 	stw	r2,0(r21)
    70f0:	8080030b 	ldhu	r2,12(r16)
    70f4:	003f5006 	br	6e38 <__alt_data_end+0xff006e38>

000070f8 <_fwalk>:
    70f8:	defff704 	addi	sp,sp,-36
    70fc:	dd000415 	stw	r20,16(sp)
    7100:	dfc00815 	stw	ra,32(sp)
    7104:	ddc00715 	stw	r23,28(sp)
    7108:	dd800615 	stw	r22,24(sp)
    710c:	dd400515 	stw	r21,20(sp)
    7110:	dcc00315 	stw	r19,12(sp)
    7114:	dc800215 	stw	r18,8(sp)
    7118:	dc400115 	stw	r17,4(sp)
    711c:	dc000015 	stw	r16,0(sp)
    7120:	2500b804 	addi	r20,r4,736
    7124:	a0002326 	beq	r20,zero,71b4 <_fwalk+0xbc>
    7128:	282b883a 	mov	r21,r5
    712c:	002f883a 	mov	r23,zero
    7130:	05800044 	movi	r22,1
    7134:	04ffffc4 	movi	r19,-1
    7138:	a4400117 	ldw	r17,4(r20)
    713c:	a4800217 	ldw	r18,8(r20)
    7140:	8c7fffc4 	addi	r17,r17,-1
    7144:	88000d16 	blt	r17,zero,717c <_fwalk+0x84>
    7148:	94000304 	addi	r16,r18,12
    714c:	94800384 	addi	r18,r18,14
    7150:	8080000b 	ldhu	r2,0(r16)
    7154:	8c7fffc4 	addi	r17,r17,-1
    7158:	813ffd04 	addi	r4,r16,-12
    715c:	b080042e 	bgeu	r22,r2,7170 <_fwalk+0x78>
    7160:	9080000f 	ldh	r2,0(r18)
    7164:	14c00226 	beq	r2,r19,7170 <_fwalk+0x78>
    7168:	a83ee83a 	callr	r21
    716c:	b8aeb03a 	or	r23,r23,r2
    7170:	84001a04 	addi	r16,r16,104
    7174:	94801a04 	addi	r18,r18,104
    7178:	8cfff51e 	bne	r17,r19,7150 <__alt_data_end+0xff007150>
    717c:	a5000017 	ldw	r20,0(r20)
    7180:	a03fed1e 	bne	r20,zero,7138 <__alt_data_end+0xff007138>
    7184:	b805883a 	mov	r2,r23
    7188:	dfc00817 	ldw	ra,32(sp)
    718c:	ddc00717 	ldw	r23,28(sp)
    7190:	dd800617 	ldw	r22,24(sp)
    7194:	dd400517 	ldw	r21,20(sp)
    7198:	dd000417 	ldw	r20,16(sp)
    719c:	dcc00317 	ldw	r19,12(sp)
    71a0:	dc800217 	ldw	r18,8(sp)
    71a4:	dc400117 	ldw	r17,4(sp)
    71a8:	dc000017 	ldw	r16,0(sp)
    71ac:	dec00904 	addi	sp,sp,36
    71b0:	f800283a 	ret
    71b4:	002f883a 	mov	r23,zero
    71b8:	003ff206 	br	7184 <__alt_data_end+0xff007184>

000071bc <_fwalk_reent>:
    71bc:	defff704 	addi	sp,sp,-36
    71c0:	dd000415 	stw	r20,16(sp)
    71c4:	dfc00815 	stw	ra,32(sp)
    71c8:	ddc00715 	stw	r23,28(sp)
    71cc:	dd800615 	stw	r22,24(sp)
    71d0:	dd400515 	stw	r21,20(sp)
    71d4:	dcc00315 	stw	r19,12(sp)
    71d8:	dc800215 	stw	r18,8(sp)
    71dc:	dc400115 	stw	r17,4(sp)
    71e0:	dc000015 	stw	r16,0(sp)
    71e4:	2500b804 	addi	r20,r4,736
    71e8:	a0002326 	beq	r20,zero,7278 <_fwalk_reent+0xbc>
    71ec:	282b883a 	mov	r21,r5
    71f0:	2027883a 	mov	r19,r4
    71f4:	002f883a 	mov	r23,zero
    71f8:	05800044 	movi	r22,1
    71fc:	04bfffc4 	movi	r18,-1
    7200:	a4400117 	ldw	r17,4(r20)
    7204:	a4000217 	ldw	r16,8(r20)
    7208:	8c7fffc4 	addi	r17,r17,-1
    720c:	88000c16 	blt	r17,zero,7240 <_fwalk_reent+0x84>
    7210:	84000304 	addi	r16,r16,12
    7214:	8080000b 	ldhu	r2,0(r16)
    7218:	8c7fffc4 	addi	r17,r17,-1
    721c:	817ffd04 	addi	r5,r16,-12
    7220:	b080052e 	bgeu	r22,r2,7238 <_fwalk_reent+0x7c>
    7224:	8080008f 	ldh	r2,2(r16)
    7228:	9809883a 	mov	r4,r19
    722c:	14800226 	beq	r2,r18,7238 <_fwalk_reent+0x7c>
    7230:	a83ee83a 	callr	r21
    7234:	b8aeb03a 	or	r23,r23,r2
    7238:	84001a04 	addi	r16,r16,104
    723c:	8cbff51e 	bne	r17,r18,7214 <__alt_data_end+0xff007214>
    7240:	a5000017 	ldw	r20,0(r20)
    7244:	a03fee1e 	bne	r20,zero,7200 <__alt_data_end+0xff007200>
    7248:	b805883a 	mov	r2,r23
    724c:	dfc00817 	ldw	ra,32(sp)
    7250:	ddc00717 	ldw	r23,28(sp)
    7254:	dd800617 	ldw	r22,24(sp)
    7258:	dd400517 	ldw	r21,20(sp)
    725c:	dd000417 	ldw	r20,16(sp)
    7260:	dcc00317 	ldw	r19,12(sp)
    7264:	dc800217 	ldw	r18,8(sp)
    7268:	dc400117 	ldw	r17,4(sp)
    726c:	dc000017 	ldw	r16,0(sp)
    7270:	dec00904 	addi	sp,sp,36
    7274:	f800283a 	ret
    7278:	002f883a 	mov	r23,zero
    727c:	003ff206 	br	7248 <__alt_data_end+0xff007248>

00007280 <_setlocale_r>:
    7280:	30001b26 	beq	r6,zero,72f0 <_setlocale_r+0x70>
    7284:	01400074 	movhi	r5,1
    7288:	defffe04 	addi	sp,sp,-8
    728c:	2944df04 	addi	r5,r5,4988
    7290:	3009883a 	mov	r4,r6
    7294:	dc000015 	stw	r16,0(sp)
    7298:	dfc00115 	stw	ra,4(sp)
    729c:	3021883a 	mov	r16,r6
    72a0:	00090d80 	call	90d8 <strcmp>
    72a4:	1000061e 	bne	r2,zero,72c0 <_setlocale_r+0x40>
    72a8:	00800074 	movhi	r2,1
    72ac:	1084de04 	addi	r2,r2,4984
    72b0:	dfc00117 	ldw	ra,4(sp)
    72b4:	dc000017 	ldw	r16,0(sp)
    72b8:	dec00204 	addi	sp,sp,8
    72bc:	f800283a 	ret
    72c0:	01400074 	movhi	r5,1
    72c4:	2944de04 	addi	r5,r5,4984
    72c8:	8009883a 	mov	r4,r16
    72cc:	00090d80 	call	90d8 <strcmp>
    72d0:	103ff526 	beq	r2,zero,72a8 <__alt_data_end+0xff0072a8>
    72d4:	01400074 	movhi	r5,1
    72d8:	2944b004 	addi	r5,r5,4800
    72dc:	8009883a 	mov	r4,r16
    72e0:	00090d80 	call	90d8 <strcmp>
    72e4:	103ff026 	beq	r2,zero,72a8 <__alt_data_end+0xff0072a8>
    72e8:	0005883a 	mov	r2,zero
    72ec:	003ff006 	br	72b0 <__alt_data_end+0xff0072b0>
    72f0:	00800074 	movhi	r2,1
    72f4:	1084de04 	addi	r2,r2,4984
    72f8:	f800283a 	ret

000072fc <__locale_charset>:
    72fc:	00800074 	movhi	r2,1
    7300:	10879104 	addi	r2,r2,7748
    7304:	f800283a 	ret

00007308 <__locale_mb_cur_max>:
    7308:	00800074 	movhi	r2,1
    730c:	108c2d04 	addi	r2,r2,12468
    7310:	10800017 	ldw	r2,0(r2)
    7314:	f800283a 	ret

00007318 <__locale_msgcharset>:
    7318:	00800074 	movhi	r2,1
    731c:	10878904 	addi	r2,r2,7716
    7320:	f800283a 	ret

00007324 <__locale_cjk_lang>:
    7324:	0005883a 	mov	r2,zero
    7328:	f800283a 	ret

0000732c <_localeconv_r>:
    732c:	00800074 	movhi	r2,1
    7330:	10879904 	addi	r2,r2,7780
    7334:	f800283a 	ret

00007338 <setlocale>:
    7338:	00800074 	movhi	r2,1
    733c:	108c2c04 	addi	r2,r2,12464
    7340:	280d883a 	mov	r6,r5
    7344:	200b883a 	mov	r5,r4
    7348:	11000017 	ldw	r4,0(r2)
    734c:	00072801 	jmpi	7280 <_setlocale_r>

00007350 <localeconv>:
    7350:	00800074 	movhi	r2,1
    7354:	10879904 	addi	r2,r2,7780
    7358:	f800283a 	ret

0000735c <__smakebuf_r>:
    735c:	2880030b 	ldhu	r2,12(r5)
    7360:	10c0008c 	andi	r3,r2,2
    7364:	1800411e 	bne	r3,zero,746c <__smakebuf_r+0x110>
    7368:	deffec04 	addi	sp,sp,-80
    736c:	dc000f15 	stw	r16,60(sp)
    7370:	2821883a 	mov	r16,r5
    7374:	2940038f 	ldh	r5,14(r5)
    7378:	dc401015 	stw	r17,64(sp)
    737c:	dfc01315 	stw	ra,76(sp)
    7380:	dcc01215 	stw	r19,72(sp)
    7384:	dc801115 	stw	r18,68(sp)
    7388:	2023883a 	mov	r17,r4
    738c:	28001c16 	blt	r5,zero,7400 <__smakebuf_r+0xa4>
    7390:	d80d883a 	mov	r6,sp
    7394:	000ac800 	call	ac80 <_fstat_r>
    7398:	10001816 	blt	r2,zero,73fc <__smakebuf_r+0xa0>
    739c:	d8800117 	ldw	r2,4(sp)
    73a0:	00e00014 	movui	r3,32768
    73a4:	10bc000c 	andi	r2,r2,61440
    73a8:	14c80020 	cmpeqi	r19,r2,8192
    73ac:	10c03726 	beq	r2,r3,748c <__smakebuf_r+0x130>
    73b0:	80c0030b 	ldhu	r3,12(r16)
    73b4:	18c20014 	ori	r3,r3,2048
    73b8:	80c0030d 	sth	r3,12(r16)
    73bc:	00c80004 	movi	r3,8192
    73c0:	10c0521e 	bne	r2,r3,750c <__smakebuf_r+0x1b0>
    73c4:	8140038f 	ldh	r5,14(r16)
    73c8:	8809883a 	mov	r4,r17
    73cc:	000acdc0 	call	acdc <_isatty_r>
    73d0:	10004c26 	beq	r2,zero,7504 <__smakebuf_r+0x1a8>
    73d4:	8080030b 	ldhu	r2,12(r16)
    73d8:	80c010c4 	addi	r3,r16,67
    73dc:	80c00015 	stw	r3,0(r16)
    73e0:	10800054 	ori	r2,r2,1
    73e4:	8080030d 	sth	r2,12(r16)
    73e8:	00800044 	movi	r2,1
    73ec:	80c00415 	stw	r3,16(r16)
    73f0:	80800515 	stw	r2,20(r16)
    73f4:	04810004 	movi	r18,1024
    73f8:	00000706 	br	7418 <__smakebuf_r+0xbc>
    73fc:	8080030b 	ldhu	r2,12(r16)
    7400:	10c0200c 	andi	r3,r2,128
    7404:	18001f1e 	bne	r3,zero,7484 <__smakebuf_r+0x128>
    7408:	04810004 	movi	r18,1024
    740c:	10820014 	ori	r2,r2,2048
    7410:	8080030d 	sth	r2,12(r16)
    7414:	0027883a 	mov	r19,zero
    7418:	900b883a 	mov	r5,r18
    741c:	8809883a 	mov	r4,r17
    7420:	0001adc0 	call	1adc <_malloc_r>
    7424:	10002c26 	beq	r2,zero,74d8 <__smakebuf_r+0x17c>
    7428:	80c0030b 	ldhu	r3,12(r16)
    742c:	01000034 	movhi	r4,0
    7430:	21191c04 	addi	r4,r4,25712
    7434:	89000f15 	stw	r4,60(r17)
    7438:	18c02014 	ori	r3,r3,128
    743c:	80c0030d 	sth	r3,12(r16)
    7440:	80800015 	stw	r2,0(r16)
    7444:	80800415 	stw	r2,16(r16)
    7448:	84800515 	stw	r18,20(r16)
    744c:	98001a1e 	bne	r19,zero,74b8 <__smakebuf_r+0x15c>
    7450:	dfc01317 	ldw	ra,76(sp)
    7454:	dcc01217 	ldw	r19,72(sp)
    7458:	dc801117 	ldw	r18,68(sp)
    745c:	dc401017 	ldw	r17,64(sp)
    7460:	dc000f17 	ldw	r16,60(sp)
    7464:	dec01404 	addi	sp,sp,80
    7468:	f800283a 	ret
    746c:	288010c4 	addi	r2,r5,67
    7470:	28800015 	stw	r2,0(r5)
    7474:	28800415 	stw	r2,16(r5)
    7478:	00800044 	movi	r2,1
    747c:	28800515 	stw	r2,20(r5)
    7480:	f800283a 	ret
    7484:	04801004 	movi	r18,64
    7488:	003fe006 	br	740c <__alt_data_end+0xff00740c>
    748c:	81000a17 	ldw	r4,40(r16)
    7490:	00c00074 	movhi	r3,1
    7494:	18e41d04 	addi	r3,r3,-28556
    7498:	20ffc51e 	bne	r4,r3,73b0 <__alt_data_end+0xff0073b0>
    749c:	8080030b 	ldhu	r2,12(r16)
    74a0:	04810004 	movi	r18,1024
    74a4:	84801315 	stw	r18,76(r16)
    74a8:	1484b03a 	or	r2,r2,r18
    74ac:	8080030d 	sth	r2,12(r16)
    74b0:	0027883a 	mov	r19,zero
    74b4:	003fd806 	br	7418 <__alt_data_end+0xff007418>
    74b8:	8140038f 	ldh	r5,14(r16)
    74bc:	8809883a 	mov	r4,r17
    74c0:	000acdc0 	call	acdc <_isatty_r>
    74c4:	103fe226 	beq	r2,zero,7450 <__alt_data_end+0xff007450>
    74c8:	8080030b 	ldhu	r2,12(r16)
    74cc:	10800054 	ori	r2,r2,1
    74d0:	8080030d 	sth	r2,12(r16)
    74d4:	003fde06 	br	7450 <__alt_data_end+0xff007450>
    74d8:	8080030b 	ldhu	r2,12(r16)
    74dc:	10c0800c 	andi	r3,r2,512
    74e0:	183fdb1e 	bne	r3,zero,7450 <__alt_data_end+0xff007450>
    74e4:	10800094 	ori	r2,r2,2
    74e8:	80c010c4 	addi	r3,r16,67
    74ec:	8080030d 	sth	r2,12(r16)
    74f0:	00800044 	movi	r2,1
    74f4:	80c00015 	stw	r3,0(r16)
    74f8:	80c00415 	stw	r3,16(r16)
    74fc:	80800515 	stw	r2,20(r16)
    7500:	003fd306 	br	7450 <__alt_data_end+0xff007450>
    7504:	04810004 	movi	r18,1024
    7508:	003fc306 	br	7418 <__alt_data_end+0xff007418>
    750c:	0027883a 	mov	r19,zero
    7510:	04810004 	movi	r18,1024
    7514:	003fc006 	br	7418 <__alt_data_end+0xff007418>

00007518 <memchr>:
    7518:	208000cc 	andi	r2,r4,3
    751c:	280f883a 	mov	r7,r5
    7520:	10003426 	beq	r2,zero,75f4 <memchr+0xdc>
    7524:	30bfffc4 	addi	r2,r6,-1
    7528:	30001a26 	beq	r6,zero,7594 <memchr+0x7c>
    752c:	20c00003 	ldbu	r3,0(r4)
    7530:	29803fcc 	andi	r6,r5,255
    7534:	30c0051e 	bne	r6,r3,754c <memchr+0x34>
    7538:	00001806 	br	759c <memchr+0x84>
    753c:	10001526 	beq	r2,zero,7594 <memchr+0x7c>
    7540:	20c00003 	ldbu	r3,0(r4)
    7544:	10bfffc4 	addi	r2,r2,-1
    7548:	30c01426 	beq	r6,r3,759c <memchr+0x84>
    754c:	21000044 	addi	r4,r4,1
    7550:	20c000cc 	andi	r3,r4,3
    7554:	183ff91e 	bne	r3,zero,753c <__alt_data_end+0xff00753c>
    7558:	020000c4 	movi	r8,3
    755c:	40801136 	bltu	r8,r2,75a4 <memchr+0x8c>
    7560:	10000c26 	beq	r2,zero,7594 <memchr+0x7c>
    7564:	20c00003 	ldbu	r3,0(r4)
    7568:	29403fcc 	andi	r5,r5,255
    756c:	28c00b26 	beq	r5,r3,759c <memchr+0x84>
    7570:	20c00044 	addi	r3,r4,1
    7574:	39803fcc 	andi	r6,r7,255
    7578:	2089883a 	add	r4,r4,r2
    757c:	00000306 	br	758c <memchr+0x74>
    7580:	18c00044 	addi	r3,r3,1
    7584:	197fffc3 	ldbu	r5,-1(r3)
    7588:	31400526 	beq	r6,r5,75a0 <memchr+0x88>
    758c:	1805883a 	mov	r2,r3
    7590:	20fffb1e 	bne	r4,r3,7580 <__alt_data_end+0xff007580>
    7594:	0005883a 	mov	r2,zero
    7598:	f800283a 	ret
    759c:	2005883a 	mov	r2,r4
    75a0:	f800283a 	ret
    75a4:	28c03fcc 	andi	r3,r5,255
    75a8:	1812923a 	slli	r9,r3,8
    75ac:	02ffbff4 	movhi	r11,65279
    75b0:	02a02074 	movhi	r10,32897
    75b4:	48d2b03a 	or	r9,r9,r3
    75b8:	4806943a 	slli	r3,r9,16
    75bc:	5affbfc4 	addi	r11,r11,-257
    75c0:	52a02004 	addi	r10,r10,-32640
    75c4:	48d2b03a 	or	r9,r9,r3
    75c8:	20c00017 	ldw	r3,0(r4)
    75cc:	48c6f03a 	xor	r3,r9,r3
    75d0:	1acd883a 	add	r6,r3,r11
    75d4:	00c6303a 	nor	r3,zero,r3
    75d8:	30c6703a 	and	r3,r6,r3
    75dc:	1a86703a 	and	r3,r3,r10
    75e0:	183fe01e 	bne	r3,zero,7564 <__alt_data_end+0xff007564>
    75e4:	10bfff04 	addi	r2,r2,-4
    75e8:	21000104 	addi	r4,r4,4
    75ec:	40bff636 	bltu	r8,r2,75c8 <__alt_data_end+0xff0075c8>
    75f0:	003fdb06 	br	7560 <__alt_data_end+0xff007560>
    75f4:	3005883a 	mov	r2,r6
    75f8:	003fd706 	br	7558 <__alt_data_end+0xff007558>

000075fc <memcpy>:
    75fc:	defffd04 	addi	sp,sp,-12
    7600:	dfc00215 	stw	ra,8(sp)
    7604:	dc400115 	stw	r17,4(sp)
    7608:	dc000015 	stw	r16,0(sp)
    760c:	00c003c4 	movi	r3,15
    7610:	2005883a 	mov	r2,r4
    7614:	1980452e 	bgeu	r3,r6,772c <memcpy+0x130>
    7618:	2906b03a 	or	r3,r5,r4
    761c:	18c000cc 	andi	r3,r3,3
    7620:	1800441e 	bne	r3,zero,7734 <memcpy+0x138>
    7624:	347ffc04 	addi	r17,r6,-16
    7628:	8822d13a 	srli	r17,r17,4
    762c:	28c00104 	addi	r3,r5,4
    7630:	23400104 	addi	r13,r4,4
    7634:	8820913a 	slli	r16,r17,4
    7638:	2b000204 	addi	r12,r5,8
    763c:	22c00204 	addi	r11,r4,8
    7640:	84000504 	addi	r16,r16,20
    7644:	2a800304 	addi	r10,r5,12
    7648:	22400304 	addi	r9,r4,12
    764c:	2c21883a 	add	r16,r5,r16
    7650:	2811883a 	mov	r8,r5
    7654:	200f883a 	mov	r7,r4
    7658:	41000017 	ldw	r4,0(r8)
    765c:	1fc00017 	ldw	ra,0(r3)
    7660:	63c00017 	ldw	r15,0(r12)
    7664:	39000015 	stw	r4,0(r7)
    7668:	53800017 	ldw	r14,0(r10)
    766c:	6fc00015 	stw	ra,0(r13)
    7670:	5bc00015 	stw	r15,0(r11)
    7674:	4b800015 	stw	r14,0(r9)
    7678:	18c00404 	addi	r3,r3,16
    767c:	39c00404 	addi	r7,r7,16
    7680:	42000404 	addi	r8,r8,16
    7684:	6b400404 	addi	r13,r13,16
    7688:	63000404 	addi	r12,r12,16
    768c:	5ac00404 	addi	r11,r11,16
    7690:	52800404 	addi	r10,r10,16
    7694:	4a400404 	addi	r9,r9,16
    7698:	1c3fef1e 	bne	r3,r16,7658 <__alt_data_end+0xff007658>
    769c:	89c00044 	addi	r7,r17,1
    76a0:	380e913a 	slli	r7,r7,4
    76a4:	310003cc 	andi	r4,r6,15
    76a8:	02c000c4 	movi	r11,3
    76ac:	11c7883a 	add	r3,r2,r7
    76b0:	29cb883a 	add	r5,r5,r7
    76b4:	5900212e 	bgeu	r11,r4,773c <memcpy+0x140>
    76b8:	1813883a 	mov	r9,r3
    76bc:	2811883a 	mov	r8,r5
    76c0:	200f883a 	mov	r7,r4
    76c4:	42800017 	ldw	r10,0(r8)
    76c8:	4a400104 	addi	r9,r9,4
    76cc:	39ffff04 	addi	r7,r7,-4
    76d0:	4abfff15 	stw	r10,-4(r9)
    76d4:	42000104 	addi	r8,r8,4
    76d8:	59fffa36 	bltu	r11,r7,76c4 <__alt_data_end+0xff0076c4>
    76dc:	213fff04 	addi	r4,r4,-4
    76e0:	2008d0ba 	srli	r4,r4,2
    76e4:	318000cc 	andi	r6,r6,3
    76e8:	21000044 	addi	r4,r4,1
    76ec:	2109883a 	add	r4,r4,r4
    76f0:	2109883a 	add	r4,r4,r4
    76f4:	1907883a 	add	r3,r3,r4
    76f8:	290b883a 	add	r5,r5,r4
    76fc:	30000626 	beq	r6,zero,7718 <memcpy+0x11c>
    7700:	198d883a 	add	r6,r3,r6
    7704:	29c00003 	ldbu	r7,0(r5)
    7708:	18c00044 	addi	r3,r3,1
    770c:	29400044 	addi	r5,r5,1
    7710:	19ffffc5 	stb	r7,-1(r3)
    7714:	19bffb1e 	bne	r3,r6,7704 <__alt_data_end+0xff007704>
    7718:	dfc00217 	ldw	ra,8(sp)
    771c:	dc400117 	ldw	r17,4(sp)
    7720:	dc000017 	ldw	r16,0(sp)
    7724:	dec00304 	addi	sp,sp,12
    7728:	f800283a 	ret
    772c:	2007883a 	mov	r3,r4
    7730:	003ff206 	br	76fc <__alt_data_end+0xff0076fc>
    7734:	2007883a 	mov	r3,r4
    7738:	003ff106 	br	7700 <__alt_data_end+0xff007700>
    773c:	200d883a 	mov	r6,r4
    7740:	003fee06 	br	76fc <__alt_data_end+0xff0076fc>

00007744 <memmove>:
    7744:	2005883a 	mov	r2,r4
    7748:	29000b2e 	bgeu	r5,r4,7778 <memmove+0x34>
    774c:	298f883a 	add	r7,r5,r6
    7750:	21c0092e 	bgeu	r4,r7,7778 <memmove+0x34>
    7754:	2187883a 	add	r3,r4,r6
    7758:	198bc83a 	sub	r5,r3,r6
    775c:	30004826 	beq	r6,zero,7880 <memmove+0x13c>
    7760:	39ffffc4 	addi	r7,r7,-1
    7764:	39000003 	ldbu	r4,0(r7)
    7768:	18ffffc4 	addi	r3,r3,-1
    776c:	19000005 	stb	r4,0(r3)
    7770:	28fffb1e 	bne	r5,r3,7760 <__alt_data_end+0xff007760>
    7774:	f800283a 	ret
    7778:	00c003c4 	movi	r3,15
    777c:	1980412e 	bgeu	r3,r6,7884 <memmove+0x140>
    7780:	2886b03a 	or	r3,r5,r2
    7784:	18c000cc 	andi	r3,r3,3
    7788:	1800401e 	bne	r3,zero,788c <memmove+0x148>
    778c:	33fffc04 	addi	r15,r6,-16
    7790:	781ed13a 	srli	r15,r15,4
    7794:	28c00104 	addi	r3,r5,4
    7798:	13400104 	addi	r13,r2,4
    779c:	781c913a 	slli	r14,r15,4
    77a0:	2b000204 	addi	r12,r5,8
    77a4:	12c00204 	addi	r11,r2,8
    77a8:	73800504 	addi	r14,r14,20
    77ac:	2a800304 	addi	r10,r5,12
    77b0:	12400304 	addi	r9,r2,12
    77b4:	2b9d883a 	add	r14,r5,r14
    77b8:	2811883a 	mov	r8,r5
    77bc:	100f883a 	mov	r7,r2
    77c0:	41000017 	ldw	r4,0(r8)
    77c4:	39c00404 	addi	r7,r7,16
    77c8:	18c00404 	addi	r3,r3,16
    77cc:	393ffc15 	stw	r4,-16(r7)
    77d0:	193ffc17 	ldw	r4,-16(r3)
    77d4:	6b400404 	addi	r13,r13,16
    77d8:	5ac00404 	addi	r11,r11,16
    77dc:	693ffc15 	stw	r4,-16(r13)
    77e0:	61000017 	ldw	r4,0(r12)
    77e4:	4a400404 	addi	r9,r9,16
    77e8:	42000404 	addi	r8,r8,16
    77ec:	593ffc15 	stw	r4,-16(r11)
    77f0:	51000017 	ldw	r4,0(r10)
    77f4:	63000404 	addi	r12,r12,16
    77f8:	52800404 	addi	r10,r10,16
    77fc:	493ffc15 	stw	r4,-16(r9)
    7800:	1bbfef1e 	bne	r3,r14,77c0 <__alt_data_end+0xff0077c0>
    7804:	79000044 	addi	r4,r15,1
    7808:	2008913a 	slli	r4,r4,4
    780c:	328003cc 	andi	r10,r6,15
    7810:	02c000c4 	movi	r11,3
    7814:	1107883a 	add	r3,r2,r4
    7818:	290b883a 	add	r5,r5,r4
    781c:	5a801e2e 	bgeu	r11,r10,7898 <memmove+0x154>
    7820:	1813883a 	mov	r9,r3
    7824:	2811883a 	mov	r8,r5
    7828:	500f883a 	mov	r7,r10
    782c:	41000017 	ldw	r4,0(r8)
    7830:	4a400104 	addi	r9,r9,4
    7834:	39ffff04 	addi	r7,r7,-4
    7838:	493fff15 	stw	r4,-4(r9)
    783c:	42000104 	addi	r8,r8,4
    7840:	59fffa36 	bltu	r11,r7,782c <__alt_data_end+0xff00782c>
    7844:	513fff04 	addi	r4,r10,-4
    7848:	2008d0ba 	srli	r4,r4,2
    784c:	318000cc 	andi	r6,r6,3
    7850:	21000044 	addi	r4,r4,1
    7854:	2109883a 	add	r4,r4,r4
    7858:	2109883a 	add	r4,r4,r4
    785c:	1907883a 	add	r3,r3,r4
    7860:	290b883a 	add	r5,r5,r4
    7864:	30000b26 	beq	r6,zero,7894 <memmove+0x150>
    7868:	198d883a 	add	r6,r3,r6
    786c:	29c00003 	ldbu	r7,0(r5)
    7870:	18c00044 	addi	r3,r3,1
    7874:	29400044 	addi	r5,r5,1
    7878:	19ffffc5 	stb	r7,-1(r3)
    787c:	19bffb1e 	bne	r3,r6,786c <__alt_data_end+0xff00786c>
    7880:	f800283a 	ret
    7884:	1007883a 	mov	r3,r2
    7888:	003ff606 	br	7864 <__alt_data_end+0xff007864>
    788c:	1007883a 	mov	r3,r2
    7890:	003ff506 	br	7868 <__alt_data_end+0xff007868>
    7894:	f800283a 	ret
    7898:	500d883a 	mov	r6,r10
    789c:	003ff106 	br	7864 <__alt_data_end+0xff007864>

000078a0 <memset>:
    78a0:	20c000cc 	andi	r3,r4,3
    78a4:	2005883a 	mov	r2,r4
    78a8:	18004426 	beq	r3,zero,79bc <memset+0x11c>
    78ac:	31ffffc4 	addi	r7,r6,-1
    78b0:	30004026 	beq	r6,zero,79b4 <memset+0x114>
    78b4:	2813883a 	mov	r9,r5
    78b8:	200d883a 	mov	r6,r4
    78bc:	2007883a 	mov	r3,r4
    78c0:	00000406 	br	78d4 <memset+0x34>
    78c4:	3a3fffc4 	addi	r8,r7,-1
    78c8:	31800044 	addi	r6,r6,1
    78cc:	38003926 	beq	r7,zero,79b4 <memset+0x114>
    78d0:	400f883a 	mov	r7,r8
    78d4:	18c00044 	addi	r3,r3,1
    78d8:	32400005 	stb	r9,0(r6)
    78dc:	1a0000cc 	andi	r8,r3,3
    78e0:	403ff81e 	bne	r8,zero,78c4 <__alt_data_end+0xff0078c4>
    78e4:	010000c4 	movi	r4,3
    78e8:	21c02d2e 	bgeu	r4,r7,79a0 <memset+0x100>
    78ec:	29003fcc 	andi	r4,r5,255
    78f0:	200c923a 	slli	r6,r4,8
    78f4:	3108b03a 	or	r4,r6,r4
    78f8:	200c943a 	slli	r6,r4,16
    78fc:	218cb03a 	or	r6,r4,r6
    7900:	010003c4 	movi	r4,15
    7904:	21c0182e 	bgeu	r4,r7,7968 <memset+0xc8>
    7908:	3b3ffc04 	addi	r12,r7,-16
    790c:	6018d13a 	srli	r12,r12,4
    7910:	1a000104 	addi	r8,r3,4
    7914:	1ac00204 	addi	r11,r3,8
    7918:	6008913a 	slli	r4,r12,4
    791c:	1a800304 	addi	r10,r3,12
    7920:	1813883a 	mov	r9,r3
    7924:	21000504 	addi	r4,r4,20
    7928:	1909883a 	add	r4,r3,r4
    792c:	49800015 	stw	r6,0(r9)
    7930:	41800015 	stw	r6,0(r8)
    7934:	59800015 	stw	r6,0(r11)
    7938:	51800015 	stw	r6,0(r10)
    793c:	42000404 	addi	r8,r8,16
    7940:	4a400404 	addi	r9,r9,16
    7944:	5ac00404 	addi	r11,r11,16
    7948:	52800404 	addi	r10,r10,16
    794c:	413ff71e 	bne	r8,r4,792c <__alt_data_end+0xff00792c>
    7950:	63000044 	addi	r12,r12,1
    7954:	6018913a 	slli	r12,r12,4
    7958:	39c003cc 	andi	r7,r7,15
    795c:	010000c4 	movi	r4,3
    7960:	1b07883a 	add	r3,r3,r12
    7964:	21c00e2e 	bgeu	r4,r7,79a0 <memset+0x100>
    7968:	1813883a 	mov	r9,r3
    796c:	3811883a 	mov	r8,r7
    7970:	010000c4 	movi	r4,3
    7974:	49800015 	stw	r6,0(r9)
    7978:	423fff04 	addi	r8,r8,-4
    797c:	4a400104 	addi	r9,r9,4
    7980:	223ffc36 	bltu	r4,r8,7974 <__alt_data_end+0xff007974>
    7984:	393fff04 	addi	r4,r7,-4
    7988:	2008d0ba 	srli	r4,r4,2
    798c:	39c000cc 	andi	r7,r7,3
    7990:	21000044 	addi	r4,r4,1
    7994:	2109883a 	add	r4,r4,r4
    7998:	2109883a 	add	r4,r4,r4
    799c:	1907883a 	add	r3,r3,r4
    79a0:	38000526 	beq	r7,zero,79b8 <memset+0x118>
    79a4:	19cf883a 	add	r7,r3,r7
    79a8:	19400005 	stb	r5,0(r3)
    79ac:	18c00044 	addi	r3,r3,1
    79b0:	38fffd1e 	bne	r7,r3,79a8 <__alt_data_end+0xff0079a8>
    79b4:	f800283a 	ret
    79b8:	f800283a 	ret
    79bc:	2007883a 	mov	r3,r4
    79c0:	300f883a 	mov	r7,r6
    79c4:	003fc706 	br	78e4 <__alt_data_end+0xff0078e4>

000079c8 <_Balloc>:
    79c8:	20801317 	ldw	r2,76(r4)
    79cc:	defffc04 	addi	sp,sp,-16
    79d0:	dc400115 	stw	r17,4(sp)
    79d4:	dc000015 	stw	r16,0(sp)
    79d8:	dfc00315 	stw	ra,12(sp)
    79dc:	dc800215 	stw	r18,8(sp)
    79e0:	2023883a 	mov	r17,r4
    79e4:	2821883a 	mov	r16,r5
    79e8:	10000f26 	beq	r2,zero,7a28 <_Balloc+0x60>
    79ec:	8407883a 	add	r3,r16,r16
    79f0:	18c7883a 	add	r3,r3,r3
    79f4:	10c7883a 	add	r3,r2,r3
    79f8:	18800017 	ldw	r2,0(r3)
    79fc:	10001126 	beq	r2,zero,7a44 <_Balloc+0x7c>
    7a00:	11000017 	ldw	r4,0(r2)
    7a04:	19000015 	stw	r4,0(r3)
    7a08:	10000415 	stw	zero,16(r2)
    7a0c:	10000315 	stw	zero,12(r2)
    7a10:	dfc00317 	ldw	ra,12(sp)
    7a14:	dc800217 	ldw	r18,8(sp)
    7a18:	dc400117 	ldw	r17,4(sp)
    7a1c:	dc000017 	ldw	r16,0(sp)
    7a20:	dec00404 	addi	sp,sp,16
    7a24:	f800283a 	ret
    7a28:	01800844 	movi	r6,33
    7a2c:	01400104 	movi	r5,4
    7a30:	000a8b00 	call	a8b0 <_calloc_r>
    7a34:	88801315 	stw	r2,76(r17)
    7a38:	103fec1e 	bne	r2,zero,79ec <__alt_data_end+0xff0079ec>
    7a3c:	0005883a 	mov	r2,zero
    7a40:	003ff306 	br	7a10 <__alt_data_end+0xff007a10>
    7a44:	01400044 	movi	r5,1
    7a48:	2c24983a 	sll	r18,r5,r16
    7a4c:	8809883a 	mov	r4,r17
    7a50:	91800144 	addi	r6,r18,5
    7a54:	318d883a 	add	r6,r6,r6
    7a58:	318d883a 	add	r6,r6,r6
    7a5c:	000a8b00 	call	a8b0 <_calloc_r>
    7a60:	103ff626 	beq	r2,zero,7a3c <__alt_data_end+0xff007a3c>
    7a64:	14000115 	stw	r16,4(r2)
    7a68:	14800215 	stw	r18,8(r2)
    7a6c:	003fe606 	br	7a08 <__alt_data_end+0xff007a08>

00007a70 <_Bfree>:
    7a70:	28000826 	beq	r5,zero,7a94 <_Bfree+0x24>
    7a74:	28c00117 	ldw	r3,4(r5)
    7a78:	20801317 	ldw	r2,76(r4)
    7a7c:	18c7883a 	add	r3,r3,r3
    7a80:	18c7883a 	add	r3,r3,r3
    7a84:	10c5883a 	add	r2,r2,r3
    7a88:	10c00017 	ldw	r3,0(r2)
    7a8c:	28c00015 	stw	r3,0(r5)
    7a90:	11400015 	stw	r5,0(r2)
    7a94:	f800283a 	ret

00007a98 <__multadd>:
    7a98:	defffa04 	addi	sp,sp,-24
    7a9c:	dc800315 	stw	r18,12(sp)
    7aa0:	dc400215 	stw	r17,8(sp)
    7aa4:	dc000115 	stw	r16,4(sp)
    7aa8:	2823883a 	mov	r17,r5
    7aac:	2c000417 	ldw	r16,16(r5)
    7ab0:	dfc00515 	stw	ra,20(sp)
    7ab4:	dcc00415 	stw	r19,16(sp)
    7ab8:	2025883a 	mov	r18,r4
    7abc:	29400504 	addi	r5,r5,20
    7ac0:	0011883a 	mov	r8,zero
    7ac4:	28c00017 	ldw	r3,0(r5)
    7ac8:	29400104 	addi	r5,r5,4
    7acc:	42000044 	addi	r8,r8,1
    7ad0:	18bfffcc 	andi	r2,r3,65535
    7ad4:	1185383a 	mul	r2,r2,r6
    7ad8:	1806d43a 	srli	r3,r3,16
    7adc:	11cf883a 	add	r7,r2,r7
    7ae0:	3808d43a 	srli	r4,r7,16
    7ae4:	1987383a 	mul	r3,r3,r6
    7ae8:	38bfffcc 	andi	r2,r7,65535
    7aec:	1907883a 	add	r3,r3,r4
    7af0:	1808943a 	slli	r4,r3,16
    7af4:	180ed43a 	srli	r7,r3,16
    7af8:	2085883a 	add	r2,r4,r2
    7afc:	28bfff15 	stw	r2,-4(r5)
    7b00:	443ff016 	blt	r8,r16,7ac4 <__alt_data_end+0xff007ac4>
    7b04:	38000926 	beq	r7,zero,7b2c <__multadd+0x94>
    7b08:	88800217 	ldw	r2,8(r17)
    7b0c:	80800f0e 	bge	r16,r2,7b4c <__multadd+0xb4>
    7b10:	80800144 	addi	r2,r16,5
    7b14:	1085883a 	add	r2,r2,r2
    7b18:	1085883a 	add	r2,r2,r2
    7b1c:	8885883a 	add	r2,r17,r2
    7b20:	11c00015 	stw	r7,0(r2)
    7b24:	84000044 	addi	r16,r16,1
    7b28:	8c000415 	stw	r16,16(r17)
    7b2c:	8805883a 	mov	r2,r17
    7b30:	dfc00517 	ldw	ra,20(sp)
    7b34:	dcc00417 	ldw	r19,16(sp)
    7b38:	dc800317 	ldw	r18,12(sp)
    7b3c:	dc400217 	ldw	r17,8(sp)
    7b40:	dc000117 	ldw	r16,4(sp)
    7b44:	dec00604 	addi	sp,sp,24
    7b48:	f800283a 	ret
    7b4c:	89400117 	ldw	r5,4(r17)
    7b50:	9009883a 	mov	r4,r18
    7b54:	d9c00015 	stw	r7,0(sp)
    7b58:	29400044 	addi	r5,r5,1
    7b5c:	00079c80 	call	79c8 <_Balloc>
    7b60:	89800417 	ldw	r6,16(r17)
    7b64:	89400304 	addi	r5,r17,12
    7b68:	11000304 	addi	r4,r2,12
    7b6c:	31800084 	addi	r6,r6,2
    7b70:	318d883a 	add	r6,r6,r6
    7b74:	318d883a 	add	r6,r6,r6
    7b78:	1027883a 	mov	r19,r2
    7b7c:	00075fc0 	call	75fc <memcpy>
    7b80:	d9c00017 	ldw	r7,0(sp)
    7b84:	88000a26 	beq	r17,zero,7bb0 <__multadd+0x118>
    7b88:	88c00117 	ldw	r3,4(r17)
    7b8c:	90801317 	ldw	r2,76(r18)
    7b90:	18c7883a 	add	r3,r3,r3
    7b94:	18c7883a 	add	r3,r3,r3
    7b98:	10c5883a 	add	r2,r2,r3
    7b9c:	10c00017 	ldw	r3,0(r2)
    7ba0:	88c00015 	stw	r3,0(r17)
    7ba4:	14400015 	stw	r17,0(r2)
    7ba8:	9823883a 	mov	r17,r19
    7bac:	003fd806 	br	7b10 <__alt_data_end+0xff007b10>
    7bb0:	9823883a 	mov	r17,r19
    7bb4:	003fd606 	br	7b10 <__alt_data_end+0xff007b10>

00007bb8 <__s2b>:
    7bb8:	defff904 	addi	sp,sp,-28
    7bbc:	dc400115 	stw	r17,4(sp)
    7bc0:	dc000015 	stw	r16,0(sp)
    7bc4:	2023883a 	mov	r17,r4
    7bc8:	2821883a 	mov	r16,r5
    7bcc:	39000204 	addi	r4,r7,8
    7bd0:	01400244 	movi	r5,9
    7bd4:	dcc00315 	stw	r19,12(sp)
    7bd8:	dc800215 	stw	r18,8(sp)
    7bdc:	dfc00615 	stw	ra,24(sp)
    7be0:	dd400515 	stw	r21,20(sp)
    7be4:	dd000415 	stw	r20,16(sp)
    7be8:	3825883a 	mov	r18,r7
    7bec:	3027883a 	mov	r19,r6
    7bf0:	000bbe00 	call	bbe0 <__divsi3>
    7bf4:	00c00044 	movi	r3,1
    7bf8:	000b883a 	mov	r5,zero
    7bfc:	1880030e 	bge	r3,r2,7c0c <__s2b+0x54>
    7c00:	18c7883a 	add	r3,r3,r3
    7c04:	29400044 	addi	r5,r5,1
    7c08:	18bffd16 	blt	r3,r2,7c00 <__alt_data_end+0xff007c00>
    7c0c:	8809883a 	mov	r4,r17
    7c10:	00079c80 	call	79c8 <_Balloc>
    7c14:	d8c00717 	ldw	r3,28(sp)
    7c18:	10c00515 	stw	r3,20(r2)
    7c1c:	00c00044 	movi	r3,1
    7c20:	10c00415 	stw	r3,16(r2)
    7c24:	00c00244 	movi	r3,9
    7c28:	1cc0210e 	bge	r3,r19,7cb0 <__s2b+0xf8>
    7c2c:	80eb883a 	add	r21,r16,r3
    7c30:	a829883a 	mov	r20,r21
    7c34:	84e1883a 	add	r16,r16,r19
    7c38:	a1c00007 	ldb	r7,0(r20)
    7c3c:	01800284 	movi	r6,10
    7c40:	a5000044 	addi	r20,r20,1
    7c44:	100b883a 	mov	r5,r2
    7c48:	39fff404 	addi	r7,r7,-48
    7c4c:	8809883a 	mov	r4,r17
    7c50:	0007a980 	call	7a98 <__multadd>
    7c54:	a43ff81e 	bne	r20,r16,7c38 <__alt_data_end+0xff007c38>
    7c58:	ace1883a 	add	r16,r21,r19
    7c5c:	843ffe04 	addi	r16,r16,-8
    7c60:	9c800a0e 	bge	r19,r18,7c8c <__s2b+0xd4>
    7c64:	94e5c83a 	sub	r18,r18,r19
    7c68:	84a5883a 	add	r18,r16,r18
    7c6c:	81c00007 	ldb	r7,0(r16)
    7c70:	01800284 	movi	r6,10
    7c74:	84000044 	addi	r16,r16,1
    7c78:	100b883a 	mov	r5,r2
    7c7c:	39fff404 	addi	r7,r7,-48
    7c80:	8809883a 	mov	r4,r17
    7c84:	0007a980 	call	7a98 <__multadd>
    7c88:	84bff81e 	bne	r16,r18,7c6c <__alt_data_end+0xff007c6c>
    7c8c:	dfc00617 	ldw	ra,24(sp)
    7c90:	dd400517 	ldw	r21,20(sp)
    7c94:	dd000417 	ldw	r20,16(sp)
    7c98:	dcc00317 	ldw	r19,12(sp)
    7c9c:	dc800217 	ldw	r18,8(sp)
    7ca0:	dc400117 	ldw	r17,4(sp)
    7ca4:	dc000017 	ldw	r16,0(sp)
    7ca8:	dec00704 	addi	sp,sp,28
    7cac:	f800283a 	ret
    7cb0:	84000284 	addi	r16,r16,10
    7cb4:	1827883a 	mov	r19,r3
    7cb8:	003fe906 	br	7c60 <__alt_data_end+0xff007c60>

00007cbc <__hi0bits>:
    7cbc:	20bfffec 	andhi	r2,r4,65535
    7cc0:	1000141e 	bne	r2,zero,7d14 <__hi0bits+0x58>
    7cc4:	2008943a 	slli	r4,r4,16
    7cc8:	00800404 	movi	r2,16
    7ccc:	20ffc02c 	andhi	r3,r4,65280
    7cd0:	1800021e 	bne	r3,zero,7cdc <__hi0bits+0x20>
    7cd4:	2008923a 	slli	r4,r4,8
    7cd8:	10800204 	addi	r2,r2,8
    7cdc:	20fc002c 	andhi	r3,r4,61440
    7ce0:	1800021e 	bne	r3,zero,7cec <__hi0bits+0x30>
    7ce4:	2008913a 	slli	r4,r4,4
    7ce8:	10800104 	addi	r2,r2,4
    7cec:	20f0002c 	andhi	r3,r4,49152
    7cf0:	1800031e 	bne	r3,zero,7d00 <__hi0bits+0x44>
    7cf4:	2109883a 	add	r4,r4,r4
    7cf8:	10800084 	addi	r2,r2,2
    7cfc:	2109883a 	add	r4,r4,r4
    7d00:	20000316 	blt	r4,zero,7d10 <__hi0bits+0x54>
    7d04:	2110002c 	andhi	r4,r4,16384
    7d08:	2000041e 	bne	r4,zero,7d1c <__hi0bits+0x60>
    7d0c:	00800804 	movi	r2,32
    7d10:	f800283a 	ret
    7d14:	0005883a 	mov	r2,zero
    7d18:	003fec06 	br	7ccc <__alt_data_end+0xff007ccc>
    7d1c:	10800044 	addi	r2,r2,1
    7d20:	f800283a 	ret

00007d24 <__lo0bits>:
    7d24:	20c00017 	ldw	r3,0(r4)
    7d28:	188001cc 	andi	r2,r3,7
    7d2c:	10000826 	beq	r2,zero,7d50 <__lo0bits+0x2c>
    7d30:	1880004c 	andi	r2,r3,1
    7d34:	1000211e 	bne	r2,zero,7dbc <__lo0bits+0x98>
    7d38:	1880008c 	andi	r2,r3,2
    7d3c:	1000211e 	bne	r2,zero,7dc4 <__lo0bits+0xa0>
    7d40:	1806d0ba 	srli	r3,r3,2
    7d44:	00800084 	movi	r2,2
    7d48:	20c00015 	stw	r3,0(r4)
    7d4c:	f800283a 	ret
    7d50:	18bfffcc 	andi	r2,r3,65535
    7d54:	10001326 	beq	r2,zero,7da4 <__lo0bits+0x80>
    7d58:	0005883a 	mov	r2,zero
    7d5c:	19403fcc 	andi	r5,r3,255
    7d60:	2800021e 	bne	r5,zero,7d6c <__lo0bits+0x48>
    7d64:	1806d23a 	srli	r3,r3,8
    7d68:	10800204 	addi	r2,r2,8
    7d6c:	194003cc 	andi	r5,r3,15
    7d70:	2800021e 	bne	r5,zero,7d7c <__lo0bits+0x58>
    7d74:	1806d13a 	srli	r3,r3,4
    7d78:	10800104 	addi	r2,r2,4
    7d7c:	194000cc 	andi	r5,r3,3
    7d80:	2800021e 	bne	r5,zero,7d8c <__lo0bits+0x68>
    7d84:	1806d0ba 	srli	r3,r3,2
    7d88:	10800084 	addi	r2,r2,2
    7d8c:	1940004c 	andi	r5,r3,1
    7d90:	2800081e 	bne	r5,zero,7db4 <__lo0bits+0x90>
    7d94:	1806d07a 	srli	r3,r3,1
    7d98:	1800051e 	bne	r3,zero,7db0 <__lo0bits+0x8c>
    7d9c:	00800804 	movi	r2,32
    7da0:	f800283a 	ret
    7da4:	1806d43a 	srli	r3,r3,16
    7da8:	00800404 	movi	r2,16
    7dac:	003feb06 	br	7d5c <__alt_data_end+0xff007d5c>
    7db0:	10800044 	addi	r2,r2,1
    7db4:	20c00015 	stw	r3,0(r4)
    7db8:	f800283a 	ret
    7dbc:	0005883a 	mov	r2,zero
    7dc0:	f800283a 	ret
    7dc4:	1806d07a 	srli	r3,r3,1
    7dc8:	00800044 	movi	r2,1
    7dcc:	20c00015 	stw	r3,0(r4)
    7dd0:	f800283a 	ret

00007dd4 <__i2b>:
    7dd4:	defffd04 	addi	sp,sp,-12
    7dd8:	dc000015 	stw	r16,0(sp)
    7ddc:	04000044 	movi	r16,1
    7de0:	dc400115 	stw	r17,4(sp)
    7de4:	2823883a 	mov	r17,r5
    7de8:	800b883a 	mov	r5,r16
    7dec:	dfc00215 	stw	ra,8(sp)
    7df0:	00079c80 	call	79c8 <_Balloc>
    7df4:	14400515 	stw	r17,20(r2)
    7df8:	14000415 	stw	r16,16(r2)
    7dfc:	dfc00217 	ldw	ra,8(sp)
    7e00:	dc400117 	ldw	r17,4(sp)
    7e04:	dc000017 	ldw	r16,0(sp)
    7e08:	dec00304 	addi	sp,sp,12
    7e0c:	f800283a 	ret

00007e10 <__multiply>:
    7e10:	defffa04 	addi	sp,sp,-24
    7e14:	dcc00315 	stw	r19,12(sp)
    7e18:	dc800215 	stw	r18,8(sp)
    7e1c:	34c00417 	ldw	r19,16(r6)
    7e20:	2c800417 	ldw	r18,16(r5)
    7e24:	dd000415 	stw	r20,16(sp)
    7e28:	dc400115 	stw	r17,4(sp)
    7e2c:	dfc00515 	stw	ra,20(sp)
    7e30:	dc000015 	stw	r16,0(sp)
    7e34:	2829883a 	mov	r20,r5
    7e38:	3023883a 	mov	r17,r6
    7e3c:	94c0050e 	bge	r18,r19,7e54 <__multiply+0x44>
    7e40:	9007883a 	mov	r3,r18
    7e44:	3029883a 	mov	r20,r6
    7e48:	9825883a 	mov	r18,r19
    7e4c:	2823883a 	mov	r17,r5
    7e50:	1827883a 	mov	r19,r3
    7e54:	a0800217 	ldw	r2,8(r20)
    7e58:	94e1883a 	add	r16,r18,r19
    7e5c:	a1400117 	ldw	r5,4(r20)
    7e60:	1400010e 	bge	r2,r16,7e68 <__multiply+0x58>
    7e64:	29400044 	addi	r5,r5,1
    7e68:	00079c80 	call	79c8 <_Balloc>
    7e6c:	8415883a 	add	r10,r16,r16
    7e70:	12c00504 	addi	r11,r2,20
    7e74:	5295883a 	add	r10,r10,r10
    7e78:	5a95883a 	add	r10,r11,r10
    7e7c:	5807883a 	mov	r3,r11
    7e80:	5a80032e 	bgeu	r11,r10,7e90 <__multiply+0x80>
    7e84:	18000015 	stw	zero,0(r3)
    7e88:	18c00104 	addi	r3,r3,4
    7e8c:	1abffd36 	bltu	r3,r10,7e84 <__alt_data_end+0xff007e84>
    7e90:	9ce7883a 	add	r19,r19,r19
    7e94:	94a5883a 	add	r18,r18,r18
    7e98:	89800504 	addi	r6,r17,20
    7e9c:	9ce7883a 	add	r19,r19,r19
    7ea0:	a3400504 	addi	r13,r20,20
    7ea4:	94a5883a 	add	r18,r18,r18
    7ea8:	34d9883a 	add	r12,r6,r19
    7eac:	6c93883a 	add	r9,r13,r18
    7eb0:	3300422e 	bgeu	r6,r12,7fbc <__multiply+0x1ac>
    7eb4:	37c00017 	ldw	ra,0(r6)
    7eb8:	fbffffcc 	andi	r15,ra,65535
    7ebc:	78001b26 	beq	r15,zero,7f2c <__multiply+0x11c>
    7ec0:	5811883a 	mov	r8,r11
    7ec4:	681d883a 	mov	r14,r13
    7ec8:	000f883a 	mov	r7,zero
    7ecc:	71000017 	ldw	r4,0(r14)
    7ed0:	40c00017 	ldw	r3,0(r8)
    7ed4:	73800104 	addi	r14,r14,4
    7ed8:	217fffcc 	andi	r5,r4,65535
    7edc:	2bcb383a 	mul	r5,r5,r15
    7ee0:	2008d43a 	srli	r4,r4,16
    7ee4:	1c7fffcc 	andi	r17,r3,65535
    7ee8:	2c4b883a 	add	r5,r5,r17
    7eec:	29cb883a 	add	r5,r5,r7
    7ef0:	23c9383a 	mul	r4,r4,r15
    7ef4:	1806d43a 	srli	r3,r3,16
    7ef8:	280ed43a 	srli	r7,r5,16
    7efc:	297fffcc 	andi	r5,r5,65535
    7f00:	20c7883a 	add	r3,r4,r3
    7f04:	19c7883a 	add	r3,r3,r7
    7f08:	1808943a 	slli	r4,r3,16
    7f0c:	4023883a 	mov	r17,r8
    7f10:	180ed43a 	srli	r7,r3,16
    7f14:	214ab03a 	or	r5,r4,r5
    7f18:	41400015 	stw	r5,0(r8)
    7f1c:	42000104 	addi	r8,r8,4
    7f20:	727fea36 	bltu	r14,r9,7ecc <__alt_data_end+0xff007ecc>
    7f24:	89c00115 	stw	r7,4(r17)
    7f28:	37c00017 	ldw	ra,0(r6)
    7f2c:	f83ed43a 	srli	ra,ra,16
    7f30:	f8001f26 	beq	ra,zero,7fb0 <__multiply+0x1a0>
    7f34:	58c00017 	ldw	r3,0(r11)
    7f38:	681d883a 	mov	r14,r13
    7f3c:	581f883a 	mov	r15,r11
    7f40:	1811883a 	mov	r8,r3
    7f44:	5825883a 	mov	r18,r11
    7f48:	000f883a 	mov	r7,zero
    7f4c:	00000106 	br	7f54 <__multiply+0x144>
    7f50:	8825883a 	mov	r18,r17
    7f54:	7140000b 	ldhu	r5,0(r14)
    7f58:	4010d43a 	srli	r8,r8,16
    7f5c:	193fffcc 	andi	r4,r3,65535
    7f60:	2fcb383a 	mul	r5,r5,ra
    7f64:	7bc00104 	addi	r15,r15,4
    7f68:	73800104 	addi	r14,r14,4
    7f6c:	2a0b883a 	add	r5,r5,r8
    7f70:	29cb883a 	add	r5,r5,r7
    7f74:	2806943a 	slli	r3,r5,16
    7f78:	94400104 	addi	r17,r18,4
    7f7c:	280ad43a 	srli	r5,r5,16
    7f80:	1908b03a 	or	r4,r3,r4
    7f84:	793fff15 	stw	r4,-4(r15)
    7f88:	70ffff17 	ldw	r3,-4(r14)
    7f8c:	8a000017 	ldw	r8,0(r17)
    7f90:	1806d43a 	srli	r3,r3,16
    7f94:	413fffcc 	andi	r4,r8,65535
    7f98:	1fc7383a 	mul	r3,r3,ra
    7f9c:	1907883a 	add	r3,r3,r4
    7fa0:	1947883a 	add	r3,r3,r5
    7fa4:	180ed43a 	srli	r7,r3,16
    7fa8:	727fe936 	bltu	r14,r9,7f50 <__alt_data_end+0xff007f50>
    7fac:	90c00115 	stw	r3,4(r18)
    7fb0:	31800104 	addi	r6,r6,4
    7fb4:	5ac00104 	addi	r11,r11,4
    7fb8:	333fbe36 	bltu	r6,r12,7eb4 <__alt_data_end+0xff007eb4>
    7fbc:	0400090e 	bge	zero,r16,7fe4 <__multiply+0x1d4>
    7fc0:	50ffff17 	ldw	r3,-4(r10)
    7fc4:	52bfff04 	addi	r10,r10,-4
    7fc8:	18000326 	beq	r3,zero,7fd8 <__multiply+0x1c8>
    7fcc:	00000506 	br	7fe4 <__multiply+0x1d4>
    7fd0:	50c00017 	ldw	r3,0(r10)
    7fd4:	1800031e 	bne	r3,zero,7fe4 <__multiply+0x1d4>
    7fd8:	843fffc4 	addi	r16,r16,-1
    7fdc:	52bfff04 	addi	r10,r10,-4
    7fe0:	803ffb1e 	bne	r16,zero,7fd0 <__alt_data_end+0xff007fd0>
    7fe4:	14000415 	stw	r16,16(r2)
    7fe8:	dfc00517 	ldw	ra,20(sp)
    7fec:	dd000417 	ldw	r20,16(sp)
    7ff0:	dcc00317 	ldw	r19,12(sp)
    7ff4:	dc800217 	ldw	r18,8(sp)
    7ff8:	dc400117 	ldw	r17,4(sp)
    7ffc:	dc000017 	ldw	r16,0(sp)
    8000:	dec00604 	addi	sp,sp,24
    8004:	f800283a 	ret

00008008 <__pow5mult>:
    8008:	defffa04 	addi	sp,sp,-24
    800c:	dcc00315 	stw	r19,12(sp)
    8010:	dc000015 	stw	r16,0(sp)
    8014:	dfc00515 	stw	ra,20(sp)
    8018:	dd000415 	stw	r20,16(sp)
    801c:	dc800215 	stw	r18,8(sp)
    8020:	dc400115 	stw	r17,4(sp)
    8024:	308000cc 	andi	r2,r6,3
    8028:	3021883a 	mov	r16,r6
    802c:	2027883a 	mov	r19,r4
    8030:	10002f1e 	bne	r2,zero,80f0 <__pow5mult+0xe8>
    8034:	2825883a 	mov	r18,r5
    8038:	8021d0ba 	srai	r16,r16,2
    803c:	80001a26 	beq	r16,zero,80a8 <__pow5mult+0xa0>
    8040:	9c401217 	ldw	r17,72(r19)
    8044:	8800061e 	bne	r17,zero,8060 <__pow5mult+0x58>
    8048:	00003406 	br	811c <__pow5mult+0x114>
    804c:	8021d07a 	srai	r16,r16,1
    8050:	80001526 	beq	r16,zero,80a8 <__pow5mult+0xa0>
    8054:	88800017 	ldw	r2,0(r17)
    8058:	10001c26 	beq	r2,zero,80cc <__pow5mult+0xc4>
    805c:	1023883a 	mov	r17,r2
    8060:	8080004c 	andi	r2,r16,1
    8064:	103ff926 	beq	r2,zero,804c <__alt_data_end+0xff00804c>
    8068:	880d883a 	mov	r6,r17
    806c:	900b883a 	mov	r5,r18
    8070:	9809883a 	mov	r4,r19
    8074:	0007e100 	call	7e10 <__multiply>
    8078:	90001b26 	beq	r18,zero,80e8 <__pow5mult+0xe0>
    807c:	91000117 	ldw	r4,4(r18)
    8080:	98c01317 	ldw	r3,76(r19)
    8084:	8021d07a 	srai	r16,r16,1
    8088:	2109883a 	add	r4,r4,r4
    808c:	2109883a 	add	r4,r4,r4
    8090:	1907883a 	add	r3,r3,r4
    8094:	19000017 	ldw	r4,0(r3)
    8098:	91000015 	stw	r4,0(r18)
    809c:	1c800015 	stw	r18,0(r3)
    80a0:	1025883a 	mov	r18,r2
    80a4:	803feb1e 	bne	r16,zero,8054 <__alt_data_end+0xff008054>
    80a8:	9005883a 	mov	r2,r18
    80ac:	dfc00517 	ldw	ra,20(sp)
    80b0:	dd000417 	ldw	r20,16(sp)
    80b4:	dcc00317 	ldw	r19,12(sp)
    80b8:	dc800217 	ldw	r18,8(sp)
    80bc:	dc400117 	ldw	r17,4(sp)
    80c0:	dc000017 	ldw	r16,0(sp)
    80c4:	dec00604 	addi	sp,sp,24
    80c8:	f800283a 	ret
    80cc:	880d883a 	mov	r6,r17
    80d0:	880b883a 	mov	r5,r17
    80d4:	9809883a 	mov	r4,r19
    80d8:	0007e100 	call	7e10 <__multiply>
    80dc:	88800015 	stw	r2,0(r17)
    80e0:	10000015 	stw	zero,0(r2)
    80e4:	003fdd06 	br	805c <__alt_data_end+0xff00805c>
    80e8:	1025883a 	mov	r18,r2
    80ec:	003fd706 	br	804c <__alt_data_end+0xff00804c>
    80f0:	10bfffc4 	addi	r2,r2,-1
    80f4:	1085883a 	add	r2,r2,r2
    80f8:	00c00074 	movhi	r3,1
    80fc:	18c4e204 	addi	r3,r3,5000
    8100:	1085883a 	add	r2,r2,r2
    8104:	1885883a 	add	r2,r3,r2
    8108:	11800017 	ldw	r6,0(r2)
    810c:	000f883a 	mov	r7,zero
    8110:	0007a980 	call	7a98 <__multadd>
    8114:	1025883a 	mov	r18,r2
    8118:	003fc706 	br	8038 <__alt_data_end+0xff008038>
    811c:	05000044 	movi	r20,1
    8120:	a00b883a 	mov	r5,r20
    8124:	9809883a 	mov	r4,r19
    8128:	00079c80 	call	79c8 <_Balloc>
    812c:	1023883a 	mov	r17,r2
    8130:	00809c44 	movi	r2,625
    8134:	88800515 	stw	r2,20(r17)
    8138:	8d000415 	stw	r20,16(r17)
    813c:	9c401215 	stw	r17,72(r19)
    8140:	88000015 	stw	zero,0(r17)
    8144:	003fc606 	br	8060 <__alt_data_end+0xff008060>

00008148 <__lshift>:
    8148:	defff904 	addi	sp,sp,-28
    814c:	dd400515 	stw	r21,20(sp)
    8150:	dcc00315 	stw	r19,12(sp)
    8154:	302bd17a 	srai	r21,r6,5
    8158:	2cc00417 	ldw	r19,16(r5)
    815c:	28800217 	ldw	r2,8(r5)
    8160:	dd000415 	stw	r20,16(sp)
    8164:	ace7883a 	add	r19,r21,r19
    8168:	dc800215 	stw	r18,8(sp)
    816c:	dc400115 	stw	r17,4(sp)
    8170:	dc000015 	stw	r16,0(sp)
    8174:	dfc00615 	stw	ra,24(sp)
    8178:	9c000044 	addi	r16,r19,1
    817c:	2823883a 	mov	r17,r5
    8180:	3029883a 	mov	r20,r6
    8184:	2025883a 	mov	r18,r4
    8188:	29400117 	ldw	r5,4(r5)
    818c:	1400030e 	bge	r2,r16,819c <__lshift+0x54>
    8190:	1085883a 	add	r2,r2,r2
    8194:	29400044 	addi	r5,r5,1
    8198:	143ffd16 	blt	r2,r16,8190 <__alt_data_end+0xff008190>
    819c:	9009883a 	mov	r4,r18
    81a0:	00079c80 	call	79c8 <_Balloc>
    81a4:	10c00504 	addi	r3,r2,20
    81a8:	0540070e 	bge	zero,r21,81c8 <__lshift+0x80>
    81ac:	ad6b883a 	add	r21,r21,r21
    81b0:	ad6b883a 	add	r21,r21,r21
    81b4:	1809883a 	mov	r4,r3
    81b8:	1d47883a 	add	r3,r3,r21
    81bc:	20000015 	stw	zero,0(r4)
    81c0:	21000104 	addi	r4,r4,4
    81c4:	193ffd1e 	bne	r3,r4,81bc <__alt_data_end+0xff0081bc>
    81c8:	8a000417 	ldw	r8,16(r17)
    81cc:	89000504 	addi	r4,r17,20
    81d0:	a18007cc 	andi	r6,r20,31
    81d4:	4211883a 	add	r8,r8,r8
    81d8:	4211883a 	add	r8,r8,r8
    81dc:	2211883a 	add	r8,r4,r8
    81e0:	30002326 	beq	r6,zero,8270 <__lshift+0x128>
    81e4:	02400804 	movi	r9,32
    81e8:	4993c83a 	sub	r9,r9,r6
    81ec:	000b883a 	mov	r5,zero
    81f0:	21c00017 	ldw	r7,0(r4)
    81f4:	1815883a 	mov	r10,r3
    81f8:	18c00104 	addi	r3,r3,4
    81fc:	398e983a 	sll	r7,r7,r6
    8200:	21000104 	addi	r4,r4,4
    8204:	394ab03a 	or	r5,r7,r5
    8208:	197fff15 	stw	r5,-4(r3)
    820c:	217fff17 	ldw	r5,-4(r4)
    8210:	2a4ad83a 	srl	r5,r5,r9
    8214:	223ff636 	bltu	r4,r8,81f0 <__alt_data_end+0xff0081f0>
    8218:	51400115 	stw	r5,4(r10)
    821c:	28001a1e 	bne	r5,zero,8288 <__lshift+0x140>
    8220:	843fffc4 	addi	r16,r16,-1
    8224:	14000415 	stw	r16,16(r2)
    8228:	88000826 	beq	r17,zero,824c <__lshift+0x104>
    822c:	89000117 	ldw	r4,4(r17)
    8230:	90c01317 	ldw	r3,76(r18)
    8234:	2109883a 	add	r4,r4,r4
    8238:	2109883a 	add	r4,r4,r4
    823c:	1907883a 	add	r3,r3,r4
    8240:	19000017 	ldw	r4,0(r3)
    8244:	89000015 	stw	r4,0(r17)
    8248:	1c400015 	stw	r17,0(r3)
    824c:	dfc00617 	ldw	ra,24(sp)
    8250:	dd400517 	ldw	r21,20(sp)
    8254:	dd000417 	ldw	r20,16(sp)
    8258:	dcc00317 	ldw	r19,12(sp)
    825c:	dc800217 	ldw	r18,8(sp)
    8260:	dc400117 	ldw	r17,4(sp)
    8264:	dc000017 	ldw	r16,0(sp)
    8268:	dec00704 	addi	sp,sp,28
    826c:	f800283a 	ret
    8270:	21400017 	ldw	r5,0(r4)
    8274:	18c00104 	addi	r3,r3,4
    8278:	21000104 	addi	r4,r4,4
    827c:	197fff15 	stw	r5,-4(r3)
    8280:	223ffb36 	bltu	r4,r8,8270 <__alt_data_end+0xff008270>
    8284:	003fe606 	br	8220 <__alt_data_end+0xff008220>
    8288:	9c000084 	addi	r16,r19,2
    828c:	003fe406 	br	8220 <__alt_data_end+0xff008220>

00008290 <__mcmp>:
    8290:	20800417 	ldw	r2,16(r4)
    8294:	28c00417 	ldw	r3,16(r5)
    8298:	10c5c83a 	sub	r2,r2,r3
    829c:	1000111e 	bne	r2,zero,82e4 <__mcmp+0x54>
    82a0:	18c7883a 	add	r3,r3,r3
    82a4:	18c7883a 	add	r3,r3,r3
    82a8:	21000504 	addi	r4,r4,20
    82ac:	29400504 	addi	r5,r5,20
    82b0:	20c5883a 	add	r2,r4,r3
    82b4:	28cb883a 	add	r5,r5,r3
    82b8:	00000106 	br	82c0 <__mcmp+0x30>
    82bc:	20800a2e 	bgeu	r4,r2,82e8 <__mcmp+0x58>
    82c0:	10bfff04 	addi	r2,r2,-4
    82c4:	297fff04 	addi	r5,r5,-4
    82c8:	11800017 	ldw	r6,0(r2)
    82cc:	28c00017 	ldw	r3,0(r5)
    82d0:	30fffa26 	beq	r6,r3,82bc <__alt_data_end+0xff0082bc>
    82d4:	30c00236 	bltu	r6,r3,82e0 <__mcmp+0x50>
    82d8:	00800044 	movi	r2,1
    82dc:	f800283a 	ret
    82e0:	00bfffc4 	movi	r2,-1
    82e4:	f800283a 	ret
    82e8:	0005883a 	mov	r2,zero
    82ec:	f800283a 	ret

000082f0 <__mdiff>:
    82f0:	28c00417 	ldw	r3,16(r5)
    82f4:	30800417 	ldw	r2,16(r6)
    82f8:	defffa04 	addi	sp,sp,-24
    82fc:	dcc00315 	stw	r19,12(sp)
    8300:	dc800215 	stw	r18,8(sp)
    8304:	dfc00515 	stw	ra,20(sp)
    8308:	dd000415 	stw	r20,16(sp)
    830c:	dc400115 	stw	r17,4(sp)
    8310:	dc000015 	stw	r16,0(sp)
    8314:	1887c83a 	sub	r3,r3,r2
    8318:	2825883a 	mov	r18,r5
    831c:	3027883a 	mov	r19,r6
    8320:	1800141e 	bne	r3,zero,8374 <__mdiff+0x84>
    8324:	1085883a 	add	r2,r2,r2
    8328:	1085883a 	add	r2,r2,r2
    832c:	2a000504 	addi	r8,r5,20
    8330:	34000504 	addi	r16,r6,20
    8334:	4087883a 	add	r3,r8,r2
    8338:	8085883a 	add	r2,r16,r2
    833c:	00000106 	br	8344 <__mdiff+0x54>
    8340:	40c0592e 	bgeu	r8,r3,84a8 <__mdiff+0x1b8>
    8344:	18ffff04 	addi	r3,r3,-4
    8348:	10bfff04 	addi	r2,r2,-4
    834c:	19c00017 	ldw	r7,0(r3)
    8350:	11400017 	ldw	r5,0(r2)
    8354:	397ffa26 	beq	r7,r5,8340 <__alt_data_end+0xff008340>
    8358:	3940592e 	bgeu	r7,r5,84c0 <__mdiff+0x1d0>
    835c:	9005883a 	mov	r2,r18
    8360:	4023883a 	mov	r17,r8
    8364:	9825883a 	mov	r18,r19
    8368:	05000044 	movi	r20,1
    836c:	1027883a 	mov	r19,r2
    8370:	00000406 	br	8384 <__mdiff+0x94>
    8374:	18005616 	blt	r3,zero,84d0 <__mdiff+0x1e0>
    8378:	34400504 	addi	r17,r6,20
    837c:	2c000504 	addi	r16,r5,20
    8380:	0029883a 	mov	r20,zero
    8384:	91400117 	ldw	r5,4(r18)
    8388:	00079c80 	call	79c8 <_Balloc>
    838c:	92400417 	ldw	r9,16(r18)
    8390:	9b000417 	ldw	r12,16(r19)
    8394:	12c00504 	addi	r11,r2,20
    8398:	4a51883a 	add	r8,r9,r9
    839c:	6319883a 	add	r12,r12,r12
    83a0:	4211883a 	add	r8,r8,r8
    83a4:	6319883a 	add	r12,r12,r12
    83a8:	15000315 	stw	r20,12(r2)
    83ac:	8211883a 	add	r8,r16,r8
    83b0:	8b19883a 	add	r12,r17,r12
    83b4:	0007883a 	mov	r3,zero
    83b8:	81400017 	ldw	r5,0(r16)
    83bc:	89c00017 	ldw	r7,0(r17)
    83c0:	59800104 	addi	r6,r11,4
    83c4:	293fffcc 	andi	r4,r5,65535
    83c8:	20c7883a 	add	r3,r4,r3
    83cc:	393fffcc 	andi	r4,r7,65535
    83d0:	1909c83a 	sub	r4,r3,r4
    83d4:	280ad43a 	srli	r5,r5,16
    83d8:	380ed43a 	srli	r7,r7,16
    83dc:	2007d43a 	srai	r3,r4,16
    83e0:	213fffcc 	andi	r4,r4,65535
    83e4:	29cbc83a 	sub	r5,r5,r7
    83e8:	28c7883a 	add	r3,r5,r3
    83ec:	180a943a 	slli	r5,r3,16
    83f0:	8c400104 	addi	r17,r17,4
    83f4:	84000104 	addi	r16,r16,4
    83f8:	2908b03a 	or	r4,r5,r4
    83fc:	59000015 	stw	r4,0(r11)
    8400:	1807d43a 	srai	r3,r3,16
    8404:	3015883a 	mov	r10,r6
    8408:	3017883a 	mov	r11,r6
    840c:	8b3fea36 	bltu	r17,r12,83b8 <__alt_data_end+0xff0083b8>
    8410:	8200162e 	bgeu	r16,r8,846c <__mdiff+0x17c>
    8414:	8017883a 	mov	r11,r16
    8418:	59400017 	ldw	r5,0(r11)
    841c:	31800104 	addi	r6,r6,4
    8420:	5ac00104 	addi	r11,r11,4
    8424:	293fffcc 	andi	r4,r5,65535
    8428:	20c7883a 	add	r3,r4,r3
    842c:	280ed43a 	srli	r7,r5,16
    8430:	180bd43a 	srai	r5,r3,16
    8434:	193fffcc 	andi	r4,r3,65535
    8438:	3947883a 	add	r3,r7,r5
    843c:	180a943a 	slli	r5,r3,16
    8440:	1807d43a 	srai	r3,r3,16
    8444:	2908b03a 	or	r4,r5,r4
    8448:	313fff15 	stw	r4,-4(r6)
    844c:	5a3ff236 	bltu	r11,r8,8418 <__alt_data_end+0xff008418>
    8450:	0406303a 	nor	r3,zero,r16
    8454:	1a07883a 	add	r3,r3,r8
    8458:	1806d0ba 	srli	r3,r3,2
    845c:	18c00044 	addi	r3,r3,1
    8460:	18c7883a 	add	r3,r3,r3
    8464:	18c7883a 	add	r3,r3,r3
    8468:	50d5883a 	add	r10,r10,r3
    846c:	50ffff04 	addi	r3,r10,-4
    8470:	2000041e 	bne	r4,zero,8484 <__mdiff+0x194>
    8474:	18ffff04 	addi	r3,r3,-4
    8478:	19000017 	ldw	r4,0(r3)
    847c:	4a7fffc4 	addi	r9,r9,-1
    8480:	203ffc26 	beq	r4,zero,8474 <__alt_data_end+0xff008474>
    8484:	12400415 	stw	r9,16(r2)
    8488:	dfc00517 	ldw	ra,20(sp)
    848c:	dd000417 	ldw	r20,16(sp)
    8490:	dcc00317 	ldw	r19,12(sp)
    8494:	dc800217 	ldw	r18,8(sp)
    8498:	dc400117 	ldw	r17,4(sp)
    849c:	dc000017 	ldw	r16,0(sp)
    84a0:	dec00604 	addi	sp,sp,24
    84a4:	f800283a 	ret
    84a8:	000b883a 	mov	r5,zero
    84ac:	00079c80 	call	79c8 <_Balloc>
    84b0:	00c00044 	movi	r3,1
    84b4:	10c00415 	stw	r3,16(r2)
    84b8:	10000515 	stw	zero,20(r2)
    84bc:	003ff206 	br	8488 <__alt_data_end+0xff008488>
    84c0:	8023883a 	mov	r17,r16
    84c4:	0029883a 	mov	r20,zero
    84c8:	4021883a 	mov	r16,r8
    84cc:	003fad06 	br	8384 <__alt_data_end+0xff008384>
    84d0:	9005883a 	mov	r2,r18
    84d4:	94400504 	addi	r17,r18,20
    84d8:	9c000504 	addi	r16,r19,20
    84dc:	9825883a 	mov	r18,r19
    84e0:	05000044 	movi	r20,1
    84e4:	1027883a 	mov	r19,r2
    84e8:	003fa606 	br	8384 <__alt_data_end+0xff008384>

000084ec <__ulp>:
    84ec:	295ffc2c 	andhi	r5,r5,32752
    84f0:	00bf3034 	movhi	r2,64704
    84f4:	2887883a 	add	r3,r5,r2
    84f8:	00c0020e 	bge	zero,r3,8504 <__ulp+0x18>
    84fc:	0005883a 	mov	r2,zero
    8500:	f800283a 	ret
    8504:	00c7c83a 	sub	r3,zero,r3
    8508:	1807d53a 	srai	r3,r3,20
    850c:	008004c4 	movi	r2,19
    8510:	10c00b0e 	bge	r2,r3,8540 <__ulp+0x54>
    8514:	18bffb04 	addi	r2,r3,-20
    8518:	01000784 	movi	r4,30
    851c:	0007883a 	mov	r3,zero
    8520:	20800516 	blt	r4,r2,8538 <__ulp+0x4c>
    8524:	010007c4 	movi	r4,31
    8528:	2089c83a 	sub	r4,r4,r2
    852c:	00800044 	movi	r2,1
    8530:	1104983a 	sll	r2,r2,r4
    8534:	f800283a 	ret
    8538:	00800044 	movi	r2,1
    853c:	f800283a 	ret
    8540:	01400234 	movhi	r5,8
    8544:	28c7d83a 	sra	r3,r5,r3
    8548:	0005883a 	mov	r2,zero
    854c:	f800283a 	ret

00008550 <__b2d>:
    8550:	defffa04 	addi	sp,sp,-24
    8554:	dc000015 	stw	r16,0(sp)
    8558:	24000417 	ldw	r16,16(r4)
    855c:	dc400115 	stw	r17,4(sp)
    8560:	24400504 	addi	r17,r4,20
    8564:	8421883a 	add	r16,r16,r16
    8568:	8421883a 	add	r16,r16,r16
    856c:	8c21883a 	add	r16,r17,r16
    8570:	dc800215 	stw	r18,8(sp)
    8574:	84bfff17 	ldw	r18,-4(r16)
    8578:	dd000415 	stw	r20,16(sp)
    857c:	dcc00315 	stw	r19,12(sp)
    8580:	9009883a 	mov	r4,r18
    8584:	2829883a 	mov	r20,r5
    8588:	dfc00515 	stw	ra,20(sp)
    858c:	0007cbc0 	call	7cbc <__hi0bits>
    8590:	00c00804 	movi	r3,32
    8594:	1889c83a 	sub	r4,r3,r2
    8598:	a1000015 	stw	r4,0(r20)
    859c:	01000284 	movi	r4,10
    85a0:	84ffff04 	addi	r19,r16,-4
    85a4:	20801216 	blt	r4,r2,85f0 <__b2d+0xa0>
    85a8:	018002c4 	movi	r6,11
    85ac:	308dc83a 	sub	r6,r6,r2
    85b0:	9186d83a 	srl	r3,r18,r6
    85b4:	18cffc34 	orhi	r3,r3,16368
    85b8:	8cc0212e 	bgeu	r17,r19,8640 <__b2d+0xf0>
    85bc:	813ffe17 	ldw	r4,-8(r16)
    85c0:	218cd83a 	srl	r6,r4,r6
    85c4:	10800544 	addi	r2,r2,21
    85c8:	9084983a 	sll	r2,r18,r2
    85cc:	1184b03a 	or	r2,r2,r6
    85d0:	dfc00517 	ldw	ra,20(sp)
    85d4:	dd000417 	ldw	r20,16(sp)
    85d8:	dcc00317 	ldw	r19,12(sp)
    85dc:	dc800217 	ldw	r18,8(sp)
    85e0:	dc400117 	ldw	r17,4(sp)
    85e4:	dc000017 	ldw	r16,0(sp)
    85e8:	dec00604 	addi	sp,sp,24
    85ec:	f800283a 	ret
    85f0:	8cc00f2e 	bgeu	r17,r19,8630 <__b2d+0xe0>
    85f4:	117ffd44 	addi	r5,r2,-11
    85f8:	80bffe17 	ldw	r2,-8(r16)
    85fc:	28000e26 	beq	r5,zero,8638 <__b2d+0xe8>
    8600:	1949c83a 	sub	r4,r3,r5
    8604:	9164983a 	sll	r18,r18,r5
    8608:	1106d83a 	srl	r3,r2,r4
    860c:	81bffe04 	addi	r6,r16,-8
    8610:	948ffc34 	orhi	r18,r18,16368
    8614:	90c6b03a 	or	r3,r18,r3
    8618:	89800e2e 	bgeu	r17,r6,8654 <__b2d+0x104>
    861c:	81bffd17 	ldw	r6,-12(r16)
    8620:	1144983a 	sll	r2,r2,r5
    8624:	310ad83a 	srl	r5,r6,r4
    8628:	2884b03a 	or	r2,r5,r2
    862c:	003fe806 	br	85d0 <__alt_data_end+0xff0085d0>
    8630:	10bffd44 	addi	r2,r2,-11
    8634:	1000041e 	bne	r2,zero,8648 <__b2d+0xf8>
    8638:	90cffc34 	orhi	r3,r18,16368
    863c:	003fe406 	br	85d0 <__alt_data_end+0xff0085d0>
    8640:	000d883a 	mov	r6,zero
    8644:	003fdf06 	br	85c4 <__alt_data_end+0xff0085c4>
    8648:	90a4983a 	sll	r18,r18,r2
    864c:	0005883a 	mov	r2,zero
    8650:	003ff906 	br	8638 <__alt_data_end+0xff008638>
    8654:	1144983a 	sll	r2,r2,r5
    8658:	003fdd06 	br	85d0 <__alt_data_end+0xff0085d0>

0000865c <__d2b>:
    865c:	defff804 	addi	sp,sp,-32
    8660:	dc000215 	stw	r16,8(sp)
    8664:	3021883a 	mov	r16,r6
    8668:	dc400315 	stw	r17,12(sp)
    866c:	8022907a 	slli	r17,r16,1
    8670:	dd000615 	stw	r20,24(sp)
    8674:	2829883a 	mov	r20,r5
    8678:	01400044 	movi	r5,1
    867c:	dcc00515 	stw	r19,20(sp)
    8680:	dc800415 	stw	r18,16(sp)
    8684:	dfc00715 	stw	ra,28(sp)
    8688:	3825883a 	mov	r18,r7
    868c:	8822d57a 	srli	r17,r17,21
    8690:	00079c80 	call	79c8 <_Balloc>
    8694:	1027883a 	mov	r19,r2
    8698:	00800434 	movhi	r2,16
    869c:	10bfffc4 	addi	r2,r2,-1
    86a0:	808c703a 	and	r6,r16,r2
    86a4:	88000126 	beq	r17,zero,86ac <__d2b+0x50>
    86a8:	31800434 	orhi	r6,r6,16
    86ac:	d9800015 	stw	r6,0(sp)
    86b0:	a0002426 	beq	r20,zero,8744 <__d2b+0xe8>
    86b4:	d9000104 	addi	r4,sp,4
    86b8:	dd000115 	stw	r20,4(sp)
    86bc:	0007d240 	call	7d24 <__lo0bits>
    86c0:	d8c00017 	ldw	r3,0(sp)
    86c4:	10002f1e 	bne	r2,zero,8784 <__d2b+0x128>
    86c8:	d9000117 	ldw	r4,4(sp)
    86cc:	99000515 	stw	r4,20(r19)
    86d0:	1821003a 	cmpeq	r16,r3,zero
    86d4:	01000084 	movi	r4,2
    86d8:	2421c83a 	sub	r16,r4,r16
    86dc:	98c00615 	stw	r3,24(r19)
    86e0:	9c000415 	stw	r16,16(r19)
    86e4:	88001f1e 	bne	r17,zero,8764 <__d2b+0x108>
    86e8:	10bef384 	addi	r2,r2,-1074
    86ec:	90800015 	stw	r2,0(r18)
    86f0:	00900034 	movhi	r2,16384
    86f4:	10bfffc4 	addi	r2,r2,-1
    86f8:	8085883a 	add	r2,r16,r2
    86fc:	1085883a 	add	r2,r2,r2
    8700:	1085883a 	add	r2,r2,r2
    8704:	9885883a 	add	r2,r19,r2
    8708:	11000517 	ldw	r4,20(r2)
    870c:	8020917a 	slli	r16,r16,5
    8710:	0007cbc0 	call	7cbc <__hi0bits>
    8714:	d8c00817 	ldw	r3,32(sp)
    8718:	8085c83a 	sub	r2,r16,r2
    871c:	18800015 	stw	r2,0(r3)
    8720:	9805883a 	mov	r2,r19
    8724:	dfc00717 	ldw	ra,28(sp)
    8728:	dd000617 	ldw	r20,24(sp)
    872c:	dcc00517 	ldw	r19,20(sp)
    8730:	dc800417 	ldw	r18,16(sp)
    8734:	dc400317 	ldw	r17,12(sp)
    8738:	dc000217 	ldw	r16,8(sp)
    873c:	dec00804 	addi	sp,sp,32
    8740:	f800283a 	ret
    8744:	d809883a 	mov	r4,sp
    8748:	0007d240 	call	7d24 <__lo0bits>
    874c:	d8c00017 	ldw	r3,0(sp)
    8750:	04000044 	movi	r16,1
    8754:	9c000415 	stw	r16,16(r19)
    8758:	98c00515 	stw	r3,20(r19)
    875c:	10800804 	addi	r2,r2,32
    8760:	883fe126 	beq	r17,zero,86e8 <__alt_data_end+0xff0086e8>
    8764:	00c00d44 	movi	r3,53
    8768:	8c7ef344 	addi	r17,r17,-1075
    876c:	88a3883a 	add	r17,r17,r2
    8770:	1885c83a 	sub	r2,r3,r2
    8774:	d8c00817 	ldw	r3,32(sp)
    8778:	94400015 	stw	r17,0(r18)
    877c:	18800015 	stw	r2,0(r3)
    8780:	003fe706 	br	8720 <__alt_data_end+0xff008720>
    8784:	01000804 	movi	r4,32
    8788:	2089c83a 	sub	r4,r4,r2
    878c:	1908983a 	sll	r4,r3,r4
    8790:	d9400117 	ldw	r5,4(sp)
    8794:	1886d83a 	srl	r3,r3,r2
    8798:	2148b03a 	or	r4,r4,r5
    879c:	99000515 	stw	r4,20(r19)
    87a0:	d8c00015 	stw	r3,0(sp)
    87a4:	003fca06 	br	86d0 <__alt_data_end+0xff0086d0>

000087a8 <__ratio>:
    87a8:	defff904 	addi	sp,sp,-28
    87ac:	dc400315 	stw	r17,12(sp)
    87b0:	2823883a 	mov	r17,r5
    87b4:	d9400104 	addi	r5,sp,4
    87b8:	dfc00615 	stw	ra,24(sp)
    87bc:	dcc00515 	stw	r19,20(sp)
    87c0:	dc800415 	stw	r18,16(sp)
    87c4:	2027883a 	mov	r19,r4
    87c8:	dc000215 	stw	r16,8(sp)
    87cc:	00085500 	call	8550 <__b2d>
    87d0:	d80b883a 	mov	r5,sp
    87d4:	8809883a 	mov	r4,r17
    87d8:	1025883a 	mov	r18,r2
    87dc:	1821883a 	mov	r16,r3
    87e0:	00085500 	call	8550 <__b2d>
    87e4:	8a000417 	ldw	r8,16(r17)
    87e8:	99000417 	ldw	r4,16(r19)
    87ec:	d9400117 	ldw	r5,4(sp)
    87f0:	2209c83a 	sub	r4,r4,r8
    87f4:	2010917a 	slli	r8,r4,5
    87f8:	d9000017 	ldw	r4,0(sp)
    87fc:	2909c83a 	sub	r4,r5,r4
    8800:	4109883a 	add	r4,r8,r4
    8804:	01000e0e 	bge	zero,r4,8840 <__ratio+0x98>
    8808:	2008953a 	slli	r4,r4,20
    880c:	2421883a 	add	r16,r4,r16
    8810:	100d883a 	mov	r6,r2
    8814:	180f883a 	mov	r7,r3
    8818:	9009883a 	mov	r4,r18
    881c:	800b883a 	mov	r5,r16
    8820:	000c6400 	call	c640 <__divdf3>
    8824:	dfc00617 	ldw	ra,24(sp)
    8828:	dcc00517 	ldw	r19,20(sp)
    882c:	dc800417 	ldw	r18,16(sp)
    8830:	dc400317 	ldw	r17,12(sp)
    8834:	dc000217 	ldw	r16,8(sp)
    8838:	dec00704 	addi	sp,sp,28
    883c:	f800283a 	ret
    8840:	2008953a 	slli	r4,r4,20
    8844:	1907c83a 	sub	r3,r3,r4
    8848:	003ff106 	br	8810 <__alt_data_end+0xff008810>

0000884c <_mprec_log10>:
    884c:	defffe04 	addi	sp,sp,-8
    8850:	dc000015 	stw	r16,0(sp)
    8854:	dfc00115 	stw	ra,4(sp)
    8858:	008005c4 	movi	r2,23
    885c:	2021883a 	mov	r16,r4
    8860:	11000d0e 	bge	r2,r4,8898 <_mprec_log10+0x4c>
    8864:	0005883a 	mov	r2,zero
    8868:	00cffc34 	movhi	r3,16368
    886c:	843fffc4 	addi	r16,r16,-1
    8870:	000d883a 	mov	r6,zero
    8874:	01d00934 	movhi	r7,16420
    8878:	1009883a 	mov	r4,r2
    887c:	180b883a 	mov	r5,r3
    8880:	000d1800 	call	d180 <__muldf3>
    8884:	803ff91e 	bne	r16,zero,886c <__alt_data_end+0xff00886c>
    8888:	dfc00117 	ldw	ra,4(sp)
    888c:	dc000017 	ldw	r16,0(sp)
    8890:	dec00204 	addi	sp,sp,8
    8894:	f800283a 	ret
    8898:	202090fa 	slli	r16,r4,3
    889c:	00800074 	movhi	r2,1
    88a0:	1084f904 	addi	r2,r2,5092
    88a4:	1421883a 	add	r16,r2,r16
    88a8:	80800017 	ldw	r2,0(r16)
    88ac:	80c00117 	ldw	r3,4(r16)
    88b0:	dfc00117 	ldw	ra,4(sp)
    88b4:	dc000017 	ldw	r16,0(sp)
    88b8:	dec00204 	addi	sp,sp,8
    88bc:	f800283a 	ret

000088c0 <__copybits>:
    88c0:	297fffc4 	addi	r5,r5,-1
    88c4:	280fd17a 	srai	r7,r5,5
    88c8:	30c00417 	ldw	r3,16(r6)
    88cc:	30800504 	addi	r2,r6,20
    88d0:	39c00044 	addi	r7,r7,1
    88d4:	18c7883a 	add	r3,r3,r3
    88d8:	39cf883a 	add	r7,r7,r7
    88dc:	18c7883a 	add	r3,r3,r3
    88e0:	39cf883a 	add	r7,r7,r7
    88e4:	10c7883a 	add	r3,r2,r3
    88e8:	21cf883a 	add	r7,r4,r7
    88ec:	10c00d2e 	bgeu	r2,r3,8924 <__copybits+0x64>
    88f0:	200b883a 	mov	r5,r4
    88f4:	12000017 	ldw	r8,0(r2)
    88f8:	29400104 	addi	r5,r5,4
    88fc:	10800104 	addi	r2,r2,4
    8900:	2a3fff15 	stw	r8,-4(r5)
    8904:	10fffb36 	bltu	r2,r3,88f4 <__alt_data_end+0xff0088f4>
    8908:	1985c83a 	sub	r2,r3,r6
    890c:	10bffac4 	addi	r2,r2,-21
    8910:	1004d0ba 	srli	r2,r2,2
    8914:	10800044 	addi	r2,r2,1
    8918:	1085883a 	add	r2,r2,r2
    891c:	1085883a 	add	r2,r2,r2
    8920:	2089883a 	add	r4,r4,r2
    8924:	21c0032e 	bgeu	r4,r7,8934 <__copybits+0x74>
    8928:	20000015 	stw	zero,0(r4)
    892c:	21000104 	addi	r4,r4,4
    8930:	21fffd36 	bltu	r4,r7,8928 <__alt_data_end+0xff008928>
    8934:	f800283a 	ret

00008938 <__any_on>:
    8938:	20c00417 	ldw	r3,16(r4)
    893c:	2805d17a 	srai	r2,r5,5
    8940:	21000504 	addi	r4,r4,20
    8944:	18800d0e 	bge	r3,r2,897c <__any_on+0x44>
    8948:	18c7883a 	add	r3,r3,r3
    894c:	18c7883a 	add	r3,r3,r3
    8950:	20c7883a 	add	r3,r4,r3
    8954:	20c0192e 	bgeu	r4,r3,89bc <__any_on+0x84>
    8958:	18bfff17 	ldw	r2,-4(r3)
    895c:	18ffff04 	addi	r3,r3,-4
    8960:	1000041e 	bne	r2,zero,8974 <__any_on+0x3c>
    8964:	20c0142e 	bgeu	r4,r3,89b8 <__any_on+0x80>
    8968:	18ffff04 	addi	r3,r3,-4
    896c:	19400017 	ldw	r5,0(r3)
    8970:	283ffc26 	beq	r5,zero,8964 <__alt_data_end+0xff008964>
    8974:	00800044 	movi	r2,1
    8978:	f800283a 	ret
    897c:	10c00a0e 	bge	r2,r3,89a8 <__any_on+0x70>
    8980:	1085883a 	add	r2,r2,r2
    8984:	1085883a 	add	r2,r2,r2
    8988:	294007cc 	andi	r5,r5,31
    898c:	2087883a 	add	r3,r4,r2
    8990:	283ff026 	beq	r5,zero,8954 <__alt_data_end+0xff008954>
    8994:	19800017 	ldw	r6,0(r3)
    8998:	3144d83a 	srl	r2,r6,r5
    899c:	114a983a 	sll	r5,r2,r5
    89a0:	317ff41e 	bne	r6,r5,8974 <__alt_data_end+0xff008974>
    89a4:	003feb06 	br	8954 <__alt_data_end+0xff008954>
    89a8:	1085883a 	add	r2,r2,r2
    89ac:	1085883a 	add	r2,r2,r2
    89b0:	2087883a 	add	r3,r4,r2
    89b4:	003fe706 	br	8954 <__alt_data_end+0xff008954>
    89b8:	f800283a 	ret
    89bc:	0005883a 	mov	r2,zero
    89c0:	f800283a 	ret

000089c4 <_realloc_r>:
    89c4:	defff604 	addi	sp,sp,-40
    89c8:	dc800215 	stw	r18,8(sp)
    89cc:	dfc00915 	stw	ra,36(sp)
    89d0:	df000815 	stw	fp,32(sp)
    89d4:	ddc00715 	stw	r23,28(sp)
    89d8:	dd800615 	stw	r22,24(sp)
    89dc:	dd400515 	stw	r21,20(sp)
    89e0:	dd000415 	stw	r20,16(sp)
    89e4:	dcc00315 	stw	r19,12(sp)
    89e8:	dc400115 	stw	r17,4(sp)
    89ec:	dc000015 	stw	r16,0(sp)
    89f0:	3025883a 	mov	r18,r6
    89f4:	2800b726 	beq	r5,zero,8cd4 <_realloc_r+0x310>
    89f8:	282b883a 	mov	r21,r5
    89fc:	2029883a 	mov	r20,r4
    8a00:	000e9780 	call	e978 <__malloc_lock>
    8a04:	a8bfff17 	ldw	r2,-4(r21)
    8a08:	043fff04 	movi	r16,-4
    8a0c:	90c002c4 	addi	r3,r18,11
    8a10:	01000584 	movi	r4,22
    8a14:	acfffe04 	addi	r19,r21,-8
    8a18:	1420703a 	and	r16,r2,r16
    8a1c:	20c0332e 	bgeu	r4,r3,8aec <_realloc_r+0x128>
    8a20:	047ffe04 	movi	r17,-8
    8a24:	1c62703a 	and	r17,r3,r17
    8a28:	8807883a 	mov	r3,r17
    8a2c:	88005816 	blt	r17,zero,8b90 <_realloc_r+0x1cc>
    8a30:	8c805736 	bltu	r17,r18,8b90 <_realloc_r+0x1cc>
    8a34:	80c0300e 	bge	r16,r3,8af8 <_realloc_r+0x134>
    8a38:	07000074 	movhi	fp,1
    8a3c:	e7057e04 	addi	fp,fp,5624
    8a40:	e1c00217 	ldw	r7,8(fp)
    8a44:	9c09883a 	add	r4,r19,r16
    8a48:	22000117 	ldw	r8,4(r4)
    8a4c:	21c06326 	beq	r4,r7,8bdc <_realloc_r+0x218>
    8a50:	017fff84 	movi	r5,-2
    8a54:	414a703a 	and	r5,r8,r5
    8a58:	214b883a 	add	r5,r4,r5
    8a5c:	29800117 	ldw	r6,4(r5)
    8a60:	3180004c 	andi	r6,r6,1
    8a64:	30003f26 	beq	r6,zero,8b64 <_realloc_r+0x1a0>
    8a68:	1080004c 	andi	r2,r2,1
    8a6c:	10008326 	beq	r2,zero,8c7c <_realloc_r+0x2b8>
    8a70:	900b883a 	mov	r5,r18
    8a74:	a009883a 	mov	r4,r20
    8a78:	0001adc0 	call	1adc <_malloc_r>
    8a7c:	1025883a 	mov	r18,r2
    8a80:	10011e26 	beq	r2,zero,8efc <_realloc_r+0x538>
    8a84:	a93fff17 	ldw	r4,-4(r21)
    8a88:	10fffe04 	addi	r3,r2,-8
    8a8c:	00bfff84 	movi	r2,-2
    8a90:	2084703a 	and	r2,r4,r2
    8a94:	9885883a 	add	r2,r19,r2
    8a98:	1880ee26 	beq	r3,r2,8e54 <_realloc_r+0x490>
    8a9c:	81bfff04 	addi	r6,r16,-4
    8aa0:	00800904 	movi	r2,36
    8aa4:	1180b836 	bltu	r2,r6,8d88 <_realloc_r+0x3c4>
    8aa8:	00c004c4 	movi	r3,19
    8aac:	19809636 	bltu	r3,r6,8d08 <_realloc_r+0x344>
    8ab0:	9005883a 	mov	r2,r18
    8ab4:	a807883a 	mov	r3,r21
    8ab8:	19000017 	ldw	r4,0(r3)
    8abc:	11000015 	stw	r4,0(r2)
    8ac0:	19000117 	ldw	r4,4(r3)
    8ac4:	11000115 	stw	r4,4(r2)
    8ac8:	18c00217 	ldw	r3,8(r3)
    8acc:	10c00215 	stw	r3,8(r2)
    8ad0:	a80b883a 	mov	r5,r21
    8ad4:	a009883a 	mov	r4,r20
    8ad8:	000692c0 	call	692c <_free_r>
    8adc:	a009883a 	mov	r4,r20
    8ae0:	000e99c0 	call	e99c <__malloc_unlock>
    8ae4:	9005883a 	mov	r2,r18
    8ae8:	00001206 	br	8b34 <_realloc_r+0x170>
    8aec:	00c00404 	movi	r3,16
    8af0:	1823883a 	mov	r17,r3
    8af4:	003fce06 	br	8a30 <__alt_data_end+0xff008a30>
    8af8:	a825883a 	mov	r18,r21
    8afc:	8445c83a 	sub	r2,r16,r17
    8b00:	00c003c4 	movi	r3,15
    8b04:	18802636 	bltu	r3,r2,8ba0 <_realloc_r+0x1dc>
    8b08:	99800117 	ldw	r6,4(r19)
    8b0c:	9c07883a 	add	r3,r19,r16
    8b10:	3180004c 	andi	r6,r6,1
    8b14:	3420b03a 	or	r16,r6,r16
    8b18:	9c000115 	stw	r16,4(r19)
    8b1c:	18800117 	ldw	r2,4(r3)
    8b20:	10800054 	ori	r2,r2,1
    8b24:	18800115 	stw	r2,4(r3)
    8b28:	a009883a 	mov	r4,r20
    8b2c:	000e99c0 	call	e99c <__malloc_unlock>
    8b30:	9005883a 	mov	r2,r18
    8b34:	dfc00917 	ldw	ra,36(sp)
    8b38:	df000817 	ldw	fp,32(sp)
    8b3c:	ddc00717 	ldw	r23,28(sp)
    8b40:	dd800617 	ldw	r22,24(sp)
    8b44:	dd400517 	ldw	r21,20(sp)
    8b48:	dd000417 	ldw	r20,16(sp)
    8b4c:	dcc00317 	ldw	r19,12(sp)
    8b50:	dc800217 	ldw	r18,8(sp)
    8b54:	dc400117 	ldw	r17,4(sp)
    8b58:	dc000017 	ldw	r16,0(sp)
    8b5c:	dec00a04 	addi	sp,sp,40
    8b60:	f800283a 	ret
    8b64:	017fff04 	movi	r5,-4
    8b68:	414a703a 	and	r5,r8,r5
    8b6c:	814d883a 	add	r6,r16,r5
    8b70:	30c01f16 	blt	r6,r3,8bf0 <_realloc_r+0x22c>
    8b74:	20800317 	ldw	r2,12(r4)
    8b78:	20c00217 	ldw	r3,8(r4)
    8b7c:	a825883a 	mov	r18,r21
    8b80:	3021883a 	mov	r16,r6
    8b84:	18800315 	stw	r2,12(r3)
    8b88:	10c00215 	stw	r3,8(r2)
    8b8c:	003fdb06 	br	8afc <__alt_data_end+0xff008afc>
    8b90:	00800304 	movi	r2,12
    8b94:	a0800015 	stw	r2,0(r20)
    8b98:	0005883a 	mov	r2,zero
    8b9c:	003fe506 	br	8b34 <__alt_data_end+0xff008b34>
    8ba0:	98c00117 	ldw	r3,4(r19)
    8ba4:	9c4b883a 	add	r5,r19,r17
    8ba8:	11000054 	ori	r4,r2,1
    8bac:	18c0004c 	andi	r3,r3,1
    8bb0:	1c62b03a 	or	r17,r3,r17
    8bb4:	9c400115 	stw	r17,4(r19)
    8bb8:	29000115 	stw	r4,4(r5)
    8bbc:	2885883a 	add	r2,r5,r2
    8bc0:	10c00117 	ldw	r3,4(r2)
    8bc4:	29400204 	addi	r5,r5,8
    8bc8:	a009883a 	mov	r4,r20
    8bcc:	18c00054 	ori	r3,r3,1
    8bd0:	10c00115 	stw	r3,4(r2)
    8bd4:	000692c0 	call	692c <_free_r>
    8bd8:	003fd306 	br	8b28 <__alt_data_end+0xff008b28>
    8bdc:	017fff04 	movi	r5,-4
    8be0:	414a703a 	and	r5,r8,r5
    8be4:	89800404 	addi	r6,r17,16
    8be8:	8151883a 	add	r8,r16,r5
    8bec:	4180590e 	bge	r8,r6,8d54 <_realloc_r+0x390>
    8bf0:	1080004c 	andi	r2,r2,1
    8bf4:	103f9e1e 	bne	r2,zero,8a70 <__alt_data_end+0xff008a70>
    8bf8:	adbffe17 	ldw	r22,-8(r21)
    8bfc:	00bfff04 	movi	r2,-4
    8c00:	9dadc83a 	sub	r22,r19,r22
    8c04:	b1800117 	ldw	r6,4(r22)
    8c08:	3084703a 	and	r2,r6,r2
    8c0c:	20002026 	beq	r4,zero,8c90 <_realloc_r+0x2cc>
    8c10:	80af883a 	add	r23,r16,r2
    8c14:	b96f883a 	add	r23,r23,r5
    8c18:	21c05f26 	beq	r4,r7,8d98 <_realloc_r+0x3d4>
    8c1c:	b8c01c16 	blt	r23,r3,8c90 <_realloc_r+0x2cc>
    8c20:	20800317 	ldw	r2,12(r4)
    8c24:	20c00217 	ldw	r3,8(r4)
    8c28:	81bfff04 	addi	r6,r16,-4
    8c2c:	01000904 	movi	r4,36
    8c30:	18800315 	stw	r2,12(r3)
    8c34:	10c00215 	stw	r3,8(r2)
    8c38:	b0c00217 	ldw	r3,8(r22)
    8c3c:	b0800317 	ldw	r2,12(r22)
    8c40:	b4800204 	addi	r18,r22,8
    8c44:	18800315 	stw	r2,12(r3)
    8c48:	10c00215 	stw	r3,8(r2)
    8c4c:	21801b36 	bltu	r4,r6,8cbc <_realloc_r+0x2f8>
    8c50:	008004c4 	movi	r2,19
    8c54:	1180352e 	bgeu	r2,r6,8d2c <_realloc_r+0x368>
    8c58:	a8800017 	ldw	r2,0(r21)
    8c5c:	b0800215 	stw	r2,8(r22)
    8c60:	a8800117 	ldw	r2,4(r21)
    8c64:	b0800315 	stw	r2,12(r22)
    8c68:	008006c4 	movi	r2,27
    8c6c:	11807f36 	bltu	r2,r6,8e6c <_realloc_r+0x4a8>
    8c70:	b0800404 	addi	r2,r22,16
    8c74:	ad400204 	addi	r21,r21,8
    8c78:	00002d06 	br	8d30 <_realloc_r+0x36c>
    8c7c:	adbffe17 	ldw	r22,-8(r21)
    8c80:	00bfff04 	movi	r2,-4
    8c84:	9dadc83a 	sub	r22,r19,r22
    8c88:	b1000117 	ldw	r4,4(r22)
    8c8c:	2084703a 	and	r2,r4,r2
    8c90:	b03f7726 	beq	r22,zero,8a70 <__alt_data_end+0xff008a70>
    8c94:	80af883a 	add	r23,r16,r2
    8c98:	b8ff7516 	blt	r23,r3,8a70 <__alt_data_end+0xff008a70>
    8c9c:	b0800317 	ldw	r2,12(r22)
    8ca0:	b0c00217 	ldw	r3,8(r22)
    8ca4:	81bfff04 	addi	r6,r16,-4
    8ca8:	01000904 	movi	r4,36
    8cac:	18800315 	stw	r2,12(r3)
    8cb0:	10c00215 	stw	r3,8(r2)
    8cb4:	b4800204 	addi	r18,r22,8
    8cb8:	21bfe52e 	bgeu	r4,r6,8c50 <__alt_data_end+0xff008c50>
    8cbc:	a80b883a 	mov	r5,r21
    8cc0:	9009883a 	mov	r4,r18
    8cc4:	00077440 	call	7744 <memmove>
    8cc8:	b821883a 	mov	r16,r23
    8ccc:	b027883a 	mov	r19,r22
    8cd0:	003f8a06 	br	8afc <__alt_data_end+0xff008afc>
    8cd4:	300b883a 	mov	r5,r6
    8cd8:	dfc00917 	ldw	ra,36(sp)
    8cdc:	df000817 	ldw	fp,32(sp)
    8ce0:	ddc00717 	ldw	r23,28(sp)
    8ce4:	dd800617 	ldw	r22,24(sp)
    8ce8:	dd400517 	ldw	r21,20(sp)
    8cec:	dd000417 	ldw	r20,16(sp)
    8cf0:	dcc00317 	ldw	r19,12(sp)
    8cf4:	dc800217 	ldw	r18,8(sp)
    8cf8:	dc400117 	ldw	r17,4(sp)
    8cfc:	dc000017 	ldw	r16,0(sp)
    8d00:	dec00a04 	addi	sp,sp,40
    8d04:	0001adc1 	jmpi	1adc <_malloc_r>
    8d08:	a8c00017 	ldw	r3,0(r21)
    8d0c:	90c00015 	stw	r3,0(r18)
    8d10:	a8c00117 	ldw	r3,4(r21)
    8d14:	90c00115 	stw	r3,4(r18)
    8d18:	00c006c4 	movi	r3,27
    8d1c:	19804536 	bltu	r3,r6,8e34 <_realloc_r+0x470>
    8d20:	90800204 	addi	r2,r18,8
    8d24:	a8c00204 	addi	r3,r21,8
    8d28:	003f6306 	br	8ab8 <__alt_data_end+0xff008ab8>
    8d2c:	9005883a 	mov	r2,r18
    8d30:	a8c00017 	ldw	r3,0(r21)
    8d34:	b821883a 	mov	r16,r23
    8d38:	b027883a 	mov	r19,r22
    8d3c:	10c00015 	stw	r3,0(r2)
    8d40:	a8c00117 	ldw	r3,4(r21)
    8d44:	10c00115 	stw	r3,4(r2)
    8d48:	a8c00217 	ldw	r3,8(r21)
    8d4c:	10c00215 	stw	r3,8(r2)
    8d50:	003f6a06 	br	8afc <__alt_data_end+0xff008afc>
    8d54:	9c67883a 	add	r19,r19,r17
    8d58:	4445c83a 	sub	r2,r8,r17
    8d5c:	e4c00215 	stw	r19,8(fp)
    8d60:	10800054 	ori	r2,r2,1
    8d64:	98800115 	stw	r2,4(r19)
    8d68:	a8bfff17 	ldw	r2,-4(r21)
    8d6c:	a009883a 	mov	r4,r20
    8d70:	1080004c 	andi	r2,r2,1
    8d74:	1462b03a 	or	r17,r2,r17
    8d78:	ac7fff15 	stw	r17,-4(r21)
    8d7c:	000e99c0 	call	e99c <__malloc_unlock>
    8d80:	a805883a 	mov	r2,r21
    8d84:	003f6b06 	br	8b34 <__alt_data_end+0xff008b34>
    8d88:	a80b883a 	mov	r5,r21
    8d8c:	9009883a 	mov	r4,r18
    8d90:	00077440 	call	7744 <memmove>
    8d94:	003f4e06 	br	8ad0 <__alt_data_end+0xff008ad0>
    8d98:	89000404 	addi	r4,r17,16
    8d9c:	b93fbc16 	blt	r23,r4,8c90 <__alt_data_end+0xff008c90>
    8da0:	b0800317 	ldw	r2,12(r22)
    8da4:	b0c00217 	ldw	r3,8(r22)
    8da8:	81bfff04 	addi	r6,r16,-4
    8dac:	01000904 	movi	r4,36
    8db0:	18800315 	stw	r2,12(r3)
    8db4:	10c00215 	stw	r3,8(r2)
    8db8:	b4800204 	addi	r18,r22,8
    8dbc:	21804336 	bltu	r4,r6,8ecc <_realloc_r+0x508>
    8dc0:	008004c4 	movi	r2,19
    8dc4:	11803f2e 	bgeu	r2,r6,8ec4 <_realloc_r+0x500>
    8dc8:	a8800017 	ldw	r2,0(r21)
    8dcc:	b0800215 	stw	r2,8(r22)
    8dd0:	a8800117 	ldw	r2,4(r21)
    8dd4:	b0800315 	stw	r2,12(r22)
    8dd8:	008006c4 	movi	r2,27
    8ddc:	11803f36 	bltu	r2,r6,8edc <_realloc_r+0x518>
    8de0:	b0800404 	addi	r2,r22,16
    8de4:	ad400204 	addi	r21,r21,8
    8de8:	a8c00017 	ldw	r3,0(r21)
    8dec:	10c00015 	stw	r3,0(r2)
    8df0:	a8c00117 	ldw	r3,4(r21)
    8df4:	10c00115 	stw	r3,4(r2)
    8df8:	a8c00217 	ldw	r3,8(r21)
    8dfc:	10c00215 	stw	r3,8(r2)
    8e00:	b447883a 	add	r3,r22,r17
    8e04:	bc45c83a 	sub	r2,r23,r17
    8e08:	e0c00215 	stw	r3,8(fp)
    8e0c:	10800054 	ori	r2,r2,1
    8e10:	18800115 	stw	r2,4(r3)
    8e14:	b0800117 	ldw	r2,4(r22)
    8e18:	a009883a 	mov	r4,r20
    8e1c:	1080004c 	andi	r2,r2,1
    8e20:	1462b03a 	or	r17,r2,r17
    8e24:	b4400115 	stw	r17,4(r22)
    8e28:	000e99c0 	call	e99c <__malloc_unlock>
    8e2c:	9005883a 	mov	r2,r18
    8e30:	003f4006 	br	8b34 <__alt_data_end+0xff008b34>
    8e34:	a8c00217 	ldw	r3,8(r21)
    8e38:	90c00215 	stw	r3,8(r18)
    8e3c:	a8c00317 	ldw	r3,12(r21)
    8e40:	90c00315 	stw	r3,12(r18)
    8e44:	30801126 	beq	r6,r2,8e8c <_realloc_r+0x4c8>
    8e48:	90800404 	addi	r2,r18,16
    8e4c:	a8c00404 	addi	r3,r21,16
    8e50:	003f1906 	br	8ab8 <__alt_data_end+0xff008ab8>
    8e54:	90ffff17 	ldw	r3,-4(r18)
    8e58:	00bfff04 	movi	r2,-4
    8e5c:	a825883a 	mov	r18,r21
    8e60:	1884703a 	and	r2,r3,r2
    8e64:	80a1883a 	add	r16,r16,r2
    8e68:	003f2406 	br	8afc <__alt_data_end+0xff008afc>
    8e6c:	a8800217 	ldw	r2,8(r21)
    8e70:	b0800415 	stw	r2,16(r22)
    8e74:	a8800317 	ldw	r2,12(r21)
    8e78:	b0800515 	stw	r2,20(r22)
    8e7c:	31000a26 	beq	r6,r4,8ea8 <_realloc_r+0x4e4>
    8e80:	b0800604 	addi	r2,r22,24
    8e84:	ad400404 	addi	r21,r21,16
    8e88:	003fa906 	br	8d30 <__alt_data_end+0xff008d30>
    8e8c:	a9000417 	ldw	r4,16(r21)
    8e90:	90800604 	addi	r2,r18,24
    8e94:	a8c00604 	addi	r3,r21,24
    8e98:	91000415 	stw	r4,16(r18)
    8e9c:	a9000517 	ldw	r4,20(r21)
    8ea0:	91000515 	stw	r4,20(r18)
    8ea4:	003f0406 	br	8ab8 <__alt_data_end+0xff008ab8>
    8ea8:	a8c00417 	ldw	r3,16(r21)
    8eac:	ad400604 	addi	r21,r21,24
    8eb0:	b0800804 	addi	r2,r22,32
    8eb4:	b0c00615 	stw	r3,24(r22)
    8eb8:	a8ffff17 	ldw	r3,-4(r21)
    8ebc:	b0c00715 	stw	r3,28(r22)
    8ec0:	003f9b06 	br	8d30 <__alt_data_end+0xff008d30>
    8ec4:	9005883a 	mov	r2,r18
    8ec8:	003fc706 	br	8de8 <__alt_data_end+0xff008de8>
    8ecc:	a80b883a 	mov	r5,r21
    8ed0:	9009883a 	mov	r4,r18
    8ed4:	00077440 	call	7744 <memmove>
    8ed8:	003fc906 	br	8e00 <__alt_data_end+0xff008e00>
    8edc:	a8800217 	ldw	r2,8(r21)
    8ee0:	b0800415 	stw	r2,16(r22)
    8ee4:	a8800317 	ldw	r2,12(r21)
    8ee8:	b0800515 	stw	r2,20(r22)
    8eec:	31000726 	beq	r6,r4,8f0c <_realloc_r+0x548>
    8ef0:	b0800604 	addi	r2,r22,24
    8ef4:	ad400404 	addi	r21,r21,16
    8ef8:	003fbb06 	br	8de8 <__alt_data_end+0xff008de8>
    8efc:	a009883a 	mov	r4,r20
    8f00:	000e99c0 	call	e99c <__malloc_unlock>
    8f04:	0005883a 	mov	r2,zero
    8f08:	003f0a06 	br	8b34 <__alt_data_end+0xff008b34>
    8f0c:	a8c00417 	ldw	r3,16(r21)
    8f10:	ad400604 	addi	r21,r21,24
    8f14:	b0800804 	addi	r2,r22,32
    8f18:	b0c00615 	stw	r3,24(r22)
    8f1c:	a8ffff17 	ldw	r3,-4(r21)
    8f20:	b0c00715 	stw	r3,28(r22)
    8f24:	003fb006 	br	8de8 <__alt_data_end+0xff008de8>

00008f28 <__fpclassifyd>:
    8f28:	00a00034 	movhi	r2,32768
    8f2c:	10bfffc4 	addi	r2,r2,-1
    8f30:	2884703a 	and	r2,r5,r2
    8f34:	10000726 	beq	r2,zero,8f54 <__fpclassifyd+0x2c>
    8f38:	00fffc34 	movhi	r3,65520
    8f3c:	019ff834 	movhi	r6,32736
    8f40:	28c7883a 	add	r3,r5,r3
    8f44:	31bfffc4 	addi	r6,r6,-1
    8f48:	30c00536 	bltu	r6,r3,8f60 <__fpclassifyd+0x38>
    8f4c:	00800104 	movi	r2,4
    8f50:	f800283a 	ret
    8f54:	2000021e 	bne	r4,zero,8f60 <__fpclassifyd+0x38>
    8f58:	00800084 	movi	r2,2
    8f5c:	f800283a 	ret
    8f60:	00dffc34 	movhi	r3,32752
    8f64:	019ff834 	movhi	r6,32736
    8f68:	28cb883a 	add	r5,r5,r3
    8f6c:	31bfffc4 	addi	r6,r6,-1
    8f70:	317ff62e 	bgeu	r6,r5,8f4c <__alt_data_end+0xff008f4c>
    8f74:	01400434 	movhi	r5,16
    8f78:	297fffc4 	addi	r5,r5,-1
    8f7c:	28800236 	bltu	r5,r2,8f88 <__fpclassifyd+0x60>
    8f80:	008000c4 	movi	r2,3
    8f84:	f800283a 	ret
    8f88:	10c00226 	beq	r2,r3,8f94 <__fpclassifyd+0x6c>
    8f8c:	0005883a 	mov	r2,zero
    8f90:	f800283a 	ret
    8f94:	2005003a 	cmpeq	r2,r4,zero
    8f98:	f800283a 	ret

00008f9c <__sread>:
    8f9c:	defffe04 	addi	sp,sp,-8
    8fa0:	dc000015 	stw	r16,0(sp)
    8fa4:	2821883a 	mov	r16,r5
    8fa8:	2940038f 	ldh	r5,14(r5)
    8fac:	dfc00115 	stw	ra,4(sp)
    8fb0:	000ad900 	call	ad90 <_read_r>
    8fb4:	10000716 	blt	r2,zero,8fd4 <__sread+0x38>
    8fb8:	80c01417 	ldw	r3,80(r16)
    8fbc:	1887883a 	add	r3,r3,r2
    8fc0:	80c01415 	stw	r3,80(r16)
    8fc4:	dfc00117 	ldw	ra,4(sp)
    8fc8:	dc000017 	ldw	r16,0(sp)
    8fcc:	dec00204 	addi	sp,sp,8
    8fd0:	f800283a 	ret
    8fd4:	80c0030b 	ldhu	r3,12(r16)
    8fd8:	18fbffcc 	andi	r3,r3,61439
    8fdc:	80c0030d 	sth	r3,12(r16)
    8fe0:	dfc00117 	ldw	ra,4(sp)
    8fe4:	dc000017 	ldw	r16,0(sp)
    8fe8:	dec00204 	addi	sp,sp,8
    8fec:	f800283a 	ret

00008ff0 <__seofread>:
    8ff0:	0005883a 	mov	r2,zero
    8ff4:	f800283a 	ret

00008ff8 <__swrite>:
    8ff8:	2880030b 	ldhu	r2,12(r5)
    8ffc:	defffb04 	addi	sp,sp,-20
    9000:	dcc00315 	stw	r19,12(sp)
    9004:	dc800215 	stw	r18,8(sp)
    9008:	dc400115 	stw	r17,4(sp)
    900c:	dc000015 	stw	r16,0(sp)
    9010:	dfc00415 	stw	ra,16(sp)
    9014:	10c0400c 	andi	r3,r2,256
    9018:	2821883a 	mov	r16,r5
    901c:	2023883a 	mov	r17,r4
    9020:	3025883a 	mov	r18,r6
    9024:	3827883a 	mov	r19,r7
    9028:	18000526 	beq	r3,zero,9040 <__swrite+0x48>
    902c:	2940038f 	ldh	r5,14(r5)
    9030:	01c00084 	movi	r7,2
    9034:	000d883a 	mov	r6,zero
    9038:	000ad300 	call	ad30 <_lseek_r>
    903c:	8080030b 	ldhu	r2,12(r16)
    9040:	8140038f 	ldh	r5,14(r16)
    9044:	10bbffcc 	andi	r2,r2,61439
    9048:	980f883a 	mov	r7,r19
    904c:	900d883a 	mov	r6,r18
    9050:	8809883a 	mov	r4,r17
    9054:	8080030d 	sth	r2,12(r16)
    9058:	dfc00417 	ldw	ra,16(sp)
    905c:	dcc00317 	ldw	r19,12(sp)
    9060:	dc800217 	ldw	r18,8(sp)
    9064:	dc400117 	ldw	r17,4(sp)
    9068:	dc000017 	ldw	r16,0(sp)
    906c:	dec00504 	addi	sp,sp,20
    9070:	000a7fc1 	jmpi	a7fc <_write_r>

00009074 <__sseek>:
    9074:	defffe04 	addi	sp,sp,-8
    9078:	dc000015 	stw	r16,0(sp)
    907c:	2821883a 	mov	r16,r5
    9080:	2940038f 	ldh	r5,14(r5)
    9084:	dfc00115 	stw	ra,4(sp)
    9088:	000ad300 	call	ad30 <_lseek_r>
    908c:	00ffffc4 	movi	r3,-1
    9090:	10c00826 	beq	r2,r3,90b4 <__sseek+0x40>
    9094:	80c0030b 	ldhu	r3,12(r16)
    9098:	80801415 	stw	r2,80(r16)
    909c:	18c40014 	ori	r3,r3,4096
    90a0:	80c0030d 	sth	r3,12(r16)
    90a4:	dfc00117 	ldw	ra,4(sp)
    90a8:	dc000017 	ldw	r16,0(sp)
    90ac:	dec00204 	addi	sp,sp,8
    90b0:	f800283a 	ret
    90b4:	80c0030b 	ldhu	r3,12(r16)
    90b8:	18fbffcc 	andi	r3,r3,61439
    90bc:	80c0030d 	sth	r3,12(r16)
    90c0:	dfc00117 	ldw	ra,4(sp)
    90c4:	dc000017 	ldw	r16,0(sp)
    90c8:	dec00204 	addi	sp,sp,8
    90cc:	f800283a 	ret

000090d0 <__sclose>:
    90d0:	2940038f 	ldh	r5,14(r5)
    90d4:	000a85c1 	jmpi	a85c <_close_r>

000090d8 <strcmp>:
    90d8:	2144b03a 	or	r2,r4,r5
    90dc:	108000cc 	andi	r2,r2,3
    90e0:	1000171e 	bne	r2,zero,9140 <strcmp+0x68>
    90e4:	20800017 	ldw	r2,0(r4)
    90e8:	28c00017 	ldw	r3,0(r5)
    90ec:	10c0141e 	bne	r2,r3,9140 <strcmp+0x68>
    90f0:	027fbff4 	movhi	r9,65279
    90f4:	4a7fbfc4 	addi	r9,r9,-257
    90f8:	0086303a 	nor	r3,zero,r2
    90fc:	02202074 	movhi	r8,32897
    9100:	1245883a 	add	r2,r2,r9
    9104:	42202004 	addi	r8,r8,-32640
    9108:	10c4703a 	and	r2,r2,r3
    910c:	1204703a 	and	r2,r2,r8
    9110:	10000226 	beq	r2,zero,911c <strcmp+0x44>
    9114:	00002306 	br	91a4 <strcmp+0xcc>
    9118:	1000221e 	bne	r2,zero,91a4 <strcmp+0xcc>
    911c:	21000104 	addi	r4,r4,4
    9120:	20c00017 	ldw	r3,0(r4)
    9124:	29400104 	addi	r5,r5,4
    9128:	29800017 	ldw	r6,0(r5)
    912c:	1a4f883a 	add	r7,r3,r9
    9130:	00c4303a 	nor	r2,zero,r3
    9134:	3884703a 	and	r2,r7,r2
    9138:	1204703a 	and	r2,r2,r8
    913c:	19bff626 	beq	r3,r6,9118 <__alt_data_end+0xff009118>
    9140:	20800003 	ldbu	r2,0(r4)
    9144:	10c03fcc 	andi	r3,r2,255
    9148:	18c0201c 	xori	r3,r3,128
    914c:	18ffe004 	addi	r3,r3,-128
    9150:	18000c26 	beq	r3,zero,9184 <strcmp+0xac>
    9154:	29800007 	ldb	r6,0(r5)
    9158:	19800326 	beq	r3,r6,9168 <strcmp+0x90>
    915c:	00001306 	br	91ac <strcmp+0xd4>
    9160:	29800007 	ldb	r6,0(r5)
    9164:	11800b1e 	bne	r2,r6,9194 <strcmp+0xbc>
    9168:	21000044 	addi	r4,r4,1
    916c:	20c00003 	ldbu	r3,0(r4)
    9170:	29400044 	addi	r5,r5,1
    9174:	18803fcc 	andi	r2,r3,255
    9178:	1080201c 	xori	r2,r2,128
    917c:	10bfe004 	addi	r2,r2,-128
    9180:	103ff71e 	bne	r2,zero,9160 <__alt_data_end+0xff009160>
    9184:	0007883a 	mov	r3,zero
    9188:	28800003 	ldbu	r2,0(r5)
    918c:	1885c83a 	sub	r2,r3,r2
    9190:	f800283a 	ret
    9194:	28800003 	ldbu	r2,0(r5)
    9198:	18c03fcc 	andi	r3,r3,255
    919c:	1885c83a 	sub	r2,r3,r2
    91a0:	f800283a 	ret
    91a4:	0005883a 	mov	r2,zero
    91a8:	f800283a 	ret
    91ac:	10c03fcc 	andi	r3,r2,255
    91b0:	003ff506 	br	9188 <__alt_data_end+0xff009188>

000091b4 <__sprint_r.part.0>:
    91b4:	28801917 	ldw	r2,100(r5)
    91b8:	defff604 	addi	sp,sp,-40
    91bc:	dd400515 	stw	r21,20(sp)
    91c0:	dfc00915 	stw	ra,36(sp)
    91c4:	df000815 	stw	fp,32(sp)
    91c8:	ddc00715 	stw	r23,28(sp)
    91cc:	dd800615 	stw	r22,24(sp)
    91d0:	dd000415 	stw	r20,16(sp)
    91d4:	dcc00315 	stw	r19,12(sp)
    91d8:	dc800215 	stw	r18,8(sp)
    91dc:	dc400115 	stw	r17,4(sp)
    91e0:	dc000015 	stw	r16,0(sp)
    91e4:	1088000c 	andi	r2,r2,8192
    91e8:	302b883a 	mov	r21,r6
    91ec:	10002e26 	beq	r2,zero,92a8 <__sprint_r.part.0+0xf4>
    91f0:	30800217 	ldw	r2,8(r6)
    91f4:	35800017 	ldw	r22,0(r6)
    91f8:	10002926 	beq	r2,zero,92a0 <__sprint_r.part.0+0xec>
    91fc:	2827883a 	mov	r19,r5
    9200:	2029883a 	mov	r20,r4
    9204:	b5c00104 	addi	r23,r22,4
    9208:	04bfffc4 	movi	r18,-1
    920c:	bc400017 	ldw	r17,0(r23)
    9210:	b4000017 	ldw	r16,0(r22)
    9214:	0039883a 	mov	fp,zero
    9218:	8822d0ba 	srli	r17,r17,2
    921c:	8800031e 	bne	r17,zero,922c <__sprint_r.part.0+0x78>
    9220:	00001806 	br	9284 <__sprint_r.part.0+0xd0>
    9224:	84000104 	addi	r16,r16,4
    9228:	8f001526 	beq	r17,fp,9280 <__sprint_r.part.0+0xcc>
    922c:	81400017 	ldw	r5,0(r16)
    9230:	980d883a 	mov	r6,r19
    9234:	a009883a 	mov	r4,r20
    9238:	000abdc0 	call	abdc <_fputwc_r>
    923c:	e7000044 	addi	fp,fp,1
    9240:	14bff81e 	bne	r2,r18,9224 <__alt_data_end+0xff009224>
    9244:	9005883a 	mov	r2,r18
    9248:	a8000215 	stw	zero,8(r21)
    924c:	a8000115 	stw	zero,4(r21)
    9250:	dfc00917 	ldw	ra,36(sp)
    9254:	df000817 	ldw	fp,32(sp)
    9258:	ddc00717 	ldw	r23,28(sp)
    925c:	dd800617 	ldw	r22,24(sp)
    9260:	dd400517 	ldw	r21,20(sp)
    9264:	dd000417 	ldw	r20,16(sp)
    9268:	dcc00317 	ldw	r19,12(sp)
    926c:	dc800217 	ldw	r18,8(sp)
    9270:	dc400117 	ldw	r17,4(sp)
    9274:	dc000017 	ldw	r16,0(sp)
    9278:	dec00a04 	addi	sp,sp,40
    927c:	f800283a 	ret
    9280:	a8800217 	ldw	r2,8(r21)
    9284:	8c63883a 	add	r17,r17,r17
    9288:	8c63883a 	add	r17,r17,r17
    928c:	1445c83a 	sub	r2,r2,r17
    9290:	a8800215 	stw	r2,8(r21)
    9294:	b5800204 	addi	r22,r22,8
    9298:	bdc00204 	addi	r23,r23,8
    929c:	103fdb1e 	bne	r2,zero,920c <__alt_data_end+0xff00920c>
    92a0:	0005883a 	mov	r2,zero
    92a4:	003fe806 	br	9248 <__alt_data_end+0xff009248>
    92a8:	0006c3c0 	call	6c3c <__sfvwrite_r>
    92ac:	003fe606 	br	9248 <__alt_data_end+0xff009248>

000092b0 <__sprint_r>:
    92b0:	30c00217 	ldw	r3,8(r6)
    92b4:	18000126 	beq	r3,zero,92bc <__sprint_r+0xc>
    92b8:	00091b41 	jmpi	91b4 <__sprint_r.part.0>
    92bc:	30000115 	stw	zero,4(r6)
    92c0:	0005883a 	mov	r2,zero
    92c4:	f800283a 	ret

000092c8 <___vfiprintf_internal_r>:
    92c8:	deffc904 	addi	sp,sp,-220
    92cc:	df003515 	stw	fp,212(sp)
    92d0:	dd003115 	stw	r20,196(sp)
    92d4:	dfc03615 	stw	ra,216(sp)
    92d8:	ddc03415 	stw	r23,208(sp)
    92dc:	dd803315 	stw	r22,204(sp)
    92e0:	dd403215 	stw	r21,200(sp)
    92e4:	dcc03015 	stw	r19,192(sp)
    92e8:	dc802f15 	stw	r18,188(sp)
    92ec:	dc402e15 	stw	r17,184(sp)
    92f0:	dc002d15 	stw	r16,180(sp)
    92f4:	d9002015 	stw	r4,128(sp)
    92f8:	d9c02215 	stw	r7,136(sp)
    92fc:	2829883a 	mov	r20,r5
    9300:	3039883a 	mov	fp,r6
    9304:	20000226 	beq	r4,zero,9310 <___vfiprintf_internal_r+0x48>
    9308:	20800e17 	ldw	r2,56(r4)
    930c:	1000cf26 	beq	r2,zero,964c <___vfiprintf_internal_r+0x384>
    9310:	a080030b 	ldhu	r2,12(r20)
    9314:	10c8000c 	andi	r3,r2,8192
    9318:	1800061e 	bne	r3,zero,9334 <___vfiprintf_internal_r+0x6c>
    931c:	a1001917 	ldw	r4,100(r20)
    9320:	00f7ffc4 	movi	r3,-8193
    9324:	10880014 	ori	r2,r2,8192
    9328:	20c6703a 	and	r3,r4,r3
    932c:	a080030d 	sth	r2,12(r20)
    9330:	a0c01915 	stw	r3,100(r20)
    9334:	10c0020c 	andi	r3,r2,8
    9338:	1800a926 	beq	r3,zero,95e0 <___vfiprintf_internal_r+0x318>
    933c:	a0c00417 	ldw	r3,16(r20)
    9340:	1800a726 	beq	r3,zero,95e0 <___vfiprintf_internal_r+0x318>
    9344:	1080068c 	andi	r2,r2,26
    9348:	00c00284 	movi	r3,10
    934c:	10c0ac26 	beq	r2,r3,9600 <___vfiprintf_internal_r+0x338>
    9350:	da801a04 	addi	r10,sp,104
    9354:	da801e15 	stw	r10,120(sp)
    9358:	d8801e17 	ldw	r2,120(sp)
    935c:	da8019c4 	addi	r10,sp,103
    9360:	05800074 	movhi	r22,1
    9364:	05c00074 	movhi	r23,1
    9368:	da801f15 	stw	r10,124(sp)
    936c:	1295c83a 	sub	r10,r2,r10
    9370:	b5852f04 	addi	r22,r22,5308
    9374:	bdc52b04 	addi	r23,r23,5292
    9378:	dec01a15 	stw	sp,104(sp)
    937c:	d8001c15 	stw	zero,112(sp)
    9380:	d8001b15 	stw	zero,108(sp)
    9384:	d8002615 	stw	zero,152(sp)
    9388:	d8002315 	stw	zero,140(sp)
    938c:	da802715 	stw	r10,156(sp)
    9390:	d811883a 	mov	r8,sp
    9394:	dd002115 	stw	r20,132(sp)
    9398:	e021883a 	mov	r16,fp
    939c:	80800007 	ldb	r2,0(r16)
    93a0:	1003ea26 	beq	r2,zero,a34c <___vfiprintf_internal_r+0x1084>
    93a4:	00c00944 	movi	r3,37
    93a8:	8025883a 	mov	r18,r16
    93ac:	10c0021e 	bne	r2,r3,93b8 <___vfiprintf_internal_r+0xf0>
    93b0:	00001606 	br	940c <___vfiprintf_internal_r+0x144>
    93b4:	10c00326 	beq	r2,r3,93c4 <___vfiprintf_internal_r+0xfc>
    93b8:	94800044 	addi	r18,r18,1
    93bc:	90800007 	ldb	r2,0(r18)
    93c0:	103ffc1e 	bne	r2,zero,93b4 <__alt_data_end+0xff0093b4>
    93c4:	9423c83a 	sub	r17,r18,r16
    93c8:	88001026 	beq	r17,zero,940c <___vfiprintf_internal_r+0x144>
    93cc:	d8c01c17 	ldw	r3,112(sp)
    93d0:	d8801b17 	ldw	r2,108(sp)
    93d4:	44000015 	stw	r16,0(r8)
    93d8:	88c7883a 	add	r3,r17,r3
    93dc:	10800044 	addi	r2,r2,1
    93e0:	44400115 	stw	r17,4(r8)
    93e4:	d8c01c15 	stw	r3,112(sp)
    93e8:	d8801b15 	stw	r2,108(sp)
    93ec:	010001c4 	movi	r4,7
    93f0:	2080760e 	bge	r4,r2,95cc <___vfiprintf_internal_r+0x304>
    93f4:	1803821e 	bne	r3,zero,a200 <___vfiprintf_internal_r+0xf38>
    93f8:	da802317 	ldw	r10,140(sp)
    93fc:	d8001b15 	stw	zero,108(sp)
    9400:	d811883a 	mov	r8,sp
    9404:	5455883a 	add	r10,r10,r17
    9408:	da802315 	stw	r10,140(sp)
    940c:	90800007 	ldb	r2,0(r18)
    9410:	10044626 	beq	r2,zero,a52c <___vfiprintf_internal_r+0x1264>
    9414:	90c00047 	ldb	r3,1(r18)
    9418:	94000044 	addi	r16,r18,1
    941c:	d8001d85 	stb	zero,118(sp)
    9420:	0009883a 	mov	r4,zero
    9424:	000f883a 	mov	r7,zero
    9428:	027fffc4 	movi	r9,-1
    942c:	0023883a 	mov	r17,zero
    9430:	0029883a 	mov	r20,zero
    9434:	01401604 	movi	r5,88
    9438:	01800244 	movi	r6,9
    943c:	03400a84 	movi	r13,42
    9440:	03001b04 	movi	r12,108
    9444:	84000044 	addi	r16,r16,1
    9448:	18bff804 	addi	r2,r3,-32
    944c:	28827336 	bltu	r5,r2,9e1c <___vfiprintf_internal_r+0xb54>
    9450:	100490ba 	slli	r2,r2,2
    9454:	02800074 	movhi	r10,1
    9458:	52a51a04 	addi	r10,r10,-27544
    945c:	1285883a 	add	r2,r2,r10
    9460:	10800017 	ldw	r2,0(r2)
    9464:	1000683a 	jmp	r2
    9468:	00009b50 	cmplti	zero,zero,621
    946c:	00009e1c 	xori	zero,zero,632
    9470:	00009e1c 	xori	zero,zero,632
    9474:	00009b70 	cmpltui	zero,zero,621
    9478:	00009e1c 	xori	zero,zero,632
    947c:	00009e1c 	xori	zero,zero,632
    9480:	00009e1c 	xori	zero,zero,632
    9484:	00009e1c 	xori	zero,zero,632
    9488:	00009e1c 	xori	zero,zero,632
    948c:	00009e1c 	xori	zero,zero,632
    9490:	00009d58 	cmpnei	zero,zero,629
    9494:	00009d74 	movhi	zero,629
    9498:	00009e1c 	xori	zero,zero,632
    949c:	0000965c 	xori	zero,zero,601
    94a0:	00009d84 	movi	zero,630
    94a4:	00009e1c 	xori	zero,zero,632
    94a8:	00009b7c 	xorhi	zero,zero,621
    94ac:	00009b88 	cmpgei	zero,zero,622
    94b0:	00009b88 	cmpgei	zero,zero,622
    94b4:	00009b88 	cmpgei	zero,zero,622
    94b8:	00009b88 	cmpgei	zero,zero,622
    94bc:	00009b88 	cmpgei	zero,zero,622
    94c0:	00009b88 	cmpgei	zero,zero,622
    94c4:	00009b88 	cmpgei	zero,zero,622
    94c8:	00009b88 	cmpgei	zero,zero,622
    94cc:	00009b88 	cmpgei	zero,zero,622
    94d0:	00009e1c 	xori	zero,zero,632
    94d4:	00009e1c 	xori	zero,zero,632
    94d8:	00009e1c 	xori	zero,zero,632
    94dc:	00009e1c 	xori	zero,zero,632
    94e0:	00009e1c 	xori	zero,zero,632
    94e4:	00009e1c 	xori	zero,zero,632
    94e8:	00009e1c 	xori	zero,zero,632
    94ec:	00009e1c 	xori	zero,zero,632
    94f0:	00009e1c 	xori	zero,zero,632
    94f4:	00009e1c 	xori	zero,zero,632
    94f8:	00009bb4 	movhi	zero,622
    94fc:	00009e1c 	xori	zero,zero,632
    9500:	00009e1c 	xori	zero,zero,632
    9504:	00009e1c 	xori	zero,zero,632
    9508:	00009e1c 	xori	zero,zero,632
    950c:	00009e1c 	xori	zero,zero,632
    9510:	00009e1c 	xori	zero,zero,632
    9514:	00009e1c 	xori	zero,zero,632
    9518:	00009e1c 	xori	zero,zero,632
    951c:	00009e1c 	xori	zero,zero,632
    9520:	00009e1c 	xori	zero,zero,632
    9524:	00009bec 	andhi	zero,zero,623
    9528:	00009e1c 	xori	zero,zero,632
    952c:	00009e1c 	xori	zero,zero,632
    9530:	00009e1c 	xori	zero,zero,632
    9534:	00009e1c 	xori	zero,zero,632
    9538:	00009e1c 	xori	zero,zero,632
    953c:	00009c44 	movi	zero,625
    9540:	00009e1c 	xori	zero,zero,632
    9544:	00009e1c 	xori	zero,zero,632
    9548:	00009cb4 	movhi	zero,626
    954c:	00009e1c 	xori	zero,zero,632
    9550:	00009e1c 	xori	zero,zero,632
    9554:	00009e1c 	xori	zero,zero,632
    9558:	00009e1c 	xori	zero,zero,632
    955c:	00009e1c 	xori	zero,zero,632
    9560:	00009e1c 	xori	zero,zero,632
    9564:	00009e1c 	xori	zero,zero,632
    9568:	00009e1c 	xori	zero,zero,632
    956c:	00009e1c 	xori	zero,zero,632
    9570:	00009e1c 	xori	zero,zero,632
    9574:	00009a60 	cmpeqi	zero,zero,617
    9578:	00009a8c 	andi	zero,zero,618
    957c:	00009e1c 	xori	zero,zero,632
    9580:	00009e1c 	xori	zero,zero,632
    9584:	00009e1c 	xori	zero,zero,632
    9588:	00009dc4 	movi	zero,631
    958c:	00009a8c 	andi	zero,zero,618
    9590:	00009e1c 	xori	zero,zero,632
    9594:	00009e1c 	xori	zero,zero,632
    9598:	00009920 	cmpeqi	zero,zero,612
    959c:	00009e1c 	xori	zero,zero,632
    95a0:	00009930 	cmpltui	zero,zero,612
    95a4:	0000996c 	andhi	zero,zero,613
    95a8:	00009668 	cmpgeui	zero,zero,601
    95ac:	00009914 	movui	zero,612
    95b0:	00009e1c 	xori	zero,zero,632
    95b4:	00009cf0 	cmpltui	zero,zero,627
    95b8:	00009e1c 	xori	zero,zero,632
    95bc:	00009d48 	cmpgei	zero,zero,629
    95c0:	00009e1c 	xori	zero,zero,632
    95c4:	00009e1c 	xori	zero,zero,632
    95c8:	00009a0c 	andi	zero,zero,616
    95cc:	42000204 	addi	r8,r8,8
    95d0:	da802317 	ldw	r10,140(sp)
    95d4:	5455883a 	add	r10,r10,r17
    95d8:	da802315 	stw	r10,140(sp)
    95dc:	003f8b06 	br	940c <__alt_data_end+0xff00940c>
    95e0:	d9002017 	ldw	r4,128(sp)
    95e4:	a00b883a 	mov	r5,r20
    95e8:	00047e40 	call	47e4 <__swsetup_r>
    95ec:	1003b11e 	bne	r2,zero,a4b4 <___vfiprintf_internal_r+0x11ec>
    95f0:	a080030b 	ldhu	r2,12(r20)
    95f4:	00c00284 	movi	r3,10
    95f8:	1080068c 	andi	r2,r2,26
    95fc:	10ff541e 	bne	r2,r3,9350 <__alt_data_end+0xff009350>
    9600:	a080038f 	ldh	r2,14(r20)
    9604:	103f5216 	blt	r2,zero,9350 <__alt_data_end+0xff009350>
    9608:	d9c02217 	ldw	r7,136(sp)
    960c:	d9002017 	ldw	r4,128(sp)
    9610:	e00d883a 	mov	r6,fp
    9614:	a00b883a 	mov	r5,r20
    9618:	000a7400 	call	a740 <__sbprintf>
    961c:	dfc03617 	ldw	ra,216(sp)
    9620:	df003517 	ldw	fp,212(sp)
    9624:	ddc03417 	ldw	r23,208(sp)
    9628:	dd803317 	ldw	r22,204(sp)
    962c:	dd403217 	ldw	r21,200(sp)
    9630:	dd003117 	ldw	r20,196(sp)
    9634:	dcc03017 	ldw	r19,192(sp)
    9638:	dc802f17 	ldw	r18,188(sp)
    963c:	dc402e17 	ldw	r17,184(sp)
    9640:	dc002d17 	ldw	r16,180(sp)
    9644:	dec03704 	addi	sp,sp,220
    9648:	f800283a 	ret
    964c:	00067b80 	call	67b8 <__sinit>
    9650:	003f2f06 	br	9310 <__alt_data_end+0xff009310>
    9654:	0463c83a 	sub	r17,zero,r17
    9658:	d8802215 	stw	r2,136(sp)
    965c:	a5000114 	ori	r20,r20,4
    9660:	80c00007 	ldb	r3,0(r16)
    9664:	003f7706 	br	9444 <__alt_data_end+0xff009444>
    9668:	00800c04 	movi	r2,48
    966c:	da802217 	ldw	r10,136(sp)
    9670:	d8801d05 	stb	r2,116(sp)
    9674:	00801e04 	movi	r2,120
    9678:	d8801d45 	stb	r2,117(sp)
    967c:	d8001d85 	stb	zero,118(sp)
    9680:	50c00104 	addi	r3,r10,4
    9684:	54800017 	ldw	r18,0(r10)
    9688:	0027883a 	mov	r19,zero
    968c:	a0800094 	ori	r2,r20,2
    9690:	48030b16 	blt	r9,zero,a2c0 <___vfiprintf_internal_r+0xff8>
    9694:	00bfdfc4 	movi	r2,-129
    9698:	a096703a 	and	r11,r20,r2
    969c:	d8c02215 	stw	r3,136(sp)
    96a0:	5d000094 	ori	r20,r11,2
    96a4:	90032b1e 	bne	r18,zero,a354 <___vfiprintf_internal_r+0x108c>
    96a8:	00800074 	movhi	r2,1
    96ac:	1084ca04 	addi	r2,r2,4904
    96b0:	d8802615 	stw	r2,152(sp)
    96b4:	0039883a 	mov	fp,zero
    96b8:	48017b1e 	bne	r9,zero,9ca8 <___vfiprintf_internal_r+0x9e0>
    96bc:	0013883a 	mov	r9,zero
    96c0:	0027883a 	mov	r19,zero
    96c4:	dd401a04 	addi	r21,sp,104
    96c8:	4825883a 	mov	r18,r9
    96cc:	4cc0010e 	bge	r9,r19,96d4 <___vfiprintf_internal_r+0x40c>
    96d0:	9825883a 	mov	r18,r19
    96d4:	e7003fcc 	andi	fp,fp,255
    96d8:	e700201c 	xori	fp,fp,128
    96dc:	e73fe004 	addi	fp,fp,-128
    96e0:	e0000126 	beq	fp,zero,96e8 <___vfiprintf_internal_r+0x420>
    96e4:	94800044 	addi	r18,r18,1
    96e8:	a380008c 	andi	r14,r20,2
    96ec:	70000126 	beq	r14,zero,96f4 <___vfiprintf_internal_r+0x42c>
    96f0:	94800084 	addi	r18,r18,2
    96f4:	a700210c 	andi	fp,r20,132
    96f8:	e001df1e 	bne	fp,zero,9e78 <___vfiprintf_internal_r+0xbb0>
    96fc:	8c87c83a 	sub	r3,r17,r18
    9700:	00c1dd0e 	bge	zero,r3,9e78 <___vfiprintf_internal_r+0xbb0>
    9704:	01c00404 	movi	r7,16
    9708:	d8801c17 	ldw	r2,112(sp)
    970c:	38c3ad0e 	bge	r7,r3,a5c4 <___vfiprintf_internal_r+0x12fc>
    9710:	02800074 	movhi	r10,1
    9714:	52852f04 	addi	r10,r10,5308
    9718:	dc002915 	stw	r16,164(sp)
    971c:	d9801b17 	ldw	r6,108(sp)
    9720:	da802415 	stw	r10,144(sp)
    9724:	03c001c4 	movi	r15,7
    9728:	da402515 	stw	r9,148(sp)
    972c:	db802815 	stw	r14,160(sp)
    9730:	1821883a 	mov	r16,r3
    9734:	00000506 	br	974c <___vfiprintf_internal_r+0x484>
    9738:	31400084 	addi	r5,r6,2
    973c:	42000204 	addi	r8,r8,8
    9740:	200d883a 	mov	r6,r4
    9744:	843ffc04 	addi	r16,r16,-16
    9748:	3c000d0e 	bge	r7,r16,9780 <___vfiprintf_internal_r+0x4b8>
    974c:	10800404 	addi	r2,r2,16
    9750:	31000044 	addi	r4,r6,1
    9754:	45800015 	stw	r22,0(r8)
    9758:	41c00115 	stw	r7,4(r8)
    975c:	d8801c15 	stw	r2,112(sp)
    9760:	d9001b15 	stw	r4,108(sp)
    9764:	793ff40e 	bge	r15,r4,9738 <__alt_data_end+0xff009738>
    9768:	1001b51e 	bne	r2,zero,9e40 <___vfiprintf_internal_r+0xb78>
    976c:	843ffc04 	addi	r16,r16,-16
    9770:	000d883a 	mov	r6,zero
    9774:	01400044 	movi	r5,1
    9778:	d811883a 	mov	r8,sp
    977c:	3c3ff316 	blt	r7,r16,974c <__alt_data_end+0xff00974c>
    9780:	8007883a 	mov	r3,r16
    9784:	da402517 	ldw	r9,148(sp)
    9788:	db802817 	ldw	r14,160(sp)
    978c:	dc002917 	ldw	r16,164(sp)
    9790:	da802417 	ldw	r10,144(sp)
    9794:	1885883a 	add	r2,r3,r2
    9798:	40c00115 	stw	r3,4(r8)
    979c:	42800015 	stw	r10,0(r8)
    97a0:	d8801c15 	stw	r2,112(sp)
    97a4:	d9401b15 	stw	r5,108(sp)
    97a8:	00c001c4 	movi	r3,7
    97ac:	19426016 	blt	r3,r5,a130 <___vfiprintf_internal_r+0xe68>
    97b0:	d8c01d87 	ldb	r3,118(sp)
    97b4:	42000204 	addi	r8,r8,8
    97b8:	29000044 	addi	r4,r5,1
    97bc:	1801b31e 	bne	r3,zero,9e8c <___vfiprintf_internal_r+0xbc4>
    97c0:	7001c026 	beq	r14,zero,9ec4 <___vfiprintf_internal_r+0xbfc>
    97c4:	d8c01d04 	addi	r3,sp,116
    97c8:	10800084 	addi	r2,r2,2
    97cc:	40c00015 	stw	r3,0(r8)
    97d0:	00c00084 	movi	r3,2
    97d4:	40c00115 	stw	r3,4(r8)
    97d8:	d8801c15 	stw	r2,112(sp)
    97dc:	d9001b15 	stw	r4,108(sp)
    97e0:	00c001c4 	movi	r3,7
    97e4:	1902650e 	bge	r3,r4,a17c <___vfiprintf_internal_r+0xeb4>
    97e8:	10029a1e 	bne	r2,zero,a254 <___vfiprintf_internal_r+0xf8c>
    97ec:	00c02004 	movi	r3,128
    97f0:	01000044 	movi	r4,1
    97f4:	000b883a 	mov	r5,zero
    97f8:	d811883a 	mov	r8,sp
    97fc:	e0c1b31e 	bne	fp,r3,9ecc <___vfiprintf_internal_r+0xc04>
    9800:	8cb9c83a 	sub	fp,r17,r18
    9804:	0701b10e 	bge	zero,fp,9ecc <___vfiprintf_internal_r+0xc04>
    9808:	01c00404 	movi	r7,16
    980c:	3f03890e 	bge	r7,fp,a634 <___vfiprintf_internal_r+0x136c>
    9810:	00c00074 	movhi	r3,1
    9814:	18c52b04 	addi	r3,r3,5292
    9818:	d8c02415 	stw	r3,144(sp)
    981c:	8007883a 	mov	r3,r16
    9820:	034001c4 	movi	r13,7
    9824:	e021883a 	mov	r16,fp
    9828:	da402515 	stw	r9,148(sp)
    982c:	1839883a 	mov	fp,r3
    9830:	00000506 	br	9848 <___vfiprintf_internal_r+0x580>
    9834:	29800084 	addi	r6,r5,2
    9838:	42000204 	addi	r8,r8,8
    983c:	180b883a 	mov	r5,r3
    9840:	843ffc04 	addi	r16,r16,-16
    9844:	3c000d0e 	bge	r7,r16,987c <___vfiprintf_internal_r+0x5b4>
    9848:	10800404 	addi	r2,r2,16
    984c:	28c00044 	addi	r3,r5,1
    9850:	45c00015 	stw	r23,0(r8)
    9854:	41c00115 	stw	r7,4(r8)
    9858:	d8801c15 	stw	r2,112(sp)
    985c:	d8c01b15 	stw	r3,108(sp)
    9860:	68fff40e 	bge	r13,r3,9834 <__alt_data_end+0xff009834>
    9864:	1002241e 	bne	r2,zero,a0f8 <___vfiprintf_internal_r+0xe30>
    9868:	843ffc04 	addi	r16,r16,-16
    986c:	01800044 	movi	r6,1
    9870:	000b883a 	mov	r5,zero
    9874:	d811883a 	mov	r8,sp
    9878:	3c3ff316 	blt	r7,r16,9848 <__alt_data_end+0xff009848>
    987c:	da402517 	ldw	r9,148(sp)
    9880:	e007883a 	mov	r3,fp
    9884:	8039883a 	mov	fp,r16
    9888:	1821883a 	mov	r16,r3
    988c:	d8c02417 	ldw	r3,144(sp)
    9890:	1705883a 	add	r2,r2,fp
    9894:	47000115 	stw	fp,4(r8)
    9898:	40c00015 	stw	r3,0(r8)
    989c:	d8801c15 	stw	r2,112(sp)
    98a0:	d9801b15 	stw	r6,108(sp)
    98a4:	00c001c4 	movi	r3,7
    98a8:	19827616 	blt	r3,r6,a284 <___vfiprintf_internal_r+0xfbc>
    98ac:	4cf9c83a 	sub	fp,r9,r19
    98b0:	42000204 	addi	r8,r8,8
    98b4:	31000044 	addi	r4,r6,1
    98b8:	300b883a 	mov	r5,r6
    98bc:	07018516 	blt	zero,fp,9ed4 <___vfiprintf_internal_r+0xc0c>
    98c0:	9885883a 	add	r2,r19,r2
    98c4:	45400015 	stw	r21,0(r8)
    98c8:	44c00115 	stw	r19,4(r8)
    98cc:	d8801c15 	stw	r2,112(sp)
    98d0:	d9001b15 	stw	r4,108(sp)
    98d4:	00c001c4 	movi	r3,7
    98d8:	1901dd0e 	bge	r3,r4,a050 <___vfiprintf_internal_r+0xd88>
    98dc:	1002401e 	bne	r2,zero,a1e0 <___vfiprintf_internal_r+0xf18>
    98e0:	d8001b15 	stw	zero,108(sp)
    98e4:	a2c0010c 	andi	r11,r20,4
    98e8:	58000226 	beq	r11,zero,98f4 <___vfiprintf_internal_r+0x62c>
    98ec:	8ca7c83a 	sub	r19,r17,r18
    98f0:	04c2f216 	blt	zero,r19,a4bc <___vfiprintf_internal_r+0x11f4>
    98f4:	8c80010e 	bge	r17,r18,98fc <___vfiprintf_internal_r+0x634>
    98f8:	9023883a 	mov	r17,r18
    98fc:	da802317 	ldw	r10,140(sp)
    9900:	5455883a 	add	r10,r10,r17
    9904:	da802315 	stw	r10,140(sp)
    9908:	d8001b15 	stw	zero,108(sp)
    990c:	d811883a 	mov	r8,sp
    9910:	003ea206 	br	939c <__alt_data_end+0xff00939c>
    9914:	a5000814 	ori	r20,r20,32
    9918:	80c00007 	ldb	r3,0(r16)
    991c:	003ec906 	br	9444 <__alt_data_end+0xff009444>
    9920:	80c00007 	ldb	r3,0(r16)
    9924:	1b030926 	beq	r3,r12,a54c <___vfiprintf_internal_r+0x1284>
    9928:	a5000414 	ori	r20,r20,16
    992c:	003ec506 	br	9444 <__alt_data_end+0xff009444>
    9930:	21003fcc 	andi	r4,r4,255
    9934:	20035e1e 	bne	r4,zero,a6b0 <___vfiprintf_internal_r+0x13e8>
    9938:	a080080c 	andi	r2,r20,32
    993c:	1002a526 	beq	r2,zero,a3d4 <___vfiprintf_internal_r+0x110c>
    9940:	da802217 	ldw	r10,136(sp)
    9944:	50800017 	ldw	r2,0(r10)
    9948:	da802317 	ldw	r10,140(sp)
    994c:	5007d7fa 	srai	r3,r10,31
    9950:	da802217 	ldw	r10,136(sp)
    9954:	10c00115 	stw	r3,4(r2)
    9958:	52800104 	addi	r10,r10,4
    995c:	da802215 	stw	r10,136(sp)
    9960:	da802317 	ldw	r10,140(sp)
    9964:	12800015 	stw	r10,0(r2)
    9968:	003e8c06 	br	939c <__alt_data_end+0xff00939c>
    996c:	21003fcc 	andi	r4,r4,255
    9970:	2003511e 	bne	r4,zero,a6b8 <___vfiprintf_internal_r+0x13f0>
    9974:	a080080c 	andi	r2,r20,32
    9978:	1000a126 	beq	r2,zero,9c00 <___vfiprintf_internal_r+0x938>
    997c:	da802217 	ldw	r10,136(sp)
    9980:	d8001d85 	stb	zero,118(sp)
    9984:	50800204 	addi	r2,r10,8
    9988:	54800017 	ldw	r18,0(r10)
    998c:	54c00117 	ldw	r19,4(r10)
    9990:	4802b416 	blt	r9,zero,a464 <___vfiprintf_internal_r+0x119c>
    9994:	013fdfc4 	movi	r4,-129
    9998:	94c6b03a 	or	r3,r18,r19
    999c:	d8802215 	stw	r2,136(sp)
    99a0:	a128703a 	and	r20,r20,r4
    99a4:	1800a226 	beq	r3,zero,9c30 <___vfiprintf_internal_r+0x968>
    99a8:	0039883a 	mov	fp,zero
    99ac:	dd401a04 	addi	r21,sp,104
    99b0:	9006d0fa 	srli	r3,r18,3
    99b4:	9808977a 	slli	r4,r19,29
    99b8:	9826d0fa 	srli	r19,r19,3
    99bc:	948001cc 	andi	r18,r18,7
    99c0:	90800c04 	addi	r2,r18,48
    99c4:	ad7fffc4 	addi	r21,r21,-1
    99c8:	20e4b03a 	or	r18,r4,r3
    99cc:	a8800005 	stb	r2,0(r21)
    99d0:	94c6b03a 	or	r3,r18,r19
    99d4:	183ff61e 	bne	r3,zero,99b0 <__alt_data_end+0xff0099b0>
    99d8:	a0c0004c 	andi	r3,r20,1
    99dc:	18005926 	beq	r3,zero,9b44 <___vfiprintf_internal_r+0x87c>
    99e0:	10803fcc 	andi	r2,r2,255
    99e4:	1080201c 	xori	r2,r2,128
    99e8:	10bfe004 	addi	r2,r2,-128
    99ec:	00c00c04 	movi	r3,48
    99f0:	10c05426 	beq	r2,r3,9b44 <___vfiprintf_internal_r+0x87c>
    99f4:	da801e17 	ldw	r10,120(sp)
    99f8:	a8bfffc4 	addi	r2,r21,-1
    99fc:	a8ffffc5 	stb	r3,-1(r21)
    9a00:	50a7c83a 	sub	r19,r10,r2
    9a04:	102b883a 	mov	r21,r2
    9a08:	003f2f06 	br	96c8 <__alt_data_end+0xff0096c8>
    9a0c:	21003fcc 	andi	r4,r4,255
    9a10:	2003421e 	bne	r4,zero,a71c <___vfiprintf_internal_r+0x1454>
    9a14:	00800074 	movhi	r2,1
    9a18:	1084ca04 	addi	r2,r2,4904
    9a1c:	d8802615 	stw	r2,152(sp)
    9a20:	a080080c 	andi	r2,r20,32
    9a24:	1000aa26 	beq	r2,zero,9cd0 <___vfiprintf_internal_r+0xa08>
    9a28:	da802217 	ldw	r10,136(sp)
    9a2c:	54800017 	ldw	r18,0(r10)
    9a30:	54c00117 	ldw	r19,4(r10)
    9a34:	52800204 	addi	r10,r10,8
    9a38:	da802215 	stw	r10,136(sp)
    9a3c:	a080004c 	andi	r2,r20,1
    9a40:	1001d226 	beq	r2,zero,a18c <___vfiprintf_internal_r+0xec4>
    9a44:	94c4b03a 	or	r2,r18,r19
    9a48:	1002351e 	bne	r2,zero,a320 <___vfiprintf_internal_r+0x1058>
    9a4c:	d8001d85 	stb	zero,118(sp)
    9a50:	48022216 	blt	r9,zero,a2dc <___vfiprintf_internal_r+0x1014>
    9a54:	00bfdfc4 	movi	r2,-129
    9a58:	a0a8703a 	and	r20,r20,r2
    9a5c:	003f1506 	br	96b4 <__alt_data_end+0xff0096b4>
    9a60:	da802217 	ldw	r10,136(sp)
    9a64:	04800044 	movi	r18,1
    9a68:	d8001d85 	stb	zero,118(sp)
    9a6c:	50800017 	ldw	r2,0(r10)
    9a70:	52800104 	addi	r10,r10,4
    9a74:	da802215 	stw	r10,136(sp)
    9a78:	d8801005 	stb	r2,64(sp)
    9a7c:	9027883a 	mov	r19,r18
    9a80:	dd401004 	addi	r21,sp,64
    9a84:	0013883a 	mov	r9,zero
    9a88:	003f1706 	br	96e8 <__alt_data_end+0xff0096e8>
    9a8c:	21003fcc 	andi	r4,r4,255
    9a90:	2003201e 	bne	r4,zero,a714 <___vfiprintf_internal_r+0x144c>
    9a94:	a080080c 	andi	r2,r20,32
    9a98:	10004b26 	beq	r2,zero,9bc8 <___vfiprintf_internal_r+0x900>
    9a9c:	da802217 	ldw	r10,136(sp)
    9aa0:	50800117 	ldw	r2,4(r10)
    9aa4:	54800017 	ldw	r18,0(r10)
    9aa8:	52800204 	addi	r10,r10,8
    9aac:	da802215 	stw	r10,136(sp)
    9ab0:	1027883a 	mov	r19,r2
    9ab4:	10022c16 	blt	r2,zero,a368 <___vfiprintf_internal_r+0x10a0>
    9ab8:	df001d83 	ldbu	fp,118(sp)
    9abc:	48007216 	blt	r9,zero,9c88 <___vfiprintf_internal_r+0x9c0>
    9ac0:	00ffdfc4 	movi	r3,-129
    9ac4:	94c4b03a 	or	r2,r18,r19
    9ac8:	a0e8703a 	and	r20,r20,r3
    9acc:	1000cc26 	beq	r2,zero,9e00 <___vfiprintf_internal_r+0xb38>
    9ad0:	98021026 	beq	r19,zero,a314 <___vfiprintf_internal_r+0x104c>
    9ad4:	dc402415 	stw	r17,144(sp)
    9ad8:	dc002515 	stw	r16,148(sp)
    9adc:	9823883a 	mov	r17,r19
    9ae0:	9021883a 	mov	r16,r18
    9ae4:	dd401a04 	addi	r21,sp,104
    9ae8:	4825883a 	mov	r18,r9
    9aec:	4027883a 	mov	r19,r8
    9af0:	8009883a 	mov	r4,r16
    9af4:	880b883a 	mov	r5,r17
    9af8:	01800284 	movi	r6,10
    9afc:	000f883a 	mov	r7,zero
    9b00:	000b6a80 	call	b6a8 <__umoddi3>
    9b04:	10800c04 	addi	r2,r2,48
    9b08:	ad7fffc4 	addi	r21,r21,-1
    9b0c:	8009883a 	mov	r4,r16
    9b10:	880b883a 	mov	r5,r17
    9b14:	a8800005 	stb	r2,0(r21)
    9b18:	01800284 	movi	r6,10
    9b1c:	000f883a 	mov	r7,zero
    9b20:	000b1300 	call	b130 <__udivdi3>
    9b24:	1021883a 	mov	r16,r2
    9b28:	10c4b03a 	or	r2,r2,r3
    9b2c:	1823883a 	mov	r17,r3
    9b30:	103fef1e 	bne	r2,zero,9af0 <__alt_data_end+0xff009af0>
    9b34:	dc402417 	ldw	r17,144(sp)
    9b38:	dc002517 	ldw	r16,148(sp)
    9b3c:	9013883a 	mov	r9,r18
    9b40:	9811883a 	mov	r8,r19
    9b44:	da801e17 	ldw	r10,120(sp)
    9b48:	5567c83a 	sub	r19,r10,r21
    9b4c:	003ede06 	br	96c8 <__alt_data_end+0xff0096c8>
    9b50:	38803fcc 	andi	r2,r7,255
    9b54:	1080201c 	xori	r2,r2,128
    9b58:	10bfe004 	addi	r2,r2,-128
    9b5c:	1002371e 	bne	r2,zero,a43c <___vfiprintf_internal_r+0x1174>
    9b60:	01000044 	movi	r4,1
    9b64:	01c00804 	movi	r7,32
    9b68:	80c00007 	ldb	r3,0(r16)
    9b6c:	003e3506 	br	9444 <__alt_data_end+0xff009444>
    9b70:	a5000054 	ori	r20,r20,1
    9b74:	80c00007 	ldb	r3,0(r16)
    9b78:	003e3206 	br	9444 <__alt_data_end+0xff009444>
    9b7c:	a5002014 	ori	r20,r20,128
    9b80:	80c00007 	ldb	r3,0(r16)
    9b84:	003e2f06 	br	9444 <__alt_data_end+0xff009444>
    9b88:	8015883a 	mov	r10,r16
    9b8c:	0023883a 	mov	r17,zero
    9b90:	18bff404 	addi	r2,r3,-48
    9b94:	50c00007 	ldb	r3,0(r10)
    9b98:	8c4002a4 	muli	r17,r17,10
    9b9c:	84000044 	addi	r16,r16,1
    9ba0:	8015883a 	mov	r10,r16
    9ba4:	1463883a 	add	r17,r2,r17
    9ba8:	18bff404 	addi	r2,r3,-48
    9bac:	30bff92e 	bgeu	r6,r2,9b94 <__alt_data_end+0xff009b94>
    9bb0:	003e2506 	br	9448 <__alt_data_end+0xff009448>
    9bb4:	21003fcc 	andi	r4,r4,255
    9bb8:	2002d41e 	bne	r4,zero,a70c <___vfiprintf_internal_r+0x1444>
    9bbc:	a5000414 	ori	r20,r20,16
    9bc0:	a080080c 	andi	r2,r20,32
    9bc4:	103fb51e 	bne	r2,zero,9a9c <__alt_data_end+0xff009a9c>
    9bc8:	a080040c 	andi	r2,r20,16
    9bcc:	1001f826 	beq	r2,zero,a3b0 <___vfiprintf_internal_r+0x10e8>
    9bd0:	da802217 	ldw	r10,136(sp)
    9bd4:	54800017 	ldw	r18,0(r10)
    9bd8:	52800104 	addi	r10,r10,4
    9bdc:	da802215 	stw	r10,136(sp)
    9be0:	9027d7fa 	srai	r19,r18,31
    9be4:	9805883a 	mov	r2,r19
    9be8:	003fb206 	br	9ab4 <__alt_data_end+0xff009ab4>
    9bec:	21003fcc 	andi	r4,r4,255
    9bf0:	2002c41e 	bne	r4,zero,a704 <___vfiprintf_internal_r+0x143c>
    9bf4:	a5000414 	ori	r20,r20,16
    9bf8:	a080080c 	andi	r2,r20,32
    9bfc:	103f5f1e 	bne	r2,zero,997c <__alt_data_end+0xff00997c>
    9c00:	a080040c 	andi	r2,r20,16
    9c04:	10020f26 	beq	r2,zero,a444 <___vfiprintf_internal_r+0x117c>
    9c08:	da802217 	ldw	r10,136(sp)
    9c0c:	d8001d85 	stb	zero,118(sp)
    9c10:	0027883a 	mov	r19,zero
    9c14:	50800104 	addi	r2,r10,4
    9c18:	54800017 	ldw	r18,0(r10)
    9c1c:	48021116 	blt	r9,zero,a464 <___vfiprintf_internal_r+0x119c>
    9c20:	00ffdfc4 	movi	r3,-129
    9c24:	d8802215 	stw	r2,136(sp)
    9c28:	a0e8703a 	and	r20,r20,r3
    9c2c:	903f5e1e 	bne	r18,zero,99a8 <__alt_data_end+0xff0099a8>
    9c30:	0039883a 	mov	fp,zero
    9c34:	4802a626 	beq	r9,zero,a6d0 <___vfiprintf_internal_r+0x1408>
    9c38:	0025883a 	mov	r18,zero
    9c3c:	0027883a 	mov	r19,zero
    9c40:	003f5a06 	br	99ac <__alt_data_end+0xff0099ac>
    9c44:	21003fcc 	andi	r4,r4,255
    9c48:	20029f1e 	bne	r4,zero,a6c8 <___vfiprintf_internal_r+0x1400>
    9c4c:	a5000414 	ori	r20,r20,16
    9c50:	a080080c 	andi	r2,r20,32
    9c54:	10005e1e 	bne	r2,zero,9dd0 <___vfiprintf_internal_r+0xb08>
    9c58:	a080040c 	andi	r2,r20,16
    9c5c:	1001a21e 	bne	r2,zero,a2e8 <___vfiprintf_internal_r+0x1020>
    9c60:	a080100c 	andi	r2,r20,64
    9c64:	d8001d85 	stb	zero,118(sp)
    9c68:	da802217 	ldw	r10,136(sp)
    9c6c:	1002231e 	bne	r2,zero,a4fc <___vfiprintf_internal_r+0x1234>
    9c70:	50800104 	addi	r2,r10,4
    9c74:	54800017 	ldw	r18,0(r10)
    9c78:	0027883a 	mov	r19,zero
    9c7c:	4801a00e 	bge	r9,zero,a300 <___vfiprintf_internal_r+0x1038>
    9c80:	d8802215 	stw	r2,136(sp)
    9c84:	0039883a 	mov	fp,zero
    9c88:	94c4b03a 	or	r2,r18,r19
    9c8c:	103f901e 	bne	r2,zero,9ad0 <__alt_data_end+0xff009ad0>
    9c90:	00800044 	movi	r2,1
    9c94:	10803fcc 	andi	r2,r2,255
    9c98:	00c00044 	movi	r3,1
    9c9c:	10c05926 	beq	r2,r3,9e04 <___vfiprintf_internal_r+0xb3c>
    9ca0:	00c00084 	movi	r3,2
    9ca4:	10ffe41e 	bne	r2,r3,9c38 <__alt_data_end+0xff009c38>
    9ca8:	0025883a 	mov	r18,zero
    9cac:	0027883a 	mov	r19,zero
    9cb0:	00013d06 	br	a1a8 <___vfiprintf_internal_r+0xee0>
    9cb4:	21003fcc 	andi	r4,r4,255
    9cb8:	2002811e 	bne	r4,zero,a6c0 <___vfiprintf_internal_r+0x13f8>
    9cbc:	00800074 	movhi	r2,1
    9cc0:	1084c504 	addi	r2,r2,4884
    9cc4:	d8802615 	stw	r2,152(sp)
    9cc8:	a080080c 	andi	r2,r20,32
    9ccc:	103f561e 	bne	r2,zero,9a28 <__alt_data_end+0xff009a28>
    9cd0:	a080040c 	andi	r2,r20,16
    9cd4:	1001d126 	beq	r2,zero,a41c <___vfiprintf_internal_r+0x1154>
    9cd8:	da802217 	ldw	r10,136(sp)
    9cdc:	0027883a 	mov	r19,zero
    9ce0:	54800017 	ldw	r18,0(r10)
    9ce4:	52800104 	addi	r10,r10,4
    9ce8:	da802215 	stw	r10,136(sp)
    9cec:	003f5306 	br	9a3c <__alt_data_end+0xff009a3c>
    9cf0:	da802217 	ldw	r10,136(sp)
    9cf4:	d8001d85 	stb	zero,118(sp)
    9cf8:	55400017 	ldw	r21,0(r10)
    9cfc:	50c00104 	addi	r3,r10,4
    9d00:	a8024226 	beq	r21,zero,a60c <___vfiprintf_internal_r+0x1344>
    9d04:	48021816 	blt	r9,zero,a568 <___vfiprintf_internal_r+0x12a0>
    9d08:	480d883a 	mov	r6,r9
    9d0c:	000b883a 	mov	r5,zero
    9d10:	a809883a 	mov	r4,r21
    9d14:	d8c02a15 	stw	r3,168(sp)
    9d18:	da002b15 	stw	r8,172(sp)
    9d1c:	da402c15 	stw	r9,176(sp)
    9d20:	00075180 	call	7518 <memchr>
    9d24:	d8c02a17 	ldw	r3,168(sp)
    9d28:	da002b17 	ldw	r8,172(sp)
    9d2c:	da402c17 	ldw	r9,176(sp)
    9d30:	10024826 	beq	r2,zero,a654 <___vfiprintf_internal_r+0x138c>
    9d34:	1567c83a 	sub	r19,r2,r21
    9d38:	df001d83 	ldbu	fp,118(sp)
    9d3c:	d8c02215 	stw	r3,136(sp)
    9d40:	0013883a 	mov	r9,zero
    9d44:	003e6006 	br	96c8 <__alt_data_end+0xff0096c8>
    9d48:	21003fcc 	andi	r4,r4,255
    9d4c:	203fc026 	beq	r4,zero,9c50 <__alt_data_end+0xff009c50>
    9d50:	d9c01d85 	stb	r7,118(sp)
    9d54:	003fbe06 	br	9c50 <__alt_data_end+0xff009c50>
    9d58:	da802217 	ldw	r10,136(sp)
    9d5c:	54400017 	ldw	r17,0(r10)
    9d60:	50800104 	addi	r2,r10,4
    9d64:	883e3b16 	blt	r17,zero,9654 <__alt_data_end+0xff009654>
    9d68:	d8802215 	stw	r2,136(sp)
    9d6c:	80c00007 	ldb	r3,0(r16)
    9d70:	003db406 	br	9444 <__alt_data_end+0xff009444>
    9d74:	01000044 	movi	r4,1
    9d78:	01c00ac4 	movi	r7,43
    9d7c:	80c00007 	ldb	r3,0(r16)
    9d80:	003db006 	br	9444 <__alt_data_end+0xff009444>
    9d84:	80c00007 	ldb	r3,0(r16)
    9d88:	82800044 	addi	r10,r16,1
    9d8c:	1b423c26 	beq	r3,r13,a680 <___vfiprintf_internal_r+0x13b8>
    9d90:	18bff404 	addi	r2,r3,-48
    9d94:	0013883a 	mov	r9,zero
    9d98:	30822b36 	bltu	r6,r2,a648 <___vfiprintf_internal_r+0x1380>
    9d9c:	50c00007 	ldb	r3,0(r10)
    9da0:	4a4002a4 	muli	r9,r9,10
    9da4:	54000044 	addi	r16,r10,1
    9da8:	8015883a 	mov	r10,r16
    9dac:	4893883a 	add	r9,r9,r2
    9db0:	18bff404 	addi	r2,r3,-48
    9db4:	30bff92e 	bgeu	r6,r2,9d9c <__alt_data_end+0xff009d9c>
    9db8:	483da30e 	bge	r9,zero,9448 <__alt_data_end+0xff009448>
    9dbc:	027fffc4 	movi	r9,-1
    9dc0:	003da106 	br	9448 <__alt_data_end+0xff009448>
    9dc4:	a5001014 	ori	r20,r20,64
    9dc8:	80c00007 	ldb	r3,0(r16)
    9dcc:	003d9d06 	br	9444 <__alt_data_end+0xff009444>
    9dd0:	da802217 	ldw	r10,136(sp)
    9dd4:	d8001d85 	stb	zero,118(sp)
    9dd8:	50c00204 	addi	r3,r10,8
    9ddc:	54800017 	ldw	r18,0(r10)
    9de0:	54c00117 	ldw	r19,4(r10)
    9de4:	4801ca16 	blt	r9,zero,a510 <___vfiprintf_internal_r+0x1248>
    9de8:	013fdfc4 	movi	r4,-129
    9dec:	94c4b03a 	or	r2,r18,r19
    9df0:	d8c02215 	stw	r3,136(sp)
    9df4:	a128703a 	and	r20,r20,r4
    9df8:	0039883a 	mov	fp,zero
    9dfc:	103f341e 	bne	r2,zero,9ad0 <__alt_data_end+0xff009ad0>
    9e00:	483e2e26 	beq	r9,zero,96bc <__alt_data_end+0xff0096bc>
    9e04:	0025883a 	mov	r18,zero
    9e08:	94800c04 	addi	r18,r18,48
    9e0c:	dc8019c5 	stb	r18,103(sp)
    9e10:	dcc02717 	ldw	r19,156(sp)
    9e14:	dd4019c4 	addi	r21,sp,103
    9e18:	003e2b06 	br	96c8 <__alt_data_end+0xff0096c8>
    9e1c:	21003fcc 	andi	r4,r4,255
    9e20:	2002361e 	bne	r4,zero,a6fc <___vfiprintf_internal_r+0x1434>
    9e24:	1801c126 	beq	r3,zero,a52c <___vfiprintf_internal_r+0x1264>
    9e28:	04800044 	movi	r18,1
    9e2c:	d8c01005 	stb	r3,64(sp)
    9e30:	d8001d85 	stb	zero,118(sp)
    9e34:	9027883a 	mov	r19,r18
    9e38:	dd401004 	addi	r21,sp,64
    9e3c:	003f1106 	br	9a84 <__alt_data_end+0xff009a84>
    9e40:	d9402117 	ldw	r5,132(sp)
    9e44:	d9002017 	ldw	r4,128(sp)
    9e48:	d9801a04 	addi	r6,sp,104
    9e4c:	d9c02b15 	stw	r7,172(sp)
    9e50:	dbc02a15 	stw	r15,168(sp)
    9e54:	00091b40 	call	91b4 <__sprint_r.part.0>
    9e58:	d9c02b17 	ldw	r7,172(sp)
    9e5c:	dbc02a17 	ldw	r15,168(sp)
    9e60:	10006d1e 	bne	r2,zero,a018 <___vfiprintf_internal_r+0xd50>
    9e64:	d9801b17 	ldw	r6,108(sp)
    9e68:	d8801c17 	ldw	r2,112(sp)
    9e6c:	d811883a 	mov	r8,sp
    9e70:	31400044 	addi	r5,r6,1
    9e74:	003e3306 	br	9744 <__alt_data_end+0xff009744>
    9e78:	d9401b17 	ldw	r5,108(sp)
    9e7c:	d8801c17 	ldw	r2,112(sp)
    9e80:	29000044 	addi	r4,r5,1
    9e84:	d8c01d87 	ldb	r3,118(sp)
    9e88:	183e4d26 	beq	r3,zero,97c0 <__alt_data_end+0xff0097c0>
    9e8c:	00c00044 	movi	r3,1
    9e90:	d9401d84 	addi	r5,sp,118
    9e94:	10c5883a 	add	r2,r2,r3
    9e98:	41400015 	stw	r5,0(r8)
    9e9c:	40c00115 	stw	r3,4(r8)
    9ea0:	d8801c15 	stw	r2,112(sp)
    9ea4:	d9001b15 	stw	r4,108(sp)
    9ea8:	014001c4 	movi	r5,7
    9eac:	2900a90e 	bge	r5,r4,a154 <___vfiprintf_internal_r+0xe8c>
    9eb0:	1000da1e 	bne	r2,zero,a21c <___vfiprintf_internal_r+0xf54>
    9eb4:	7000ab1e 	bne	r14,zero,a164 <___vfiprintf_internal_r+0xe9c>
    9eb8:	000b883a 	mov	r5,zero
    9ebc:	1809883a 	mov	r4,r3
    9ec0:	d811883a 	mov	r8,sp
    9ec4:	00c02004 	movi	r3,128
    9ec8:	e0fe4d26 	beq	fp,r3,9800 <__alt_data_end+0xff009800>
    9ecc:	4cf9c83a 	sub	fp,r9,r19
    9ed0:	073e7b0e 	bge	zero,fp,98c0 <__alt_data_end+0xff0098c0>
    9ed4:	01c00404 	movi	r7,16
    9ed8:	3f01900e 	bge	r7,fp,a51c <___vfiprintf_internal_r+0x1254>
    9edc:	00c00074 	movhi	r3,1
    9ee0:	18c52b04 	addi	r3,r3,5292
    9ee4:	d8c02415 	stw	r3,144(sp)
    9ee8:	034001c4 	movi	r13,7
    9eec:	00000506 	br	9f04 <___vfiprintf_internal_r+0xc3c>
    9ef0:	29000084 	addi	r4,r5,2
    9ef4:	42000204 	addi	r8,r8,8
    9ef8:	180b883a 	mov	r5,r3
    9efc:	e73ffc04 	addi	fp,fp,-16
    9f00:	3f000d0e 	bge	r7,fp,9f38 <___vfiprintf_internal_r+0xc70>
    9f04:	10800404 	addi	r2,r2,16
    9f08:	28c00044 	addi	r3,r5,1
    9f0c:	45c00015 	stw	r23,0(r8)
    9f10:	41c00115 	stw	r7,4(r8)
    9f14:	d8801c15 	stw	r2,112(sp)
    9f18:	d8c01b15 	stw	r3,108(sp)
    9f1c:	68fff40e 	bge	r13,r3,9ef0 <__alt_data_end+0xff009ef0>
    9f20:	1000101e 	bne	r2,zero,9f64 <___vfiprintf_internal_r+0xc9c>
    9f24:	e73ffc04 	addi	fp,fp,-16
    9f28:	01000044 	movi	r4,1
    9f2c:	000b883a 	mov	r5,zero
    9f30:	d811883a 	mov	r8,sp
    9f34:	3f3ff316 	blt	r7,fp,9f04 <__alt_data_end+0xff009f04>
    9f38:	da802417 	ldw	r10,144(sp)
    9f3c:	1705883a 	add	r2,r2,fp
    9f40:	47000115 	stw	fp,4(r8)
    9f44:	42800015 	stw	r10,0(r8)
    9f48:	d8801c15 	stw	r2,112(sp)
    9f4c:	d9001b15 	stw	r4,108(sp)
    9f50:	00c001c4 	movi	r3,7
    9f54:	19003616 	blt	r3,r4,a030 <___vfiprintf_internal_r+0xd68>
    9f58:	42000204 	addi	r8,r8,8
    9f5c:	21000044 	addi	r4,r4,1
    9f60:	003e5706 	br	98c0 <__alt_data_end+0xff0098c0>
    9f64:	d9402117 	ldw	r5,132(sp)
    9f68:	d9002017 	ldw	r4,128(sp)
    9f6c:	d9801a04 	addi	r6,sp,104
    9f70:	d9c02b15 	stw	r7,172(sp)
    9f74:	db402a15 	stw	r13,168(sp)
    9f78:	00091b40 	call	91b4 <__sprint_r.part.0>
    9f7c:	d9c02b17 	ldw	r7,172(sp)
    9f80:	db402a17 	ldw	r13,168(sp)
    9f84:	1000241e 	bne	r2,zero,a018 <___vfiprintf_internal_r+0xd50>
    9f88:	d9401b17 	ldw	r5,108(sp)
    9f8c:	d8801c17 	ldw	r2,112(sp)
    9f90:	d811883a 	mov	r8,sp
    9f94:	29000044 	addi	r4,r5,1
    9f98:	003fd806 	br	9efc <__alt_data_end+0xff009efc>
    9f9c:	d9401b17 	ldw	r5,108(sp)
    9fa0:	00c00074 	movhi	r3,1
    9fa4:	18c52f04 	addi	r3,r3,5308
    9fa8:	d8c02415 	stw	r3,144(sp)
    9fac:	29400044 	addi	r5,r5,1
    9fb0:	d8c02417 	ldw	r3,144(sp)
    9fb4:	14c5883a 	add	r2,r2,r19
    9fb8:	44c00115 	stw	r19,4(r8)
    9fbc:	40c00015 	stw	r3,0(r8)
    9fc0:	d8801c15 	stw	r2,112(sp)
    9fc4:	d9401b15 	stw	r5,108(sp)
    9fc8:	00c001c4 	movi	r3,7
    9fcc:	1940070e 	bge	r3,r5,9fec <___vfiprintf_internal_r+0xd24>
    9fd0:	103e4826 	beq	r2,zero,98f4 <__alt_data_end+0xff0098f4>
    9fd4:	d9402117 	ldw	r5,132(sp)
    9fd8:	d9002017 	ldw	r4,128(sp)
    9fdc:	d9801a04 	addi	r6,sp,104
    9fe0:	00091b40 	call	91b4 <__sprint_r.part.0>
    9fe4:	10000c1e 	bne	r2,zero,a018 <___vfiprintf_internal_r+0xd50>
    9fe8:	d8801c17 	ldw	r2,112(sp)
    9fec:	8c80010e 	bge	r17,r18,9ff4 <___vfiprintf_internal_r+0xd2c>
    9ff0:	9023883a 	mov	r17,r18
    9ff4:	da802317 	ldw	r10,140(sp)
    9ff8:	5455883a 	add	r10,r10,r17
    9ffc:	da802315 	stw	r10,140(sp)
    a000:	103e4126 	beq	r2,zero,9908 <__alt_data_end+0xff009908>
    a004:	d9402117 	ldw	r5,132(sp)
    a008:	d9002017 	ldw	r4,128(sp)
    a00c:	d9801a04 	addi	r6,sp,104
    a010:	00091b40 	call	91b4 <__sprint_r.part.0>
    a014:	103e3c26 	beq	r2,zero,9908 <__alt_data_end+0xff009908>
    a018:	dd002117 	ldw	r20,132(sp)
    a01c:	a080030b 	ldhu	r2,12(r20)
    a020:	1080100c 	andi	r2,r2,64
    a024:	1001231e 	bne	r2,zero,a4b4 <___vfiprintf_internal_r+0x11ec>
    a028:	d8802317 	ldw	r2,140(sp)
    a02c:	003d7b06 	br	961c <__alt_data_end+0xff00961c>
    a030:	1000991e 	bne	r2,zero,a298 <___vfiprintf_internal_r+0xfd0>
    a034:	00c00044 	movi	r3,1
    a038:	9805883a 	mov	r2,r19
    a03c:	dd400015 	stw	r21,0(sp)
    a040:	dcc00115 	stw	r19,4(sp)
    a044:	dcc01c15 	stw	r19,112(sp)
    a048:	d8c01b15 	stw	r3,108(sp)
    a04c:	d811883a 	mov	r8,sp
    a050:	42000204 	addi	r8,r8,8
    a054:	a2c0010c 	andi	r11,r20,4
    a058:	583fe426 	beq	r11,zero,9fec <__alt_data_end+0xff009fec>
    a05c:	8ca7c83a 	sub	r19,r17,r18
    a060:	04ffe20e 	bge	zero,r19,9fec <__alt_data_end+0xff009fec>
    a064:	01c00404 	movi	r7,16
    a068:	3cffcc0e 	bge	r7,r19,9f9c <__alt_data_end+0xff009f9c>
    a06c:	02800074 	movhi	r10,1
    a070:	52852f04 	addi	r10,r10,5308
    a074:	d9001b17 	ldw	r4,108(sp)
    a078:	da802415 	stw	r10,144(sp)
    a07c:	382b883a 	mov	r21,r7
    a080:	050001c4 	movi	r20,7
    a084:	df002017 	ldw	fp,128(sp)
    a088:	00000506 	br	a0a0 <___vfiprintf_internal_r+0xdd8>
    a08c:	21400084 	addi	r5,r4,2
    a090:	42000204 	addi	r8,r8,8
    a094:	1809883a 	mov	r4,r3
    a098:	9cfffc04 	addi	r19,r19,-16
    a09c:	acffc40e 	bge	r21,r19,9fb0 <__alt_data_end+0xff009fb0>
    a0a0:	10800404 	addi	r2,r2,16
    a0a4:	20c00044 	addi	r3,r4,1
    a0a8:	45800015 	stw	r22,0(r8)
    a0ac:	45400115 	stw	r21,4(r8)
    a0b0:	d8801c15 	stw	r2,112(sp)
    a0b4:	d8c01b15 	stw	r3,108(sp)
    a0b8:	a0fff40e 	bge	r20,r3,a08c <__alt_data_end+0xff00a08c>
    a0bc:	1000041e 	bne	r2,zero,a0d0 <___vfiprintf_internal_r+0xe08>
    a0c0:	01400044 	movi	r5,1
    a0c4:	0009883a 	mov	r4,zero
    a0c8:	d811883a 	mov	r8,sp
    a0cc:	003ff206 	br	a098 <__alt_data_end+0xff00a098>
    a0d0:	d9402117 	ldw	r5,132(sp)
    a0d4:	d9801a04 	addi	r6,sp,104
    a0d8:	e009883a 	mov	r4,fp
    a0dc:	00091b40 	call	91b4 <__sprint_r.part.0>
    a0e0:	103fcd1e 	bne	r2,zero,a018 <__alt_data_end+0xff00a018>
    a0e4:	d9001b17 	ldw	r4,108(sp)
    a0e8:	d8801c17 	ldw	r2,112(sp)
    a0ec:	d811883a 	mov	r8,sp
    a0f0:	21400044 	addi	r5,r4,1
    a0f4:	003fe806 	br	a098 <__alt_data_end+0xff00a098>
    a0f8:	d9402117 	ldw	r5,132(sp)
    a0fc:	d9002017 	ldw	r4,128(sp)
    a100:	d9801a04 	addi	r6,sp,104
    a104:	d9c02b15 	stw	r7,172(sp)
    a108:	db402a15 	stw	r13,168(sp)
    a10c:	00091b40 	call	91b4 <__sprint_r.part.0>
    a110:	d9c02b17 	ldw	r7,172(sp)
    a114:	db402a17 	ldw	r13,168(sp)
    a118:	103fbf1e 	bne	r2,zero,a018 <__alt_data_end+0xff00a018>
    a11c:	d9401b17 	ldw	r5,108(sp)
    a120:	d8801c17 	ldw	r2,112(sp)
    a124:	d811883a 	mov	r8,sp
    a128:	29800044 	addi	r6,r5,1
    a12c:	003dc406 	br	9840 <__alt_data_end+0xff009840>
    a130:	1000d21e 	bne	r2,zero,a47c <___vfiprintf_internal_r+0x11b4>
    a134:	d8c01d87 	ldb	r3,118(sp)
    a138:	18009526 	beq	r3,zero,a390 <___vfiprintf_internal_r+0x10c8>
    a13c:	00800044 	movi	r2,1
    a140:	d8c01d84 	addi	r3,sp,118
    a144:	1009883a 	mov	r4,r2
    a148:	d8c00015 	stw	r3,0(sp)
    a14c:	d8800115 	stw	r2,4(sp)
    a150:	d811883a 	mov	r8,sp
    a154:	200b883a 	mov	r5,r4
    a158:	42000204 	addi	r8,r8,8
    a15c:	21000044 	addi	r4,r4,1
    a160:	003d9706 	br	97c0 <__alt_data_end+0xff0097c0>
    a164:	d9001d04 	addi	r4,sp,116
    a168:	00800084 	movi	r2,2
    a16c:	d9000015 	stw	r4,0(sp)
    a170:	d8800115 	stw	r2,4(sp)
    a174:	1809883a 	mov	r4,r3
    a178:	d811883a 	mov	r8,sp
    a17c:	200b883a 	mov	r5,r4
    a180:	42000204 	addi	r8,r8,8
    a184:	21000044 	addi	r4,r4,1
    a188:	003f4e06 	br	9ec4 <__alt_data_end+0xff009ec4>
    a18c:	d8001d85 	stb	zero,118(sp)
    a190:	48005016 	blt	r9,zero,a2d4 <___vfiprintf_internal_r+0x100c>
    a194:	00ffdfc4 	movi	r3,-129
    a198:	94c4b03a 	or	r2,r18,r19
    a19c:	a0e8703a 	and	r20,r20,r3
    a1a0:	103d4426 	beq	r2,zero,96b4 <__alt_data_end+0xff0096b4>
    a1a4:	0039883a 	mov	fp,zero
    a1a8:	d9002617 	ldw	r4,152(sp)
    a1ac:	dd401a04 	addi	r21,sp,104
    a1b0:	908003cc 	andi	r2,r18,15
    a1b4:	9806973a 	slli	r3,r19,28
    a1b8:	2085883a 	add	r2,r4,r2
    a1bc:	9024d13a 	srli	r18,r18,4
    a1c0:	10800003 	ldbu	r2,0(r2)
    a1c4:	9826d13a 	srli	r19,r19,4
    a1c8:	ad7fffc4 	addi	r21,r21,-1
    a1cc:	1ca4b03a 	or	r18,r3,r18
    a1d0:	a8800005 	stb	r2,0(r21)
    a1d4:	94c4b03a 	or	r2,r18,r19
    a1d8:	103ff51e 	bne	r2,zero,a1b0 <__alt_data_end+0xff00a1b0>
    a1dc:	003e5906 	br	9b44 <__alt_data_end+0xff009b44>
    a1e0:	d9402117 	ldw	r5,132(sp)
    a1e4:	d9002017 	ldw	r4,128(sp)
    a1e8:	d9801a04 	addi	r6,sp,104
    a1ec:	00091b40 	call	91b4 <__sprint_r.part.0>
    a1f0:	103f891e 	bne	r2,zero,a018 <__alt_data_end+0xff00a018>
    a1f4:	d8801c17 	ldw	r2,112(sp)
    a1f8:	d811883a 	mov	r8,sp
    a1fc:	003f9506 	br	a054 <__alt_data_end+0xff00a054>
    a200:	d9402117 	ldw	r5,132(sp)
    a204:	d9002017 	ldw	r4,128(sp)
    a208:	d9801a04 	addi	r6,sp,104
    a20c:	00091b40 	call	91b4 <__sprint_r.part.0>
    a210:	103f811e 	bne	r2,zero,a018 <__alt_data_end+0xff00a018>
    a214:	d811883a 	mov	r8,sp
    a218:	003ced06 	br	95d0 <__alt_data_end+0xff0095d0>
    a21c:	d9402117 	ldw	r5,132(sp)
    a220:	d9002017 	ldw	r4,128(sp)
    a224:	d9801a04 	addi	r6,sp,104
    a228:	da402c15 	stw	r9,176(sp)
    a22c:	db802a15 	stw	r14,168(sp)
    a230:	00091b40 	call	91b4 <__sprint_r.part.0>
    a234:	da402c17 	ldw	r9,176(sp)
    a238:	db802a17 	ldw	r14,168(sp)
    a23c:	103f761e 	bne	r2,zero,a018 <__alt_data_end+0xff00a018>
    a240:	d9401b17 	ldw	r5,108(sp)
    a244:	d8801c17 	ldw	r2,112(sp)
    a248:	d811883a 	mov	r8,sp
    a24c:	29000044 	addi	r4,r5,1
    a250:	003d5b06 	br	97c0 <__alt_data_end+0xff0097c0>
    a254:	d9402117 	ldw	r5,132(sp)
    a258:	d9002017 	ldw	r4,128(sp)
    a25c:	d9801a04 	addi	r6,sp,104
    a260:	da402c15 	stw	r9,176(sp)
    a264:	00091b40 	call	91b4 <__sprint_r.part.0>
    a268:	da402c17 	ldw	r9,176(sp)
    a26c:	103f6a1e 	bne	r2,zero,a018 <__alt_data_end+0xff00a018>
    a270:	d9401b17 	ldw	r5,108(sp)
    a274:	d8801c17 	ldw	r2,112(sp)
    a278:	d811883a 	mov	r8,sp
    a27c:	29000044 	addi	r4,r5,1
    a280:	003f1006 	br	9ec4 <__alt_data_end+0xff009ec4>
    a284:	1000c31e 	bne	r2,zero,a594 <___vfiprintf_internal_r+0x12cc>
    a288:	01000044 	movi	r4,1
    a28c:	000b883a 	mov	r5,zero
    a290:	d811883a 	mov	r8,sp
    a294:	003f0d06 	br	9ecc <__alt_data_end+0xff009ecc>
    a298:	d9402117 	ldw	r5,132(sp)
    a29c:	d9002017 	ldw	r4,128(sp)
    a2a0:	d9801a04 	addi	r6,sp,104
    a2a4:	00091b40 	call	91b4 <__sprint_r.part.0>
    a2a8:	103f5b1e 	bne	r2,zero,a018 <__alt_data_end+0xff00a018>
    a2ac:	d9001b17 	ldw	r4,108(sp)
    a2b0:	d8801c17 	ldw	r2,112(sp)
    a2b4:	d811883a 	mov	r8,sp
    a2b8:	21000044 	addi	r4,r4,1
    a2bc:	003d8006 	br	98c0 <__alt_data_end+0xff0098c0>
    a2c0:	01000074 	movhi	r4,1
    a2c4:	2104ca04 	addi	r4,r4,4904
    a2c8:	d9002615 	stw	r4,152(sp)
    a2cc:	d8c02215 	stw	r3,136(sp)
    a2d0:	1029883a 	mov	r20,r2
    a2d4:	94c4b03a 	or	r2,r18,r19
    a2d8:	103fb21e 	bne	r2,zero,a1a4 <__alt_data_end+0xff00a1a4>
    a2dc:	0039883a 	mov	fp,zero
    a2e0:	00800084 	movi	r2,2
    a2e4:	003e6b06 	br	9c94 <__alt_data_end+0xff009c94>
    a2e8:	da802217 	ldw	r10,136(sp)
    a2ec:	d8001d85 	stb	zero,118(sp)
    a2f0:	0027883a 	mov	r19,zero
    a2f4:	50800104 	addi	r2,r10,4
    a2f8:	54800017 	ldw	r18,0(r10)
    a2fc:	483e6016 	blt	r9,zero,9c80 <__alt_data_end+0xff009c80>
    a300:	00ffdfc4 	movi	r3,-129
    a304:	d8802215 	stw	r2,136(sp)
    a308:	a0e8703a 	and	r20,r20,r3
    a30c:	0039883a 	mov	fp,zero
    a310:	903ebb26 	beq	r18,zero,9e00 <__alt_data_end+0xff009e00>
    a314:	00800244 	movi	r2,9
    a318:	14bdee36 	bltu	r2,r18,9ad4 <__alt_data_end+0xff009ad4>
    a31c:	003eba06 	br	9e08 <__alt_data_end+0xff009e08>
    a320:	00800c04 	movi	r2,48
    a324:	d8c01d45 	stb	r3,117(sp)
    a328:	d8801d05 	stb	r2,116(sp)
    a32c:	d8001d85 	stb	zero,118(sp)
    a330:	a0c00094 	ori	r3,r20,2
    a334:	4800a916 	blt	r9,zero,a5dc <___vfiprintf_internal_r+0x1314>
    a338:	00bfdfc4 	movi	r2,-129
    a33c:	a096703a 	and	r11,r20,r2
    a340:	5d000094 	ori	r20,r11,2
    a344:	0039883a 	mov	fp,zero
    a348:	003f9706 	br	a1a8 <__alt_data_end+0xff00a1a8>
    a34c:	8025883a 	mov	r18,r16
    a350:	003c2e06 	br	940c <__alt_data_end+0xff00940c>
    a354:	00800074 	movhi	r2,1
    a358:	1084ca04 	addi	r2,r2,4904
    a35c:	0039883a 	mov	fp,zero
    a360:	d8802615 	stw	r2,152(sp)
    a364:	003f9006 	br	a1a8 <__alt_data_end+0xff00a1a8>
    a368:	04a5c83a 	sub	r18,zero,r18
    a36c:	07000b44 	movi	fp,45
    a370:	9004c03a 	cmpne	r2,r18,zero
    a374:	04e7c83a 	sub	r19,zero,r19
    a378:	df001d85 	stb	fp,118(sp)
    a37c:	98a7c83a 	sub	r19,r19,r2
    a380:	48009f16 	blt	r9,zero,a600 <___vfiprintf_internal_r+0x1338>
    a384:	00bfdfc4 	movi	r2,-129
    a388:	a0a8703a 	and	r20,r20,r2
    a38c:	003dd006 	br	9ad0 <__alt_data_end+0xff009ad0>
    a390:	70004c26 	beq	r14,zero,a4c4 <___vfiprintf_internal_r+0x11fc>
    a394:	00800084 	movi	r2,2
    a398:	d8c01d04 	addi	r3,sp,116
    a39c:	d8c00015 	stw	r3,0(sp)
    a3a0:	d8800115 	stw	r2,4(sp)
    a3a4:	01000044 	movi	r4,1
    a3a8:	d811883a 	mov	r8,sp
    a3ac:	003f7306 	br	a17c <__alt_data_end+0xff00a17c>
    a3b0:	a080100c 	andi	r2,r20,64
    a3b4:	da802217 	ldw	r10,136(sp)
    a3b8:	103e0626 	beq	r2,zero,9bd4 <__alt_data_end+0xff009bd4>
    a3bc:	5480000f 	ldh	r18,0(r10)
    a3c0:	52800104 	addi	r10,r10,4
    a3c4:	da802215 	stw	r10,136(sp)
    a3c8:	9027d7fa 	srai	r19,r18,31
    a3cc:	9805883a 	mov	r2,r19
    a3d0:	003db806 	br	9ab4 <__alt_data_end+0xff009ab4>
    a3d4:	a080040c 	andi	r2,r20,16
    a3d8:	1000091e 	bne	r2,zero,a400 <___vfiprintf_internal_r+0x1138>
    a3dc:	a2c0100c 	andi	r11,r20,64
    a3e0:	58000726 	beq	r11,zero,a400 <___vfiprintf_internal_r+0x1138>
    a3e4:	da802217 	ldw	r10,136(sp)
    a3e8:	50800017 	ldw	r2,0(r10)
    a3ec:	52800104 	addi	r10,r10,4
    a3f0:	da802215 	stw	r10,136(sp)
    a3f4:	da802317 	ldw	r10,140(sp)
    a3f8:	1280000d 	sth	r10,0(r2)
    a3fc:	003be706 	br	939c <__alt_data_end+0xff00939c>
    a400:	da802217 	ldw	r10,136(sp)
    a404:	50800017 	ldw	r2,0(r10)
    a408:	52800104 	addi	r10,r10,4
    a40c:	da802215 	stw	r10,136(sp)
    a410:	da802317 	ldw	r10,140(sp)
    a414:	12800015 	stw	r10,0(r2)
    a418:	003be006 	br	939c <__alt_data_end+0xff00939c>
    a41c:	a080100c 	andi	r2,r20,64
    a420:	da802217 	ldw	r10,136(sp)
    a424:	10003026 	beq	r2,zero,a4e8 <___vfiprintf_internal_r+0x1220>
    a428:	5480000b 	ldhu	r18,0(r10)
    a42c:	52800104 	addi	r10,r10,4
    a430:	0027883a 	mov	r19,zero
    a434:	da802215 	stw	r10,136(sp)
    a438:	003d8006 	br	9a3c <__alt_data_end+0xff009a3c>
    a43c:	80c00007 	ldb	r3,0(r16)
    a440:	003c0006 	br	9444 <__alt_data_end+0xff009444>
    a444:	a080100c 	andi	r2,r20,64
    a448:	d8001d85 	stb	zero,118(sp)
    a44c:	da802217 	ldw	r10,136(sp)
    a450:	1000201e 	bne	r2,zero,a4d4 <___vfiprintf_internal_r+0x120c>
    a454:	50800104 	addi	r2,r10,4
    a458:	54800017 	ldw	r18,0(r10)
    a45c:	0027883a 	mov	r19,zero
    a460:	483def0e 	bge	r9,zero,9c20 <__alt_data_end+0xff009c20>
    a464:	94c6b03a 	or	r3,r18,r19
    a468:	d8802215 	stw	r2,136(sp)
    a46c:	183d4e1e 	bne	r3,zero,99a8 <__alt_data_end+0xff0099a8>
    a470:	0039883a 	mov	fp,zero
    a474:	0005883a 	mov	r2,zero
    a478:	003e0606 	br	9c94 <__alt_data_end+0xff009c94>
    a47c:	d9402117 	ldw	r5,132(sp)
    a480:	d9002017 	ldw	r4,128(sp)
    a484:	d9801a04 	addi	r6,sp,104
    a488:	da402c15 	stw	r9,176(sp)
    a48c:	db802a15 	stw	r14,168(sp)
    a490:	00091b40 	call	91b4 <__sprint_r.part.0>
    a494:	da402c17 	ldw	r9,176(sp)
    a498:	db802a17 	ldw	r14,168(sp)
    a49c:	103ede1e 	bne	r2,zero,a018 <__alt_data_end+0xff00a018>
    a4a0:	d9401b17 	ldw	r5,108(sp)
    a4a4:	d8801c17 	ldw	r2,112(sp)
    a4a8:	d811883a 	mov	r8,sp
    a4ac:	29000044 	addi	r4,r5,1
    a4b0:	003e7406 	br	9e84 <__alt_data_end+0xff009e84>
    a4b4:	00bfffc4 	movi	r2,-1
    a4b8:	003c5806 	br	961c <__alt_data_end+0xff00961c>
    a4bc:	d811883a 	mov	r8,sp
    a4c0:	003ee806 	br	a064 <__alt_data_end+0xff00a064>
    a4c4:	000b883a 	mov	r5,zero
    a4c8:	01000044 	movi	r4,1
    a4cc:	d811883a 	mov	r8,sp
    a4d0:	003e7c06 	br	9ec4 <__alt_data_end+0xff009ec4>
    a4d4:	50800104 	addi	r2,r10,4
    a4d8:	5480000b 	ldhu	r18,0(r10)
    a4dc:	0027883a 	mov	r19,zero
    a4e0:	483dcf0e 	bge	r9,zero,9c20 <__alt_data_end+0xff009c20>
    a4e4:	003fdf06 	br	a464 <__alt_data_end+0xff00a464>
    a4e8:	54800017 	ldw	r18,0(r10)
    a4ec:	52800104 	addi	r10,r10,4
    a4f0:	0027883a 	mov	r19,zero
    a4f4:	da802215 	stw	r10,136(sp)
    a4f8:	003d5006 	br	9a3c <__alt_data_end+0xff009a3c>
    a4fc:	50800104 	addi	r2,r10,4
    a500:	5480000b 	ldhu	r18,0(r10)
    a504:	0027883a 	mov	r19,zero
    a508:	483f7d0e 	bge	r9,zero,a300 <__alt_data_end+0xff00a300>
    a50c:	003ddc06 	br	9c80 <__alt_data_end+0xff009c80>
    a510:	d8c02215 	stw	r3,136(sp)
    a514:	0039883a 	mov	fp,zero
    a518:	003ddb06 	br	9c88 <__alt_data_end+0xff009c88>
    a51c:	02800074 	movhi	r10,1
    a520:	52852b04 	addi	r10,r10,5292
    a524:	da802415 	stw	r10,144(sp)
    a528:	003e8306 	br	9f38 <__alt_data_end+0xff009f38>
    a52c:	d8801c17 	ldw	r2,112(sp)
    a530:	dd002117 	ldw	r20,132(sp)
    a534:	103eb926 	beq	r2,zero,a01c <__alt_data_end+0xff00a01c>
    a538:	d9002017 	ldw	r4,128(sp)
    a53c:	d9801a04 	addi	r6,sp,104
    a540:	a00b883a 	mov	r5,r20
    a544:	00091b40 	call	91b4 <__sprint_r.part.0>
    a548:	003eb406 	br	a01c <__alt_data_end+0xff00a01c>
    a54c:	80c00043 	ldbu	r3,1(r16)
    a550:	a5000814 	ori	r20,r20,32
    a554:	84000044 	addi	r16,r16,1
    a558:	18c03fcc 	andi	r3,r3,255
    a55c:	18c0201c 	xori	r3,r3,128
    a560:	18ffe004 	addi	r3,r3,-128
    a564:	003bb706 	br	9444 <__alt_data_end+0xff009444>
    a568:	a809883a 	mov	r4,r21
    a56c:	d8c02a15 	stw	r3,168(sp)
    a570:	da002b15 	stw	r8,172(sp)
    a574:	000247c0 	call	247c <strlen>
    a578:	d8c02a17 	ldw	r3,168(sp)
    a57c:	1027883a 	mov	r19,r2
    a580:	df001d83 	ldbu	fp,118(sp)
    a584:	d8c02215 	stw	r3,136(sp)
    a588:	0013883a 	mov	r9,zero
    a58c:	da002b17 	ldw	r8,172(sp)
    a590:	003c4d06 	br	96c8 <__alt_data_end+0xff0096c8>
    a594:	d9402117 	ldw	r5,132(sp)
    a598:	d9002017 	ldw	r4,128(sp)
    a59c:	d9801a04 	addi	r6,sp,104
    a5a0:	da402c15 	stw	r9,176(sp)
    a5a4:	00091b40 	call	91b4 <__sprint_r.part.0>
    a5a8:	da402c17 	ldw	r9,176(sp)
    a5ac:	103e9a1e 	bne	r2,zero,a018 <__alt_data_end+0xff00a018>
    a5b0:	d9401b17 	ldw	r5,108(sp)
    a5b4:	d8801c17 	ldw	r2,112(sp)
    a5b8:	d811883a 	mov	r8,sp
    a5bc:	29000044 	addi	r4,r5,1
    a5c0:	003e4206 	br	9ecc <__alt_data_end+0xff009ecc>
    a5c4:	d9401b17 	ldw	r5,108(sp)
    a5c8:	01000074 	movhi	r4,1
    a5cc:	21052f04 	addi	r4,r4,5308
    a5d0:	d9002415 	stw	r4,144(sp)
    a5d4:	29400044 	addi	r5,r5,1
    a5d8:	003c6d06 	br	9790 <__alt_data_end+0xff009790>
    a5dc:	0039883a 	mov	fp,zero
    a5e0:	00800084 	movi	r2,2
    a5e4:	10803fcc 	andi	r2,r2,255
    a5e8:	01000044 	movi	r4,1
    a5ec:	11001e26 	beq	r2,r4,a668 <___vfiprintf_internal_r+0x13a0>
    a5f0:	01000084 	movi	r4,2
    a5f4:	11001e1e 	bne	r2,r4,a670 <___vfiprintf_internal_r+0x13a8>
    a5f8:	1829883a 	mov	r20,r3
    a5fc:	003eea06 	br	a1a8 <__alt_data_end+0xff00a1a8>
    a600:	a007883a 	mov	r3,r20
    a604:	00800044 	movi	r2,1
    a608:	003ff606 	br	a5e4 <__alt_data_end+0xff00a5e4>
    a60c:	00800184 	movi	r2,6
    a610:	1240012e 	bgeu	r2,r9,a618 <___vfiprintf_internal_r+0x1350>
    a614:	1013883a 	mov	r9,r2
    a618:	4827883a 	mov	r19,r9
    a61c:	4825883a 	mov	r18,r9
    a620:	48001516 	blt	r9,zero,a678 <___vfiprintf_internal_r+0x13b0>
    a624:	05400074 	movhi	r21,1
    a628:	d8c02215 	stw	r3,136(sp)
    a62c:	ad44cf04 	addi	r21,r21,4924
    a630:	003d1406 	br	9a84 <__alt_data_end+0xff009a84>
    a634:	02800074 	movhi	r10,1
    a638:	52852b04 	addi	r10,r10,5292
    a63c:	da802415 	stw	r10,144(sp)
    a640:	200d883a 	mov	r6,r4
    a644:	003c9106 	br	988c <__alt_data_end+0xff00988c>
    a648:	5021883a 	mov	r16,r10
    a64c:	0013883a 	mov	r9,zero
    a650:	003b7d06 	br	9448 <__alt_data_end+0xff009448>
    a654:	4827883a 	mov	r19,r9
    a658:	df001d83 	ldbu	fp,118(sp)
    a65c:	d8c02215 	stw	r3,136(sp)
    a660:	0013883a 	mov	r9,zero
    a664:	003c1806 	br	96c8 <__alt_data_end+0xff0096c8>
    a668:	1829883a 	mov	r20,r3
    a66c:	003d1806 	br	9ad0 <__alt_data_end+0xff009ad0>
    a670:	1829883a 	mov	r20,r3
    a674:	003ccd06 	br	99ac <__alt_data_end+0xff0099ac>
    a678:	0025883a 	mov	r18,zero
    a67c:	003fe906 	br	a624 <__alt_data_end+0xff00a624>
    a680:	d8802217 	ldw	r2,136(sp)
    a684:	80c00043 	ldbu	r3,1(r16)
    a688:	5021883a 	mov	r16,r10
    a68c:	12400017 	ldw	r9,0(r2)
    a690:	10800104 	addi	r2,r2,4
    a694:	d8802215 	stw	r2,136(sp)
    a698:	483faf0e 	bge	r9,zero,a558 <__alt_data_end+0xff00a558>
    a69c:	18c03fcc 	andi	r3,r3,255
    a6a0:	18c0201c 	xori	r3,r3,128
    a6a4:	027fffc4 	movi	r9,-1
    a6a8:	18ffe004 	addi	r3,r3,-128
    a6ac:	003b6506 	br	9444 <__alt_data_end+0xff009444>
    a6b0:	d9c01d85 	stb	r7,118(sp)
    a6b4:	003ca006 	br	9938 <__alt_data_end+0xff009938>
    a6b8:	d9c01d85 	stb	r7,118(sp)
    a6bc:	003cad06 	br	9974 <__alt_data_end+0xff009974>
    a6c0:	d9c01d85 	stb	r7,118(sp)
    a6c4:	003d7d06 	br	9cbc <__alt_data_end+0xff009cbc>
    a6c8:	d9c01d85 	stb	r7,118(sp)
    a6cc:	003d5f06 	br	9c4c <__alt_data_end+0xff009c4c>
    a6d0:	a080004c 	andi	r2,r20,1
    a6d4:	0039883a 	mov	fp,zero
    a6d8:	10000526 	beq	r2,zero,a6f0 <___vfiprintf_internal_r+0x1428>
    a6dc:	00800c04 	movi	r2,48
    a6e0:	d88019c5 	stb	r2,103(sp)
    a6e4:	dcc02717 	ldw	r19,156(sp)
    a6e8:	dd4019c4 	addi	r21,sp,103
    a6ec:	003bf606 	br	96c8 <__alt_data_end+0xff0096c8>
    a6f0:	0027883a 	mov	r19,zero
    a6f4:	dd401a04 	addi	r21,sp,104
    a6f8:	003bf306 	br	96c8 <__alt_data_end+0xff0096c8>
    a6fc:	d9c01d85 	stb	r7,118(sp)
    a700:	003dc806 	br	9e24 <__alt_data_end+0xff009e24>
    a704:	d9c01d85 	stb	r7,118(sp)
    a708:	003d3a06 	br	9bf4 <__alt_data_end+0xff009bf4>
    a70c:	d9c01d85 	stb	r7,118(sp)
    a710:	003d2a06 	br	9bbc <__alt_data_end+0xff009bbc>
    a714:	d9c01d85 	stb	r7,118(sp)
    a718:	003cde06 	br	9a94 <__alt_data_end+0xff009a94>
    a71c:	d9c01d85 	stb	r7,118(sp)
    a720:	003cbc06 	br	9a14 <__alt_data_end+0xff009a14>

0000a724 <__vfiprintf_internal>:
    a724:	00800074 	movhi	r2,1
    a728:	108c2c04 	addi	r2,r2,12464
    a72c:	300f883a 	mov	r7,r6
    a730:	280d883a 	mov	r6,r5
    a734:	200b883a 	mov	r5,r4
    a738:	11000017 	ldw	r4,0(r2)
    a73c:	00092c81 	jmpi	92c8 <___vfiprintf_internal_r>

0000a740 <__sbprintf>:
    a740:	2880030b 	ldhu	r2,12(r5)
    a744:	2ac01917 	ldw	r11,100(r5)
    a748:	2a80038b 	ldhu	r10,14(r5)
    a74c:	2a400717 	ldw	r9,28(r5)
    a750:	2a000917 	ldw	r8,36(r5)
    a754:	defee204 	addi	sp,sp,-1144
    a758:	00c10004 	movi	r3,1024
    a75c:	dc011a15 	stw	r16,1128(sp)
    a760:	10bfff4c 	andi	r2,r2,65533
    a764:	2821883a 	mov	r16,r5
    a768:	d8cb883a 	add	r5,sp,r3
    a76c:	dc811c15 	stw	r18,1136(sp)
    a770:	dc411b15 	stw	r17,1132(sp)
    a774:	dfc11d15 	stw	ra,1140(sp)
    a778:	2025883a 	mov	r18,r4
    a77c:	d881030d 	sth	r2,1036(sp)
    a780:	dac11915 	stw	r11,1124(sp)
    a784:	da81038d 	sth	r10,1038(sp)
    a788:	da410715 	stw	r9,1052(sp)
    a78c:	da010915 	stw	r8,1060(sp)
    a790:	dec10015 	stw	sp,1024(sp)
    a794:	dec10415 	stw	sp,1040(sp)
    a798:	d8c10215 	stw	r3,1032(sp)
    a79c:	d8c10515 	stw	r3,1044(sp)
    a7a0:	d8010615 	stw	zero,1048(sp)
    a7a4:	00092c80 	call	92c8 <___vfiprintf_internal_r>
    a7a8:	1023883a 	mov	r17,r2
    a7ac:	10000416 	blt	r2,zero,a7c0 <__sbprintf+0x80>
    a7b0:	d9410004 	addi	r5,sp,1024
    a7b4:	9009883a 	mov	r4,r18
    a7b8:	00063dc0 	call	63dc <_fflush_r>
    a7bc:	10000d1e 	bne	r2,zero,a7f4 <__sbprintf+0xb4>
    a7c0:	d881030b 	ldhu	r2,1036(sp)
    a7c4:	1080100c 	andi	r2,r2,64
    a7c8:	10000326 	beq	r2,zero,a7d8 <__sbprintf+0x98>
    a7cc:	8080030b 	ldhu	r2,12(r16)
    a7d0:	10801014 	ori	r2,r2,64
    a7d4:	8080030d 	sth	r2,12(r16)
    a7d8:	8805883a 	mov	r2,r17
    a7dc:	dfc11d17 	ldw	ra,1140(sp)
    a7e0:	dc811c17 	ldw	r18,1136(sp)
    a7e4:	dc411b17 	ldw	r17,1132(sp)
    a7e8:	dc011a17 	ldw	r16,1128(sp)
    a7ec:	dec11e04 	addi	sp,sp,1144
    a7f0:	f800283a 	ret
    a7f4:	047fffc4 	movi	r17,-1
    a7f8:	003ff106 	br	a7c0 <__alt_data_end+0xff00a7c0>

0000a7fc <_write_r>:
    a7fc:	defffd04 	addi	sp,sp,-12
    a800:	2805883a 	mov	r2,r5
    a804:	dc000015 	stw	r16,0(sp)
    a808:	04000074 	movhi	r16,1
    a80c:	dc400115 	stw	r17,4(sp)
    a810:	300b883a 	mov	r5,r6
    a814:	84130104 	addi	r16,r16,19460
    a818:	2023883a 	mov	r17,r4
    a81c:	380d883a 	mov	r6,r7
    a820:	1009883a 	mov	r4,r2
    a824:	dfc00215 	stw	ra,8(sp)
    a828:	80000015 	stw	zero,0(r16)
    a82c:	000ec780 	call	ec78 <write>
    a830:	00ffffc4 	movi	r3,-1
    a834:	10c00526 	beq	r2,r3,a84c <_write_r+0x50>
    a838:	dfc00217 	ldw	ra,8(sp)
    a83c:	dc400117 	ldw	r17,4(sp)
    a840:	dc000017 	ldw	r16,0(sp)
    a844:	dec00304 	addi	sp,sp,12
    a848:	f800283a 	ret
    a84c:	80c00017 	ldw	r3,0(r16)
    a850:	183ff926 	beq	r3,zero,a838 <__alt_data_end+0xff00a838>
    a854:	88c00015 	stw	r3,0(r17)
    a858:	003ff706 	br	a838 <__alt_data_end+0xff00a838>

0000a85c <_close_r>:
    a85c:	defffd04 	addi	sp,sp,-12
    a860:	dc000015 	stw	r16,0(sp)
    a864:	04000074 	movhi	r16,1
    a868:	dc400115 	stw	r17,4(sp)
    a86c:	84130104 	addi	r16,r16,19460
    a870:	2023883a 	mov	r17,r4
    a874:	2809883a 	mov	r4,r5
    a878:	dfc00215 	stw	ra,8(sp)
    a87c:	80000015 	stw	zero,0(r16)
    a880:	000e4380 	call	e438 <close>
    a884:	00ffffc4 	movi	r3,-1
    a888:	10c00526 	beq	r2,r3,a8a0 <_close_r+0x44>
    a88c:	dfc00217 	ldw	ra,8(sp)
    a890:	dc400117 	ldw	r17,4(sp)
    a894:	dc000017 	ldw	r16,0(sp)
    a898:	dec00304 	addi	sp,sp,12
    a89c:	f800283a 	ret
    a8a0:	80c00017 	ldw	r3,0(r16)
    a8a4:	183ff926 	beq	r3,zero,a88c <__alt_data_end+0xff00a88c>
    a8a8:	88c00015 	stw	r3,0(r17)
    a8ac:	003ff706 	br	a88c <__alt_data_end+0xff00a88c>

0000a8b0 <_calloc_r>:
    a8b0:	298b383a 	mul	r5,r5,r6
    a8b4:	defffe04 	addi	sp,sp,-8
    a8b8:	dfc00115 	stw	ra,4(sp)
    a8bc:	dc000015 	stw	r16,0(sp)
    a8c0:	0001adc0 	call	1adc <_malloc_r>
    a8c4:	10002926 	beq	r2,zero,a96c <_calloc_r+0xbc>
    a8c8:	11bfff17 	ldw	r6,-4(r2)
    a8cc:	1021883a 	mov	r16,r2
    a8d0:	00bfff04 	movi	r2,-4
    a8d4:	308c703a 	and	r6,r6,r2
    a8d8:	00c00904 	movi	r3,36
    a8dc:	308d883a 	add	r6,r6,r2
    a8e0:	19801636 	bltu	r3,r6,a93c <_calloc_r+0x8c>
    a8e4:	008004c4 	movi	r2,19
    a8e8:	11800b2e 	bgeu	r2,r6,a918 <_calloc_r+0x68>
    a8ec:	80000015 	stw	zero,0(r16)
    a8f0:	80000115 	stw	zero,4(r16)
    a8f4:	008006c4 	movi	r2,27
    a8f8:	11801a2e 	bgeu	r2,r6,a964 <_calloc_r+0xb4>
    a8fc:	80000215 	stw	zero,8(r16)
    a900:	80000315 	stw	zero,12(r16)
    a904:	30c0151e 	bne	r6,r3,a95c <_calloc_r+0xac>
    a908:	80000415 	stw	zero,16(r16)
    a90c:	80800604 	addi	r2,r16,24
    a910:	80000515 	stw	zero,20(r16)
    a914:	00000106 	br	a91c <_calloc_r+0x6c>
    a918:	8005883a 	mov	r2,r16
    a91c:	10000015 	stw	zero,0(r2)
    a920:	10000115 	stw	zero,4(r2)
    a924:	10000215 	stw	zero,8(r2)
    a928:	8005883a 	mov	r2,r16
    a92c:	dfc00117 	ldw	ra,4(sp)
    a930:	dc000017 	ldw	r16,0(sp)
    a934:	dec00204 	addi	sp,sp,8
    a938:	f800283a 	ret
    a93c:	000b883a 	mov	r5,zero
    a940:	8009883a 	mov	r4,r16
    a944:	00078a00 	call	78a0 <memset>
    a948:	8005883a 	mov	r2,r16
    a94c:	dfc00117 	ldw	ra,4(sp)
    a950:	dc000017 	ldw	r16,0(sp)
    a954:	dec00204 	addi	sp,sp,8
    a958:	f800283a 	ret
    a95c:	80800404 	addi	r2,r16,16
    a960:	003fee06 	br	a91c <__alt_data_end+0xff00a91c>
    a964:	80800204 	addi	r2,r16,8
    a968:	003fec06 	br	a91c <__alt_data_end+0xff00a91c>
    a96c:	0005883a 	mov	r2,zero
    a970:	003fee06 	br	a92c <__alt_data_end+0xff00a92c>

0000a974 <_fclose_r>:
    a974:	28003926 	beq	r5,zero,aa5c <_fclose_r+0xe8>
    a978:	defffc04 	addi	sp,sp,-16
    a97c:	dc400115 	stw	r17,4(sp)
    a980:	dc000015 	stw	r16,0(sp)
    a984:	dfc00315 	stw	ra,12(sp)
    a988:	dc800215 	stw	r18,8(sp)
    a98c:	2023883a 	mov	r17,r4
    a990:	2821883a 	mov	r16,r5
    a994:	20000226 	beq	r4,zero,a9a0 <_fclose_r+0x2c>
    a998:	20800e17 	ldw	r2,56(r4)
    a99c:	10002726 	beq	r2,zero,aa3c <_fclose_r+0xc8>
    a9a0:	8080030f 	ldh	r2,12(r16)
    a9a4:	1000071e 	bne	r2,zero,a9c4 <_fclose_r+0x50>
    a9a8:	0005883a 	mov	r2,zero
    a9ac:	dfc00317 	ldw	ra,12(sp)
    a9b0:	dc800217 	ldw	r18,8(sp)
    a9b4:	dc400117 	ldw	r17,4(sp)
    a9b8:	dc000017 	ldw	r16,0(sp)
    a9bc:	dec00404 	addi	sp,sp,16
    a9c0:	f800283a 	ret
    a9c4:	800b883a 	mov	r5,r16
    a9c8:	8809883a 	mov	r4,r17
    a9cc:	00061c00 	call	61c0 <__sflush_r>
    a9d0:	1025883a 	mov	r18,r2
    a9d4:	80800b17 	ldw	r2,44(r16)
    a9d8:	10000426 	beq	r2,zero,a9ec <_fclose_r+0x78>
    a9dc:	81400717 	ldw	r5,28(r16)
    a9e0:	8809883a 	mov	r4,r17
    a9e4:	103ee83a 	callr	r2
    a9e8:	10001616 	blt	r2,zero,aa44 <_fclose_r+0xd0>
    a9ec:	8080030b 	ldhu	r2,12(r16)
    a9f0:	1080200c 	andi	r2,r2,128
    a9f4:	1000151e 	bne	r2,zero,aa4c <_fclose_r+0xd8>
    a9f8:	81400c17 	ldw	r5,48(r16)
    a9fc:	28000526 	beq	r5,zero,aa14 <_fclose_r+0xa0>
    aa00:	80801004 	addi	r2,r16,64
    aa04:	28800226 	beq	r5,r2,aa10 <_fclose_r+0x9c>
    aa08:	8809883a 	mov	r4,r17
    aa0c:	000692c0 	call	692c <_free_r>
    aa10:	80000c15 	stw	zero,48(r16)
    aa14:	81401117 	ldw	r5,68(r16)
    aa18:	28000326 	beq	r5,zero,aa28 <_fclose_r+0xb4>
    aa1c:	8809883a 	mov	r4,r17
    aa20:	000692c0 	call	692c <_free_r>
    aa24:	80001115 	stw	zero,68(r16)
    aa28:	00067c80 	call	67c8 <__sfp_lock_acquire>
    aa2c:	8000030d 	sth	zero,12(r16)
    aa30:	00067cc0 	call	67cc <__sfp_lock_release>
    aa34:	9005883a 	mov	r2,r18
    aa38:	003fdc06 	br	a9ac <__alt_data_end+0xff00a9ac>
    aa3c:	00067b80 	call	67b8 <__sinit>
    aa40:	003fd706 	br	a9a0 <__alt_data_end+0xff00a9a0>
    aa44:	04bfffc4 	movi	r18,-1
    aa48:	003fe806 	br	a9ec <__alt_data_end+0xff00a9ec>
    aa4c:	81400417 	ldw	r5,16(r16)
    aa50:	8809883a 	mov	r4,r17
    aa54:	000692c0 	call	692c <_free_r>
    aa58:	003fe706 	br	a9f8 <__alt_data_end+0xff00a9f8>
    aa5c:	0005883a 	mov	r2,zero
    aa60:	f800283a 	ret

0000aa64 <fclose>:
    aa64:	00800074 	movhi	r2,1
    aa68:	108c2c04 	addi	r2,r2,12464
    aa6c:	200b883a 	mov	r5,r4
    aa70:	11000017 	ldw	r4,0(r2)
    aa74:	000a9741 	jmpi	a974 <_fclose_r>

0000aa78 <__fputwc>:
    aa78:	defff804 	addi	sp,sp,-32
    aa7c:	dcc00415 	stw	r19,16(sp)
    aa80:	dc800315 	stw	r18,12(sp)
    aa84:	dc000115 	stw	r16,4(sp)
    aa88:	dfc00715 	stw	ra,28(sp)
    aa8c:	dd400615 	stw	r21,24(sp)
    aa90:	dd000515 	stw	r20,20(sp)
    aa94:	dc400215 	stw	r17,8(sp)
    aa98:	2027883a 	mov	r19,r4
    aa9c:	2825883a 	mov	r18,r5
    aaa0:	3021883a 	mov	r16,r6
    aaa4:	00073080 	call	7308 <__locale_mb_cur_max>
    aaa8:	00c00044 	movi	r3,1
    aaac:	10c03e26 	beq	r2,r3,aba8 <__fputwc+0x130>
    aab0:	81c01704 	addi	r7,r16,92
    aab4:	900d883a 	mov	r6,r18
    aab8:	d80b883a 	mov	r5,sp
    aabc:	9809883a 	mov	r4,r19
    aac0:	000af480 	call	af48 <_wcrtomb_r>
    aac4:	1029883a 	mov	r20,r2
    aac8:	00bfffc4 	movi	r2,-1
    aacc:	a0802026 	beq	r20,r2,ab50 <__fputwc+0xd8>
    aad0:	d9400003 	ldbu	r5,0(sp)
    aad4:	a0001c26 	beq	r20,zero,ab48 <__fputwc+0xd0>
    aad8:	0023883a 	mov	r17,zero
    aadc:	05400284 	movi	r21,10
    aae0:	00000906 	br	ab08 <__fputwc+0x90>
    aae4:	80800017 	ldw	r2,0(r16)
    aae8:	11400005 	stb	r5,0(r2)
    aaec:	80c00017 	ldw	r3,0(r16)
    aaf0:	18c00044 	addi	r3,r3,1
    aaf4:	80c00015 	stw	r3,0(r16)
    aaf8:	8c400044 	addi	r17,r17,1
    aafc:	dc45883a 	add	r2,sp,r17
    ab00:	8d00112e 	bgeu	r17,r20,ab48 <__fputwc+0xd0>
    ab04:	11400003 	ldbu	r5,0(r2)
    ab08:	80c00217 	ldw	r3,8(r16)
    ab0c:	18ffffc4 	addi	r3,r3,-1
    ab10:	80c00215 	stw	r3,8(r16)
    ab14:	183ff30e 	bge	r3,zero,aae4 <__alt_data_end+0xff00aae4>
    ab18:	80800617 	ldw	r2,24(r16)
    ab1c:	18801916 	blt	r3,r2,ab84 <__fputwc+0x10c>
    ab20:	80800017 	ldw	r2,0(r16)
    ab24:	11400005 	stb	r5,0(r2)
    ab28:	80800017 	ldw	r2,0(r16)
    ab2c:	10c00003 	ldbu	r3,0(r2)
    ab30:	10800044 	addi	r2,r2,1
    ab34:	1d402326 	beq	r3,r21,abc4 <__fputwc+0x14c>
    ab38:	80800015 	stw	r2,0(r16)
    ab3c:	8c400044 	addi	r17,r17,1
    ab40:	dc45883a 	add	r2,sp,r17
    ab44:	8d3fef36 	bltu	r17,r20,ab04 <__alt_data_end+0xff00ab04>
    ab48:	9005883a 	mov	r2,r18
    ab4c:	00000406 	br	ab60 <__fputwc+0xe8>
    ab50:	80c0030b 	ldhu	r3,12(r16)
    ab54:	a005883a 	mov	r2,r20
    ab58:	18c01014 	ori	r3,r3,64
    ab5c:	80c0030d 	sth	r3,12(r16)
    ab60:	dfc00717 	ldw	ra,28(sp)
    ab64:	dd400617 	ldw	r21,24(sp)
    ab68:	dd000517 	ldw	r20,20(sp)
    ab6c:	dcc00417 	ldw	r19,16(sp)
    ab70:	dc800317 	ldw	r18,12(sp)
    ab74:	dc400217 	ldw	r17,8(sp)
    ab78:	dc000117 	ldw	r16,4(sp)
    ab7c:	dec00804 	addi	sp,sp,32
    ab80:	f800283a 	ret
    ab84:	800d883a 	mov	r6,r16
    ab88:	29403fcc 	andi	r5,r5,255
    ab8c:	9809883a 	mov	r4,r19
    ab90:	000adf00 	call	adf0 <__swbuf_r>
    ab94:	10bfffe0 	cmpeqi	r2,r2,-1
    ab98:	10803fcc 	andi	r2,r2,255
    ab9c:	103fd626 	beq	r2,zero,aaf8 <__alt_data_end+0xff00aaf8>
    aba0:	00bfffc4 	movi	r2,-1
    aba4:	003fee06 	br	ab60 <__alt_data_end+0xff00ab60>
    aba8:	90ffffc4 	addi	r3,r18,-1
    abac:	01003f84 	movi	r4,254
    abb0:	20ffbf36 	bltu	r4,r3,aab0 <__alt_data_end+0xff00aab0>
    abb4:	900b883a 	mov	r5,r18
    abb8:	dc800005 	stb	r18,0(sp)
    abbc:	1029883a 	mov	r20,r2
    abc0:	003fc506 	br	aad8 <__alt_data_end+0xff00aad8>
    abc4:	800d883a 	mov	r6,r16
    abc8:	a80b883a 	mov	r5,r21
    abcc:	9809883a 	mov	r4,r19
    abd0:	000adf00 	call	adf0 <__swbuf_r>
    abd4:	10bfffe0 	cmpeqi	r2,r2,-1
    abd8:	003fef06 	br	ab98 <__alt_data_end+0xff00ab98>

0000abdc <_fputwc_r>:
    abdc:	3080030b 	ldhu	r2,12(r6)
    abe0:	10c8000c 	andi	r3,r2,8192
    abe4:	1800051e 	bne	r3,zero,abfc <_fputwc_r+0x20>
    abe8:	30c01917 	ldw	r3,100(r6)
    abec:	10880014 	ori	r2,r2,8192
    abf0:	3080030d 	sth	r2,12(r6)
    abf4:	18880014 	ori	r2,r3,8192
    abf8:	30801915 	stw	r2,100(r6)
    abfc:	000aa781 	jmpi	aa78 <__fputwc>

0000ac00 <fputwc>:
    ac00:	00800074 	movhi	r2,1
    ac04:	defffc04 	addi	sp,sp,-16
    ac08:	108c2c04 	addi	r2,r2,12464
    ac0c:	dc000115 	stw	r16,4(sp)
    ac10:	14000017 	ldw	r16,0(r2)
    ac14:	dc400215 	stw	r17,8(sp)
    ac18:	dfc00315 	stw	ra,12(sp)
    ac1c:	2023883a 	mov	r17,r4
    ac20:	80000226 	beq	r16,zero,ac2c <fputwc+0x2c>
    ac24:	80800e17 	ldw	r2,56(r16)
    ac28:	10001026 	beq	r2,zero,ac6c <fputwc+0x6c>
    ac2c:	2880030b 	ldhu	r2,12(r5)
    ac30:	10c8000c 	andi	r3,r2,8192
    ac34:	1800051e 	bne	r3,zero,ac4c <fputwc+0x4c>
    ac38:	28c01917 	ldw	r3,100(r5)
    ac3c:	10880014 	ori	r2,r2,8192
    ac40:	2880030d 	sth	r2,12(r5)
    ac44:	18880014 	ori	r2,r3,8192
    ac48:	28801915 	stw	r2,100(r5)
    ac4c:	280d883a 	mov	r6,r5
    ac50:	8009883a 	mov	r4,r16
    ac54:	880b883a 	mov	r5,r17
    ac58:	dfc00317 	ldw	ra,12(sp)
    ac5c:	dc400217 	ldw	r17,8(sp)
    ac60:	dc000117 	ldw	r16,4(sp)
    ac64:	dec00404 	addi	sp,sp,16
    ac68:	000aa781 	jmpi	aa78 <__fputwc>
    ac6c:	8009883a 	mov	r4,r16
    ac70:	d9400015 	stw	r5,0(sp)
    ac74:	00067b80 	call	67b8 <__sinit>
    ac78:	d9400017 	ldw	r5,0(sp)
    ac7c:	003feb06 	br	ac2c <__alt_data_end+0xff00ac2c>

0000ac80 <_fstat_r>:
    ac80:	defffd04 	addi	sp,sp,-12
    ac84:	2805883a 	mov	r2,r5
    ac88:	dc000015 	stw	r16,0(sp)
    ac8c:	04000074 	movhi	r16,1
    ac90:	dc400115 	stw	r17,4(sp)
    ac94:	84130104 	addi	r16,r16,19460
    ac98:	2023883a 	mov	r17,r4
    ac9c:	300b883a 	mov	r5,r6
    aca0:	1009883a 	mov	r4,r2
    aca4:	dfc00215 	stw	ra,8(sp)
    aca8:	80000015 	stw	zero,0(r16)
    acac:	000e5700 	call	e570 <fstat>
    acb0:	00ffffc4 	movi	r3,-1
    acb4:	10c00526 	beq	r2,r3,accc <_fstat_r+0x4c>
    acb8:	dfc00217 	ldw	ra,8(sp)
    acbc:	dc400117 	ldw	r17,4(sp)
    acc0:	dc000017 	ldw	r16,0(sp)
    acc4:	dec00304 	addi	sp,sp,12
    acc8:	f800283a 	ret
    accc:	80c00017 	ldw	r3,0(r16)
    acd0:	183ff926 	beq	r3,zero,acb8 <__alt_data_end+0xff00acb8>
    acd4:	88c00015 	stw	r3,0(r17)
    acd8:	003ff706 	br	acb8 <__alt_data_end+0xff00acb8>

0000acdc <_isatty_r>:
    acdc:	defffd04 	addi	sp,sp,-12
    ace0:	dc000015 	stw	r16,0(sp)
    ace4:	04000074 	movhi	r16,1
    ace8:	dc400115 	stw	r17,4(sp)
    acec:	84130104 	addi	r16,r16,19460
    acf0:	2023883a 	mov	r17,r4
    acf4:	2809883a 	mov	r4,r5
    acf8:	dfc00215 	stw	ra,8(sp)
    acfc:	80000015 	stw	zero,0(r16)
    ad00:	000e65c0 	call	e65c <isatty>
    ad04:	00ffffc4 	movi	r3,-1
    ad08:	10c00526 	beq	r2,r3,ad20 <_isatty_r+0x44>
    ad0c:	dfc00217 	ldw	ra,8(sp)
    ad10:	dc400117 	ldw	r17,4(sp)
    ad14:	dc000017 	ldw	r16,0(sp)
    ad18:	dec00304 	addi	sp,sp,12
    ad1c:	f800283a 	ret
    ad20:	80c00017 	ldw	r3,0(r16)
    ad24:	183ff926 	beq	r3,zero,ad0c <__alt_data_end+0xff00ad0c>
    ad28:	88c00015 	stw	r3,0(r17)
    ad2c:	003ff706 	br	ad0c <__alt_data_end+0xff00ad0c>

0000ad30 <_lseek_r>:
    ad30:	defffd04 	addi	sp,sp,-12
    ad34:	2805883a 	mov	r2,r5
    ad38:	dc000015 	stw	r16,0(sp)
    ad3c:	04000074 	movhi	r16,1
    ad40:	dc400115 	stw	r17,4(sp)
    ad44:	300b883a 	mov	r5,r6
    ad48:	84130104 	addi	r16,r16,19460
    ad4c:	2023883a 	mov	r17,r4
    ad50:	380d883a 	mov	r6,r7
    ad54:	1009883a 	mov	r4,r2
    ad58:	dfc00215 	stw	ra,8(sp)
    ad5c:	80000015 	stw	zero,0(r16)
    ad60:	000e8280 	call	e828 <lseek>
    ad64:	00ffffc4 	movi	r3,-1
    ad68:	10c00526 	beq	r2,r3,ad80 <_lseek_r+0x50>
    ad6c:	dfc00217 	ldw	ra,8(sp)
    ad70:	dc400117 	ldw	r17,4(sp)
    ad74:	dc000017 	ldw	r16,0(sp)
    ad78:	dec00304 	addi	sp,sp,12
    ad7c:	f800283a 	ret
    ad80:	80c00017 	ldw	r3,0(r16)
    ad84:	183ff926 	beq	r3,zero,ad6c <__alt_data_end+0xff00ad6c>
    ad88:	88c00015 	stw	r3,0(r17)
    ad8c:	003ff706 	br	ad6c <__alt_data_end+0xff00ad6c>

0000ad90 <_read_r>:
    ad90:	defffd04 	addi	sp,sp,-12
    ad94:	2805883a 	mov	r2,r5
    ad98:	dc000015 	stw	r16,0(sp)
    ad9c:	04000074 	movhi	r16,1
    ada0:	dc400115 	stw	r17,4(sp)
    ada4:	300b883a 	mov	r5,r6
    ada8:	84130104 	addi	r16,r16,19460
    adac:	2023883a 	mov	r17,r4
    adb0:	380d883a 	mov	r6,r7
    adb4:	1009883a 	mov	r4,r2
    adb8:	dfc00215 	stw	ra,8(sp)
    adbc:	80000015 	stw	zero,0(r16)
    adc0:	000e9fc0 	call	e9fc <read>
    adc4:	00ffffc4 	movi	r3,-1
    adc8:	10c00526 	beq	r2,r3,ade0 <_read_r+0x50>
    adcc:	dfc00217 	ldw	ra,8(sp)
    add0:	dc400117 	ldw	r17,4(sp)
    add4:	dc000017 	ldw	r16,0(sp)
    add8:	dec00304 	addi	sp,sp,12
    addc:	f800283a 	ret
    ade0:	80c00017 	ldw	r3,0(r16)
    ade4:	183ff926 	beq	r3,zero,adcc <__alt_data_end+0xff00adcc>
    ade8:	88c00015 	stw	r3,0(r17)
    adec:	003ff706 	br	adcc <__alt_data_end+0xff00adcc>

0000adf0 <__swbuf_r>:
    adf0:	defffb04 	addi	sp,sp,-20
    adf4:	dcc00315 	stw	r19,12(sp)
    adf8:	dc800215 	stw	r18,8(sp)
    adfc:	dc000015 	stw	r16,0(sp)
    ae00:	dfc00415 	stw	ra,16(sp)
    ae04:	dc400115 	stw	r17,4(sp)
    ae08:	2025883a 	mov	r18,r4
    ae0c:	2827883a 	mov	r19,r5
    ae10:	3021883a 	mov	r16,r6
    ae14:	20000226 	beq	r4,zero,ae20 <__swbuf_r+0x30>
    ae18:	20800e17 	ldw	r2,56(r4)
    ae1c:	10004226 	beq	r2,zero,af28 <__swbuf_r+0x138>
    ae20:	80800617 	ldw	r2,24(r16)
    ae24:	8100030b 	ldhu	r4,12(r16)
    ae28:	80800215 	stw	r2,8(r16)
    ae2c:	2080020c 	andi	r2,r4,8
    ae30:	10003626 	beq	r2,zero,af0c <__swbuf_r+0x11c>
    ae34:	80c00417 	ldw	r3,16(r16)
    ae38:	18003426 	beq	r3,zero,af0c <__swbuf_r+0x11c>
    ae3c:	2088000c 	andi	r2,r4,8192
    ae40:	9c403fcc 	andi	r17,r19,255
    ae44:	10001a26 	beq	r2,zero,aeb0 <__swbuf_r+0xc0>
    ae48:	80800017 	ldw	r2,0(r16)
    ae4c:	81000517 	ldw	r4,20(r16)
    ae50:	10c7c83a 	sub	r3,r2,r3
    ae54:	1900200e 	bge	r3,r4,aed8 <__swbuf_r+0xe8>
    ae58:	18c00044 	addi	r3,r3,1
    ae5c:	81000217 	ldw	r4,8(r16)
    ae60:	11400044 	addi	r5,r2,1
    ae64:	81400015 	stw	r5,0(r16)
    ae68:	213fffc4 	addi	r4,r4,-1
    ae6c:	81000215 	stw	r4,8(r16)
    ae70:	14c00005 	stb	r19,0(r2)
    ae74:	80800517 	ldw	r2,20(r16)
    ae78:	10c01e26 	beq	r2,r3,aef4 <__swbuf_r+0x104>
    ae7c:	8080030b 	ldhu	r2,12(r16)
    ae80:	1080004c 	andi	r2,r2,1
    ae84:	10000226 	beq	r2,zero,ae90 <__swbuf_r+0xa0>
    ae88:	00800284 	movi	r2,10
    ae8c:	88801926 	beq	r17,r2,aef4 <__swbuf_r+0x104>
    ae90:	8805883a 	mov	r2,r17
    ae94:	dfc00417 	ldw	ra,16(sp)
    ae98:	dcc00317 	ldw	r19,12(sp)
    ae9c:	dc800217 	ldw	r18,8(sp)
    aea0:	dc400117 	ldw	r17,4(sp)
    aea4:	dc000017 	ldw	r16,0(sp)
    aea8:	dec00504 	addi	sp,sp,20
    aeac:	f800283a 	ret
    aeb0:	81401917 	ldw	r5,100(r16)
    aeb4:	00b7ffc4 	movi	r2,-8193
    aeb8:	21080014 	ori	r4,r4,8192
    aebc:	2884703a 	and	r2,r5,r2
    aec0:	80801915 	stw	r2,100(r16)
    aec4:	80800017 	ldw	r2,0(r16)
    aec8:	8100030d 	sth	r4,12(r16)
    aecc:	81000517 	ldw	r4,20(r16)
    aed0:	10c7c83a 	sub	r3,r2,r3
    aed4:	193fe016 	blt	r3,r4,ae58 <__alt_data_end+0xff00ae58>
    aed8:	800b883a 	mov	r5,r16
    aedc:	9009883a 	mov	r4,r18
    aee0:	00063dc0 	call	63dc <_fflush_r>
    aee4:	1000071e 	bne	r2,zero,af04 <__swbuf_r+0x114>
    aee8:	80800017 	ldw	r2,0(r16)
    aeec:	00c00044 	movi	r3,1
    aef0:	003fda06 	br	ae5c <__alt_data_end+0xff00ae5c>
    aef4:	800b883a 	mov	r5,r16
    aef8:	9009883a 	mov	r4,r18
    aefc:	00063dc0 	call	63dc <_fflush_r>
    af00:	103fe326 	beq	r2,zero,ae90 <__alt_data_end+0xff00ae90>
    af04:	00bfffc4 	movi	r2,-1
    af08:	003fe206 	br	ae94 <__alt_data_end+0xff00ae94>
    af0c:	800b883a 	mov	r5,r16
    af10:	9009883a 	mov	r4,r18
    af14:	00047e40 	call	47e4 <__swsetup_r>
    af18:	103ffa1e 	bne	r2,zero,af04 <__alt_data_end+0xff00af04>
    af1c:	8100030b 	ldhu	r4,12(r16)
    af20:	80c00417 	ldw	r3,16(r16)
    af24:	003fc506 	br	ae3c <__alt_data_end+0xff00ae3c>
    af28:	00067b80 	call	67b8 <__sinit>
    af2c:	003fbc06 	br	ae20 <__alt_data_end+0xff00ae20>

0000af30 <__swbuf>:
    af30:	00800074 	movhi	r2,1
    af34:	108c2c04 	addi	r2,r2,12464
    af38:	280d883a 	mov	r6,r5
    af3c:	200b883a 	mov	r5,r4
    af40:	11000017 	ldw	r4,0(r2)
    af44:	000adf01 	jmpi	adf0 <__swbuf_r>

0000af48 <_wcrtomb_r>:
    af48:	defff604 	addi	sp,sp,-40
    af4c:	00800074 	movhi	r2,1
    af50:	dc800815 	stw	r18,32(sp)
    af54:	dc400715 	stw	r17,28(sp)
    af58:	dc000615 	stw	r16,24(sp)
    af5c:	108c2e04 	addi	r2,r2,12472
    af60:	dfc00915 	stw	ra,36(sp)
    af64:	2021883a 	mov	r16,r4
    af68:	3823883a 	mov	r17,r7
    af6c:	14800017 	ldw	r18,0(r2)
    af70:	28001426 	beq	r5,zero,afc4 <_wcrtomb_r+0x7c>
    af74:	d9400415 	stw	r5,16(sp)
    af78:	d9800515 	stw	r6,20(sp)
    af7c:	00072fc0 	call	72fc <__locale_charset>
    af80:	d9800517 	ldw	r6,20(sp)
    af84:	d9400417 	ldw	r5,16(sp)
    af88:	100f883a 	mov	r7,r2
    af8c:	dc400015 	stw	r17,0(sp)
    af90:	8009883a 	mov	r4,r16
    af94:	903ee83a 	callr	r18
    af98:	00ffffc4 	movi	r3,-1
    af9c:	10c0031e 	bne	r2,r3,afac <_wcrtomb_r+0x64>
    afa0:	88000015 	stw	zero,0(r17)
    afa4:	00c02284 	movi	r3,138
    afa8:	80c00015 	stw	r3,0(r16)
    afac:	dfc00917 	ldw	ra,36(sp)
    afb0:	dc800817 	ldw	r18,32(sp)
    afb4:	dc400717 	ldw	r17,28(sp)
    afb8:	dc000617 	ldw	r16,24(sp)
    afbc:	dec00a04 	addi	sp,sp,40
    afc0:	f800283a 	ret
    afc4:	00072fc0 	call	72fc <__locale_charset>
    afc8:	100f883a 	mov	r7,r2
    afcc:	dc400015 	stw	r17,0(sp)
    afd0:	000d883a 	mov	r6,zero
    afd4:	d9400104 	addi	r5,sp,4
    afd8:	8009883a 	mov	r4,r16
    afdc:	903ee83a 	callr	r18
    afe0:	003fed06 	br	af98 <__alt_data_end+0xff00af98>

0000afe4 <wcrtomb>:
    afe4:	defff604 	addi	sp,sp,-40
    afe8:	00800074 	movhi	r2,1
    afec:	dc800615 	stw	r18,24(sp)
    aff0:	dc400515 	stw	r17,20(sp)
    aff4:	108c2c04 	addi	r2,r2,12464
    aff8:	dfc00915 	stw	ra,36(sp)
    affc:	dd000815 	stw	r20,32(sp)
    b000:	dcc00715 	stw	r19,28(sp)
    b004:	dc000415 	stw	r16,16(sp)
    b008:	3025883a 	mov	r18,r6
    b00c:	14400017 	ldw	r17,0(r2)
    b010:	20001926 	beq	r4,zero,b078 <wcrtomb+0x94>
    b014:	00800074 	movhi	r2,1
    b018:	108c2e04 	addi	r2,r2,12472
    b01c:	15000017 	ldw	r20,0(r2)
    b020:	2021883a 	mov	r16,r4
    b024:	2827883a 	mov	r19,r5
    b028:	00072fc0 	call	72fc <__locale_charset>
    b02c:	100f883a 	mov	r7,r2
    b030:	dc800015 	stw	r18,0(sp)
    b034:	980d883a 	mov	r6,r19
    b038:	800b883a 	mov	r5,r16
    b03c:	8809883a 	mov	r4,r17
    b040:	a03ee83a 	callr	r20
    b044:	00ffffc4 	movi	r3,-1
    b048:	10c0031e 	bne	r2,r3,b058 <wcrtomb+0x74>
    b04c:	90000015 	stw	zero,0(r18)
    b050:	00c02284 	movi	r3,138
    b054:	88c00015 	stw	r3,0(r17)
    b058:	dfc00917 	ldw	ra,36(sp)
    b05c:	dd000817 	ldw	r20,32(sp)
    b060:	dcc00717 	ldw	r19,28(sp)
    b064:	dc800617 	ldw	r18,24(sp)
    b068:	dc400517 	ldw	r17,20(sp)
    b06c:	dc000417 	ldw	r16,16(sp)
    b070:	dec00a04 	addi	sp,sp,40
    b074:	f800283a 	ret
    b078:	00800074 	movhi	r2,1
    b07c:	108c2e04 	addi	r2,r2,12472
    b080:	14000017 	ldw	r16,0(r2)
    b084:	00072fc0 	call	72fc <__locale_charset>
    b088:	100f883a 	mov	r7,r2
    b08c:	dc800015 	stw	r18,0(sp)
    b090:	000d883a 	mov	r6,zero
    b094:	d9400104 	addi	r5,sp,4
    b098:	8809883a 	mov	r4,r17
    b09c:	803ee83a 	callr	r16
    b0a0:	003fe806 	br	b044 <__alt_data_end+0xff00b044>

0000b0a4 <__ascii_wctomb>:
    b0a4:	28000526 	beq	r5,zero,b0bc <__ascii_wctomb+0x18>
    b0a8:	00803fc4 	movi	r2,255
    b0ac:	11800536 	bltu	r2,r6,b0c4 <__ascii_wctomb+0x20>
    b0b0:	29800005 	stb	r6,0(r5)
    b0b4:	00800044 	movi	r2,1
    b0b8:	f800283a 	ret
    b0bc:	0005883a 	mov	r2,zero
    b0c0:	f800283a 	ret
    b0c4:	00802284 	movi	r2,138
    b0c8:	20800015 	stw	r2,0(r4)
    b0cc:	00bfffc4 	movi	r2,-1
    b0d0:	f800283a 	ret

0000b0d4 <_wctomb_r>:
    b0d4:	00800074 	movhi	r2,1
    b0d8:	defff904 	addi	sp,sp,-28
    b0dc:	108c2e04 	addi	r2,r2,12472
    b0e0:	dfc00615 	stw	ra,24(sp)
    b0e4:	dc400515 	stw	r17,20(sp)
    b0e8:	dc000415 	stw	r16,16(sp)
    b0ec:	3823883a 	mov	r17,r7
    b0f0:	14000017 	ldw	r16,0(r2)
    b0f4:	d9000115 	stw	r4,4(sp)
    b0f8:	d9400215 	stw	r5,8(sp)
    b0fc:	d9800315 	stw	r6,12(sp)
    b100:	00072fc0 	call	72fc <__locale_charset>
    b104:	d9800317 	ldw	r6,12(sp)
    b108:	d9400217 	ldw	r5,8(sp)
    b10c:	d9000117 	ldw	r4,4(sp)
    b110:	100f883a 	mov	r7,r2
    b114:	dc400015 	stw	r17,0(sp)
    b118:	803ee83a 	callr	r16
    b11c:	dfc00617 	ldw	ra,24(sp)
    b120:	dc400517 	ldw	r17,20(sp)
    b124:	dc000417 	ldw	r16,16(sp)
    b128:	dec00704 	addi	sp,sp,28
    b12c:	f800283a 	ret

0000b130 <__udivdi3>:
    b130:	defff504 	addi	sp,sp,-44
    b134:	dcc00415 	stw	r19,16(sp)
    b138:	dc000115 	stw	r16,4(sp)
    b13c:	dfc00a15 	stw	ra,40(sp)
    b140:	df000915 	stw	fp,36(sp)
    b144:	ddc00815 	stw	r23,32(sp)
    b148:	dd800715 	stw	r22,28(sp)
    b14c:	dd400615 	stw	r21,24(sp)
    b150:	dd000515 	stw	r20,20(sp)
    b154:	dc800315 	stw	r18,12(sp)
    b158:	dc400215 	stw	r17,8(sp)
    b15c:	2027883a 	mov	r19,r4
    b160:	2821883a 	mov	r16,r5
    b164:	3800411e 	bne	r7,zero,b26c <__udivdi3+0x13c>
    b168:	3023883a 	mov	r17,r6
    b16c:	2025883a 	mov	r18,r4
    b170:	2980522e 	bgeu	r5,r6,b2bc <__udivdi3+0x18c>
    b174:	00bfffd4 	movui	r2,65535
    b178:	282d883a 	mov	r22,r5
    b17c:	1180a836 	bltu	r2,r6,b420 <__udivdi3+0x2f0>
    b180:	00803fc4 	movi	r2,255
    b184:	1185803a 	cmpltu	r2,r2,r6
    b188:	100490fa 	slli	r2,r2,3
    b18c:	3086d83a 	srl	r3,r6,r2
    b190:	01000074 	movhi	r4,1
    b194:	21053304 	addi	r4,r4,5324
    b198:	20c7883a 	add	r3,r4,r3
    b19c:	18c00003 	ldbu	r3,0(r3)
    b1a0:	1885883a 	add	r2,r3,r2
    b1a4:	00c00804 	movi	r3,32
    b1a8:	1887c83a 	sub	r3,r3,r2
    b1ac:	18000526 	beq	r3,zero,b1c4 <__udivdi3+0x94>
    b1b0:	80e0983a 	sll	r16,r16,r3
    b1b4:	9884d83a 	srl	r2,r19,r2
    b1b8:	30e2983a 	sll	r17,r6,r3
    b1bc:	98e4983a 	sll	r18,r19,r3
    b1c0:	142cb03a 	or	r22,r2,r16
    b1c4:	882ad43a 	srli	r21,r17,16
    b1c8:	b009883a 	mov	r4,r22
    b1cc:	8d3fffcc 	andi	r20,r17,65535
    b1d0:	a80b883a 	mov	r5,r21
    b1d4:	000bd3c0 	call	bd3c <__umodsi3>
    b1d8:	b009883a 	mov	r4,r22
    b1dc:	a80b883a 	mov	r5,r21
    b1e0:	1027883a 	mov	r19,r2
    b1e4:	000bcd80 	call	bcd8 <__udivsi3>
    b1e8:	102d883a 	mov	r22,r2
    b1ec:	9826943a 	slli	r19,r19,16
    b1f0:	9004d43a 	srli	r2,r18,16
    b1f4:	a5a1383a 	mul	r16,r20,r22
    b1f8:	14c4b03a 	or	r2,r2,r19
    b1fc:	1400052e 	bgeu	r2,r16,b214 <__udivdi3+0xe4>
    b200:	1445883a 	add	r2,r2,r17
    b204:	b0ffffc4 	addi	r3,r22,-1
    b208:	14400136 	bltu	r2,r17,b210 <__udivdi3+0xe0>
    b20c:	14012336 	bltu	r2,r16,b69c <__udivdi3+0x56c>
    b210:	182d883a 	mov	r22,r3
    b214:	1421c83a 	sub	r16,r2,r16
    b218:	a80b883a 	mov	r5,r21
    b21c:	8009883a 	mov	r4,r16
    b220:	000bd3c0 	call	bd3c <__umodsi3>
    b224:	1027883a 	mov	r19,r2
    b228:	a80b883a 	mov	r5,r21
    b22c:	8009883a 	mov	r4,r16
    b230:	000bcd80 	call	bcd8 <__udivsi3>
    b234:	9826943a 	slli	r19,r19,16
    b238:	a0a9383a 	mul	r20,r20,r2
    b23c:	94bfffcc 	andi	r18,r18,65535
    b240:	94e4b03a 	or	r18,r18,r19
    b244:	9500052e 	bgeu	r18,r20,b25c <__udivdi3+0x12c>
    b248:	8ca5883a 	add	r18,r17,r18
    b24c:	10ffffc4 	addi	r3,r2,-1
    b250:	9440f136 	bltu	r18,r17,b618 <__udivdi3+0x4e8>
    b254:	9500f02e 	bgeu	r18,r20,b618 <__udivdi3+0x4e8>
    b258:	10bfff84 	addi	r2,r2,-2
    b25c:	b00c943a 	slli	r6,r22,16
    b260:	0007883a 	mov	r3,zero
    b264:	3084b03a 	or	r2,r6,r2
    b268:	00005906 	br	b3d0 <__udivdi3+0x2a0>
    b26c:	29c05636 	bltu	r5,r7,b3c8 <__udivdi3+0x298>
    b270:	00bfffd4 	movui	r2,65535
    b274:	11c0622e 	bgeu	r2,r7,b400 <__udivdi3+0x2d0>
    b278:	00804034 	movhi	r2,256
    b27c:	10bfffc4 	addi	r2,r2,-1
    b280:	11c0ee36 	bltu	r2,r7,b63c <__udivdi3+0x50c>
    b284:	00800404 	movi	r2,16
    b288:	3886d83a 	srl	r3,r7,r2
    b28c:	01000074 	movhi	r4,1
    b290:	21053304 	addi	r4,r4,5324
    b294:	20c7883a 	add	r3,r4,r3
    b298:	18c00003 	ldbu	r3,0(r3)
    b29c:	05400804 	movi	r21,32
    b2a0:	1885883a 	add	r2,r3,r2
    b2a4:	a8abc83a 	sub	r21,r21,r2
    b2a8:	a800621e 	bne	r21,zero,b434 <__udivdi3+0x304>
    b2ac:	3c00e936 	bltu	r7,r16,b654 <__udivdi3+0x524>
    b2b0:	9985403a 	cmpgeu	r2,r19,r6
    b2b4:	0007883a 	mov	r3,zero
    b2b8:	00004506 	br	b3d0 <__udivdi3+0x2a0>
    b2bc:	3000041e 	bne	r6,zero,b2d0 <__udivdi3+0x1a0>
    b2c0:	000b883a 	mov	r5,zero
    b2c4:	01000044 	movi	r4,1
    b2c8:	000bcd80 	call	bcd8 <__udivsi3>
    b2cc:	1023883a 	mov	r17,r2
    b2d0:	00bfffd4 	movui	r2,65535
    b2d4:	14404e2e 	bgeu	r2,r17,b410 <__udivdi3+0x2e0>
    b2d8:	00804034 	movhi	r2,256
    b2dc:	10bfffc4 	addi	r2,r2,-1
    b2e0:	1440d836 	bltu	r2,r17,b644 <__udivdi3+0x514>
    b2e4:	00800404 	movi	r2,16
    b2e8:	8886d83a 	srl	r3,r17,r2
    b2ec:	01000074 	movhi	r4,1
    b2f0:	21053304 	addi	r4,r4,5324
    b2f4:	20c7883a 	add	r3,r4,r3
    b2f8:	18c00003 	ldbu	r3,0(r3)
    b2fc:	1885883a 	add	r2,r3,r2
    b300:	00c00804 	movi	r3,32
    b304:	1887c83a 	sub	r3,r3,r2
    b308:	18008f1e 	bne	r3,zero,b548 <__udivdi3+0x418>
    b30c:	882ad43a 	srli	r21,r17,16
    b310:	8461c83a 	sub	r16,r16,r17
    b314:	8d3fffcc 	andi	r20,r17,65535
    b318:	00c00044 	movi	r3,1
    b31c:	8009883a 	mov	r4,r16
    b320:	a80b883a 	mov	r5,r21
    b324:	d8c00015 	stw	r3,0(sp)
    b328:	000bd3c0 	call	bd3c <__umodsi3>
    b32c:	8009883a 	mov	r4,r16
    b330:	a80b883a 	mov	r5,r21
    b334:	1027883a 	mov	r19,r2
    b338:	000bcd80 	call	bcd8 <__udivsi3>
    b33c:	9826943a 	slli	r19,r19,16
    b340:	9008d43a 	srli	r4,r18,16
    b344:	1521383a 	mul	r16,r2,r20
    b348:	102d883a 	mov	r22,r2
    b34c:	24c8b03a 	or	r4,r4,r19
    b350:	d8c00017 	ldw	r3,0(sp)
    b354:	2400052e 	bgeu	r4,r16,b36c <__udivdi3+0x23c>
    b358:	2449883a 	add	r4,r4,r17
    b35c:	b0bfffc4 	addi	r2,r22,-1
    b360:	24400136 	bltu	r4,r17,b368 <__udivdi3+0x238>
    b364:	2400ca36 	bltu	r4,r16,b690 <__udivdi3+0x560>
    b368:	102d883a 	mov	r22,r2
    b36c:	2421c83a 	sub	r16,r4,r16
    b370:	a80b883a 	mov	r5,r21
    b374:	8009883a 	mov	r4,r16
    b378:	d8c00015 	stw	r3,0(sp)
    b37c:	000bd3c0 	call	bd3c <__umodsi3>
    b380:	1027883a 	mov	r19,r2
    b384:	a80b883a 	mov	r5,r21
    b388:	8009883a 	mov	r4,r16
    b38c:	000bcd80 	call	bcd8 <__udivsi3>
    b390:	9826943a 	slli	r19,r19,16
    b394:	1529383a 	mul	r20,r2,r20
    b398:	94bfffcc 	andi	r18,r18,65535
    b39c:	94e4b03a 	or	r18,r18,r19
    b3a0:	d8c00017 	ldw	r3,0(sp)
    b3a4:	9500052e 	bgeu	r18,r20,b3bc <__udivdi3+0x28c>
    b3a8:	8ca5883a 	add	r18,r17,r18
    b3ac:	113fffc4 	addi	r4,r2,-1
    b3b0:	94409736 	bltu	r18,r17,b610 <__udivdi3+0x4e0>
    b3b4:	9500962e 	bgeu	r18,r20,b610 <__udivdi3+0x4e0>
    b3b8:	10bfff84 	addi	r2,r2,-2
    b3bc:	b00c943a 	slli	r6,r22,16
    b3c0:	3084b03a 	or	r2,r6,r2
    b3c4:	00000206 	br	b3d0 <__udivdi3+0x2a0>
    b3c8:	0007883a 	mov	r3,zero
    b3cc:	0005883a 	mov	r2,zero
    b3d0:	dfc00a17 	ldw	ra,40(sp)
    b3d4:	df000917 	ldw	fp,36(sp)
    b3d8:	ddc00817 	ldw	r23,32(sp)
    b3dc:	dd800717 	ldw	r22,28(sp)
    b3e0:	dd400617 	ldw	r21,24(sp)
    b3e4:	dd000517 	ldw	r20,20(sp)
    b3e8:	dcc00417 	ldw	r19,16(sp)
    b3ec:	dc800317 	ldw	r18,12(sp)
    b3f0:	dc400217 	ldw	r17,8(sp)
    b3f4:	dc000117 	ldw	r16,4(sp)
    b3f8:	dec00b04 	addi	sp,sp,44
    b3fc:	f800283a 	ret
    b400:	00803fc4 	movi	r2,255
    b404:	11c5803a 	cmpltu	r2,r2,r7
    b408:	100490fa 	slli	r2,r2,3
    b40c:	003f9e06 	br	b288 <__alt_data_end+0xff00b288>
    b410:	00803fc4 	movi	r2,255
    b414:	1445803a 	cmpltu	r2,r2,r17
    b418:	100490fa 	slli	r2,r2,3
    b41c:	003fb206 	br	b2e8 <__alt_data_end+0xff00b2e8>
    b420:	00804034 	movhi	r2,256
    b424:	10bfffc4 	addi	r2,r2,-1
    b428:	11808836 	bltu	r2,r6,b64c <__udivdi3+0x51c>
    b42c:	00800404 	movi	r2,16
    b430:	003f5606 	br	b18c <__alt_data_end+0xff00b18c>
    b434:	30aed83a 	srl	r23,r6,r2
    b438:	3d4e983a 	sll	r7,r7,r21
    b43c:	80acd83a 	srl	r22,r16,r2
    b440:	9884d83a 	srl	r2,r19,r2
    b444:	3deeb03a 	or	r23,r7,r23
    b448:	b824d43a 	srli	r18,r23,16
    b44c:	8560983a 	sll	r16,r16,r21
    b450:	b009883a 	mov	r4,r22
    b454:	900b883a 	mov	r5,r18
    b458:	3568983a 	sll	r20,r6,r21
    b45c:	1420b03a 	or	r16,r2,r16
    b460:	000bd3c0 	call	bd3c <__umodsi3>
    b464:	b009883a 	mov	r4,r22
    b468:	900b883a 	mov	r5,r18
    b46c:	1023883a 	mov	r17,r2
    b470:	000bcd80 	call	bcd8 <__udivsi3>
    b474:	8808943a 	slli	r4,r17,16
    b478:	bf3fffcc 	andi	fp,r23,65535
    b47c:	8006d43a 	srli	r3,r16,16
    b480:	e0a3383a 	mul	r17,fp,r2
    b484:	100d883a 	mov	r6,r2
    b488:	1906b03a 	or	r3,r3,r4
    b48c:	1c40042e 	bgeu	r3,r17,b4a0 <__udivdi3+0x370>
    b490:	1dc7883a 	add	r3,r3,r23
    b494:	10bfffc4 	addi	r2,r2,-1
    b498:	1dc0752e 	bgeu	r3,r23,b670 <__udivdi3+0x540>
    b49c:	100d883a 	mov	r6,r2
    b4a0:	1c63c83a 	sub	r17,r3,r17
    b4a4:	900b883a 	mov	r5,r18
    b4a8:	8809883a 	mov	r4,r17
    b4ac:	d9800015 	stw	r6,0(sp)
    b4b0:	000bd3c0 	call	bd3c <__umodsi3>
    b4b4:	102d883a 	mov	r22,r2
    b4b8:	8809883a 	mov	r4,r17
    b4bc:	900b883a 	mov	r5,r18
    b4c0:	000bcd80 	call	bcd8 <__udivsi3>
    b4c4:	b02c943a 	slli	r22,r22,16
    b4c8:	e089383a 	mul	r4,fp,r2
    b4cc:	843fffcc 	andi	r16,r16,65535
    b4d0:	85a0b03a 	or	r16,r16,r22
    b4d4:	d9800017 	ldw	r6,0(sp)
    b4d8:	8100042e 	bgeu	r16,r4,b4ec <__udivdi3+0x3bc>
    b4dc:	85e1883a 	add	r16,r16,r23
    b4e0:	10ffffc4 	addi	r3,r2,-1
    b4e4:	85c05e2e 	bgeu	r16,r23,b660 <__udivdi3+0x530>
    b4e8:	1805883a 	mov	r2,r3
    b4ec:	300c943a 	slli	r6,r6,16
    b4f0:	a17fffcc 	andi	r5,r20,65535
    b4f4:	a028d43a 	srli	r20,r20,16
    b4f8:	3084b03a 	or	r2,r6,r2
    b4fc:	10ffffcc 	andi	r3,r2,65535
    b500:	100cd43a 	srli	r6,r2,16
    b504:	194f383a 	mul	r7,r3,r5
    b508:	1d07383a 	mul	r3,r3,r20
    b50c:	314b383a 	mul	r5,r6,r5
    b510:	3810d43a 	srli	r8,r7,16
    b514:	8121c83a 	sub	r16,r16,r4
    b518:	1947883a 	add	r3,r3,r5
    b51c:	40c7883a 	add	r3,r8,r3
    b520:	350d383a 	mul	r6,r6,r20
    b524:	1940022e 	bgeu	r3,r5,b530 <__udivdi3+0x400>
    b528:	01000074 	movhi	r4,1
    b52c:	310d883a 	add	r6,r6,r4
    b530:	1828d43a 	srli	r20,r3,16
    b534:	a18d883a 	add	r6,r20,r6
    b538:	81803e36 	bltu	r16,r6,b634 <__udivdi3+0x504>
    b53c:	81803826 	beq	r16,r6,b620 <__udivdi3+0x4f0>
    b540:	0007883a 	mov	r3,zero
    b544:	003fa206 	br	b3d0 <__alt_data_end+0xff00b3d0>
    b548:	88e2983a 	sll	r17,r17,r3
    b54c:	80a8d83a 	srl	r20,r16,r2
    b550:	80e0983a 	sll	r16,r16,r3
    b554:	882ad43a 	srli	r21,r17,16
    b558:	9884d83a 	srl	r2,r19,r2
    b55c:	a009883a 	mov	r4,r20
    b560:	a80b883a 	mov	r5,r21
    b564:	142eb03a 	or	r23,r2,r16
    b568:	98e4983a 	sll	r18,r19,r3
    b56c:	000bd3c0 	call	bd3c <__umodsi3>
    b570:	a009883a 	mov	r4,r20
    b574:	a80b883a 	mov	r5,r21
    b578:	1021883a 	mov	r16,r2
    b57c:	000bcd80 	call	bcd8 <__udivsi3>
    b580:	1039883a 	mov	fp,r2
    b584:	8d3fffcc 	andi	r20,r17,65535
    b588:	8020943a 	slli	r16,r16,16
    b58c:	b804d43a 	srli	r2,r23,16
    b590:	a72d383a 	mul	r22,r20,fp
    b594:	1404b03a 	or	r2,r2,r16
    b598:	1580062e 	bgeu	r2,r22,b5b4 <__udivdi3+0x484>
    b59c:	1445883a 	add	r2,r2,r17
    b5a0:	e0ffffc4 	addi	r3,fp,-1
    b5a4:	14403836 	bltu	r2,r17,b688 <__udivdi3+0x558>
    b5a8:	1580372e 	bgeu	r2,r22,b688 <__udivdi3+0x558>
    b5ac:	e73fff84 	addi	fp,fp,-2
    b5b0:	1445883a 	add	r2,r2,r17
    b5b4:	15adc83a 	sub	r22,r2,r22
    b5b8:	a80b883a 	mov	r5,r21
    b5bc:	b009883a 	mov	r4,r22
    b5c0:	000bd3c0 	call	bd3c <__umodsi3>
    b5c4:	1027883a 	mov	r19,r2
    b5c8:	b009883a 	mov	r4,r22
    b5cc:	a80b883a 	mov	r5,r21
    b5d0:	000bcd80 	call	bcd8 <__udivsi3>
    b5d4:	9826943a 	slli	r19,r19,16
    b5d8:	a0a1383a 	mul	r16,r20,r2
    b5dc:	b93fffcc 	andi	r4,r23,65535
    b5e0:	24c8b03a 	or	r4,r4,r19
    b5e4:	2400062e 	bgeu	r4,r16,b600 <__udivdi3+0x4d0>
    b5e8:	2449883a 	add	r4,r4,r17
    b5ec:	10ffffc4 	addi	r3,r2,-1
    b5f0:	24402336 	bltu	r4,r17,b680 <__udivdi3+0x550>
    b5f4:	2400222e 	bgeu	r4,r16,b680 <__udivdi3+0x550>
    b5f8:	10bfff84 	addi	r2,r2,-2
    b5fc:	2449883a 	add	r4,r4,r17
    b600:	e038943a 	slli	fp,fp,16
    b604:	2421c83a 	sub	r16,r4,r16
    b608:	e086b03a 	or	r3,fp,r2
    b60c:	003f4306 	br	b31c <__alt_data_end+0xff00b31c>
    b610:	2005883a 	mov	r2,r4
    b614:	003f6906 	br	b3bc <__alt_data_end+0xff00b3bc>
    b618:	1805883a 	mov	r2,r3
    b61c:	003f0f06 	br	b25c <__alt_data_end+0xff00b25c>
    b620:	1806943a 	slli	r3,r3,16
    b624:	9d66983a 	sll	r19,r19,r21
    b628:	39ffffcc 	andi	r7,r7,65535
    b62c:	19c7883a 	add	r3,r3,r7
    b630:	98ffc32e 	bgeu	r19,r3,b540 <__alt_data_end+0xff00b540>
    b634:	10bfffc4 	addi	r2,r2,-1
    b638:	003fc106 	br	b540 <__alt_data_end+0xff00b540>
    b63c:	00800604 	movi	r2,24
    b640:	003f1106 	br	b288 <__alt_data_end+0xff00b288>
    b644:	00800604 	movi	r2,24
    b648:	003f2706 	br	b2e8 <__alt_data_end+0xff00b2e8>
    b64c:	00800604 	movi	r2,24
    b650:	003ece06 	br	b18c <__alt_data_end+0xff00b18c>
    b654:	0007883a 	mov	r3,zero
    b658:	00800044 	movi	r2,1
    b65c:	003f5c06 	br	b3d0 <__alt_data_end+0xff00b3d0>
    b660:	813fa12e 	bgeu	r16,r4,b4e8 <__alt_data_end+0xff00b4e8>
    b664:	10bfff84 	addi	r2,r2,-2
    b668:	85e1883a 	add	r16,r16,r23
    b66c:	003f9f06 	br	b4ec <__alt_data_end+0xff00b4ec>
    b670:	1c7f8a2e 	bgeu	r3,r17,b49c <__alt_data_end+0xff00b49c>
    b674:	31bfff84 	addi	r6,r6,-2
    b678:	1dc7883a 	add	r3,r3,r23
    b67c:	003f8806 	br	b4a0 <__alt_data_end+0xff00b4a0>
    b680:	1805883a 	mov	r2,r3
    b684:	003fde06 	br	b600 <__alt_data_end+0xff00b600>
    b688:	1839883a 	mov	fp,r3
    b68c:	003fc906 	br	b5b4 <__alt_data_end+0xff00b5b4>
    b690:	b5bfff84 	addi	r22,r22,-2
    b694:	2449883a 	add	r4,r4,r17
    b698:	003f3406 	br	b36c <__alt_data_end+0xff00b36c>
    b69c:	b5bfff84 	addi	r22,r22,-2
    b6a0:	1445883a 	add	r2,r2,r17
    b6a4:	003edb06 	br	b214 <__alt_data_end+0xff00b214>

0000b6a8 <__umoddi3>:
    b6a8:	defff404 	addi	sp,sp,-48
    b6ac:	df000a15 	stw	fp,40(sp)
    b6b0:	dc400315 	stw	r17,12(sp)
    b6b4:	dc000215 	stw	r16,8(sp)
    b6b8:	dfc00b15 	stw	ra,44(sp)
    b6bc:	ddc00915 	stw	r23,36(sp)
    b6c0:	dd800815 	stw	r22,32(sp)
    b6c4:	dd400715 	stw	r21,28(sp)
    b6c8:	dd000615 	stw	r20,24(sp)
    b6cc:	dcc00515 	stw	r19,20(sp)
    b6d0:	dc800415 	stw	r18,16(sp)
    b6d4:	2021883a 	mov	r16,r4
    b6d8:	2823883a 	mov	r17,r5
    b6dc:	2839883a 	mov	fp,r5
    b6e0:	38003c1e 	bne	r7,zero,b7d4 <__umoddi3+0x12c>
    b6e4:	3027883a 	mov	r19,r6
    b6e8:	2029883a 	mov	r20,r4
    b6ec:	2980512e 	bgeu	r5,r6,b834 <__umoddi3+0x18c>
    b6f0:	00bfffd4 	movui	r2,65535
    b6f4:	11809a36 	bltu	r2,r6,b960 <__umoddi3+0x2b8>
    b6f8:	01003fc4 	movi	r4,255
    b6fc:	2189803a 	cmpltu	r4,r4,r6
    b700:	200890fa 	slli	r4,r4,3
    b704:	3104d83a 	srl	r2,r6,r4
    b708:	00c00074 	movhi	r3,1
    b70c:	18c53304 	addi	r3,r3,5324
    b710:	1885883a 	add	r2,r3,r2
    b714:	10c00003 	ldbu	r3,0(r2)
    b718:	00800804 	movi	r2,32
    b71c:	1909883a 	add	r4,r3,r4
    b720:	1125c83a 	sub	r18,r2,r4
    b724:	90000526 	beq	r18,zero,b73c <__umoddi3+0x94>
    b728:	8ca2983a 	sll	r17,r17,r18
    b72c:	8108d83a 	srl	r4,r16,r4
    b730:	34a6983a 	sll	r19,r6,r18
    b734:	84a8983a 	sll	r20,r16,r18
    b738:	2478b03a 	or	fp,r4,r17
    b73c:	982ed43a 	srli	r23,r19,16
    b740:	e009883a 	mov	r4,fp
    b744:	9dbfffcc 	andi	r22,r19,65535
    b748:	b80b883a 	mov	r5,r23
    b74c:	000bd3c0 	call	bd3c <__umodsi3>
    b750:	e009883a 	mov	r4,fp
    b754:	b80b883a 	mov	r5,r23
    b758:	102b883a 	mov	r21,r2
    b75c:	000bcd80 	call	bcd8 <__udivsi3>
    b760:	a806943a 	slli	r3,r21,16
    b764:	a008d43a 	srli	r4,r20,16
    b768:	b085383a 	mul	r2,r22,r2
    b76c:	20c8b03a 	or	r4,r4,r3
    b770:	2080032e 	bgeu	r4,r2,b780 <__umoddi3+0xd8>
    b774:	24c9883a 	add	r4,r4,r19
    b778:	24c00136 	bltu	r4,r19,b780 <__umoddi3+0xd8>
    b77c:	20811036 	bltu	r4,r2,bbc0 <__umoddi3+0x518>
    b780:	20abc83a 	sub	r21,r4,r2
    b784:	b80b883a 	mov	r5,r23
    b788:	a809883a 	mov	r4,r21
    b78c:	000bd3c0 	call	bd3c <__umodsi3>
    b790:	1023883a 	mov	r17,r2
    b794:	b80b883a 	mov	r5,r23
    b798:	a809883a 	mov	r4,r21
    b79c:	000bcd80 	call	bcd8 <__udivsi3>
    b7a0:	8822943a 	slli	r17,r17,16
    b7a4:	b085383a 	mul	r2,r22,r2
    b7a8:	a0ffffcc 	andi	r3,r20,65535
    b7ac:	1c46b03a 	or	r3,r3,r17
    b7b0:	1880042e 	bgeu	r3,r2,b7c4 <__umoddi3+0x11c>
    b7b4:	1cc7883a 	add	r3,r3,r19
    b7b8:	1cc00236 	bltu	r3,r19,b7c4 <__umoddi3+0x11c>
    b7bc:	1880012e 	bgeu	r3,r2,b7c4 <__umoddi3+0x11c>
    b7c0:	1cc7883a 	add	r3,r3,r19
    b7c4:	1885c83a 	sub	r2,r3,r2
    b7c8:	1484d83a 	srl	r2,r2,r18
    b7cc:	0007883a 	mov	r3,zero
    b7d0:	00004f06 	br	b910 <__umoddi3+0x268>
    b7d4:	29c04c36 	bltu	r5,r7,b908 <__umoddi3+0x260>
    b7d8:	00bfffd4 	movui	r2,65535
    b7dc:	11c0582e 	bgeu	r2,r7,b940 <__umoddi3+0x298>
    b7e0:	00804034 	movhi	r2,256
    b7e4:	10bfffc4 	addi	r2,r2,-1
    b7e8:	11c0e736 	bltu	r2,r7,bb88 <__umoddi3+0x4e0>
    b7ec:	01000404 	movi	r4,16
    b7f0:	3904d83a 	srl	r2,r7,r4
    b7f4:	00c00074 	movhi	r3,1
    b7f8:	18c53304 	addi	r3,r3,5324
    b7fc:	1885883a 	add	r2,r3,r2
    b800:	14c00003 	ldbu	r19,0(r2)
    b804:	00c00804 	movi	r3,32
    b808:	9927883a 	add	r19,r19,r4
    b80c:	1ce9c83a 	sub	r20,r3,r19
    b810:	a000581e 	bne	r20,zero,b974 <__umoddi3+0x2cc>
    b814:	3c400136 	bltu	r7,r17,b81c <__umoddi3+0x174>
    b818:	8180eb36 	bltu	r16,r6,bbc8 <__umoddi3+0x520>
    b81c:	8185c83a 	sub	r2,r16,r6
    b820:	89e3c83a 	sub	r17,r17,r7
    b824:	8089803a 	cmpltu	r4,r16,r2
    b828:	8939c83a 	sub	fp,r17,r4
    b82c:	e007883a 	mov	r3,fp
    b830:	00003706 	br	b910 <__umoddi3+0x268>
    b834:	3000041e 	bne	r6,zero,b848 <__umoddi3+0x1a0>
    b838:	000b883a 	mov	r5,zero
    b83c:	01000044 	movi	r4,1
    b840:	000bcd80 	call	bcd8 <__udivsi3>
    b844:	1027883a 	mov	r19,r2
    b848:	00bfffd4 	movui	r2,65535
    b84c:	14c0402e 	bgeu	r2,r19,b950 <__umoddi3+0x2a8>
    b850:	00804034 	movhi	r2,256
    b854:	10bfffc4 	addi	r2,r2,-1
    b858:	14c0cd36 	bltu	r2,r19,bb90 <__umoddi3+0x4e8>
    b85c:	00800404 	movi	r2,16
    b860:	9886d83a 	srl	r3,r19,r2
    b864:	01000074 	movhi	r4,1
    b868:	21053304 	addi	r4,r4,5324
    b86c:	20c7883a 	add	r3,r4,r3
    b870:	18c00003 	ldbu	r3,0(r3)
    b874:	1887883a 	add	r3,r3,r2
    b878:	00800804 	movi	r2,32
    b87c:	10e5c83a 	sub	r18,r2,r3
    b880:	9000901e 	bne	r18,zero,bac4 <__umoddi3+0x41c>
    b884:	982cd43a 	srli	r22,r19,16
    b888:	8ce3c83a 	sub	r17,r17,r19
    b88c:	9d7fffcc 	andi	r21,r19,65535
    b890:	b00b883a 	mov	r5,r22
    b894:	8809883a 	mov	r4,r17
    b898:	000bd3c0 	call	bd3c <__umodsi3>
    b89c:	8809883a 	mov	r4,r17
    b8a0:	b00b883a 	mov	r5,r22
    b8a4:	1021883a 	mov	r16,r2
    b8a8:	000bcd80 	call	bcd8 <__udivsi3>
    b8ac:	8006943a 	slli	r3,r16,16
    b8b0:	a008d43a 	srli	r4,r20,16
    b8b4:	1545383a 	mul	r2,r2,r21
    b8b8:	20c8b03a 	or	r4,r4,r3
    b8bc:	2080042e 	bgeu	r4,r2,b8d0 <__umoddi3+0x228>
    b8c0:	24c9883a 	add	r4,r4,r19
    b8c4:	24c00236 	bltu	r4,r19,b8d0 <__umoddi3+0x228>
    b8c8:	2080012e 	bgeu	r4,r2,b8d0 <__umoddi3+0x228>
    b8cc:	24c9883a 	add	r4,r4,r19
    b8d0:	20a1c83a 	sub	r16,r4,r2
    b8d4:	b00b883a 	mov	r5,r22
    b8d8:	8009883a 	mov	r4,r16
    b8dc:	000bd3c0 	call	bd3c <__umodsi3>
    b8e0:	1023883a 	mov	r17,r2
    b8e4:	b00b883a 	mov	r5,r22
    b8e8:	8009883a 	mov	r4,r16
    b8ec:	000bcd80 	call	bcd8 <__udivsi3>
    b8f0:	8822943a 	slli	r17,r17,16
    b8f4:	1545383a 	mul	r2,r2,r21
    b8f8:	a53fffcc 	andi	r20,r20,65535
    b8fc:	a446b03a 	or	r3,r20,r17
    b900:	18bfb02e 	bgeu	r3,r2,b7c4 <__alt_data_end+0xff00b7c4>
    b904:	003fab06 	br	b7b4 <__alt_data_end+0xff00b7b4>
    b908:	2005883a 	mov	r2,r4
    b90c:	2807883a 	mov	r3,r5
    b910:	dfc00b17 	ldw	ra,44(sp)
    b914:	df000a17 	ldw	fp,40(sp)
    b918:	ddc00917 	ldw	r23,36(sp)
    b91c:	dd800817 	ldw	r22,32(sp)
    b920:	dd400717 	ldw	r21,28(sp)
    b924:	dd000617 	ldw	r20,24(sp)
    b928:	dcc00517 	ldw	r19,20(sp)
    b92c:	dc800417 	ldw	r18,16(sp)
    b930:	dc400317 	ldw	r17,12(sp)
    b934:	dc000217 	ldw	r16,8(sp)
    b938:	dec00c04 	addi	sp,sp,48
    b93c:	f800283a 	ret
    b940:	04c03fc4 	movi	r19,255
    b944:	99c9803a 	cmpltu	r4,r19,r7
    b948:	200890fa 	slli	r4,r4,3
    b94c:	003fa806 	br	b7f0 <__alt_data_end+0xff00b7f0>
    b950:	00803fc4 	movi	r2,255
    b954:	14c5803a 	cmpltu	r2,r2,r19
    b958:	100490fa 	slli	r2,r2,3
    b95c:	003fc006 	br	b860 <__alt_data_end+0xff00b860>
    b960:	00804034 	movhi	r2,256
    b964:	10bfffc4 	addi	r2,r2,-1
    b968:	11808b36 	bltu	r2,r6,bb98 <__umoddi3+0x4f0>
    b96c:	01000404 	movi	r4,16
    b970:	003f6406 	br	b704 <__alt_data_end+0xff00b704>
    b974:	34c4d83a 	srl	r2,r6,r19
    b978:	3d0e983a 	sll	r7,r7,r20
    b97c:	8cf8d83a 	srl	fp,r17,r19
    b980:	8d10983a 	sll	r8,r17,r20
    b984:	38aab03a 	or	r21,r7,r2
    b988:	a82cd43a 	srli	r22,r21,16
    b98c:	84e2d83a 	srl	r17,r16,r19
    b990:	e009883a 	mov	r4,fp
    b994:	b00b883a 	mov	r5,r22
    b998:	8a22b03a 	or	r17,r17,r8
    b99c:	3524983a 	sll	r18,r6,r20
    b9a0:	000bd3c0 	call	bd3c <__umodsi3>
    b9a4:	e009883a 	mov	r4,fp
    b9a8:	b00b883a 	mov	r5,r22
    b9ac:	102f883a 	mov	r23,r2
    b9b0:	000bcd80 	call	bcd8 <__udivsi3>
    b9b4:	100d883a 	mov	r6,r2
    b9b8:	b808943a 	slli	r4,r23,16
    b9bc:	aa3fffcc 	andi	r8,r21,65535
    b9c0:	8804d43a 	srli	r2,r17,16
    b9c4:	41af383a 	mul	r23,r8,r6
    b9c8:	8520983a 	sll	r16,r16,r20
    b9cc:	1104b03a 	or	r2,r2,r4
    b9d0:	15c0042e 	bgeu	r2,r23,b9e4 <__umoddi3+0x33c>
    b9d4:	1545883a 	add	r2,r2,r21
    b9d8:	30ffffc4 	addi	r3,r6,-1
    b9dc:	1540742e 	bgeu	r2,r21,bbb0 <__umoddi3+0x508>
    b9e0:	180d883a 	mov	r6,r3
    b9e4:	15efc83a 	sub	r23,r2,r23
    b9e8:	b00b883a 	mov	r5,r22
    b9ec:	b809883a 	mov	r4,r23
    b9f0:	d9800115 	stw	r6,4(sp)
    b9f4:	da000015 	stw	r8,0(sp)
    b9f8:	000bd3c0 	call	bd3c <__umodsi3>
    b9fc:	b00b883a 	mov	r5,r22
    ba00:	b809883a 	mov	r4,r23
    ba04:	1039883a 	mov	fp,r2
    ba08:	000bcd80 	call	bcd8 <__udivsi3>
    ba0c:	da000017 	ldw	r8,0(sp)
    ba10:	e038943a 	slli	fp,fp,16
    ba14:	100b883a 	mov	r5,r2
    ba18:	4089383a 	mul	r4,r8,r2
    ba1c:	8a3fffcc 	andi	r8,r17,65535
    ba20:	4710b03a 	or	r8,r8,fp
    ba24:	d9800117 	ldw	r6,4(sp)
    ba28:	4100042e 	bgeu	r8,r4,ba3c <__umoddi3+0x394>
    ba2c:	4551883a 	add	r8,r8,r21
    ba30:	10bfffc4 	addi	r2,r2,-1
    ba34:	45405a2e 	bgeu	r8,r21,bba0 <__umoddi3+0x4f8>
    ba38:	100b883a 	mov	r5,r2
    ba3c:	300c943a 	slli	r6,r6,16
    ba40:	91ffffcc 	andi	r7,r18,65535
    ba44:	9004d43a 	srli	r2,r18,16
    ba48:	314cb03a 	or	r6,r6,r5
    ba4c:	317fffcc 	andi	r5,r6,65535
    ba50:	300cd43a 	srli	r6,r6,16
    ba54:	29d3383a 	mul	r9,r5,r7
    ba58:	288b383a 	mul	r5,r5,r2
    ba5c:	31cf383a 	mul	r7,r6,r7
    ba60:	4806d43a 	srli	r3,r9,16
    ba64:	4111c83a 	sub	r8,r8,r4
    ba68:	29cb883a 	add	r5,r5,r7
    ba6c:	194b883a 	add	r5,r3,r5
    ba70:	3085383a 	mul	r2,r6,r2
    ba74:	29c0022e 	bgeu	r5,r7,ba80 <__umoddi3+0x3d8>
    ba78:	00c00074 	movhi	r3,1
    ba7c:	10c5883a 	add	r2,r2,r3
    ba80:	2808d43a 	srli	r4,r5,16
    ba84:	280a943a 	slli	r5,r5,16
    ba88:	4a7fffcc 	andi	r9,r9,65535
    ba8c:	2085883a 	add	r2,r4,r2
    ba90:	2a4b883a 	add	r5,r5,r9
    ba94:	40803636 	bltu	r8,r2,bb70 <__umoddi3+0x4c8>
    ba98:	40804d26 	beq	r8,r2,bbd0 <__umoddi3+0x528>
    ba9c:	4089c83a 	sub	r4,r8,r2
    baa0:	280f883a 	mov	r7,r5
    baa4:	81cfc83a 	sub	r7,r16,r7
    baa8:	81c7803a 	cmpltu	r3,r16,r7
    baac:	20c7c83a 	sub	r3,r4,r3
    bab0:	1cc4983a 	sll	r2,r3,r19
    bab4:	3d0ed83a 	srl	r7,r7,r20
    bab8:	1d06d83a 	srl	r3,r3,r20
    babc:	11c4b03a 	or	r2,r2,r7
    bac0:	003f9306 	br	b910 <__alt_data_end+0xff00b910>
    bac4:	9ca6983a 	sll	r19,r19,r18
    bac8:	88e8d83a 	srl	r20,r17,r3
    bacc:	80c4d83a 	srl	r2,r16,r3
    bad0:	982cd43a 	srli	r22,r19,16
    bad4:	8ca2983a 	sll	r17,r17,r18
    bad8:	a009883a 	mov	r4,r20
    badc:	b00b883a 	mov	r5,r22
    bae0:	1478b03a 	or	fp,r2,r17
    bae4:	000bd3c0 	call	bd3c <__umodsi3>
    bae8:	a009883a 	mov	r4,r20
    baec:	b00b883a 	mov	r5,r22
    baf0:	1023883a 	mov	r17,r2
    baf4:	000bcd80 	call	bcd8 <__udivsi3>
    baf8:	9d7fffcc 	andi	r21,r19,65535
    bafc:	880a943a 	slli	r5,r17,16
    bb00:	e008d43a 	srli	r4,fp,16
    bb04:	a885383a 	mul	r2,r21,r2
    bb08:	84a8983a 	sll	r20,r16,r18
    bb0c:	2148b03a 	or	r4,r4,r5
    bb10:	2080042e 	bgeu	r4,r2,bb24 <__umoddi3+0x47c>
    bb14:	24c9883a 	add	r4,r4,r19
    bb18:	24c00236 	bltu	r4,r19,bb24 <__umoddi3+0x47c>
    bb1c:	2080012e 	bgeu	r4,r2,bb24 <__umoddi3+0x47c>
    bb20:	24c9883a 	add	r4,r4,r19
    bb24:	20a3c83a 	sub	r17,r4,r2
    bb28:	b00b883a 	mov	r5,r22
    bb2c:	8809883a 	mov	r4,r17
    bb30:	000bd3c0 	call	bd3c <__umodsi3>
    bb34:	102f883a 	mov	r23,r2
    bb38:	8809883a 	mov	r4,r17
    bb3c:	b00b883a 	mov	r5,r22
    bb40:	000bcd80 	call	bcd8 <__udivsi3>
    bb44:	b82e943a 	slli	r23,r23,16
    bb48:	a885383a 	mul	r2,r21,r2
    bb4c:	e13fffcc 	andi	r4,fp,65535
    bb50:	25c8b03a 	or	r4,r4,r23
    bb54:	2080042e 	bgeu	r4,r2,bb68 <__umoddi3+0x4c0>
    bb58:	24c9883a 	add	r4,r4,r19
    bb5c:	24c00236 	bltu	r4,r19,bb68 <__umoddi3+0x4c0>
    bb60:	2080012e 	bgeu	r4,r2,bb68 <__umoddi3+0x4c0>
    bb64:	24c9883a 	add	r4,r4,r19
    bb68:	20a3c83a 	sub	r17,r4,r2
    bb6c:	003f4806 	br	b890 <__alt_data_end+0xff00b890>
    bb70:	2c8fc83a 	sub	r7,r5,r18
    bb74:	1545c83a 	sub	r2,r2,r21
    bb78:	29cb803a 	cmpltu	r5,r5,r7
    bb7c:	1145c83a 	sub	r2,r2,r5
    bb80:	4089c83a 	sub	r4,r8,r2
    bb84:	003fc706 	br	baa4 <__alt_data_end+0xff00baa4>
    bb88:	01000604 	movi	r4,24
    bb8c:	003f1806 	br	b7f0 <__alt_data_end+0xff00b7f0>
    bb90:	00800604 	movi	r2,24
    bb94:	003f3206 	br	b860 <__alt_data_end+0xff00b860>
    bb98:	01000604 	movi	r4,24
    bb9c:	003ed906 	br	b704 <__alt_data_end+0xff00b704>
    bba0:	413fa52e 	bgeu	r8,r4,ba38 <__alt_data_end+0xff00ba38>
    bba4:	297fff84 	addi	r5,r5,-2
    bba8:	4551883a 	add	r8,r8,r21
    bbac:	003fa306 	br	ba3c <__alt_data_end+0xff00ba3c>
    bbb0:	15ff8b2e 	bgeu	r2,r23,b9e0 <__alt_data_end+0xff00b9e0>
    bbb4:	31bfff84 	addi	r6,r6,-2
    bbb8:	1545883a 	add	r2,r2,r21
    bbbc:	003f8906 	br	b9e4 <__alt_data_end+0xff00b9e4>
    bbc0:	24c9883a 	add	r4,r4,r19
    bbc4:	003eee06 	br	b780 <__alt_data_end+0xff00b780>
    bbc8:	8005883a 	mov	r2,r16
    bbcc:	003f1706 	br	b82c <__alt_data_end+0xff00b82c>
    bbd0:	817fe736 	bltu	r16,r5,bb70 <__alt_data_end+0xff00bb70>
    bbd4:	280f883a 	mov	r7,r5
    bbd8:	0009883a 	mov	r4,zero
    bbdc:	003fb106 	br	baa4 <__alt_data_end+0xff00baa4>

0000bbe0 <__divsi3>:
    bbe0:	20001b16 	blt	r4,zero,bc50 <__divsi3+0x70>
    bbe4:	000f883a 	mov	r7,zero
    bbe8:	28001616 	blt	r5,zero,bc44 <__divsi3+0x64>
    bbec:	200d883a 	mov	r6,r4
    bbf0:	29001a2e 	bgeu	r5,r4,bc5c <__divsi3+0x7c>
    bbf4:	00800804 	movi	r2,32
    bbf8:	00c00044 	movi	r3,1
    bbfc:	00000106 	br	bc04 <__divsi3+0x24>
    bc00:	10000d26 	beq	r2,zero,bc38 <__divsi3+0x58>
    bc04:	294b883a 	add	r5,r5,r5
    bc08:	10bfffc4 	addi	r2,r2,-1
    bc0c:	18c7883a 	add	r3,r3,r3
    bc10:	293ffb36 	bltu	r5,r4,bc00 <__alt_data_end+0xff00bc00>
    bc14:	0005883a 	mov	r2,zero
    bc18:	18000726 	beq	r3,zero,bc38 <__divsi3+0x58>
    bc1c:	0005883a 	mov	r2,zero
    bc20:	31400236 	bltu	r6,r5,bc2c <__divsi3+0x4c>
    bc24:	314dc83a 	sub	r6,r6,r5
    bc28:	10c4b03a 	or	r2,r2,r3
    bc2c:	1806d07a 	srli	r3,r3,1
    bc30:	280ad07a 	srli	r5,r5,1
    bc34:	183ffa1e 	bne	r3,zero,bc20 <__alt_data_end+0xff00bc20>
    bc38:	38000126 	beq	r7,zero,bc40 <__divsi3+0x60>
    bc3c:	0085c83a 	sub	r2,zero,r2
    bc40:	f800283a 	ret
    bc44:	014bc83a 	sub	r5,zero,r5
    bc48:	39c0005c 	xori	r7,r7,1
    bc4c:	003fe706 	br	bbec <__alt_data_end+0xff00bbec>
    bc50:	0109c83a 	sub	r4,zero,r4
    bc54:	01c00044 	movi	r7,1
    bc58:	003fe306 	br	bbe8 <__alt_data_end+0xff00bbe8>
    bc5c:	00c00044 	movi	r3,1
    bc60:	003fee06 	br	bc1c <__alt_data_end+0xff00bc1c>

0000bc64 <__modsi3>:
    bc64:	20001716 	blt	r4,zero,bcc4 <__modsi3+0x60>
    bc68:	000f883a 	mov	r7,zero
    bc6c:	2005883a 	mov	r2,r4
    bc70:	28001216 	blt	r5,zero,bcbc <__modsi3+0x58>
    bc74:	2900162e 	bgeu	r5,r4,bcd0 <__modsi3+0x6c>
    bc78:	01800804 	movi	r6,32
    bc7c:	00c00044 	movi	r3,1
    bc80:	00000106 	br	bc88 <__modsi3+0x24>
    bc84:	30000a26 	beq	r6,zero,bcb0 <__modsi3+0x4c>
    bc88:	294b883a 	add	r5,r5,r5
    bc8c:	31bfffc4 	addi	r6,r6,-1
    bc90:	18c7883a 	add	r3,r3,r3
    bc94:	293ffb36 	bltu	r5,r4,bc84 <__alt_data_end+0xff00bc84>
    bc98:	18000526 	beq	r3,zero,bcb0 <__modsi3+0x4c>
    bc9c:	1806d07a 	srli	r3,r3,1
    bca0:	11400136 	bltu	r2,r5,bca8 <__modsi3+0x44>
    bca4:	1145c83a 	sub	r2,r2,r5
    bca8:	280ad07a 	srli	r5,r5,1
    bcac:	183ffb1e 	bne	r3,zero,bc9c <__alt_data_end+0xff00bc9c>
    bcb0:	38000126 	beq	r7,zero,bcb8 <__modsi3+0x54>
    bcb4:	0085c83a 	sub	r2,zero,r2
    bcb8:	f800283a 	ret
    bcbc:	014bc83a 	sub	r5,zero,r5
    bcc0:	003fec06 	br	bc74 <__alt_data_end+0xff00bc74>
    bcc4:	0109c83a 	sub	r4,zero,r4
    bcc8:	01c00044 	movi	r7,1
    bccc:	003fe706 	br	bc6c <__alt_data_end+0xff00bc6c>
    bcd0:	00c00044 	movi	r3,1
    bcd4:	003ff106 	br	bc9c <__alt_data_end+0xff00bc9c>

0000bcd8 <__udivsi3>:
    bcd8:	200d883a 	mov	r6,r4
    bcdc:	2900152e 	bgeu	r5,r4,bd34 <__udivsi3+0x5c>
    bce0:	28001416 	blt	r5,zero,bd34 <__udivsi3+0x5c>
    bce4:	00800804 	movi	r2,32
    bce8:	00c00044 	movi	r3,1
    bcec:	00000206 	br	bcf8 <__udivsi3+0x20>
    bcf0:	10000e26 	beq	r2,zero,bd2c <__udivsi3+0x54>
    bcf4:	28000516 	blt	r5,zero,bd0c <__udivsi3+0x34>
    bcf8:	294b883a 	add	r5,r5,r5
    bcfc:	10bfffc4 	addi	r2,r2,-1
    bd00:	18c7883a 	add	r3,r3,r3
    bd04:	293ffa36 	bltu	r5,r4,bcf0 <__alt_data_end+0xff00bcf0>
    bd08:	18000826 	beq	r3,zero,bd2c <__udivsi3+0x54>
    bd0c:	0005883a 	mov	r2,zero
    bd10:	31400236 	bltu	r6,r5,bd1c <__udivsi3+0x44>
    bd14:	314dc83a 	sub	r6,r6,r5
    bd18:	10c4b03a 	or	r2,r2,r3
    bd1c:	1806d07a 	srli	r3,r3,1
    bd20:	280ad07a 	srli	r5,r5,1
    bd24:	183ffa1e 	bne	r3,zero,bd10 <__alt_data_end+0xff00bd10>
    bd28:	f800283a 	ret
    bd2c:	0005883a 	mov	r2,zero
    bd30:	f800283a 	ret
    bd34:	00c00044 	movi	r3,1
    bd38:	003ff406 	br	bd0c <__alt_data_end+0xff00bd0c>

0000bd3c <__umodsi3>:
    bd3c:	2005883a 	mov	r2,r4
    bd40:	2900122e 	bgeu	r5,r4,bd8c <__umodsi3+0x50>
    bd44:	28001116 	blt	r5,zero,bd8c <__umodsi3+0x50>
    bd48:	01800804 	movi	r6,32
    bd4c:	00c00044 	movi	r3,1
    bd50:	00000206 	br	bd5c <__umodsi3+0x20>
    bd54:	30000c26 	beq	r6,zero,bd88 <__umodsi3+0x4c>
    bd58:	28000516 	blt	r5,zero,bd70 <__umodsi3+0x34>
    bd5c:	294b883a 	add	r5,r5,r5
    bd60:	31bfffc4 	addi	r6,r6,-1
    bd64:	18c7883a 	add	r3,r3,r3
    bd68:	293ffa36 	bltu	r5,r4,bd54 <__alt_data_end+0xff00bd54>
    bd6c:	18000626 	beq	r3,zero,bd88 <__umodsi3+0x4c>
    bd70:	1806d07a 	srli	r3,r3,1
    bd74:	11400136 	bltu	r2,r5,bd7c <__umodsi3+0x40>
    bd78:	1145c83a 	sub	r2,r2,r5
    bd7c:	280ad07a 	srli	r5,r5,1
    bd80:	183ffb1e 	bne	r3,zero,bd70 <__alt_data_end+0xff00bd70>
    bd84:	f800283a 	ret
    bd88:	f800283a 	ret
    bd8c:	00c00044 	movi	r3,1
    bd90:	003ff706 	br	bd70 <__alt_data_end+0xff00bd70>

0000bd94 <__adddf3>:
    bd94:	02c00434 	movhi	r11,16
    bd98:	5affffc4 	addi	r11,r11,-1
    bd9c:	2806d7fa 	srli	r3,r5,31
    bda0:	2ad4703a 	and	r10,r5,r11
    bda4:	3ad2703a 	and	r9,r7,r11
    bda8:	3804d53a 	srli	r2,r7,20
    bdac:	3018d77a 	srli	r12,r6,29
    bdb0:	280ad53a 	srli	r5,r5,20
    bdb4:	501490fa 	slli	r10,r10,3
    bdb8:	2010d77a 	srli	r8,r4,29
    bdbc:	481290fa 	slli	r9,r9,3
    bdc0:	380ed7fa 	srli	r7,r7,31
    bdc4:	defffb04 	addi	sp,sp,-20
    bdc8:	dc800215 	stw	r18,8(sp)
    bdcc:	dc400115 	stw	r17,4(sp)
    bdd0:	dc000015 	stw	r16,0(sp)
    bdd4:	dfc00415 	stw	ra,16(sp)
    bdd8:	dcc00315 	stw	r19,12(sp)
    bddc:	1c803fcc 	andi	r18,r3,255
    bde0:	2c01ffcc 	andi	r16,r5,2047
    bde4:	5210b03a 	or	r8,r10,r8
    bde8:	202290fa 	slli	r17,r4,3
    bdec:	1081ffcc 	andi	r2,r2,2047
    bdf0:	4b12b03a 	or	r9,r9,r12
    bdf4:	300c90fa 	slli	r6,r6,3
    bdf8:	91c07526 	beq	r18,r7,bfd0 <__adddf3+0x23c>
    bdfc:	8087c83a 	sub	r3,r16,r2
    be00:	00c0ab0e 	bge	zero,r3,c0b0 <__adddf3+0x31c>
    be04:	10002a1e 	bne	r2,zero,beb0 <__adddf3+0x11c>
    be08:	4984b03a 	or	r2,r9,r6
    be0c:	1000961e 	bne	r2,zero,c068 <__adddf3+0x2d4>
    be10:	888001cc 	andi	r2,r17,7
    be14:	10000726 	beq	r2,zero,be34 <__adddf3+0xa0>
    be18:	888003cc 	andi	r2,r17,15
    be1c:	00c00104 	movi	r3,4
    be20:	10c00426 	beq	r2,r3,be34 <__adddf3+0xa0>
    be24:	88c7883a 	add	r3,r17,r3
    be28:	1c63803a 	cmpltu	r17,r3,r17
    be2c:	4451883a 	add	r8,r8,r17
    be30:	1823883a 	mov	r17,r3
    be34:	4080202c 	andhi	r2,r8,128
    be38:	10005926 	beq	r2,zero,bfa0 <__adddf3+0x20c>
    be3c:	84000044 	addi	r16,r16,1
    be40:	0081ffc4 	movi	r2,2047
    be44:	8080ba26 	beq	r16,r2,c130 <__adddf3+0x39c>
    be48:	00bfe034 	movhi	r2,65408
    be4c:	10bfffc4 	addi	r2,r2,-1
    be50:	4090703a 	and	r8,r8,r2
    be54:	4004977a 	slli	r2,r8,29
    be58:	4010927a 	slli	r8,r8,9
    be5c:	8822d0fa 	srli	r17,r17,3
    be60:	8401ffcc 	andi	r16,r16,2047
    be64:	4010d33a 	srli	r8,r8,12
    be68:	9007883a 	mov	r3,r18
    be6c:	1444b03a 	or	r2,r2,r17
    be70:	8401ffcc 	andi	r16,r16,2047
    be74:	8020953a 	slli	r16,r16,20
    be78:	18c03fcc 	andi	r3,r3,255
    be7c:	01000434 	movhi	r4,16
    be80:	213fffc4 	addi	r4,r4,-1
    be84:	180697fa 	slli	r3,r3,31
    be88:	4110703a 	and	r8,r8,r4
    be8c:	4410b03a 	or	r8,r8,r16
    be90:	40c6b03a 	or	r3,r8,r3
    be94:	dfc00417 	ldw	ra,16(sp)
    be98:	dcc00317 	ldw	r19,12(sp)
    be9c:	dc800217 	ldw	r18,8(sp)
    bea0:	dc400117 	ldw	r17,4(sp)
    bea4:	dc000017 	ldw	r16,0(sp)
    bea8:	dec00504 	addi	sp,sp,20
    beac:	f800283a 	ret
    beb0:	0081ffc4 	movi	r2,2047
    beb4:	80bfd626 	beq	r16,r2,be10 <__alt_data_end+0xff00be10>
    beb8:	4a402034 	orhi	r9,r9,128
    bebc:	00800e04 	movi	r2,56
    bec0:	10c09f16 	blt	r2,r3,c140 <__adddf3+0x3ac>
    bec4:	008007c4 	movi	r2,31
    bec8:	10c0c216 	blt	r2,r3,c1d4 <__adddf3+0x440>
    becc:	00800804 	movi	r2,32
    bed0:	10c5c83a 	sub	r2,r2,r3
    bed4:	488a983a 	sll	r5,r9,r2
    bed8:	30c8d83a 	srl	r4,r6,r3
    bedc:	3084983a 	sll	r2,r6,r2
    bee0:	48c6d83a 	srl	r3,r9,r3
    bee4:	290cb03a 	or	r6,r5,r4
    bee8:	1004c03a 	cmpne	r2,r2,zero
    beec:	308cb03a 	or	r6,r6,r2
    bef0:	898dc83a 	sub	r6,r17,r6
    bef4:	89a3803a 	cmpltu	r17,r17,r6
    bef8:	40d1c83a 	sub	r8,r8,r3
    befc:	4451c83a 	sub	r8,r8,r17
    bf00:	3023883a 	mov	r17,r6
    bf04:	4080202c 	andhi	r2,r8,128
    bf08:	10002326 	beq	r2,zero,bf98 <__adddf3+0x204>
    bf0c:	04c02034 	movhi	r19,128
    bf10:	9cffffc4 	addi	r19,r19,-1
    bf14:	44e6703a 	and	r19,r8,r19
    bf18:	98007626 	beq	r19,zero,c0f4 <__adddf3+0x360>
    bf1c:	9809883a 	mov	r4,r19
    bf20:	000e3980 	call	e398 <__clzsi2>
    bf24:	10fffe04 	addi	r3,r2,-8
    bf28:	010007c4 	movi	r4,31
    bf2c:	20c07716 	blt	r4,r3,c10c <__adddf3+0x378>
    bf30:	00800804 	movi	r2,32
    bf34:	10c5c83a 	sub	r2,r2,r3
    bf38:	8884d83a 	srl	r2,r17,r2
    bf3c:	98d0983a 	sll	r8,r19,r3
    bf40:	88e2983a 	sll	r17,r17,r3
    bf44:	1204b03a 	or	r2,r2,r8
    bf48:	1c007416 	blt	r3,r16,c11c <__adddf3+0x388>
    bf4c:	1c21c83a 	sub	r16,r3,r16
    bf50:	82000044 	addi	r8,r16,1
    bf54:	00c007c4 	movi	r3,31
    bf58:	1a009116 	blt	r3,r8,c1a0 <__adddf3+0x40c>
    bf5c:	00c00804 	movi	r3,32
    bf60:	1a07c83a 	sub	r3,r3,r8
    bf64:	8a08d83a 	srl	r4,r17,r8
    bf68:	88e2983a 	sll	r17,r17,r3
    bf6c:	10c6983a 	sll	r3,r2,r3
    bf70:	1210d83a 	srl	r8,r2,r8
    bf74:	8804c03a 	cmpne	r2,r17,zero
    bf78:	1906b03a 	or	r3,r3,r4
    bf7c:	18a2b03a 	or	r17,r3,r2
    bf80:	0021883a 	mov	r16,zero
    bf84:	003fa206 	br	be10 <__alt_data_end+0xff00be10>
    bf88:	1890b03a 	or	r8,r3,r2
    bf8c:	40017d26 	beq	r8,zero,c584 <__adddf3+0x7f0>
    bf90:	1011883a 	mov	r8,r2
    bf94:	1823883a 	mov	r17,r3
    bf98:	888001cc 	andi	r2,r17,7
    bf9c:	103f9e1e 	bne	r2,zero,be18 <__alt_data_end+0xff00be18>
    bfa0:	4004977a 	slli	r2,r8,29
    bfa4:	8822d0fa 	srli	r17,r17,3
    bfa8:	4010d0fa 	srli	r8,r8,3
    bfac:	9007883a 	mov	r3,r18
    bfb0:	1444b03a 	or	r2,r2,r17
    bfb4:	0101ffc4 	movi	r4,2047
    bfb8:	81002426 	beq	r16,r4,c04c <__adddf3+0x2b8>
    bfbc:	8120703a 	and	r16,r16,r4
    bfc0:	01000434 	movhi	r4,16
    bfc4:	213fffc4 	addi	r4,r4,-1
    bfc8:	4110703a 	and	r8,r8,r4
    bfcc:	003fa806 	br	be70 <__alt_data_end+0xff00be70>
    bfd0:	8089c83a 	sub	r4,r16,r2
    bfd4:	01005e0e 	bge	zero,r4,c150 <__adddf3+0x3bc>
    bfd8:	10002b26 	beq	r2,zero,c088 <__adddf3+0x2f4>
    bfdc:	0081ffc4 	movi	r2,2047
    bfe0:	80bf8b26 	beq	r16,r2,be10 <__alt_data_end+0xff00be10>
    bfe4:	4a402034 	orhi	r9,r9,128
    bfe8:	00800e04 	movi	r2,56
    bfec:	1100a40e 	bge	r2,r4,c280 <__adddf3+0x4ec>
    bff0:	498cb03a 	or	r6,r9,r6
    bff4:	300ac03a 	cmpne	r5,r6,zero
    bff8:	0013883a 	mov	r9,zero
    bffc:	2c4b883a 	add	r5,r5,r17
    c000:	2c63803a 	cmpltu	r17,r5,r17
    c004:	4a11883a 	add	r8,r9,r8
    c008:	8a11883a 	add	r8,r17,r8
    c00c:	2823883a 	mov	r17,r5
    c010:	4080202c 	andhi	r2,r8,128
    c014:	103fe026 	beq	r2,zero,bf98 <__alt_data_end+0xff00bf98>
    c018:	84000044 	addi	r16,r16,1
    c01c:	0081ffc4 	movi	r2,2047
    c020:	8080d226 	beq	r16,r2,c36c <__adddf3+0x5d8>
    c024:	00bfe034 	movhi	r2,65408
    c028:	10bfffc4 	addi	r2,r2,-1
    c02c:	4090703a 	and	r8,r8,r2
    c030:	880ad07a 	srli	r5,r17,1
    c034:	400897fa 	slli	r4,r8,31
    c038:	88c0004c 	andi	r3,r17,1
    c03c:	28e2b03a 	or	r17,r5,r3
    c040:	4010d07a 	srli	r8,r8,1
    c044:	2462b03a 	or	r17,r4,r17
    c048:	003f7106 	br	be10 <__alt_data_end+0xff00be10>
    c04c:	4088b03a 	or	r4,r8,r2
    c050:	20014526 	beq	r4,zero,c568 <__adddf3+0x7d4>
    c054:	01000434 	movhi	r4,16
    c058:	42000234 	orhi	r8,r8,8
    c05c:	213fffc4 	addi	r4,r4,-1
    c060:	4110703a 	and	r8,r8,r4
    c064:	003f8206 	br	be70 <__alt_data_end+0xff00be70>
    c068:	18ffffc4 	addi	r3,r3,-1
    c06c:	1800491e 	bne	r3,zero,c194 <__adddf3+0x400>
    c070:	898bc83a 	sub	r5,r17,r6
    c074:	8963803a 	cmpltu	r17,r17,r5
    c078:	4251c83a 	sub	r8,r8,r9
    c07c:	4451c83a 	sub	r8,r8,r17
    c080:	2823883a 	mov	r17,r5
    c084:	003f9f06 	br	bf04 <__alt_data_end+0xff00bf04>
    c088:	4984b03a 	or	r2,r9,r6
    c08c:	103f6026 	beq	r2,zero,be10 <__alt_data_end+0xff00be10>
    c090:	213fffc4 	addi	r4,r4,-1
    c094:	2000931e 	bne	r4,zero,c2e4 <__adddf3+0x550>
    c098:	898d883a 	add	r6,r17,r6
    c09c:	3463803a 	cmpltu	r17,r6,r17
    c0a0:	4251883a 	add	r8,r8,r9
    c0a4:	8a11883a 	add	r8,r17,r8
    c0a8:	3023883a 	mov	r17,r6
    c0ac:	003fd806 	br	c010 <__alt_data_end+0xff00c010>
    c0b0:	1800541e 	bne	r3,zero,c204 <__adddf3+0x470>
    c0b4:	80800044 	addi	r2,r16,1
    c0b8:	1081ffcc 	andi	r2,r2,2047
    c0bc:	00c00044 	movi	r3,1
    c0c0:	1880a00e 	bge	r3,r2,c344 <__adddf3+0x5b0>
    c0c4:	8989c83a 	sub	r4,r17,r6
    c0c8:	8905803a 	cmpltu	r2,r17,r4
    c0cc:	4267c83a 	sub	r19,r8,r9
    c0d0:	98a7c83a 	sub	r19,r19,r2
    c0d4:	9880202c 	andhi	r2,r19,128
    c0d8:	10006326 	beq	r2,zero,c268 <__adddf3+0x4d4>
    c0dc:	3463c83a 	sub	r17,r6,r17
    c0e0:	4a07c83a 	sub	r3,r9,r8
    c0e4:	344d803a 	cmpltu	r6,r6,r17
    c0e8:	19a7c83a 	sub	r19,r3,r6
    c0ec:	3825883a 	mov	r18,r7
    c0f0:	983f8a1e 	bne	r19,zero,bf1c <__alt_data_end+0xff00bf1c>
    c0f4:	8809883a 	mov	r4,r17
    c0f8:	000e3980 	call	e398 <__clzsi2>
    c0fc:	10800804 	addi	r2,r2,32
    c100:	10fffe04 	addi	r3,r2,-8
    c104:	010007c4 	movi	r4,31
    c108:	20ff890e 	bge	r4,r3,bf30 <__alt_data_end+0xff00bf30>
    c10c:	10bff604 	addi	r2,r2,-40
    c110:	8884983a 	sll	r2,r17,r2
    c114:	0023883a 	mov	r17,zero
    c118:	1c3f8c0e 	bge	r3,r16,bf4c <__alt_data_end+0xff00bf4c>
    c11c:	023fe034 	movhi	r8,65408
    c120:	423fffc4 	addi	r8,r8,-1
    c124:	80e1c83a 	sub	r16,r16,r3
    c128:	1210703a 	and	r8,r2,r8
    c12c:	003f3806 	br	be10 <__alt_data_end+0xff00be10>
    c130:	9007883a 	mov	r3,r18
    c134:	0011883a 	mov	r8,zero
    c138:	0005883a 	mov	r2,zero
    c13c:	003f4c06 	br	be70 <__alt_data_end+0xff00be70>
    c140:	498cb03a 	or	r6,r9,r6
    c144:	300cc03a 	cmpne	r6,r6,zero
    c148:	0007883a 	mov	r3,zero
    c14c:	003f6806 	br	bef0 <__alt_data_end+0xff00bef0>
    c150:	20009c1e 	bne	r4,zero,c3c4 <__adddf3+0x630>
    c154:	80800044 	addi	r2,r16,1
    c158:	1141ffcc 	andi	r5,r2,2047
    c15c:	01000044 	movi	r4,1
    c160:	2140670e 	bge	r4,r5,c300 <__adddf3+0x56c>
    c164:	0101ffc4 	movi	r4,2047
    c168:	11007f26 	beq	r2,r4,c368 <__adddf3+0x5d4>
    c16c:	898d883a 	add	r6,r17,r6
    c170:	4247883a 	add	r3,r8,r9
    c174:	3451803a 	cmpltu	r8,r6,r17
    c178:	40d1883a 	add	r8,r8,r3
    c17c:	402297fa 	slli	r17,r8,31
    c180:	300cd07a 	srli	r6,r6,1
    c184:	4010d07a 	srli	r8,r8,1
    c188:	1021883a 	mov	r16,r2
    c18c:	89a2b03a 	or	r17,r17,r6
    c190:	003f1f06 	br	be10 <__alt_data_end+0xff00be10>
    c194:	0081ffc4 	movi	r2,2047
    c198:	80bf481e 	bne	r16,r2,bebc <__alt_data_end+0xff00bebc>
    c19c:	003f1c06 	br	be10 <__alt_data_end+0xff00be10>
    c1a0:	843ff844 	addi	r16,r16,-31
    c1a4:	01000804 	movi	r4,32
    c1a8:	1406d83a 	srl	r3,r2,r16
    c1ac:	41005026 	beq	r8,r4,c2f0 <__adddf3+0x55c>
    c1b0:	01001004 	movi	r4,64
    c1b4:	2211c83a 	sub	r8,r4,r8
    c1b8:	1204983a 	sll	r2,r2,r8
    c1bc:	88a2b03a 	or	r17,r17,r2
    c1c0:	8822c03a 	cmpne	r17,r17,zero
    c1c4:	1c62b03a 	or	r17,r3,r17
    c1c8:	0011883a 	mov	r8,zero
    c1cc:	0021883a 	mov	r16,zero
    c1d0:	003f7106 	br	bf98 <__alt_data_end+0xff00bf98>
    c1d4:	193ff804 	addi	r4,r3,-32
    c1d8:	00800804 	movi	r2,32
    c1dc:	4908d83a 	srl	r4,r9,r4
    c1e0:	18804526 	beq	r3,r2,c2f8 <__adddf3+0x564>
    c1e4:	00801004 	movi	r2,64
    c1e8:	10c5c83a 	sub	r2,r2,r3
    c1ec:	4886983a 	sll	r3,r9,r2
    c1f0:	198cb03a 	or	r6,r3,r6
    c1f4:	300cc03a 	cmpne	r6,r6,zero
    c1f8:	218cb03a 	or	r6,r4,r6
    c1fc:	0007883a 	mov	r3,zero
    c200:	003f3b06 	br	bef0 <__alt_data_end+0xff00bef0>
    c204:	80002a26 	beq	r16,zero,c2b0 <__adddf3+0x51c>
    c208:	0101ffc4 	movi	r4,2047
    c20c:	11006826 	beq	r2,r4,c3b0 <__adddf3+0x61c>
    c210:	00c7c83a 	sub	r3,zero,r3
    c214:	42002034 	orhi	r8,r8,128
    c218:	01000e04 	movi	r4,56
    c21c:	20c07c16 	blt	r4,r3,c410 <__adddf3+0x67c>
    c220:	010007c4 	movi	r4,31
    c224:	20c0da16 	blt	r4,r3,c590 <__adddf3+0x7fc>
    c228:	01000804 	movi	r4,32
    c22c:	20c9c83a 	sub	r4,r4,r3
    c230:	4114983a 	sll	r10,r8,r4
    c234:	88cad83a 	srl	r5,r17,r3
    c238:	8908983a 	sll	r4,r17,r4
    c23c:	40c6d83a 	srl	r3,r8,r3
    c240:	5162b03a 	or	r17,r10,r5
    c244:	2008c03a 	cmpne	r4,r4,zero
    c248:	8922b03a 	or	r17,r17,r4
    c24c:	3463c83a 	sub	r17,r6,r17
    c250:	48c7c83a 	sub	r3,r9,r3
    c254:	344d803a 	cmpltu	r6,r6,r17
    c258:	1991c83a 	sub	r8,r3,r6
    c25c:	1021883a 	mov	r16,r2
    c260:	3825883a 	mov	r18,r7
    c264:	003f2706 	br	bf04 <__alt_data_end+0xff00bf04>
    c268:	24d0b03a 	or	r8,r4,r19
    c26c:	40001b1e 	bne	r8,zero,c2dc <__adddf3+0x548>
    c270:	0005883a 	mov	r2,zero
    c274:	0007883a 	mov	r3,zero
    c278:	0021883a 	mov	r16,zero
    c27c:	003f4d06 	br	bfb4 <__alt_data_end+0xff00bfb4>
    c280:	008007c4 	movi	r2,31
    c284:	11003c16 	blt	r2,r4,c378 <__adddf3+0x5e4>
    c288:	00800804 	movi	r2,32
    c28c:	1105c83a 	sub	r2,r2,r4
    c290:	488e983a 	sll	r7,r9,r2
    c294:	310ad83a 	srl	r5,r6,r4
    c298:	3084983a 	sll	r2,r6,r2
    c29c:	4912d83a 	srl	r9,r9,r4
    c2a0:	394ab03a 	or	r5,r7,r5
    c2a4:	1004c03a 	cmpne	r2,r2,zero
    c2a8:	288ab03a 	or	r5,r5,r2
    c2ac:	003f5306 	br	bffc <__alt_data_end+0xff00bffc>
    c2b0:	4448b03a 	or	r4,r8,r17
    c2b4:	20003e26 	beq	r4,zero,c3b0 <__adddf3+0x61c>
    c2b8:	00c6303a 	nor	r3,zero,r3
    c2bc:	18003a1e 	bne	r3,zero,c3a8 <__adddf3+0x614>
    c2c0:	3463c83a 	sub	r17,r6,r17
    c2c4:	4a07c83a 	sub	r3,r9,r8
    c2c8:	344d803a 	cmpltu	r6,r6,r17
    c2cc:	1991c83a 	sub	r8,r3,r6
    c2d0:	1021883a 	mov	r16,r2
    c2d4:	3825883a 	mov	r18,r7
    c2d8:	003f0a06 	br	bf04 <__alt_data_end+0xff00bf04>
    c2dc:	2023883a 	mov	r17,r4
    c2e0:	003f0d06 	br	bf18 <__alt_data_end+0xff00bf18>
    c2e4:	0081ffc4 	movi	r2,2047
    c2e8:	80bf3f1e 	bne	r16,r2,bfe8 <__alt_data_end+0xff00bfe8>
    c2ec:	003ec806 	br	be10 <__alt_data_end+0xff00be10>
    c2f0:	0005883a 	mov	r2,zero
    c2f4:	003fb106 	br	c1bc <__alt_data_end+0xff00c1bc>
    c2f8:	0007883a 	mov	r3,zero
    c2fc:	003fbc06 	br	c1f0 <__alt_data_end+0xff00c1f0>
    c300:	4444b03a 	or	r2,r8,r17
    c304:	8000871e 	bne	r16,zero,c524 <__adddf3+0x790>
    c308:	1000ba26 	beq	r2,zero,c5f4 <__adddf3+0x860>
    c30c:	4984b03a 	or	r2,r9,r6
    c310:	103ebf26 	beq	r2,zero,be10 <__alt_data_end+0xff00be10>
    c314:	8985883a 	add	r2,r17,r6
    c318:	4247883a 	add	r3,r8,r9
    c31c:	1451803a 	cmpltu	r8,r2,r17
    c320:	40d1883a 	add	r8,r8,r3
    c324:	40c0202c 	andhi	r3,r8,128
    c328:	1023883a 	mov	r17,r2
    c32c:	183f1a26 	beq	r3,zero,bf98 <__alt_data_end+0xff00bf98>
    c330:	00bfe034 	movhi	r2,65408
    c334:	10bfffc4 	addi	r2,r2,-1
    c338:	2021883a 	mov	r16,r4
    c33c:	4090703a 	and	r8,r8,r2
    c340:	003eb306 	br	be10 <__alt_data_end+0xff00be10>
    c344:	4444b03a 	or	r2,r8,r17
    c348:	8000291e 	bne	r16,zero,c3f0 <__adddf3+0x65c>
    c34c:	10004b1e 	bne	r2,zero,c47c <__adddf3+0x6e8>
    c350:	4990b03a 	or	r8,r9,r6
    c354:	40008b26 	beq	r8,zero,c584 <__adddf3+0x7f0>
    c358:	4811883a 	mov	r8,r9
    c35c:	3023883a 	mov	r17,r6
    c360:	3825883a 	mov	r18,r7
    c364:	003eaa06 	br	be10 <__alt_data_end+0xff00be10>
    c368:	1021883a 	mov	r16,r2
    c36c:	0011883a 	mov	r8,zero
    c370:	0005883a 	mov	r2,zero
    c374:	003f0f06 	br	bfb4 <__alt_data_end+0xff00bfb4>
    c378:	217ff804 	addi	r5,r4,-32
    c37c:	00800804 	movi	r2,32
    c380:	494ad83a 	srl	r5,r9,r5
    c384:	20807d26 	beq	r4,r2,c57c <__adddf3+0x7e8>
    c388:	00801004 	movi	r2,64
    c38c:	1109c83a 	sub	r4,r2,r4
    c390:	4912983a 	sll	r9,r9,r4
    c394:	498cb03a 	or	r6,r9,r6
    c398:	300cc03a 	cmpne	r6,r6,zero
    c39c:	298ab03a 	or	r5,r5,r6
    c3a0:	0013883a 	mov	r9,zero
    c3a4:	003f1506 	br	bffc <__alt_data_end+0xff00bffc>
    c3a8:	0101ffc4 	movi	r4,2047
    c3ac:	113f9a1e 	bne	r2,r4,c218 <__alt_data_end+0xff00c218>
    c3b0:	4811883a 	mov	r8,r9
    c3b4:	3023883a 	mov	r17,r6
    c3b8:	1021883a 	mov	r16,r2
    c3bc:	3825883a 	mov	r18,r7
    c3c0:	003e9306 	br	be10 <__alt_data_end+0xff00be10>
    c3c4:	8000161e 	bne	r16,zero,c420 <__adddf3+0x68c>
    c3c8:	444ab03a 	or	r5,r8,r17
    c3cc:	28005126 	beq	r5,zero,c514 <__adddf3+0x780>
    c3d0:	0108303a 	nor	r4,zero,r4
    c3d4:	20004d1e 	bne	r4,zero,c50c <__adddf3+0x778>
    c3d8:	89a3883a 	add	r17,r17,r6
    c3dc:	4253883a 	add	r9,r8,r9
    c3e0:	898d803a 	cmpltu	r6,r17,r6
    c3e4:	3251883a 	add	r8,r6,r9
    c3e8:	1021883a 	mov	r16,r2
    c3ec:	003f0806 	br	c010 <__alt_data_end+0xff00c010>
    c3f0:	1000301e 	bne	r2,zero,c4b4 <__adddf3+0x720>
    c3f4:	4984b03a 	or	r2,r9,r6
    c3f8:	10007126 	beq	r2,zero,c5c0 <__adddf3+0x82c>
    c3fc:	4811883a 	mov	r8,r9
    c400:	3023883a 	mov	r17,r6
    c404:	3825883a 	mov	r18,r7
    c408:	0401ffc4 	movi	r16,2047
    c40c:	003e8006 	br	be10 <__alt_data_end+0xff00be10>
    c410:	4462b03a 	or	r17,r8,r17
    c414:	8822c03a 	cmpne	r17,r17,zero
    c418:	0007883a 	mov	r3,zero
    c41c:	003f8b06 	br	c24c <__alt_data_end+0xff00c24c>
    c420:	0141ffc4 	movi	r5,2047
    c424:	11403b26 	beq	r2,r5,c514 <__adddf3+0x780>
    c428:	0109c83a 	sub	r4,zero,r4
    c42c:	42002034 	orhi	r8,r8,128
    c430:	01400e04 	movi	r5,56
    c434:	29006716 	blt	r5,r4,c5d4 <__adddf3+0x840>
    c438:	014007c4 	movi	r5,31
    c43c:	29007016 	blt	r5,r4,c600 <__adddf3+0x86c>
    c440:	01400804 	movi	r5,32
    c444:	290bc83a 	sub	r5,r5,r4
    c448:	4154983a 	sll	r10,r8,r5
    c44c:	890ed83a 	srl	r7,r17,r4
    c450:	894a983a 	sll	r5,r17,r5
    c454:	4108d83a 	srl	r4,r8,r4
    c458:	51e2b03a 	or	r17,r10,r7
    c45c:	280ac03a 	cmpne	r5,r5,zero
    c460:	8962b03a 	or	r17,r17,r5
    c464:	89a3883a 	add	r17,r17,r6
    c468:	2253883a 	add	r9,r4,r9
    c46c:	898d803a 	cmpltu	r6,r17,r6
    c470:	3251883a 	add	r8,r6,r9
    c474:	1021883a 	mov	r16,r2
    c478:	003ee506 	br	c010 <__alt_data_end+0xff00c010>
    c47c:	4984b03a 	or	r2,r9,r6
    c480:	103e6326 	beq	r2,zero,be10 <__alt_data_end+0xff00be10>
    c484:	8987c83a 	sub	r3,r17,r6
    c488:	88c9803a 	cmpltu	r4,r17,r3
    c48c:	4245c83a 	sub	r2,r8,r9
    c490:	1105c83a 	sub	r2,r2,r4
    c494:	1100202c 	andhi	r4,r2,128
    c498:	203ebb26 	beq	r4,zero,bf88 <__alt_data_end+0xff00bf88>
    c49c:	3463c83a 	sub	r17,r6,r17
    c4a0:	4a07c83a 	sub	r3,r9,r8
    c4a4:	344d803a 	cmpltu	r6,r6,r17
    c4a8:	1991c83a 	sub	r8,r3,r6
    c4ac:	3825883a 	mov	r18,r7
    c4b0:	003e5706 	br	be10 <__alt_data_end+0xff00be10>
    c4b4:	4984b03a 	or	r2,r9,r6
    c4b8:	10002e26 	beq	r2,zero,c574 <__adddf3+0x7e0>
    c4bc:	4004d0fa 	srli	r2,r8,3
    c4c0:	8822d0fa 	srli	r17,r17,3
    c4c4:	4010977a 	slli	r8,r8,29
    c4c8:	10c0022c 	andhi	r3,r2,8
    c4cc:	4462b03a 	or	r17,r8,r17
    c4d0:	18000826 	beq	r3,zero,c4f4 <__adddf3+0x760>
    c4d4:	4808d0fa 	srli	r4,r9,3
    c4d8:	20c0022c 	andhi	r3,r4,8
    c4dc:	1800051e 	bne	r3,zero,c4f4 <__adddf3+0x760>
    c4e0:	300cd0fa 	srli	r6,r6,3
    c4e4:	4806977a 	slli	r3,r9,29
    c4e8:	2005883a 	mov	r2,r4
    c4ec:	3825883a 	mov	r18,r7
    c4f0:	19a2b03a 	or	r17,r3,r6
    c4f4:	8810d77a 	srli	r8,r17,29
    c4f8:	100490fa 	slli	r2,r2,3
    c4fc:	882290fa 	slli	r17,r17,3
    c500:	0401ffc4 	movi	r16,2047
    c504:	4090b03a 	or	r8,r8,r2
    c508:	003e4106 	br	be10 <__alt_data_end+0xff00be10>
    c50c:	0141ffc4 	movi	r5,2047
    c510:	117fc71e 	bne	r2,r5,c430 <__alt_data_end+0xff00c430>
    c514:	4811883a 	mov	r8,r9
    c518:	3023883a 	mov	r17,r6
    c51c:	1021883a 	mov	r16,r2
    c520:	003e3b06 	br	be10 <__alt_data_end+0xff00be10>
    c524:	10002f26 	beq	r2,zero,c5e4 <__adddf3+0x850>
    c528:	4984b03a 	or	r2,r9,r6
    c52c:	10001126 	beq	r2,zero,c574 <__adddf3+0x7e0>
    c530:	4004d0fa 	srli	r2,r8,3
    c534:	8822d0fa 	srli	r17,r17,3
    c538:	4010977a 	slli	r8,r8,29
    c53c:	10c0022c 	andhi	r3,r2,8
    c540:	4462b03a 	or	r17,r8,r17
    c544:	183feb26 	beq	r3,zero,c4f4 <__alt_data_end+0xff00c4f4>
    c548:	4808d0fa 	srli	r4,r9,3
    c54c:	20c0022c 	andhi	r3,r4,8
    c550:	183fe81e 	bne	r3,zero,c4f4 <__alt_data_end+0xff00c4f4>
    c554:	300cd0fa 	srli	r6,r6,3
    c558:	4806977a 	slli	r3,r9,29
    c55c:	2005883a 	mov	r2,r4
    c560:	19a2b03a 	or	r17,r3,r6
    c564:	003fe306 	br	c4f4 <__alt_data_end+0xff00c4f4>
    c568:	0011883a 	mov	r8,zero
    c56c:	0005883a 	mov	r2,zero
    c570:	003e3f06 	br	be70 <__alt_data_end+0xff00be70>
    c574:	0401ffc4 	movi	r16,2047
    c578:	003e2506 	br	be10 <__alt_data_end+0xff00be10>
    c57c:	0013883a 	mov	r9,zero
    c580:	003f8406 	br	c394 <__alt_data_end+0xff00c394>
    c584:	0005883a 	mov	r2,zero
    c588:	0007883a 	mov	r3,zero
    c58c:	003e8906 	br	bfb4 <__alt_data_end+0xff00bfb4>
    c590:	197ff804 	addi	r5,r3,-32
    c594:	01000804 	movi	r4,32
    c598:	414ad83a 	srl	r5,r8,r5
    c59c:	19002426 	beq	r3,r4,c630 <__adddf3+0x89c>
    c5a0:	01001004 	movi	r4,64
    c5a4:	20c7c83a 	sub	r3,r4,r3
    c5a8:	40c6983a 	sll	r3,r8,r3
    c5ac:	1c46b03a 	or	r3,r3,r17
    c5b0:	1806c03a 	cmpne	r3,r3,zero
    c5b4:	28e2b03a 	or	r17,r5,r3
    c5b8:	0007883a 	mov	r3,zero
    c5bc:	003f2306 	br	c24c <__alt_data_end+0xff00c24c>
    c5c0:	0007883a 	mov	r3,zero
    c5c4:	5811883a 	mov	r8,r11
    c5c8:	00bfffc4 	movi	r2,-1
    c5cc:	0401ffc4 	movi	r16,2047
    c5d0:	003e7806 	br	bfb4 <__alt_data_end+0xff00bfb4>
    c5d4:	4462b03a 	or	r17,r8,r17
    c5d8:	8822c03a 	cmpne	r17,r17,zero
    c5dc:	0009883a 	mov	r4,zero
    c5e0:	003fa006 	br	c464 <__alt_data_end+0xff00c464>
    c5e4:	4811883a 	mov	r8,r9
    c5e8:	3023883a 	mov	r17,r6
    c5ec:	0401ffc4 	movi	r16,2047
    c5f0:	003e0706 	br	be10 <__alt_data_end+0xff00be10>
    c5f4:	4811883a 	mov	r8,r9
    c5f8:	3023883a 	mov	r17,r6
    c5fc:	003e0406 	br	be10 <__alt_data_end+0xff00be10>
    c600:	21fff804 	addi	r7,r4,-32
    c604:	01400804 	movi	r5,32
    c608:	41ced83a 	srl	r7,r8,r7
    c60c:	21400a26 	beq	r4,r5,c638 <__adddf3+0x8a4>
    c610:	01401004 	movi	r5,64
    c614:	2909c83a 	sub	r4,r5,r4
    c618:	4108983a 	sll	r4,r8,r4
    c61c:	2448b03a 	or	r4,r4,r17
    c620:	2008c03a 	cmpne	r4,r4,zero
    c624:	3922b03a 	or	r17,r7,r4
    c628:	0009883a 	mov	r4,zero
    c62c:	003f8d06 	br	c464 <__alt_data_end+0xff00c464>
    c630:	0007883a 	mov	r3,zero
    c634:	003fdd06 	br	c5ac <__alt_data_end+0xff00c5ac>
    c638:	0009883a 	mov	r4,zero
    c63c:	003ff706 	br	c61c <__alt_data_end+0xff00c61c>

0000c640 <__divdf3>:
    c640:	defff204 	addi	sp,sp,-56
    c644:	dd400915 	stw	r21,36(sp)
    c648:	282ad53a 	srli	r21,r5,20
    c64c:	dd000815 	stw	r20,32(sp)
    c650:	2828d7fa 	srli	r20,r5,31
    c654:	dc000415 	stw	r16,16(sp)
    c658:	04000434 	movhi	r16,16
    c65c:	df000c15 	stw	fp,48(sp)
    c660:	843fffc4 	addi	r16,r16,-1
    c664:	dfc00d15 	stw	ra,52(sp)
    c668:	ddc00b15 	stw	r23,44(sp)
    c66c:	dd800a15 	stw	r22,40(sp)
    c670:	dcc00715 	stw	r19,28(sp)
    c674:	dc800615 	stw	r18,24(sp)
    c678:	dc400515 	stw	r17,20(sp)
    c67c:	ad41ffcc 	andi	r21,r21,2047
    c680:	2c20703a 	and	r16,r5,r16
    c684:	a7003fcc 	andi	fp,r20,255
    c688:	a8006126 	beq	r21,zero,c810 <__divdf3+0x1d0>
    c68c:	0081ffc4 	movi	r2,2047
    c690:	2025883a 	mov	r18,r4
    c694:	a8803726 	beq	r21,r2,c774 <__divdf3+0x134>
    c698:	80800434 	orhi	r2,r16,16
    c69c:	100490fa 	slli	r2,r2,3
    c6a0:	2020d77a 	srli	r16,r4,29
    c6a4:	202490fa 	slli	r18,r4,3
    c6a8:	ad7f0044 	addi	r21,r21,-1023
    c6ac:	80a0b03a 	or	r16,r16,r2
    c6b0:	0027883a 	mov	r19,zero
    c6b4:	0013883a 	mov	r9,zero
    c6b8:	3804d53a 	srli	r2,r7,20
    c6bc:	382cd7fa 	srli	r22,r7,31
    c6c0:	04400434 	movhi	r17,16
    c6c4:	8c7fffc4 	addi	r17,r17,-1
    c6c8:	1081ffcc 	andi	r2,r2,2047
    c6cc:	3011883a 	mov	r8,r6
    c6d0:	3c62703a 	and	r17,r7,r17
    c6d4:	b5c03fcc 	andi	r23,r22,255
    c6d8:	10006c26 	beq	r2,zero,c88c <__divdf3+0x24c>
    c6dc:	00c1ffc4 	movi	r3,2047
    c6e0:	10c06426 	beq	r2,r3,c874 <__divdf3+0x234>
    c6e4:	88c00434 	orhi	r3,r17,16
    c6e8:	180690fa 	slli	r3,r3,3
    c6ec:	3022d77a 	srli	r17,r6,29
    c6f0:	301090fa 	slli	r8,r6,3
    c6f4:	10bf0044 	addi	r2,r2,-1023
    c6f8:	88e2b03a 	or	r17,r17,r3
    c6fc:	000f883a 	mov	r7,zero
    c700:	a58cf03a 	xor	r6,r20,r22
    c704:	3cc8b03a 	or	r4,r7,r19
    c708:	a8abc83a 	sub	r21,r21,r2
    c70c:	008003c4 	movi	r2,15
    c710:	3007883a 	mov	r3,r6
    c714:	34c03fcc 	andi	r19,r6,255
    c718:	11009036 	bltu	r2,r4,c95c <__divdf3+0x31c>
    c71c:	200890ba 	slli	r4,r4,2
    c720:	00800074 	movhi	r2,1
    c724:	10b1cd04 	addi	r2,r2,-14540
    c728:	2089883a 	add	r4,r4,r2
    c72c:	20800017 	ldw	r2,0(r4)
    c730:	1000683a 	jmp	r2
    c734:	0000c95c 	xori	zero,zero,805
    c738:	0000c7ac 	andhi	zero,zero,798
    c73c:	0000c94c 	andi	zero,zero,805
    c740:	0000c7a0 	cmpeqi	zero,zero,798
    c744:	0000c94c 	andi	zero,zero,805
    c748:	0000c920 	cmpeqi	zero,zero,804
    c74c:	0000c94c 	andi	zero,zero,805
    c750:	0000c7a0 	cmpeqi	zero,zero,798
    c754:	0000c7ac 	andhi	zero,zero,798
    c758:	0000c7ac 	andhi	zero,zero,798
    c75c:	0000c920 	cmpeqi	zero,zero,804
    c760:	0000c7a0 	cmpeqi	zero,zero,798
    c764:	0000c790 	cmplti	zero,zero,798
    c768:	0000c790 	cmplti	zero,zero,798
    c76c:	0000c790 	cmplti	zero,zero,798
    c770:	0000cc40 	call	cc4 <init_LCD+0x298>
    c774:	2404b03a 	or	r2,r4,r16
    c778:	1000661e 	bne	r2,zero,c914 <__divdf3+0x2d4>
    c77c:	04c00204 	movi	r19,8
    c780:	0021883a 	mov	r16,zero
    c784:	0025883a 	mov	r18,zero
    c788:	02400084 	movi	r9,2
    c78c:	003fca06 	br	c6b8 <__alt_data_end+0xff00c6b8>
    c790:	8023883a 	mov	r17,r16
    c794:	9011883a 	mov	r8,r18
    c798:	e02f883a 	mov	r23,fp
    c79c:	480f883a 	mov	r7,r9
    c7a0:	00800084 	movi	r2,2
    c7a4:	3881311e 	bne	r7,r2,cc6c <__divdf3+0x62c>
    c7a8:	b827883a 	mov	r19,r23
    c7ac:	98c0004c 	andi	r3,r19,1
    c7b0:	0081ffc4 	movi	r2,2047
    c7b4:	000b883a 	mov	r5,zero
    c7b8:	0025883a 	mov	r18,zero
    c7bc:	1004953a 	slli	r2,r2,20
    c7c0:	18c03fcc 	andi	r3,r3,255
    c7c4:	04400434 	movhi	r17,16
    c7c8:	8c7fffc4 	addi	r17,r17,-1
    c7cc:	180697fa 	slli	r3,r3,31
    c7d0:	2c4a703a 	and	r5,r5,r17
    c7d4:	288ab03a 	or	r5,r5,r2
    c7d8:	28c6b03a 	or	r3,r5,r3
    c7dc:	9005883a 	mov	r2,r18
    c7e0:	dfc00d17 	ldw	ra,52(sp)
    c7e4:	df000c17 	ldw	fp,48(sp)
    c7e8:	ddc00b17 	ldw	r23,44(sp)
    c7ec:	dd800a17 	ldw	r22,40(sp)
    c7f0:	dd400917 	ldw	r21,36(sp)
    c7f4:	dd000817 	ldw	r20,32(sp)
    c7f8:	dcc00717 	ldw	r19,28(sp)
    c7fc:	dc800617 	ldw	r18,24(sp)
    c800:	dc400517 	ldw	r17,20(sp)
    c804:	dc000417 	ldw	r16,16(sp)
    c808:	dec00e04 	addi	sp,sp,56
    c80c:	f800283a 	ret
    c810:	2404b03a 	or	r2,r4,r16
    c814:	2027883a 	mov	r19,r4
    c818:	10003926 	beq	r2,zero,c900 <__divdf3+0x2c0>
    c81c:	80012e26 	beq	r16,zero,ccd8 <__divdf3+0x698>
    c820:	8009883a 	mov	r4,r16
    c824:	d9800315 	stw	r6,12(sp)
    c828:	d9c00215 	stw	r7,8(sp)
    c82c:	000e3980 	call	e398 <__clzsi2>
    c830:	d9800317 	ldw	r6,12(sp)
    c834:	d9c00217 	ldw	r7,8(sp)
    c838:	113ffd44 	addi	r4,r2,-11
    c83c:	00c00704 	movi	r3,28
    c840:	19012116 	blt	r3,r4,ccc8 <__divdf3+0x688>
    c844:	00c00744 	movi	r3,29
    c848:	147ffe04 	addi	r17,r2,-8
    c84c:	1907c83a 	sub	r3,r3,r4
    c850:	8460983a 	sll	r16,r16,r17
    c854:	98c6d83a 	srl	r3,r19,r3
    c858:	9c64983a 	sll	r18,r19,r17
    c85c:	1c20b03a 	or	r16,r3,r16
    c860:	1080fcc4 	addi	r2,r2,1011
    c864:	00abc83a 	sub	r21,zero,r2
    c868:	0027883a 	mov	r19,zero
    c86c:	0013883a 	mov	r9,zero
    c870:	003f9106 	br	c6b8 <__alt_data_end+0xff00c6b8>
    c874:	3446b03a 	or	r3,r6,r17
    c878:	18001f1e 	bne	r3,zero,c8f8 <__divdf3+0x2b8>
    c87c:	0023883a 	mov	r17,zero
    c880:	0011883a 	mov	r8,zero
    c884:	01c00084 	movi	r7,2
    c888:	003f9d06 	br	c700 <__alt_data_end+0xff00c700>
    c88c:	3446b03a 	or	r3,r6,r17
    c890:	18001526 	beq	r3,zero,c8e8 <__divdf3+0x2a8>
    c894:	88011b26 	beq	r17,zero,cd04 <__divdf3+0x6c4>
    c898:	8809883a 	mov	r4,r17
    c89c:	d9800315 	stw	r6,12(sp)
    c8a0:	da400115 	stw	r9,4(sp)
    c8a4:	000e3980 	call	e398 <__clzsi2>
    c8a8:	d9800317 	ldw	r6,12(sp)
    c8ac:	da400117 	ldw	r9,4(sp)
    c8b0:	113ffd44 	addi	r4,r2,-11
    c8b4:	00c00704 	movi	r3,28
    c8b8:	19010e16 	blt	r3,r4,ccf4 <__divdf3+0x6b4>
    c8bc:	00c00744 	movi	r3,29
    c8c0:	123ffe04 	addi	r8,r2,-8
    c8c4:	1907c83a 	sub	r3,r3,r4
    c8c8:	8a22983a 	sll	r17,r17,r8
    c8cc:	30c6d83a 	srl	r3,r6,r3
    c8d0:	3210983a 	sll	r8,r6,r8
    c8d4:	1c62b03a 	or	r17,r3,r17
    c8d8:	1080fcc4 	addi	r2,r2,1011
    c8dc:	0085c83a 	sub	r2,zero,r2
    c8e0:	000f883a 	mov	r7,zero
    c8e4:	003f8606 	br	c700 <__alt_data_end+0xff00c700>
    c8e8:	0023883a 	mov	r17,zero
    c8ec:	0011883a 	mov	r8,zero
    c8f0:	01c00044 	movi	r7,1
    c8f4:	003f8206 	br	c700 <__alt_data_end+0xff00c700>
    c8f8:	01c000c4 	movi	r7,3
    c8fc:	003f8006 	br	c700 <__alt_data_end+0xff00c700>
    c900:	04c00104 	movi	r19,4
    c904:	0021883a 	mov	r16,zero
    c908:	0025883a 	mov	r18,zero
    c90c:	02400044 	movi	r9,1
    c910:	003f6906 	br	c6b8 <__alt_data_end+0xff00c6b8>
    c914:	04c00304 	movi	r19,12
    c918:	024000c4 	movi	r9,3
    c91c:	003f6606 	br	c6b8 <__alt_data_end+0xff00c6b8>
    c920:	01400434 	movhi	r5,16
    c924:	0007883a 	mov	r3,zero
    c928:	297fffc4 	addi	r5,r5,-1
    c92c:	04bfffc4 	movi	r18,-1
    c930:	0081ffc4 	movi	r2,2047
    c934:	003fa106 	br	c7bc <__alt_data_end+0xff00c7bc>
    c938:	00c00044 	movi	r3,1
    c93c:	1887c83a 	sub	r3,r3,r2
    c940:	01000e04 	movi	r4,56
    c944:	20c1210e 	bge	r4,r3,cdcc <__divdf3+0x78c>
    c948:	98c0004c 	andi	r3,r19,1
    c94c:	0005883a 	mov	r2,zero
    c950:	000b883a 	mov	r5,zero
    c954:	0025883a 	mov	r18,zero
    c958:	003f9806 	br	c7bc <__alt_data_end+0xff00c7bc>
    c95c:	8c00fd36 	bltu	r17,r16,cd54 <__divdf3+0x714>
    c960:	8440fb26 	beq	r16,r17,cd50 <__divdf3+0x710>
    c964:	8007883a 	mov	r3,r16
    c968:	ad7fffc4 	addi	r21,r21,-1
    c96c:	0021883a 	mov	r16,zero
    c970:	4004d63a 	srli	r2,r8,24
    c974:	8822923a 	slli	r17,r17,8
    c978:	1809883a 	mov	r4,r3
    c97c:	402c923a 	slli	r22,r8,8
    c980:	88b8b03a 	or	fp,r17,r2
    c984:	e028d43a 	srli	r20,fp,16
    c988:	d8c00015 	stw	r3,0(sp)
    c98c:	e5ffffcc 	andi	r23,fp,65535
    c990:	a00b883a 	mov	r5,r20
    c994:	000bcd80 	call	bcd8 <__udivsi3>
    c998:	d8c00017 	ldw	r3,0(sp)
    c99c:	a00b883a 	mov	r5,r20
    c9a0:	d8800315 	stw	r2,12(sp)
    c9a4:	1809883a 	mov	r4,r3
    c9a8:	000bd3c0 	call	bd3c <__umodsi3>
    c9ac:	d9800317 	ldw	r6,12(sp)
    c9b0:	1006943a 	slli	r3,r2,16
    c9b4:	9004d43a 	srli	r2,r18,16
    c9b8:	b9a3383a 	mul	r17,r23,r6
    c9bc:	10c4b03a 	or	r2,r2,r3
    c9c0:	1440062e 	bgeu	r2,r17,c9dc <__divdf3+0x39c>
    c9c4:	1705883a 	add	r2,r2,fp
    c9c8:	30ffffc4 	addi	r3,r6,-1
    c9cc:	1700ee36 	bltu	r2,fp,cd88 <__divdf3+0x748>
    c9d0:	1440ed2e 	bgeu	r2,r17,cd88 <__divdf3+0x748>
    c9d4:	31bfff84 	addi	r6,r6,-2
    c9d8:	1705883a 	add	r2,r2,fp
    c9dc:	1463c83a 	sub	r17,r2,r17
    c9e0:	a00b883a 	mov	r5,r20
    c9e4:	8809883a 	mov	r4,r17
    c9e8:	d9800315 	stw	r6,12(sp)
    c9ec:	000bcd80 	call	bcd8 <__udivsi3>
    c9f0:	a00b883a 	mov	r5,r20
    c9f4:	8809883a 	mov	r4,r17
    c9f8:	d8800215 	stw	r2,8(sp)
    c9fc:	000bd3c0 	call	bd3c <__umodsi3>
    ca00:	d9c00217 	ldw	r7,8(sp)
    ca04:	1004943a 	slli	r2,r2,16
    ca08:	94bfffcc 	andi	r18,r18,65535
    ca0c:	b9d1383a 	mul	r8,r23,r7
    ca10:	90a4b03a 	or	r18,r18,r2
    ca14:	d9800317 	ldw	r6,12(sp)
    ca18:	9200062e 	bgeu	r18,r8,ca34 <__divdf3+0x3f4>
    ca1c:	9725883a 	add	r18,r18,fp
    ca20:	38bfffc4 	addi	r2,r7,-1
    ca24:	9700d636 	bltu	r18,fp,cd80 <__divdf3+0x740>
    ca28:	9200d52e 	bgeu	r18,r8,cd80 <__divdf3+0x740>
    ca2c:	39ffff84 	addi	r7,r7,-2
    ca30:	9725883a 	add	r18,r18,fp
    ca34:	3004943a 	slli	r2,r6,16
    ca38:	b012d43a 	srli	r9,r22,16
    ca3c:	b1bfffcc 	andi	r6,r22,65535
    ca40:	11e2b03a 	or	r17,r2,r7
    ca44:	8806d43a 	srli	r3,r17,16
    ca48:	893fffcc 	andi	r4,r17,65535
    ca4c:	218b383a 	mul	r5,r4,r6
    ca50:	30c5383a 	mul	r2,r6,r3
    ca54:	2249383a 	mul	r4,r4,r9
    ca58:	280ed43a 	srli	r7,r5,16
    ca5c:	9225c83a 	sub	r18,r18,r8
    ca60:	2089883a 	add	r4,r4,r2
    ca64:	3909883a 	add	r4,r7,r4
    ca68:	1a47383a 	mul	r3,r3,r9
    ca6c:	2080022e 	bgeu	r4,r2,ca78 <__divdf3+0x438>
    ca70:	00800074 	movhi	r2,1
    ca74:	1887883a 	add	r3,r3,r2
    ca78:	2004d43a 	srli	r2,r4,16
    ca7c:	2008943a 	slli	r4,r4,16
    ca80:	297fffcc 	andi	r5,r5,65535
    ca84:	10c7883a 	add	r3,r2,r3
    ca88:	2149883a 	add	r4,r4,r5
    ca8c:	90c0a536 	bltu	r18,r3,cd24 <__divdf3+0x6e4>
    ca90:	90c0bf26 	beq	r18,r3,cd90 <__divdf3+0x750>
    ca94:	90c7c83a 	sub	r3,r18,r3
    ca98:	810fc83a 	sub	r7,r16,r4
    ca9c:	81e5803a 	cmpltu	r18,r16,r7
    caa0:	1ca5c83a 	sub	r18,r3,r18
    caa4:	e480c126 	beq	fp,r18,cdac <__divdf3+0x76c>
    caa8:	a00b883a 	mov	r5,r20
    caac:	9009883a 	mov	r4,r18
    cab0:	d9800315 	stw	r6,12(sp)
    cab4:	d9c00215 	stw	r7,8(sp)
    cab8:	da400115 	stw	r9,4(sp)
    cabc:	000bcd80 	call	bcd8 <__udivsi3>
    cac0:	a00b883a 	mov	r5,r20
    cac4:	9009883a 	mov	r4,r18
    cac8:	d8800015 	stw	r2,0(sp)
    cacc:	000bd3c0 	call	bd3c <__umodsi3>
    cad0:	d9c00217 	ldw	r7,8(sp)
    cad4:	da000017 	ldw	r8,0(sp)
    cad8:	1006943a 	slli	r3,r2,16
    cadc:	3804d43a 	srli	r2,r7,16
    cae0:	ba21383a 	mul	r16,r23,r8
    cae4:	d9800317 	ldw	r6,12(sp)
    cae8:	10c4b03a 	or	r2,r2,r3
    caec:	da400117 	ldw	r9,4(sp)
    caf0:	1400062e 	bgeu	r2,r16,cb0c <__divdf3+0x4cc>
    caf4:	1705883a 	add	r2,r2,fp
    caf8:	40ffffc4 	addi	r3,r8,-1
    cafc:	1700ad36 	bltu	r2,fp,cdb4 <__divdf3+0x774>
    cb00:	1400ac2e 	bgeu	r2,r16,cdb4 <__divdf3+0x774>
    cb04:	423fff84 	addi	r8,r8,-2
    cb08:	1705883a 	add	r2,r2,fp
    cb0c:	1421c83a 	sub	r16,r2,r16
    cb10:	a00b883a 	mov	r5,r20
    cb14:	8009883a 	mov	r4,r16
    cb18:	d9800315 	stw	r6,12(sp)
    cb1c:	d9c00215 	stw	r7,8(sp)
    cb20:	da000015 	stw	r8,0(sp)
    cb24:	da400115 	stw	r9,4(sp)
    cb28:	000bcd80 	call	bcd8 <__udivsi3>
    cb2c:	8009883a 	mov	r4,r16
    cb30:	a00b883a 	mov	r5,r20
    cb34:	1025883a 	mov	r18,r2
    cb38:	000bd3c0 	call	bd3c <__umodsi3>
    cb3c:	d9c00217 	ldw	r7,8(sp)
    cb40:	1004943a 	slli	r2,r2,16
    cb44:	bcaf383a 	mul	r23,r23,r18
    cb48:	393fffcc 	andi	r4,r7,65535
    cb4c:	2088b03a 	or	r4,r4,r2
    cb50:	d9800317 	ldw	r6,12(sp)
    cb54:	da000017 	ldw	r8,0(sp)
    cb58:	da400117 	ldw	r9,4(sp)
    cb5c:	25c0062e 	bgeu	r4,r23,cb78 <__divdf3+0x538>
    cb60:	2709883a 	add	r4,r4,fp
    cb64:	90bfffc4 	addi	r2,r18,-1
    cb68:	27009436 	bltu	r4,fp,cdbc <__divdf3+0x77c>
    cb6c:	25c0932e 	bgeu	r4,r23,cdbc <__divdf3+0x77c>
    cb70:	94bfff84 	addi	r18,r18,-2
    cb74:	2709883a 	add	r4,r4,fp
    cb78:	4004943a 	slli	r2,r8,16
    cb7c:	25efc83a 	sub	r23,r4,r23
    cb80:	1490b03a 	or	r8,r2,r18
    cb84:	4008d43a 	srli	r4,r8,16
    cb88:	40ffffcc 	andi	r3,r8,65535
    cb8c:	30c5383a 	mul	r2,r6,r3
    cb90:	1a47383a 	mul	r3,r3,r9
    cb94:	310d383a 	mul	r6,r6,r4
    cb98:	100ad43a 	srli	r5,r2,16
    cb9c:	4913383a 	mul	r9,r9,r4
    cba0:	1987883a 	add	r3,r3,r6
    cba4:	28c7883a 	add	r3,r5,r3
    cba8:	1980022e 	bgeu	r3,r6,cbb4 <__divdf3+0x574>
    cbac:	01000074 	movhi	r4,1
    cbb0:	4913883a 	add	r9,r9,r4
    cbb4:	1808d43a 	srli	r4,r3,16
    cbb8:	1806943a 	slli	r3,r3,16
    cbbc:	10bfffcc 	andi	r2,r2,65535
    cbc0:	2253883a 	add	r9,r4,r9
    cbc4:	1887883a 	add	r3,r3,r2
    cbc8:	ba403836 	bltu	r23,r9,ccac <__divdf3+0x66c>
    cbcc:	ba403626 	beq	r23,r9,cca8 <__divdf3+0x668>
    cbd0:	42000054 	ori	r8,r8,1
    cbd4:	a880ffc4 	addi	r2,r21,1023
    cbd8:	00bf570e 	bge	zero,r2,c938 <__alt_data_end+0xff00c938>
    cbdc:	40c001cc 	andi	r3,r8,7
    cbe0:	18000726 	beq	r3,zero,cc00 <__divdf3+0x5c0>
    cbe4:	40c003cc 	andi	r3,r8,15
    cbe8:	01000104 	movi	r4,4
    cbec:	19000426 	beq	r3,r4,cc00 <__divdf3+0x5c0>
    cbf0:	4107883a 	add	r3,r8,r4
    cbf4:	1a11803a 	cmpltu	r8,r3,r8
    cbf8:	8a23883a 	add	r17,r17,r8
    cbfc:	1811883a 	mov	r8,r3
    cc00:	88c0402c 	andhi	r3,r17,256
    cc04:	18000426 	beq	r3,zero,cc18 <__divdf3+0x5d8>
    cc08:	00ffc034 	movhi	r3,65280
    cc0c:	18ffffc4 	addi	r3,r3,-1
    cc10:	a8810004 	addi	r2,r21,1024
    cc14:	88e2703a 	and	r17,r17,r3
    cc18:	00c1ff84 	movi	r3,2046
    cc1c:	18bee316 	blt	r3,r2,c7ac <__alt_data_end+0xff00c7ac>
    cc20:	8824977a 	slli	r18,r17,29
    cc24:	4010d0fa 	srli	r8,r8,3
    cc28:	8822927a 	slli	r17,r17,9
    cc2c:	1081ffcc 	andi	r2,r2,2047
    cc30:	9224b03a 	or	r18,r18,r8
    cc34:	880ad33a 	srli	r5,r17,12
    cc38:	98c0004c 	andi	r3,r19,1
    cc3c:	003edf06 	br	c7bc <__alt_data_end+0xff00c7bc>
    cc40:	8080022c 	andhi	r2,r16,8
    cc44:	10001226 	beq	r2,zero,cc90 <__divdf3+0x650>
    cc48:	8880022c 	andhi	r2,r17,8
    cc4c:	1000101e 	bne	r2,zero,cc90 <__divdf3+0x650>
    cc50:	00800434 	movhi	r2,16
    cc54:	89400234 	orhi	r5,r17,8
    cc58:	10bfffc4 	addi	r2,r2,-1
    cc5c:	b007883a 	mov	r3,r22
    cc60:	288a703a 	and	r5,r5,r2
    cc64:	4025883a 	mov	r18,r8
    cc68:	003f3106 	br	c930 <__alt_data_end+0xff00c930>
    cc6c:	008000c4 	movi	r2,3
    cc70:	3880a626 	beq	r7,r2,cf0c <__divdf3+0x8cc>
    cc74:	00800044 	movi	r2,1
    cc78:	3880521e 	bne	r7,r2,cdc4 <__divdf3+0x784>
    cc7c:	b807883a 	mov	r3,r23
    cc80:	0005883a 	mov	r2,zero
    cc84:	000b883a 	mov	r5,zero
    cc88:	0025883a 	mov	r18,zero
    cc8c:	003ecb06 	br	c7bc <__alt_data_end+0xff00c7bc>
    cc90:	00800434 	movhi	r2,16
    cc94:	81400234 	orhi	r5,r16,8
    cc98:	10bfffc4 	addi	r2,r2,-1
    cc9c:	a007883a 	mov	r3,r20
    cca0:	288a703a 	and	r5,r5,r2
    cca4:	003f2206 	br	c930 <__alt_data_end+0xff00c930>
    cca8:	183fca26 	beq	r3,zero,cbd4 <__alt_data_end+0xff00cbd4>
    ccac:	e5ef883a 	add	r23,fp,r23
    ccb0:	40bfffc4 	addi	r2,r8,-1
    ccb4:	bf00392e 	bgeu	r23,fp,cd9c <__divdf3+0x75c>
    ccb8:	1011883a 	mov	r8,r2
    ccbc:	ba7fc41e 	bne	r23,r9,cbd0 <__alt_data_end+0xff00cbd0>
    ccc0:	b0ffc31e 	bne	r22,r3,cbd0 <__alt_data_end+0xff00cbd0>
    ccc4:	003fc306 	br	cbd4 <__alt_data_end+0xff00cbd4>
    ccc8:	143ff604 	addi	r16,r2,-40
    cccc:	9c20983a 	sll	r16,r19,r16
    ccd0:	0025883a 	mov	r18,zero
    ccd4:	003ee206 	br	c860 <__alt_data_end+0xff00c860>
    ccd8:	d9800315 	stw	r6,12(sp)
    ccdc:	d9c00215 	stw	r7,8(sp)
    cce0:	000e3980 	call	e398 <__clzsi2>
    cce4:	10800804 	addi	r2,r2,32
    cce8:	d9c00217 	ldw	r7,8(sp)
    ccec:	d9800317 	ldw	r6,12(sp)
    ccf0:	003ed106 	br	c838 <__alt_data_end+0xff00c838>
    ccf4:	147ff604 	addi	r17,r2,-40
    ccf8:	3462983a 	sll	r17,r6,r17
    ccfc:	0011883a 	mov	r8,zero
    cd00:	003ef506 	br	c8d8 <__alt_data_end+0xff00c8d8>
    cd04:	3009883a 	mov	r4,r6
    cd08:	d9800315 	stw	r6,12(sp)
    cd0c:	da400115 	stw	r9,4(sp)
    cd10:	000e3980 	call	e398 <__clzsi2>
    cd14:	10800804 	addi	r2,r2,32
    cd18:	da400117 	ldw	r9,4(sp)
    cd1c:	d9800317 	ldw	r6,12(sp)
    cd20:	003ee306 	br	c8b0 <__alt_data_end+0xff00c8b0>
    cd24:	85a1883a 	add	r16,r16,r22
    cd28:	8585803a 	cmpltu	r2,r16,r22
    cd2c:	1705883a 	add	r2,r2,fp
    cd30:	14a5883a 	add	r18,r2,r18
    cd34:	88bfffc4 	addi	r2,r17,-1
    cd38:	e4800c2e 	bgeu	fp,r18,cd6c <__divdf3+0x72c>
    cd3c:	90c03e36 	bltu	r18,r3,ce38 <__divdf3+0x7f8>
    cd40:	1c806926 	beq	r3,r18,cee8 <__divdf3+0x8a8>
    cd44:	90c7c83a 	sub	r3,r18,r3
    cd48:	1023883a 	mov	r17,r2
    cd4c:	003f5206 	br	ca98 <__alt_data_end+0xff00ca98>
    cd50:	923f0436 	bltu	r18,r8,c964 <__alt_data_end+0xff00c964>
    cd54:	800897fa 	slli	r4,r16,31
    cd58:	9004d07a 	srli	r2,r18,1
    cd5c:	8006d07a 	srli	r3,r16,1
    cd60:	902097fa 	slli	r16,r18,31
    cd64:	20a4b03a 	or	r18,r4,r2
    cd68:	003f0106 	br	c970 <__alt_data_end+0xff00c970>
    cd6c:	e4bff51e 	bne	fp,r18,cd44 <__alt_data_end+0xff00cd44>
    cd70:	85bff22e 	bgeu	r16,r22,cd3c <__alt_data_end+0xff00cd3c>
    cd74:	e0c7c83a 	sub	r3,fp,r3
    cd78:	1023883a 	mov	r17,r2
    cd7c:	003f4606 	br	ca98 <__alt_data_end+0xff00ca98>
    cd80:	100f883a 	mov	r7,r2
    cd84:	003f2b06 	br	ca34 <__alt_data_end+0xff00ca34>
    cd88:	180d883a 	mov	r6,r3
    cd8c:	003f1306 	br	c9dc <__alt_data_end+0xff00c9dc>
    cd90:	813fe436 	bltu	r16,r4,cd24 <__alt_data_end+0xff00cd24>
    cd94:	0007883a 	mov	r3,zero
    cd98:	003f3f06 	br	ca98 <__alt_data_end+0xff00ca98>
    cd9c:	ba402c36 	bltu	r23,r9,ce50 <__divdf3+0x810>
    cda0:	4dc05426 	beq	r9,r23,cef4 <__divdf3+0x8b4>
    cda4:	1011883a 	mov	r8,r2
    cda8:	003f8906 	br	cbd0 <__alt_data_end+0xff00cbd0>
    cdac:	023fffc4 	movi	r8,-1
    cdb0:	003f8806 	br	cbd4 <__alt_data_end+0xff00cbd4>
    cdb4:	1811883a 	mov	r8,r3
    cdb8:	003f5406 	br	cb0c <__alt_data_end+0xff00cb0c>
    cdbc:	1025883a 	mov	r18,r2
    cdc0:	003f6d06 	br	cb78 <__alt_data_end+0xff00cb78>
    cdc4:	b827883a 	mov	r19,r23
    cdc8:	003f8206 	br	cbd4 <__alt_data_end+0xff00cbd4>
    cdcc:	010007c4 	movi	r4,31
    cdd0:	20c02616 	blt	r4,r3,ce6c <__divdf3+0x82c>
    cdd4:	00800804 	movi	r2,32
    cdd8:	10c5c83a 	sub	r2,r2,r3
    cddc:	888a983a 	sll	r5,r17,r2
    cde0:	40c8d83a 	srl	r4,r8,r3
    cde4:	4084983a 	sll	r2,r8,r2
    cde8:	88e2d83a 	srl	r17,r17,r3
    cdec:	2906b03a 	or	r3,r5,r4
    cdf0:	1004c03a 	cmpne	r2,r2,zero
    cdf4:	1886b03a 	or	r3,r3,r2
    cdf8:	188001cc 	andi	r2,r3,7
    cdfc:	10000726 	beq	r2,zero,ce1c <__divdf3+0x7dc>
    ce00:	188003cc 	andi	r2,r3,15
    ce04:	01000104 	movi	r4,4
    ce08:	11000426 	beq	r2,r4,ce1c <__divdf3+0x7dc>
    ce0c:	1805883a 	mov	r2,r3
    ce10:	10c00104 	addi	r3,r2,4
    ce14:	1885803a 	cmpltu	r2,r3,r2
    ce18:	88a3883a 	add	r17,r17,r2
    ce1c:	8880202c 	andhi	r2,r17,128
    ce20:	10002726 	beq	r2,zero,cec0 <__divdf3+0x880>
    ce24:	98c0004c 	andi	r3,r19,1
    ce28:	00800044 	movi	r2,1
    ce2c:	000b883a 	mov	r5,zero
    ce30:	0025883a 	mov	r18,zero
    ce34:	003e6106 	br	c7bc <__alt_data_end+0xff00c7bc>
    ce38:	85a1883a 	add	r16,r16,r22
    ce3c:	8585803a 	cmpltu	r2,r16,r22
    ce40:	1705883a 	add	r2,r2,fp
    ce44:	14a5883a 	add	r18,r2,r18
    ce48:	8c7fff84 	addi	r17,r17,-2
    ce4c:	003f1106 	br	ca94 <__alt_data_end+0xff00ca94>
    ce50:	b589883a 	add	r4,r22,r22
    ce54:	25ad803a 	cmpltu	r22,r4,r22
    ce58:	b739883a 	add	fp,r22,fp
    ce5c:	40bfff84 	addi	r2,r8,-2
    ce60:	bf2f883a 	add	r23,r23,fp
    ce64:	202d883a 	mov	r22,r4
    ce68:	003f9306 	br	ccb8 <__alt_data_end+0xff00ccb8>
    ce6c:	013ff844 	movi	r4,-31
    ce70:	2085c83a 	sub	r2,r4,r2
    ce74:	8888d83a 	srl	r4,r17,r2
    ce78:	00800804 	movi	r2,32
    ce7c:	18802126 	beq	r3,r2,cf04 <__divdf3+0x8c4>
    ce80:	00801004 	movi	r2,64
    ce84:	10c5c83a 	sub	r2,r2,r3
    ce88:	8884983a 	sll	r2,r17,r2
    ce8c:	1204b03a 	or	r2,r2,r8
    ce90:	1004c03a 	cmpne	r2,r2,zero
    ce94:	2084b03a 	or	r2,r4,r2
    ce98:	144001cc 	andi	r17,r2,7
    ce9c:	88000d1e 	bne	r17,zero,ced4 <__divdf3+0x894>
    cea0:	000b883a 	mov	r5,zero
    cea4:	1024d0fa 	srli	r18,r2,3
    cea8:	98c0004c 	andi	r3,r19,1
    ceac:	0005883a 	mov	r2,zero
    ceb0:	9464b03a 	or	r18,r18,r17
    ceb4:	003e4106 	br	c7bc <__alt_data_end+0xff00c7bc>
    ceb8:	1007883a 	mov	r3,r2
    cebc:	0023883a 	mov	r17,zero
    cec0:	880a927a 	slli	r5,r17,9
    cec4:	1805883a 	mov	r2,r3
    cec8:	8822977a 	slli	r17,r17,29
    cecc:	280ad33a 	srli	r5,r5,12
    ced0:	003ff406 	br	cea4 <__alt_data_end+0xff00cea4>
    ced4:	10c003cc 	andi	r3,r2,15
    ced8:	01000104 	movi	r4,4
    cedc:	193ff626 	beq	r3,r4,ceb8 <__alt_data_end+0xff00ceb8>
    cee0:	0023883a 	mov	r17,zero
    cee4:	003fca06 	br	ce10 <__alt_data_end+0xff00ce10>
    cee8:	813fd336 	bltu	r16,r4,ce38 <__alt_data_end+0xff00ce38>
    ceec:	1023883a 	mov	r17,r2
    cef0:	003fa806 	br	cd94 <__alt_data_end+0xff00cd94>
    cef4:	b0ffd636 	bltu	r22,r3,ce50 <__alt_data_end+0xff00ce50>
    cef8:	1011883a 	mov	r8,r2
    cefc:	b0ff341e 	bne	r22,r3,cbd0 <__alt_data_end+0xff00cbd0>
    cf00:	003f3406 	br	cbd4 <__alt_data_end+0xff00cbd4>
    cf04:	0005883a 	mov	r2,zero
    cf08:	003fe006 	br	ce8c <__alt_data_end+0xff00ce8c>
    cf0c:	00800434 	movhi	r2,16
    cf10:	89400234 	orhi	r5,r17,8
    cf14:	10bfffc4 	addi	r2,r2,-1
    cf18:	b807883a 	mov	r3,r23
    cf1c:	288a703a 	and	r5,r5,r2
    cf20:	4025883a 	mov	r18,r8
    cf24:	003e8206 	br	c930 <__alt_data_end+0xff00c930>

0000cf28 <__eqdf2>:
    cf28:	2804d53a 	srli	r2,r5,20
    cf2c:	3806d53a 	srli	r3,r7,20
    cf30:	02000434 	movhi	r8,16
    cf34:	423fffc4 	addi	r8,r8,-1
    cf38:	1081ffcc 	andi	r2,r2,2047
    cf3c:	0281ffc4 	movi	r10,2047
    cf40:	2a12703a 	and	r9,r5,r8
    cf44:	18c1ffcc 	andi	r3,r3,2047
    cf48:	3a10703a 	and	r8,r7,r8
    cf4c:	280ad7fa 	srli	r5,r5,31
    cf50:	380ed7fa 	srli	r7,r7,31
    cf54:	12801026 	beq	r2,r10,cf98 <__eqdf2+0x70>
    cf58:	0281ffc4 	movi	r10,2047
    cf5c:	1a800a26 	beq	r3,r10,cf88 <__eqdf2+0x60>
    cf60:	10c00226 	beq	r2,r3,cf6c <__eqdf2+0x44>
    cf64:	00800044 	movi	r2,1
    cf68:	f800283a 	ret
    cf6c:	4a3ffd1e 	bne	r9,r8,cf64 <__alt_data_end+0xff00cf64>
    cf70:	21bffc1e 	bne	r4,r6,cf64 <__alt_data_end+0xff00cf64>
    cf74:	29c00c26 	beq	r5,r7,cfa8 <__eqdf2+0x80>
    cf78:	103ffa1e 	bne	r2,zero,cf64 <__alt_data_end+0xff00cf64>
    cf7c:	2244b03a 	or	r2,r4,r9
    cf80:	1004c03a 	cmpne	r2,r2,zero
    cf84:	f800283a 	ret
    cf88:	3214b03a 	or	r10,r6,r8
    cf8c:	503ff426 	beq	r10,zero,cf60 <__alt_data_end+0xff00cf60>
    cf90:	00800044 	movi	r2,1
    cf94:	f800283a 	ret
    cf98:	2254b03a 	or	r10,r4,r9
    cf9c:	503fee26 	beq	r10,zero,cf58 <__alt_data_end+0xff00cf58>
    cfa0:	00800044 	movi	r2,1
    cfa4:	f800283a 	ret
    cfa8:	0005883a 	mov	r2,zero
    cfac:	f800283a 	ret

0000cfb0 <__gedf2>:
    cfb0:	2804d53a 	srli	r2,r5,20
    cfb4:	3806d53a 	srli	r3,r7,20
    cfb8:	02000434 	movhi	r8,16
    cfbc:	423fffc4 	addi	r8,r8,-1
    cfc0:	1081ffcc 	andi	r2,r2,2047
    cfc4:	0241ffc4 	movi	r9,2047
    cfc8:	2a14703a 	and	r10,r5,r8
    cfcc:	18c1ffcc 	andi	r3,r3,2047
    cfd0:	3a10703a 	and	r8,r7,r8
    cfd4:	280ad7fa 	srli	r5,r5,31
    cfd8:	380ed7fa 	srli	r7,r7,31
    cfdc:	12401d26 	beq	r2,r9,d054 <__gedf2+0xa4>
    cfe0:	0241ffc4 	movi	r9,2047
    cfe4:	1a401226 	beq	r3,r9,d030 <__gedf2+0x80>
    cfe8:	1000081e 	bne	r2,zero,d00c <__gedf2+0x5c>
    cfec:	2296b03a 	or	r11,r4,r10
    cff0:	5813003a 	cmpeq	r9,r11,zero
    cff4:	1800091e 	bne	r3,zero,d01c <__gedf2+0x6c>
    cff8:	3218b03a 	or	r12,r6,r8
    cffc:	6000071e 	bne	r12,zero,d01c <__gedf2+0x6c>
    d000:	0005883a 	mov	r2,zero
    d004:	5800101e 	bne	r11,zero,d048 <__gedf2+0x98>
    d008:	f800283a 	ret
    d00c:	18000c1e 	bne	r3,zero,d040 <__gedf2+0x90>
    d010:	3212b03a 	or	r9,r6,r8
    d014:	48000c26 	beq	r9,zero,d048 <__gedf2+0x98>
    d018:	0013883a 	mov	r9,zero
    d01c:	39c03fcc 	andi	r7,r7,255
    d020:	48000826 	beq	r9,zero,d044 <__gedf2+0x94>
    d024:	38000926 	beq	r7,zero,d04c <__gedf2+0x9c>
    d028:	00800044 	movi	r2,1
    d02c:	f800283a 	ret
    d030:	3212b03a 	or	r9,r6,r8
    d034:	483fec26 	beq	r9,zero,cfe8 <__alt_data_end+0xff00cfe8>
    d038:	00bfff84 	movi	r2,-2
    d03c:	f800283a 	ret
    d040:	39c03fcc 	andi	r7,r7,255
    d044:	29c00626 	beq	r5,r7,d060 <__gedf2+0xb0>
    d048:	283ff726 	beq	r5,zero,d028 <__alt_data_end+0xff00d028>
    d04c:	00bfffc4 	movi	r2,-1
    d050:	f800283a 	ret
    d054:	2292b03a 	or	r9,r4,r10
    d058:	483fe126 	beq	r9,zero,cfe0 <__alt_data_end+0xff00cfe0>
    d05c:	003ff606 	br	d038 <__alt_data_end+0xff00d038>
    d060:	18bff916 	blt	r3,r2,d048 <__alt_data_end+0xff00d048>
    d064:	10c00316 	blt	r2,r3,d074 <__gedf2+0xc4>
    d068:	42bff736 	bltu	r8,r10,d048 <__alt_data_end+0xff00d048>
    d06c:	52000326 	beq	r10,r8,d07c <__gedf2+0xcc>
    d070:	5200042e 	bgeu	r10,r8,d084 <__gedf2+0xd4>
    d074:	283fec1e 	bne	r5,zero,d028 <__alt_data_end+0xff00d028>
    d078:	003ff406 	br	d04c <__alt_data_end+0xff00d04c>
    d07c:	313ff236 	bltu	r6,r4,d048 <__alt_data_end+0xff00d048>
    d080:	21bffc36 	bltu	r4,r6,d074 <__alt_data_end+0xff00d074>
    d084:	0005883a 	mov	r2,zero
    d088:	f800283a 	ret

0000d08c <__ledf2>:
    d08c:	2804d53a 	srli	r2,r5,20
    d090:	3810d53a 	srli	r8,r7,20
    d094:	00c00434 	movhi	r3,16
    d098:	18ffffc4 	addi	r3,r3,-1
    d09c:	1081ffcc 	andi	r2,r2,2047
    d0a0:	0241ffc4 	movi	r9,2047
    d0a4:	28d4703a 	and	r10,r5,r3
    d0a8:	4201ffcc 	andi	r8,r8,2047
    d0ac:	38c6703a 	and	r3,r7,r3
    d0b0:	280ad7fa 	srli	r5,r5,31
    d0b4:	380ed7fa 	srli	r7,r7,31
    d0b8:	12401f26 	beq	r2,r9,d138 <__ledf2+0xac>
    d0bc:	0241ffc4 	movi	r9,2047
    d0c0:	42401426 	beq	r8,r9,d114 <__ledf2+0x88>
    d0c4:	1000091e 	bne	r2,zero,d0ec <__ledf2+0x60>
    d0c8:	2296b03a 	or	r11,r4,r10
    d0cc:	5813003a 	cmpeq	r9,r11,zero
    d0d0:	29403fcc 	andi	r5,r5,255
    d0d4:	40000a1e 	bne	r8,zero,d100 <__ledf2+0x74>
    d0d8:	30d8b03a 	or	r12,r6,r3
    d0dc:	6000081e 	bne	r12,zero,d100 <__ledf2+0x74>
    d0e0:	0005883a 	mov	r2,zero
    d0e4:	5800111e 	bne	r11,zero,d12c <__ledf2+0xa0>
    d0e8:	f800283a 	ret
    d0ec:	29403fcc 	andi	r5,r5,255
    d0f0:	40000c1e 	bne	r8,zero,d124 <__ledf2+0x98>
    d0f4:	30d2b03a 	or	r9,r6,r3
    d0f8:	48000c26 	beq	r9,zero,d12c <__ledf2+0xa0>
    d0fc:	0013883a 	mov	r9,zero
    d100:	39c03fcc 	andi	r7,r7,255
    d104:	48000826 	beq	r9,zero,d128 <__ledf2+0x9c>
    d108:	38001126 	beq	r7,zero,d150 <__ledf2+0xc4>
    d10c:	00800044 	movi	r2,1
    d110:	f800283a 	ret
    d114:	30d2b03a 	or	r9,r6,r3
    d118:	483fea26 	beq	r9,zero,d0c4 <__alt_data_end+0xff00d0c4>
    d11c:	00800084 	movi	r2,2
    d120:	f800283a 	ret
    d124:	39c03fcc 	andi	r7,r7,255
    d128:	39400726 	beq	r7,r5,d148 <__ledf2+0xbc>
    d12c:	2800081e 	bne	r5,zero,d150 <__ledf2+0xc4>
    d130:	00800044 	movi	r2,1
    d134:	f800283a 	ret
    d138:	2292b03a 	or	r9,r4,r10
    d13c:	483fdf26 	beq	r9,zero,d0bc <__alt_data_end+0xff00d0bc>
    d140:	00800084 	movi	r2,2
    d144:	f800283a 	ret
    d148:	4080030e 	bge	r8,r2,d158 <__ledf2+0xcc>
    d14c:	383fef26 	beq	r7,zero,d10c <__alt_data_end+0xff00d10c>
    d150:	00bfffc4 	movi	r2,-1
    d154:	f800283a 	ret
    d158:	123feb16 	blt	r2,r8,d108 <__alt_data_end+0xff00d108>
    d15c:	1abff336 	bltu	r3,r10,d12c <__alt_data_end+0xff00d12c>
    d160:	50c00326 	beq	r10,r3,d170 <__ledf2+0xe4>
    d164:	50c0042e 	bgeu	r10,r3,d178 <__ledf2+0xec>
    d168:	283fe81e 	bne	r5,zero,d10c <__alt_data_end+0xff00d10c>
    d16c:	003ff806 	br	d150 <__alt_data_end+0xff00d150>
    d170:	313fee36 	bltu	r6,r4,d12c <__alt_data_end+0xff00d12c>
    d174:	21bffc36 	bltu	r4,r6,d168 <__alt_data_end+0xff00d168>
    d178:	0005883a 	mov	r2,zero
    d17c:	f800283a 	ret

0000d180 <__muldf3>:
    d180:	defff304 	addi	sp,sp,-52
    d184:	2804d53a 	srli	r2,r5,20
    d188:	dd800915 	stw	r22,36(sp)
    d18c:	282cd7fa 	srli	r22,r5,31
    d190:	dc000315 	stw	r16,12(sp)
    d194:	04000434 	movhi	r16,16
    d198:	dd400815 	stw	r21,32(sp)
    d19c:	dc800515 	stw	r18,20(sp)
    d1a0:	843fffc4 	addi	r16,r16,-1
    d1a4:	dfc00c15 	stw	ra,48(sp)
    d1a8:	df000b15 	stw	fp,44(sp)
    d1ac:	ddc00a15 	stw	r23,40(sp)
    d1b0:	dd000715 	stw	r20,28(sp)
    d1b4:	dcc00615 	stw	r19,24(sp)
    d1b8:	dc400415 	stw	r17,16(sp)
    d1bc:	1481ffcc 	andi	r18,r2,2047
    d1c0:	2c20703a 	and	r16,r5,r16
    d1c4:	b02b883a 	mov	r21,r22
    d1c8:	b2403fcc 	andi	r9,r22,255
    d1cc:	90006026 	beq	r18,zero,d350 <__muldf3+0x1d0>
    d1d0:	0081ffc4 	movi	r2,2047
    d1d4:	2029883a 	mov	r20,r4
    d1d8:	90803626 	beq	r18,r2,d2b4 <__muldf3+0x134>
    d1dc:	80800434 	orhi	r2,r16,16
    d1e0:	100490fa 	slli	r2,r2,3
    d1e4:	2020d77a 	srli	r16,r4,29
    d1e8:	202890fa 	slli	r20,r4,3
    d1ec:	94bf0044 	addi	r18,r18,-1023
    d1f0:	80a0b03a 	or	r16,r16,r2
    d1f4:	0027883a 	mov	r19,zero
    d1f8:	0039883a 	mov	fp,zero
    d1fc:	3804d53a 	srli	r2,r7,20
    d200:	382ed7fa 	srli	r23,r7,31
    d204:	04400434 	movhi	r17,16
    d208:	8c7fffc4 	addi	r17,r17,-1
    d20c:	1081ffcc 	andi	r2,r2,2047
    d210:	3011883a 	mov	r8,r6
    d214:	3c62703a 	and	r17,r7,r17
    d218:	ba803fcc 	andi	r10,r23,255
    d21c:	10006d26 	beq	r2,zero,d3d4 <__muldf3+0x254>
    d220:	00c1ffc4 	movi	r3,2047
    d224:	10c06526 	beq	r2,r3,d3bc <__muldf3+0x23c>
    d228:	88c00434 	orhi	r3,r17,16
    d22c:	180690fa 	slli	r3,r3,3
    d230:	3022d77a 	srli	r17,r6,29
    d234:	301090fa 	slli	r8,r6,3
    d238:	10bf0044 	addi	r2,r2,-1023
    d23c:	88e2b03a 	or	r17,r17,r3
    d240:	000b883a 	mov	r5,zero
    d244:	9085883a 	add	r2,r18,r2
    d248:	2cc8b03a 	or	r4,r5,r19
    d24c:	00c003c4 	movi	r3,15
    d250:	bdacf03a 	xor	r22,r23,r22
    d254:	12c00044 	addi	r11,r2,1
    d258:	19009936 	bltu	r3,r4,d4c0 <__muldf3+0x340>
    d25c:	200890ba 	slli	r4,r4,2
    d260:	00c00074 	movhi	r3,1
    d264:	18f49d04 	addi	r3,r3,-11660
    d268:	20c9883a 	add	r4,r4,r3
    d26c:	20c00017 	ldw	r3,0(r4)
    d270:	1800683a 	jmp	r3
    d274:	0000d4c0 	call	d4c <init_LCD+0x320>
    d278:	0000d2d4 	movui	zero,843
    d27c:	0000d2d4 	movui	zero,843
    d280:	0000d2d0 	cmplti	zero,zero,843
    d284:	0000d49c 	xori	zero,zero,850
    d288:	0000d49c 	xori	zero,zero,850
    d28c:	0000d484 	movi	zero,850
    d290:	0000d2d0 	cmplti	zero,zero,843
    d294:	0000d49c 	xori	zero,zero,850
    d298:	0000d484 	movi	zero,850
    d29c:	0000d49c 	xori	zero,zero,850
    d2a0:	0000d2d0 	cmplti	zero,zero,843
    d2a4:	0000d4ac 	andhi	zero,zero,850
    d2a8:	0000d4ac 	andhi	zero,zero,850
    d2ac:	0000d4ac 	andhi	zero,zero,850
    d2b0:	0000d6c8 	cmpgei	zero,zero,859
    d2b4:	2404b03a 	or	r2,r4,r16
    d2b8:	10006f1e 	bne	r2,zero,d478 <__muldf3+0x2f8>
    d2bc:	04c00204 	movi	r19,8
    d2c0:	0021883a 	mov	r16,zero
    d2c4:	0029883a 	mov	r20,zero
    d2c8:	07000084 	movi	fp,2
    d2cc:	003fcb06 	br	d1fc <__alt_data_end+0xff00d1fc>
    d2d0:	502d883a 	mov	r22,r10
    d2d4:	00800084 	movi	r2,2
    d2d8:	28805726 	beq	r5,r2,d438 <__muldf3+0x2b8>
    d2dc:	008000c4 	movi	r2,3
    d2e0:	28816626 	beq	r5,r2,d87c <__muldf3+0x6fc>
    d2e4:	00800044 	movi	r2,1
    d2e8:	2881411e 	bne	r5,r2,d7f0 <__muldf3+0x670>
    d2ec:	b02b883a 	mov	r21,r22
    d2f0:	0005883a 	mov	r2,zero
    d2f4:	000b883a 	mov	r5,zero
    d2f8:	0029883a 	mov	r20,zero
    d2fc:	1004953a 	slli	r2,r2,20
    d300:	a8c03fcc 	andi	r3,r21,255
    d304:	04400434 	movhi	r17,16
    d308:	8c7fffc4 	addi	r17,r17,-1
    d30c:	180697fa 	slli	r3,r3,31
    d310:	2c4a703a 	and	r5,r5,r17
    d314:	288ab03a 	or	r5,r5,r2
    d318:	28c6b03a 	or	r3,r5,r3
    d31c:	a005883a 	mov	r2,r20
    d320:	dfc00c17 	ldw	ra,48(sp)
    d324:	df000b17 	ldw	fp,44(sp)
    d328:	ddc00a17 	ldw	r23,40(sp)
    d32c:	dd800917 	ldw	r22,36(sp)
    d330:	dd400817 	ldw	r21,32(sp)
    d334:	dd000717 	ldw	r20,28(sp)
    d338:	dcc00617 	ldw	r19,24(sp)
    d33c:	dc800517 	ldw	r18,20(sp)
    d340:	dc400417 	ldw	r17,16(sp)
    d344:	dc000317 	ldw	r16,12(sp)
    d348:	dec00d04 	addi	sp,sp,52
    d34c:	f800283a 	ret
    d350:	2404b03a 	or	r2,r4,r16
    d354:	2027883a 	mov	r19,r4
    d358:	10004226 	beq	r2,zero,d464 <__muldf3+0x2e4>
    d35c:	8000fc26 	beq	r16,zero,d750 <__muldf3+0x5d0>
    d360:	8009883a 	mov	r4,r16
    d364:	d9800215 	stw	r6,8(sp)
    d368:	d9c00015 	stw	r7,0(sp)
    d36c:	da400115 	stw	r9,4(sp)
    d370:	000e3980 	call	e398 <__clzsi2>
    d374:	d9800217 	ldw	r6,8(sp)
    d378:	d9c00017 	ldw	r7,0(sp)
    d37c:	da400117 	ldw	r9,4(sp)
    d380:	113ffd44 	addi	r4,r2,-11
    d384:	00c00704 	movi	r3,28
    d388:	1900ed16 	blt	r3,r4,d740 <__muldf3+0x5c0>
    d38c:	00c00744 	movi	r3,29
    d390:	147ffe04 	addi	r17,r2,-8
    d394:	1907c83a 	sub	r3,r3,r4
    d398:	8460983a 	sll	r16,r16,r17
    d39c:	98c6d83a 	srl	r3,r19,r3
    d3a0:	9c68983a 	sll	r20,r19,r17
    d3a4:	1c20b03a 	or	r16,r3,r16
    d3a8:	1080fcc4 	addi	r2,r2,1011
    d3ac:	00a5c83a 	sub	r18,zero,r2
    d3b0:	0027883a 	mov	r19,zero
    d3b4:	0039883a 	mov	fp,zero
    d3b8:	003f9006 	br	d1fc <__alt_data_end+0xff00d1fc>
    d3bc:	3446b03a 	or	r3,r6,r17
    d3c0:	1800261e 	bne	r3,zero,d45c <__muldf3+0x2dc>
    d3c4:	0023883a 	mov	r17,zero
    d3c8:	0011883a 	mov	r8,zero
    d3cc:	01400084 	movi	r5,2
    d3d0:	003f9c06 	br	d244 <__alt_data_end+0xff00d244>
    d3d4:	3446b03a 	or	r3,r6,r17
    d3d8:	18001c26 	beq	r3,zero,d44c <__muldf3+0x2cc>
    d3dc:	8800ce26 	beq	r17,zero,d718 <__muldf3+0x598>
    d3e0:	8809883a 	mov	r4,r17
    d3e4:	d9800215 	stw	r6,8(sp)
    d3e8:	da400115 	stw	r9,4(sp)
    d3ec:	da800015 	stw	r10,0(sp)
    d3f0:	000e3980 	call	e398 <__clzsi2>
    d3f4:	d9800217 	ldw	r6,8(sp)
    d3f8:	da400117 	ldw	r9,4(sp)
    d3fc:	da800017 	ldw	r10,0(sp)
    d400:	113ffd44 	addi	r4,r2,-11
    d404:	00c00704 	movi	r3,28
    d408:	1900bf16 	blt	r3,r4,d708 <__muldf3+0x588>
    d40c:	00c00744 	movi	r3,29
    d410:	123ffe04 	addi	r8,r2,-8
    d414:	1907c83a 	sub	r3,r3,r4
    d418:	8a22983a 	sll	r17,r17,r8
    d41c:	30c6d83a 	srl	r3,r6,r3
    d420:	3210983a 	sll	r8,r6,r8
    d424:	1c62b03a 	or	r17,r3,r17
    d428:	1080fcc4 	addi	r2,r2,1011
    d42c:	0085c83a 	sub	r2,zero,r2
    d430:	000b883a 	mov	r5,zero
    d434:	003f8306 	br	d244 <__alt_data_end+0xff00d244>
    d438:	b02b883a 	mov	r21,r22
    d43c:	0081ffc4 	movi	r2,2047
    d440:	000b883a 	mov	r5,zero
    d444:	0029883a 	mov	r20,zero
    d448:	003fac06 	br	d2fc <__alt_data_end+0xff00d2fc>
    d44c:	0023883a 	mov	r17,zero
    d450:	0011883a 	mov	r8,zero
    d454:	01400044 	movi	r5,1
    d458:	003f7a06 	br	d244 <__alt_data_end+0xff00d244>
    d45c:	014000c4 	movi	r5,3
    d460:	003f7806 	br	d244 <__alt_data_end+0xff00d244>
    d464:	04c00104 	movi	r19,4
    d468:	0021883a 	mov	r16,zero
    d46c:	0029883a 	mov	r20,zero
    d470:	07000044 	movi	fp,1
    d474:	003f6106 	br	d1fc <__alt_data_end+0xff00d1fc>
    d478:	04c00304 	movi	r19,12
    d47c:	070000c4 	movi	fp,3
    d480:	003f5e06 	br	d1fc <__alt_data_end+0xff00d1fc>
    d484:	01400434 	movhi	r5,16
    d488:	002b883a 	mov	r21,zero
    d48c:	297fffc4 	addi	r5,r5,-1
    d490:	053fffc4 	movi	r20,-1
    d494:	0081ffc4 	movi	r2,2047
    d498:	003f9806 	br	d2fc <__alt_data_end+0xff00d2fc>
    d49c:	8023883a 	mov	r17,r16
    d4a0:	a011883a 	mov	r8,r20
    d4a4:	e00b883a 	mov	r5,fp
    d4a8:	003f8a06 	br	d2d4 <__alt_data_end+0xff00d2d4>
    d4ac:	8023883a 	mov	r17,r16
    d4b0:	a011883a 	mov	r8,r20
    d4b4:	482d883a 	mov	r22,r9
    d4b8:	e00b883a 	mov	r5,fp
    d4bc:	003f8506 	br	d2d4 <__alt_data_end+0xff00d2d4>
    d4c0:	a00ad43a 	srli	r5,r20,16
    d4c4:	401ad43a 	srli	r13,r8,16
    d4c8:	a53fffcc 	andi	r20,r20,65535
    d4cc:	423fffcc 	andi	r8,r8,65535
    d4d0:	4519383a 	mul	r12,r8,r20
    d4d4:	4147383a 	mul	r3,r8,r5
    d4d8:	6d09383a 	mul	r4,r13,r20
    d4dc:	600cd43a 	srli	r6,r12,16
    d4e0:	2b5d383a 	mul	r14,r5,r13
    d4e4:	20c9883a 	add	r4,r4,r3
    d4e8:	310d883a 	add	r6,r6,r4
    d4ec:	30c0022e 	bgeu	r6,r3,d4f8 <__muldf3+0x378>
    d4f0:	00c00074 	movhi	r3,1
    d4f4:	70dd883a 	add	r14,r14,r3
    d4f8:	8826d43a 	srli	r19,r17,16
    d4fc:	8bffffcc 	andi	r15,r17,65535
    d500:	7d23383a 	mul	r17,r15,r20
    d504:	7949383a 	mul	r4,r15,r5
    d508:	9d29383a 	mul	r20,r19,r20
    d50c:	8814d43a 	srli	r10,r17,16
    d510:	3012943a 	slli	r9,r6,16
    d514:	a129883a 	add	r20,r20,r4
    d518:	633fffcc 	andi	r12,r12,65535
    d51c:	5515883a 	add	r10,r10,r20
    d520:	3006d43a 	srli	r3,r6,16
    d524:	4b13883a 	add	r9,r9,r12
    d528:	2ccb383a 	mul	r5,r5,r19
    d52c:	5100022e 	bgeu	r10,r4,d538 <__muldf3+0x3b8>
    d530:	01000074 	movhi	r4,1
    d534:	290b883a 	add	r5,r5,r4
    d538:	802ad43a 	srli	r21,r16,16
    d53c:	843fffcc 	andi	r16,r16,65535
    d540:	440d383a 	mul	r6,r8,r16
    d544:	4565383a 	mul	r18,r8,r21
    d548:	8349383a 	mul	r4,r16,r13
    d54c:	500e943a 	slli	r7,r10,16
    d550:	3010d43a 	srli	r8,r6,16
    d554:	5028d43a 	srli	r20,r10,16
    d558:	2489883a 	add	r4,r4,r18
    d55c:	8abfffcc 	andi	r10,r17,65535
    d560:	3a95883a 	add	r10,r7,r10
    d564:	4119883a 	add	r12,r8,r4
    d568:	a169883a 	add	r20,r20,r5
    d56c:	1a87883a 	add	r3,r3,r10
    d570:	6d5b383a 	mul	r13,r13,r21
    d574:	6480022e 	bgeu	r12,r18,d580 <__muldf3+0x400>
    d578:	01000074 	movhi	r4,1
    d57c:	691b883a 	add	r13,r13,r4
    d580:	7c25383a 	mul	r18,r15,r16
    d584:	7d4b383a 	mul	r5,r15,r21
    d588:	84cf383a 	mul	r7,r16,r19
    d58c:	901ed43a 	srli	r15,r18,16
    d590:	6008d43a 	srli	r4,r12,16
    d594:	6010943a 	slli	r8,r12,16
    d598:	394f883a 	add	r7,r7,r5
    d59c:	333fffcc 	andi	r12,r6,65535
    d5a0:	79df883a 	add	r15,r15,r7
    d5a4:	235b883a 	add	r13,r4,r13
    d5a8:	9d63383a 	mul	r17,r19,r21
    d5ac:	4309883a 	add	r4,r8,r12
    d5b0:	7940022e 	bgeu	r15,r5,d5bc <__muldf3+0x43c>
    d5b4:	01400074 	movhi	r5,1
    d5b8:	8963883a 	add	r17,r17,r5
    d5bc:	780a943a 	slli	r5,r15,16
    d5c0:	91bfffcc 	andi	r6,r18,65535
    d5c4:	70c7883a 	add	r3,r14,r3
    d5c8:	298d883a 	add	r6,r5,r6
    d5cc:	1a8f803a 	cmpltu	r7,r3,r10
    d5d0:	350b883a 	add	r5,r6,r20
    d5d4:	20c7883a 	add	r3,r4,r3
    d5d8:	3955883a 	add	r10,r7,r5
    d5dc:	1909803a 	cmpltu	r4,r3,r4
    d5e0:	6a91883a 	add	r8,r13,r10
    d5e4:	780cd43a 	srli	r6,r15,16
    d5e8:	2219883a 	add	r12,r4,r8
    d5ec:	2d0b803a 	cmpltu	r5,r5,r20
    d5f0:	51cf803a 	cmpltu	r7,r10,r7
    d5f4:	29ceb03a 	or	r7,r5,r7
    d5f8:	4351803a 	cmpltu	r8,r8,r13
    d5fc:	610b803a 	cmpltu	r5,r12,r4
    d600:	4148b03a 	or	r4,r8,r5
    d604:	398f883a 	add	r7,r7,r6
    d608:	3909883a 	add	r4,r7,r4
    d60c:	1810927a 	slli	r8,r3,9
    d610:	2449883a 	add	r4,r4,r17
    d614:	2008927a 	slli	r4,r4,9
    d618:	6022d5fa 	srli	r17,r12,23
    d61c:	1806d5fa 	srli	r3,r3,23
    d620:	4252b03a 	or	r9,r8,r9
    d624:	600a927a 	slli	r5,r12,9
    d628:	4810c03a 	cmpne	r8,r9,zero
    d62c:	2462b03a 	or	r17,r4,r17
    d630:	40c6b03a 	or	r3,r8,r3
    d634:	8900402c 	andhi	r4,r17,256
    d638:	1950b03a 	or	r8,r3,r5
    d63c:	20000726 	beq	r4,zero,d65c <__muldf3+0x4dc>
    d640:	4006d07a 	srli	r3,r8,1
    d644:	880497fa 	slli	r2,r17,31
    d648:	4200004c 	andi	r8,r8,1
    d64c:	8822d07a 	srli	r17,r17,1
    d650:	1a10b03a 	or	r8,r3,r8
    d654:	1210b03a 	or	r8,r2,r8
    d658:	5805883a 	mov	r2,r11
    d65c:	1140ffc4 	addi	r5,r2,1023
    d660:	0140440e 	bge	zero,r5,d774 <__muldf3+0x5f4>
    d664:	40c001cc 	andi	r3,r8,7
    d668:	18000726 	beq	r3,zero,d688 <__muldf3+0x508>
    d66c:	40c003cc 	andi	r3,r8,15
    d670:	01000104 	movi	r4,4
    d674:	19000426 	beq	r3,r4,d688 <__muldf3+0x508>
    d678:	4107883a 	add	r3,r8,r4
    d67c:	1a11803a 	cmpltu	r8,r3,r8
    d680:	8a23883a 	add	r17,r17,r8
    d684:	1811883a 	mov	r8,r3
    d688:	88c0402c 	andhi	r3,r17,256
    d68c:	18000426 	beq	r3,zero,d6a0 <__muldf3+0x520>
    d690:	11410004 	addi	r5,r2,1024
    d694:	00bfc034 	movhi	r2,65280
    d698:	10bfffc4 	addi	r2,r2,-1
    d69c:	88a2703a 	and	r17,r17,r2
    d6a0:	0081ff84 	movi	r2,2046
    d6a4:	117f6416 	blt	r2,r5,d438 <__alt_data_end+0xff00d438>
    d6a8:	8828977a 	slli	r20,r17,29
    d6ac:	4010d0fa 	srli	r8,r8,3
    d6b0:	8822927a 	slli	r17,r17,9
    d6b4:	2881ffcc 	andi	r2,r5,2047
    d6b8:	a228b03a 	or	r20,r20,r8
    d6bc:	880ad33a 	srli	r5,r17,12
    d6c0:	b02b883a 	mov	r21,r22
    d6c4:	003f0d06 	br	d2fc <__alt_data_end+0xff00d2fc>
    d6c8:	8080022c 	andhi	r2,r16,8
    d6cc:	10000926 	beq	r2,zero,d6f4 <__muldf3+0x574>
    d6d0:	8880022c 	andhi	r2,r17,8
    d6d4:	1000071e 	bne	r2,zero,d6f4 <__muldf3+0x574>
    d6d8:	00800434 	movhi	r2,16
    d6dc:	89400234 	orhi	r5,r17,8
    d6e0:	10bfffc4 	addi	r2,r2,-1
    d6e4:	b82b883a 	mov	r21,r23
    d6e8:	288a703a 	and	r5,r5,r2
    d6ec:	4029883a 	mov	r20,r8
    d6f0:	003f6806 	br	d494 <__alt_data_end+0xff00d494>
    d6f4:	00800434 	movhi	r2,16
    d6f8:	81400234 	orhi	r5,r16,8
    d6fc:	10bfffc4 	addi	r2,r2,-1
    d700:	288a703a 	and	r5,r5,r2
    d704:	003f6306 	br	d494 <__alt_data_end+0xff00d494>
    d708:	147ff604 	addi	r17,r2,-40
    d70c:	3462983a 	sll	r17,r6,r17
    d710:	0011883a 	mov	r8,zero
    d714:	003f4406 	br	d428 <__alt_data_end+0xff00d428>
    d718:	3009883a 	mov	r4,r6
    d71c:	d9800215 	stw	r6,8(sp)
    d720:	da400115 	stw	r9,4(sp)
    d724:	da800015 	stw	r10,0(sp)
    d728:	000e3980 	call	e398 <__clzsi2>
    d72c:	10800804 	addi	r2,r2,32
    d730:	da800017 	ldw	r10,0(sp)
    d734:	da400117 	ldw	r9,4(sp)
    d738:	d9800217 	ldw	r6,8(sp)
    d73c:	003f3006 	br	d400 <__alt_data_end+0xff00d400>
    d740:	143ff604 	addi	r16,r2,-40
    d744:	9c20983a 	sll	r16,r19,r16
    d748:	0029883a 	mov	r20,zero
    d74c:	003f1606 	br	d3a8 <__alt_data_end+0xff00d3a8>
    d750:	d9800215 	stw	r6,8(sp)
    d754:	d9c00015 	stw	r7,0(sp)
    d758:	da400115 	stw	r9,4(sp)
    d75c:	000e3980 	call	e398 <__clzsi2>
    d760:	10800804 	addi	r2,r2,32
    d764:	da400117 	ldw	r9,4(sp)
    d768:	d9c00017 	ldw	r7,0(sp)
    d76c:	d9800217 	ldw	r6,8(sp)
    d770:	003f0306 	br	d380 <__alt_data_end+0xff00d380>
    d774:	00c00044 	movi	r3,1
    d778:	1947c83a 	sub	r3,r3,r5
    d77c:	00800e04 	movi	r2,56
    d780:	10feda16 	blt	r2,r3,d2ec <__alt_data_end+0xff00d2ec>
    d784:	008007c4 	movi	r2,31
    d788:	10c01b16 	blt	r2,r3,d7f8 <__muldf3+0x678>
    d78c:	00800804 	movi	r2,32
    d790:	10c5c83a 	sub	r2,r2,r3
    d794:	888a983a 	sll	r5,r17,r2
    d798:	40c8d83a 	srl	r4,r8,r3
    d79c:	4084983a 	sll	r2,r8,r2
    d7a0:	88e2d83a 	srl	r17,r17,r3
    d7a4:	2906b03a 	or	r3,r5,r4
    d7a8:	1004c03a 	cmpne	r2,r2,zero
    d7ac:	1886b03a 	or	r3,r3,r2
    d7b0:	188001cc 	andi	r2,r3,7
    d7b4:	10000726 	beq	r2,zero,d7d4 <__muldf3+0x654>
    d7b8:	188003cc 	andi	r2,r3,15
    d7bc:	01000104 	movi	r4,4
    d7c0:	11000426 	beq	r2,r4,d7d4 <__muldf3+0x654>
    d7c4:	1805883a 	mov	r2,r3
    d7c8:	10c00104 	addi	r3,r2,4
    d7cc:	1885803a 	cmpltu	r2,r3,r2
    d7d0:	88a3883a 	add	r17,r17,r2
    d7d4:	8880202c 	andhi	r2,r17,128
    d7d8:	10001c26 	beq	r2,zero,d84c <__muldf3+0x6cc>
    d7dc:	b02b883a 	mov	r21,r22
    d7e0:	00800044 	movi	r2,1
    d7e4:	000b883a 	mov	r5,zero
    d7e8:	0029883a 	mov	r20,zero
    d7ec:	003ec306 	br	d2fc <__alt_data_end+0xff00d2fc>
    d7f0:	5805883a 	mov	r2,r11
    d7f4:	003f9906 	br	d65c <__alt_data_end+0xff00d65c>
    d7f8:	00bff844 	movi	r2,-31
    d7fc:	1145c83a 	sub	r2,r2,r5
    d800:	8888d83a 	srl	r4,r17,r2
    d804:	00800804 	movi	r2,32
    d808:	18801a26 	beq	r3,r2,d874 <__muldf3+0x6f4>
    d80c:	00801004 	movi	r2,64
    d810:	10c5c83a 	sub	r2,r2,r3
    d814:	8884983a 	sll	r2,r17,r2
    d818:	1204b03a 	or	r2,r2,r8
    d81c:	1004c03a 	cmpne	r2,r2,zero
    d820:	2084b03a 	or	r2,r4,r2
    d824:	144001cc 	andi	r17,r2,7
    d828:	88000d1e 	bne	r17,zero,d860 <__muldf3+0x6e0>
    d82c:	000b883a 	mov	r5,zero
    d830:	1028d0fa 	srli	r20,r2,3
    d834:	b02b883a 	mov	r21,r22
    d838:	0005883a 	mov	r2,zero
    d83c:	a468b03a 	or	r20,r20,r17
    d840:	003eae06 	br	d2fc <__alt_data_end+0xff00d2fc>
    d844:	1007883a 	mov	r3,r2
    d848:	0023883a 	mov	r17,zero
    d84c:	880a927a 	slli	r5,r17,9
    d850:	1805883a 	mov	r2,r3
    d854:	8822977a 	slli	r17,r17,29
    d858:	280ad33a 	srli	r5,r5,12
    d85c:	003ff406 	br	d830 <__alt_data_end+0xff00d830>
    d860:	10c003cc 	andi	r3,r2,15
    d864:	01000104 	movi	r4,4
    d868:	193ff626 	beq	r3,r4,d844 <__alt_data_end+0xff00d844>
    d86c:	0023883a 	mov	r17,zero
    d870:	003fd506 	br	d7c8 <__alt_data_end+0xff00d7c8>
    d874:	0005883a 	mov	r2,zero
    d878:	003fe706 	br	d818 <__alt_data_end+0xff00d818>
    d87c:	00800434 	movhi	r2,16
    d880:	89400234 	orhi	r5,r17,8
    d884:	10bfffc4 	addi	r2,r2,-1
    d888:	b02b883a 	mov	r21,r22
    d88c:	288a703a 	and	r5,r5,r2
    d890:	4029883a 	mov	r20,r8
    d894:	003eff06 	br	d494 <__alt_data_end+0xff00d494>

0000d898 <__subdf3>:
    d898:	02000434 	movhi	r8,16
    d89c:	423fffc4 	addi	r8,r8,-1
    d8a0:	defffb04 	addi	sp,sp,-20
    d8a4:	2a14703a 	and	r10,r5,r8
    d8a8:	3812d53a 	srli	r9,r7,20
    d8ac:	3a10703a 	and	r8,r7,r8
    d8b0:	2006d77a 	srli	r3,r4,29
    d8b4:	3004d77a 	srli	r2,r6,29
    d8b8:	dc000015 	stw	r16,0(sp)
    d8bc:	501490fa 	slli	r10,r10,3
    d8c0:	2820d53a 	srli	r16,r5,20
    d8c4:	401090fa 	slli	r8,r8,3
    d8c8:	dc800215 	stw	r18,8(sp)
    d8cc:	dc400115 	stw	r17,4(sp)
    d8d0:	dfc00415 	stw	ra,16(sp)
    d8d4:	202290fa 	slli	r17,r4,3
    d8d8:	dcc00315 	stw	r19,12(sp)
    d8dc:	4a41ffcc 	andi	r9,r9,2047
    d8e0:	0101ffc4 	movi	r4,2047
    d8e4:	2824d7fa 	srli	r18,r5,31
    d8e8:	8401ffcc 	andi	r16,r16,2047
    d8ec:	50c6b03a 	or	r3,r10,r3
    d8f0:	380ed7fa 	srli	r7,r7,31
    d8f4:	408ab03a 	or	r5,r8,r2
    d8f8:	300c90fa 	slli	r6,r6,3
    d8fc:	49009626 	beq	r9,r4,db58 <__subdf3+0x2c0>
    d900:	39c0005c 	xori	r7,r7,1
    d904:	8245c83a 	sub	r2,r16,r9
    d908:	3c807426 	beq	r7,r18,dadc <__subdf3+0x244>
    d90c:	0080af0e 	bge	zero,r2,dbcc <__subdf3+0x334>
    d910:	48002a1e 	bne	r9,zero,d9bc <__subdf3+0x124>
    d914:	2988b03a 	or	r4,r5,r6
    d918:	20009a1e 	bne	r4,zero,db84 <__subdf3+0x2ec>
    d91c:	888001cc 	andi	r2,r17,7
    d920:	10000726 	beq	r2,zero,d940 <__subdf3+0xa8>
    d924:	888003cc 	andi	r2,r17,15
    d928:	01000104 	movi	r4,4
    d92c:	11000426 	beq	r2,r4,d940 <__subdf3+0xa8>
    d930:	890b883a 	add	r5,r17,r4
    d934:	2c63803a 	cmpltu	r17,r5,r17
    d938:	1c47883a 	add	r3,r3,r17
    d93c:	2823883a 	mov	r17,r5
    d940:	1880202c 	andhi	r2,r3,128
    d944:	10005926 	beq	r2,zero,daac <__subdf3+0x214>
    d948:	84000044 	addi	r16,r16,1
    d94c:	0081ffc4 	movi	r2,2047
    d950:	8080be26 	beq	r16,r2,dc4c <__subdf3+0x3b4>
    d954:	017fe034 	movhi	r5,65408
    d958:	297fffc4 	addi	r5,r5,-1
    d95c:	1946703a 	and	r3,r3,r5
    d960:	1804977a 	slli	r2,r3,29
    d964:	1806927a 	slli	r3,r3,9
    d968:	8822d0fa 	srli	r17,r17,3
    d96c:	8401ffcc 	andi	r16,r16,2047
    d970:	180ad33a 	srli	r5,r3,12
    d974:	9100004c 	andi	r4,r18,1
    d978:	1444b03a 	or	r2,r2,r17
    d97c:	80c1ffcc 	andi	r3,r16,2047
    d980:	1820953a 	slli	r16,r3,20
    d984:	20c03fcc 	andi	r3,r4,255
    d988:	180897fa 	slli	r4,r3,31
    d98c:	00c00434 	movhi	r3,16
    d990:	18ffffc4 	addi	r3,r3,-1
    d994:	28c6703a 	and	r3,r5,r3
    d998:	1c06b03a 	or	r3,r3,r16
    d99c:	1906b03a 	or	r3,r3,r4
    d9a0:	dfc00417 	ldw	ra,16(sp)
    d9a4:	dcc00317 	ldw	r19,12(sp)
    d9a8:	dc800217 	ldw	r18,8(sp)
    d9ac:	dc400117 	ldw	r17,4(sp)
    d9b0:	dc000017 	ldw	r16,0(sp)
    d9b4:	dec00504 	addi	sp,sp,20
    d9b8:	f800283a 	ret
    d9bc:	0101ffc4 	movi	r4,2047
    d9c0:	813fd626 	beq	r16,r4,d91c <__alt_data_end+0xff00d91c>
    d9c4:	29402034 	orhi	r5,r5,128
    d9c8:	01000e04 	movi	r4,56
    d9cc:	2080a316 	blt	r4,r2,dc5c <__subdf3+0x3c4>
    d9d0:	010007c4 	movi	r4,31
    d9d4:	2080c616 	blt	r4,r2,dcf0 <__subdf3+0x458>
    d9d8:	01000804 	movi	r4,32
    d9dc:	2089c83a 	sub	r4,r4,r2
    d9e0:	2910983a 	sll	r8,r5,r4
    d9e4:	308ed83a 	srl	r7,r6,r2
    d9e8:	3108983a 	sll	r4,r6,r4
    d9ec:	2884d83a 	srl	r2,r5,r2
    d9f0:	41ccb03a 	or	r6,r8,r7
    d9f4:	2008c03a 	cmpne	r4,r4,zero
    d9f8:	310cb03a 	or	r6,r6,r4
    d9fc:	898dc83a 	sub	r6,r17,r6
    da00:	89a3803a 	cmpltu	r17,r17,r6
    da04:	1887c83a 	sub	r3,r3,r2
    da08:	1c47c83a 	sub	r3,r3,r17
    da0c:	3023883a 	mov	r17,r6
    da10:	1880202c 	andhi	r2,r3,128
    da14:	10002326 	beq	r2,zero,daa4 <__subdf3+0x20c>
    da18:	04c02034 	movhi	r19,128
    da1c:	9cffffc4 	addi	r19,r19,-1
    da20:	1ce6703a 	and	r19,r3,r19
    da24:	98007a26 	beq	r19,zero,dc10 <__subdf3+0x378>
    da28:	9809883a 	mov	r4,r19
    da2c:	000e3980 	call	e398 <__clzsi2>
    da30:	113ffe04 	addi	r4,r2,-8
    da34:	00c007c4 	movi	r3,31
    da38:	19007b16 	blt	r3,r4,dc28 <__subdf3+0x390>
    da3c:	00800804 	movi	r2,32
    da40:	1105c83a 	sub	r2,r2,r4
    da44:	8884d83a 	srl	r2,r17,r2
    da48:	9906983a 	sll	r3,r19,r4
    da4c:	8922983a 	sll	r17,r17,r4
    da50:	10c4b03a 	or	r2,r2,r3
    da54:	24007816 	blt	r4,r16,dc38 <__subdf3+0x3a0>
    da58:	2421c83a 	sub	r16,r4,r16
    da5c:	80c00044 	addi	r3,r16,1
    da60:	010007c4 	movi	r4,31
    da64:	20c09516 	blt	r4,r3,dcbc <__subdf3+0x424>
    da68:	01400804 	movi	r5,32
    da6c:	28cbc83a 	sub	r5,r5,r3
    da70:	88c8d83a 	srl	r4,r17,r3
    da74:	8962983a 	sll	r17,r17,r5
    da78:	114a983a 	sll	r5,r2,r5
    da7c:	10c6d83a 	srl	r3,r2,r3
    da80:	8804c03a 	cmpne	r2,r17,zero
    da84:	290ab03a 	or	r5,r5,r4
    da88:	28a2b03a 	or	r17,r5,r2
    da8c:	0021883a 	mov	r16,zero
    da90:	003fa206 	br	d91c <__alt_data_end+0xff00d91c>
    da94:	2090b03a 	or	r8,r4,r2
    da98:	40018e26 	beq	r8,zero,e0d4 <__subdf3+0x83c>
    da9c:	1007883a 	mov	r3,r2
    daa0:	2023883a 	mov	r17,r4
    daa4:	888001cc 	andi	r2,r17,7
    daa8:	103f9e1e 	bne	r2,zero,d924 <__alt_data_end+0xff00d924>
    daac:	1804977a 	slli	r2,r3,29
    dab0:	8822d0fa 	srli	r17,r17,3
    dab4:	1810d0fa 	srli	r8,r3,3
    dab8:	9100004c 	andi	r4,r18,1
    dabc:	1444b03a 	or	r2,r2,r17
    dac0:	00c1ffc4 	movi	r3,2047
    dac4:	80c02826 	beq	r16,r3,db68 <__subdf3+0x2d0>
    dac8:	01400434 	movhi	r5,16
    dacc:	297fffc4 	addi	r5,r5,-1
    dad0:	80e0703a 	and	r16,r16,r3
    dad4:	414a703a 	and	r5,r8,r5
    dad8:	003fa806 	br	d97c <__alt_data_end+0xff00d97c>
    dadc:	0080630e 	bge	zero,r2,dc6c <__subdf3+0x3d4>
    dae0:	48003026 	beq	r9,zero,dba4 <__subdf3+0x30c>
    dae4:	0101ffc4 	movi	r4,2047
    dae8:	813f8c26 	beq	r16,r4,d91c <__alt_data_end+0xff00d91c>
    daec:	29402034 	orhi	r5,r5,128
    daf0:	01000e04 	movi	r4,56
    daf4:	2080a90e 	bge	r4,r2,dd9c <__subdf3+0x504>
    daf8:	298cb03a 	or	r6,r5,r6
    dafc:	3012c03a 	cmpne	r9,r6,zero
    db00:	0005883a 	mov	r2,zero
    db04:	4c53883a 	add	r9,r9,r17
    db08:	4c63803a 	cmpltu	r17,r9,r17
    db0c:	10c7883a 	add	r3,r2,r3
    db10:	88c7883a 	add	r3,r17,r3
    db14:	4823883a 	mov	r17,r9
    db18:	1880202c 	andhi	r2,r3,128
    db1c:	1000d026 	beq	r2,zero,de60 <__subdf3+0x5c8>
    db20:	84000044 	addi	r16,r16,1
    db24:	0081ffc4 	movi	r2,2047
    db28:	8080fe26 	beq	r16,r2,df24 <__subdf3+0x68c>
    db2c:	00bfe034 	movhi	r2,65408
    db30:	10bfffc4 	addi	r2,r2,-1
    db34:	1886703a 	and	r3,r3,r2
    db38:	880ad07a 	srli	r5,r17,1
    db3c:	180497fa 	slli	r2,r3,31
    db40:	8900004c 	andi	r4,r17,1
    db44:	2922b03a 	or	r17,r5,r4
    db48:	1806d07a 	srli	r3,r3,1
    db4c:	1462b03a 	or	r17,r2,r17
    db50:	3825883a 	mov	r18,r7
    db54:	003f7106 	br	d91c <__alt_data_end+0xff00d91c>
    db58:	2984b03a 	or	r2,r5,r6
    db5c:	103f6826 	beq	r2,zero,d900 <__alt_data_end+0xff00d900>
    db60:	39c03fcc 	andi	r7,r7,255
    db64:	003f6706 	br	d904 <__alt_data_end+0xff00d904>
    db68:	4086b03a 	or	r3,r8,r2
    db6c:	18015226 	beq	r3,zero,e0b8 <__subdf3+0x820>
    db70:	00c00434 	movhi	r3,16
    db74:	41400234 	orhi	r5,r8,8
    db78:	18ffffc4 	addi	r3,r3,-1
    db7c:	28ca703a 	and	r5,r5,r3
    db80:	003f7e06 	br	d97c <__alt_data_end+0xff00d97c>
    db84:	10bfffc4 	addi	r2,r2,-1
    db88:	1000491e 	bne	r2,zero,dcb0 <__subdf3+0x418>
    db8c:	898fc83a 	sub	r7,r17,r6
    db90:	89e3803a 	cmpltu	r17,r17,r7
    db94:	1947c83a 	sub	r3,r3,r5
    db98:	1c47c83a 	sub	r3,r3,r17
    db9c:	3823883a 	mov	r17,r7
    dba0:	003f9b06 	br	da10 <__alt_data_end+0xff00da10>
    dba4:	2988b03a 	or	r4,r5,r6
    dba8:	203f5c26 	beq	r4,zero,d91c <__alt_data_end+0xff00d91c>
    dbac:	10bfffc4 	addi	r2,r2,-1
    dbb0:	1000931e 	bne	r2,zero,de00 <__subdf3+0x568>
    dbb4:	898d883a 	add	r6,r17,r6
    dbb8:	3463803a 	cmpltu	r17,r6,r17
    dbbc:	1947883a 	add	r3,r3,r5
    dbc0:	88c7883a 	add	r3,r17,r3
    dbc4:	3023883a 	mov	r17,r6
    dbc8:	003fd306 	br	db18 <__alt_data_end+0xff00db18>
    dbcc:	1000541e 	bne	r2,zero,dd20 <__subdf3+0x488>
    dbd0:	80800044 	addi	r2,r16,1
    dbd4:	1081ffcc 	andi	r2,r2,2047
    dbd8:	01000044 	movi	r4,1
    dbdc:	2080a20e 	bge	r4,r2,de68 <__subdf3+0x5d0>
    dbe0:	8989c83a 	sub	r4,r17,r6
    dbe4:	8905803a 	cmpltu	r2,r17,r4
    dbe8:	1967c83a 	sub	r19,r3,r5
    dbec:	98a7c83a 	sub	r19,r19,r2
    dbf0:	9880202c 	andhi	r2,r19,128
    dbf4:	10006326 	beq	r2,zero,dd84 <__subdf3+0x4ec>
    dbf8:	3463c83a 	sub	r17,r6,r17
    dbfc:	28c7c83a 	sub	r3,r5,r3
    dc00:	344d803a 	cmpltu	r6,r6,r17
    dc04:	19a7c83a 	sub	r19,r3,r6
    dc08:	3825883a 	mov	r18,r7
    dc0c:	983f861e 	bne	r19,zero,da28 <__alt_data_end+0xff00da28>
    dc10:	8809883a 	mov	r4,r17
    dc14:	000e3980 	call	e398 <__clzsi2>
    dc18:	10800804 	addi	r2,r2,32
    dc1c:	113ffe04 	addi	r4,r2,-8
    dc20:	00c007c4 	movi	r3,31
    dc24:	193f850e 	bge	r3,r4,da3c <__alt_data_end+0xff00da3c>
    dc28:	10bff604 	addi	r2,r2,-40
    dc2c:	8884983a 	sll	r2,r17,r2
    dc30:	0023883a 	mov	r17,zero
    dc34:	243f880e 	bge	r4,r16,da58 <__alt_data_end+0xff00da58>
    dc38:	00ffe034 	movhi	r3,65408
    dc3c:	18ffffc4 	addi	r3,r3,-1
    dc40:	8121c83a 	sub	r16,r16,r4
    dc44:	10c6703a 	and	r3,r2,r3
    dc48:	003f3406 	br	d91c <__alt_data_end+0xff00d91c>
    dc4c:	9100004c 	andi	r4,r18,1
    dc50:	000b883a 	mov	r5,zero
    dc54:	0005883a 	mov	r2,zero
    dc58:	003f4806 	br	d97c <__alt_data_end+0xff00d97c>
    dc5c:	298cb03a 	or	r6,r5,r6
    dc60:	300cc03a 	cmpne	r6,r6,zero
    dc64:	0005883a 	mov	r2,zero
    dc68:	003f6406 	br	d9fc <__alt_data_end+0xff00d9fc>
    dc6c:	10009a1e 	bne	r2,zero,ded8 <__subdf3+0x640>
    dc70:	82400044 	addi	r9,r16,1
    dc74:	4881ffcc 	andi	r2,r9,2047
    dc78:	02800044 	movi	r10,1
    dc7c:	5080670e 	bge	r10,r2,de1c <__subdf3+0x584>
    dc80:	0081ffc4 	movi	r2,2047
    dc84:	4880af26 	beq	r9,r2,df44 <__subdf3+0x6ac>
    dc88:	898d883a 	add	r6,r17,r6
    dc8c:	1945883a 	add	r2,r3,r5
    dc90:	3447803a 	cmpltu	r3,r6,r17
    dc94:	1887883a 	add	r3,r3,r2
    dc98:	182297fa 	slli	r17,r3,31
    dc9c:	300cd07a 	srli	r6,r6,1
    dca0:	1806d07a 	srli	r3,r3,1
    dca4:	4821883a 	mov	r16,r9
    dca8:	89a2b03a 	or	r17,r17,r6
    dcac:	003f1b06 	br	d91c <__alt_data_end+0xff00d91c>
    dcb0:	0101ffc4 	movi	r4,2047
    dcb4:	813f441e 	bne	r16,r4,d9c8 <__alt_data_end+0xff00d9c8>
    dcb8:	003f1806 	br	d91c <__alt_data_end+0xff00d91c>
    dcbc:	843ff844 	addi	r16,r16,-31
    dcc0:	01400804 	movi	r5,32
    dcc4:	1408d83a 	srl	r4,r2,r16
    dcc8:	19405026 	beq	r3,r5,de0c <__subdf3+0x574>
    dccc:	01401004 	movi	r5,64
    dcd0:	28c7c83a 	sub	r3,r5,r3
    dcd4:	10c4983a 	sll	r2,r2,r3
    dcd8:	88a2b03a 	or	r17,r17,r2
    dcdc:	8822c03a 	cmpne	r17,r17,zero
    dce0:	2462b03a 	or	r17,r4,r17
    dce4:	0007883a 	mov	r3,zero
    dce8:	0021883a 	mov	r16,zero
    dcec:	003f6d06 	br	daa4 <__alt_data_end+0xff00daa4>
    dcf0:	11fff804 	addi	r7,r2,-32
    dcf4:	01000804 	movi	r4,32
    dcf8:	29ced83a 	srl	r7,r5,r7
    dcfc:	11004526 	beq	r2,r4,de14 <__subdf3+0x57c>
    dd00:	01001004 	movi	r4,64
    dd04:	2089c83a 	sub	r4,r4,r2
    dd08:	2904983a 	sll	r2,r5,r4
    dd0c:	118cb03a 	or	r6,r2,r6
    dd10:	300cc03a 	cmpne	r6,r6,zero
    dd14:	398cb03a 	or	r6,r7,r6
    dd18:	0005883a 	mov	r2,zero
    dd1c:	003f3706 	br	d9fc <__alt_data_end+0xff00d9fc>
    dd20:	80002a26 	beq	r16,zero,ddcc <__subdf3+0x534>
    dd24:	0101ffc4 	movi	r4,2047
    dd28:	49006626 	beq	r9,r4,dec4 <__subdf3+0x62c>
    dd2c:	0085c83a 	sub	r2,zero,r2
    dd30:	18c02034 	orhi	r3,r3,128
    dd34:	01000e04 	movi	r4,56
    dd38:	20807e16 	blt	r4,r2,df34 <__subdf3+0x69c>
    dd3c:	010007c4 	movi	r4,31
    dd40:	2080e716 	blt	r4,r2,e0e0 <__subdf3+0x848>
    dd44:	01000804 	movi	r4,32
    dd48:	2089c83a 	sub	r4,r4,r2
    dd4c:	1914983a 	sll	r10,r3,r4
    dd50:	8890d83a 	srl	r8,r17,r2
    dd54:	8908983a 	sll	r4,r17,r4
    dd58:	1884d83a 	srl	r2,r3,r2
    dd5c:	5222b03a 	or	r17,r10,r8
    dd60:	2006c03a 	cmpne	r3,r4,zero
    dd64:	88e2b03a 	or	r17,r17,r3
    dd68:	3463c83a 	sub	r17,r6,r17
    dd6c:	2885c83a 	sub	r2,r5,r2
    dd70:	344d803a 	cmpltu	r6,r6,r17
    dd74:	1187c83a 	sub	r3,r2,r6
    dd78:	4821883a 	mov	r16,r9
    dd7c:	3825883a 	mov	r18,r7
    dd80:	003f2306 	br	da10 <__alt_data_end+0xff00da10>
    dd84:	24d0b03a 	or	r8,r4,r19
    dd88:	40001b1e 	bne	r8,zero,ddf8 <__subdf3+0x560>
    dd8c:	0005883a 	mov	r2,zero
    dd90:	0009883a 	mov	r4,zero
    dd94:	0021883a 	mov	r16,zero
    dd98:	003f4906 	br	dac0 <__alt_data_end+0xff00dac0>
    dd9c:	010007c4 	movi	r4,31
    dda0:	20803a16 	blt	r4,r2,de8c <__subdf3+0x5f4>
    dda4:	01000804 	movi	r4,32
    dda8:	2089c83a 	sub	r4,r4,r2
    ddac:	2912983a 	sll	r9,r5,r4
    ddb0:	3090d83a 	srl	r8,r6,r2
    ddb4:	3108983a 	sll	r4,r6,r4
    ddb8:	2884d83a 	srl	r2,r5,r2
    ddbc:	4a12b03a 	or	r9,r9,r8
    ddc0:	2008c03a 	cmpne	r4,r4,zero
    ddc4:	4912b03a 	or	r9,r9,r4
    ddc8:	003f4e06 	br	db04 <__alt_data_end+0xff00db04>
    ddcc:	1c48b03a 	or	r4,r3,r17
    ddd0:	20003c26 	beq	r4,zero,dec4 <__subdf3+0x62c>
    ddd4:	0084303a 	nor	r2,zero,r2
    ddd8:	1000381e 	bne	r2,zero,debc <__subdf3+0x624>
    dddc:	3463c83a 	sub	r17,r6,r17
    dde0:	28c5c83a 	sub	r2,r5,r3
    dde4:	344d803a 	cmpltu	r6,r6,r17
    dde8:	1187c83a 	sub	r3,r2,r6
    ddec:	4821883a 	mov	r16,r9
    ddf0:	3825883a 	mov	r18,r7
    ddf4:	003f0606 	br	da10 <__alt_data_end+0xff00da10>
    ddf8:	2023883a 	mov	r17,r4
    ddfc:	003f0906 	br	da24 <__alt_data_end+0xff00da24>
    de00:	0101ffc4 	movi	r4,2047
    de04:	813f3a1e 	bne	r16,r4,daf0 <__alt_data_end+0xff00daf0>
    de08:	003ec406 	br	d91c <__alt_data_end+0xff00d91c>
    de0c:	0005883a 	mov	r2,zero
    de10:	003fb106 	br	dcd8 <__alt_data_end+0xff00dcd8>
    de14:	0005883a 	mov	r2,zero
    de18:	003fbc06 	br	dd0c <__alt_data_end+0xff00dd0c>
    de1c:	1c44b03a 	or	r2,r3,r17
    de20:	80008e1e 	bne	r16,zero,e05c <__subdf3+0x7c4>
    de24:	1000c826 	beq	r2,zero,e148 <__subdf3+0x8b0>
    de28:	2984b03a 	or	r2,r5,r6
    de2c:	103ebb26 	beq	r2,zero,d91c <__alt_data_end+0xff00d91c>
    de30:	8989883a 	add	r4,r17,r6
    de34:	1945883a 	add	r2,r3,r5
    de38:	2447803a 	cmpltu	r3,r4,r17
    de3c:	1887883a 	add	r3,r3,r2
    de40:	1880202c 	andhi	r2,r3,128
    de44:	2023883a 	mov	r17,r4
    de48:	103f1626 	beq	r2,zero,daa4 <__alt_data_end+0xff00daa4>
    de4c:	00bfe034 	movhi	r2,65408
    de50:	10bfffc4 	addi	r2,r2,-1
    de54:	5021883a 	mov	r16,r10
    de58:	1886703a 	and	r3,r3,r2
    de5c:	003eaf06 	br	d91c <__alt_data_end+0xff00d91c>
    de60:	3825883a 	mov	r18,r7
    de64:	003f0f06 	br	daa4 <__alt_data_end+0xff00daa4>
    de68:	1c44b03a 	or	r2,r3,r17
    de6c:	8000251e 	bne	r16,zero,df04 <__subdf3+0x66c>
    de70:	1000661e 	bne	r2,zero,e00c <__subdf3+0x774>
    de74:	2990b03a 	or	r8,r5,r6
    de78:	40009626 	beq	r8,zero,e0d4 <__subdf3+0x83c>
    de7c:	2807883a 	mov	r3,r5
    de80:	3023883a 	mov	r17,r6
    de84:	3825883a 	mov	r18,r7
    de88:	003ea406 	br	d91c <__alt_data_end+0xff00d91c>
    de8c:	127ff804 	addi	r9,r2,-32
    de90:	01000804 	movi	r4,32
    de94:	2a52d83a 	srl	r9,r5,r9
    de98:	11008c26 	beq	r2,r4,e0cc <__subdf3+0x834>
    de9c:	01001004 	movi	r4,64
    dea0:	2085c83a 	sub	r2,r4,r2
    dea4:	2884983a 	sll	r2,r5,r2
    dea8:	118cb03a 	or	r6,r2,r6
    deac:	300cc03a 	cmpne	r6,r6,zero
    deb0:	4992b03a 	or	r9,r9,r6
    deb4:	0005883a 	mov	r2,zero
    deb8:	003f1206 	br	db04 <__alt_data_end+0xff00db04>
    debc:	0101ffc4 	movi	r4,2047
    dec0:	493f9c1e 	bne	r9,r4,dd34 <__alt_data_end+0xff00dd34>
    dec4:	2807883a 	mov	r3,r5
    dec8:	3023883a 	mov	r17,r6
    decc:	4821883a 	mov	r16,r9
    ded0:	3825883a 	mov	r18,r7
    ded4:	003e9106 	br	d91c <__alt_data_end+0xff00d91c>
    ded8:	80001f1e 	bne	r16,zero,df58 <__subdf3+0x6c0>
    dedc:	1c48b03a 	or	r4,r3,r17
    dee0:	20005a26 	beq	r4,zero,e04c <__subdf3+0x7b4>
    dee4:	0084303a 	nor	r2,zero,r2
    dee8:	1000561e 	bne	r2,zero,e044 <__subdf3+0x7ac>
    deec:	89a3883a 	add	r17,r17,r6
    def0:	1945883a 	add	r2,r3,r5
    def4:	898d803a 	cmpltu	r6,r17,r6
    def8:	3087883a 	add	r3,r6,r2
    defc:	4821883a 	mov	r16,r9
    df00:	003f0506 	br	db18 <__alt_data_end+0xff00db18>
    df04:	10002b1e 	bne	r2,zero,dfb4 <__subdf3+0x71c>
    df08:	2984b03a 	or	r2,r5,r6
    df0c:	10008026 	beq	r2,zero,e110 <__subdf3+0x878>
    df10:	2807883a 	mov	r3,r5
    df14:	3023883a 	mov	r17,r6
    df18:	3825883a 	mov	r18,r7
    df1c:	0401ffc4 	movi	r16,2047
    df20:	003e7e06 	br	d91c <__alt_data_end+0xff00d91c>
    df24:	3809883a 	mov	r4,r7
    df28:	0011883a 	mov	r8,zero
    df2c:	0005883a 	mov	r2,zero
    df30:	003ee306 	br	dac0 <__alt_data_end+0xff00dac0>
    df34:	1c62b03a 	or	r17,r3,r17
    df38:	8822c03a 	cmpne	r17,r17,zero
    df3c:	0005883a 	mov	r2,zero
    df40:	003f8906 	br	dd68 <__alt_data_end+0xff00dd68>
    df44:	3809883a 	mov	r4,r7
    df48:	4821883a 	mov	r16,r9
    df4c:	0011883a 	mov	r8,zero
    df50:	0005883a 	mov	r2,zero
    df54:	003eda06 	br	dac0 <__alt_data_end+0xff00dac0>
    df58:	0101ffc4 	movi	r4,2047
    df5c:	49003b26 	beq	r9,r4,e04c <__subdf3+0x7b4>
    df60:	0085c83a 	sub	r2,zero,r2
    df64:	18c02034 	orhi	r3,r3,128
    df68:	01000e04 	movi	r4,56
    df6c:	20806e16 	blt	r4,r2,e128 <__subdf3+0x890>
    df70:	010007c4 	movi	r4,31
    df74:	20807716 	blt	r4,r2,e154 <__subdf3+0x8bc>
    df78:	01000804 	movi	r4,32
    df7c:	2089c83a 	sub	r4,r4,r2
    df80:	1914983a 	sll	r10,r3,r4
    df84:	8890d83a 	srl	r8,r17,r2
    df88:	8908983a 	sll	r4,r17,r4
    df8c:	1884d83a 	srl	r2,r3,r2
    df90:	5222b03a 	or	r17,r10,r8
    df94:	2006c03a 	cmpne	r3,r4,zero
    df98:	88e2b03a 	or	r17,r17,r3
    df9c:	89a3883a 	add	r17,r17,r6
    dfa0:	1145883a 	add	r2,r2,r5
    dfa4:	898d803a 	cmpltu	r6,r17,r6
    dfa8:	3087883a 	add	r3,r6,r2
    dfac:	4821883a 	mov	r16,r9
    dfb0:	003ed906 	br	db18 <__alt_data_end+0xff00db18>
    dfb4:	2984b03a 	or	r2,r5,r6
    dfb8:	10004226 	beq	r2,zero,e0c4 <__subdf3+0x82c>
    dfbc:	1808d0fa 	srli	r4,r3,3
    dfc0:	8822d0fa 	srli	r17,r17,3
    dfc4:	1806977a 	slli	r3,r3,29
    dfc8:	2080022c 	andhi	r2,r4,8
    dfcc:	1c62b03a 	or	r17,r3,r17
    dfd0:	10000826 	beq	r2,zero,dff4 <__subdf3+0x75c>
    dfd4:	2812d0fa 	srli	r9,r5,3
    dfd8:	4880022c 	andhi	r2,r9,8
    dfdc:	1000051e 	bne	r2,zero,dff4 <__subdf3+0x75c>
    dfe0:	300cd0fa 	srli	r6,r6,3
    dfe4:	2804977a 	slli	r2,r5,29
    dfe8:	4809883a 	mov	r4,r9
    dfec:	3825883a 	mov	r18,r7
    dff0:	11a2b03a 	or	r17,r2,r6
    dff4:	8806d77a 	srli	r3,r17,29
    dff8:	200890fa 	slli	r4,r4,3
    dffc:	882290fa 	slli	r17,r17,3
    e000:	0401ffc4 	movi	r16,2047
    e004:	1906b03a 	or	r3,r3,r4
    e008:	003e4406 	br	d91c <__alt_data_end+0xff00d91c>
    e00c:	2984b03a 	or	r2,r5,r6
    e010:	103e4226 	beq	r2,zero,d91c <__alt_data_end+0xff00d91c>
    e014:	8989c83a 	sub	r4,r17,r6
    e018:	8911803a 	cmpltu	r8,r17,r4
    e01c:	1945c83a 	sub	r2,r3,r5
    e020:	1205c83a 	sub	r2,r2,r8
    e024:	1200202c 	andhi	r8,r2,128
    e028:	403e9a26 	beq	r8,zero,da94 <__alt_data_end+0xff00da94>
    e02c:	3463c83a 	sub	r17,r6,r17
    e030:	28c5c83a 	sub	r2,r5,r3
    e034:	344d803a 	cmpltu	r6,r6,r17
    e038:	1187c83a 	sub	r3,r2,r6
    e03c:	3825883a 	mov	r18,r7
    e040:	003e3606 	br	d91c <__alt_data_end+0xff00d91c>
    e044:	0101ffc4 	movi	r4,2047
    e048:	493fc71e 	bne	r9,r4,df68 <__alt_data_end+0xff00df68>
    e04c:	2807883a 	mov	r3,r5
    e050:	3023883a 	mov	r17,r6
    e054:	4821883a 	mov	r16,r9
    e058:	003e3006 	br	d91c <__alt_data_end+0xff00d91c>
    e05c:	10003626 	beq	r2,zero,e138 <__subdf3+0x8a0>
    e060:	2984b03a 	or	r2,r5,r6
    e064:	10001726 	beq	r2,zero,e0c4 <__subdf3+0x82c>
    e068:	1808d0fa 	srli	r4,r3,3
    e06c:	8822d0fa 	srli	r17,r17,3
    e070:	1806977a 	slli	r3,r3,29
    e074:	2080022c 	andhi	r2,r4,8
    e078:	1c62b03a 	or	r17,r3,r17
    e07c:	10000726 	beq	r2,zero,e09c <__subdf3+0x804>
    e080:	2812d0fa 	srli	r9,r5,3
    e084:	4880022c 	andhi	r2,r9,8
    e088:	1000041e 	bne	r2,zero,e09c <__subdf3+0x804>
    e08c:	300cd0fa 	srli	r6,r6,3
    e090:	2804977a 	slli	r2,r5,29
    e094:	4809883a 	mov	r4,r9
    e098:	11a2b03a 	or	r17,r2,r6
    e09c:	8806d77a 	srli	r3,r17,29
    e0a0:	200890fa 	slli	r4,r4,3
    e0a4:	882290fa 	slli	r17,r17,3
    e0a8:	3825883a 	mov	r18,r7
    e0ac:	1906b03a 	or	r3,r3,r4
    e0b0:	0401ffc4 	movi	r16,2047
    e0b4:	003e1906 	br	d91c <__alt_data_end+0xff00d91c>
    e0b8:	000b883a 	mov	r5,zero
    e0bc:	0005883a 	mov	r2,zero
    e0c0:	003e2e06 	br	d97c <__alt_data_end+0xff00d97c>
    e0c4:	0401ffc4 	movi	r16,2047
    e0c8:	003e1406 	br	d91c <__alt_data_end+0xff00d91c>
    e0cc:	0005883a 	mov	r2,zero
    e0d0:	003f7506 	br	dea8 <__alt_data_end+0xff00dea8>
    e0d4:	0005883a 	mov	r2,zero
    e0d8:	0009883a 	mov	r4,zero
    e0dc:	003e7806 	br	dac0 <__alt_data_end+0xff00dac0>
    e0e0:	123ff804 	addi	r8,r2,-32
    e0e4:	01000804 	movi	r4,32
    e0e8:	1a10d83a 	srl	r8,r3,r8
    e0ec:	11002526 	beq	r2,r4,e184 <__subdf3+0x8ec>
    e0f0:	01001004 	movi	r4,64
    e0f4:	2085c83a 	sub	r2,r4,r2
    e0f8:	1884983a 	sll	r2,r3,r2
    e0fc:	1444b03a 	or	r2,r2,r17
    e100:	1004c03a 	cmpne	r2,r2,zero
    e104:	40a2b03a 	or	r17,r8,r2
    e108:	0005883a 	mov	r2,zero
    e10c:	003f1606 	br	dd68 <__alt_data_end+0xff00dd68>
    e110:	02000434 	movhi	r8,16
    e114:	0009883a 	mov	r4,zero
    e118:	423fffc4 	addi	r8,r8,-1
    e11c:	00bfffc4 	movi	r2,-1
    e120:	0401ffc4 	movi	r16,2047
    e124:	003e6606 	br	dac0 <__alt_data_end+0xff00dac0>
    e128:	1c62b03a 	or	r17,r3,r17
    e12c:	8822c03a 	cmpne	r17,r17,zero
    e130:	0005883a 	mov	r2,zero
    e134:	003f9906 	br	df9c <__alt_data_end+0xff00df9c>
    e138:	2807883a 	mov	r3,r5
    e13c:	3023883a 	mov	r17,r6
    e140:	0401ffc4 	movi	r16,2047
    e144:	003df506 	br	d91c <__alt_data_end+0xff00d91c>
    e148:	2807883a 	mov	r3,r5
    e14c:	3023883a 	mov	r17,r6
    e150:	003df206 	br	d91c <__alt_data_end+0xff00d91c>
    e154:	123ff804 	addi	r8,r2,-32
    e158:	01000804 	movi	r4,32
    e15c:	1a10d83a 	srl	r8,r3,r8
    e160:	11000a26 	beq	r2,r4,e18c <__subdf3+0x8f4>
    e164:	01001004 	movi	r4,64
    e168:	2085c83a 	sub	r2,r4,r2
    e16c:	1884983a 	sll	r2,r3,r2
    e170:	1444b03a 	or	r2,r2,r17
    e174:	1004c03a 	cmpne	r2,r2,zero
    e178:	40a2b03a 	or	r17,r8,r2
    e17c:	0005883a 	mov	r2,zero
    e180:	003f8606 	br	df9c <__alt_data_end+0xff00df9c>
    e184:	0005883a 	mov	r2,zero
    e188:	003fdc06 	br	e0fc <__alt_data_end+0xff00e0fc>
    e18c:	0005883a 	mov	r2,zero
    e190:	003ff706 	br	e170 <__alt_data_end+0xff00e170>

0000e194 <__fixdfsi>:
    e194:	280cd53a 	srli	r6,r5,20
    e198:	00c00434 	movhi	r3,16
    e19c:	18ffffc4 	addi	r3,r3,-1
    e1a0:	3181ffcc 	andi	r6,r6,2047
    e1a4:	01c0ff84 	movi	r7,1022
    e1a8:	28c6703a 	and	r3,r5,r3
    e1ac:	280ad7fa 	srli	r5,r5,31
    e1b0:	3980120e 	bge	r7,r6,e1fc <__fixdfsi+0x68>
    e1b4:	00810744 	movi	r2,1053
    e1b8:	11800c16 	blt	r2,r6,e1ec <__fixdfsi+0x58>
    e1bc:	00810cc4 	movi	r2,1075
    e1c0:	1185c83a 	sub	r2,r2,r6
    e1c4:	01c007c4 	movi	r7,31
    e1c8:	18c00434 	orhi	r3,r3,16
    e1cc:	38800d16 	blt	r7,r2,e204 <__fixdfsi+0x70>
    e1d0:	31befb44 	addi	r6,r6,-1043
    e1d4:	2084d83a 	srl	r2,r4,r2
    e1d8:	1986983a 	sll	r3,r3,r6
    e1dc:	1884b03a 	or	r2,r3,r2
    e1e0:	28000726 	beq	r5,zero,e200 <__fixdfsi+0x6c>
    e1e4:	0085c83a 	sub	r2,zero,r2
    e1e8:	f800283a 	ret
    e1ec:	00a00034 	movhi	r2,32768
    e1f0:	10bfffc4 	addi	r2,r2,-1
    e1f4:	2885883a 	add	r2,r5,r2
    e1f8:	f800283a 	ret
    e1fc:	0005883a 	mov	r2,zero
    e200:	f800283a 	ret
    e204:	008104c4 	movi	r2,1043
    e208:	1185c83a 	sub	r2,r2,r6
    e20c:	1884d83a 	srl	r2,r3,r2
    e210:	003ff306 	br	e1e0 <__alt_data_end+0xff00e1e0>

0000e214 <__floatsidf>:
    e214:	defffd04 	addi	sp,sp,-12
    e218:	dfc00215 	stw	ra,8(sp)
    e21c:	dc400115 	stw	r17,4(sp)
    e220:	dc000015 	stw	r16,0(sp)
    e224:	20002b26 	beq	r4,zero,e2d4 <__floatsidf+0xc0>
    e228:	2023883a 	mov	r17,r4
    e22c:	2020d7fa 	srli	r16,r4,31
    e230:	20002d16 	blt	r4,zero,e2e8 <__floatsidf+0xd4>
    e234:	8809883a 	mov	r4,r17
    e238:	000e3980 	call	e398 <__clzsi2>
    e23c:	01410784 	movi	r5,1054
    e240:	288bc83a 	sub	r5,r5,r2
    e244:	01010cc4 	movi	r4,1075
    e248:	2149c83a 	sub	r4,r4,r5
    e24c:	00c007c4 	movi	r3,31
    e250:	1900160e 	bge	r3,r4,e2ac <__floatsidf+0x98>
    e254:	00c104c4 	movi	r3,1043
    e258:	1947c83a 	sub	r3,r3,r5
    e25c:	88c6983a 	sll	r3,r17,r3
    e260:	00800434 	movhi	r2,16
    e264:	10bfffc4 	addi	r2,r2,-1
    e268:	1886703a 	and	r3,r3,r2
    e26c:	2941ffcc 	andi	r5,r5,2047
    e270:	800d883a 	mov	r6,r16
    e274:	0005883a 	mov	r2,zero
    e278:	280a953a 	slli	r5,r5,20
    e27c:	31803fcc 	andi	r6,r6,255
    e280:	01000434 	movhi	r4,16
    e284:	300c97fa 	slli	r6,r6,31
    e288:	213fffc4 	addi	r4,r4,-1
    e28c:	1906703a 	and	r3,r3,r4
    e290:	1946b03a 	or	r3,r3,r5
    e294:	1986b03a 	or	r3,r3,r6
    e298:	dfc00217 	ldw	ra,8(sp)
    e29c:	dc400117 	ldw	r17,4(sp)
    e2a0:	dc000017 	ldw	r16,0(sp)
    e2a4:	dec00304 	addi	sp,sp,12
    e2a8:	f800283a 	ret
    e2ac:	00c002c4 	movi	r3,11
    e2b0:	1887c83a 	sub	r3,r3,r2
    e2b4:	88c6d83a 	srl	r3,r17,r3
    e2b8:	8904983a 	sll	r2,r17,r4
    e2bc:	01000434 	movhi	r4,16
    e2c0:	213fffc4 	addi	r4,r4,-1
    e2c4:	2941ffcc 	andi	r5,r5,2047
    e2c8:	1906703a 	and	r3,r3,r4
    e2cc:	800d883a 	mov	r6,r16
    e2d0:	003fe906 	br	e278 <__alt_data_end+0xff00e278>
    e2d4:	000d883a 	mov	r6,zero
    e2d8:	000b883a 	mov	r5,zero
    e2dc:	0007883a 	mov	r3,zero
    e2e0:	0005883a 	mov	r2,zero
    e2e4:	003fe406 	br	e278 <__alt_data_end+0xff00e278>
    e2e8:	0123c83a 	sub	r17,zero,r4
    e2ec:	003fd106 	br	e234 <__alt_data_end+0xff00e234>

0000e2f0 <__floatunsidf>:
    e2f0:	defffe04 	addi	sp,sp,-8
    e2f4:	dc000015 	stw	r16,0(sp)
    e2f8:	dfc00115 	stw	ra,4(sp)
    e2fc:	2021883a 	mov	r16,r4
    e300:	20002226 	beq	r4,zero,e38c <__floatunsidf+0x9c>
    e304:	000e3980 	call	e398 <__clzsi2>
    e308:	01010784 	movi	r4,1054
    e30c:	2089c83a 	sub	r4,r4,r2
    e310:	01810cc4 	movi	r6,1075
    e314:	310dc83a 	sub	r6,r6,r4
    e318:	00c007c4 	movi	r3,31
    e31c:	1980120e 	bge	r3,r6,e368 <__floatunsidf+0x78>
    e320:	00c104c4 	movi	r3,1043
    e324:	1907c83a 	sub	r3,r3,r4
    e328:	80ca983a 	sll	r5,r16,r3
    e32c:	00800434 	movhi	r2,16
    e330:	10bfffc4 	addi	r2,r2,-1
    e334:	2101ffcc 	andi	r4,r4,2047
    e338:	0021883a 	mov	r16,zero
    e33c:	288a703a 	and	r5,r5,r2
    e340:	2008953a 	slli	r4,r4,20
    e344:	00c00434 	movhi	r3,16
    e348:	18ffffc4 	addi	r3,r3,-1
    e34c:	28c6703a 	and	r3,r5,r3
    e350:	8005883a 	mov	r2,r16
    e354:	1906b03a 	or	r3,r3,r4
    e358:	dfc00117 	ldw	ra,4(sp)
    e35c:	dc000017 	ldw	r16,0(sp)
    e360:	dec00204 	addi	sp,sp,8
    e364:	f800283a 	ret
    e368:	00c002c4 	movi	r3,11
    e36c:	188bc83a 	sub	r5,r3,r2
    e370:	814ad83a 	srl	r5,r16,r5
    e374:	00c00434 	movhi	r3,16
    e378:	18ffffc4 	addi	r3,r3,-1
    e37c:	81a0983a 	sll	r16,r16,r6
    e380:	2101ffcc 	andi	r4,r4,2047
    e384:	28ca703a 	and	r5,r5,r3
    e388:	003fed06 	br	e340 <__alt_data_end+0xff00e340>
    e38c:	0009883a 	mov	r4,zero
    e390:	000b883a 	mov	r5,zero
    e394:	003fea06 	br	e340 <__alt_data_end+0xff00e340>

0000e398 <__clzsi2>:
    e398:	00bfffd4 	movui	r2,65535
    e39c:	11000536 	bltu	r2,r4,e3b4 <__clzsi2+0x1c>
    e3a0:	00803fc4 	movi	r2,255
    e3a4:	11000f36 	bltu	r2,r4,e3e4 <__clzsi2+0x4c>
    e3a8:	00800804 	movi	r2,32
    e3ac:	0007883a 	mov	r3,zero
    e3b0:	00000506 	br	e3c8 <__clzsi2+0x30>
    e3b4:	00804034 	movhi	r2,256
    e3b8:	10bfffc4 	addi	r2,r2,-1
    e3bc:	11000c2e 	bgeu	r2,r4,e3f0 <__clzsi2+0x58>
    e3c0:	00800204 	movi	r2,8
    e3c4:	00c00604 	movi	r3,24
    e3c8:	20c8d83a 	srl	r4,r4,r3
    e3cc:	00c00074 	movhi	r3,1
    e3d0:	18c53304 	addi	r3,r3,5324
    e3d4:	1909883a 	add	r4,r3,r4
    e3d8:	20c00003 	ldbu	r3,0(r4)
    e3dc:	10c5c83a 	sub	r2,r2,r3
    e3e0:	f800283a 	ret
    e3e4:	00800604 	movi	r2,24
    e3e8:	00c00204 	movi	r3,8
    e3ec:	003ff606 	br	e3c8 <__alt_data_end+0xff00e3c8>
    e3f0:	00800404 	movi	r2,16
    e3f4:	1007883a 	mov	r3,r2
    e3f8:	003ff306 	br	e3c8 <__alt_data_end+0xff00e3c8>

0000e3fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e3fc:	defffe04 	addi	sp,sp,-8
    e400:	dfc00115 	stw	ra,4(sp)
    e404:	df000015 	stw	fp,0(sp)
    e408:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e40c:	d0a00b17 	ldw	r2,-32724(gp)
    e410:	10000326 	beq	r2,zero,e420 <alt_get_errno+0x24>
    e414:	d0a00b17 	ldw	r2,-32724(gp)
    e418:	103ee83a 	callr	r2
    e41c:	00000106 	br	e424 <alt_get_errno+0x28>
    e420:	d0a6d804 	addi	r2,gp,-25760
}
    e424:	e037883a 	mov	sp,fp
    e428:	dfc00117 	ldw	ra,4(sp)
    e42c:	df000017 	ldw	fp,0(sp)
    e430:	dec00204 	addi	sp,sp,8
    e434:	f800283a 	ret

0000e438 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    e438:	defffb04 	addi	sp,sp,-20
    e43c:	dfc00415 	stw	ra,16(sp)
    e440:	df000315 	stw	fp,12(sp)
    e444:	df000304 	addi	fp,sp,12
    e448:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    e44c:	e0bfff17 	ldw	r2,-4(fp)
    e450:	10000616 	blt	r2,zero,e46c <close+0x34>
    e454:	e0bfff17 	ldw	r2,-4(fp)
    e458:	10c00324 	muli	r3,r2,12
    e45c:	00800074 	movhi	r2,1
    e460:	1087b104 	addi	r2,r2,7876
    e464:	1885883a 	add	r2,r3,r2
    e468:	00000106 	br	e470 <close+0x38>
    e46c:	0005883a 	mov	r2,zero
    e470:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    e474:	e0bffd17 	ldw	r2,-12(fp)
    e478:	10001926 	beq	r2,zero,e4e0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e47c:	e0bffd17 	ldw	r2,-12(fp)
    e480:	10800017 	ldw	r2,0(r2)
    e484:	10800417 	ldw	r2,16(r2)
    e488:	10000626 	beq	r2,zero,e4a4 <close+0x6c>
    e48c:	e0bffd17 	ldw	r2,-12(fp)
    e490:	10800017 	ldw	r2,0(r2)
    e494:	10800417 	ldw	r2,16(r2)
    e498:	e13ffd17 	ldw	r4,-12(fp)
    e49c:	103ee83a 	callr	r2
    e4a0:	00000106 	br	e4a8 <close+0x70>
    e4a4:	0005883a 	mov	r2,zero
    e4a8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e4ac:	e13fff17 	ldw	r4,-4(fp)
    e4b0:	000eaf80 	call	eaf8 <alt_release_fd>
    if (rval < 0)
    e4b4:	e0bffe17 	ldw	r2,-8(fp)
    e4b8:	1000070e 	bge	r2,zero,e4d8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    e4bc:	000e3fc0 	call	e3fc <alt_get_errno>
    e4c0:	1007883a 	mov	r3,r2
    e4c4:	e0bffe17 	ldw	r2,-8(fp)
    e4c8:	0085c83a 	sub	r2,zero,r2
    e4cc:	18800015 	stw	r2,0(r3)
      return -1;
    e4d0:	00bfffc4 	movi	r2,-1
    e4d4:	00000706 	br	e4f4 <close+0xbc>
    }
    return 0;
    e4d8:	0005883a 	mov	r2,zero
    e4dc:	00000506 	br	e4f4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e4e0:	000e3fc0 	call	e3fc <alt_get_errno>
    e4e4:	1007883a 	mov	r3,r2
    e4e8:	00801444 	movi	r2,81
    e4ec:	18800015 	stw	r2,0(r3)
    return -1;
    e4f0:	00bfffc4 	movi	r2,-1
  }
}
    e4f4:	e037883a 	mov	sp,fp
    e4f8:	dfc00117 	ldw	ra,4(sp)
    e4fc:	df000017 	ldw	fp,0(sp)
    e500:	dec00204 	addi	sp,sp,8
    e504:	f800283a 	ret

0000e508 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    e508:	defffc04 	addi	sp,sp,-16
    e50c:	df000315 	stw	fp,12(sp)
    e510:	df000304 	addi	fp,sp,12
    e514:	e13ffd15 	stw	r4,-12(fp)
    e518:	e17ffe15 	stw	r5,-8(fp)
    e51c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    e520:	e0bfff17 	ldw	r2,-4(fp)
}
    e524:	e037883a 	mov	sp,fp
    e528:	df000017 	ldw	fp,0(sp)
    e52c:	dec00104 	addi	sp,sp,4
    e530:	f800283a 	ret

0000e534 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e534:	defffe04 	addi	sp,sp,-8
    e538:	dfc00115 	stw	ra,4(sp)
    e53c:	df000015 	stw	fp,0(sp)
    e540:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e544:	d0a00b17 	ldw	r2,-32724(gp)
    e548:	10000326 	beq	r2,zero,e558 <alt_get_errno+0x24>
    e54c:	d0a00b17 	ldw	r2,-32724(gp)
    e550:	103ee83a 	callr	r2
    e554:	00000106 	br	e55c <alt_get_errno+0x28>
    e558:	d0a6d804 	addi	r2,gp,-25760
}
    e55c:	e037883a 	mov	sp,fp
    e560:	dfc00117 	ldw	ra,4(sp)
    e564:	df000017 	ldw	fp,0(sp)
    e568:	dec00204 	addi	sp,sp,8
    e56c:	f800283a 	ret

0000e570 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    e570:	defffb04 	addi	sp,sp,-20
    e574:	dfc00415 	stw	ra,16(sp)
    e578:	df000315 	stw	fp,12(sp)
    e57c:	df000304 	addi	fp,sp,12
    e580:	e13ffe15 	stw	r4,-8(fp)
    e584:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e588:	e0bffe17 	ldw	r2,-8(fp)
    e58c:	10000616 	blt	r2,zero,e5a8 <fstat+0x38>
    e590:	e0bffe17 	ldw	r2,-8(fp)
    e594:	10c00324 	muli	r3,r2,12
    e598:	00800074 	movhi	r2,1
    e59c:	1087b104 	addi	r2,r2,7876
    e5a0:	1885883a 	add	r2,r3,r2
    e5a4:	00000106 	br	e5ac <fstat+0x3c>
    e5a8:	0005883a 	mov	r2,zero
    e5ac:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    e5b0:	e0bffd17 	ldw	r2,-12(fp)
    e5b4:	10001026 	beq	r2,zero,e5f8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e5b8:	e0bffd17 	ldw	r2,-12(fp)
    e5bc:	10800017 	ldw	r2,0(r2)
    e5c0:	10800817 	ldw	r2,32(r2)
    e5c4:	10000726 	beq	r2,zero,e5e4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    e5c8:	e0bffd17 	ldw	r2,-12(fp)
    e5cc:	10800017 	ldw	r2,0(r2)
    e5d0:	10800817 	ldw	r2,32(r2)
    e5d4:	e17fff17 	ldw	r5,-4(fp)
    e5d8:	e13ffd17 	ldw	r4,-12(fp)
    e5dc:	103ee83a 	callr	r2
    e5e0:	00000a06 	br	e60c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    e5e4:	e0bfff17 	ldw	r2,-4(fp)
    e5e8:	00c80004 	movi	r3,8192
    e5ec:	10c00115 	stw	r3,4(r2)
      return 0;
    e5f0:	0005883a 	mov	r2,zero
    e5f4:	00000506 	br	e60c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e5f8:	000e5340 	call	e534 <alt_get_errno>
    e5fc:	1007883a 	mov	r3,r2
    e600:	00801444 	movi	r2,81
    e604:	18800015 	stw	r2,0(r3)
    return -1;
    e608:	00bfffc4 	movi	r2,-1
  }
}
    e60c:	e037883a 	mov	sp,fp
    e610:	dfc00117 	ldw	ra,4(sp)
    e614:	df000017 	ldw	fp,0(sp)
    e618:	dec00204 	addi	sp,sp,8
    e61c:	f800283a 	ret

0000e620 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e620:	defffe04 	addi	sp,sp,-8
    e624:	dfc00115 	stw	ra,4(sp)
    e628:	df000015 	stw	fp,0(sp)
    e62c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e630:	d0a00b17 	ldw	r2,-32724(gp)
    e634:	10000326 	beq	r2,zero,e644 <alt_get_errno+0x24>
    e638:	d0a00b17 	ldw	r2,-32724(gp)
    e63c:	103ee83a 	callr	r2
    e640:	00000106 	br	e648 <alt_get_errno+0x28>
    e644:	d0a6d804 	addi	r2,gp,-25760
}
    e648:	e037883a 	mov	sp,fp
    e64c:	dfc00117 	ldw	ra,4(sp)
    e650:	df000017 	ldw	fp,0(sp)
    e654:	dec00204 	addi	sp,sp,8
    e658:	f800283a 	ret

0000e65c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    e65c:	deffed04 	addi	sp,sp,-76
    e660:	dfc01215 	stw	ra,72(sp)
    e664:	df001115 	stw	fp,68(sp)
    e668:	df001104 	addi	fp,sp,68
    e66c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e670:	e0bfff17 	ldw	r2,-4(fp)
    e674:	10000616 	blt	r2,zero,e690 <isatty+0x34>
    e678:	e0bfff17 	ldw	r2,-4(fp)
    e67c:	10c00324 	muli	r3,r2,12
    e680:	00800074 	movhi	r2,1
    e684:	1087b104 	addi	r2,r2,7876
    e688:	1885883a 	add	r2,r3,r2
    e68c:	00000106 	br	e694 <isatty+0x38>
    e690:	0005883a 	mov	r2,zero
    e694:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    e698:	e0bfef17 	ldw	r2,-68(fp)
    e69c:	10000e26 	beq	r2,zero,e6d8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    e6a0:	e0bfef17 	ldw	r2,-68(fp)
    e6a4:	10800017 	ldw	r2,0(r2)
    e6a8:	10800817 	ldw	r2,32(r2)
    e6ac:	1000021e 	bne	r2,zero,e6b8 <isatty+0x5c>
    {
      return 1;
    e6b0:	00800044 	movi	r2,1
    e6b4:	00000d06 	br	e6ec <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    e6b8:	e0bff004 	addi	r2,fp,-64
    e6bc:	100b883a 	mov	r5,r2
    e6c0:	e13fff17 	ldw	r4,-4(fp)
    e6c4:	000e5700 	call	e570 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    e6c8:	e0bff117 	ldw	r2,-60(fp)
    e6cc:	10880020 	cmpeqi	r2,r2,8192
    e6d0:	10803fcc 	andi	r2,r2,255
    e6d4:	00000506 	br	e6ec <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e6d8:	000e6200 	call	e620 <alt_get_errno>
    e6dc:	1007883a 	mov	r3,r2
    e6e0:	00801444 	movi	r2,81
    e6e4:	18800015 	stw	r2,0(r3)
    return 0;
    e6e8:	0005883a 	mov	r2,zero
  }
}
    e6ec:	e037883a 	mov	sp,fp
    e6f0:	dfc00117 	ldw	ra,4(sp)
    e6f4:	df000017 	ldw	fp,0(sp)
    e6f8:	dec00204 	addi	sp,sp,8
    e6fc:	f800283a 	ret

0000e700 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    e700:	defffc04 	addi	sp,sp,-16
    e704:	df000315 	stw	fp,12(sp)
    e708:	df000304 	addi	fp,sp,12
    e70c:	e13ffd15 	stw	r4,-12(fp)
    e710:	e17ffe15 	stw	r5,-8(fp)
    e714:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    e718:	e0fffe17 	ldw	r3,-8(fp)
    e71c:	e0bffd17 	ldw	r2,-12(fp)
    e720:	18800c26 	beq	r3,r2,e754 <alt_load_section+0x54>
  {
    while( to != end )
    e724:	00000806 	br	e748 <alt_load_section+0x48>
    {
      *to++ = *from++;
    e728:	e0bffe17 	ldw	r2,-8(fp)
    e72c:	10c00104 	addi	r3,r2,4
    e730:	e0fffe15 	stw	r3,-8(fp)
    e734:	e0fffd17 	ldw	r3,-12(fp)
    e738:	19000104 	addi	r4,r3,4
    e73c:	e13ffd15 	stw	r4,-12(fp)
    e740:	18c00017 	ldw	r3,0(r3)
    e744:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    e748:	e0fffe17 	ldw	r3,-8(fp)
    e74c:	e0bfff17 	ldw	r2,-4(fp)
    e750:	18bff51e 	bne	r3,r2,e728 <__alt_data_end+0xff00e728>
    {
      *to++ = *from++;
    }
  }
}
    e754:	0001883a 	nop
    e758:	e037883a 	mov	sp,fp
    e75c:	df000017 	ldw	fp,0(sp)
    e760:	dec00104 	addi	sp,sp,4
    e764:	f800283a 	ret

0000e768 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    e768:	defffe04 	addi	sp,sp,-8
    e76c:	dfc00115 	stw	ra,4(sp)
    e770:	df000015 	stw	fp,0(sp)
    e774:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    e778:	01800074 	movhi	r6,1
    e77c:	318c3904 	addi	r6,r6,12516
    e780:	01400074 	movhi	r5,1
    e784:	29457e04 	addi	r5,r5,5624
    e788:	01000074 	movhi	r4,1
    e78c:	210c3904 	addi	r4,r4,12516
    e790:	000e7000 	call	e700 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    e794:	01800034 	movhi	r6,0
    e798:	31809104 	addi	r6,r6,580
    e79c:	01400034 	movhi	r5,0
    e7a0:	29400804 	addi	r5,r5,32
    e7a4:	01000034 	movhi	r4,0
    e7a8:	21000804 	addi	r4,r4,32
    e7ac:	000e7000 	call	e700 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    e7b0:	01800074 	movhi	r6,1
    e7b4:	31857e04 	addi	r6,r6,5624
    e7b8:	01400074 	movhi	r5,1
    e7bc:	29439904 	addi	r5,r5,3684
    e7c0:	01000074 	movhi	r4,1
    e7c4:	21039904 	addi	r4,r4,3684
    e7c8:	000e7000 	call	e700 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    e7cc:	000fd500 	call	fd50 <alt_dcache_flush_all>
  alt_icache_flush_all();
    e7d0:	000ff380 	call	ff38 <alt_icache_flush_all>
}
    e7d4:	0001883a 	nop
    e7d8:	e037883a 	mov	sp,fp
    e7dc:	dfc00117 	ldw	ra,4(sp)
    e7e0:	df000017 	ldw	fp,0(sp)
    e7e4:	dec00204 	addi	sp,sp,8
    e7e8:	f800283a 	ret

0000e7ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e7ec:	defffe04 	addi	sp,sp,-8
    e7f0:	dfc00115 	stw	ra,4(sp)
    e7f4:	df000015 	stw	fp,0(sp)
    e7f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e7fc:	d0a00b17 	ldw	r2,-32724(gp)
    e800:	10000326 	beq	r2,zero,e810 <alt_get_errno+0x24>
    e804:	d0a00b17 	ldw	r2,-32724(gp)
    e808:	103ee83a 	callr	r2
    e80c:	00000106 	br	e814 <alt_get_errno+0x28>
    e810:	d0a6d804 	addi	r2,gp,-25760
}
    e814:	e037883a 	mov	sp,fp
    e818:	dfc00117 	ldw	ra,4(sp)
    e81c:	df000017 	ldw	fp,0(sp)
    e820:	dec00204 	addi	sp,sp,8
    e824:	f800283a 	ret

0000e828 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    e828:	defff904 	addi	sp,sp,-28
    e82c:	dfc00615 	stw	ra,24(sp)
    e830:	df000515 	stw	fp,20(sp)
    e834:	df000504 	addi	fp,sp,20
    e838:	e13ffd15 	stw	r4,-12(fp)
    e83c:	e17ffe15 	stw	r5,-8(fp)
    e840:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    e844:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e848:	e0bffd17 	ldw	r2,-12(fp)
    e84c:	10000616 	blt	r2,zero,e868 <lseek+0x40>
    e850:	e0bffd17 	ldw	r2,-12(fp)
    e854:	10c00324 	muli	r3,r2,12
    e858:	00800074 	movhi	r2,1
    e85c:	1087b104 	addi	r2,r2,7876
    e860:	1885883a 	add	r2,r3,r2
    e864:	00000106 	br	e86c <lseek+0x44>
    e868:	0005883a 	mov	r2,zero
    e86c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    e870:	e0bffc17 	ldw	r2,-16(fp)
    e874:	10001026 	beq	r2,zero,e8b8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    e878:	e0bffc17 	ldw	r2,-16(fp)
    e87c:	10800017 	ldw	r2,0(r2)
    e880:	10800717 	ldw	r2,28(r2)
    e884:	10000926 	beq	r2,zero,e8ac <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    e888:	e0bffc17 	ldw	r2,-16(fp)
    e88c:	10800017 	ldw	r2,0(r2)
    e890:	10800717 	ldw	r2,28(r2)
    e894:	e1bfff17 	ldw	r6,-4(fp)
    e898:	e17ffe17 	ldw	r5,-8(fp)
    e89c:	e13ffc17 	ldw	r4,-16(fp)
    e8a0:	103ee83a 	callr	r2
    e8a4:	e0bffb15 	stw	r2,-20(fp)
    e8a8:	00000506 	br	e8c0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    e8ac:	00bfde84 	movi	r2,-134
    e8b0:	e0bffb15 	stw	r2,-20(fp)
    e8b4:	00000206 	br	e8c0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    e8b8:	00bfebc4 	movi	r2,-81
    e8bc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    e8c0:	e0bffb17 	ldw	r2,-20(fp)
    e8c4:	1000070e 	bge	r2,zero,e8e4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    e8c8:	000e7ec0 	call	e7ec <alt_get_errno>
    e8cc:	1007883a 	mov	r3,r2
    e8d0:	e0bffb17 	ldw	r2,-20(fp)
    e8d4:	0085c83a 	sub	r2,zero,r2
    e8d8:	18800015 	stw	r2,0(r3)
    rc = -1;
    e8dc:	00bfffc4 	movi	r2,-1
    e8e0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    e8e4:	e0bffb17 	ldw	r2,-20(fp)
}
    e8e8:	e037883a 	mov	sp,fp
    e8ec:	dfc00117 	ldw	ra,4(sp)
    e8f0:	df000017 	ldw	fp,0(sp)
    e8f4:	dec00204 	addi	sp,sp,8
    e8f8:	f800283a 	ret

0000e8fc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e8fc:	defffd04 	addi	sp,sp,-12
    e900:	dfc00215 	stw	ra,8(sp)
    e904:	df000115 	stw	fp,4(sp)
    e908:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e90c:	0009883a 	mov	r4,zero
    e910:	000eda40 	call	eda4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    e914:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    e918:	000eddc0 	call	eddc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    e91c:	01800074 	movhi	r6,1
    e920:	31857604 	addi	r6,r6,5592
    e924:	01400074 	movhi	r5,1
    e928:	29457604 	addi	r5,r5,5592
    e92c:	01000074 	movhi	r4,1
    e930:	21057604 	addi	r4,r4,5592
    e934:	00102d00 	call	102d0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    e938:	000fe780 	call	fe78 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    e93c:	01000074 	movhi	r4,1
    e940:	213fb604 	addi	r4,r4,-296
    e944:	0010ad00 	call	10ad0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    e948:	d0a6dc17 	ldw	r2,-25744(gp)
    e94c:	d0e6dd17 	ldw	r3,-25740(gp)
    e950:	d126de17 	ldw	r4,-25736(gp)
    e954:	200d883a 	mov	r6,r4
    e958:	180b883a 	mov	r5,r3
    e95c:	1009883a 	mov	r4,r2
    e960:	0000f440 	call	f44 <main>
    e964:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    e968:	01000044 	movi	r4,1
    e96c:	000e4380 	call	e438 <close>
  exit (result);
    e970:	e13fff17 	ldw	r4,-4(fp)
    e974:	0010ae40 	call	10ae4 <exit>

0000e978 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    e978:	defffe04 	addi	sp,sp,-8
    e97c:	df000115 	stw	fp,4(sp)
    e980:	df000104 	addi	fp,sp,4
    e984:	e13fff15 	stw	r4,-4(fp)
}
    e988:	0001883a 	nop
    e98c:	e037883a 	mov	sp,fp
    e990:	df000017 	ldw	fp,0(sp)
    e994:	dec00104 	addi	sp,sp,4
    e998:	f800283a 	ret

0000e99c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    e99c:	defffe04 	addi	sp,sp,-8
    e9a0:	df000115 	stw	fp,4(sp)
    e9a4:	df000104 	addi	fp,sp,4
    e9a8:	e13fff15 	stw	r4,-4(fp)
}
    e9ac:	0001883a 	nop
    e9b0:	e037883a 	mov	sp,fp
    e9b4:	df000017 	ldw	fp,0(sp)
    e9b8:	dec00104 	addi	sp,sp,4
    e9bc:	f800283a 	ret

0000e9c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e9c0:	defffe04 	addi	sp,sp,-8
    e9c4:	dfc00115 	stw	ra,4(sp)
    e9c8:	df000015 	stw	fp,0(sp)
    e9cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e9d0:	d0a00b17 	ldw	r2,-32724(gp)
    e9d4:	10000326 	beq	r2,zero,e9e4 <alt_get_errno+0x24>
    e9d8:	d0a00b17 	ldw	r2,-32724(gp)
    e9dc:	103ee83a 	callr	r2
    e9e0:	00000106 	br	e9e8 <alt_get_errno+0x28>
    e9e4:	d0a6d804 	addi	r2,gp,-25760
}
    e9e8:	e037883a 	mov	sp,fp
    e9ec:	dfc00117 	ldw	ra,4(sp)
    e9f0:	df000017 	ldw	fp,0(sp)
    e9f4:	dec00204 	addi	sp,sp,8
    e9f8:	f800283a 	ret

0000e9fc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    e9fc:	defff904 	addi	sp,sp,-28
    ea00:	dfc00615 	stw	ra,24(sp)
    ea04:	df000515 	stw	fp,20(sp)
    ea08:	df000504 	addi	fp,sp,20
    ea0c:	e13ffd15 	stw	r4,-12(fp)
    ea10:	e17ffe15 	stw	r5,-8(fp)
    ea14:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ea18:	e0bffd17 	ldw	r2,-12(fp)
    ea1c:	10000616 	blt	r2,zero,ea38 <read+0x3c>
    ea20:	e0bffd17 	ldw	r2,-12(fp)
    ea24:	10c00324 	muli	r3,r2,12
    ea28:	00800074 	movhi	r2,1
    ea2c:	1087b104 	addi	r2,r2,7876
    ea30:	1885883a 	add	r2,r3,r2
    ea34:	00000106 	br	ea3c <read+0x40>
    ea38:	0005883a 	mov	r2,zero
    ea3c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    ea40:	e0bffb17 	ldw	r2,-20(fp)
    ea44:	10002226 	beq	r2,zero,ead0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ea48:	e0bffb17 	ldw	r2,-20(fp)
    ea4c:	10800217 	ldw	r2,8(r2)
    ea50:	108000cc 	andi	r2,r2,3
    ea54:	10800060 	cmpeqi	r2,r2,1
    ea58:	1000181e 	bne	r2,zero,eabc <read+0xc0>
        (fd->dev->read))
    ea5c:	e0bffb17 	ldw	r2,-20(fp)
    ea60:	10800017 	ldw	r2,0(r2)
    ea64:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ea68:	10001426 	beq	r2,zero,eabc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    ea6c:	e0bffb17 	ldw	r2,-20(fp)
    ea70:	10800017 	ldw	r2,0(r2)
    ea74:	10800517 	ldw	r2,20(r2)
    ea78:	e0ffff17 	ldw	r3,-4(fp)
    ea7c:	180d883a 	mov	r6,r3
    ea80:	e17ffe17 	ldw	r5,-8(fp)
    ea84:	e13ffb17 	ldw	r4,-20(fp)
    ea88:	103ee83a 	callr	r2
    ea8c:	e0bffc15 	stw	r2,-16(fp)
    ea90:	e0bffc17 	ldw	r2,-16(fp)
    ea94:	1000070e 	bge	r2,zero,eab4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    ea98:	000e9c00 	call	e9c0 <alt_get_errno>
    ea9c:	1007883a 	mov	r3,r2
    eaa0:	e0bffc17 	ldw	r2,-16(fp)
    eaa4:	0085c83a 	sub	r2,zero,r2
    eaa8:	18800015 	stw	r2,0(r3)
          return -1;
    eaac:	00bfffc4 	movi	r2,-1
    eab0:	00000c06 	br	eae4 <read+0xe8>
        }
        return rval;
    eab4:	e0bffc17 	ldw	r2,-16(fp)
    eab8:	00000a06 	br	eae4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    eabc:	000e9c00 	call	e9c0 <alt_get_errno>
    eac0:	1007883a 	mov	r3,r2
    eac4:	00800344 	movi	r2,13
    eac8:	18800015 	stw	r2,0(r3)
    eacc:	00000406 	br	eae0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    ead0:	000e9c00 	call	e9c0 <alt_get_errno>
    ead4:	1007883a 	mov	r3,r2
    ead8:	00801444 	movi	r2,81
    eadc:	18800015 	stw	r2,0(r3)
  }
  return -1;
    eae0:	00bfffc4 	movi	r2,-1
}
    eae4:	e037883a 	mov	sp,fp
    eae8:	dfc00117 	ldw	ra,4(sp)
    eaec:	df000017 	ldw	fp,0(sp)
    eaf0:	dec00204 	addi	sp,sp,8
    eaf4:	f800283a 	ret

0000eaf8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    eaf8:	defffe04 	addi	sp,sp,-8
    eafc:	df000115 	stw	fp,4(sp)
    eb00:	df000104 	addi	fp,sp,4
    eb04:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    eb08:	e0bfff17 	ldw	r2,-4(fp)
    eb0c:	108000d0 	cmplti	r2,r2,3
    eb10:	10000d1e 	bne	r2,zero,eb48 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    eb14:	00800074 	movhi	r2,1
    eb18:	1087b104 	addi	r2,r2,7876
    eb1c:	e0ffff17 	ldw	r3,-4(fp)
    eb20:	18c00324 	muli	r3,r3,12
    eb24:	10c5883a 	add	r2,r2,r3
    eb28:	10800204 	addi	r2,r2,8
    eb2c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    eb30:	00800074 	movhi	r2,1
    eb34:	1087b104 	addi	r2,r2,7876
    eb38:	e0ffff17 	ldw	r3,-4(fp)
    eb3c:	18c00324 	muli	r3,r3,12
    eb40:	10c5883a 	add	r2,r2,r3
    eb44:	10000015 	stw	zero,0(r2)
  }
}
    eb48:	0001883a 	nop
    eb4c:	e037883a 	mov	sp,fp
    eb50:	df000017 	ldw	fp,0(sp)
    eb54:	dec00104 	addi	sp,sp,4
    eb58:	f800283a 	ret

0000eb5c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    eb5c:	defff904 	addi	sp,sp,-28
    eb60:	df000615 	stw	fp,24(sp)
    eb64:	df000604 	addi	fp,sp,24
    eb68:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eb6c:	0005303a 	rdctl	r2,status
    eb70:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eb74:	e0fffe17 	ldw	r3,-8(fp)
    eb78:	00bfff84 	movi	r2,-2
    eb7c:	1884703a 	and	r2,r3,r2
    eb80:	1001703a 	wrctl	status,r2
  
  return context;
    eb84:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    eb88:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    eb8c:	d0a00c17 	ldw	r2,-32720(gp)
    eb90:	10c000c4 	addi	r3,r2,3
    eb94:	00bfff04 	movi	r2,-4
    eb98:	1884703a 	and	r2,r3,r2
    eb9c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    eba0:	d0e00c17 	ldw	r3,-32720(gp)
    eba4:	e0bfff17 	ldw	r2,-4(fp)
    eba8:	1887883a 	add	r3,r3,r2
    ebac:	00804034 	movhi	r2,256
    ebb0:	10800004 	addi	r2,r2,0
    ebb4:	10c0062e 	bgeu	r2,r3,ebd0 <sbrk+0x74>
    ebb8:	e0bffb17 	ldw	r2,-20(fp)
    ebbc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ebc0:	e0bffa17 	ldw	r2,-24(fp)
    ebc4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    ebc8:	00bfffc4 	movi	r2,-1
    ebcc:	00000b06 	br	ebfc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    ebd0:	d0a00c17 	ldw	r2,-32720(gp)
    ebd4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    ebd8:	d0e00c17 	ldw	r3,-32720(gp)
    ebdc:	e0bfff17 	ldw	r2,-4(fp)
    ebe0:	1885883a 	add	r2,r3,r2
    ebe4:	d0a00c15 	stw	r2,-32720(gp)
    ebe8:	e0bffb17 	ldw	r2,-20(fp)
    ebec:	e0bffc15 	stw	r2,-16(fp)
    ebf0:	e0bffc17 	ldw	r2,-16(fp)
    ebf4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    ebf8:	e0bffd17 	ldw	r2,-12(fp)
} 
    ebfc:	e037883a 	mov	sp,fp
    ec00:	df000017 	ldw	fp,0(sp)
    ec04:	dec00104 	addi	sp,sp,4
    ec08:	f800283a 	ret

0000ec0c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    ec0c:	defffd04 	addi	sp,sp,-12
    ec10:	dfc00215 	stw	ra,8(sp)
    ec14:	df000115 	stw	fp,4(sp)
    ec18:	df000104 	addi	fp,sp,4
    ec1c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    ec20:	e13fff17 	ldw	r4,-4(fp)
    ec24:	000fbf80 	call	fbf8 <alt_busy_sleep>
}
    ec28:	e037883a 	mov	sp,fp
    ec2c:	dfc00117 	ldw	ra,4(sp)
    ec30:	df000017 	ldw	fp,0(sp)
    ec34:	dec00204 	addi	sp,sp,8
    ec38:	f800283a 	ret

0000ec3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ec3c:	defffe04 	addi	sp,sp,-8
    ec40:	dfc00115 	stw	ra,4(sp)
    ec44:	df000015 	stw	fp,0(sp)
    ec48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ec4c:	d0a00b17 	ldw	r2,-32724(gp)
    ec50:	10000326 	beq	r2,zero,ec60 <alt_get_errno+0x24>
    ec54:	d0a00b17 	ldw	r2,-32724(gp)
    ec58:	103ee83a 	callr	r2
    ec5c:	00000106 	br	ec64 <alt_get_errno+0x28>
    ec60:	d0a6d804 	addi	r2,gp,-25760
}
    ec64:	e037883a 	mov	sp,fp
    ec68:	dfc00117 	ldw	ra,4(sp)
    ec6c:	df000017 	ldw	fp,0(sp)
    ec70:	dec00204 	addi	sp,sp,8
    ec74:	f800283a 	ret

0000ec78 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    ec78:	defff904 	addi	sp,sp,-28
    ec7c:	dfc00615 	stw	ra,24(sp)
    ec80:	df000515 	stw	fp,20(sp)
    ec84:	df000504 	addi	fp,sp,20
    ec88:	e13ffd15 	stw	r4,-12(fp)
    ec8c:	e17ffe15 	stw	r5,-8(fp)
    ec90:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ec94:	e0bffd17 	ldw	r2,-12(fp)
    ec98:	10000616 	blt	r2,zero,ecb4 <write+0x3c>
    ec9c:	e0bffd17 	ldw	r2,-12(fp)
    eca0:	10c00324 	muli	r3,r2,12
    eca4:	00800074 	movhi	r2,1
    eca8:	1087b104 	addi	r2,r2,7876
    ecac:	1885883a 	add	r2,r3,r2
    ecb0:	00000106 	br	ecb8 <write+0x40>
    ecb4:	0005883a 	mov	r2,zero
    ecb8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    ecbc:	e0bffb17 	ldw	r2,-20(fp)
    ecc0:	10002126 	beq	r2,zero,ed48 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    ecc4:	e0bffb17 	ldw	r2,-20(fp)
    ecc8:	10800217 	ldw	r2,8(r2)
    eccc:	108000cc 	andi	r2,r2,3
    ecd0:	10001826 	beq	r2,zero,ed34 <write+0xbc>
    ecd4:	e0bffb17 	ldw	r2,-20(fp)
    ecd8:	10800017 	ldw	r2,0(r2)
    ecdc:	10800617 	ldw	r2,24(r2)
    ece0:	10001426 	beq	r2,zero,ed34 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    ece4:	e0bffb17 	ldw	r2,-20(fp)
    ece8:	10800017 	ldw	r2,0(r2)
    ecec:	10800617 	ldw	r2,24(r2)
    ecf0:	e0ffff17 	ldw	r3,-4(fp)
    ecf4:	180d883a 	mov	r6,r3
    ecf8:	e17ffe17 	ldw	r5,-8(fp)
    ecfc:	e13ffb17 	ldw	r4,-20(fp)
    ed00:	103ee83a 	callr	r2
    ed04:	e0bffc15 	stw	r2,-16(fp)
    ed08:	e0bffc17 	ldw	r2,-16(fp)
    ed0c:	1000070e 	bge	r2,zero,ed2c <write+0xb4>
      {
        ALT_ERRNO = -rval;
    ed10:	000ec3c0 	call	ec3c <alt_get_errno>
    ed14:	1007883a 	mov	r3,r2
    ed18:	e0bffc17 	ldw	r2,-16(fp)
    ed1c:	0085c83a 	sub	r2,zero,r2
    ed20:	18800015 	stw	r2,0(r3)
        return -1;
    ed24:	00bfffc4 	movi	r2,-1
    ed28:	00000c06 	br	ed5c <write+0xe4>
      }
      return rval;
    ed2c:	e0bffc17 	ldw	r2,-16(fp)
    ed30:	00000a06 	br	ed5c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    ed34:	000ec3c0 	call	ec3c <alt_get_errno>
    ed38:	1007883a 	mov	r3,r2
    ed3c:	00800344 	movi	r2,13
    ed40:	18800015 	stw	r2,0(r3)
    ed44:	00000406 	br	ed58 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    ed48:	000ec3c0 	call	ec3c <alt_get_errno>
    ed4c:	1007883a 	mov	r3,r2
    ed50:	00801444 	movi	r2,81
    ed54:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ed58:	00bfffc4 	movi	r2,-1
}
    ed5c:	e037883a 	mov	sp,fp
    ed60:	dfc00117 	ldw	ra,4(sp)
    ed64:	df000017 	ldw	fp,0(sp)
    ed68:	dec00204 	addi	sp,sp,8
    ed6c:	f800283a 	ret

0000ed70 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    ed70:	defffd04 	addi	sp,sp,-12
    ed74:	dfc00215 	stw	ra,8(sp)
    ed78:	df000115 	stw	fp,4(sp)
    ed7c:	df000104 	addi	fp,sp,4
    ed80:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    ed84:	d1600804 	addi	r5,gp,-32736
    ed88:	e13fff17 	ldw	r4,-4(fp)
    ed8c:	000fdd40 	call	fdd4 <alt_dev_llist_insert>
}
    ed90:	e037883a 	mov	sp,fp
    ed94:	dfc00117 	ldw	ra,4(sp)
    ed98:	df000017 	ldw	fp,0(sp)
    ed9c:	dec00204 	addi	sp,sp,8
    eda0:	f800283a 	ret

0000eda4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    eda4:	defffd04 	addi	sp,sp,-12
    eda8:	dfc00215 	stw	ra,8(sp)
    edac:	df000115 	stw	fp,4(sp)
    edb0:	df000104 	addi	fp,sp,4
    edb4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    edb8:	00107440 	call	10744 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    edbc:	00800044 	movi	r2,1
    edc0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    edc4:	0001883a 	nop
    edc8:	e037883a 	mov	sp,fp
    edcc:	dfc00117 	ldw	ra,4(sp)
    edd0:	df000017 	ldw	fp,0(sp)
    edd4:	dec00204 	addi	sp,sp,8
    edd8:	f800283a 	ret

0000eddc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    eddc:	defffe04 	addi	sp,sp,-8
    ede0:	dfc00115 	stw	ra,4(sp)
    ede4:	df000015 	stw	fp,0(sp)
    ede8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    edec:	00804034 	movhi	r2,256
    edf0:	10840004 	addi	r2,r2,4096
    edf4:	d0a6df15 	stw	r2,-25732(gp)
    edf8:	0080bef4 	movhi	r2,763
    edfc:	10bc2004 	addi	r2,r2,-3968
    ee00:	d0a6e015 	stw	r2,-25728(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ee04:	01c0fa04 	movi	r7,1000
    ee08:	01800104 	movi	r6,4
    ee0c:	000b883a 	mov	r5,zero
    ee10:	01004034 	movhi	r4,256
    ee14:	21040804 	addi	r4,r4,4128
    ee18:	000f9380 	call	f938 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ee1c:	000d883a 	mov	r6,zero
    ee20:	000b883a 	mov	r5,zero
    ee24:	01000074 	movhi	r4,1
    ee28:	21081b04 	addi	r4,r4,8300
    ee2c:	000efbc0 	call	efbc <altera_avalon_jtag_uart_init>
    ee30:	01000074 	movhi	r4,1
    ee34:	21081104 	addi	r4,r4,8260
    ee38:	000ed700 	call	ed70 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ee3c:	0001883a 	nop
}
    ee40:	0001883a 	nop
    ee44:	e037883a 	mov	sp,fp
    ee48:	dfc00117 	ldw	ra,4(sp)
    ee4c:	df000017 	ldw	fp,0(sp)
    ee50:	dec00204 	addi	sp,sp,8
    ee54:	f800283a 	ret

0000ee58 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    ee58:	defffa04 	addi	sp,sp,-24
    ee5c:	dfc00515 	stw	ra,20(sp)
    ee60:	df000415 	stw	fp,16(sp)
    ee64:	df000404 	addi	fp,sp,16
    ee68:	e13ffd15 	stw	r4,-12(fp)
    ee6c:	e17ffe15 	stw	r5,-8(fp)
    ee70:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ee74:	e0bffd17 	ldw	r2,-12(fp)
    ee78:	10800017 	ldw	r2,0(r2)
    ee7c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    ee80:	e0bffc17 	ldw	r2,-16(fp)
    ee84:	10c00a04 	addi	r3,r2,40
    ee88:	e0bffd17 	ldw	r2,-12(fp)
    ee8c:	10800217 	ldw	r2,8(r2)
    ee90:	100f883a 	mov	r7,r2
    ee94:	e1bfff17 	ldw	r6,-4(fp)
    ee98:	e17ffe17 	ldw	r5,-8(fp)
    ee9c:	1809883a 	mov	r4,r3
    eea0:	000f4800 	call	f480 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    eea4:	e037883a 	mov	sp,fp
    eea8:	dfc00117 	ldw	ra,4(sp)
    eeac:	df000017 	ldw	fp,0(sp)
    eeb0:	dec00204 	addi	sp,sp,8
    eeb4:	f800283a 	ret

0000eeb8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    eeb8:	defffa04 	addi	sp,sp,-24
    eebc:	dfc00515 	stw	ra,20(sp)
    eec0:	df000415 	stw	fp,16(sp)
    eec4:	df000404 	addi	fp,sp,16
    eec8:	e13ffd15 	stw	r4,-12(fp)
    eecc:	e17ffe15 	stw	r5,-8(fp)
    eed0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    eed4:	e0bffd17 	ldw	r2,-12(fp)
    eed8:	10800017 	ldw	r2,0(r2)
    eedc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    eee0:	e0bffc17 	ldw	r2,-16(fp)
    eee4:	10c00a04 	addi	r3,r2,40
    eee8:	e0bffd17 	ldw	r2,-12(fp)
    eeec:	10800217 	ldw	r2,8(r2)
    eef0:	100f883a 	mov	r7,r2
    eef4:	e1bfff17 	ldw	r6,-4(fp)
    eef8:	e17ffe17 	ldw	r5,-8(fp)
    eefc:	1809883a 	mov	r4,r3
    ef00:	000f69c0 	call	f69c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    ef04:	e037883a 	mov	sp,fp
    ef08:	dfc00117 	ldw	ra,4(sp)
    ef0c:	df000017 	ldw	fp,0(sp)
    ef10:	dec00204 	addi	sp,sp,8
    ef14:	f800283a 	ret

0000ef18 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    ef18:	defffc04 	addi	sp,sp,-16
    ef1c:	dfc00315 	stw	ra,12(sp)
    ef20:	df000215 	stw	fp,8(sp)
    ef24:	df000204 	addi	fp,sp,8
    ef28:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ef2c:	e0bfff17 	ldw	r2,-4(fp)
    ef30:	10800017 	ldw	r2,0(r2)
    ef34:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    ef38:	e0bffe17 	ldw	r2,-8(fp)
    ef3c:	10c00a04 	addi	r3,r2,40
    ef40:	e0bfff17 	ldw	r2,-4(fp)
    ef44:	10800217 	ldw	r2,8(r2)
    ef48:	100b883a 	mov	r5,r2
    ef4c:	1809883a 	mov	r4,r3
    ef50:	000f3280 	call	f328 <altera_avalon_jtag_uart_close>
}
    ef54:	e037883a 	mov	sp,fp
    ef58:	dfc00117 	ldw	ra,4(sp)
    ef5c:	df000017 	ldw	fp,0(sp)
    ef60:	dec00204 	addi	sp,sp,8
    ef64:	f800283a 	ret

0000ef68 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    ef68:	defffa04 	addi	sp,sp,-24
    ef6c:	dfc00515 	stw	ra,20(sp)
    ef70:	df000415 	stw	fp,16(sp)
    ef74:	df000404 	addi	fp,sp,16
    ef78:	e13ffd15 	stw	r4,-12(fp)
    ef7c:	e17ffe15 	stw	r5,-8(fp)
    ef80:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    ef84:	e0bffd17 	ldw	r2,-12(fp)
    ef88:	10800017 	ldw	r2,0(r2)
    ef8c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    ef90:	e0bffc17 	ldw	r2,-16(fp)
    ef94:	10800a04 	addi	r2,r2,40
    ef98:	e1bfff17 	ldw	r6,-4(fp)
    ef9c:	e17ffe17 	ldw	r5,-8(fp)
    efa0:	1009883a 	mov	r4,r2
    efa4:	000f3900 	call	f390 <altera_avalon_jtag_uart_ioctl>
}
    efa8:	e037883a 	mov	sp,fp
    efac:	dfc00117 	ldw	ra,4(sp)
    efb0:	df000017 	ldw	fp,0(sp)
    efb4:	dec00204 	addi	sp,sp,8
    efb8:	f800283a 	ret

0000efbc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    efbc:	defffa04 	addi	sp,sp,-24
    efc0:	dfc00515 	stw	ra,20(sp)
    efc4:	df000415 	stw	fp,16(sp)
    efc8:	df000404 	addi	fp,sp,16
    efcc:	e13ffd15 	stw	r4,-12(fp)
    efd0:	e17ffe15 	stw	r5,-8(fp)
    efd4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    efd8:	e0bffd17 	ldw	r2,-12(fp)
    efdc:	00c00044 	movi	r3,1
    efe0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    efe4:	e0bffd17 	ldw	r2,-12(fp)
    efe8:	10800017 	ldw	r2,0(r2)
    efec:	10800104 	addi	r2,r2,4
    eff0:	1007883a 	mov	r3,r2
    eff4:	e0bffd17 	ldw	r2,-12(fp)
    eff8:	10800817 	ldw	r2,32(r2)
    effc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    f000:	e0bffe17 	ldw	r2,-8(fp)
    f004:	e0ffff17 	ldw	r3,-4(fp)
    f008:	d8000015 	stw	zero,0(sp)
    f00c:	e1fffd17 	ldw	r7,-12(fp)
    f010:	01800074 	movhi	r6,1
    f014:	31bc1f04 	addi	r6,r6,-3972
    f018:	180b883a 	mov	r5,r3
    f01c:	1009883a 	mov	r4,r2
    f020:	000ff6c0 	call	ff6c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f024:	e0bffd17 	ldw	r2,-12(fp)
    f028:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f02c:	e0bffd17 	ldw	r2,-12(fp)
    f030:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f034:	d0e6e217 	ldw	r3,-25720(gp)
    f038:	e1fffd17 	ldw	r7,-12(fp)
    f03c:	01800074 	movhi	r6,1
    f040:	31bca204 	addi	r6,r6,-3448
    f044:	180b883a 	mov	r5,r3
    f048:	1009883a 	mov	r4,r2
    f04c:	000facc0 	call	facc <alt_alarm_start>
    f050:	1000040e 	bge	r2,zero,f064 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    f054:	e0fffd17 	ldw	r3,-12(fp)
    f058:	00a00034 	movhi	r2,32768
    f05c:	10bfffc4 	addi	r2,r2,-1
    f060:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    f064:	0001883a 	nop
    f068:	e037883a 	mov	sp,fp
    f06c:	dfc00117 	ldw	ra,4(sp)
    f070:	df000017 	ldw	fp,0(sp)
    f074:	dec00204 	addi	sp,sp,8
    f078:	f800283a 	ret

0000f07c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    f07c:	defff804 	addi	sp,sp,-32
    f080:	df000715 	stw	fp,28(sp)
    f084:	df000704 	addi	fp,sp,28
    f088:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    f08c:	e0bfff17 	ldw	r2,-4(fp)
    f090:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    f094:	e0bffb17 	ldw	r2,-20(fp)
    f098:	10800017 	ldw	r2,0(r2)
    f09c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f0a0:	e0bffc17 	ldw	r2,-16(fp)
    f0a4:	10800104 	addi	r2,r2,4
    f0a8:	10800037 	ldwio	r2,0(r2)
    f0ac:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    f0b0:	e0bffd17 	ldw	r2,-12(fp)
    f0b4:	1080c00c 	andi	r2,r2,768
    f0b8:	10006d26 	beq	r2,zero,f270 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    f0bc:	e0bffd17 	ldw	r2,-12(fp)
    f0c0:	1080400c 	andi	r2,r2,256
    f0c4:	10003526 	beq	r2,zero,f19c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    f0c8:	00800074 	movhi	r2,1
    f0cc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f0d0:	e0bffb17 	ldw	r2,-20(fp)
    f0d4:	10800a17 	ldw	r2,40(r2)
    f0d8:	10800044 	addi	r2,r2,1
    f0dc:	1081ffcc 	andi	r2,r2,2047
    f0e0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    f0e4:	e0bffb17 	ldw	r2,-20(fp)
    f0e8:	10c00b17 	ldw	r3,44(r2)
    f0ec:	e0bffe17 	ldw	r2,-8(fp)
    f0f0:	18801526 	beq	r3,r2,f148 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    f0f4:	e0bffc17 	ldw	r2,-16(fp)
    f0f8:	10800037 	ldwio	r2,0(r2)
    f0fc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    f100:	e0bff917 	ldw	r2,-28(fp)
    f104:	10a0000c 	andi	r2,r2,32768
    f108:	10001126 	beq	r2,zero,f150 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    f10c:	e0bffb17 	ldw	r2,-20(fp)
    f110:	10800a17 	ldw	r2,40(r2)
    f114:	e0fff917 	ldw	r3,-28(fp)
    f118:	1809883a 	mov	r4,r3
    f11c:	e0fffb17 	ldw	r3,-20(fp)
    f120:	1885883a 	add	r2,r3,r2
    f124:	10800e04 	addi	r2,r2,56
    f128:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f12c:	e0bffb17 	ldw	r2,-20(fp)
    f130:	10800a17 	ldw	r2,40(r2)
    f134:	10800044 	addi	r2,r2,1
    f138:	10c1ffcc 	andi	r3,r2,2047
    f13c:	e0bffb17 	ldw	r2,-20(fp)
    f140:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    f144:	003fe206 	br	f0d0 <__alt_data_end+0xff00f0d0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    f148:	0001883a 	nop
    f14c:	00000106 	br	f154 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    f150:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    f154:	e0bff917 	ldw	r2,-28(fp)
    f158:	10bfffec 	andhi	r2,r2,65535
    f15c:	10000f26 	beq	r2,zero,f19c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f160:	e0bffb17 	ldw	r2,-20(fp)
    f164:	10c00817 	ldw	r3,32(r2)
    f168:	00bfff84 	movi	r2,-2
    f16c:	1886703a 	and	r3,r3,r2
    f170:	e0bffb17 	ldw	r2,-20(fp)
    f174:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    f178:	e0bffc17 	ldw	r2,-16(fp)
    f17c:	10800104 	addi	r2,r2,4
    f180:	1007883a 	mov	r3,r2
    f184:	e0bffb17 	ldw	r2,-20(fp)
    f188:	10800817 	ldw	r2,32(r2)
    f18c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f190:	e0bffc17 	ldw	r2,-16(fp)
    f194:	10800104 	addi	r2,r2,4
    f198:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    f19c:	e0bffd17 	ldw	r2,-12(fp)
    f1a0:	1080800c 	andi	r2,r2,512
    f1a4:	103fbe26 	beq	r2,zero,f0a0 <__alt_data_end+0xff00f0a0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    f1a8:	e0bffd17 	ldw	r2,-12(fp)
    f1ac:	1004d43a 	srli	r2,r2,16
    f1b0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    f1b4:	00001406 	br	f208 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    f1b8:	e0bffc17 	ldw	r2,-16(fp)
    f1bc:	e0fffb17 	ldw	r3,-20(fp)
    f1c0:	18c00d17 	ldw	r3,52(r3)
    f1c4:	e13ffb17 	ldw	r4,-20(fp)
    f1c8:	20c7883a 	add	r3,r4,r3
    f1cc:	18c20e04 	addi	r3,r3,2104
    f1d0:	18c00003 	ldbu	r3,0(r3)
    f1d4:	18c03fcc 	andi	r3,r3,255
    f1d8:	18c0201c 	xori	r3,r3,128
    f1dc:	18ffe004 	addi	r3,r3,-128
    f1e0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f1e4:	e0bffb17 	ldw	r2,-20(fp)
    f1e8:	10800d17 	ldw	r2,52(r2)
    f1ec:	10800044 	addi	r2,r2,1
    f1f0:	10c1ffcc 	andi	r3,r2,2047
    f1f4:	e0bffb17 	ldw	r2,-20(fp)
    f1f8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    f1fc:	e0bffa17 	ldw	r2,-24(fp)
    f200:	10bfffc4 	addi	r2,r2,-1
    f204:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    f208:	e0bffa17 	ldw	r2,-24(fp)
    f20c:	10000526 	beq	r2,zero,f224 <altera_avalon_jtag_uart_irq+0x1a8>
    f210:	e0bffb17 	ldw	r2,-20(fp)
    f214:	10c00d17 	ldw	r3,52(r2)
    f218:	e0bffb17 	ldw	r2,-20(fp)
    f21c:	10800c17 	ldw	r2,48(r2)
    f220:	18bfe51e 	bne	r3,r2,f1b8 <__alt_data_end+0xff00f1b8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    f224:	e0bffa17 	ldw	r2,-24(fp)
    f228:	103f9d26 	beq	r2,zero,f0a0 <__alt_data_end+0xff00f0a0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f22c:	e0bffb17 	ldw	r2,-20(fp)
    f230:	10c00817 	ldw	r3,32(r2)
    f234:	00bfff44 	movi	r2,-3
    f238:	1886703a 	and	r3,r3,r2
    f23c:	e0bffb17 	ldw	r2,-20(fp)
    f240:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f244:	e0bffb17 	ldw	r2,-20(fp)
    f248:	10800017 	ldw	r2,0(r2)
    f24c:	10800104 	addi	r2,r2,4
    f250:	1007883a 	mov	r3,r2
    f254:	e0bffb17 	ldw	r2,-20(fp)
    f258:	10800817 	ldw	r2,32(r2)
    f25c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f260:	e0bffc17 	ldw	r2,-16(fp)
    f264:	10800104 	addi	r2,r2,4
    f268:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    f26c:	003f8c06 	br	f0a0 <__alt_data_end+0xff00f0a0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    f270:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    f274:	0001883a 	nop
    f278:	e037883a 	mov	sp,fp
    f27c:	df000017 	ldw	fp,0(sp)
    f280:	dec00104 	addi	sp,sp,4
    f284:	f800283a 	ret

0000f288 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    f288:	defff804 	addi	sp,sp,-32
    f28c:	df000715 	stw	fp,28(sp)
    f290:	df000704 	addi	fp,sp,28
    f294:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    f298:	e0bffb17 	ldw	r2,-20(fp)
    f29c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    f2a0:	e0bff917 	ldw	r2,-28(fp)
    f2a4:	10800017 	ldw	r2,0(r2)
    f2a8:	10800104 	addi	r2,r2,4
    f2ac:	10800037 	ldwio	r2,0(r2)
    f2b0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    f2b4:	e0bffa17 	ldw	r2,-24(fp)
    f2b8:	1081000c 	andi	r2,r2,1024
    f2bc:	10000b26 	beq	r2,zero,f2ec <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    f2c0:	e0bff917 	ldw	r2,-28(fp)
    f2c4:	10800017 	ldw	r2,0(r2)
    f2c8:	10800104 	addi	r2,r2,4
    f2cc:	1007883a 	mov	r3,r2
    f2d0:	e0bff917 	ldw	r2,-28(fp)
    f2d4:	10800817 	ldw	r2,32(r2)
    f2d8:	10810014 	ori	r2,r2,1024
    f2dc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    f2e0:	e0bff917 	ldw	r2,-28(fp)
    f2e4:	10000915 	stw	zero,36(r2)
    f2e8:	00000a06 	br	f314 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    f2ec:	e0bff917 	ldw	r2,-28(fp)
    f2f0:	10c00917 	ldw	r3,36(r2)
    f2f4:	00a00034 	movhi	r2,32768
    f2f8:	10bfff04 	addi	r2,r2,-4
    f2fc:	10c00536 	bltu	r2,r3,f314 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    f300:	e0bff917 	ldw	r2,-28(fp)
    f304:	10800917 	ldw	r2,36(r2)
    f308:	10c00044 	addi	r3,r2,1
    f30c:	e0bff917 	ldw	r2,-28(fp)
    f310:	10c00915 	stw	r3,36(r2)
    f314:	d0a6e217 	ldw	r2,-25720(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    f318:	e037883a 	mov	sp,fp
    f31c:	df000017 	ldw	fp,0(sp)
    f320:	dec00104 	addi	sp,sp,4
    f324:	f800283a 	ret

0000f328 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    f328:	defffd04 	addi	sp,sp,-12
    f32c:	df000215 	stw	fp,8(sp)
    f330:	df000204 	addi	fp,sp,8
    f334:	e13ffe15 	stw	r4,-8(fp)
    f338:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f33c:	00000506 	br	f354 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    f340:	e0bfff17 	ldw	r2,-4(fp)
    f344:	1090000c 	andi	r2,r2,16384
    f348:	10000226 	beq	r2,zero,f354 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    f34c:	00bffd44 	movi	r2,-11
    f350:	00000b06 	br	f380 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f354:	e0bffe17 	ldw	r2,-8(fp)
    f358:	10c00d17 	ldw	r3,52(r2)
    f35c:	e0bffe17 	ldw	r2,-8(fp)
    f360:	10800c17 	ldw	r2,48(r2)
    f364:	18800526 	beq	r3,r2,f37c <altera_avalon_jtag_uart_close+0x54>
    f368:	e0bffe17 	ldw	r2,-8(fp)
    f36c:	10c00917 	ldw	r3,36(r2)
    f370:	e0bffe17 	ldw	r2,-8(fp)
    f374:	10800117 	ldw	r2,4(r2)
    f378:	18bff136 	bltu	r3,r2,f340 <__alt_data_end+0xff00f340>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    f37c:	0005883a 	mov	r2,zero
}
    f380:	e037883a 	mov	sp,fp
    f384:	df000017 	ldw	fp,0(sp)
    f388:	dec00104 	addi	sp,sp,4
    f38c:	f800283a 	ret

0000f390 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    f390:	defffa04 	addi	sp,sp,-24
    f394:	df000515 	stw	fp,20(sp)
    f398:	df000504 	addi	fp,sp,20
    f39c:	e13ffd15 	stw	r4,-12(fp)
    f3a0:	e17ffe15 	stw	r5,-8(fp)
    f3a4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    f3a8:	00bff9c4 	movi	r2,-25
    f3ac:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    f3b0:	e0bffe17 	ldw	r2,-8(fp)
    f3b4:	10da8060 	cmpeqi	r3,r2,27137
    f3b8:	1800031e 	bne	r3,zero,f3c8 <altera_avalon_jtag_uart_ioctl+0x38>
    f3bc:	109a80a0 	cmpeqi	r2,r2,27138
    f3c0:	1000181e 	bne	r2,zero,f424 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    f3c4:	00002906 	br	f46c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    f3c8:	e0bffd17 	ldw	r2,-12(fp)
    f3cc:	10c00117 	ldw	r3,4(r2)
    f3d0:	00a00034 	movhi	r2,32768
    f3d4:	10bfffc4 	addi	r2,r2,-1
    f3d8:	18802126 	beq	r3,r2,f460 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    f3dc:	e0bfff17 	ldw	r2,-4(fp)
    f3e0:	10800017 	ldw	r2,0(r2)
    f3e4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    f3e8:	e0bffc17 	ldw	r2,-16(fp)
    f3ec:	10800090 	cmplti	r2,r2,2
    f3f0:	1000061e 	bne	r2,zero,f40c <altera_avalon_jtag_uart_ioctl+0x7c>
    f3f4:	e0fffc17 	ldw	r3,-16(fp)
    f3f8:	00a00034 	movhi	r2,32768
    f3fc:	10bfffc4 	addi	r2,r2,-1
    f400:	18800226 	beq	r3,r2,f40c <altera_avalon_jtag_uart_ioctl+0x7c>
    f404:	e0bffc17 	ldw	r2,-16(fp)
    f408:	00000206 	br	f414 <altera_avalon_jtag_uart_ioctl+0x84>
    f40c:	00a00034 	movhi	r2,32768
    f410:	10bfff84 	addi	r2,r2,-2
    f414:	e0fffd17 	ldw	r3,-12(fp)
    f418:	18800115 	stw	r2,4(r3)
      rc = 0;
    f41c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f420:	00000f06 	br	f460 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    f424:	e0bffd17 	ldw	r2,-12(fp)
    f428:	10c00117 	ldw	r3,4(r2)
    f42c:	00a00034 	movhi	r2,32768
    f430:	10bfffc4 	addi	r2,r2,-1
    f434:	18800c26 	beq	r3,r2,f468 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    f438:	e0bffd17 	ldw	r2,-12(fp)
    f43c:	10c00917 	ldw	r3,36(r2)
    f440:	e0bffd17 	ldw	r2,-12(fp)
    f444:	10800117 	ldw	r2,4(r2)
    f448:	1885803a 	cmpltu	r2,r3,r2
    f44c:	10c03fcc 	andi	r3,r2,255
    f450:	e0bfff17 	ldw	r2,-4(fp)
    f454:	10c00015 	stw	r3,0(r2)
      rc = 0;
    f458:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f45c:	00000206 	br	f468 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    f460:	0001883a 	nop
    f464:	00000106 	br	f46c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    f468:	0001883a 	nop

  default:
    break;
  }

  return rc;
    f46c:	e0bffb17 	ldw	r2,-20(fp)
}
    f470:	e037883a 	mov	sp,fp
    f474:	df000017 	ldw	fp,0(sp)
    f478:	dec00104 	addi	sp,sp,4
    f47c:	f800283a 	ret

0000f480 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    f480:	defff304 	addi	sp,sp,-52
    f484:	dfc00c15 	stw	ra,48(sp)
    f488:	df000b15 	stw	fp,44(sp)
    f48c:	df000b04 	addi	fp,sp,44
    f490:	e13ffc15 	stw	r4,-16(fp)
    f494:	e17ffd15 	stw	r5,-12(fp)
    f498:	e1bffe15 	stw	r6,-8(fp)
    f49c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    f4a0:	e0bffd17 	ldw	r2,-12(fp)
    f4a4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f4a8:	00004706 	br	f5c8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    f4ac:	e0bffc17 	ldw	r2,-16(fp)
    f4b0:	10800a17 	ldw	r2,40(r2)
    f4b4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    f4b8:	e0bffc17 	ldw	r2,-16(fp)
    f4bc:	10800b17 	ldw	r2,44(r2)
    f4c0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    f4c4:	e0fff717 	ldw	r3,-36(fp)
    f4c8:	e0bff817 	ldw	r2,-32(fp)
    f4cc:	18800536 	bltu	r3,r2,f4e4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    f4d0:	e0fff717 	ldw	r3,-36(fp)
    f4d4:	e0bff817 	ldw	r2,-32(fp)
    f4d8:	1885c83a 	sub	r2,r3,r2
    f4dc:	e0bff615 	stw	r2,-40(fp)
    f4e0:	00000406 	br	f4f4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    f4e4:	00c20004 	movi	r3,2048
    f4e8:	e0bff817 	ldw	r2,-32(fp)
    f4ec:	1885c83a 	sub	r2,r3,r2
    f4f0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    f4f4:	e0bff617 	ldw	r2,-40(fp)
    f4f8:	10001e26 	beq	r2,zero,f574 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    f4fc:	e0fffe17 	ldw	r3,-8(fp)
    f500:	e0bff617 	ldw	r2,-40(fp)
    f504:	1880022e 	bgeu	r3,r2,f510 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    f508:	e0bffe17 	ldw	r2,-8(fp)
    f50c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    f510:	e0bffc17 	ldw	r2,-16(fp)
    f514:	10c00e04 	addi	r3,r2,56
    f518:	e0bff817 	ldw	r2,-32(fp)
    f51c:	1885883a 	add	r2,r3,r2
    f520:	e1bff617 	ldw	r6,-40(fp)
    f524:	100b883a 	mov	r5,r2
    f528:	e13ff517 	ldw	r4,-44(fp)
    f52c:	00075fc0 	call	75fc <memcpy>
      ptr   += n;
    f530:	e0fff517 	ldw	r3,-44(fp)
    f534:	e0bff617 	ldw	r2,-40(fp)
    f538:	1885883a 	add	r2,r3,r2
    f53c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    f540:	e0fffe17 	ldw	r3,-8(fp)
    f544:	e0bff617 	ldw	r2,-40(fp)
    f548:	1885c83a 	sub	r2,r3,r2
    f54c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f550:	e0fff817 	ldw	r3,-32(fp)
    f554:	e0bff617 	ldw	r2,-40(fp)
    f558:	1885883a 	add	r2,r3,r2
    f55c:	10c1ffcc 	andi	r3,r2,2047
    f560:	e0bffc17 	ldw	r2,-16(fp)
    f564:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    f568:	e0bffe17 	ldw	r2,-8(fp)
    f56c:	00bfcf16 	blt	zero,r2,f4ac <__alt_data_end+0xff00f4ac>
    f570:	00000106 	br	f578 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    f574:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    f578:	e0fff517 	ldw	r3,-44(fp)
    f57c:	e0bffd17 	ldw	r2,-12(fp)
    f580:	1880141e 	bne	r3,r2,f5d4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    f584:	e0bfff17 	ldw	r2,-4(fp)
    f588:	1090000c 	andi	r2,r2,16384
    f58c:	1000131e 	bne	r2,zero,f5dc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    f590:	0001883a 	nop
    f594:	e0bffc17 	ldw	r2,-16(fp)
    f598:	10c00a17 	ldw	r3,40(r2)
    f59c:	e0bff717 	ldw	r2,-36(fp)
    f5a0:	1880051e 	bne	r3,r2,f5b8 <altera_avalon_jtag_uart_read+0x138>
    f5a4:	e0bffc17 	ldw	r2,-16(fp)
    f5a8:	10c00917 	ldw	r3,36(r2)
    f5ac:	e0bffc17 	ldw	r2,-16(fp)
    f5b0:	10800117 	ldw	r2,4(r2)
    f5b4:	18bff736 	bltu	r3,r2,f594 <__alt_data_end+0xff00f594>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    f5b8:	e0bffc17 	ldw	r2,-16(fp)
    f5bc:	10c00a17 	ldw	r3,40(r2)
    f5c0:	e0bff717 	ldw	r2,-36(fp)
    f5c4:	18800726 	beq	r3,r2,f5e4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f5c8:	e0bffe17 	ldw	r2,-8(fp)
    f5cc:	00bfb716 	blt	zero,r2,f4ac <__alt_data_end+0xff00f4ac>
    f5d0:	00000506 	br	f5e8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    f5d4:	0001883a 	nop
    f5d8:	00000306 	br	f5e8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    f5dc:	0001883a 	nop
    f5e0:	00000106 	br	f5e8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    f5e4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    f5e8:	e0fff517 	ldw	r3,-44(fp)
    f5ec:	e0bffd17 	ldw	r2,-12(fp)
    f5f0:	18801826 	beq	r3,r2,f654 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f5f4:	0005303a 	rdctl	r2,status
    f5f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f5fc:	e0fffb17 	ldw	r3,-20(fp)
    f600:	00bfff84 	movi	r2,-2
    f604:	1884703a 	and	r2,r3,r2
    f608:	1001703a 	wrctl	status,r2
  
  return context;
    f60c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    f610:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f614:	e0bffc17 	ldw	r2,-16(fp)
    f618:	10800817 	ldw	r2,32(r2)
    f61c:	10c00054 	ori	r3,r2,1
    f620:	e0bffc17 	ldw	r2,-16(fp)
    f624:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f628:	e0bffc17 	ldw	r2,-16(fp)
    f62c:	10800017 	ldw	r2,0(r2)
    f630:	10800104 	addi	r2,r2,4
    f634:	1007883a 	mov	r3,r2
    f638:	e0bffc17 	ldw	r2,-16(fp)
    f63c:	10800817 	ldw	r2,32(r2)
    f640:	18800035 	stwio	r2,0(r3)
    f644:	e0bffa17 	ldw	r2,-24(fp)
    f648:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f64c:	e0bff917 	ldw	r2,-28(fp)
    f650:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    f654:	e0fff517 	ldw	r3,-44(fp)
    f658:	e0bffd17 	ldw	r2,-12(fp)
    f65c:	18800426 	beq	r3,r2,f670 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    f660:	e0fff517 	ldw	r3,-44(fp)
    f664:	e0bffd17 	ldw	r2,-12(fp)
    f668:	1885c83a 	sub	r2,r3,r2
    f66c:	00000606 	br	f688 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    f670:	e0bfff17 	ldw	r2,-4(fp)
    f674:	1090000c 	andi	r2,r2,16384
    f678:	10000226 	beq	r2,zero,f684 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    f67c:	00bffd44 	movi	r2,-11
    f680:	00000106 	br	f688 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    f684:	00bffec4 	movi	r2,-5
}
    f688:	e037883a 	mov	sp,fp
    f68c:	dfc00117 	ldw	ra,4(sp)
    f690:	df000017 	ldw	fp,0(sp)
    f694:	dec00204 	addi	sp,sp,8
    f698:	f800283a 	ret

0000f69c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    f69c:	defff304 	addi	sp,sp,-52
    f6a0:	dfc00c15 	stw	ra,48(sp)
    f6a4:	df000b15 	stw	fp,44(sp)
    f6a8:	df000b04 	addi	fp,sp,44
    f6ac:	e13ffc15 	stw	r4,-16(fp)
    f6b0:	e17ffd15 	stw	r5,-12(fp)
    f6b4:	e1bffe15 	stw	r6,-8(fp)
    f6b8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    f6bc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    f6c0:	e0bffd17 	ldw	r2,-12(fp)
    f6c4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f6c8:	00003706 	br	f7a8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    f6cc:	e0bffc17 	ldw	r2,-16(fp)
    f6d0:	10800c17 	ldw	r2,48(r2)
    f6d4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    f6d8:	e0bffc17 	ldw	r2,-16(fp)
    f6dc:	10800d17 	ldw	r2,52(r2)
    f6e0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    f6e4:	e0fff917 	ldw	r3,-28(fp)
    f6e8:	e0bff517 	ldw	r2,-44(fp)
    f6ec:	1880062e 	bgeu	r3,r2,f708 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    f6f0:	e0fff517 	ldw	r3,-44(fp)
    f6f4:	e0bff917 	ldw	r2,-28(fp)
    f6f8:	1885c83a 	sub	r2,r3,r2
    f6fc:	10bfffc4 	addi	r2,r2,-1
    f700:	e0bff615 	stw	r2,-40(fp)
    f704:	00000b06 	br	f734 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    f708:	e0bff517 	ldw	r2,-44(fp)
    f70c:	10000526 	beq	r2,zero,f724 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    f710:	00c20004 	movi	r3,2048
    f714:	e0bff917 	ldw	r2,-28(fp)
    f718:	1885c83a 	sub	r2,r3,r2
    f71c:	e0bff615 	stw	r2,-40(fp)
    f720:	00000406 	br	f734 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    f724:	00c1ffc4 	movi	r3,2047
    f728:	e0bff917 	ldw	r2,-28(fp)
    f72c:	1885c83a 	sub	r2,r3,r2
    f730:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    f734:	e0bff617 	ldw	r2,-40(fp)
    f738:	10001e26 	beq	r2,zero,f7b4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    f73c:	e0fffe17 	ldw	r3,-8(fp)
    f740:	e0bff617 	ldw	r2,-40(fp)
    f744:	1880022e 	bgeu	r3,r2,f750 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    f748:	e0bffe17 	ldw	r2,-8(fp)
    f74c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    f750:	e0bffc17 	ldw	r2,-16(fp)
    f754:	10c20e04 	addi	r3,r2,2104
    f758:	e0bff917 	ldw	r2,-28(fp)
    f75c:	1885883a 	add	r2,r3,r2
    f760:	e1bff617 	ldw	r6,-40(fp)
    f764:	e17ffd17 	ldw	r5,-12(fp)
    f768:	1009883a 	mov	r4,r2
    f76c:	00075fc0 	call	75fc <memcpy>
      ptr   += n;
    f770:	e0fffd17 	ldw	r3,-12(fp)
    f774:	e0bff617 	ldw	r2,-40(fp)
    f778:	1885883a 	add	r2,r3,r2
    f77c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    f780:	e0fffe17 	ldw	r3,-8(fp)
    f784:	e0bff617 	ldw	r2,-40(fp)
    f788:	1885c83a 	sub	r2,r3,r2
    f78c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f790:	e0fff917 	ldw	r3,-28(fp)
    f794:	e0bff617 	ldw	r2,-40(fp)
    f798:	1885883a 	add	r2,r3,r2
    f79c:	10c1ffcc 	andi	r3,r2,2047
    f7a0:	e0bffc17 	ldw	r2,-16(fp)
    f7a4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f7a8:	e0bffe17 	ldw	r2,-8(fp)
    f7ac:	00bfc716 	blt	zero,r2,f6cc <__alt_data_end+0xff00f6cc>
    f7b0:	00000106 	br	f7b8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    f7b4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f7b8:	0005303a 	rdctl	r2,status
    f7bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f7c0:	e0fffb17 	ldw	r3,-20(fp)
    f7c4:	00bfff84 	movi	r2,-2
    f7c8:	1884703a 	and	r2,r3,r2
    f7cc:	1001703a 	wrctl	status,r2
  
  return context;
    f7d0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    f7d4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f7d8:	e0bffc17 	ldw	r2,-16(fp)
    f7dc:	10800817 	ldw	r2,32(r2)
    f7e0:	10c00094 	ori	r3,r2,2
    f7e4:	e0bffc17 	ldw	r2,-16(fp)
    f7e8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f7ec:	e0bffc17 	ldw	r2,-16(fp)
    f7f0:	10800017 	ldw	r2,0(r2)
    f7f4:	10800104 	addi	r2,r2,4
    f7f8:	1007883a 	mov	r3,r2
    f7fc:	e0bffc17 	ldw	r2,-16(fp)
    f800:	10800817 	ldw	r2,32(r2)
    f804:	18800035 	stwio	r2,0(r3)
    f808:	e0bffa17 	ldw	r2,-24(fp)
    f80c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f810:	e0bff817 	ldw	r2,-32(fp)
    f814:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    f818:	e0bffe17 	ldw	r2,-8(fp)
    f81c:	0080100e 	bge	zero,r2,f860 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    f820:	e0bfff17 	ldw	r2,-4(fp)
    f824:	1090000c 	andi	r2,r2,16384
    f828:	1000101e 	bne	r2,zero,f86c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    f82c:	0001883a 	nop
    f830:	e0bffc17 	ldw	r2,-16(fp)
    f834:	10c00d17 	ldw	r3,52(r2)
    f838:	e0bff517 	ldw	r2,-44(fp)
    f83c:	1880051e 	bne	r3,r2,f854 <altera_avalon_jtag_uart_write+0x1b8>
    f840:	e0bffc17 	ldw	r2,-16(fp)
    f844:	10c00917 	ldw	r3,36(r2)
    f848:	e0bffc17 	ldw	r2,-16(fp)
    f84c:	10800117 	ldw	r2,4(r2)
    f850:	18bff736 	bltu	r3,r2,f830 <__alt_data_end+0xff00f830>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    f854:	e0bffc17 	ldw	r2,-16(fp)
    f858:	10800917 	ldw	r2,36(r2)
    f85c:	1000051e 	bne	r2,zero,f874 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    f860:	e0bffe17 	ldw	r2,-8(fp)
    f864:	00bfd016 	blt	zero,r2,f7a8 <__alt_data_end+0xff00f7a8>
    f868:	00000306 	br	f878 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    f86c:	0001883a 	nop
    f870:	00000106 	br	f878 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    f874:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f878:	e0fffd17 	ldw	r3,-12(fp)
    f87c:	e0bff717 	ldw	r2,-36(fp)
    f880:	18800426 	beq	r3,r2,f894 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    f884:	e0fffd17 	ldw	r3,-12(fp)
    f888:	e0bff717 	ldw	r2,-36(fp)
    f88c:	1885c83a 	sub	r2,r3,r2
    f890:	00000606 	br	f8ac <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    f894:	e0bfff17 	ldw	r2,-4(fp)
    f898:	1090000c 	andi	r2,r2,16384
    f89c:	10000226 	beq	r2,zero,f8a8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    f8a0:	00bffd44 	movi	r2,-11
    f8a4:	00000106 	br	f8ac <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    f8a8:	00bffec4 	movi	r2,-5
}
    f8ac:	e037883a 	mov	sp,fp
    f8b0:	dfc00117 	ldw	ra,4(sp)
    f8b4:	df000017 	ldw	fp,0(sp)
    f8b8:	dec00204 	addi	sp,sp,8
    f8bc:	f800283a 	ret

0000f8c0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    f8c0:	defffa04 	addi	sp,sp,-24
    f8c4:	dfc00515 	stw	ra,20(sp)
    f8c8:	df000415 	stw	fp,16(sp)
    f8cc:	df000404 	addi	fp,sp,16
    f8d0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    f8d4:	0007883a 	mov	r3,zero
    f8d8:	e0bfff17 	ldw	r2,-4(fp)
    f8dc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    f8e0:	e0bfff17 	ldw	r2,-4(fp)
    f8e4:	10800104 	addi	r2,r2,4
    f8e8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f8ec:	0005303a 	rdctl	r2,status
    f8f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f8f4:	e0fffd17 	ldw	r3,-12(fp)
    f8f8:	00bfff84 	movi	r2,-2
    f8fc:	1884703a 	and	r2,r3,r2
    f900:	1001703a 	wrctl	status,r2
  
  return context;
    f904:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    f908:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    f90c:	001063c0 	call	1063c <alt_tick>
    f910:	e0bffc17 	ldw	r2,-16(fp)
    f914:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f918:	e0bffe17 	ldw	r2,-8(fp)
    f91c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    f920:	0001883a 	nop
    f924:	e037883a 	mov	sp,fp
    f928:	dfc00117 	ldw	ra,4(sp)
    f92c:	df000017 	ldw	fp,0(sp)
    f930:	dec00204 	addi	sp,sp,8
    f934:	f800283a 	ret

0000f938 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    f938:	defff804 	addi	sp,sp,-32
    f93c:	dfc00715 	stw	ra,28(sp)
    f940:	df000615 	stw	fp,24(sp)
    f944:	df000604 	addi	fp,sp,24
    f948:	e13ffc15 	stw	r4,-16(fp)
    f94c:	e17ffd15 	stw	r5,-12(fp)
    f950:	e1bffe15 	stw	r6,-8(fp)
    f954:	e1ffff15 	stw	r7,-4(fp)
    f958:	e0bfff17 	ldw	r2,-4(fp)
    f95c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    f960:	d0a6e217 	ldw	r2,-25720(gp)
    f964:	1000021e 	bne	r2,zero,f970 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    f968:	e0bffb17 	ldw	r2,-20(fp)
    f96c:	d0a6e215 	stw	r2,-25720(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    f970:	e0bffc17 	ldw	r2,-16(fp)
    f974:	10800104 	addi	r2,r2,4
    f978:	00c001c4 	movi	r3,7
    f97c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    f980:	d8000015 	stw	zero,0(sp)
    f984:	e1fffc17 	ldw	r7,-16(fp)
    f988:	01800074 	movhi	r6,1
    f98c:	31be3004 	addi	r6,r6,-1856
    f990:	e17ffe17 	ldw	r5,-8(fp)
    f994:	e13ffd17 	ldw	r4,-12(fp)
    f998:	000ff6c0 	call	ff6c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    f99c:	0001883a 	nop
    f9a0:	e037883a 	mov	sp,fp
    f9a4:	dfc00117 	ldw	ra,4(sp)
    f9a8:	df000017 	ldw	fp,0(sp)
    f9ac:	dec00204 	addi	sp,sp,8
    f9b0:	f800283a 	ret

0000f9b4 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
    f9b4:	defffe04 	addi	sp,sp,-8
    f9b8:	df000115 	stw	fp,4(sp)
    f9bc:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
    f9c0:	d0a6df17 	ldw	r2,-25732(gp)
    f9c4:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
    f9c8:	d0a6e017 	ldw	r2,-25728(gp)
    f9cc:	1000021e 	bne	r2,zero,f9d8 <alt_timestamp_start+0x24>
  {
    return -1;
    f9d0:	00bfffc4 	movi	r2,-1
    f9d4:	00001106 	br	fa1c <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    f9d8:	e0bfff17 	ldw	r2,-4(fp)
    f9dc:	10800104 	addi	r2,r2,4
    f9e0:	00c00204 	movi	r3,8
    f9e4:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
    f9e8:	e0bfff17 	ldw	r2,-4(fp)
    f9ec:	10800204 	addi	r2,r2,8
    f9f0:	00ffffd4 	movui	r3,65535
    f9f4:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
    f9f8:	e0bfff17 	ldw	r2,-4(fp)
    f9fc:	10800304 	addi	r2,r2,12
    fa00:	00ffffd4 	movui	r3,65535
    fa04:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    fa08:	e0bfff17 	ldw	r2,-4(fp)
    fa0c:	10800104 	addi	r2,r2,4
    fa10:	00c00104 	movi	r3,4
    fa14:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
    fa18:	0005883a 	mov	r2,zero
}
    fa1c:	e037883a 	mov	sp,fp
    fa20:	df000017 	ldw	fp,0(sp)
    fa24:	dec00104 	addi	sp,sp,4
    fa28:	f800283a 	ret

0000fa2c <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
    fa2c:	defffc04 	addi	sp,sp,-16
    fa30:	df000315 	stw	fp,12(sp)
    fa34:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
    fa38:	d0a6df17 	ldw	r2,-25732(gp)
    fa3c:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
    fa40:	d0a6e017 	ldw	r2,-25728(gp)
    fa44:	1000021e 	bne	r2,zero,fa50 <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
    fa48:	00bfffc4 	movi	r2,-1
    fa4c:	00001306 	br	fa9c <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
    fa50:	e0bffd17 	ldw	r2,-12(fp)
    fa54:	10800404 	addi	r2,r2,16
    fa58:	0007883a 	mov	r3,zero
    fa5c:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
    fa60:	e0bffd17 	ldw	r2,-12(fp)
    fa64:	10800404 	addi	r2,r2,16
    fa68:	10800037 	ldwio	r2,0(r2)
    fa6c:	10bfffcc 	andi	r2,r2,65535
    fa70:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
    fa74:	e0bffd17 	ldw	r2,-12(fp)
    fa78:	10800504 	addi	r2,r2,20
    fa7c:	10800037 	ldwio	r2,0(r2)
    fa80:	10bfffcc 	andi	r2,r2,65535
    fa84:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    fa88:	e0bfff17 	ldw	r2,-4(fp)
    fa8c:	1006943a 	slli	r3,r2,16
    fa90:	e0bffe17 	ldw	r2,-8(fp)
    fa94:	1884b03a 	or	r2,r3,r2
    fa98:	0084303a 	nor	r2,zero,r2
#endif
  }
}
    fa9c:	e037883a 	mov	sp,fp
    faa0:	df000017 	ldw	fp,0(sp)
    faa4:	dec00104 	addi	sp,sp,4
    faa8:	f800283a 	ret

0000faac <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
    faac:	deffff04 	addi	sp,sp,-4
    fab0:	df000015 	stw	fp,0(sp)
    fab4:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
    fab8:	d0a6e017 	ldw	r2,-25728(gp)
}
    fabc:	e037883a 	mov	sp,fp
    fac0:	df000017 	ldw	fp,0(sp)
    fac4:	dec00104 	addi	sp,sp,4
    fac8:	f800283a 	ret

0000facc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    facc:	defff504 	addi	sp,sp,-44
    fad0:	df000a15 	stw	fp,40(sp)
    fad4:	df000a04 	addi	fp,sp,40
    fad8:	e13ffc15 	stw	r4,-16(fp)
    fadc:	e17ffd15 	stw	r5,-12(fp)
    fae0:	e1bffe15 	stw	r6,-8(fp)
    fae4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    fae8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    faec:	d0a6e217 	ldw	r2,-25720(gp)
  
  if (alt_ticks_per_second ())
    faf0:	10003c26 	beq	r2,zero,fbe4 <alt_alarm_start+0x118>
  {
    if (alarm)
    faf4:	e0bffc17 	ldw	r2,-16(fp)
    faf8:	10003826 	beq	r2,zero,fbdc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    fafc:	e0bffc17 	ldw	r2,-16(fp)
    fb00:	e0fffe17 	ldw	r3,-8(fp)
    fb04:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    fb08:	e0bffc17 	ldw	r2,-16(fp)
    fb0c:	e0ffff17 	ldw	r3,-4(fp)
    fb10:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fb14:	0005303a 	rdctl	r2,status
    fb18:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fb1c:	e0fff917 	ldw	r3,-28(fp)
    fb20:	00bfff84 	movi	r2,-2
    fb24:	1884703a 	and	r2,r3,r2
    fb28:	1001703a 	wrctl	status,r2
  
  return context;
    fb2c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    fb30:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    fb34:	d0a6e317 	ldw	r2,-25716(gp)
      
      current_nticks = alt_nticks();
    fb38:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    fb3c:	e0fffd17 	ldw	r3,-12(fp)
    fb40:	e0bff617 	ldw	r2,-40(fp)
    fb44:	1885883a 	add	r2,r3,r2
    fb48:	10c00044 	addi	r3,r2,1
    fb4c:	e0bffc17 	ldw	r2,-16(fp)
    fb50:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    fb54:	e0bffc17 	ldw	r2,-16(fp)
    fb58:	10c00217 	ldw	r3,8(r2)
    fb5c:	e0bff617 	ldw	r2,-40(fp)
    fb60:	1880042e 	bgeu	r3,r2,fb74 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    fb64:	e0bffc17 	ldw	r2,-16(fp)
    fb68:	00c00044 	movi	r3,1
    fb6c:	10c00405 	stb	r3,16(r2)
    fb70:	00000206 	br	fb7c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    fb74:	e0bffc17 	ldw	r2,-16(fp)
    fb78:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    fb7c:	e0bffc17 	ldw	r2,-16(fp)
    fb80:	d0e00e04 	addi	r3,gp,-32712
    fb84:	e0fffa15 	stw	r3,-24(fp)
    fb88:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    fb8c:	e0bffb17 	ldw	r2,-20(fp)
    fb90:	e0fffa17 	ldw	r3,-24(fp)
    fb94:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    fb98:	e0bffa17 	ldw	r2,-24(fp)
    fb9c:	10c00017 	ldw	r3,0(r2)
    fba0:	e0bffb17 	ldw	r2,-20(fp)
    fba4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    fba8:	e0bffa17 	ldw	r2,-24(fp)
    fbac:	10800017 	ldw	r2,0(r2)
    fbb0:	e0fffb17 	ldw	r3,-20(fp)
    fbb4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    fbb8:	e0bffa17 	ldw	r2,-24(fp)
    fbbc:	e0fffb17 	ldw	r3,-20(fp)
    fbc0:	10c00015 	stw	r3,0(r2)
    fbc4:	e0bff817 	ldw	r2,-32(fp)
    fbc8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fbcc:	e0bff717 	ldw	r2,-36(fp)
    fbd0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    fbd4:	0005883a 	mov	r2,zero
    fbd8:	00000306 	br	fbe8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    fbdc:	00bffa84 	movi	r2,-22
    fbe0:	00000106 	br	fbe8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    fbe4:	00bfde84 	movi	r2,-134
  }
}
    fbe8:	e037883a 	mov	sp,fp
    fbec:	df000017 	ldw	fp,0(sp)
    fbf0:	dec00104 	addi	sp,sp,4
    fbf4:	f800283a 	ret

0000fbf8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    fbf8:	defffa04 	addi	sp,sp,-24
    fbfc:	dfc00515 	stw	ra,20(sp)
    fc00:	df000415 	stw	fp,16(sp)
    fc04:	df000404 	addi	fp,sp,16
    fc08:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    fc0c:	008000c4 	movi	r2,3
    fc10:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    fc14:	e0fffd17 	ldw	r3,-12(fp)
    fc18:	008003f4 	movhi	r2,15
    fc1c:	10909004 	addi	r2,r2,16960
    fc20:	1885383a 	mul	r2,r3,r2
    fc24:	100b883a 	mov	r5,r2
    fc28:	0100bef4 	movhi	r4,763
    fc2c:	213c2004 	addi	r4,r4,-3968
    fc30:	000bcd80 	call	bcd8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    fc34:	100b883a 	mov	r5,r2
    fc38:	01200034 	movhi	r4,32768
    fc3c:	213fffc4 	addi	r4,r4,-1
    fc40:	000bcd80 	call	bcd8 <__udivsi3>
    fc44:	100b883a 	mov	r5,r2
    fc48:	e13fff17 	ldw	r4,-4(fp)
    fc4c:	000bcd80 	call	bcd8 <__udivsi3>
    fc50:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    fc54:	e0bffe17 	ldw	r2,-8(fp)
    fc58:	10002a26 	beq	r2,zero,fd04 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    fc5c:	e03ffc15 	stw	zero,-16(fp)
    fc60:	00001706 	br	fcc0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    fc64:	00a00034 	movhi	r2,32768
    fc68:	10bfffc4 	addi	r2,r2,-1
    fc6c:	10bfffc4 	addi	r2,r2,-1
    fc70:	103ffe1e 	bne	r2,zero,fc6c <__alt_data_end+0xff00fc6c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    fc74:	e0fffd17 	ldw	r3,-12(fp)
    fc78:	008003f4 	movhi	r2,15
    fc7c:	10909004 	addi	r2,r2,16960
    fc80:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    fc84:	100b883a 	mov	r5,r2
    fc88:	0100bef4 	movhi	r4,763
    fc8c:	213c2004 	addi	r4,r4,-3968
    fc90:	000bcd80 	call	bcd8 <__udivsi3>
    fc94:	100b883a 	mov	r5,r2
    fc98:	01200034 	movhi	r4,32768
    fc9c:	213fffc4 	addi	r4,r4,-1
    fca0:	000bcd80 	call	bcd8 <__udivsi3>
    fca4:	1007883a 	mov	r3,r2
    fca8:	e0bfff17 	ldw	r2,-4(fp)
    fcac:	10c5c83a 	sub	r2,r2,r3
    fcb0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    fcb4:	e0bffc17 	ldw	r2,-16(fp)
    fcb8:	10800044 	addi	r2,r2,1
    fcbc:	e0bffc15 	stw	r2,-16(fp)
    fcc0:	e0fffc17 	ldw	r3,-16(fp)
    fcc4:	e0bffe17 	ldw	r2,-8(fp)
    fcc8:	18bfe616 	blt	r3,r2,fc64 <__alt_data_end+0xff00fc64>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    fccc:	e0fffd17 	ldw	r3,-12(fp)
    fcd0:	008003f4 	movhi	r2,15
    fcd4:	10909004 	addi	r2,r2,16960
    fcd8:	1885383a 	mul	r2,r3,r2
    fcdc:	100b883a 	mov	r5,r2
    fce0:	0100bef4 	movhi	r4,763
    fce4:	213c2004 	addi	r4,r4,-3968
    fce8:	000bcd80 	call	bcd8 <__udivsi3>
    fcec:	1007883a 	mov	r3,r2
    fcf0:	e0bfff17 	ldw	r2,-4(fp)
    fcf4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    fcf8:	10bfffc4 	addi	r2,r2,-1
    fcfc:	103ffe1e 	bne	r2,zero,fcf8 <__alt_data_end+0xff00fcf8>
    fd00:	00000d06 	br	fd38 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    fd04:	e0fffd17 	ldw	r3,-12(fp)
    fd08:	008003f4 	movhi	r2,15
    fd0c:	10909004 	addi	r2,r2,16960
    fd10:	1885383a 	mul	r2,r3,r2
    fd14:	100b883a 	mov	r5,r2
    fd18:	0100bef4 	movhi	r4,763
    fd1c:	213c2004 	addi	r4,r4,-3968
    fd20:	000bcd80 	call	bcd8 <__udivsi3>
    fd24:	1007883a 	mov	r3,r2
    fd28:	e0bfff17 	ldw	r2,-4(fp)
    fd2c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    fd30:	10bfffc4 	addi	r2,r2,-1
    fd34:	00bffe16 	blt	zero,r2,fd30 <__alt_data_end+0xff00fd30>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    fd38:	0005883a 	mov	r2,zero
}
    fd3c:	e037883a 	mov	sp,fp
    fd40:	dfc00117 	ldw	ra,4(sp)
    fd44:	df000017 	ldw	fp,0(sp)
    fd48:	dec00204 	addi	sp,sp,8
    fd4c:	f800283a 	ret

0000fd50 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    fd50:	defffe04 	addi	sp,sp,-8
    fd54:	df000115 	stw	fp,4(sp)
    fd58:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    fd5c:	e03fff15 	stw	zero,-4(fp)
    fd60:	00000506 	br	fd78 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    fd64:	e0bfff17 	ldw	r2,-4(fp)
    fd68:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    fd6c:	e0bfff17 	ldw	r2,-4(fp)
    fd70:	10800804 	addi	r2,r2,32
    fd74:	e0bfff15 	stw	r2,-4(fp)
    fd78:	e0bfff17 	ldw	r2,-4(fp)
    fd7c:	10900030 	cmpltui	r2,r2,16384
    fd80:	103ff81e 	bne	r2,zero,fd64 <__alt_data_end+0xff00fd64>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    fd84:	0001883a 	nop
    fd88:	e037883a 	mov	sp,fp
    fd8c:	df000017 	ldw	fp,0(sp)
    fd90:	dec00104 	addi	sp,sp,4
    fd94:	f800283a 	ret

0000fd98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fd98:	defffe04 	addi	sp,sp,-8
    fd9c:	dfc00115 	stw	ra,4(sp)
    fda0:	df000015 	stw	fp,0(sp)
    fda4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fda8:	d0a00b17 	ldw	r2,-32724(gp)
    fdac:	10000326 	beq	r2,zero,fdbc <alt_get_errno+0x24>
    fdb0:	d0a00b17 	ldw	r2,-32724(gp)
    fdb4:	103ee83a 	callr	r2
    fdb8:	00000106 	br	fdc0 <alt_get_errno+0x28>
    fdbc:	d0a6d804 	addi	r2,gp,-25760
}
    fdc0:	e037883a 	mov	sp,fp
    fdc4:	dfc00117 	ldw	ra,4(sp)
    fdc8:	df000017 	ldw	fp,0(sp)
    fdcc:	dec00204 	addi	sp,sp,8
    fdd0:	f800283a 	ret

0000fdd4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    fdd4:	defffa04 	addi	sp,sp,-24
    fdd8:	dfc00515 	stw	ra,20(sp)
    fddc:	df000415 	stw	fp,16(sp)
    fde0:	df000404 	addi	fp,sp,16
    fde4:	e13ffe15 	stw	r4,-8(fp)
    fde8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    fdec:	e0bffe17 	ldw	r2,-8(fp)
    fdf0:	10000326 	beq	r2,zero,fe00 <alt_dev_llist_insert+0x2c>
    fdf4:	e0bffe17 	ldw	r2,-8(fp)
    fdf8:	10800217 	ldw	r2,8(r2)
    fdfc:	1000061e 	bne	r2,zero,fe18 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    fe00:	000fd980 	call	fd98 <alt_get_errno>
    fe04:	1007883a 	mov	r3,r2
    fe08:	00800584 	movi	r2,22
    fe0c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    fe10:	00bffa84 	movi	r2,-22
    fe14:	00001306 	br	fe64 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    fe18:	e0bffe17 	ldw	r2,-8(fp)
    fe1c:	e0ffff17 	ldw	r3,-4(fp)
    fe20:	e0fffc15 	stw	r3,-16(fp)
    fe24:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    fe28:	e0bffd17 	ldw	r2,-12(fp)
    fe2c:	e0fffc17 	ldw	r3,-16(fp)
    fe30:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    fe34:	e0bffc17 	ldw	r2,-16(fp)
    fe38:	10c00017 	ldw	r3,0(r2)
    fe3c:	e0bffd17 	ldw	r2,-12(fp)
    fe40:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    fe44:	e0bffc17 	ldw	r2,-16(fp)
    fe48:	10800017 	ldw	r2,0(r2)
    fe4c:	e0fffd17 	ldw	r3,-12(fp)
    fe50:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    fe54:	e0bffc17 	ldw	r2,-16(fp)
    fe58:	e0fffd17 	ldw	r3,-12(fp)
    fe5c:	10c00015 	stw	r3,0(r2)

  return 0;  
    fe60:	0005883a 	mov	r2,zero
}
    fe64:	e037883a 	mov	sp,fp
    fe68:	dfc00117 	ldw	ra,4(sp)
    fe6c:	df000017 	ldw	fp,0(sp)
    fe70:	dec00204 	addi	sp,sp,8
    fe74:	f800283a 	ret

0000fe78 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    fe78:	defffd04 	addi	sp,sp,-12
    fe7c:	dfc00215 	stw	ra,8(sp)
    fe80:	df000115 	stw	fp,4(sp)
    fe84:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    fe88:	00800074 	movhi	r2,1
    fe8c:	10839804 	addi	r2,r2,3680
    fe90:	e0bfff15 	stw	r2,-4(fp)
    fe94:	00000606 	br	feb0 <_do_ctors+0x38>
        (*ctor) (); 
    fe98:	e0bfff17 	ldw	r2,-4(fp)
    fe9c:	10800017 	ldw	r2,0(r2)
    fea0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    fea4:	e0bfff17 	ldw	r2,-4(fp)
    fea8:	10bfff04 	addi	r2,r2,-4
    feac:	e0bfff15 	stw	r2,-4(fp)
    feb0:	e0ffff17 	ldw	r3,-4(fp)
    feb4:	00800074 	movhi	r2,1
    feb8:	10839904 	addi	r2,r2,3684
    febc:	18bff62e 	bgeu	r3,r2,fe98 <__alt_data_end+0xff00fe98>
        (*ctor) (); 
}
    fec0:	0001883a 	nop
    fec4:	e037883a 	mov	sp,fp
    fec8:	dfc00117 	ldw	ra,4(sp)
    fecc:	df000017 	ldw	fp,0(sp)
    fed0:	dec00204 	addi	sp,sp,8
    fed4:	f800283a 	ret

0000fed8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    fed8:	defffd04 	addi	sp,sp,-12
    fedc:	dfc00215 	stw	ra,8(sp)
    fee0:	df000115 	stw	fp,4(sp)
    fee4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    fee8:	00800074 	movhi	r2,1
    feec:	10839804 	addi	r2,r2,3680
    fef0:	e0bfff15 	stw	r2,-4(fp)
    fef4:	00000606 	br	ff10 <_do_dtors+0x38>
        (*dtor) (); 
    fef8:	e0bfff17 	ldw	r2,-4(fp)
    fefc:	10800017 	ldw	r2,0(r2)
    ff00:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    ff04:	e0bfff17 	ldw	r2,-4(fp)
    ff08:	10bfff04 	addi	r2,r2,-4
    ff0c:	e0bfff15 	stw	r2,-4(fp)
    ff10:	e0ffff17 	ldw	r3,-4(fp)
    ff14:	00800074 	movhi	r2,1
    ff18:	10839904 	addi	r2,r2,3684
    ff1c:	18bff62e 	bgeu	r3,r2,fef8 <__alt_data_end+0xff00fef8>
        (*dtor) (); 
}
    ff20:	0001883a 	nop
    ff24:	e037883a 	mov	sp,fp
    ff28:	dfc00117 	ldw	ra,4(sp)
    ff2c:	df000017 	ldw	fp,0(sp)
    ff30:	dec00204 	addi	sp,sp,8
    ff34:	f800283a 	ret

0000ff38 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    ff38:	defffe04 	addi	sp,sp,-8
    ff3c:	dfc00115 	stw	ra,4(sp)
    ff40:	df000015 	stw	fp,0(sp)
    ff44:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    ff48:	01440004 	movi	r5,4096
    ff4c:	0009883a 	mov	r4,zero
    ff50:	00109a40 	call	109a4 <alt_icache_flush>
#endif
}
    ff54:	0001883a 	nop
    ff58:	e037883a 	mov	sp,fp
    ff5c:	dfc00117 	ldw	ra,4(sp)
    ff60:	df000017 	ldw	fp,0(sp)
    ff64:	dec00204 	addi	sp,sp,8
    ff68:	f800283a 	ret

0000ff6c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    ff6c:	defff904 	addi	sp,sp,-28
    ff70:	dfc00615 	stw	ra,24(sp)
    ff74:	df000515 	stw	fp,20(sp)
    ff78:	df000504 	addi	fp,sp,20
    ff7c:	e13ffc15 	stw	r4,-16(fp)
    ff80:	e17ffd15 	stw	r5,-12(fp)
    ff84:	e1bffe15 	stw	r6,-8(fp)
    ff88:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    ff8c:	e0800217 	ldw	r2,8(fp)
    ff90:	d8800015 	stw	r2,0(sp)
    ff94:	e1ffff17 	ldw	r7,-4(fp)
    ff98:	e1bffe17 	ldw	r6,-8(fp)
    ff9c:	e17ffd17 	ldw	r5,-12(fp)
    ffa0:	e13ffc17 	ldw	r4,-16(fp)
    ffa4:	001011c0 	call	1011c <alt_iic_isr_register>
}  
    ffa8:	e037883a 	mov	sp,fp
    ffac:	dfc00117 	ldw	ra,4(sp)
    ffb0:	df000017 	ldw	fp,0(sp)
    ffb4:	dec00204 	addi	sp,sp,8
    ffb8:	f800283a 	ret

0000ffbc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    ffbc:	defff904 	addi	sp,sp,-28
    ffc0:	df000615 	stw	fp,24(sp)
    ffc4:	df000604 	addi	fp,sp,24
    ffc8:	e13ffe15 	stw	r4,-8(fp)
    ffcc:	e17fff15 	stw	r5,-4(fp)
    ffd0:	e0bfff17 	ldw	r2,-4(fp)
    ffd4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ffd8:	0005303a 	rdctl	r2,status
    ffdc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ffe0:	e0fffb17 	ldw	r3,-20(fp)
    ffe4:	00bfff84 	movi	r2,-2
    ffe8:	1884703a 	and	r2,r3,r2
    ffec:	1001703a 	wrctl	status,r2
  
  return context;
    fff0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    fff4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    fff8:	00c00044 	movi	r3,1
    fffc:	e0bffa17 	ldw	r2,-24(fp)
   10000:	1884983a 	sll	r2,r3,r2
   10004:	1007883a 	mov	r3,r2
   10008:	d0a6e117 	ldw	r2,-25724(gp)
   1000c:	1884b03a 	or	r2,r3,r2
   10010:	d0a6e115 	stw	r2,-25724(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10014:	d0a6e117 	ldw	r2,-25724(gp)
   10018:	100170fa 	wrctl	ienable,r2
   1001c:	e0bffc17 	ldw	r2,-16(fp)
   10020:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10024:	e0bffd17 	ldw	r2,-12(fp)
   10028:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1002c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   10030:	0001883a 	nop
}
   10034:	e037883a 	mov	sp,fp
   10038:	df000017 	ldw	fp,0(sp)
   1003c:	dec00104 	addi	sp,sp,4
   10040:	f800283a 	ret

00010044 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   10044:	defff904 	addi	sp,sp,-28
   10048:	df000615 	stw	fp,24(sp)
   1004c:	df000604 	addi	fp,sp,24
   10050:	e13ffe15 	stw	r4,-8(fp)
   10054:	e17fff15 	stw	r5,-4(fp)
   10058:	e0bfff17 	ldw	r2,-4(fp)
   1005c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10060:	0005303a 	rdctl	r2,status
   10064:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10068:	e0fffb17 	ldw	r3,-20(fp)
   1006c:	00bfff84 	movi	r2,-2
   10070:	1884703a 	and	r2,r3,r2
   10074:	1001703a 	wrctl	status,r2
  
  return context;
   10078:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1007c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   10080:	00c00044 	movi	r3,1
   10084:	e0bffa17 	ldw	r2,-24(fp)
   10088:	1884983a 	sll	r2,r3,r2
   1008c:	0084303a 	nor	r2,zero,r2
   10090:	1007883a 	mov	r3,r2
   10094:	d0a6e117 	ldw	r2,-25724(gp)
   10098:	1884703a 	and	r2,r3,r2
   1009c:	d0a6e115 	stw	r2,-25724(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   100a0:	d0a6e117 	ldw	r2,-25724(gp)
   100a4:	100170fa 	wrctl	ienable,r2
   100a8:	e0bffc17 	ldw	r2,-16(fp)
   100ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   100b0:	e0bffd17 	ldw	r2,-12(fp)
   100b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   100b8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   100bc:	0001883a 	nop
}
   100c0:	e037883a 	mov	sp,fp
   100c4:	df000017 	ldw	fp,0(sp)
   100c8:	dec00104 	addi	sp,sp,4
   100cc:	f800283a 	ret

000100d0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   100d0:	defffc04 	addi	sp,sp,-16
   100d4:	df000315 	stw	fp,12(sp)
   100d8:	df000304 	addi	fp,sp,12
   100dc:	e13ffe15 	stw	r4,-8(fp)
   100e0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   100e4:	000530fa 	rdctl	r2,ienable
   100e8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   100ec:	00c00044 	movi	r3,1
   100f0:	e0bfff17 	ldw	r2,-4(fp)
   100f4:	1884983a 	sll	r2,r3,r2
   100f8:	1007883a 	mov	r3,r2
   100fc:	e0bffd17 	ldw	r2,-12(fp)
   10100:	1884703a 	and	r2,r3,r2
   10104:	1004c03a 	cmpne	r2,r2,zero
   10108:	10803fcc 	andi	r2,r2,255
}
   1010c:	e037883a 	mov	sp,fp
   10110:	df000017 	ldw	fp,0(sp)
   10114:	dec00104 	addi	sp,sp,4
   10118:	f800283a 	ret

0001011c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1011c:	defff504 	addi	sp,sp,-44
   10120:	dfc00a15 	stw	ra,40(sp)
   10124:	df000915 	stw	fp,36(sp)
   10128:	df000904 	addi	fp,sp,36
   1012c:	e13ffc15 	stw	r4,-16(fp)
   10130:	e17ffd15 	stw	r5,-12(fp)
   10134:	e1bffe15 	stw	r6,-8(fp)
   10138:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   1013c:	00bffa84 	movi	r2,-22
   10140:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   10144:	e0bffd17 	ldw	r2,-12(fp)
   10148:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1014c:	e0bff817 	ldw	r2,-32(fp)
   10150:	10800808 	cmpgei	r2,r2,32
   10154:	1000271e 	bne	r2,zero,101f4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10158:	0005303a 	rdctl	r2,status
   1015c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10160:	e0fffb17 	ldw	r3,-20(fp)
   10164:	00bfff84 	movi	r2,-2
   10168:	1884703a 	and	r2,r3,r2
   1016c:	1001703a 	wrctl	status,r2
  
  return context;
   10170:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   10174:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   10178:	00800074 	movhi	r2,1
   1017c:	10931804 	addi	r2,r2,19552
   10180:	e0fff817 	ldw	r3,-32(fp)
   10184:	180690fa 	slli	r3,r3,3
   10188:	10c5883a 	add	r2,r2,r3
   1018c:	e0fffe17 	ldw	r3,-8(fp)
   10190:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   10194:	00800074 	movhi	r2,1
   10198:	10931804 	addi	r2,r2,19552
   1019c:	e0fff817 	ldw	r3,-32(fp)
   101a0:	180690fa 	slli	r3,r3,3
   101a4:	10c5883a 	add	r2,r2,r3
   101a8:	10800104 	addi	r2,r2,4
   101ac:	e0ffff17 	ldw	r3,-4(fp)
   101b0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   101b4:	e0bffe17 	ldw	r2,-8(fp)
   101b8:	10000526 	beq	r2,zero,101d0 <alt_iic_isr_register+0xb4>
   101bc:	e0bff817 	ldw	r2,-32(fp)
   101c0:	100b883a 	mov	r5,r2
   101c4:	e13ffc17 	ldw	r4,-16(fp)
   101c8:	000ffbc0 	call	ffbc <alt_ic_irq_enable>
   101cc:	00000406 	br	101e0 <alt_iic_isr_register+0xc4>
   101d0:	e0bff817 	ldw	r2,-32(fp)
   101d4:	100b883a 	mov	r5,r2
   101d8:	e13ffc17 	ldw	r4,-16(fp)
   101dc:	00100440 	call	10044 <alt_ic_irq_disable>
   101e0:	e0bff715 	stw	r2,-36(fp)
   101e4:	e0bffa17 	ldw	r2,-24(fp)
   101e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   101ec:	e0bff917 	ldw	r2,-28(fp)
   101f0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   101f4:	e0bff717 	ldw	r2,-36(fp)
}
   101f8:	e037883a 	mov	sp,fp
   101fc:	dfc00117 	ldw	ra,4(sp)
   10200:	df000017 	ldw	fp,0(sp)
   10204:	dec00204 	addi	sp,sp,8
   10208:	f800283a 	ret

0001020c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1020c:	defff904 	addi	sp,sp,-28
   10210:	dfc00615 	stw	ra,24(sp)
   10214:	df000515 	stw	fp,20(sp)
   10218:	df000504 	addi	fp,sp,20
   1021c:	e13ffc15 	stw	r4,-16(fp)
   10220:	e17ffd15 	stw	r5,-12(fp)
   10224:	e1bffe15 	stw	r6,-8(fp)
   10228:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1022c:	e1bfff17 	ldw	r6,-4(fp)
   10230:	e17ffe17 	ldw	r5,-8(fp)
   10234:	e13ffd17 	ldw	r4,-12(fp)
   10238:	001044c0 	call	1044c <open>
   1023c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   10240:	e0bffb17 	ldw	r2,-20(fp)
   10244:	10001c16 	blt	r2,zero,102b8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   10248:	00800074 	movhi	r2,1
   1024c:	1087b104 	addi	r2,r2,7876
   10250:	e0fffb17 	ldw	r3,-20(fp)
   10254:	18c00324 	muli	r3,r3,12
   10258:	10c5883a 	add	r2,r2,r3
   1025c:	10c00017 	ldw	r3,0(r2)
   10260:	e0bffc17 	ldw	r2,-16(fp)
   10264:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   10268:	00800074 	movhi	r2,1
   1026c:	1087b104 	addi	r2,r2,7876
   10270:	e0fffb17 	ldw	r3,-20(fp)
   10274:	18c00324 	muli	r3,r3,12
   10278:	10c5883a 	add	r2,r2,r3
   1027c:	10800104 	addi	r2,r2,4
   10280:	10c00017 	ldw	r3,0(r2)
   10284:	e0bffc17 	ldw	r2,-16(fp)
   10288:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1028c:	00800074 	movhi	r2,1
   10290:	1087b104 	addi	r2,r2,7876
   10294:	e0fffb17 	ldw	r3,-20(fp)
   10298:	18c00324 	muli	r3,r3,12
   1029c:	10c5883a 	add	r2,r2,r3
   102a0:	10800204 	addi	r2,r2,8
   102a4:	10c00017 	ldw	r3,0(r2)
   102a8:	e0bffc17 	ldw	r2,-16(fp)
   102ac:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   102b0:	e13ffb17 	ldw	r4,-20(fp)
   102b4:	000eaf80 	call	eaf8 <alt_release_fd>
  }
} 
   102b8:	0001883a 	nop
   102bc:	e037883a 	mov	sp,fp
   102c0:	dfc00117 	ldw	ra,4(sp)
   102c4:	df000017 	ldw	fp,0(sp)
   102c8:	dec00204 	addi	sp,sp,8
   102cc:	f800283a 	ret

000102d0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   102d0:	defffb04 	addi	sp,sp,-20
   102d4:	dfc00415 	stw	ra,16(sp)
   102d8:	df000315 	stw	fp,12(sp)
   102dc:	df000304 	addi	fp,sp,12
   102e0:	e13ffd15 	stw	r4,-12(fp)
   102e4:	e17ffe15 	stw	r5,-8(fp)
   102e8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   102ec:	01c07fc4 	movi	r7,511
   102f0:	01800044 	movi	r6,1
   102f4:	e17ffd17 	ldw	r5,-12(fp)
   102f8:	01000074 	movhi	r4,1
   102fc:	2107b404 	addi	r4,r4,7888
   10300:	001020c0 	call	1020c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10304:	01c07fc4 	movi	r7,511
   10308:	000d883a 	mov	r6,zero
   1030c:	e17ffe17 	ldw	r5,-8(fp)
   10310:	01000074 	movhi	r4,1
   10314:	2107b104 	addi	r4,r4,7876
   10318:	001020c0 	call	1020c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1031c:	01c07fc4 	movi	r7,511
   10320:	01800044 	movi	r6,1
   10324:	e17fff17 	ldw	r5,-4(fp)
   10328:	01000074 	movhi	r4,1
   1032c:	2107b704 	addi	r4,r4,7900
   10330:	001020c0 	call	1020c <alt_open_fd>
}  
   10334:	0001883a 	nop
   10338:	e037883a 	mov	sp,fp
   1033c:	dfc00117 	ldw	ra,4(sp)
   10340:	df000017 	ldw	fp,0(sp)
   10344:	dec00204 	addi	sp,sp,8
   10348:	f800283a 	ret

0001034c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1034c:	defffe04 	addi	sp,sp,-8
   10350:	dfc00115 	stw	ra,4(sp)
   10354:	df000015 	stw	fp,0(sp)
   10358:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1035c:	d0a00b17 	ldw	r2,-32724(gp)
   10360:	10000326 	beq	r2,zero,10370 <alt_get_errno+0x24>
   10364:	d0a00b17 	ldw	r2,-32724(gp)
   10368:	103ee83a 	callr	r2
   1036c:	00000106 	br	10374 <alt_get_errno+0x28>
   10370:	d0a6d804 	addi	r2,gp,-25760
}
   10374:	e037883a 	mov	sp,fp
   10378:	dfc00117 	ldw	ra,4(sp)
   1037c:	df000017 	ldw	fp,0(sp)
   10380:	dec00204 	addi	sp,sp,8
   10384:	f800283a 	ret

00010388 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   10388:	defffd04 	addi	sp,sp,-12
   1038c:	df000215 	stw	fp,8(sp)
   10390:	df000204 	addi	fp,sp,8
   10394:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10398:	e0bfff17 	ldw	r2,-4(fp)
   1039c:	10800217 	ldw	r2,8(r2)
   103a0:	10d00034 	orhi	r3,r2,16384
   103a4:	e0bfff17 	ldw	r2,-4(fp)
   103a8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   103ac:	e03ffe15 	stw	zero,-8(fp)
   103b0:	00001d06 	br	10428 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   103b4:	00800074 	movhi	r2,1
   103b8:	1087b104 	addi	r2,r2,7876
   103bc:	e0fffe17 	ldw	r3,-8(fp)
   103c0:	18c00324 	muli	r3,r3,12
   103c4:	10c5883a 	add	r2,r2,r3
   103c8:	10c00017 	ldw	r3,0(r2)
   103cc:	e0bfff17 	ldw	r2,-4(fp)
   103d0:	10800017 	ldw	r2,0(r2)
   103d4:	1880111e 	bne	r3,r2,1041c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   103d8:	00800074 	movhi	r2,1
   103dc:	1087b104 	addi	r2,r2,7876
   103e0:	e0fffe17 	ldw	r3,-8(fp)
   103e4:	18c00324 	muli	r3,r3,12
   103e8:	10c5883a 	add	r2,r2,r3
   103ec:	10800204 	addi	r2,r2,8
   103f0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   103f4:	1000090e 	bge	r2,zero,1041c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   103f8:	e0bffe17 	ldw	r2,-8(fp)
   103fc:	10c00324 	muli	r3,r2,12
   10400:	00800074 	movhi	r2,1
   10404:	1087b104 	addi	r2,r2,7876
   10408:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1040c:	e0bfff17 	ldw	r2,-4(fp)
   10410:	18800226 	beq	r3,r2,1041c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   10414:	00bffcc4 	movi	r2,-13
   10418:	00000806 	br	1043c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1041c:	e0bffe17 	ldw	r2,-8(fp)
   10420:	10800044 	addi	r2,r2,1
   10424:	e0bffe15 	stw	r2,-8(fp)
   10428:	d0a00a17 	ldw	r2,-32728(gp)
   1042c:	1007883a 	mov	r3,r2
   10430:	e0bffe17 	ldw	r2,-8(fp)
   10434:	18bfdf2e 	bgeu	r3,r2,103b4 <__alt_data_end+0xff0103b4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   10438:	0005883a 	mov	r2,zero
}
   1043c:	e037883a 	mov	sp,fp
   10440:	df000017 	ldw	fp,0(sp)
   10444:	dec00104 	addi	sp,sp,4
   10448:	f800283a 	ret

0001044c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1044c:	defff604 	addi	sp,sp,-40
   10450:	dfc00915 	stw	ra,36(sp)
   10454:	df000815 	stw	fp,32(sp)
   10458:	df000804 	addi	fp,sp,32
   1045c:	e13ffd15 	stw	r4,-12(fp)
   10460:	e17ffe15 	stw	r5,-8(fp)
   10464:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   10468:	00bfffc4 	movi	r2,-1
   1046c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   10470:	00bffb44 	movi	r2,-19
   10474:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   10478:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1047c:	d1600804 	addi	r5,gp,-32736
   10480:	e13ffd17 	ldw	r4,-12(fp)
   10484:	00107680 	call	10768 <alt_find_dev>
   10488:	e0bff815 	stw	r2,-32(fp)
   1048c:	e0bff817 	ldw	r2,-32(fp)
   10490:	1000051e 	bne	r2,zero,104a8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   10494:	e13ffd17 	ldw	r4,-12(fp)
   10498:	00107f80 	call	107f8 <alt_find_file>
   1049c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   104a0:	00800044 	movi	r2,1
   104a4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   104a8:	e0bff817 	ldw	r2,-32(fp)
   104ac:	10002926 	beq	r2,zero,10554 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   104b0:	e13ff817 	ldw	r4,-32(fp)
   104b4:	00109000 	call	10900 <alt_get_fd>
   104b8:	e0bff915 	stw	r2,-28(fp)
   104bc:	e0bff917 	ldw	r2,-28(fp)
   104c0:	1000030e 	bge	r2,zero,104d0 <open+0x84>
    {
      status = index;
   104c4:	e0bff917 	ldw	r2,-28(fp)
   104c8:	e0bffa15 	stw	r2,-24(fp)
   104cc:	00002306 	br	1055c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   104d0:	e0bff917 	ldw	r2,-28(fp)
   104d4:	10c00324 	muli	r3,r2,12
   104d8:	00800074 	movhi	r2,1
   104dc:	1087b104 	addi	r2,r2,7876
   104e0:	1885883a 	add	r2,r3,r2
   104e4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   104e8:	e0fffe17 	ldw	r3,-8(fp)
   104ec:	00900034 	movhi	r2,16384
   104f0:	10bfffc4 	addi	r2,r2,-1
   104f4:	1886703a 	and	r3,r3,r2
   104f8:	e0bffc17 	ldw	r2,-16(fp)
   104fc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   10500:	e0bffb17 	ldw	r2,-20(fp)
   10504:	1000051e 	bne	r2,zero,1051c <open+0xd0>
   10508:	e13ffc17 	ldw	r4,-16(fp)
   1050c:	00103880 	call	10388 <alt_file_locked>
   10510:	e0bffa15 	stw	r2,-24(fp)
   10514:	e0bffa17 	ldw	r2,-24(fp)
   10518:	10001016 	blt	r2,zero,1055c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1051c:	e0bff817 	ldw	r2,-32(fp)
   10520:	10800317 	ldw	r2,12(r2)
   10524:	10000826 	beq	r2,zero,10548 <open+0xfc>
   10528:	e0bff817 	ldw	r2,-32(fp)
   1052c:	10800317 	ldw	r2,12(r2)
   10530:	e1ffff17 	ldw	r7,-4(fp)
   10534:	e1bffe17 	ldw	r6,-8(fp)
   10538:	e17ffd17 	ldw	r5,-12(fp)
   1053c:	e13ffc17 	ldw	r4,-16(fp)
   10540:	103ee83a 	callr	r2
   10544:	00000106 	br	1054c <open+0x100>
   10548:	0005883a 	mov	r2,zero
   1054c:	e0bffa15 	stw	r2,-24(fp)
   10550:	00000206 	br	1055c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   10554:	00bffb44 	movi	r2,-19
   10558:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1055c:	e0bffa17 	ldw	r2,-24(fp)
   10560:	1000090e 	bge	r2,zero,10588 <open+0x13c>
  {
    alt_release_fd (index);  
   10564:	e13ff917 	ldw	r4,-28(fp)
   10568:	000eaf80 	call	eaf8 <alt_release_fd>
    ALT_ERRNO = -status;
   1056c:	001034c0 	call	1034c <alt_get_errno>
   10570:	1007883a 	mov	r3,r2
   10574:	e0bffa17 	ldw	r2,-24(fp)
   10578:	0085c83a 	sub	r2,zero,r2
   1057c:	18800015 	stw	r2,0(r3)
    return -1;
   10580:	00bfffc4 	movi	r2,-1
   10584:	00000106 	br	1058c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   10588:	e0bff917 	ldw	r2,-28(fp)
}
   1058c:	e037883a 	mov	sp,fp
   10590:	dfc00117 	ldw	ra,4(sp)
   10594:	df000017 	ldw	fp,0(sp)
   10598:	dec00204 	addi	sp,sp,8
   1059c:	f800283a 	ret

000105a0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   105a0:	defffa04 	addi	sp,sp,-24
   105a4:	df000515 	stw	fp,20(sp)
   105a8:	df000504 	addi	fp,sp,20
   105ac:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   105b0:	0005303a 	rdctl	r2,status
   105b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   105b8:	e0fffc17 	ldw	r3,-16(fp)
   105bc:	00bfff84 	movi	r2,-2
   105c0:	1884703a 	and	r2,r3,r2
   105c4:	1001703a 	wrctl	status,r2
  
  return context;
   105c8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   105cc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   105d0:	e0bfff17 	ldw	r2,-4(fp)
   105d4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   105d8:	e0bffd17 	ldw	r2,-12(fp)
   105dc:	10800017 	ldw	r2,0(r2)
   105e0:	e0fffd17 	ldw	r3,-12(fp)
   105e4:	18c00117 	ldw	r3,4(r3)
   105e8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   105ec:	e0bffd17 	ldw	r2,-12(fp)
   105f0:	10800117 	ldw	r2,4(r2)
   105f4:	e0fffd17 	ldw	r3,-12(fp)
   105f8:	18c00017 	ldw	r3,0(r3)
   105fc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   10600:	e0bffd17 	ldw	r2,-12(fp)
   10604:	e0fffd17 	ldw	r3,-12(fp)
   10608:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1060c:	e0bffd17 	ldw	r2,-12(fp)
   10610:	e0fffd17 	ldw	r3,-12(fp)
   10614:	10c00015 	stw	r3,0(r2)
   10618:	e0bffb17 	ldw	r2,-20(fp)
   1061c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10620:	e0bffe17 	ldw	r2,-8(fp)
   10624:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   10628:	0001883a 	nop
   1062c:	e037883a 	mov	sp,fp
   10630:	df000017 	ldw	fp,0(sp)
   10634:	dec00104 	addi	sp,sp,4
   10638:	f800283a 	ret

0001063c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1063c:	defffb04 	addi	sp,sp,-20
   10640:	dfc00415 	stw	ra,16(sp)
   10644:	df000315 	stw	fp,12(sp)
   10648:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1064c:	d0a00e17 	ldw	r2,-32712(gp)
   10650:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10654:	d0a6e317 	ldw	r2,-25716(gp)
   10658:	10800044 	addi	r2,r2,1
   1065c:	d0a6e315 	stw	r2,-25716(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10660:	00002e06 	br	1071c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   10664:	e0bffd17 	ldw	r2,-12(fp)
   10668:	10800017 	ldw	r2,0(r2)
   1066c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10670:	e0bffd17 	ldw	r2,-12(fp)
   10674:	10800403 	ldbu	r2,16(r2)
   10678:	10803fcc 	andi	r2,r2,255
   1067c:	10000426 	beq	r2,zero,10690 <alt_tick+0x54>
   10680:	d0a6e317 	ldw	r2,-25716(gp)
   10684:	1000021e 	bne	r2,zero,10690 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   10688:	e0bffd17 	ldw	r2,-12(fp)
   1068c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   10690:	e0bffd17 	ldw	r2,-12(fp)
   10694:	10800217 	ldw	r2,8(r2)
   10698:	d0e6e317 	ldw	r3,-25716(gp)
   1069c:	18801d36 	bltu	r3,r2,10714 <alt_tick+0xd8>
   106a0:	e0bffd17 	ldw	r2,-12(fp)
   106a4:	10800403 	ldbu	r2,16(r2)
   106a8:	10803fcc 	andi	r2,r2,255
   106ac:	1000191e 	bne	r2,zero,10714 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   106b0:	e0bffd17 	ldw	r2,-12(fp)
   106b4:	10800317 	ldw	r2,12(r2)
   106b8:	e0fffd17 	ldw	r3,-12(fp)
   106bc:	18c00517 	ldw	r3,20(r3)
   106c0:	1809883a 	mov	r4,r3
   106c4:	103ee83a 	callr	r2
   106c8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   106cc:	e0bfff17 	ldw	r2,-4(fp)
   106d0:	1000031e 	bne	r2,zero,106e0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   106d4:	e13ffd17 	ldw	r4,-12(fp)
   106d8:	00105a00 	call	105a0 <alt_alarm_stop>
   106dc:	00000d06 	br	10714 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   106e0:	e0bffd17 	ldw	r2,-12(fp)
   106e4:	10c00217 	ldw	r3,8(r2)
   106e8:	e0bfff17 	ldw	r2,-4(fp)
   106ec:	1887883a 	add	r3,r3,r2
   106f0:	e0bffd17 	ldw	r2,-12(fp)
   106f4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   106f8:	e0bffd17 	ldw	r2,-12(fp)
   106fc:	10c00217 	ldw	r3,8(r2)
   10700:	d0a6e317 	ldw	r2,-25716(gp)
   10704:	1880032e 	bgeu	r3,r2,10714 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   10708:	e0bffd17 	ldw	r2,-12(fp)
   1070c:	00c00044 	movi	r3,1
   10710:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   10714:	e0bffe17 	ldw	r2,-8(fp)
   10718:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1071c:	e0fffd17 	ldw	r3,-12(fp)
   10720:	d0a00e04 	addi	r2,gp,-32712
   10724:	18bfcf1e 	bne	r3,r2,10664 <__alt_data_end+0xff010664>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   10728:	0001883a 	nop
}
   1072c:	0001883a 	nop
   10730:	e037883a 	mov	sp,fp
   10734:	dfc00117 	ldw	ra,4(sp)
   10738:	df000017 	ldw	fp,0(sp)
   1073c:	dec00204 	addi	sp,sp,8
   10740:	f800283a 	ret

00010744 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   10744:	deffff04 	addi	sp,sp,-4
   10748:	df000015 	stw	fp,0(sp)
   1074c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   10750:	000170fa 	wrctl	ienable,zero
}
   10754:	0001883a 	nop
   10758:	e037883a 	mov	sp,fp
   1075c:	df000017 	ldw	fp,0(sp)
   10760:	dec00104 	addi	sp,sp,4
   10764:	f800283a 	ret

00010768 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10768:	defffa04 	addi	sp,sp,-24
   1076c:	dfc00515 	stw	ra,20(sp)
   10770:	df000415 	stw	fp,16(sp)
   10774:	df000404 	addi	fp,sp,16
   10778:	e13ffe15 	stw	r4,-8(fp)
   1077c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   10780:	e0bfff17 	ldw	r2,-4(fp)
   10784:	10800017 	ldw	r2,0(r2)
   10788:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1078c:	e13ffe17 	ldw	r4,-8(fp)
   10790:	000247c0 	call	247c <strlen>
   10794:	10800044 	addi	r2,r2,1
   10798:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1079c:	00000d06 	br	107d4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   107a0:	e0bffc17 	ldw	r2,-16(fp)
   107a4:	10800217 	ldw	r2,8(r2)
   107a8:	e0fffd17 	ldw	r3,-12(fp)
   107ac:	180d883a 	mov	r6,r3
   107b0:	e17ffe17 	ldw	r5,-8(fp)
   107b4:	1009883a 	mov	r4,r2
   107b8:	0010b1c0 	call	10b1c <memcmp>
   107bc:	1000021e 	bne	r2,zero,107c8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   107c0:	e0bffc17 	ldw	r2,-16(fp)
   107c4:	00000706 	br	107e4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   107c8:	e0bffc17 	ldw	r2,-16(fp)
   107cc:	10800017 	ldw	r2,0(r2)
   107d0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   107d4:	e0fffc17 	ldw	r3,-16(fp)
   107d8:	e0bfff17 	ldw	r2,-4(fp)
   107dc:	18bff01e 	bne	r3,r2,107a0 <__alt_data_end+0xff0107a0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   107e0:	0005883a 	mov	r2,zero
}
   107e4:	e037883a 	mov	sp,fp
   107e8:	dfc00117 	ldw	ra,4(sp)
   107ec:	df000017 	ldw	fp,0(sp)
   107f0:	dec00204 	addi	sp,sp,8
   107f4:	f800283a 	ret

000107f8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   107f8:	defffb04 	addi	sp,sp,-20
   107fc:	dfc00415 	stw	ra,16(sp)
   10800:	df000315 	stw	fp,12(sp)
   10804:	df000304 	addi	fp,sp,12
   10808:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1080c:	d0a00617 	ldw	r2,-32744(gp)
   10810:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10814:	00003106 	br	108dc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   10818:	e0bffd17 	ldw	r2,-12(fp)
   1081c:	10800217 	ldw	r2,8(r2)
   10820:	1009883a 	mov	r4,r2
   10824:	000247c0 	call	247c <strlen>
   10828:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1082c:	e0bffd17 	ldw	r2,-12(fp)
   10830:	10c00217 	ldw	r3,8(r2)
   10834:	e0bffe17 	ldw	r2,-8(fp)
   10838:	10bfffc4 	addi	r2,r2,-1
   1083c:	1885883a 	add	r2,r3,r2
   10840:	10800003 	ldbu	r2,0(r2)
   10844:	10803fcc 	andi	r2,r2,255
   10848:	1080201c 	xori	r2,r2,128
   1084c:	10bfe004 	addi	r2,r2,-128
   10850:	10800bd8 	cmpnei	r2,r2,47
   10854:	1000031e 	bne	r2,zero,10864 <alt_find_file+0x6c>
    {
      len -= 1;
   10858:	e0bffe17 	ldw	r2,-8(fp)
   1085c:	10bfffc4 	addi	r2,r2,-1
   10860:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10864:	e0bffe17 	ldw	r2,-8(fp)
   10868:	e0ffff17 	ldw	r3,-4(fp)
   1086c:	1885883a 	add	r2,r3,r2
   10870:	10800003 	ldbu	r2,0(r2)
   10874:	10803fcc 	andi	r2,r2,255
   10878:	1080201c 	xori	r2,r2,128
   1087c:	10bfe004 	addi	r2,r2,-128
   10880:	10800be0 	cmpeqi	r2,r2,47
   10884:	1000081e 	bne	r2,zero,108a8 <alt_find_file+0xb0>
   10888:	e0bffe17 	ldw	r2,-8(fp)
   1088c:	e0ffff17 	ldw	r3,-4(fp)
   10890:	1885883a 	add	r2,r3,r2
   10894:	10800003 	ldbu	r2,0(r2)
   10898:	10803fcc 	andi	r2,r2,255
   1089c:	1080201c 	xori	r2,r2,128
   108a0:	10bfe004 	addi	r2,r2,-128
   108a4:	10000a1e 	bne	r2,zero,108d0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   108a8:	e0bffd17 	ldw	r2,-12(fp)
   108ac:	10800217 	ldw	r2,8(r2)
   108b0:	e0fffe17 	ldw	r3,-8(fp)
   108b4:	180d883a 	mov	r6,r3
   108b8:	e17fff17 	ldw	r5,-4(fp)
   108bc:	1009883a 	mov	r4,r2
   108c0:	0010b1c0 	call	10b1c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   108c4:	1000021e 	bne	r2,zero,108d0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   108c8:	e0bffd17 	ldw	r2,-12(fp)
   108cc:	00000706 	br	108ec <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   108d0:	e0bffd17 	ldw	r2,-12(fp)
   108d4:	10800017 	ldw	r2,0(r2)
   108d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   108dc:	e0fffd17 	ldw	r3,-12(fp)
   108e0:	d0a00604 	addi	r2,gp,-32744
   108e4:	18bfcc1e 	bne	r3,r2,10818 <__alt_data_end+0xff010818>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   108e8:	0005883a 	mov	r2,zero
}
   108ec:	e037883a 	mov	sp,fp
   108f0:	dfc00117 	ldw	ra,4(sp)
   108f4:	df000017 	ldw	fp,0(sp)
   108f8:	dec00204 	addi	sp,sp,8
   108fc:	f800283a 	ret

00010900 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   10900:	defffc04 	addi	sp,sp,-16
   10904:	df000315 	stw	fp,12(sp)
   10908:	df000304 	addi	fp,sp,12
   1090c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   10910:	00bffa04 	movi	r2,-24
   10914:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10918:	e03ffd15 	stw	zero,-12(fp)
   1091c:	00001906 	br	10984 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   10920:	00800074 	movhi	r2,1
   10924:	1087b104 	addi	r2,r2,7876
   10928:	e0fffd17 	ldw	r3,-12(fp)
   1092c:	18c00324 	muli	r3,r3,12
   10930:	10c5883a 	add	r2,r2,r3
   10934:	10800017 	ldw	r2,0(r2)
   10938:	10000f1e 	bne	r2,zero,10978 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   1093c:	00800074 	movhi	r2,1
   10940:	1087b104 	addi	r2,r2,7876
   10944:	e0fffd17 	ldw	r3,-12(fp)
   10948:	18c00324 	muli	r3,r3,12
   1094c:	10c5883a 	add	r2,r2,r3
   10950:	e0ffff17 	ldw	r3,-4(fp)
   10954:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   10958:	d0e00a17 	ldw	r3,-32728(gp)
   1095c:	e0bffd17 	ldw	r2,-12(fp)
   10960:	1880020e 	bge	r3,r2,1096c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   10964:	e0bffd17 	ldw	r2,-12(fp)
   10968:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   1096c:	e0bffd17 	ldw	r2,-12(fp)
   10970:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   10974:	00000606 	br	10990 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10978:	e0bffd17 	ldw	r2,-12(fp)
   1097c:	10800044 	addi	r2,r2,1
   10980:	e0bffd15 	stw	r2,-12(fp)
   10984:	e0bffd17 	ldw	r2,-12(fp)
   10988:	10800810 	cmplti	r2,r2,32
   1098c:	103fe41e 	bne	r2,zero,10920 <__alt_data_end+0xff010920>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   10990:	e0bffe17 	ldw	r2,-8(fp)
}
   10994:	e037883a 	mov	sp,fp
   10998:	df000017 	ldw	fp,0(sp)
   1099c:	dec00104 	addi	sp,sp,4
   109a0:	f800283a 	ret

000109a4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   109a4:	defffb04 	addi	sp,sp,-20
   109a8:	df000415 	stw	fp,16(sp)
   109ac:	df000404 	addi	fp,sp,16
   109b0:	e13ffe15 	stw	r4,-8(fp)
   109b4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   109b8:	e0bfff17 	ldw	r2,-4(fp)
   109bc:	10840070 	cmpltui	r2,r2,4097
   109c0:	1000021e 	bne	r2,zero,109cc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   109c4:	00840004 	movi	r2,4096
   109c8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   109cc:	e0fffe17 	ldw	r3,-8(fp)
   109d0:	e0bfff17 	ldw	r2,-4(fp)
   109d4:	1885883a 	add	r2,r3,r2
   109d8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   109dc:	e0bffe17 	ldw	r2,-8(fp)
   109e0:	e0bffc15 	stw	r2,-16(fp)
   109e4:	00000506 	br	109fc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   109e8:	e0bffc17 	ldw	r2,-16(fp)
   109ec:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   109f0:	e0bffc17 	ldw	r2,-16(fp)
   109f4:	10800804 	addi	r2,r2,32
   109f8:	e0bffc15 	stw	r2,-16(fp)
   109fc:	e0fffc17 	ldw	r3,-16(fp)
   10a00:	e0bffd17 	ldw	r2,-12(fp)
   10a04:	18bff836 	bltu	r3,r2,109e8 <__alt_data_end+0xff0109e8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   10a08:	e0bffe17 	ldw	r2,-8(fp)
   10a0c:	108007cc 	andi	r2,r2,31
   10a10:	10000226 	beq	r2,zero,10a1c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   10a14:	e0bffc17 	ldw	r2,-16(fp)
   10a18:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   10a1c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   10a20:	0001883a 	nop
   10a24:	e037883a 	mov	sp,fp
   10a28:	df000017 	ldw	fp,0(sp)
   10a2c:	dec00104 	addi	sp,sp,4
   10a30:	f800283a 	ret

00010a34 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   10a34:	defffe04 	addi	sp,sp,-8
   10a38:	df000115 	stw	fp,4(sp)
   10a3c:	df000104 	addi	fp,sp,4
   10a40:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   10a44:	e0bfff17 	ldw	r2,-4(fp)
   10a48:	10bffe84 	addi	r2,r2,-6
   10a4c:	10c00428 	cmpgeui	r3,r2,16
   10a50:	18001a1e 	bne	r3,zero,10abc <alt_exception_cause_generated_bad_addr+0x88>
   10a54:	100690ba 	slli	r3,r2,2
   10a58:	00800074 	movhi	r2,1
   10a5c:	10829b04 	addi	r2,r2,2668
   10a60:	1885883a 	add	r2,r3,r2
   10a64:	10800017 	ldw	r2,0(r2)
   10a68:	1000683a 	jmp	r2
   10a6c:	00010aac 	andhi	zero,zero,1066
   10a70:	00010aac 	andhi	zero,zero,1066
   10a74:	00010abc 	xorhi	zero,zero,1066
   10a78:	00010abc 	xorhi	zero,zero,1066
   10a7c:	00010abc 	xorhi	zero,zero,1066
   10a80:	00010aac 	andhi	zero,zero,1066
   10a84:	00010ab4 	movhi	zero,1066
   10a88:	00010abc 	xorhi	zero,zero,1066
   10a8c:	00010aac 	andhi	zero,zero,1066
   10a90:	00010aac 	andhi	zero,zero,1066
   10a94:	00010abc 	xorhi	zero,zero,1066
   10a98:	00010aac 	andhi	zero,zero,1066
   10a9c:	00010ab4 	movhi	zero,1066
   10aa0:	00010abc 	xorhi	zero,zero,1066
   10aa4:	00010abc 	xorhi	zero,zero,1066
   10aa8:	00010aac 	andhi	zero,zero,1066
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   10aac:	00800044 	movi	r2,1
   10ab0:	00000306 	br	10ac0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   10ab4:	0005883a 	mov	r2,zero
   10ab8:	00000106 	br	10ac0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   10abc:	0005883a 	mov	r2,zero
  }
}
   10ac0:	e037883a 	mov	sp,fp
   10ac4:	df000017 	ldw	fp,0(sp)
   10ac8:	dec00104 	addi	sp,sp,4
   10acc:	f800283a 	ret

00010ad0 <atexit>:
   10ad0:	200b883a 	mov	r5,r4
   10ad4:	000f883a 	mov	r7,zero
   10ad8:	000d883a 	mov	r6,zero
   10adc:	0009883a 	mov	r4,zero
   10ae0:	0010b981 	jmpi	10b98 <__register_exitproc>

00010ae4 <exit>:
   10ae4:	defffe04 	addi	sp,sp,-8
   10ae8:	000b883a 	mov	r5,zero
   10aec:	dc000015 	stw	r16,0(sp)
   10af0:	dfc00115 	stw	ra,4(sp)
   10af4:	2021883a 	mov	r16,r4
   10af8:	0010cb00 	call	10cb0 <__call_exitprocs>
   10afc:	00800074 	movhi	r2,1
   10b00:	108c2b04 	addi	r2,r2,12460
   10b04:	11000017 	ldw	r4,0(r2)
   10b08:	20800f17 	ldw	r2,60(r4)
   10b0c:	10000126 	beq	r2,zero,10b14 <exit+0x30>
   10b10:	103ee83a 	callr	r2
   10b14:	8009883a 	mov	r4,r16
   10b18:	0010e300 	call	10e30 <_exit>

00010b1c <memcmp>:
   10b1c:	01c000c4 	movi	r7,3
   10b20:	3980192e 	bgeu	r7,r6,10b88 <memcmp+0x6c>
   10b24:	2144b03a 	or	r2,r4,r5
   10b28:	11c4703a 	and	r2,r2,r7
   10b2c:	10000f26 	beq	r2,zero,10b6c <memcmp+0x50>
   10b30:	20800003 	ldbu	r2,0(r4)
   10b34:	28c00003 	ldbu	r3,0(r5)
   10b38:	10c0151e 	bne	r2,r3,10b90 <memcmp+0x74>
   10b3c:	31bfff84 	addi	r6,r6,-2
   10b40:	01ffffc4 	movi	r7,-1
   10b44:	00000406 	br	10b58 <memcmp+0x3c>
   10b48:	20800003 	ldbu	r2,0(r4)
   10b4c:	28c00003 	ldbu	r3,0(r5)
   10b50:	31bfffc4 	addi	r6,r6,-1
   10b54:	10c00e1e 	bne	r2,r3,10b90 <memcmp+0x74>
   10b58:	21000044 	addi	r4,r4,1
   10b5c:	29400044 	addi	r5,r5,1
   10b60:	31fff91e 	bne	r6,r7,10b48 <__alt_data_end+0xff010b48>
   10b64:	0005883a 	mov	r2,zero
   10b68:	f800283a 	ret
   10b6c:	20c00017 	ldw	r3,0(r4)
   10b70:	28800017 	ldw	r2,0(r5)
   10b74:	18bfee1e 	bne	r3,r2,10b30 <__alt_data_end+0xff010b30>
   10b78:	31bfff04 	addi	r6,r6,-4
   10b7c:	21000104 	addi	r4,r4,4
   10b80:	29400104 	addi	r5,r5,4
   10b84:	39bff936 	bltu	r7,r6,10b6c <__alt_data_end+0xff010b6c>
   10b88:	303fe91e 	bne	r6,zero,10b30 <__alt_data_end+0xff010b30>
   10b8c:	003ff506 	br	10b64 <__alt_data_end+0xff010b64>
   10b90:	10c5c83a 	sub	r2,r2,r3
   10b94:	f800283a 	ret

00010b98 <__register_exitproc>:
   10b98:	defffa04 	addi	sp,sp,-24
   10b9c:	dc000315 	stw	r16,12(sp)
   10ba0:	04000074 	movhi	r16,1
   10ba4:	840c2b04 	addi	r16,r16,12460
   10ba8:	80c00017 	ldw	r3,0(r16)
   10bac:	dc400415 	stw	r17,16(sp)
   10bb0:	dfc00515 	stw	ra,20(sp)
   10bb4:	18805217 	ldw	r2,328(r3)
   10bb8:	2023883a 	mov	r17,r4
   10bbc:	10003726 	beq	r2,zero,10c9c <__register_exitproc+0x104>
   10bc0:	10c00117 	ldw	r3,4(r2)
   10bc4:	010007c4 	movi	r4,31
   10bc8:	20c00e16 	blt	r4,r3,10c04 <__register_exitproc+0x6c>
   10bcc:	1a000044 	addi	r8,r3,1
   10bd0:	8800221e 	bne	r17,zero,10c5c <__register_exitproc+0xc4>
   10bd4:	18c00084 	addi	r3,r3,2
   10bd8:	18c7883a 	add	r3,r3,r3
   10bdc:	18c7883a 	add	r3,r3,r3
   10be0:	12000115 	stw	r8,4(r2)
   10be4:	10c7883a 	add	r3,r2,r3
   10be8:	19400015 	stw	r5,0(r3)
   10bec:	0005883a 	mov	r2,zero
   10bf0:	dfc00517 	ldw	ra,20(sp)
   10bf4:	dc400417 	ldw	r17,16(sp)
   10bf8:	dc000317 	ldw	r16,12(sp)
   10bfc:	dec00604 	addi	sp,sp,24
   10c00:	f800283a 	ret
   10c04:	00800034 	movhi	r2,0
   10c08:	1086ad04 	addi	r2,r2,6836
   10c0c:	10002626 	beq	r2,zero,10ca8 <__register_exitproc+0x110>
   10c10:	01006404 	movi	r4,400
   10c14:	d9400015 	stw	r5,0(sp)
   10c18:	d9800115 	stw	r6,4(sp)
   10c1c:	d9c00215 	stw	r7,8(sp)
   10c20:	0001ab40 	call	1ab4 <malloc>
   10c24:	d9400017 	ldw	r5,0(sp)
   10c28:	d9800117 	ldw	r6,4(sp)
   10c2c:	d9c00217 	ldw	r7,8(sp)
   10c30:	10001d26 	beq	r2,zero,10ca8 <__register_exitproc+0x110>
   10c34:	81000017 	ldw	r4,0(r16)
   10c38:	10000115 	stw	zero,4(r2)
   10c3c:	02000044 	movi	r8,1
   10c40:	22405217 	ldw	r9,328(r4)
   10c44:	0007883a 	mov	r3,zero
   10c48:	12400015 	stw	r9,0(r2)
   10c4c:	20805215 	stw	r2,328(r4)
   10c50:	10006215 	stw	zero,392(r2)
   10c54:	10006315 	stw	zero,396(r2)
   10c58:	883fde26 	beq	r17,zero,10bd4 <__alt_data_end+0xff010bd4>
   10c5c:	18c9883a 	add	r4,r3,r3
   10c60:	2109883a 	add	r4,r4,r4
   10c64:	1109883a 	add	r4,r2,r4
   10c68:	21802215 	stw	r6,136(r4)
   10c6c:	01800044 	movi	r6,1
   10c70:	12406217 	ldw	r9,392(r2)
   10c74:	30cc983a 	sll	r6,r6,r3
   10c78:	4992b03a 	or	r9,r9,r6
   10c7c:	12406215 	stw	r9,392(r2)
   10c80:	21c04215 	stw	r7,264(r4)
   10c84:	01000084 	movi	r4,2
   10c88:	893fd21e 	bne	r17,r4,10bd4 <__alt_data_end+0xff010bd4>
   10c8c:	11006317 	ldw	r4,396(r2)
   10c90:	218cb03a 	or	r6,r4,r6
   10c94:	11806315 	stw	r6,396(r2)
   10c98:	003fce06 	br	10bd4 <__alt_data_end+0xff010bd4>
   10c9c:	18805304 	addi	r2,r3,332
   10ca0:	18805215 	stw	r2,328(r3)
   10ca4:	003fc606 	br	10bc0 <__alt_data_end+0xff010bc0>
   10ca8:	00bfffc4 	movi	r2,-1
   10cac:	003fd006 	br	10bf0 <__alt_data_end+0xff010bf0>

00010cb0 <__call_exitprocs>:
   10cb0:	defff504 	addi	sp,sp,-44
   10cb4:	df000915 	stw	fp,36(sp)
   10cb8:	dd400615 	stw	r21,24(sp)
   10cbc:	dc800315 	stw	r18,12(sp)
   10cc0:	dfc00a15 	stw	ra,40(sp)
   10cc4:	ddc00815 	stw	r23,32(sp)
   10cc8:	dd800715 	stw	r22,28(sp)
   10ccc:	dd000515 	stw	r20,20(sp)
   10cd0:	dcc00415 	stw	r19,16(sp)
   10cd4:	dc400215 	stw	r17,8(sp)
   10cd8:	dc000115 	stw	r16,4(sp)
   10cdc:	d9000015 	stw	r4,0(sp)
   10ce0:	2839883a 	mov	fp,r5
   10ce4:	04800044 	movi	r18,1
   10ce8:	057fffc4 	movi	r21,-1
   10cec:	00800074 	movhi	r2,1
   10cf0:	108c2b04 	addi	r2,r2,12460
   10cf4:	12000017 	ldw	r8,0(r2)
   10cf8:	45005217 	ldw	r20,328(r8)
   10cfc:	44c05204 	addi	r19,r8,328
   10d00:	a0001c26 	beq	r20,zero,10d74 <__call_exitprocs+0xc4>
   10d04:	a0800117 	ldw	r2,4(r20)
   10d08:	15ffffc4 	addi	r23,r2,-1
   10d0c:	b8000d16 	blt	r23,zero,10d44 <__call_exitprocs+0x94>
   10d10:	14000044 	addi	r16,r2,1
   10d14:	8421883a 	add	r16,r16,r16
   10d18:	8421883a 	add	r16,r16,r16
   10d1c:	84402004 	addi	r17,r16,128
   10d20:	a463883a 	add	r17,r20,r17
   10d24:	a421883a 	add	r16,r20,r16
   10d28:	e0001e26 	beq	fp,zero,10da4 <__call_exitprocs+0xf4>
   10d2c:	80804017 	ldw	r2,256(r16)
   10d30:	e0801c26 	beq	fp,r2,10da4 <__call_exitprocs+0xf4>
   10d34:	bdffffc4 	addi	r23,r23,-1
   10d38:	843fff04 	addi	r16,r16,-4
   10d3c:	8c7fff04 	addi	r17,r17,-4
   10d40:	bd7ff91e 	bne	r23,r21,10d28 <__alt_data_end+0xff010d28>
   10d44:	00800034 	movhi	r2,0
   10d48:	1086b204 	addi	r2,r2,6856
   10d4c:	10000926 	beq	r2,zero,10d74 <__call_exitprocs+0xc4>
   10d50:	a0800117 	ldw	r2,4(r20)
   10d54:	1000301e 	bne	r2,zero,10e18 <__call_exitprocs+0x168>
   10d58:	a0800017 	ldw	r2,0(r20)
   10d5c:	10003226 	beq	r2,zero,10e28 <__call_exitprocs+0x178>
   10d60:	a009883a 	mov	r4,r20
   10d64:	98800015 	stw	r2,0(r19)
   10d68:	0001ac80 	call	1ac8 <free>
   10d6c:	9d000017 	ldw	r20,0(r19)
   10d70:	a03fe41e 	bne	r20,zero,10d04 <__alt_data_end+0xff010d04>
   10d74:	dfc00a17 	ldw	ra,40(sp)
   10d78:	df000917 	ldw	fp,36(sp)
   10d7c:	ddc00817 	ldw	r23,32(sp)
   10d80:	dd800717 	ldw	r22,28(sp)
   10d84:	dd400617 	ldw	r21,24(sp)
   10d88:	dd000517 	ldw	r20,20(sp)
   10d8c:	dcc00417 	ldw	r19,16(sp)
   10d90:	dc800317 	ldw	r18,12(sp)
   10d94:	dc400217 	ldw	r17,8(sp)
   10d98:	dc000117 	ldw	r16,4(sp)
   10d9c:	dec00b04 	addi	sp,sp,44
   10da0:	f800283a 	ret
   10da4:	a0800117 	ldw	r2,4(r20)
   10da8:	80c00017 	ldw	r3,0(r16)
   10dac:	10bfffc4 	addi	r2,r2,-1
   10db0:	15c01426 	beq	r2,r23,10e04 <__call_exitprocs+0x154>
   10db4:	80000015 	stw	zero,0(r16)
   10db8:	183fde26 	beq	r3,zero,10d34 <__alt_data_end+0xff010d34>
   10dbc:	95c8983a 	sll	r4,r18,r23
   10dc0:	a0806217 	ldw	r2,392(r20)
   10dc4:	a5800117 	ldw	r22,4(r20)
   10dc8:	2084703a 	and	r2,r4,r2
   10dcc:	10000b26 	beq	r2,zero,10dfc <__call_exitprocs+0x14c>
   10dd0:	a0806317 	ldw	r2,396(r20)
   10dd4:	2088703a 	and	r4,r4,r2
   10dd8:	20000c1e 	bne	r4,zero,10e0c <__call_exitprocs+0x15c>
   10ddc:	89400017 	ldw	r5,0(r17)
   10de0:	d9000017 	ldw	r4,0(sp)
   10de4:	183ee83a 	callr	r3
   10de8:	a0800117 	ldw	r2,4(r20)
   10dec:	15bfbf1e 	bne	r2,r22,10cec <__alt_data_end+0xff010cec>
   10df0:	98800017 	ldw	r2,0(r19)
   10df4:	153fcf26 	beq	r2,r20,10d34 <__alt_data_end+0xff010d34>
   10df8:	003fbc06 	br	10cec <__alt_data_end+0xff010cec>
   10dfc:	183ee83a 	callr	r3
   10e00:	003ff906 	br	10de8 <__alt_data_end+0xff010de8>
   10e04:	a5c00115 	stw	r23,4(r20)
   10e08:	003feb06 	br	10db8 <__alt_data_end+0xff010db8>
   10e0c:	89000017 	ldw	r4,0(r17)
   10e10:	183ee83a 	callr	r3
   10e14:	003ff406 	br	10de8 <__alt_data_end+0xff010de8>
   10e18:	a0800017 	ldw	r2,0(r20)
   10e1c:	a027883a 	mov	r19,r20
   10e20:	1029883a 	mov	r20,r2
   10e24:	003fb606 	br	10d00 <__alt_data_end+0xff010d00>
   10e28:	0005883a 	mov	r2,zero
   10e2c:	003ffb06 	br	10e1c <__alt_data_end+0xff010e1c>

00010e30 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   10e30:	defffd04 	addi	sp,sp,-12
   10e34:	df000215 	stw	fp,8(sp)
   10e38:	df000204 	addi	fp,sp,8
   10e3c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   10e40:	0001883a 	nop
   10e44:	e0bfff17 	ldw	r2,-4(fp)
   10e48:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   10e4c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   10e50:	10000226 	beq	r2,zero,10e5c <_exit+0x2c>
    ALT_SIM_FAIL();
   10e54:	002af070 	cmpltui	zero,zero,43969
   10e58:	00000106 	br	10e60 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   10e5c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   10e60:	003fff06 	br	10e60 <__alt_data_end+0xff010e60>
