
sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00011e5c memsz 0x00011e5c flags r-x
    LOAD off    0x00012e7c vaddr 0x00011e7c paddr 0x00013968 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00015454 vaddr 0x00015454 paddr 0x00015454 align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001147c  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007bc  000116c0  000116c0  000126c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  00011e7c  00013968  00012e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  00015454  00015454  00015454  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  000155e4  000155e4  00014968  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00014968  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001038  00000000  00000000  00014990  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00024f2c  00000000  00000000  000159c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000995f  00000000  00000000  0003a8f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c1ef  00000000  00000000  00044253  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002748  00000000  00000000  00050444  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003dfc  00000000  00000000  00052b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000178c0  00000000  00000000  00056988  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0006e248  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018d8  00000000  00000000  0006e298  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007356e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00073571  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007357d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007357e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007357f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00073583  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00073587  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0007358b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00073594  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0007359d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  000735a6  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000049  00000000  00000000  000735b1  2**0
                  CONTENTS, READONLY
 29 .jdi          00005ad8  00000000  00000000  000735fa  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000723e4  00000000  00000000  000790d2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
000116c0 l    d  .rodata	00000000 .rodata
00011e7c l    d  .rwdata	00000000 .rwdata
00015454 l    d  .bss	00000000 .bss
000155e4 l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/olivi/master/embHard/mse_embHard_phase2/mse_demo/software/sobel_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
000019dc l     F .text	00000330 sobel_mac
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00011bca l     O .rodata	00000010 zeroes.4404
00004fac l     F .text	000000bc __sbprintf
00011bda l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000051bc l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006cec l     F .text	00000008 __fp_unlock
00006d00 l     F .text	0000019c __sinit.part.1
00006e9c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00012284 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
000126c8 l     O .rwdata	00000020 lc_ctype_charset
000126a8 l     O .rwdata	00000020 lc_message_charset
000126e8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00011c0c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009a38 l     F .text	000000fc __sprint_r.part.0
00011d40 l     O .rodata	00000010 blanks.4348
00011d30 l     O .rodata	00000010 zeroes.4349
0000afc4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000ec80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000ed8c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000edb8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000eea4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000ef84 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000f070 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000f244 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00013958 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000f4c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000f5f4 l     F .text	00000034 alt_dev_reg
000128c8 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f900 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000fb0c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00010144 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000105f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00010a68 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00010ba8 l     F .text	0000003c alt_get_errno
00010be4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000154b8 g     O .bss	00000004 alt_instruction_exception_handler
000090d0 g     F .text	00000074 _mprec_log10
000091bc g     F .text	0000008c __any_on
0000b560 g     F .text	00000054 _isatty_r
00011c18 g     O .rodata	00000028 __mprec_tinytens
0000f180 g     F .text	0000007c alt_main
00002bd8 g     F .text	000000c0 _puts_r
000154e4 g     O .bss	00000100 alt_irq
0000b5b4 g     F .text	00000060 _lseek_r
00011b78 g     O .rodata	00000009 gy_array
00013968 g       *ABS*	00000000 __flash_rwdata_start
0000d7ac g     F .text	00000088 .hidden __eqdf2
000155e4 g       *ABS*	00000000 __alt_heap_start
00002b9c g     F .text	0000003c printf
0000b7cc g     F .text	0000009c _wcrtomb_r
000098f8 g     F .text	0000005c __sseek
0000703c g     F .text	00000010 __sinit
0000b674 g     F .text	00000140 __swbuf_r
00007b04 g     F .text	0000007c _setlocale_r
00006ea4 g     F .text	00000068 __sfmoreglue
0000f220 g     F .text	00000024 __malloc_unlock
00000e9c g     F .text	00000044 LCD_Write_Command
00015464 g     O .bss	00000004 sobel_width
000154a8 g     O .bss	00000004 altera_avalon_timer_ts_freq
00007fc8 g     F .text	0000015c memmove
00000ee0 g     F .text	00000044 LCD_Write_Data
00007024 g     F .text	00000018 _cleanup
0000824c g     F .text	000000a8 _Balloc
0000d834 g     F .text	000000dc .hidden __gtdf2
00010fa0 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000764 g     F .text	0000004c cam_get_xsize
0000b504 g     F .text	0000005c _fstat_r
00015488 g     O .bss	00000004 errno
00009874 g     F .text	00000008 __seofread
0001549c g     O .bss	00000004 alt_argv
0001b928 g       *ABS*	00000000 _gp
0000f490 g     F .text	00000030 usleep
000008a4 g     F .text	000000a8 cam_set_image_pointer
00012748 g     O .rwdata	00000180 alt_fd_list
000022cc g     F .text	00000034 vga_set_pointer
00010fc4 g     F .text	00000090 alt_find_dev
00007e80 g     F .text	00000148 memcpy
00006cf4 g     F .text	0000000c _cleanup_r
0000ea98 g     F .text	000000dc .hidden __floatsidf
00010b2c g     F .text	0000007c alt_io_redirect
0000d910 g     F .text	000000f4 .hidden __ltdf2
000116c0 g       *ABS*	00000000 __DTOR_END__
00002c98 g     F .text	00000014 puts
00011290 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000097ac g     F .text	00000074 __fpclassifyd
0000902c g     F .text	000000a4 __ratio
0000afa8 g     F .text	0000001c __vfiprintf_internal
0000fd04 g     F .text	0000021c altera_avalon_jtag_uart_read
00002338 g     F .text	00000014 malloc
00002b6c g     F .text	00000030 _printf_r
00000c68 g     F .text	00000020 get_grayscale_picture
0000c55c g     F .text	00000064 .hidden __udivsi3
00000280 g     F .text	000004e4 init_camera
00011918 g     O .rodata	00000128 lens_roll_off_tbl
0000eee0 g     F .text	000000a4 isatty
00011c68 g     O .rodata	000000c8 __mprec_tens
00007b80 g     F .text	0000000c __locale_charset
00011200 g     F .text	00000090 alt_icache_flush
00015484 g     O .bss	00000004 __malloc_top_pad
00013938 g     O .rwdata	00000004 __mb_cur_max
00007bb0 g     F .text	0000000c _localeconv_r
00001dc8 g     F .text	0000009c sobel_x
00008658 g     F .text	0000003c __i2b
000074c0 g     F .text	000004bc __sfvwrite_r
00000f24 g     F .text	00000240 init_LCD
00002cac g     F .text	00000054 _sbrk_r
000007fc g     F .text	000000a8 cam_get_profiling
0000b614 g     F .text	00000060 _read_r
00015468 g     O .bss	00000004 sobel_result
00013950 g     O .rwdata	00000004 alt_max_fd
0000b1f8 g     F .text	000000f0 _fclose_r
00006cbc g     F .text	00000030 fflush
00015480 g     O .bss	00000004 __malloc_max_sbrked_mem
0001545c g     O .bss	00000004 grayscale_array
0000c618 g     F .text	000008ac .hidden __adddf3
000007b0 g     F .text	0000004c cam_get_ysize
00008dd4 g     F .text	0000010c __b2d
0000bf2c g     F .text	00000538 .hidden __umoddi3
0000f0ac g     F .text	000000d4 lseek
00000d78 g     F .text	000000a0 i2c_short_read
00013930 g     O .rwdata	00000004 _global_impure_ptr
00009248 g     F .text	00000564 _realloc_r
000155e4 g       *ABS*	00000000 __bss_end
00010978 g     F .text	000000f0 alt_iic_isr_register
00010e98 g     F .text	00000108 alt_tick
0000b9b4 g     F .text	00000578 .hidden __udivdi3
0000b460 g     F .text	00000024 _fputwc_r
00011c40 g     O .rodata	00000028 __mprec_bigtens
0000843c g     F .text	00000104 __s2b
0000eb74 g     F .text	000000a8 .hidden __floatunsidf
00008b14 g     F .text	00000060 __mcmp
0000705c g     F .text	00000018 __fp_lock_all
0001092c g     F .text	0000004c alt_ic_irq_enabled
00015458 g     O .bss	00000004 grayscape_height
00010dfc g     F .text	0000009c alt_alarm_stop
000154ac g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00012720 g     O .rwdata	00000028 alt_dev_null
00001208 g     F .text	000000c8 transfer_LCD_with_dma
00001d0c g     F .text	000000bc sobel_complete
000105d4 g     F .text	00000020 alt_dcache_flush_all
00008540 g     F .text	00000068 __hi0bits
0000ea18 g     F .text	00000080 .hidden __fixdfsi
00013968 g       *ABS*	00000000 __ram_rwdata_end
00013948 g     O .rwdata	00000008 alt_dev_list
0000f4fc g     F .text	000000f8 write
00010330 g     F .text	00000020 alt_timestamp_freq
00011e7c g       *ABS*	00000000 __ram_rodata_end
0000edf4 g     F .text	000000b0 fstat
0000d910 g     F .text	000000f4 .hidden __ledf2
0000888c g     F .text	00000140 __pow5mult
00009b4c g     F .text	0000145c ___vfiprintf_internal_r
00015494 g     O .bss	00000004 __nlocale_changed
0000c5c0 g     F .text	00000058 .hidden __umodsi3
0000228c g     F .text	00000020 GetSobel_rgb
000155e4 g       *ABS*	00000000 end
000022ac g     F .text	00000020 GetSobelResult
000009ac g     F .text	00000050 take_picture_blocking
00000a84 g     F .text	00000030 DIPSW_get_value
0000203c g     F .text	0000013c sobel_y_with_rgb
0000f840 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00000984 g     F .text	00000028 current_image_pointer
000116c0 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
000101bc g     F .text	0000007c alt_avalon_timer_sc_init
0000ec1c g     F .text	00000064 .hidden __clzsi2
0000ff20 g     F .text	00000224 altera_avalon_jtag_uart_write
0000704c g     F .text	00000004 __sfp_lock_acquire
00007d9c g     F .text	000000e4 memchr
00002d98 g     F .text	000021f8 ___vfprintf_internal_r
000071b0 g     F .text	00000310 _free_r
00007b8c g     F .text	00000010 __locale_mb_cur_max
00001fa0 g     F .text	0000009c sobel_y
000117d8 g     O .rodata	00000140 noise_reduction_reg_settings_array
0001150c g     F .text	00000180 __call_exitprocs
00015490 g     O .bss	00000004 __mlocale_changed
00013928 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
000154b0 g     O .bss	00000004 _alt_tick_rate
000089cc g     F .text	00000148 __lshift
000154b4 g     O .bss	00000004 _alt_nticks
0000f280 g     F .text	000000fc read
0000f660 g     F .text	0000007c alt_sys_init
00001e64 g     F .text	0000013c sobel_x_with_rgb
000113f4 g     F .text	00000118 __register_exitproc
00008694 g     F .text	000001f8 __multiply
0000fbac g     F .text	00000068 altera_avalon_jtag_uart_close
00011e7c g       *ABS*	00000000 __ram_rwdata_start
000116c0 g       *ABS*	00000000 __ram_rodata_start
000154bc g     O .bss	00000028 __malloc_current_mallinfo
00008ee0 g     F .text	0000014c __d2b
0001546c g     O .bss	00000004 sobel_height
000009fc g     F .text	00000030 enable_continues_mode
0000f6dc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000186c g     F .text	00000170 init_sobel_arrays
0001115c g     F .text	000000a4 alt_get_fd
0001047c g     F .text	00000158 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000b0e0 g     F .text	00000054 _close_r
00011378 g     F .text	0000007c memcmp
0000f79c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000155e4 g       *ABS*	00000000 __alt_stack_base
0000f7ec g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00005068 g     F .text	00000154 __swsetup_r
0000cec4 g     F .text	000008e8 .hidden __divdf3
00006f0c g     F .text	00000118 __sfp
00009144 g     F .text	00000078 __copybits
00011e7c g     O .rwdata	00000408 __malloc_av_
00007058 g     F .text	00000004 __sinit_lock_release
0000da04 g     F .text	00000718 .hidden __muldf3
00009820 g     F .text	00000054 __sread
00011054 g     F .text	00000108 alt_find_file
00010630 g     F .text	000000a4 alt_dev_llist_insert
0000f1fc g     F .text	00000024 __malloc_lock
0000f3e0 g     F .text	000000b0 sbrk
00006c60 g     F .text	0000005c _fflush_r
0000b134 g     F .text	000000c4 _calloc_r
00015454 g       *ABS*	00000000 __bss_start
00008124 g     F .text	00000128 memset
000012d0 g     F .text	0000059c main
000154a0 g     O .bss	00000004 alt_envp
0001547c g     O .bss	00000004 __malloc_max_total_mem
00000c28 g     F .text	00000020 get_grayscale_width
0000f73c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000b7b4 g     F .text	00000018 __swbuf
00015470 g     O .bss	00000004 sobel_x_result
00009954 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000b2e8 g     F .text	00000014 fclose
00010238 g     F .text	00000078 alt_timestamp_start
000053bc g     F .text	00001688 _dtoa_r
00002360 g     F .text	0000080c _malloc_r
0000b928 g     F .text	00000030 __ascii_wctomb
00013954 g     O .rwdata	00000004 alt_errno
0000797c g     F .text	000000c4 _fwalk
0000c464 g     F .text	00000084 .hidden __divsi3
0000708c g     F .text	00000124 _malloc_trim_r
000116c0 g       *ABS*	00000000 __CTOR_END__
00015454 g     O .bss	00000004 grayscale_width
0000995c g     F .text	000000dc strcmp
00001164 g     F .text	000000a4 transfer_LCD_no_dma
000116c0 g       *ABS*	00000000 __flash_rodata_start
000116c0 g       *ABS*	00000000 __DTOR_LIST__
0000d7ac g     F .text	00000088 .hidden __nedf2
000116c0 g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000f628 g     F .text	00000038 alt_irq_init
0000f37c g     F .text	00000064 alt_release_fd
00000cc4 g     F .text	000000b4 i2c_auto_detect
00011d50 g     O .rodata	00000100 .hidden __clz_tab
0000094c g     F .text	00000038 current_image_valid
0001548c g     O .bss	00000004 _PathLocale
00000c88 g     F .text	0000003c i2c_busy_wait
0001132c g     F .text	00000014 atexit
0000b080 g     F .text	00000060 _write_r
00007bbc g     F .text	00000018 setlocale
00013934 g     O .rwdata	00000004 _impure_ptr
00015498 g     O .bss	00000004 alt_argc
00006a44 g     F .text	0000021c __sflush_r
000154a4 g     O .bss	00000004 altera_avalon_timer_ts_base
00010734 g     F .text	00000060 _do_dtors
00007ba8 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00008d70 g     F .text	00000064 __ulp
00007074 g     F .text	00000018 __fp_unlock_all
00013940 g     O .rwdata	00000008 alt_fs_list
00015474 g     O .bss	00000004 sobel_y_result
00000e18 g     F .text	00000084 i2c_short_write
00000020 g       *ABS*	00000000 __ram_exceptions_start
00015460 g     O .bss	00000002 LCD_height
00007bd4 g     F .text	0000000c localeconv
000102b0 g     F .text	00000080 alt_timestamp
00002300 g     F .text	00000038 vga_set_swap
000107c8 g     F .text	00000050 alt_ic_isr_register
00002178 g     F .text	00000114 sobel_threshold
00013968 g       *ABS*	00000000 _edata
000155e4 g       *ABS*	00000000 _end
0000b2fc g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000fc14 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00011b6f g     O .rodata	00000009 gx_array
000108a0 g     F .text	0000008c alt_ic_irq_disable
0000987c g     F .text	0000007c __swrite
0001392c g     O .rwdata	00000004 __malloc_trim_threshold
00015462 g     O .bss	00000002 LCD_width
00000ab4 g     F .text	00000174 conv_grayscale
00007b9c g     F .text	0000000c __locale_msgcharset
00011340 g     F .text	00000038 exit
00007a40 g     F .text	000000c4 _fwalk_reent
00008b74 g     F .text	000001fc __mdiff
0000c4e8 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00007050 g     F .text	00000004 __sfp_lock_release
00000c48 g     F .text	00000020 get_grayscale_height
0001168c g     F .text	00000034 _exit
00010350 g     F .text	0000012c alt_alarm_start
00007be0 g     F .text	000001bc __smakebuf_r
00015478 g     O .bss	00000004 sobel_rgb565
00002d00 g     F .text	00000098 strlen
00010ca8 g     F .text	00000154 open
0000d834 g     F .text	000000dc .hidden __gedf2
0001393c g     O .rwdata	00000004 __wctomb
00009b34 g     F .text	00000018 __sprint_r
00010794 g     F .text	00000034 alt_icache_flush_all
0001395c g     O .rwdata	00000004 alt_priority_mask
00010818 g     F .text	00000088 alt_ic_irq_enable
00004f90 g     F .text	0000001c __vfprintf_internal
0000b958 g     F .text	0000005c _wctomb_r
0000e11c g     F .text	000008fc .hidden __subdf3
000085a8 g     F .text	000000b0 __lo0bits
00013960 g     O .rwdata	00000008 alt_alarm_list
000106d4 g     F .text	00000060 _do_ctors
0000b868 g     F .text	000000c0 wcrtomb
0000ecbc g     F .text	000000d0 close
0000efec g     F .text	00000084 alt_load
0000b484 g     F .text	00000080 fputwc
0000234c g     F .text	00000014 free
00007054 g     F .text	00000004 __sinit_lock_acquire
0000831c g     F .text	00000120 __multadd
000082f4 g     F .text	00000028 _Bfree
00000a2c g     F .text	00000058 new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10953904 	addi	r2,r2,21732
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10953904 	addi	r2,r2,21732
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a6e417 	ldw	r2,-25712(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a6e417 	ldw	r2,-25712(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     250:	d6ae4a14 	ori	gp,gp,47400
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     258:	10951514 	ori	r2,r2,21588

    movhi r3, %hi(__bss_end)
     25c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     260:	18d57914 	ori	r3,r3,21988

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_data_end+0xff000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	000efec0 	call	efec <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	000f1800 	call	f180 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_data_end+0xff00027c>

00000280 <init_camera>:
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     280:	defffd04 	addi	sp,sp,-12
     284:	dfc00215 	stw	ra,8(sp)
     288:	df000115 	stw	fp,4(sp)
     28c:	df000104 	addi	fp,sp,4
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     290:	00c00084 	movi	r3,2
     294:	00804034 	movhi	r2,256
     298:	10842744 	addi	r2,r2,4253
     29c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     2a0:	00c00044 	movi	r3,1
     2a4:	00804034 	movhi	r2,256
     2a8:	10841304 	addi	r2,r2,4172
     2ac:	10c00025 	stbio	r3,0(r2)
	for (i=0; i < 1000000 ; i++)
     2b0:	e03fff15 	stw	zero,-4(fp)
     2b4:	00000406 	br	2c8 <init_camera+0x48>
		asm volatile ("nop");
     2b8:	0001883a 	nop

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     2bc:	e0bfff17 	ldw	r2,-4(fp)
     2c0:	10800044 	addi	r2,r2,1
     2c4:	e0bfff15 	stw	r2,-4(fp)
     2c8:	e0ffff17 	ldw	r3,-4(fp)
     2cc:	008003f4 	movhi	r2,15
     2d0:	10908fc4 	addi	r2,r2,16959
     2d4:	10fff80e 	bge	r2,r3,2b8 <__alt_data_end+0xff0002b8>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     2d8:	0007883a 	mov	r3,zero
     2dc:	00804034 	movhi	r2,256
     2e0:	10841304 	addi	r2,r2,4172
     2e4:	10c00025 	stbio	r3,0(r2)
	for (i=0; i < 1000000 ; i++)
     2e8:	e03fff15 	stw	zero,-4(fp)
     2ec:	00000406 	br	300 <init_camera+0x80>
		asm volatile ("nop");
     2f0:	0001883a 	nop
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     2f4:	e0bfff17 	ldw	r2,-4(fp)
     2f8:	10800044 	addi	r2,r2,1
     2fc:	e0bfff15 	stw	r2,-4(fp)
     300:	e0ffff17 	ldw	r3,-4(fp)
     304:	008003f4 	movhi	r2,15
     308:	10908fc4 	addi	r2,r2,16959
     30c:	10fff80e 	bge	r2,r3,2f0 <__alt_data_end+0xff0002f0>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     310:	01800044 	movi	r6,1
     314:	014ce184 	movi	r5,13190
     318:	01001e04 	movi	r4,120
     31c:	0000e180 	call	e18 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     320:	000d883a 	mov	r6,zero
     324:	014ce184 	movi	r5,13190
     328:	01001e04 	movi	r4,120
     32c:	0000e180 	call	e18 <i2c_short_write>
	for (i=0; i < 1000000 ; i++)
     330:	e03fff15 	stw	zero,-4(fp)
     334:	00000406 	br	348 <init_camera+0xc8>
		asm volatile ("nop");
     338:	0001883a 	nop
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     33c:	e0bfff17 	ldw	r2,-4(fp)
     340:	10800044 	addi	r2,r2,1
     344:	e0bfff15 	stw	r2,-4(fp)
     348:	e0ffff17 	ldw	r3,-4(fp)
     34c:	008003f4 	movhi	r2,15
     350:	10908fc4 	addi	r2,r2,16959
     354:	10fff80e 	bge	r2,r3,338 <__alt_data_end+0xff000338>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     358:	01803104 	movi	r6,196
     35c:	014c0684 	movi	r5,12314
     360:	01001e04 	movi	r4,120
     364:	0000e180 	call	e18 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     368:	01800204 	movi	r6,8
     36c:	014c8084 	movi	r5,12802
     370:	01001e04 	movi	r4,120
     374:	0000e180 	call	e18 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     378:	0180c744 	movi	r6,797
     37c:	014cfd04 	movi	r5,13300
     380:	01001e04 	movi	r4,120
     384:	0000e180 	call	e18 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     388:	e03fff15 	stw	zero,-4(fp)
     38c:	00000406 	br	3a0 <init_camera+0x120>
		asm volatile ("nop");
     390:	0001883a 	nop
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     394:	e0bfff17 	ldw	r2,-4(fp)
     398:	10800044 	addi	r2,r2,1
     39c:	e0bfff15 	stw	r2,-4(fp)
     3a0:	e0ffff17 	ldw	r3,-4(fp)
     3a4:	008000b4 	movhi	r2,2
     3a8:	10a1a7c4 	addi	r2,r2,-31073
     3ac:	10fff80e 	bge	r2,r3,390 <__alt_data_end+0xff000390>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     3b0:	01a3c254 	movui	r6,36617
     3b4:	014d0784 	movi	r5,13342
     3b8:	01001e04 	movi	r4,120
     3bc:	0000e180 	call	e18 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     3c0:	01805404 	movi	r6,336
     3c4:	014d0704 	movi	r5,13340
     3c8:	01001e04 	movi	r4,120
     3cc:	0000e180 	call	e18 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     3d0:	01a3c254 	movui	r6,36617
     3d4:	014d0784 	movi	r5,13342
     3d8:	01001e04 	movi	r4,120
     3dc:	0000e180 	call	e18 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     3e0:	e03fff15 	stw	zero,-4(fp)
     3e4:	00000406 	br	3f8 <init_camera+0x178>
		asm volatile ("nop");
     3e8:	0001883a 	nop
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     3ec:	e0bfff17 	ldw	r2,-4(fp)
     3f0:	10800044 	addi	r2,r2,1
     3f4:	e0bfff15 	stw	r2,-4(fp)
     3f8:	e0ffff17 	ldw	r3,-4(fp)
     3fc:	008000b4 	movhi	r2,2
     400:	10a1a7c4 	addi	r2,r2,-31073
     404:	10fff80e 	bge	r2,r3,3e8 <__alt_data_end+0xff0003e8>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     408:	01a3c214 	movui	r6,36616
     40c:	014d0784 	movi	r5,13342
     410:	01001e04 	movi	r4,120
     414:	0000e180 	call	e18 <i2c_short_write>
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     418:	e03fff15 	stw	zero,-4(fp)
     41c:	00001806 	br	480 <init_camera+0x200>
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
     420:	00800074 	movhi	r2,1
     424:	1085b004 	addi	r2,r2,5824
     428:	e0ffff17 	ldw	r3,-4(fp)
     42c:	18c7883a 	add	r3,r3,r3
     430:	18c7883a 	add	r3,r3,r3
     434:	10c5883a 	add	r2,r2,r3
     438:	1080000b 	ldhu	r2,0(r2)
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     43c:	113fffcc 	andi	r4,r2,65535
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
     440:	00800074 	movhi	r2,1
     444:	1085b004 	addi	r2,r2,5824
     448:	e0ffff17 	ldw	r3,-4(fp)
     44c:	18c7883a 	add	r3,r3,r3
     450:	18c7883a 	add	r3,r3,r3
     454:	10c5883a 	add	r2,r2,r3
     458:	10800084 	addi	r2,r2,2
     45c:	1080000b 	ldhu	r2,0(r2)
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     460:	10bfffcc 	andi	r2,r2,65535
     464:	100d883a 	mov	r6,r2
     468:	200b883a 	mov	r5,r4
     46c:	01001e04 	movi	r4,120
     470:	0000e180 	call	e18 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     474:	e0bfff17 	ldw	r2,-4(fp)
     478:	10800044 	addi	r2,r2,1
     47c:	e0bfff15 	stw	r2,-4(fp)
     480:	e0bfff17 	ldw	r2,-4(fp)
     484:	108011b0 	cmpltui	r2,r2,70
     488:	103fe51e 	bne	r2,zero,420 <__alt_data_end+0xff000420>
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     48c:	e03fff15 	stw	zero,-4(fp)
     490:	00001806 	br	4f4 <init_camera+0x274>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
     494:	00800074 	movhi	r2,1
     498:	1085f604 	addi	r2,r2,6104
     49c:	e0ffff17 	ldw	r3,-4(fp)
     4a0:	18c7883a 	add	r3,r3,r3
     4a4:	18c7883a 	add	r3,r3,r3
     4a8:	10c5883a 	add	r2,r2,r3
     4ac:	1080000b 	ldhu	r2,0(r2)
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     4b0:	113fffcc 	andi	r4,r2,65535
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
     4b4:	00800074 	movhi	r2,1
     4b8:	1085f604 	addi	r2,r2,6104
     4bc:	e0ffff17 	ldw	r3,-4(fp)
     4c0:	18c7883a 	add	r3,r3,r3
     4c4:	18c7883a 	add	r3,r3,r3
     4c8:	10c5883a 	add	r2,r2,r3
     4cc:	10800084 	addi	r2,r2,2
     4d0:	1080000b 	ldhu	r2,0(r2)
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     4d4:	10bfffcc 	andi	r2,r2,65535
     4d8:	100d883a 	mov	r6,r2
     4dc:	200b883a 	mov	r5,r4
     4e0:	01001e04 	movi	r4,120
     4e4:	0000e180 	call	e18 <i2c_short_write>
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     4e8:	e0bfff17 	ldw	r2,-4(fp)
     4ec:	10800044 	addi	r2,r2,1
     4f0:	e0bfff15 	stw	r2,-4(fp)
     4f4:	e0bfff17 	ldw	r2,-4(fp)
     4f8:	10801430 	cmpltui	r2,r2,80
     4fc:	103fe51e 	bne	r2,zero,494 <__alt_data_end+0xff000494>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     500:	018164c4 	movi	r6,1427
     504:	014d6904 	movi	r5,13732
     508:	01001e04 	movi	r4,120
     50c:	0000e180 	call	e18 <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     510:	0189e644 	movi	r6,10137
     514:	014ce304 	movi	r5,13196
     518:	01001e04 	movi	r4,120
     51c:	0000e180 	call	e18 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     520:	01991004 	movi	r6,25664
     524:	014ce404 	movi	r5,13200
     528:	01001e04 	movi	r4,120
     52c:	0000e180 	call	e18 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     530:	e03fff15 	stw	zero,-4(fp)
     534:	00000406 	br	548 <init_camera+0x2c8>
		asm volatile ("nop");
     538:	0001883a 	nop
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     53c:	e0bfff17 	ldw	r2,-4(fp)
     540:	10800044 	addi	r2,r2,1
     544:	e0bfff15 	stw	r2,-4(fp)
     548:	e0ffff17 	ldw	r3,-4(fp)
     54c:	008000b4 	movhi	r2,2
     550:	10a1a7c4 	addi	r2,r2,-31073
     554:	10fff80e 	bge	r2,r3,538 <__alt_data_end+0xff000538>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     558:	0189e6c4 	movi	r6,10139
     55c:	014ce304 	movi	r5,13196
     560:	01001e04 	movi	r4,120
     564:	0000e180 	call	e18 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     568:	01991004 	movi	r6,25664
     56c:	014ce404 	movi	r5,13200
     570:	01001e04 	movi	r4,120
     574:	0000e180 	call	e18 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     578:	e03fff15 	stw	zero,-4(fp)
     57c:	00000406 	br	590 <init_camera+0x310>
		asm volatile ("nop");
     580:	0001883a 	nop
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     584:	e0bfff17 	ldw	r2,-4(fp)
     588:	10800044 	addi	r2,r2,1
     58c:	e0bfff15 	stw	r2,-4(fp)
     590:	e0ffff17 	ldw	r3,-4(fp)
     594:	008000b4 	movhi	r2,2
     598:	10a1a7c4 	addi	r2,r2,-31073
     59c:	10fff80e 	bge	r2,r3,580 <__alt_data_end+0xff000580>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     5a0:	01a840d4 	movui	r6,41219
     5a4:	014ce304 	movi	r5,13196
     5a8:	01001e04 	movi	r4,120
     5ac:	0000e180 	call	e18 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     5b0:	01800144 	movi	r6,5
     5b4:	014ce404 	movi	r5,13200
     5b8:	01001e04 	movi	r4,120
     5bc:	0000e180 	call	e18 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     5c0:	e03fff15 	stw	zero,-4(fp)
     5c4:	00000406 	br	5d8 <init_camera+0x358>
		asm volatile ("nop");
     5c8:	0001883a 	nop
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     5cc:	e0bfff17 	ldw	r2,-4(fp)
     5d0:	10800044 	addi	r2,r2,1
     5d4:	e0bfff15 	stw	r2,-4(fp)
     5d8:	e0ffff17 	ldw	r3,-4(fp)
     5dc:	008000b4 	movhi	r2,2
     5e0:	10a1a7c4 	addi	r2,r2,-31073
     5e4:	10fff80e 	bge	r2,r3,5c8 <__alt_data_end+0xff0005c8>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     5e8:	01a840d4 	movui	r6,41219
     5ec:	014ce304 	movi	r5,13196
     5f0:	01001e04 	movi	r4,120
     5f4:	0000e180 	call	e18 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     5f8:	01800184 	movi	r6,6
     5fc:	014ce404 	movi	r5,13200
     600:	01001e04 	movi	r4,120
     604:	0000e180 	call	e18 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     608:	e03fff15 	stw	zero,-4(fp)
     60c:	00000406 	br	620 <init_camera+0x3a0>
		asm volatile ("nop");
     610:	0001883a 	nop
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     614:	e0bfff17 	ldw	r2,-4(fp)
     618:	10800044 	addi	r2,r2,1
     61c:	e0bfff15 	stw	r2,-4(fp)
     620:	e0ffff17 	ldw	r3,-4(fp)
     624:	008000b4 	movhi	r2,2
     628:	10a1a7c4 	addi	r2,r2,-31073
     62c:	10fff80e 	bge	r2,r3,610 <__alt_data_end+0xff000610>
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     630:	e03fff15 	stw	zero,-4(fp)
     634:	00001806 	br	698 <init_camera+0x418>
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
     638:	00800074 	movhi	r2,1
     63c:	10864604 	addi	r2,r2,6424
     640:	e0ffff17 	ldw	r3,-4(fp)
     644:	18c7883a 	add	r3,r3,r3
     648:	18c7883a 	add	r3,r3,r3
     64c:	10c5883a 	add	r2,r2,r3
     650:	1080000b 	ldhu	r2,0(r2)
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     654:	113fffcc 	andi	r4,r2,65535
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
     658:	00800074 	movhi	r2,1
     65c:	10864604 	addi	r2,r2,6424
     660:	e0ffff17 	ldw	r3,-4(fp)
     664:	18c7883a 	add	r3,r3,r3
     668:	18c7883a 	add	r3,r3,r3
     66c:	10c5883a 	add	r2,r2,r3
     670:	10800084 	addi	r2,r2,2
     674:	1080000b 	ldhu	r2,0(r2)
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     678:	10bfffcc 	andi	r2,r2,65535
     67c:	100d883a 	mov	r6,r2
     680:	200b883a 	mov	r5,r4
     684:	01001e04 	movi	r4,120
     688:	0000e180 	call	e18 <i2c_short_write>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     68c:	e0bfff17 	ldw	r2,-4(fp)
     690:	10800044 	addi	r2,r2,1
     694:	e0bfff15 	stw	r2,-4(fp)
     698:	e0bfff17 	ldw	r2,-4(fp)
     69c:	108012b0 	cmpltui	r2,r2,74
     6a0:	103fe51e 	bne	r2,zero,638 <__alt_data_end+0xff000638>
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     6a4:	e03fff15 	stw	zero,-4(fp)
     6a8:	00000406 	br	6bc <init_camera+0x43c>
		asm volatile ("nop");
     6ac:	0001883a 	nop
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     6b0:	e0bfff17 	ldw	r2,-4(fp)
     6b4:	10800044 	addi	r2,r2,1
     6b8:	e0bfff15 	stw	r2,-4(fp)
     6bc:	e0ffff17 	ldw	r3,-4(fp)
     6c0:	008003f4 	movhi	r2,15
     6c4:	10908fc4 	addi	r2,r2,16959
     6c8:	10fff80e 	bge	r2,r3,6ac <__alt_data_end+0xff0006ac>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     6cc:	01800804 	movi	r6,32
     6d0:	014ccb84 	movi	r5,13102
     6d4:	01001e04 	movi	r4,120
     6d8:	0000e180 	call	e18 <i2c_short_write>
	for (i=0; i < 1000000 ; i++)
     6dc:	e03fff15 	stw	zero,-4(fp)
     6e0:	00000406 	br	6f4 <init_camera+0x474>
		asm volatile ("nop");
     6e4:	0001883a 	nop
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     6e8:	e0bfff17 	ldw	r2,-4(fp)
     6ec:	10800044 	addi	r2,r2,1
     6f0:	e0bfff15 	stw	r2,-4(fp)
     6f4:	e0ffff17 	ldw	r3,-4(fp)
     6f8:	008003f4 	movhi	r2,15
     6fc:	10908fc4 	addi	r2,r2,16959
     700:	10fff80e 	bge	r2,r3,6e4 <__alt_data_end+0xff0006e4>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     704:	01800884 	movi	r6,34
     708:	014d0104 	movi	r5,13316
     70c:	01001e04 	movi	r4,120
     710:	0000e180 	call	e18 <i2c_short_write>
	for (i=0; i < 1000000 ; i++)
     714:	e03fff15 	stw	zero,-4(fp)
     718:	00000406 	br	72c <init_camera+0x4ac>
		asm volatile ("nop");
     71c:	0001883a 	nop
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     720:	e0bfff17 	ldw	r2,-4(fp)
     724:	10800044 	addi	r2,r2,1
     728:	e0bfff15 	stw	r2,-4(fp)
     72c:	e0ffff17 	ldw	r3,-4(fp)
     730:	008003f4 	movhi	r2,15
     734:	10908fc4 	addi	r2,r2,16959
     738:	10fff80e 	bge	r2,r3,71c <__alt_data_end+0xff00071c>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     73c:	018009c4 	movi	r6,39
     740:	014c1004 	movi	r5,12352
     744:	01001e04 	movi	r4,120
     748:	0000e180 	call	e18 <i2c_short_write>
}
     74c:	0001883a 	nop
     750:	e037883a 	mov	sp,fp
     754:	dfc00117 	ldw	ra,4(sp)
     758:	df000017 	ldw	fp,0(sp)
     75c:	dec00204 	addi	sp,sp,8
     760:	f800283a 	ret

00000764 <cam_get_xsize>:

unsigned short cam_get_xsize(){
     764:	defffe04 	addi	sp,sp,-8
     768:	df000115 	stw	fp,4(sp)
     76c:	df000104 	addi	fp,sp,4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     770:	00804034 	movhi	r2,256
     774:	10841304 	addi	r2,r2,4172
     778:	10800023 	ldbuio	r2,0(r2)
     77c:	10803fcc 	andi	r2,r2,255
     780:	e0bfff05 	stb	r2,-4(fp)
	} while ((control_reg&CAM_Profile_valid)==0);
     784:	e0bfff03 	ldbu	r2,-4(fp)
     788:	1080010c 	andi	r2,r2,4
     78c:	103ff826 	beq	r2,zero,770 <__alt_data_end+0xff000770>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     790:	00804034 	movhi	r2,256
     794:	10841004 	addi	r2,r2,4160
     798:	1080002b 	ldhuio	r2,0(r2)
     79c:	10bfffcc 	andi	r2,r2,65535
}
     7a0:	e037883a 	mov	sp,fp
     7a4:	df000017 	ldw	fp,0(sp)
     7a8:	dec00104 	addi	sp,sp,4
     7ac:	f800283a 	ret

000007b0 <cam_get_ysize>:

unsigned short cam_get_ysize() {
     7b0:	defffe04 	addi	sp,sp,-8
     7b4:	df000115 	stw	fp,4(sp)
     7b8:	df000104 	addi	fp,sp,4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     7bc:	00804034 	movhi	r2,256
     7c0:	10841304 	addi	r2,r2,4172
     7c4:	10800023 	ldbuio	r2,0(r2)
     7c8:	10803fcc 	andi	r2,r2,255
     7cc:	e0bfff05 	stb	r2,-4(fp)
	} while ((control_reg&CAM_Profile_valid)==0);
     7d0:	e0bfff03 	ldbu	r2,-4(fp)
     7d4:	1080010c 	andi	r2,r2,4
     7d8:	103ff826 	beq	r2,zero,7bc <__alt_data_end+0xff0007bc>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     7dc:	00804034 	movhi	r2,256
     7e0:	10841104 	addi	r2,r2,4164
     7e4:	1080002b 	ldhuio	r2,0(r2)
     7e8:	10bfffcc 	andi	r2,r2,65535
}
     7ec:	e037883a 	mov	sp,fp
     7f0:	df000017 	ldw	fp,0(sp)
     7f4:	dec00104 	addi	sp,sp,4
     7f8:	f800283a 	ret

000007fc <cam_get_profiling>:

void cam_get_profiling() {
     7fc:	defffd04 	addi	sp,sp,-12
     800:	dfc00215 	stw	ra,8(sp)
     804:	df000115 	stw	fp,4(sp)
     808:	df000104 	addi	fp,sp,4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     80c:	00804034 	movhi	r2,256
     810:	10841304 	addi	r2,r2,4172
     814:	10800023 	ldbuio	r2,0(r2)
     818:	10803fcc 	andi	r2,r2,255
     81c:	e0bfff05 	stb	r2,-4(fp)
	} while ((control_reg&CAM_Profile_valid)==0);
     820:	e0bfff03 	ldbu	r2,-4(fp)
     824:	1080010c 	andi	r2,r2,4
     828:	103ff826 	beq	r2,zero,80c <__alt_data_end+0xff00080c>
	printf("Nr. of bytes each line    : %d\n",
     82c:	00804034 	movhi	r2,256
     830:	10841004 	addi	r2,r2,4160
     834:	1080002b 	ldhuio	r2,0(r2)
     838:	10bfffcc 	andi	r2,r2,65535
     83c:	100b883a 	mov	r5,r2
     840:	01000074 	movhi	r4,1
     844:	21069004 	addi	r4,r4,6720
     848:	0002b9c0 	call	2b9c <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     84c:	00804034 	movhi	r2,256
     850:	10841104 	addi	r2,r2,4164
     854:	1080002b 	ldhuio	r2,0(r2)
     858:	10bfffcc 	andi	r2,r2,65535
     85c:	100b883a 	mov	r5,r2
     860:	01000074 	movhi	r4,1
     864:	21069804 	addi	r4,r4,6752
     868:	0002b9c0 	call	2b9c <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     86c:	00804034 	movhi	r2,256
     870:	10841204 	addi	r2,r2,4168
     874:	1080002b 	ldhuio	r2,0(r2)
     878:	10bfffcc 	andi	r2,r2,65535
     87c:	100b883a 	mov	r5,r2
     880:	01000074 	movhi	r4,1
     884:	2106a004 	addi	r4,r4,6784
     888:	0002b9c0 	call	2b9c <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     88c:	0001883a 	nop
     890:	e037883a 	mov	sp,fp
     894:	dfc00117 	ldw	ra,4(sp)
     898:	df000017 	ldw	fp,0(sp)
     89c:	dec00204 	addi	sp,sp,8
     8a0:	f800283a 	ret

000008a4 <cam_set_image_pointer>:

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
     8a4:	defffd04 	addi	sp,sp,-12
     8a8:	df000215 	stw	fp,8(sp)
     8ac:	df000204 	addi	fp,sp,8
     8b0:	2005883a 	mov	r2,r4
     8b4:	e17fff15 	stw	r5,-4(fp)
     8b8:	e0bffe05 	stb	r2,-8(fp)
	switch (pointer_id) {
     8bc:	e0bffe07 	ldb	r2,-8(fp)
     8c0:	10c00060 	cmpeqi	r3,r2,1
     8c4:	18000e1e 	bne	r3,zero,900 <cam_set_image_pointer+0x5c>
     8c8:	10c00088 	cmpgei	r3,r2,2
     8cc:	1800021e 	bne	r3,zero,8d8 <cam_set_image_pointer+0x34>
     8d0:	10000626 	beq	r2,zero,8ec <cam_set_image_pointer+0x48>
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
                break;
	   default: return;
     8d4:	00001906 	br	93c <cam_set_image_pointer+0x98>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     8d8:	10c000a0 	cmpeqi	r3,r2,2
     8dc:	18000d1e 	bne	r3,zero,914 <cam_set_image_pointer+0x70>
     8e0:	108000e0 	cmpeqi	r2,r2,3
     8e4:	1000101e 	bne	r2,zero,928 <cam_set_image_pointer+0x84>
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
                break;
	   default: return;
     8e8:	00001406 	br	93c <cam_set_image_pointer+0x98>
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     8ec:	e0ffff17 	ldw	r3,-4(fp)
     8f0:	00804034 	movhi	r2,256
     8f4:	10841404 	addi	r2,r2,4176
     8f8:	10c00035 	stwio	r3,0(r2)
	            break;
     8fc:	00000f06 	br	93c <cam_set_image_pointer+0x98>
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     900:	e0ffff17 	ldw	r3,-4(fp)
     904:	00804034 	movhi	r2,256
     908:	10841504 	addi	r2,r2,4180
     90c:	10c00035 	stwio	r3,0(r2)
                break;
     910:	00000a06 	br	93c <cam_set_image_pointer+0x98>
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     914:	e0ffff17 	ldw	r3,-4(fp)
     918:	00804034 	movhi	r2,256
     91c:	10841604 	addi	r2,r2,4184
     920:	10c00035 	stwio	r3,0(r2)
                break;
     924:	00000506 	br	93c <cam_set_image_pointer+0x98>
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     928:	e0ffff17 	ldw	r3,-4(fp)
     92c:	00804034 	movhi	r2,256
     930:	10841704 	addi	r2,r2,4188
     934:	10c00035 	stwio	r3,0(r2)
                break;
     938:	0001883a 	nop
	   default: return;
	}
}
     93c:	e037883a 	mov	sp,fp
     940:	df000017 	ldw	fp,0(sp)
     944:	dec00104 	addi	sp,sp,4
     948:	f800283a 	ret

0000094c <current_image_valid>:

short current_image_valid() {
     94c:	defffe04 	addi	sp,sp,-8
     950:	df000115 	stw	fp,4(sp)
     954:	df000104 	addi	fp,sp,4
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     958:	00804034 	movhi	r2,256
     95c:	10841304 	addi	r2,r2,4172
     960:	1080002b 	ldhuio	r2,0(r2)
     964:	10bfffcc 	andi	r2,r2,65535
     968:	e0bfff0d 	sth	r2,-4(fp)
	return (value&CAM_Current_Image_Valid);
     96c:	e0bfff0b 	ldhu	r2,-4(fp)
     970:	1080800c 	andi	r2,r2,512
}
     974:	e037883a 	mov	sp,fp
     978:	df000017 	ldw	fp,0(sp)
     97c:	dec00104 	addi	sp,sp,4
     980:	f800283a 	ret

00000984 <current_image_pointer>:

void *current_image_pointer() {
     984:	deffff04 	addi	sp,sp,-4
     988:	df000015 	stw	fp,0(sp)
     98c:	d839883a 	mov	fp,sp
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     990:	00804034 	movhi	r2,256
     994:	10841404 	addi	r2,r2,4176
     998:	10800037 	ldwio	r2,0(r2)
}
     99c:	e037883a 	mov	sp,fp
     9a0:	df000017 	ldw	fp,0(sp)
     9a4:	dec00104 	addi	sp,sp,4
     9a8:	f800283a 	ret

000009ac <take_picture_blocking>:

void take_picture_blocking() {
     9ac:	defffe04 	addi	sp,sp,-8
     9b0:	df000115 	stw	fp,4(sp)
     9b4:	df000104 	addi	fp,sp,4
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     9b8:	00c00204 	movi	r3,8
     9bc:	00804034 	movhi	r2,256
     9c0:	10841304 	addi	r2,r2,4172
     9c4:	10c0002d 	sthio	r3,0(r2)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     9c8:	00804034 	movhi	r2,256
     9cc:	10841304 	addi	r2,r2,4172
     9d0:	1080002b 	ldhuio	r2,0(r2)
     9d4:	10bfffcc 	andi	r2,r2,65535
     9d8:	e0bfff0d 	sth	r2,-4(fp)
	} while ((value&CAM_Busy)!= 0);
     9dc:	e0bfff0b 	ldhu	r2,-4(fp)
     9e0:	1080020c 	andi	r2,r2,8
     9e4:	103ff81e 	bne	r2,zero,9c8 <__alt_data_end+0xff0009c8>
}
     9e8:	0001883a 	nop
     9ec:	e037883a 	mov	sp,fp
     9f0:	df000017 	ldw	fp,0(sp)
     9f4:	dec00104 	addi	sp,sp,4
     9f8:	f800283a 	ret

000009fc <enable_continues_mode>:

void enable_continues_mode() {
     9fc:	deffff04 	addi	sp,sp,-4
     a00:	df000015 	stw	fp,0(sp)
     a04:	d839883a 	mov	fp,sp
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     a08:	00c00404 	movi	r3,16
     a0c:	00804034 	movhi	r2,256
     a10:	10841304 	addi	r2,r2,4172
     a14:	10c0002d 	sthio	r3,0(r2)
}
     a18:	0001883a 	nop
     a1c:	e037883a 	mov	sp,fp
     a20:	df000017 	ldw	fp,0(sp)
     a24:	dec00104 	addi	sp,sp,4
     a28:	f800283a 	ret

00000a2c <new_image_available>:

char new_image_available() {
     a2c:	defffe04 	addi	sp,sp,-8
     a30:	df000115 	stw	fp,4(sp)
     a34:	df000104 	addi	fp,sp,4
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     a38:	00804034 	movhi	r2,256
     a3c:	10841304 	addi	r2,r2,4172
     a40:	1080002b 	ldhuio	r2,0(r2)
     a44:	10bfffcc 	andi	r2,r2,65535
     a48:	e0bfff0d 	sth	r2,-4(fp)
	if ((value&CAM_IRQ_Generated)!=0) {
     a4c:	e0bfff0b 	ldhu	r2,-4(fp)
     a50:	1080200c 	andi	r2,r2,128
     a54:	10000626 	beq	r2,zero,a70 <new_image_available+0x44>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     a58:	00c04004 	movi	r3,256
     a5c:	00804034 	movhi	r2,256
     a60:	10841304 	addi	r2,r2,4172
     a64:	10c0002d 	sthio	r3,0(r2)
		return 1;
     a68:	00800044 	movi	r2,1
     a6c:	00000106 	br	a74 <new_image_available+0x48>
	} else return 0;
     a70:	0005883a 	mov	r2,zero
}
     a74:	e037883a 	mov	sp,fp
     a78:	df000017 	ldw	fp,0(sp)
     a7c:	dec00104 	addi	sp,sp,4
     a80:	f800283a 	ret

00000a84 <DIPSW_get_value>:
 */

#include <system.h>
#include <io.h>

unsigned char DIPSW_get_value() {
     a84:	deffff04 	addi	sp,sp,-4
     a88:	df000015 	stw	fp,0(sp)
     a8c:	d839883a 	mov	fp,sp
	return IORD_8DIRECT(PIO_0_BASE,0)^0xFF;
     a90:	00804034 	movhi	r2,256
     a94:	10842804 	addi	r2,r2,4256
     a98:	10800023 	ldbuio	r2,0(r2)
     a9c:	10803fcc 	andi	r2,r2,255
     aa0:	0084303a 	nor	r2,zero,r2
}
     aa4:	e037883a 	mov	sp,fp
     aa8:	df000017 	ldw	fp,0(sp)
     aac:	dec00104 	addi	sp,sp,4
     ab0:	f800283a 	ret

00000ab4 <conv_grayscale>:
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
		            int width,
		            int height) {
     ab4:	defff604 	addi	sp,sp,-40
     ab8:	dfc00915 	stw	ra,36(sp)
     abc:	df000815 	stw	fp,32(sp)
     ac0:	df000804 	addi	fp,sp,32
     ac4:	e13ffd15 	stw	r4,-12(fp)
     ac8:	e17ffe15 	stw	r5,-8(fp)
     acc:	e1bfff15 	stw	r6,-4(fp)
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture , rgb;
     ad0:	e0bffd17 	ldw	r2,-12(fp)
     ad4:	e0bffa15 	stw	r2,-24(fp)
	grayscale_width = width;
     ad8:	e0bffe17 	ldw	r2,-8(fp)
     adc:	d0a6cb15 	stw	r2,-25812(gp)
	grayscape_height = height;
     ae0:	e0bfff17 	ldw	r2,-4(fp)
     ae4:	d0a6cc15 	stw	r2,-25808(gp)
	if (grayscale_array != NULL)
     ae8:	d0a6cd17 	ldw	r2,-25804(gp)
     aec:	10000326 	beq	r2,zero,afc <conv_grayscale+0x48>
		free(grayscale_array);
     af0:	d0a6cd17 	ldw	r2,-25804(gp)
     af4:	1009883a 	mov	r4,r2
     af8:	000234c0 	call	234c <free>
	grayscale_array = (unsigned char *) malloc(width*height);
     afc:	e0fffe17 	ldw	r3,-8(fp)
     b00:	e0bfff17 	ldw	r2,-4(fp)
     b04:	1885383a 	mul	r2,r3,r2
     b08:	1009883a 	mov	r4,r2
     b0c:	00023380 	call	2338 <malloc>
     b10:	d0a6cd15 	stw	r2,-25804(gp)
	for (y = 0 ; y < height ; y++) {
     b14:	e03ff915 	stw	zero,-28(fp)
     b18:	00003a06 	br	c04 <conv_grayscale+0x150>
		for (x = 0 ; x < width ; x++) {
     b1c:	e03ff815 	stw	zero,-32(fp)
     b20:	00003206 	br	bec <conv_grayscale+0x138>
			rgb = pixels[y*width+x];
     b24:	e0fff917 	ldw	r3,-28(fp)
     b28:	e0bffe17 	ldw	r2,-8(fp)
     b2c:	1887383a 	mul	r3,r3,r2
     b30:	e0bff817 	ldw	r2,-32(fp)
     b34:	1885883a 	add	r2,r3,r2
     b38:	1085883a 	add	r2,r2,r2
     b3c:	1007883a 	mov	r3,r2
     b40:	e0bffa17 	ldw	r2,-24(fp)
     b44:	10c5883a 	add	r2,r2,r3
     b48:	1080000b 	ldhu	r2,0(r2)
     b4c:	e0bffb0d 	sth	r2,-20(fp)
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
     b50:	e0bffb0b 	ldhu	r2,-20(fp)
     b54:	1004d2fa 	srli	r2,r2,11
     b58:	10bfffcc 	andi	r2,r2,65535
     b5c:	100490fa 	slli	r2,r2,3
     b60:	10803fcc 	andi	r2,r2,255
     b64:	10800564 	muli	r2,r2,21
     b68:	e0bffc15 	stw	r2,-16(fp)
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
     b6c:	e0bffb0b 	ldhu	r2,-20(fp)
     b70:	1004d17a 	srli	r2,r2,5
     b74:	10bfffcc 	andi	r2,r2,65535
     b78:	1085883a 	add	r2,r2,r2
     b7c:	1085883a 	add	r2,r2,r2
     b80:	10803fcc 	andi	r2,r2,255
     b84:	10801224 	muli	r2,r2,72
     b88:	e0fffc17 	ldw	r3,-16(fp)
     b8c:	1885883a 	add	r2,r3,r2
     b90:	e0bffc15 	stw	r2,-16(fp)
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
     b94:	e0bffb0b 	ldhu	r2,-20(fp)
     b98:	100490fa 	slli	r2,r2,3
     b9c:	10803fcc 	andi	r2,r2,255
     ba0:	108001e4 	muli	r2,r2,7
     ba4:	e0fffc17 	ldw	r3,-16(fp)
     ba8:	1885883a 	add	r2,r3,r2
     bac:	e0bffc15 	stw	r2,-16(fp)
			gray >>= 6;// /= 100; / // do a decalage 2^6=64 depend result /= 100
     bb0:	e0bffc17 	ldw	r2,-16(fp)
     bb4:	1005d1ba 	srai	r2,r2,6
     bb8:	e0bffc15 	stw	r2,-16(fp)
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     bbc:	d0a6cd17 	ldw	r2,-25804(gp)
     bc0:	e13ff917 	ldw	r4,-28(fp)
     bc4:	e0fffe17 	ldw	r3,-8(fp)
     bc8:	20c9383a 	mul	r4,r4,r3
     bcc:	e0fff817 	ldw	r3,-32(fp)
     bd0:	20c7883a 	add	r3,r4,r3
     bd4:	10c5883a 	add	r2,r2,r3
     bd8:	e0fffc03 	ldbu	r3,-16(fp)
     bdc:	10c00025 	stbio	r3,0(r2)
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
     be0:	e0bff817 	ldw	r2,-32(fp)
     be4:	10800044 	addi	r2,r2,1
     be8:	e0bff815 	stw	r2,-32(fp)
     bec:	e0fff817 	ldw	r3,-32(fp)
     bf0:	e0bffe17 	ldw	r2,-8(fp)
     bf4:	18bfcb16 	blt	r3,r2,b24 <__alt_data_end+0xff000b24>
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
     bf8:	e0bff917 	ldw	r2,-28(fp)
     bfc:	10800044 	addi	r2,r2,1
     c00:	e0bff915 	stw	r2,-28(fp)
     c04:	e0fff917 	ldw	r3,-28(fp)
     c08:	e0bfff17 	ldw	r2,-4(fp)
     c0c:	18bfc316 	blt	r3,r2,b1c <__alt_data_end+0xff000b1c>
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray >>= 6;// /= 100; / // do a decalage 2^6=64 depend result /= 100
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
		}
	}
}
     c10:	0001883a 	nop
     c14:	e037883a 	mov	sp,fp
     c18:	dfc00117 	ldw	ra,4(sp)
     c1c:	df000017 	ldw	fp,0(sp)
     c20:	dec00204 	addi	sp,sp,8
     c24:	f800283a 	ret

00000c28 <get_grayscale_width>:


int get_grayscale_width() {
     c28:	deffff04 	addi	sp,sp,-4
     c2c:	df000015 	stw	fp,0(sp)
     c30:	d839883a 	mov	fp,sp
	return grayscale_width;
     c34:	d0a6cb17 	ldw	r2,-25812(gp)
}
     c38:	e037883a 	mov	sp,fp
     c3c:	df000017 	ldw	fp,0(sp)
     c40:	dec00104 	addi	sp,sp,4
     c44:	f800283a 	ret

00000c48 <get_grayscale_height>:

int get_grayscale_height() {
     c48:	deffff04 	addi	sp,sp,-4
     c4c:	df000015 	stw	fp,0(sp)
     c50:	d839883a 	mov	fp,sp
	return grayscape_height;
     c54:	d0a6cc17 	ldw	r2,-25808(gp)
}
     c58:	e037883a 	mov	sp,fp
     c5c:	df000017 	ldw	fp,0(sp)
     c60:	dec00104 	addi	sp,sp,4
     c64:	f800283a 	ret

00000c68 <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
     c68:	deffff04 	addi	sp,sp,-4
     c6c:	df000015 	stw	fp,0(sp)
     c70:	d839883a 	mov	fp,sp
	return grayscale_array;
     c74:	d0a6cd17 	ldw	r2,-25804(gp)
}
     c78:	e037883a 	mov	sp,fp
     c7c:	df000017 	ldw	fp,0(sp)
     c80:	dec00104 	addi	sp,sp,4
     c84:	f800283a 	ret

00000c88 <i2c_busy_wait>:

#include <system.h>
#include <io.h>
#include "i2c.h"

void i2c_busy_wait() {
     c88:	defffe04 	addi	sp,sp,-8
     c8c:	df000115 	stw	fp,4(sp)
     c90:	df000104 	addi	fp,sp,4
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     c94:	00804034 	movhi	r2,256
     c98:	10842704 	addi	r2,r2,4252
     c9c:	10800037 	ldwio	r2,0(r2)
     ca0:	e0bfff15 	stw	r2,-4(fp)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     ca4:	e0bfff17 	ldw	r2,-4(fp)
     ca8:	108000cc 	andi	r2,r2,3
     cac:	103ff91e 	bne	r2,zero,c94 <__alt_data_end+0xff000c94>
}
     cb0:	0001883a 	nop
     cb4:	e037883a 	mov	sp,fp
     cb8:	df000017 	ldw	fp,0(sp)
     cbc:	dec00104 	addi	sp,sp,4
     cc0:	f800283a 	ret

00000cc4 <i2c_auto_detect>:

void i2c_auto_detect() {
     cc4:	defffb04 	addi	sp,sp,-20
     cc8:	dfc00415 	stw	ra,16(sp)
     ccc:	df000315 	stw	fp,12(sp)
     cd0:	df000304 	addi	fp,sp,12
	int nrdef,loop,value;
    i2c_busy_wait();
     cd4:	0000c880 	call	c88 <i2c_busy_wait>
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     cd8:	00c00104 	movi	r3,4
     cdc:	00804034 	movhi	r2,256
     ce0:	10842704 	addi	r2,r2,4252
     ce4:	10c00035 	stwio	r3,0(r2)
    i2c_busy_wait();
     ce8:	0000c880 	call	c88 <i2c_busy_wait>
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     cec:	00804034 	movhi	r2,256
     cf0:	10842504 	addi	r2,r2,4244
     cf4:	10800037 	ldwio	r2,0(r2)
     cf8:	e0bffe15 	stw	r2,-8(fp)
    printf("Number of I2C devices detected: %d\n",nrdef);
     cfc:	e17ffe17 	ldw	r5,-8(fp)
     d00:	01000074 	movhi	r4,1
     d04:	2106a804 	addi	r4,r4,6816
     d08:	0002b9c0 	call	2b9c <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     d0c:	e03ffd15 	stw	zero,-12(fp)
     d10:	00001006 	br	d54 <i2c_auto_detect+0x90>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     d14:	00804034 	movhi	r2,256
     d18:	10842404 	addi	r2,r2,4240
     d1c:	e0fffd17 	ldw	r3,-12(fp)
     d20:	10c00035 	stwio	r3,0(r2)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
     d24:	00804034 	movhi	r2,256
     d28:	10842404 	addi	r2,r2,4240
     d2c:	10800037 	ldwio	r2,0(r2)
     d30:	e0bfff15 	stw	r2,-4(fp)
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     d34:	e1bfff17 	ldw	r6,-4(fp)
     d38:	e17ffd17 	ldw	r5,-12(fp)
     d3c:	01000074 	movhi	r4,1
     d40:	2106b104 	addi	r4,r4,6852
     d44:	0002b9c0 	call	2b9c <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     d48:	e0bffd17 	ldw	r2,-12(fp)
     d4c:	10800044 	addi	r2,r2,1
     d50:	e0bffd15 	stw	r2,-12(fp)
     d54:	e0fffd17 	ldw	r3,-12(fp)
     d58:	e0bffe17 	ldw	r2,-8(fp)
     d5c:	18bfed16 	blt	r3,r2,d14 <__alt_data_end+0xff000d14>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     d60:	0001883a 	nop
     d64:	e037883a 	mov	sp,fp
     d68:	dfc00117 	ldw	ra,4(sp)
     d6c:	df000017 	ldw	fp,0(sp)
     d70:	dec00204 	addi	sp,sp,8
     d74:	f800283a 	ret

00000d78 <i2c_short_read>:

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address) {
     d78:	defffc04 	addi	sp,sp,-16
     d7c:	dfc00315 	stw	ra,12(sp)
     d80:	df000215 	stw	fp,8(sp)
     d84:	df000204 	addi	fp,sp,8
     d88:	2007883a 	mov	r3,r4
     d8c:	2805883a 	mov	r2,r5
     d90:	e0fffe05 	stb	r3,-8(fp)
     d94:	e0bfff0d 	sth	r2,-4(fp)
	i2c_busy_wait();
     d98:	0000c880 	call	c88 <i2c_busy_wait>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     d9c:	e0fffe03 	ldbu	r3,-8(fp)
     da0:	00804034 	movhi	r2,256
     da4:	10842404 	addi	r2,r2,4240
     da8:	10c00025 	stbio	r3,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     dac:	e0ffff0b 	ldhu	r3,-4(fp)
     db0:	00804034 	movhi	r2,256
     db4:	10842504 	addi	r2,r2,4244
     db8:	10c0002d 	sthio	r3,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     dbc:	00c010c4 	movi	r3,67
     dc0:	00804034 	movhi	r2,256
     dc4:	10842704 	addi	r2,r2,4252
     dc8:	10c00025 	stbio	r3,0(r2)
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
     dcc:	0000c880 	call	c88 <i2c_busy_wait>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     dd0:	e0bffe03 	ldbu	r2,-8(fp)
     dd4:	10c00044 	addi	r3,r2,1
     dd8:	00804034 	movhi	r2,256
     ddc:	10842404 	addi	r2,r2,4240
     de0:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     de4:	00c00884 	movi	r3,34
     de8:	00804034 	movhi	r2,256
     dec:	10842704 	addi	r2,r2,4252
     df0:	10c00025 	stbio	r3,0(r2)
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
     df4:	0000c880 	call	c88 <i2c_busy_wait>
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     df8:	00804034 	movhi	r2,256
     dfc:	10842604 	addi	r2,r2,4248
     e00:	10800037 	ldwio	r2,0(r2)
}
     e04:	e037883a 	mov	sp,fp
     e08:	dfc00117 	ldw	ra,4(sp)
     e0c:	df000017 	ldw	fp,0(sp)
     e10:	dec00204 	addi	sp,sp,8
     e14:	f800283a 	ret

00000e18 <i2c_short_write>:

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data) {
     e18:	defffb04 	addi	sp,sp,-20
     e1c:	dfc00415 	stw	ra,16(sp)
     e20:	df000315 	stw	fp,12(sp)
     e24:	df000304 	addi	fp,sp,12
     e28:	2807883a 	mov	r3,r5
     e2c:	3005883a 	mov	r2,r6
     e30:	e13ffd05 	stb	r4,-12(fp)
     e34:	e0fffe0d 	sth	r3,-8(fp)
     e38:	e0bfff0d 	sth	r2,-4(fp)
	i2c_busy_wait();
     e3c:	0000c880 	call	c88 <i2c_busy_wait>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     e40:	e0fffd03 	ldbu	r3,-12(fp)
     e44:	00804034 	movhi	r2,256
     e48:	10842404 	addi	r2,r2,4240
     e4c:	10c00025 	stbio	r3,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     e50:	e0fffe0b 	ldhu	r3,-8(fp)
     e54:	00804034 	movhi	r2,256
     e58:	10842504 	addi	r2,r2,4244
     e5c:	10c0002d 	sthio	r3,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
     e60:	e0ffff0b 	ldhu	r3,-4(fp)
     e64:	00804034 	movhi	r2,256
     e68:	10842604 	addi	r2,r2,4248
     e6c:	10c0002d 	sthio	r3,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     e70:	00c01084 	movi	r3,66
     e74:	00804034 	movhi	r2,256
     e78:	10842704 	addi	r2,r2,4252
     e7c:	10c00025 	stbio	r3,0(r2)
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
     e80:	0000c880 	call	c88 <i2c_busy_wait>
}
     e84:	0001883a 	nop
     e88:	e037883a 	mov	sp,fp
     e8c:	dfc00117 	ldw	ra,4(sp)
     e90:	df000017 	ldw	fp,0(sp)
     e94:	dec00204 	addi	sp,sp,8
     e98:	f800283a 	ret

00000e9c <LCD_Write_Command>:
#include "lcd_simple.h"

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
     e9c:	defffd04 	addi	sp,sp,-12
     ea0:	dfc00215 	stw	ra,8(sp)
     ea4:	df000115 	stw	fp,4(sp)
     ea8:	df000104 	addi	fp,sp,4
     eac:	e13fff15 	stw	r4,-4(fp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     eb0:	00804034 	movhi	r2,256
     eb4:	10841804 	addi	r2,r2,4192
     eb8:	e0ffff0b 	ldhu	r3,-4(fp)
     ebc:	10c0002d 	sthio	r3,0(r2)
	usleep(10);
     ec0:	01000284 	movi	r4,10
     ec4:	000f4900 	call	f490 <usleep>
}
     ec8:	0001883a 	nop
     ecc:	e037883a 	mov	sp,fp
     ed0:	dfc00117 	ldw	ra,4(sp)
     ed4:	df000017 	ldw	fp,0(sp)
     ed8:	dec00204 	addi	sp,sp,8
     edc:	f800283a 	ret

00000ee0 <LCD_Write_Data>:

void LCD_Write_Data(int data) {
     ee0:	defffd04 	addi	sp,sp,-12
     ee4:	dfc00215 	stw	ra,8(sp)
     ee8:	df000115 	stw	fp,4(sp)
     eec:	df000104 	addi	fp,sp,4
     ef0:	e13fff15 	stw	r4,-4(fp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ef4:	00804034 	movhi	r2,256
     ef8:	10841904 	addi	r2,r2,4196
     efc:	e0ffff0b 	ldhu	r3,-4(fp)
     f00:	10c0002d 	sthio	r3,0(r2)
	usleep(10);
     f04:	01000284 	movi	r4,10
     f08:	000f4900 	call	f490 <usleep>
}
     f0c:	0001883a 	nop
     f10:	e037883a 	mov	sp,fp
     f14:	dfc00117 	ldw	ra,4(sp)
     f18:	df000017 	ldw	fp,0(sp)
     f1c:	dec00204 	addi	sp,sp,8
     f20:	f800283a 	ret

00000f24 <init_LCD>:


void init_LCD() {
     f24:	defffe04 	addi	sp,sp,-8
     f28:	dfc00115 	stw	ra,4(sp)
     f2c:	df000015 	stw	fp,0(sp)
     f30:	d839883a 	mov	fp,sp
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f34:	00c00084 	movi	r3,2
     f38:	00804034 	movhi	r2,256
     f3c:	10841a04 	addi	r2,r2,4200
     f40:	10c0002d 	sthio	r3,0(r2)
			         LCD_Sixteen_Bit|LCD_Reset|
			         LCD_RGB565_Mode|LCD_Color_Image); // Set 16 bit transfer mode and reset
	LCD_Write_Command(0x0028); 	//display OFF
     f44:	01000a04 	movi	r4,40
     f48:	0000e9c0 	call	e9c <LCD_Write_Command>
	LCD_Write_Command(0x0011); 	//exit SLEEP mode
     f4c:	01000444 	movi	r4,17
     f50:	0000e9c0 	call	e9c <LCD_Write_Command>
	LCD_Write_Data(0x0000);
     f54:	0009883a 	mov	r4,zero
     f58:	0000ee00 	call	ee0 <LCD_Write_Data>

	LCD_Write_Command(0x00CB); 	//Power Control A
     f5c:	010032c4 	movi	r4,203
     f60:	0000e9c0 	call	e9c <LCD_Write_Command>
	LCD_Write_Data(0x0039); 	//always 0x39
     f64:	01000e44 	movi	r4,57
     f68:	0000ee00 	call	ee0 <LCD_Write_Data>
	LCD_Write_Data(0x002C); 	//always 0x2C
     f6c:	01000b04 	movi	r4,44
     f70:	0000ee00 	call	ee0 <LCD_Write_Data>
	LCD_Write_Data(0x0000); 	//always 0x00
     f74:	0009883a 	mov	r4,zero
     f78:	0000ee00 	call	ee0 <LCD_Write_Data>
	LCD_Write_Data(0x0034); 	//Vcore = 1.6V
     f7c:	01000d04 	movi	r4,52
     f80:	0000ee00 	call	ee0 <LCD_Write_Data>
	LCD_Write_Data(0x0002); 	//DDVDH = 5.6V
     f84:	01000084 	movi	r4,2
     f88:	0000ee00 	call	ee0 <LCD_Write_Data>

	LCD_Write_Command(0x00CF); 	//Power Control B
     f8c:	010033c4 	movi	r4,207
     f90:	0000e9c0 	call	e9c <LCD_Write_Command>
	LCD_Write_Data(0x0000); 	//always 0x00
     f94:	0009883a 	mov	r4,zero
     f98:	0000ee00 	call	ee0 <LCD_Write_Data>
	LCD_Write_Data(0x0081); 	//PCEQ off
     f9c:	01002044 	movi	r4,129
     fa0:	0000ee00 	call	ee0 <LCD_Write_Data>
	LCD_Write_Data(0x0030); 	//ESD protection
     fa4:	01000c04 	movi	r4,48
     fa8:	0000ee00 	call	ee0 <LCD_Write_Data>

	LCD_Write_Command(0x00E8); 	//Driver timing control A
     fac:	01003a04 	movi	r4,232
     fb0:	0000e9c0 	call	e9c <LCD_Write_Command>
	LCD_Write_Data(0x0085); 	//non - overlap
     fb4:	01002144 	movi	r4,133
     fb8:	0000ee00 	call	ee0 <LCD_Write_Data>
	LCD_Write_Data(0x0001); 	//EQ timing
     fbc:	01000044 	movi	r4,1
     fc0:	0000ee00 	call	ee0 <LCD_Write_Data>
	LCD_Write_Data(0x0079); 	//Pre-chargetiming
     fc4:	01001e44 	movi	r4,121
     fc8:	0000ee00 	call	ee0 <LCD_Write_Data>
	LCD_Write_Command(0x00EA); 	//Driver timing control B
     fcc:	01003a84 	movi	r4,234
     fd0:	0000e9c0 	call	e9c <LCD_Write_Command>
	LCD_Write_Data(0x0000);		//Gate driver timing
     fd4:	0009883a 	mov	r4,zero
     fd8:	0000ee00 	call	ee0 <LCD_Write_Data>
	LCD_Write_Data(0x0000);		//always 0x00
     fdc:	0009883a 	mov	r4,zero
     fe0:	0000ee00 	call	ee0 <LCD_Write_Data>
	LCD_Write_Data(0x0064);		//soft start 
     fe4:	01001904 	movi	r4,100
     fe8:	0000ee00 	call	ee0 <LCD_Write_Data>
	LCD_Write_Data(0x0003);		//power on sequence 
     fec:	010000c4 	movi	r4,3
     ff0:	0000ee00 	call	ee0 <LCD_Write_Data>
	LCD_Write_Data(0x0012);		//power on sequence 
     ff4:	01000484 	movi	r4,18
     ff8:	0000ee00 	call	ee0 <LCD_Write_Data>
	LCD_Write_Data(0x0081);		//DDVDH enhance on 
     ffc:	01002044 	movi	r4,129
    1000:	0000ee00 	call	ee0 <LCD_Write_Data>

	LCD_Write_Command(0x00F7); 	//Pump ratio control 
    1004:	01003dc4 	movi	r4,247
    1008:	0000e9c0 	call	e9c <LCD_Write_Command>
	LCD_Write_Data(0x0020); 	//DDVDH=2xVCI 
    100c:	01000804 	movi	r4,32
    1010:	0000ee00 	call	ee0 <LCD_Write_Data>

	LCD_Write_Command(0x00C0);	//power control 1 
    1014:	01003004 	movi	r4,192
    1018:	0000e9c0 	call	e9c <LCD_Write_Command>
	LCD_Write_Data(0x0026);
    101c:	01000984 	movi	r4,38
    1020:	0000ee00 	call	ee0 <LCD_Write_Data>
	LCD_Write_Data(0x0004); 	//second parameter for ILI9340 (ignored by ILI9341) 
    1024:	01000104 	movi	r4,4
    1028:	0000ee00 	call	ee0 <LCD_Write_Data>

	LCD_Write_Command(0x00C1); 	//power control 2 
    102c:	01003044 	movi	r4,193
    1030:	0000e9c0 	call	e9c <LCD_Write_Command>
	LCD_Write_Data(0x0011);
    1034:	01000444 	movi	r4,17
    1038:	0000ee00 	call	ee0 <LCD_Write_Data>

	LCD_Write_Command(0x00C5); 	//VCOM control 1 
    103c:	01003144 	movi	r4,197
    1040:	0000e9c0 	call	e9c <LCD_Write_Command>
	LCD_Write_Data(0x0035);
    1044:	01000d44 	movi	r4,53
    1048:	0000ee00 	call	ee0 <LCD_Write_Data>
	LCD_Write_Data(0x003E);
    104c:	01000f84 	movi	r4,62
    1050:	0000ee00 	call	ee0 <LCD_Write_Data>

	LCD_Write_Command(0x00C7); 	//VCOM control 2 
    1054:	010031c4 	movi	r4,199
    1058:	0000e9c0 	call	e9c <LCD_Write_Command>
	LCD_Write_Data(0x00BE);
    105c:	01002f84 	movi	r4,190
    1060:	0000ee00 	call	ee0 <LCD_Write_Data>

	LCD_Write_Command(0x00B1); 	//frame rate control 
    1064:	01002c44 	movi	r4,177
    1068:	0000e9c0 	call	e9c <LCD_Write_Command>
	LCD_Write_Data(0x0000);
    106c:	0009883a 	mov	r4,zero
    1070:	0000ee00 	call	ee0 <LCD_Write_Data>
	LCD_Write_Data(0x0010);
    1074:	01000404 	movi	r4,16
    1078:	0000ee00 	call	ee0 <LCD_Write_Data>

	LCD_Write_Command(0x003A);	//pixel format = 16 bit per pixel 
    107c:	01000e84 	movi	r4,58
    1080:	0000e9c0 	call	e9c <LCD_Write_Command>
	LCD_Write_Data(0x0055);
    1084:	01001544 	movi	r4,85
    1088:	0000ee00 	call	ee0 <LCD_Write_Data>

	LCD_Write_Command(0x00B6); 	//display function control 
    108c:	01002d84 	movi	r4,182
    1090:	0000e9c0 	call	e9c <LCD_Write_Command>
	LCD_Write_Data(0x000A);
    1094:	01000284 	movi	r4,10
    1098:	0000ee00 	call	ee0 <LCD_Write_Data>
	LCD_Write_Data(0x00A2);
    109c:	01002884 	movi	r4,162
    10a0:	0000ee00 	call	ee0 <LCD_Write_Data>

	LCD_Write_Command(0x00F2); 	//3G Gamma control 
    10a4:	01003c84 	movi	r4,242
    10a8:	0000e9c0 	call	e9c <LCD_Write_Command>
	LCD_Write_Data(0x0002);	 	//off 
    10ac:	01000084 	movi	r4,2
    10b0:	0000ee00 	call	ee0 <LCD_Write_Data>

	LCD_Write_Command(0x0026); 	//Gamma curve 3 
    10b4:	01000984 	movi	r4,38
    10b8:	0000e9c0 	call	e9c <LCD_Write_Command>
	LCD_Write_Data(0x0001);
    10bc:	01000044 	movi	r4,1
    10c0:	0000ee00 	call	ee0 <LCD_Write_Data>

	LCD_Write_Command(0x0036); 	//memory access control = BGR 
    10c4:	01000d84 	movi	r4,54
    10c8:	0000e9c0 	call	e9c <LCD_Write_Command>
	LCD_Write_Data(0x0000);
    10cc:	0009883a 	mov	r4,zero
    10d0:	0000ee00 	call	ee0 <LCD_Write_Data>

	LCD_Write_Command(0x002A); 	//column address set 
    10d4:	01000a84 	movi	r4,42
    10d8:	0000e9c0 	call	e9c <LCD_Write_Command>
	LCD_Write_Data(0x0000);
    10dc:	0009883a 	mov	r4,zero
    10e0:	0000ee00 	call	ee0 <LCD_Write_Data>
	LCD_Write_Data(0x0000);		//start 0x0000 
    10e4:	0009883a 	mov	r4,zero
    10e8:	0000ee00 	call	ee0 <LCD_Write_Data>
	LCD_Write_Data(0x0000);
    10ec:	0009883a 	mov	r4,zero
    10f0:	0000ee00 	call	ee0 <LCD_Write_Data>
	LCD_Write_Data(0x00EF);		//end 0x00EF 
    10f4:	01003bc4 	movi	r4,239
    10f8:	0000ee00 	call	ee0 <LCD_Write_Data>

	LCD_Write_Command(0x002B);	//page address set 
    10fc:	01000ac4 	movi	r4,43
    1100:	0000e9c0 	call	e9c <LCD_Write_Command>
	LCD_Write_Data(0x0000);
    1104:	0009883a 	mov	r4,zero
    1108:	0000ee00 	call	ee0 <LCD_Write_Data>
	LCD_Write_Data(0x0000);		//start 0x0000 
    110c:	0009883a 	mov	r4,zero
    1110:	0000ee00 	call	ee0 <LCD_Write_Data>
	LCD_Write_Data(0x0001);
    1114:	01000044 	movi	r4,1
    1118:	0000ee00 	call	ee0 <LCD_Write_Data>
	LCD_Write_Data(0x003F);		//end 0x013F 
    111c:	01000fc4 	movi	r4,63
    1120:	0000ee00 	call	ee0 <LCD_Write_Data>
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
    1124:	00c03c04 	movi	r3,240
    1128:	00804034 	movhi	r2,256
    112c:	10841d04 	addi	r2,r2,4212
    1130:	10c00035 	stwio	r3,0(r2)
	LCD_width = 240;
    1134:	00803c04 	movi	r2,240
    1138:	d0a6ce8d 	sth	r2,-25798(gp)
	LCD_height = 320;
    113c:	00805004 	movi	r2,320
    1140:	d0a6ce0d 	sth	r2,-25800(gp)


	LCD_Write_Command(0x0029);
    1144:	01000a44 	movi	r4,41
    1148:	0000e9c0 	call	e9c <LCD_Write_Command>

}
    114c:	0001883a 	nop
    1150:	e037883a 	mov	sp,fp
    1154:	dfc00117 	ldw	ra,4(sp)
    1158:	df000017 	ldw	fp,0(sp)
    115c:	dec00204 	addi	sp,sp,8
    1160:	f800283a 	ret

00001164 <transfer_LCD_no_dma>:

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
    1164:	defff904 	addi	sp,sp,-28
    1168:	dfc00615 	stw	ra,24(sp)
    116c:	df000515 	stw	fp,20(sp)
    1170:	df000504 	addi	fp,sp,20
    1174:	e13ffd15 	stw	r4,-12(fp)
    1178:	e17ffe15 	stw	r5,-8(fp)
    117c:	e1bfff15 	stw	r6,-4(fp)
	unsigned short *data_array = (unsigned short *)array;
    1180:	e0bffd17 	ldw	r2,-12(fp)
    1184:	e0bffc15 	stw	r2,-16(fp)
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
    1188:	00804034 	movhi	r2,256
    118c:	10841e04 	addi	r2,r2,4216
    1190:	e0fffe17 	ldw	r3,-8(fp)
    1194:	10c00035 	stwio	r3,0(r2)
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
    1198:	01000b04 	movi	r4,44
    119c:	0000e9c0 	call	e9c <LCD_Write_Command>
	for (pixels = 0 ; pixels < width*height ; pixels++)
    11a0:	e03ffb15 	stw	zero,-20(fp)
    11a4:	00000c06 	br	11d8 <transfer_LCD_no_dma+0x74>
		LCD_Write_Data(data_array[pixels]);
    11a8:	e0bffb17 	ldw	r2,-20(fp)
    11ac:	1085883a 	add	r2,r2,r2
    11b0:	1007883a 	mov	r3,r2
    11b4:	e0bffc17 	ldw	r2,-16(fp)
    11b8:	10c5883a 	add	r2,r2,r3
    11bc:	1080000b 	ldhu	r2,0(r2)
    11c0:	10bfffcc 	andi	r2,r2,65535
    11c4:	1009883a 	mov	r4,r2
    11c8:	0000ee00 	call	ee0 <LCD_Write_Data>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
    11cc:	e0bffb17 	ldw	r2,-20(fp)
    11d0:	10800044 	addi	r2,r2,1
    11d4:	e0bffb15 	stw	r2,-20(fp)
    11d8:	e0fffe17 	ldw	r3,-8(fp)
    11dc:	e0bfff17 	ldw	r2,-4(fp)
    11e0:	1885383a 	mul	r2,r3,r2
    11e4:	1007883a 	mov	r3,r2
    11e8:	e0bffb17 	ldw	r2,-20(fp)
    11ec:	10ffee36 	bltu	r2,r3,11a8 <__alt_data_end+0xff0011a8>
		LCD_Write_Data(data_array[pixels]);
}
    11f0:	0001883a 	nop
    11f4:	e037883a 	mov	sp,fp
    11f8:	dfc00117 	ldw	ra,4(sp)
    11fc:	df000017 	ldw	fp,0(sp)
    1200:	dec00204 	addi	sp,sp,8
    1204:	f800283a 	ret

00001208 <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
    1208:	defffa04 	addi	sp,sp,-24
    120c:	df000515 	stw	fp,20(sp)
    1210:	df000504 	addi	fp,sp,20
    1214:	e13ffc15 	stw	r4,-16(fp)
    1218:	e17ffd15 	stw	r5,-12(fp)
    121c:	e1bffe15 	stw	r6,-8(fp)
    1220:	3805883a 	mov	r2,r7
    1224:	e0bfff05 	stb	r2,-4(fp)
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
    1228:	d0a6ce0b 	ldhu	r2,-25800(gp)
    122c:	10bfffcc 	andi	r2,r2,65535
    1230:	e0fffe17 	ldw	r3,-8(fp)
    1234:	1880010e 	bge	r3,r2,123c <transfer_LCD_with_dma+0x34>
    1238:	1805883a 	mov	r2,r3
    123c:	e0bffb0d 	sth	r2,-20(fp)
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
    1240:	d0a6ce8b 	ldhu	r2,-25798(gp)
    1244:	10bfffcc 	andi	r2,r2,65535
    1248:	e0fffd17 	ldw	r3,-12(fp)
    124c:	1880010e 	bge	r3,r2,1254 <transfer_LCD_with_dma+0x4c>
    1250:	1805883a 	mov	r2,r3
    1254:	e0bffb8d 	sth	r2,-18(fp)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
    1258:	00804034 	movhi	r2,256
    125c:	10841e04 	addi	r2,r2,4216
    1260:	e0fffd17 	ldw	r3,-12(fp)
    1264:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
    1268:	e0fffc17 	ldw	r3,-16(fp)
    126c:	00804034 	movhi	r2,256
    1270:	10841b04 	addi	r2,r2,4204
    1274:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
    1278:	e0fffb8b 	ldhu	r3,-18(fp)
    127c:	e0bffb0b 	ldhu	r2,-20(fp)
    1280:	1887383a 	mul	r3,r3,r2
    1284:	00804034 	movhi	r2,256
    1288:	10841c04 	addi	r2,r2,4208
    128c:	10c00035 	stwio	r3,0(r2)
	if (grayscale==0)
    1290:	e0bfff07 	ldb	r2,-4(fp)
    1294:	1000051e 	bne	r2,zero,12ac <transfer_LCD_with_dma+0xa4>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
    1298:	00c04004 	movi	r3,256
    129c:	00804034 	movhi	r2,256
    12a0:	10841a04 	addi	r2,r2,4200
    12a4:	10c0002d 	sthio	r3,0(r2)
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_GrayScale_Image);
}
    12a8:	00000406 	br	12bc <transfer_LCD_with_dma+0xb4>
	if (grayscale==0)
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
    12ac:	00c04404 	movi	r3,272
    12b0:	00804034 	movhi	r2,256
    12b4:	10841a04 	addi	r2,r2,4200
    12b8:	10c0002d 	sthio	r3,0(r2)
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_GrayScale_Image);
}
    12bc:	0001883a 	nop
    12c0:	e037883a 	mov	sp,fp
    12c4:	df000017 	ldw	fp,0(sp)
    12c8:	dec00104 	addi	sp,sp,4
    12cc:	f800283a 	ret

000012d0 <main>:
#include "sys/alt_timestamp.h"
#include "alt_types.h"

// check makefile tohave -O1,-O2,-O3
int main()
{
    12d0:	deffea04 	addi	sp,sp,-88
    12d4:	dfc01515 	stw	ra,84(sp)
    12d8:	df001415 	stw	fp,80(sp)
    12dc:	dc401315 	stw	r17,76(sp)
    12e0:	dc001215 	stw	r16,72(sp)
    12e4:	df001404 	addi	fp,sp,80
  alt_u32 start_sobel_threshold;
  alt_u32 end_sobel_threshold;
  alt_u32 start_sobel_conv_graycale;
  alt_u32 end_sobel_conv_graycale;
  //init time
  alt_timestamp_start();
    12e8:	00102380 	call	10238 <alt_timestamp_start>
  init_LCD();
    12ec:	0000f240 	call	f24 <init_LCD>
  init_camera();
    12f0:	00002800 	call	280 <init_camera>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    12f4:	01000604 	movi	r4,24
    12f8:	00023000 	call	2300 <vga_set_swap>
  printf("Hello from Nios II!\n");
    12fc:	01000074 	movhi	r4,1
    1300:	2106ba04 	addi	r4,r4,6888
    1304:	0002c980 	call	2c98 <puts>
  cam_get_profiling();
    1308:	00007fc0 	call	7fc <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    130c:	00007640 	call	764 <cam_get_xsize>
    1310:	143fffcc 	andi	r16,r2,65535
    1314:	00007b00 	call	7b0 <cam_get_ysize>
    1318:	10bfffcc 	andi	r2,r2,65535
    131c:	8085383a 	mul	r2,r16,r2
    1320:	1009883a 	mov	r4,r2
    1324:	00023380 	call	2338 <malloc>
    1328:	e0bff715 	stw	r2,-36(fp)
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    132c:	00007640 	call	764 <cam_get_xsize>
    1330:	143fffcc 	andi	r16,r2,65535
    1334:	00007b00 	call	7b0 <cam_get_ysize>
    1338:	10bfffcc 	andi	r2,r2,65535
    133c:	8085383a 	mul	r2,r16,r2
    1340:	1009883a 	mov	r4,r2
    1344:	00023380 	call	2338 <malloc>
    1348:	e0bff815 	stw	r2,-32(fp)
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    134c:	00007640 	call	764 <cam_get_xsize>
    1350:	143fffcc 	andi	r16,r2,65535
    1354:	00007b00 	call	7b0 <cam_get_ysize>
    1358:	10bfffcc 	andi	r2,r2,65535
    135c:	8085383a 	mul	r2,r16,r2
    1360:	1009883a 	mov	r4,r2
    1364:	00023380 	call	2338 <malloc>
    1368:	e0bff915 	stw	r2,-28(fp)
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    136c:	00007640 	call	764 <cam_get_xsize>
    1370:	143fffcc 	andi	r16,r2,65535
    1374:	00007b00 	call	7b0 <cam_get_ysize>
    1378:	10bfffcc 	andi	r2,r2,65535
    137c:	8085383a 	mul	r2,r16,r2
    1380:	1009883a 	mov	r4,r2
    1384:	00023380 	call	2338 <malloc>
    1388:	e0bffa15 	stw	r2,-24(fp)
  cam_set_image_pointer(0,buffer1);
    138c:	e17ff717 	ldw	r5,-36(fp)
    1390:	0009883a 	mov	r4,zero
    1394:	00008a40 	call	8a4 <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
    1398:	e17ff817 	ldw	r5,-32(fp)
    139c:	01000044 	movi	r4,1
    13a0:	00008a40 	call	8a4 <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
    13a4:	e17ff917 	ldw	r5,-28(fp)
    13a8:	01000084 	movi	r4,2
    13ac:	00008a40 	call	8a4 <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
    13b0:	e17ffa17 	ldw	r5,-24(fp)
    13b4:	010000c4 	movi	r4,3
    13b8:	00008a40 	call	8a4 <cam_set_image_pointer>
  enable_continues_mode();
    13bc:	00009fc0 	call	9fc <enable_continues_mode>
  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
    13c0:	00007640 	call	764 <cam_get_xsize>
    13c4:	10bfffcc 	andi	r2,r2,65535
    13c8:	1004d07a 	srli	r2,r2,1
    13cc:	143fffcc 	andi	r16,r2,65535
    13d0:	00007b00 	call	7b0 <cam_get_ysize>
    13d4:	10bfffcc 	andi	r2,r2,65535
    13d8:	100b883a 	mov	r5,r2
    13dc:	8009883a 	mov	r4,r16
    13e0:	000186c0 	call	186c <init_sobel_arrays>
  do {
	  if (new_image_available() != 0) {
    13e4:	0000a2c0 	call	a2c <new_image_available>
    13e8:	10803fcc 	andi	r2,r2,255
    13ec:	1080201c 	xori	r2,r2,128
    13f0:	10bfe004 	addi	r2,r2,-128
    13f4:	103ffb26 	beq	r2,zero,13e4 <__alt_data_end+0xff0013e4>
		  if (current_image_valid()!=0) {
    13f8:	000094c0 	call	94c <current_image_valid>
    13fc:	10bfffcc 	andi	r2,r2,65535
    1400:	10a0001c 	xori	r2,r2,32768
    1404:	10a00004 	addi	r2,r2,-32768
    1408:	1000f226 	beq	r2,zero,17d4 <main+0x504>
			  current_mode = DIPSW_get_value();
    140c:	0000a840 	call	a84 <DIPSW_get_value>
    1410:	e0bffb05 	stb	r2,-20(fp)
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
    1414:	e0bffb03 	ldbu	r2,-20(fp)
    1418:	108001cc 	andi	r2,r2,7
    141c:	e0bfec05 	stb	r2,-80(fp)
			  image = (unsigned short*)current_image_pointer();
    1420:	00009840 	call	984 <current_image_pointer>
    1424:	e0bffc15 	stw	r2,-16(fp)
		      switch (mode) {
    1428:	e0bfec03 	ldbu	r2,-80(fp)
    142c:	10c00060 	cmpeqi	r3,r2,1
    1430:	1800211e 	bne	r3,zero,14b8 <main+0x1e8>
    1434:	10c00088 	cmpgei	r3,r2,2
    1438:	1800021e 	bne	r3,zero,1444 <main+0x174>
    143c:	10000626 	beq	r2,zero,1458 <main+0x188>
    1440:	0000a206 	br	16cc <main+0x3fc>
    1444:	10c000a0 	cmpeqi	r3,r2,2
    1448:	1800421e 	bne	r3,zero,1554 <main+0x284>
    144c:	108000e0 	cmpeqi	r2,r2,3
    1450:	10006c1e 	bne	r2,zero,1604 <main+0x334>
    1454:	00009d06 	br	16cc <main+0x3fc>
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1458:	e0fffc17 	ldw	r3,-16(fp)
    145c:	00a04414 	movui	r2,33040
    1460:	18a1883a 	add	r16,r3,r2
		                	cam_get_xsize()>>1,
    1464:	00007640 	call	764 <cam_get_xsize>
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1468:	10bfffcc 	andi	r2,r2,65535
    146c:	1004d07a 	srli	r2,r2,1
    1470:	147fffcc 	andi	r17,r2,65535
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
    1474:	00007b00 	call	7b0 <cam_get_ysize>
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1478:	10bfffcc 	andi	r2,r2,65535
    147c:	000f883a 	mov	r7,zero
    1480:	100d883a 	mov	r6,r2
    1484:	880b883a 	mov	r5,r17
    1488:	8009883a 	mov	r4,r16
    148c:	00012080 	call	1208 <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1490:	e0bffb03 	ldbu	r2,-20(fp)
    1494:	10803fcc 	andi	r2,r2,255
    1498:	1080201c 	xori	r2,r2,128
    149c:	10bfe004 	addi	r2,r2,-128
    14a0:	1000c30e 	bge	r2,zero,17b0 <main+0x4e0>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    14a4:	01000204 	movi	r4,8
    14a8:	00023000 	call	2300 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    14ac:	e13ffc17 	ldw	r4,-16(fp)
    14b0:	00022cc0 	call	22cc <vga_set_pointer>
		      	  	   }
		      	  	   break;
    14b4:	0000be06 	br	17b0 <main+0x4e0>
		      case 1 : 
			  			start_sobel_conv_graycale =  alt_timestamp();
    14b8:	00102b00 	call	102b0 <alt_timestamp>
    14bc:	e0bff515 	stw	r2,-44(fp)
						conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    14c0:	00007640 	call	764 <cam_get_xsize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : 
			  			start_sobel_conv_graycale =  alt_timestamp();
						conv_grayscale((void *)image,
    14c4:	10bfffcc 	andi	r2,r2,65535
    14c8:	1004d07a 	srli	r2,r2,1
    14cc:	143fffcc 	andi	r16,r2,65535
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
    14d0:	00007b00 	call	7b0 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : 
			  			start_sobel_conv_graycale =  alt_timestamp();
						conv_grayscale((void *)image,
    14d4:	10bfffcc 	andi	r2,r2,65535
    14d8:	100d883a 	mov	r6,r2
    14dc:	800b883a 	mov	r5,r16
    14e0:	e13ffc17 	ldw	r4,-16(fp)
    14e4:	0000ab40 	call	ab4 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
						end_sobel_conv_graycale = alt_timestamp();
    14e8:	00102b00 	call	102b0 <alt_timestamp>
    14ec:	e0bff615 	stw	r2,-40(fp)
		               grayscale = get_grayscale_picture();
    14f0:	0000c680 	call	c68 <get_grayscale_picture>
    14f4:	e0bffd15 	stw	r2,-12(fp)
		               transfer_LCD_with_dma(&grayscale[16520],
    14f8:	e0bffd17 	ldw	r2,-12(fp)
    14fc:	14102204 	addi	r16,r2,16520
		      		                	cam_get_xsize()>>1,
    1500:	00007640 	call	764 <cam_get_xsize>
						conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
						end_sobel_conv_graycale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    1504:	10bfffcc 	andi	r2,r2,65535
    1508:	1004d07a 	srli	r2,r2,1
    150c:	147fffcc 	andi	r17,r2,65535
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
    1510:	00007b00 	call	7b0 <cam_get_ysize>
						conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
						end_sobel_conv_graycale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    1514:	10bfffcc 	andi	r2,r2,65535
    1518:	01c00044 	movi	r7,1
    151c:	100d883a 	mov	r6,r2
    1520:	880b883a 	mov	r5,r17
    1524:	8009883a 	mov	r4,r16
    1528:	00012080 	call	1208 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    152c:	e0bffb03 	ldbu	r2,-20(fp)
    1530:	10803fcc 	andi	r2,r2,255
    1534:	1080201c 	xori	r2,r2,128
    1538:	10bfe004 	addi	r2,r2,-128
    153c:	10009e0e 	bge	r2,zero,17b8 <main+0x4e8>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    1540:	01000604 	movi	r4,24
    1544:	00023000 	call	2300 <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    1548:	e13ffd17 	ldw	r4,-12(fp)
    154c:	00022cc0 	call	22cc <vga_set_pointer>
		      	  	   }
		      	  	   break;
    1550:	00009906 	br	17b8 <main+0x4e8>
		      case 2 : 
			  			start_sobel_conv_graycale =  alt_timestamp();
    1554:	00102b00 	call	102b0 <alt_timestamp>
    1558:	e0bff515 	stw	r2,-44(fp)
						conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    155c:	00007640 	call	764 <cam_get_xsize>
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : 
			  			start_sobel_conv_graycale =  alt_timestamp();
						conv_grayscale((void *)image,
    1560:	10bfffcc 	andi	r2,r2,65535
    1564:	1004d07a 	srli	r2,r2,1
    1568:	143fffcc 	andi	r16,r2,65535
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
    156c:	00007b00 	call	7b0 <cam_get_ysize>
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : 
			  			start_sobel_conv_graycale =  alt_timestamp();
						conv_grayscale((void *)image,
    1570:	10bfffcc 	andi	r2,r2,65535
    1574:	100d883a 	mov	r6,r2
    1578:	800b883a 	mov	r5,r16
    157c:	e13ffc17 	ldw	r4,-16(fp)
    1580:	0000ab40 	call	ab4 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
						end_sobel_conv_graycale = alt_timestamp();
    1584:	00102b00 	call	102b0 <alt_timestamp>
    1588:	e0bff615 	stw	r2,-40(fp)
		               grayscale = get_grayscale_picture();
    158c:	0000c680 	call	c68 <get_grayscale_picture>
    1590:	e0bffd15 	stw	r2,-12(fp)
					   //start_sobel_x_m2 =  alt_timestamp();
		               sobel_x_with_rgb(grayscale);
    1594:	e13ffd17 	ldw	r4,-12(fp)
    1598:	0001e640 	call	1e64 <sobel_x_with_rgb>
					   //end_sobel_x_m2 = alt_timestamp();
		               image = GetSobel_rgb();
    159c:	000228c0 	call	228c <GetSobel_rgb>
    15a0:	e0bffc15 	stw	r2,-16(fp)
		               transfer_LCD_with_dma(&image[16520],
    15a4:	e0fffc17 	ldw	r3,-16(fp)
    15a8:	00a04414 	movui	r2,33040
    15ac:	18a1883a 	add	r16,r3,r2
		      		                	cam_get_xsize()>>1,
    15b0:	00007640 	call	764 <cam_get_xsize>
		               grayscale = get_grayscale_picture();
					   //start_sobel_x_m2 =  alt_timestamp();
		               sobel_x_with_rgb(grayscale);
					   //end_sobel_x_m2 = alt_timestamp();
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    15b4:	10bfffcc 	andi	r2,r2,65535
    15b8:	1004d07a 	srli	r2,r2,1
    15bc:	147fffcc 	andi	r17,r2,65535
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
    15c0:	00007b00 	call	7b0 <cam_get_ysize>
		               grayscale = get_grayscale_picture();
					   //start_sobel_x_m2 =  alt_timestamp();
		               sobel_x_with_rgb(grayscale);
					   //end_sobel_x_m2 = alt_timestamp();
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    15c4:	10bfffcc 	andi	r2,r2,65535
    15c8:	000f883a 	mov	r7,zero
    15cc:	100d883a 	mov	r6,r2
    15d0:	880b883a 	mov	r5,r17
    15d4:	8009883a 	mov	r4,r16
    15d8:	00012080 	call	1208 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    15dc:	e0bffb03 	ldbu	r2,-20(fp)
    15e0:	10803fcc 	andi	r2,r2,255
    15e4:	1080201c 	xori	r2,r2,128
    15e8:	10bfe004 	addi	r2,r2,-128
    15ec:	1000740e 	bge	r2,zero,17c0 <main+0x4f0>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    15f0:	01000204 	movi	r4,8
    15f4:	00023000 	call	2300 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    15f8:	e13ffc17 	ldw	r4,-16(fp)
    15fc:	00022cc0 	call	22cc <vga_set_pointer>
		      	  	   }
		      	  	   break;
    1600:	00006f06 	br	17c0 <main+0x4f0>
		      case 3 : 
			  			
						start_sobel_conv_graycale =  alt_timestamp();
    1604:	00102b00 	call	102b0 <alt_timestamp>
    1608:	e0bff515 	stw	r2,-44(fp)
						conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    160c:	00007640 	call	764 <cam_get_xsize>
		      	  	   }
		      	  	   break;
		      case 3 : 
			  			
						start_sobel_conv_graycale =  alt_timestamp();
						conv_grayscale((void *)image,
    1610:	10bfffcc 	andi	r2,r2,65535
    1614:	1004d07a 	srli	r2,r2,1
    1618:	143fffcc 	andi	r16,r2,65535
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
    161c:	00007b00 	call	7b0 <cam_get_ysize>
		      	  	   }
		      	  	   break;
		      case 3 : 
			  			
						start_sobel_conv_graycale =  alt_timestamp();
						conv_grayscale((void *)image,
    1620:	10bfffcc 	andi	r2,r2,65535
    1624:	100d883a 	mov	r6,r2
    1628:	800b883a 	mov	r5,r16
    162c:	e13ffc17 	ldw	r4,-16(fp)
    1630:	0000ab40 	call	ab4 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
						end_sobel_conv_graycale = alt_timestamp();
    1634:	00102b00 	call	102b0 <alt_timestamp>
    1638:	e0bff615 	stw	r2,-40(fp)
		               	grayscale = get_grayscale_picture();
    163c:	0000c680 	call	c68 <get_grayscale_picture>
    1640:	e0bffd15 	stw	r2,-12(fp)
					   	start_sobel_x_m2 =  alt_timestamp();
    1644:	00102b00 	call	102b0 <alt_timestamp>
    1648:	e0bfed15 	stw	r2,-76(fp)
		               	sobel_x(grayscale);
    164c:	e13ffd17 	ldw	r4,-12(fp)
    1650:	0001dc80 	call	1dc8 <sobel_x>
						end_sobel_x_m2 = alt_timestamp();
    1654:	00102b00 	call	102b0 <alt_timestamp>
    1658:	e0bfee15 	stw	r2,-72(fp)
		               	sobel_y_with_rgb(grayscale);
    165c:	e13ffd17 	ldw	r4,-12(fp)
    1660:	000203c0 	call	203c <sobel_y_with_rgb>
		               	image = GetSobel_rgb();
    1664:	000228c0 	call	228c <GetSobel_rgb>
    1668:	e0bffc15 	stw	r2,-16(fp)
		               	transfer_LCD_with_dma(&image[16520],
    166c:	e0fffc17 	ldw	r3,-16(fp)
    1670:	00a04414 	movui	r2,33040
    1674:	18a1883a 	add	r16,r3,r2
		      		                	cam_get_xsize()>>1,
    1678:	00007640 	call	764 <cam_get_xsize>
					   	start_sobel_x_m2 =  alt_timestamp();
		               	sobel_x(grayscale);
						end_sobel_x_m2 = alt_timestamp();
		               	sobel_y_with_rgb(grayscale);
		               	image = GetSobel_rgb();
		               	transfer_LCD_with_dma(&image[16520],
    167c:	10bfffcc 	andi	r2,r2,65535
    1680:	1004d07a 	srli	r2,r2,1
    1684:	147fffcc 	andi	r17,r2,65535
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
    1688:	00007b00 	call	7b0 <cam_get_ysize>
					   	start_sobel_x_m2 =  alt_timestamp();
		               	sobel_x(grayscale);
						end_sobel_x_m2 = alt_timestamp();
		               	sobel_y_with_rgb(grayscale);
		               	image = GetSobel_rgb();
		               	transfer_LCD_with_dma(&image[16520],
    168c:	10bfffcc 	andi	r2,r2,65535
    1690:	000f883a 	mov	r7,zero
    1694:	100d883a 	mov	r6,r2
    1698:	880b883a 	mov	r5,r17
    169c:	8009883a 	mov	r4,r16
    16a0:	00012080 	call	1208 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   	if ((current_mode&DIPSW_SW8_MASK)!=0) {
    16a4:	e0bffb03 	ldbu	r2,-20(fp)
    16a8:	10803fcc 	andi	r2,r2,255
    16ac:	1080201c 	xori	r2,r2,128
    16b0:	10bfe004 	addi	r2,r2,-128
    16b4:	1000440e 	bge	r2,zero,17c8 <main+0x4f8>
		      	  			  vga_set_swap(VGA_QuarterScreen);
    16b8:	01000204 	movi	r4,8
    16bc:	00023000 	call	2300 <vga_set_swap>
		      	  			  vga_set_pointer(image);
    16c0:	e13ffc17 	ldw	r4,-16(fp)
    16c4:	00022cc0 	call	22cc <vga_set_pointer>
		      	  	   	}
		      	  	   	break;
    16c8:	00003f06 	br	17c8 <main+0x4f8>
		      default: 
			  			start_sobel_conv_graycale =  alt_timestamp();
    16cc:	00102b00 	call	102b0 <alt_timestamp>
    16d0:	e0bff515 	stw	r2,-44(fp)
						conv_grayscale((void *)image,
	                                  cam_get_xsize()>>1,
    16d4:	00007640 	call	764 <cam_get_xsize>
		      	  			  vga_set_pointer(image);
		      	  	   	}
		      	  	   	break;
		      default: 
			  			start_sobel_conv_graycale =  alt_timestamp();
						conv_grayscale((void *)image,
    16d8:	10bfffcc 	andi	r2,r2,65535
    16dc:	1004d07a 	srli	r2,r2,1
    16e0:	143fffcc 	andi	r16,r2,65535
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
    16e4:	00007b00 	call	7b0 <cam_get_ysize>
		      	  			  vga_set_pointer(image);
		      	  	   	}
		      	  	   	break;
		      default: 
			  			start_sobel_conv_graycale =  alt_timestamp();
						conv_grayscale((void *)image,
    16e8:	10bfffcc 	andi	r2,r2,65535
    16ec:	100d883a 	mov	r6,r2
    16f0:	800b883a 	mov	r5,r16
    16f4:	e13ffc17 	ldw	r4,-16(fp)
    16f8:	0000ab40 	call	ab4 <conv_grayscale>
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
						end_sobel_conv_graycale = alt_timestamp();
    16fc:	00102b00 	call	102b0 <alt_timestamp>
    1700:	e0bff615 	stw	r2,-40(fp)
                       	grayscale = get_grayscale_picture();
    1704:	0000c680 	call	c68 <get_grayscale_picture>
    1708:	e0bffd15 	stw	r2,-12(fp)
					   	start_sobel_x =  alt_timestamp();
    170c:	00102b00 	call	102b0 <alt_timestamp>
    1710:	e0bfef15 	stw	r2,-68(fp)
					   	start_sobel_y =  alt_timestamp();
    1714:	00102b00 	call	102b0 <alt_timestamp>
    1718:	e0bff115 	stw	r2,-60(fp)
					   	sobel_complete(grayscale);
    171c:	e13ffd17 	ldw	r4,-12(fp)
    1720:	0001d0c0 	call	1d0c <sobel_complete>
						end_sobel_x = alt_timestamp();
    1724:	00102b00 	call	102b0 <alt_timestamp>
    1728:	e0bff015 	stw	r2,-64(fp)
                       	end_sobel_y = alt_timestamp();
    172c:	00102b00 	call	102b0 <alt_timestamp>
    1730:	e0bff215 	stw	r2,-56(fp)
                       	start_sobel_threshold =  alt_timestamp();
    1734:	00102b00 	call	102b0 <alt_timestamp>
    1738:	e0bff315 	stw	r2,-52(fp)
						sobel_threshold(128);
    173c:	01002004 	movi	r4,128
    1740:	00021780 	call	2178 <sobel_threshold>
		               	end_sobel_threshold = alt_timestamp();
    1744:	00102b00 	call	102b0 <alt_timestamp>
    1748:	e0bff415 	stw	r2,-48(fp)
						grayscale=GetSobelResult();
    174c:	00022ac0 	call	22ac <GetSobelResult>
    1750:	e0bffd15 	stw	r2,-12(fp)
						transfer_LCD_with_dma(&grayscale[16520],
    1754:	e0bffd17 	ldw	r2,-12(fp)
    1758:	14102204 	addi	r16,r2,16520
		      		   	             	cam_get_xsize()>>1,
    175c:	00007640 	call	764 <cam_get_xsize>
                       	end_sobel_y = alt_timestamp();
                       	start_sobel_threshold =  alt_timestamp();
						sobel_threshold(128);
		               	end_sobel_threshold = alt_timestamp();
						grayscale=GetSobelResult();
						transfer_LCD_with_dma(&grayscale[16520],
    1760:	10bfffcc 	andi	r2,r2,65535
    1764:	1004d07a 	srli	r2,r2,1
    1768:	147fffcc 	andi	r17,r2,65535
		      		   	             	cam_get_xsize()>>1,
		      		   	             	cam_get_ysize(),1);
    176c:	00007b00 	call	7b0 <cam_get_ysize>
                       	end_sobel_y = alt_timestamp();
                       	start_sobel_threshold =  alt_timestamp();
						sobel_threshold(128);
		               	end_sobel_threshold = alt_timestamp();
						grayscale=GetSobelResult();
						transfer_LCD_with_dma(&grayscale[16520],
    1770:	10bfffcc 	andi	r2,r2,65535
    1774:	01c00044 	movi	r7,1
    1778:	100d883a 	mov	r6,r2
    177c:	880b883a 	mov	r5,r17
    1780:	8009883a 	mov	r4,r16
    1784:	00012080 	call	1208 <transfer_LCD_with_dma>
		      		   	             	cam_get_xsize()>>1,
		      		   	             	cam_get_ysize(),1);
		      	  	   	if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1788:	e0bffb03 	ldbu	r2,-20(fp)
    178c:	10803fcc 	andi	r2,r2,255
    1790:	1080201c 	xori	r2,r2,128
    1794:	10bfe004 	addi	r2,r2,-128
    1798:	10000d0e 	bge	r2,zero,17d0 <main+0x500>
							vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    179c:	01000604 	movi	r4,24
    17a0:	00023000 	call	2300 <vga_set_swap>
							vga_set_pointer(grayscale);
    17a4:	e13ffd17 	ldw	r4,-12(fp)
    17a8:	00022cc0 	call	22cc <vga_set_pointer>
		      	  	   	}
		      	  	   	break;
    17ac:	00000806 	br	17d0 <main+0x500>
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
    17b0:	0001883a 	nop
    17b4:	00000706 	br	17d4 <main+0x504>
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
    17b8:	0001883a 	nop
    17bc:	00000506 	br	17d4 <main+0x504>
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
    17c0:	0001883a 	nop
    17c4:	00000306 	br	17d4 <main+0x504>
		      		                	cam_get_ysize(),0);
		      	  	   	if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  			  vga_set_swap(VGA_QuarterScreen);
		      	  			  vga_set_pointer(image);
		      	  	   	}
		      	  	   	break;
    17c8:	0001883a 	nop
    17cc:	00000106 	br	17d4 <main+0x504>
		      		   	             	cam_get_ysize(),1);
		      	  	   	if ((current_mode&DIPSW_SW8_MASK)!=0) {
							vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
							vga_set_pointer(grayscale);
		      	  	   	}
		      	  	   	break;
    17d0:	0001883a 	nop
		      }
		  }
		  printf("sobel x m2 %lu\n",end_sobel_x_m2-start_sobel_x_m2);
    17d4:	e0ffee17 	ldw	r3,-72(fp)
    17d8:	e0bfed17 	ldw	r2,-76(fp)
    17dc:	1885c83a 	sub	r2,r3,r2
    17e0:	100b883a 	mov	r5,r2
    17e4:	01000074 	movhi	r4,1
    17e8:	2106bf04 	addi	r4,r4,6908
    17ec:	0002b9c0 	call	2b9c <printf>
		  printf("sobel x def %lu\n",end_sobel_x-start_sobel_x);
    17f0:	e0fff017 	ldw	r3,-64(fp)
    17f4:	e0bfef17 	ldw	r2,-68(fp)
    17f8:	1885c83a 	sub	r2,r3,r2
    17fc:	100b883a 	mov	r5,r2
    1800:	01000074 	movhi	r4,1
    1804:	2106c304 	addi	r4,r4,6924
    1808:	0002b9c0 	call	2b9c <printf>
		  printf("sobel y %lu\n",end_sobel_y-start_sobel_y);
    180c:	e0fff217 	ldw	r3,-56(fp)
    1810:	e0bff117 	ldw	r2,-60(fp)
    1814:	1885c83a 	sub	r2,r3,r2
    1818:	100b883a 	mov	r5,r2
    181c:	01000074 	movhi	r4,1
    1820:	2106c804 	addi	r4,r4,6944
    1824:	0002b9c0 	call	2b9c <printf>
		  printf("sobel threshold %lu\n",end_sobel_threshold-start_sobel_threshold);
    1828:	e0fff417 	ldw	r3,-48(fp)
    182c:	e0bff317 	ldw	r2,-52(fp)
    1830:	1885c83a 	sub	r2,r3,r2
    1834:	100b883a 	mov	r5,r2
    1838:	01000074 	movhi	r4,1
    183c:	2106cc04 	addi	r4,r4,6960
    1840:	0002b9c0 	call	2b9c <printf>
		  printf("sobel conv grayscale in mode %d : %lu\n",mode,end_sobel_conv_graycale-start_sobel_conv_graycale);
    1844:	e13fec03 	ldbu	r4,-80(fp)
    1848:	e0fff617 	ldw	r3,-40(fp)
    184c:	e0bff517 	ldw	r2,-44(fp)
    1850:	1885c83a 	sub	r2,r3,r2
    1854:	100d883a 	mov	r6,r2
    1858:	200b883a 	mov	r5,r4
    185c:	01000074 	movhi	r4,1
    1860:	2106d204 	addi	r4,r4,6984
    1864:	0002b9c0 	call	2b9c <printf>
	  }
  } while (1);
    1868:	003ede06 	br	13e4 <__alt_data_end+0xff0013e4>

0000186c <init_sobel_arrays>:
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    186c:	defffb04 	addi	sp,sp,-20
    1870:	dfc00415 	stw	ra,16(sp)
    1874:	df000315 	stw	fp,12(sp)
    1878:	df000304 	addi	fp,sp,12
    187c:	e13ffe15 	stw	r4,-8(fp)
    1880:	e17fff15 	stw	r5,-4(fp)
	int loop;
	sobel_width = width;
    1884:	e0bffe17 	ldw	r2,-8(fp)
    1888:	d0a6cf15 	stw	r2,-25796(gp)
	sobel_height = height;
    188c:	e0bfff17 	ldw	r2,-4(fp)
    1890:	d0a6d115 	stw	r2,-25788(gp)
	if (sobel_x_result != NULL)
    1894:	d0a6d217 	ldw	r2,-25784(gp)
    1898:	10000326 	beq	r2,zero,18a8 <init_sobel_arrays+0x3c>
		free(sobel_x_result);
    189c:	d0a6d217 	ldw	r2,-25784(gp)
    18a0:	1009883a 	mov	r4,r2
    18a4:	000234c0 	call	234c <free>
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    18a8:	e0fffe17 	ldw	r3,-8(fp)
    18ac:	e0bfff17 	ldw	r2,-4(fp)
    18b0:	1885383a 	mul	r2,r3,r2
    18b4:	1085883a 	add	r2,r2,r2
    18b8:	1009883a 	mov	r4,r2
    18bc:	00023380 	call	2338 <malloc>
    18c0:	d0a6d215 	stw	r2,-25784(gp)
	if (sobel_y_result != NULL)
    18c4:	d0a6d317 	ldw	r2,-25780(gp)
    18c8:	10000326 	beq	r2,zero,18d8 <init_sobel_arrays+0x6c>
		free(sobel_y_result);
    18cc:	d0a6d317 	ldw	r2,-25780(gp)
    18d0:	1009883a 	mov	r4,r2
    18d4:	000234c0 	call	234c <free>
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    18d8:	e0fffe17 	ldw	r3,-8(fp)
    18dc:	e0bfff17 	ldw	r2,-4(fp)
    18e0:	1885383a 	mul	r2,r3,r2
    18e4:	1085883a 	add	r2,r2,r2
    18e8:	1009883a 	mov	r4,r2
    18ec:	00023380 	call	2338 <malloc>
    18f0:	d0a6d315 	stw	r2,-25780(gp)
	if (sobel_result != NULL)
    18f4:	d0a6d017 	ldw	r2,-25792(gp)
    18f8:	10000326 	beq	r2,zero,1908 <init_sobel_arrays+0x9c>
		free(sobel_result);
    18fc:	d0a6d017 	ldw	r2,-25792(gp)
    1900:	1009883a 	mov	r4,r2
    1904:	000234c0 	call	234c <free>
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    1908:	e0fffe17 	ldw	r3,-8(fp)
    190c:	e0bfff17 	ldw	r2,-4(fp)
    1910:	1885383a 	mul	r2,r3,r2
    1914:	1009883a 	mov	r4,r2
    1918:	00023380 	call	2338 <malloc>
    191c:	d0a6d015 	stw	r2,-25792(gp)
	if (sobel_rgb565 != NULL)
    1920:	d0a6d417 	ldw	r2,-25776(gp)
    1924:	10000326 	beq	r2,zero,1934 <init_sobel_arrays+0xc8>
		free(sobel_rgb565);
    1928:	d0a6d417 	ldw	r2,-25776(gp)
    192c:	1009883a 	mov	r4,r2
    1930:	000234c0 	call	234c <free>
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
    1934:	e0fffe17 	ldw	r3,-8(fp)
    1938:	e0bfff17 	ldw	r2,-4(fp)
    193c:	1885383a 	mul	r2,r3,r2
    1940:	1085883a 	add	r2,r2,r2
    1944:	1009883a 	mov	r4,r2
    1948:	00023380 	call	2338 <malloc>
    194c:	d0a6d415 	stw	r2,-25776(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    1950:	e03ffd15 	stw	zero,-12(fp)
    1954:	00001606 	br	19b0 <init_sobel_arrays+0x144>
		sobel_x_result[loop] = 0;
    1958:	d0e6d217 	ldw	r3,-25784(gp)
    195c:	e0bffd17 	ldw	r2,-12(fp)
    1960:	1085883a 	add	r2,r2,r2
    1964:	1885883a 	add	r2,r3,r2
    1968:	1000000d 	sth	zero,0(r2)
		sobel_y_result[loop] = 0;
    196c:	d0e6d317 	ldw	r3,-25780(gp)
    1970:	e0bffd17 	ldw	r2,-12(fp)
    1974:	1085883a 	add	r2,r2,r2
    1978:	1885883a 	add	r2,r3,r2
    197c:	1000000d 	sth	zero,0(r2)
		sobel_result[loop] = 0;
    1980:	d0e6d017 	ldw	r3,-25792(gp)
    1984:	e0bffd17 	ldw	r2,-12(fp)
    1988:	1885883a 	add	r2,r3,r2
    198c:	10000005 	stb	zero,0(r2)
		sobel_rgb565[loop] = 0;
    1990:	d0e6d417 	ldw	r3,-25776(gp)
    1994:	e0bffd17 	ldw	r2,-12(fp)
    1998:	1085883a 	add	r2,r2,r2
    199c:	1885883a 	add	r2,r3,r2
    19a0:	1000000d 	sth	zero,0(r2)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    19a4:	e0bffd17 	ldw	r2,-12(fp)
    19a8:	10800044 	addi	r2,r2,1
    19ac:	e0bffd15 	stw	r2,-12(fp)
    19b0:	e0fffe17 	ldw	r3,-8(fp)
    19b4:	e0bfff17 	ldw	r2,-4(fp)
    19b8:	1885383a 	mul	r2,r3,r2
    19bc:	e0fffd17 	ldw	r3,-12(fp)
    19c0:	18bfe516 	blt	r3,r2,1958 <__alt_data_end+0xff001958>
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
    19c4:	0001883a 	nop
    19c8:	e037883a 	mov	sp,fp
    19cc:	dfc00117 	ldw	ra,4(sp)
    19d0:	df000017 	ldw	fp,0(sp)
    19d4:	dec00204 	addi	sp,sp,8
    19d8:	f800283a 	ret

000019dc <sobel_mac>:

static inline short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    19dc:	defff904 	addi	sp,sp,-28
    19e0:	df000615 	stw	fp,24(sp)
    19e4:	df000604 	addi	fp,sp,24
    19e8:	e13ffc15 	stw	r4,-16(fp)
    19ec:	e17ffd15 	stw	r5,-12(fp)
    19f0:	e1bffe15 	stw	r6,-8(fp)
    19f4:	e1ffff15 	stw	r7,-4(fp)
   short result = 0;
    19f8:	e03ffa0d 	sth	zero,-24(fp)
                   pixels[(y+dy)*width+(x+dx)];
      }
   }*/
   //unrolling inner loop
   // unrolling all loops
   idy = y-1;
    19fc:	e0bffe17 	ldw	r2,-8(fp)
    1a00:	10bfffc4 	addi	r2,r2,-1
    1a04:	e0bffb15 	stw	r2,-20(fp)
   result += filter[0]*
    1a08:	e0bfff17 	ldw	r2,-4(fp)
    1a0c:	10800003 	ldbu	r2,0(r2)
    1a10:	10c03fcc 	andi	r3,r2,255
    1a14:	18c0201c 	xori	r3,r3,128
    1a18:	18ffe004 	addi	r3,r3,-128
         pixels[idy*width+(x-1)];
    1a1c:	e13ffb17 	ldw	r4,-20(fp)
    1a20:	e0800117 	ldw	r2,4(fp)
    1a24:	2089383a 	mul	r4,r4,r2
    1a28:	e0bffd17 	ldw	r2,-12(fp)
    1a2c:	2085883a 	add	r2,r4,r2
    1a30:	10bfffc4 	addi	r2,r2,-1
    1a34:	e13ffc17 	ldw	r4,-16(fp)
    1a38:	2085883a 	add	r2,r4,r2
    1a3c:	10800003 	ldbu	r2,0(r2)
      }
   }*/
   //unrolling inner loop
   // unrolling all loops
   idy = y-1;
   result += filter[0]*
    1a40:	10803fcc 	andi	r2,r2,255
    1a44:	1885383a 	mul	r2,r3,r2
    1a48:	1007883a 	mov	r3,r2
    1a4c:	e0bffa0b 	ldhu	r2,-24(fp)
    1a50:	1885883a 	add	r2,r3,r2
    1a54:	e0bffa0d 	sth	r2,-24(fp)
         pixels[idy*width+(x-1)];
   result += filter[1]*
    1a58:	e0bfff17 	ldw	r2,-4(fp)
    1a5c:	10800044 	addi	r2,r2,1
    1a60:	10800003 	ldbu	r2,0(r2)
    1a64:	10c03fcc 	andi	r3,r2,255
    1a68:	18c0201c 	xori	r3,r3,128
    1a6c:	18ffe004 	addi	r3,r3,-128
         pixels[idy*width+(x)];
    1a70:	e13ffb17 	ldw	r4,-20(fp)
    1a74:	e0800117 	ldw	r2,4(fp)
    1a78:	2089383a 	mul	r4,r4,r2
    1a7c:	e0bffd17 	ldw	r2,-12(fp)
    1a80:	2085883a 	add	r2,r4,r2
    1a84:	e13ffc17 	ldw	r4,-16(fp)
    1a88:	2085883a 	add	r2,r4,r2
    1a8c:	10800003 	ldbu	r2,0(r2)
   //unrolling inner loop
   // unrolling all loops
   idy = y-1;
   result += filter[0]*
         pixels[idy*width+(x-1)];
   result += filter[1]*
    1a90:	10803fcc 	andi	r2,r2,255
    1a94:	1885383a 	mul	r2,r3,r2
    1a98:	1007883a 	mov	r3,r2
    1a9c:	e0bffa0b 	ldhu	r2,-24(fp)
    1aa0:	1885883a 	add	r2,r3,r2
    1aa4:	e0bffa0d 	sth	r2,-24(fp)
         pixels[idy*width+(x)];
   result += filter[2]*
    1aa8:	e0bfff17 	ldw	r2,-4(fp)
    1aac:	10800084 	addi	r2,r2,2
    1ab0:	10800003 	ldbu	r2,0(r2)
    1ab4:	10c03fcc 	andi	r3,r2,255
    1ab8:	18c0201c 	xori	r3,r3,128
    1abc:	18ffe004 	addi	r3,r3,-128
         pixels[idy*width+(x+1)];
    1ac0:	e13ffb17 	ldw	r4,-20(fp)
    1ac4:	e0800117 	ldw	r2,4(fp)
    1ac8:	2089383a 	mul	r4,r4,r2
    1acc:	e0bffd17 	ldw	r2,-12(fp)
    1ad0:	2085883a 	add	r2,r4,r2
    1ad4:	10800044 	addi	r2,r2,1
    1ad8:	e13ffc17 	ldw	r4,-16(fp)
    1adc:	2085883a 	add	r2,r4,r2
    1ae0:	10800003 	ldbu	r2,0(r2)
   idy = y-1;
   result += filter[0]*
         pixels[idy*width+(x-1)];
   result += filter[1]*
         pixels[idy*width+(x)];
   result += filter[2]*
    1ae4:	10803fcc 	andi	r2,r2,255
    1ae8:	1885383a 	mul	r2,r3,r2
    1aec:	1007883a 	mov	r3,r2
    1af0:	e0bffa0b 	ldhu	r2,-24(fp)
    1af4:	1885883a 	add	r2,r3,r2
    1af8:	e0bffa0d 	sth	r2,-24(fp)
         pixels[idy*width+(x+1)];

   result += filter[3]*
    1afc:	e0bfff17 	ldw	r2,-4(fp)
    1b00:	108000c4 	addi	r2,r2,3
    1b04:	10800003 	ldbu	r2,0(r2)
    1b08:	10c03fcc 	andi	r3,r2,255
    1b0c:	18c0201c 	xori	r3,r3,128
    1b10:	18ffe004 	addi	r3,r3,-128
         pixels[y*width+(x-1)];
    1b14:	e13ffe17 	ldw	r4,-8(fp)
    1b18:	e0800117 	ldw	r2,4(fp)
    1b1c:	2089383a 	mul	r4,r4,r2
    1b20:	e0bffd17 	ldw	r2,-12(fp)
    1b24:	2085883a 	add	r2,r4,r2
    1b28:	10bfffc4 	addi	r2,r2,-1
    1b2c:	e13ffc17 	ldw	r4,-16(fp)
    1b30:	2085883a 	add	r2,r4,r2
    1b34:	10800003 	ldbu	r2,0(r2)
   result += filter[1]*
         pixels[idy*width+(x)];
   result += filter[2]*
         pixels[idy*width+(x+1)];

   result += filter[3]*
    1b38:	10803fcc 	andi	r2,r2,255
    1b3c:	1885383a 	mul	r2,r3,r2
    1b40:	1007883a 	mov	r3,r2
    1b44:	e0bffa0b 	ldhu	r2,-24(fp)
    1b48:	1885883a 	add	r2,r3,r2
    1b4c:	e0bffa0d 	sth	r2,-24(fp)
         pixels[y*width+(x-1)];
   result += filter[4]*
    1b50:	e0bfff17 	ldw	r2,-4(fp)
    1b54:	10800104 	addi	r2,r2,4
    1b58:	10800003 	ldbu	r2,0(r2)
    1b5c:	10c03fcc 	andi	r3,r2,255
    1b60:	18c0201c 	xori	r3,r3,128
    1b64:	18ffe004 	addi	r3,r3,-128
         pixels[y*width+(x)];
    1b68:	e13ffe17 	ldw	r4,-8(fp)
    1b6c:	e0800117 	ldw	r2,4(fp)
    1b70:	2089383a 	mul	r4,r4,r2
    1b74:	e0bffd17 	ldw	r2,-12(fp)
    1b78:	2085883a 	add	r2,r4,r2
    1b7c:	e13ffc17 	ldw	r4,-16(fp)
    1b80:	2085883a 	add	r2,r4,r2
    1b84:	10800003 	ldbu	r2,0(r2)
   result += filter[2]*
         pixels[idy*width+(x+1)];

   result += filter[3]*
         pixels[y*width+(x-1)];
   result += filter[4]*
    1b88:	10803fcc 	andi	r2,r2,255
    1b8c:	1885383a 	mul	r2,r3,r2
    1b90:	1007883a 	mov	r3,r2
    1b94:	e0bffa0b 	ldhu	r2,-24(fp)
    1b98:	1885883a 	add	r2,r3,r2
    1b9c:	e0bffa0d 	sth	r2,-24(fp)
         pixels[y*width+(x)];
   result += filter[5]*
    1ba0:	e0bfff17 	ldw	r2,-4(fp)
    1ba4:	10800144 	addi	r2,r2,5
    1ba8:	10800003 	ldbu	r2,0(r2)
    1bac:	10c03fcc 	andi	r3,r2,255
    1bb0:	18c0201c 	xori	r3,r3,128
    1bb4:	18ffe004 	addi	r3,r3,-128
         pixels[y*width+(x+1)];
    1bb8:	e13ffe17 	ldw	r4,-8(fp)
    1bbc:	e0800117 	ldw	r2,4(fp)
    1bc0:	2089383a 	mul	r4,r4,r2
    1bc4:	e0bffd17 	ldw	r2,-12(fp)
    1bc8:	2085883a 	add	r2,r4,r2
    1bcc:	10800044 	addi	r2,r2,1
    1bd0:	e13ffc17 	ldw	r4,-16(fp)
    1bd4:	2085883a 	add	r2,r4,r2
    1bd8:	10800003 	ldbu	r2,0(r2)

   result += filter[3]*
         pixels[y*width+(x-1)];
   result += filter[4]*
         pixels[y*width+(x)];
   result += filter[5]*
    1bdc:	10803fcc 	andi	r2,r2,255
    1be0:	1885383a 	mul	r2,r3,r2
    1be4:	1007883a 	mov	r3,r2
    1be8:	e0bffa0b 	ldhu	r2,-24(fp)
    1bec:	1885883a 	add	r2,r3,r2
    1bf0:	e0bffa0d 	sth	r2,-24(fp)
         pixels[y*width+(x+1)];
   idy = y+1;
    1bf4:	e0bffe17 	ldw	r2,-8(fp)
    1bf8:	10800044 	addi	r2,r2,1
    1bfc:	e0bffb15 	stw	r2,-20(fp)
   result += filter[6]*
    1c00:	e0bfff17 	ldw	r2,-4(fp)
    1c04:	10800184 	addi	r2,r2,6
    1c08:	10800003 	ldbu	r2,0(r2)
    1c0c:	10c03fcc 	andi	r3,r2,255
    1c10:	18c0201c 	xori	r3,r3,128
    1c14:	18ffe004 	addi	r3,r3,-128
         pixels[idy*width+(x-1)];
    1c18:	e13ffb17 	ldw	r4,-20(fp)
    1c1c:	e0800117 	ldw	r2,4(fp)
    1c20:	2089383a 	mul	r4,r4,r2
    1c24:	e0bffd17 	ldw	r2,-12(fp)
    1c28:	2085883a 	add	r2,r4,r2
    1c2c:	10bfffc4 	addi	r2,r2,-1
    1c30:	e13ffc17 	ldw	r4,-16(fp)
    1c34:	2085883a 	add	r2,r4,r2
    1c38:	10800003 	ldbu	r2,0(r2)
   result += filter[4]*
         pixels[y*width+(x)];
   result += filter[5]*
         pixels[y*width+(x+1)];
   idy = y+1;
   result += filter[6]*
    1c3c:	10803fcc 	andi	r2,r2,255
    1c40:	1885383a 	mul	r2,r3,r2
    1c44:	1007883a 	mov	r3,r2
    1c48:	e0bffa0b 	ldhu	r2,-24(fp)
    1c4c:	1885883a 	add	r2,r3,r2
    1c50:	e0bffa0d 	sth	r2,-24(fp)
         pixels[idy*width+(x-1)];
   result += filter[7]*
    1c54:	e0bfff17 	ldw	r2,-4(fp)
    1c58:	108001c4 	addi	r2,r2,7
    1c5c:	10800003 	ldbu	r2,0(r2)
    1c60:	10c03fcc 	andi	r3,r2,255
    1c64:	18c0201c 	xori	r3,r3,128
    1c68:	18ffe004 	addi	r3,r3,-128
         pixels[idy*width+(x)];
    1c6c:	e13ffb17 	ldw	r4,-20(fp)
    1c70:	e0800117 	ldw	r2,4(fp)
    1c74:	2089383a 	mul	r4,r4,r2
    1c78:	e0bffd17 	ldw	r2,-12(fp)
    1c7c:	2085883a 	add	r2,r4,r2
    1c80:	e13ffc17 	ldw	r4,-16(fp)
    1c84:	2085883a 	add	r2,r4,r2
    1c88:	10800003 	ldbu	r2,0(r2)
   result += filter[5]*
         pixels[y*width+(x+1)];
   idy = y+1;
   result += filter[6]*
         pixels[idy*width+(x-1)];
   result += filter[7]*
    1c8c:	10803fcc 	andi	r2,r2,255
    1c90:	1885383a 	mul	r2,r3,r2
    1c94:	1007883a 	mov	r3,r2
    1c98:	e0bffa0b 	ldhu	r2,-24(fp)
    1c9c:	1885883a 	add	r2,r3,r2
    1ca0:	e0bffa0d 	sth	r2,-24(fp)
         pixels[idy*width+(x)];
   result += filter[8]*
    1ca4:	e0bfff17 	ldw	r2,-4(fp)
    1ca8:	10800204 	addi	r2,r2,8
    1cac:	10800003 	ldbu	r2,0(r2)
    1cb0:	10c03fcc 	andi	r3,r2,255
    1cb4:	18c0201c 	xori	r3,r3,128
    1cb8:	18ffe004 	addi	r3,r3,-128
         pixels[idy*width+(x+1)];
    1cbc:	e13ffb17 	ldw	r4,-20(fp)
    1cc0:	e0800117 	ldw	r2,4(fp)
    1cc4:	2089383a 	mul	r4,r4,r2
    1cc8:	e0bffd17 	ldw	r2,-12(fp)
    1ccc:	2085883a 	add	r2,r4,r2
    1cd0:	10800044 	addi	r2,r2,1
    1cd4:	e13ffc17 	ldw	r4,-16(fp)
    1cd8:	2085883a 	add	r2,r4,r2
    1cdc:	10800003 	ldbu	r2,0(r2)
   idy = y+1;
   result += filter[6]*
         pixels[idy*width+(x-1)];
   result += filter[7]*
         pixels[idy*width+(x)];
   result += filter[8]*
    1ce0:	10803fcc 	andi	r2,r2,255
    1ce4:	1885383a 	mul	r2,r3,r2
    1ce8:	1007883a 	mov	r3,r2
    1cec:	e0bffa0b 	ldhu	r2,-24(fp)
    1cf0:	1885883a 	add	r2,r3,r2
    1cf4:	e0bffa0d 	sth	r2,-24(fp)
         pixels[idy*width+(x+1)];

   return result;
    1cf8:	e0bffa0b 	ldhu	r2,-24(fp)
}
    1cfc:	e037883a 	mov	sp,fp
    1d00:	df000017 	ldw	fp,0(sp)
    1d04:	dec00104 	addi	sp,sp,4
    1d08:	f800283a 	ret

00001d0c <sobel_complete>:
void sobel_complete( unsigned char *source ){
    1d0c:	defffa04 	addi	sp,sp,-24
    1d10:	dfc00515 	stw	ra,20(sp)
    1d14:	df000415 	stw	fp,16(sp)
    1d18:	df000404 	addi	fp,sp,16
    1d1c:	e13fff15 	stw	r4,-4(fp)
   int x,y;
   //inline call
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1d20:	00800044 	movi	r2,1
    1d24:	e0bffe15 	stw	r2,-8(fp)
    1d28:	00001d06 	br	1da0 <sobel_complete+0x94>
	  for (x = 1 ; x < (sobel_width-1) ; x++) {
    1d2c:	00800044 	movi	r2,1
    1d30:	e0bffd15 	stw	r2,-12(fp)
    1d34:	00001306 	br	1d84 <sobel_complete+0x78>
			  sobel_mac(source,x,y,gx_array,sobel_width);
    1d38:	d0a6cf17 	ldw	r2,-25796(gp)
    1d3c:	d8800015 	stw	r2,0(sp)
    1d40:	01c00074 	movhi	r7,1
    1d44:	39c6dbc4 	addi	r7,r7,7023
    1d48:	e1bffe17 	ldw	r6,-8(fp)
    1d4c:	e17ffd17 	ldw	r5,-12(fp)
    1d50:	e13fff17 	ldw	r4,-4(fp)
    1d54:	00019dc0 	call	19dc <sobel_mac>
			  sobel_mac(source,x,y,gy_array,sobel_width);
    1d58:	d0a6cf17 	ldw	r2,-25796(gp)
    1d5c:	d8800015 	stw	r2,0(sp)
    1d60:	01c00074 	movhi	r7,1
    1d64:	39c6de04 	addi	r7,r7,7032
    1d68:	e1bffe17 	ldw	r6,-8(fp)
    1d6c:	e17ffd17 	ldw	r5,-12(fp)
    1d70:	e13fff17 	ldw	r4,-4(fp)
    1d74:	00019dc0 	call	19dc <sobel_mac>
}
void sobel_complete( unsigned char *source ){
   int x,y;
   //inline call
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	  for (x = 1 ; x < (sobel_width-1) ; x++) {
    1d78:	e0bffd17 	ldw	r2,-12(fp)
    1d7c:	10800044 	addi	r2,r2,1
    1d80:	e0bffd15 	stw	r2,-12(fp)
    1d84:	d0a6cf17 	ldw	r2,-25796(gp)
    1d88:	10bfffc4 	addi	r2,r2,-1
    1d8c:	e0fffd17 	ldw	r3,-12(fp)
    1d90:	18bfe916 	blt	r3,r2,1d38 <__alt_data_end+0xff001d38>
   return result;
}
void sobel_complete( unsigned char *source ){
   int x,y;
   //inline call
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1d94:	e0bffe17 	ldw	r2,-8(fp)
    1d98:	10800044 	addi	r2,r2,1
    1d9c:	e0bffe15 	stw	r2,-8(fp)
    1da0:	d0a6d117 	ldw	r2,-25788(gp)
    1da4:	10bfffc4 	addi	r2,r2,-1
    1da8:	e0fffe17 	ldw	r3,-8(fp)
    1dac:	18bfdf16 	blt	r3,r2,1d2c <__alt_data_end+0xff001d2c>
	  for (x = 1 ; x < (sobel_width-1) ; x++) {
			  sobel_mac(source,x,y,gx_array,sobel_width);
			  sobel_mac(source,x,y,gy_array,sobel_width);
	  }
   }
}
    1db0:	0001883a 	nop
    1db4:	e037883a 	mov	sp,fp
    1db8:	dfc00117 	ldw	ra,4(sp)
    1dbc:	df000017 	ldw	fp,0(sp)
    1dc0:	dec00204 	addi	sp,sp,8
    1dc4:	f800283a 	ret

00001dc8 <sobel_x>:

void sobel_x( unsigned char *source ) {
    1dc8:	defffa04 	addi	sp,sp,-24
    1dcc:	dfc00515 	stw	ra,20(sp)
    1dd0:	df000415 	stw	fp,16(sp)
    1dd4:	df000404 	addi	fp,sp,16
    1dd8:	e13fff15 	stw	r4,-4(fp)
   int x,y;
   //inline call
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1ddc:	00800044 	movi	r2,1
    1de0:	e0bffe15 	stw	r2,-8(fp)
    1de4:	00001506 	br	1e3c <sobel_x+0x74>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1de8:	00800044 	movi	r2,1
    1dec:	e0bffd15 	stw	r2,-12(fp)
    1df0:	00000b06 	br	1e20 <sobel_x+0x58>
    	  	  sobel_mac(source,x,y,gx_array,sobel_width);
    1df4:	d0a6cf17 	ldw	r2,-25796(gp)
    1df8:	d8800015 	stw	r2,0(sp)
    1dfc:	01c00074 	movhi	r7,1
    1e00:	39c6dbc4 	addi	r7,r7,7023
    1e04:	e1bffe17 	ldw	r6,-8(fp)
    1e08:	e17ffd17 	ldw	r5,-12(fp)
    1e0c:	e13fff17 	ldw	r4,-4(fp)
    1e10:	00019dc0 	call	19dc <sobel_mac>

void sobel_x( unsigned char *source ) {
   int x,y;
   //inline call
   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1e14:	e0bffd17 	ldw	r2,-12(fp)
    1e18:	10800044 	addi	r2,r2,1
    1e1c:	e0bffd15 	stw	r2,-12(fp)
    1e20:	d0a6cf17 	ldw	r2,-25796(gp)
    1e24:	10bfffc4 	addi	r2,r2,-1
    1e28:	e0fffd17 	ldw	r3,-12(fp)
    1e2c:	18bff116 	blt	r3,r2,1df4 <__alt_data_end+0xff001df4>
}

void sobel_x( unsigned char *source ) {
   int x,y;
   //inline call
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1e30:	e0bffe17 	ldw	r2,-8(fp)
    1e34:	10800044 	addi	r2,r2,1
    1e38:	e0bffe15 	stw	r2,-8(fp)
    1e3c:	d0a6d117 	ldw	r2,-25788(gp)
    1e40:	10bfffc4 	addi	r2,r2,-1
    1e44:	e0fffe17 	ldw	r3,-8(fp)
    1e48:	18bfe716 	blt	r3,r2,1de8 <__alt_data_end+0xff001de8>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  	  sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}
    1e4c:	0001883a 	nop
    1e50:	e037883a 	mov	sp,fp
    1e54:	dfc00117 	ldw	ra,4(sp)
    1e58:	df000017 	ldw	fp,0(sp)
    1e5c:	dec00204 	addi	sp,sp,8
    1e60:	f800283a 	ret

00001e64 <sobel_x_with_rgb>:

void sobel_x_with_rgb( unsigned char *source ) {
    1e64:	defff904 	addi	sp,sp,-28
    1e68:	dfc00615 	stw	ra,24(sp)
    1e6c:	df000515 	stw	fp,20(sp)
    1e70:	df000504 	addi	fp,sp,20
    1e74:	e13fff15 	stw	r4,-4(fp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1e78:	00800044 	movi	r2,1
    1e7c:	e0bffd15 	stw	r2,-12(fp)
    1e80:	00003d06 	br	1f78 <sobel_x_with_rgb+0x114>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1e84:	00800044 	movi	r2,1
    1e88:	e0bffc15 	stw	r2,-16(fp)
    1e8c:	00003306 	br	1f5c <sobel_x_with_rgb+0xf8>
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
    1e90:	d0a6cf17 	ldw	r2,-25796(gp)
    1e94:	d8800015 	stw	r2,0(sp)
    1e98:	01c00074 	movhi	r7,1
    1e9c:	39c6dbc4 	addi	r7,r7,7023
    1ea0:	e1bffd17 	ldw	r6,-12(fp)
    1ea4:	e17ffc17 	ldw	r5,-16(fp)
    1ea8:	e13fff17 	ldw	r4,-4(fp)
    1eac:	00019dc0 	call	19dc <sobel_mac>
    1eb0:	e0bffe0d 	sth	r2,-8(fp)
          sobel_x_result[y*sobel_width+x] = result;
    1eb4:	d0e6d217 	ldw	r3,-25784(gp)
    1eb8:	d126cf17 	ldw	r4,-25796(gp)
    1ebc:	e0bffd17 	ldw	r2,-12(fp)
    1ec0:	2089383a 	mul	r4,r4,r2
    1ec4:	e0bffc17 	ldw	r2,-16(fp)
    1ec8:	2085883a 	add	r2,r4,r2
    1ecc:	1085883a 	add	r2,r2,r2
    1ed0:	1885883a 	add	r2,r3,r2
    1ed4:	e0fffe0b 	ldhu	r3,-8(fp)
    1ed8:	10c0000d 	sth	r3,0(r2)
          if (result < 0) {
    1edc:	e0bffe0f 	ldh	r2,-8(fp)
    1ee0:	10000e0e 	bge	r2,zero,1f1c <sobel_x_with_rgb+0xb8>
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1ee4:	d0e6d417 	ldw	r3,-25776(gp)
    1ee8:	d126cf17 	ldw	r4,-25796(gp)
    1eec:	e0bffd17 	ldw	r2,-12(fp)
    1ef0:	2089383a 	mul	r4,r4,r2
    1ef4:	e0bffc17 	ldw	r2,-16(fp)
    1ef8:	2085883a 	add	r2,r4,r2
    1efc:	1085883a 	add	r2,r2,r2
    1f00:	1885883a 	add	r2,r3,r2
    1f04:	e0fffe0f 	ldh	r3,-8(fp)
    1f08:	00c7c83a 	sub	r3,zero,r3
    1f0c:	1807d0ba 	srai	r3,r3,2
    1f10:	1806917a 	slli	r3,r3,5
    1f14:	10c0000d 	sth	r3,0(r2)
    1f18:	00000d06 	br	1f50 <sobel_x_with_rgb+0xec>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1f1c:	d0e6d417 	ldw	r3,-25776(gp)
    1f20:	d126cf17 	ldw	r4,-25796(gp)
    1f24:	e0bffd17 	ldw	r2,-12(fp)
    1f28:	2089383a 	mul	r4,r4,r2
    1f2c:	e0bffc17 	ldw	r2,-16(fp)
    1f30:	2085883a 	add	r2,r4,r2
    1f34:	1085883a 	add	r2,r2,r2
    1f38:	1885883a 	add	r2,r3,r2
    1f3c:	e0fffe0f 	ldh	r3,-8(fp)
    1f40:	1807d0fa 	srai	r3,r3,3
    1f44:	18ffffcc 	andi	r3,r3,65535
    1f48:	180692fa 	slli	r3,r3,11
    1f4c:	10c0000d 	sth	r3,0(r2)
void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1f50:	e0bffc17 	ldw	r2,-16(fp)
    1f54:	10800044 	addi	r2,r2,1
    1f58:	e0bffc15 	stw	r2,-16(fp)
    1f5c:	d0a6cf17 	ldw	r2,-25796(gp)
    1f60:	10bfffc4 	addi	r2,r2,-1
    1f64:	e0fffc17 	ldw	r3,-16(fp)
    1f68:	18bfc916 	blt	r3,r2,1e90 <__alt_data_end+0xff001e90>

void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1f6c:	e0bffd17 	ldw	r2,-12(fp)
    1f70:	10800044 	addi	r2,r2,1
    1f74:	e0bffd15 	stw	r2,-12(fp)
    1f78:	d0a6d117 	ldw	r2,-25788(gp)
    1f7c:	10bfffc4 	addi	r2,r2,-1
    1f80:	e0fffd17 	ldw	r3,-12(fp)
    1f84:	18bfbf16 	blt	r3,r2,1e84 <__alt_data_end+0xff001e84>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
          }
      }
   }
}
    1f88:	0001883a 	nop
    1f8c:	e037883a 	mov	sp,fp
    1f90:	dfc00117 	ldw	ra,4(sp)
    1f94:	df000017 	ldw	fp,0(sp)
    1f98:	dec00204 	addi	sp,sp,8
    1f9c:	f800283a 	ret

00001fa0 <sobel_y>:

void sobel_y( unsigned char *source ) {
    1fa0:	defffa04 	addi	sp,sp,-24
    1fa4:	dfc00515 	stw	ra,20(sp)
    1fa8:	df000415 	stw	fp,16(sp)
    1fac:	df000404 	addi	fp,sp,16
    1fb0:	e13fff15 	stw	r4,-4(fp)
   int x,y;
   //inline call
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1fb4:	00800044 	movi	r2,1
    1fb8:	e0bffe15 	stw	r2,-8(fp)
    1fbc:	00001506 	br	2014 <sobel_y+0x74>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1fc0:	00800044 	movi	r2,1
    1fc4:	e0bffd15 	stw	r2,-12(fp)
    1fc8:	00000b06 	br	1ff8 <sobel_y+0x58>
    	  	  sobel_mac(source,x,y,gy_array,sobel_width);
    1fcc:	d0a6cf17 	ldw	r2,-25796(gp)
    1fd0:	d8800015 	stw	r2,0(sp)
    1fd4:	01c00074 	movhi	r7,1
    1fd8:	39c6de04 	addi	r7,r7,7032
    1fdc:	e1bffe17 	ldw	r6,-8(fp)
    1fe0:	e17ffd17 	ldw	r5,-12(fp)
    1fe4:	e13fff17 	ldw	r4,-4(fp)
    1fe8:	00019dc0 	call	19dc <sobel_mac>

void sobel_y( unsigned char *source ) {
   int x,y;
   //inline call
   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1fec:	e0bffd17 	ldw	r2,-12(fp)
    1ff0:	10800044 	addi	r2,r2,1
    1ff4:	e0bffd15 	stw	r2,-12(fp)
    1ff8:	d0a6cf17 	ldw	r2,-25796(gp)
    1ffc:	10bfffc4 	addi	r2,r2,-1
    2000:	e0fffd17 	ldw	r3,-12(fp)
    2004:	18bff116 	blt	r3,r2,1fcc <__alt_data_end+0xff001fcc>
}

void sobel_y( unsigned char *source ) {
   int x,y;
   //inline call
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    2008:	e0bffe17 	ldw	r2,-8(fp)
    200c:	10800044 	addi	r2,r2,1
    2010:	e0bffe15 	stw	r2,-8(fp)
    2014:	d0a6d117 	ldw	r2,-25788(gp)
    2018:	10bfffc4 	addi	r2,r2,-1
    201c:	e0fffe17 	ldw	r3,-8(fp)
    2020:	18bfe716 	blt	r3,r2,1fc0 <__alt_data_end+0xff001fc0>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  	  sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}
    2024:	0001883a 	nop
    2028:	e037883a 	mov	sp,fp
    202c:	dfc00117 	ldw	ra,4(sp)
    2030:	df000017 	ldw	fp,0(sp)
    2034:	dec00204 	addi	sp,sp,8
    2038:	f800283a 	ret

0000203c <sobel_y_with_rgb>:
//change here,
void sobel_y_with_rgb( unsigned char *source ) {
    203c:	defff904 	addi	sp,sp,-28
    2040:	dfc00615 	stw	ra,24(sp)
    2044:	df000515 	stw	fp,20(sp)
    2048:	df000504 	addi	fp,sp,20
    204c:	e13fff15 	stw	r4,-4(fp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    2050:	00800044 	movi	r2,1
    2054:	e0bffd15 	stw	r2,-12(fp)
    2058:	00003d06 	br	2150 <sobel_y_with_rgb+0x114>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    205c:	00800044 	movi	r2,1
    2060:	e0bffc15 	stw	r2,-16(fp)
    2064:	00003306 	br	2134 <sobel_y_with_rgb+0xf8>
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
    2068:	d0a6cf17 	ldw	r2,-25796(gp)
    206c:	d8800015 	stw	r2,0(sp)
    2070:	01c00074 	movhi	r7,1
    2074:	39c6de04 	addi	r7,r7,7032
    2078:	e1bffd17 	ldw	r6,-12(fp)
    207c:	e17ffc17 	ldw	r5,-16(fp)
    2080:	e13fff17 	ldw	r4,-4(fp)
    2084:	00019dc0 	call	19dc <sobel_mac>
    2088:	e0bffe0d 	sth	r2,-8(fp)
         sobel_y_result[y*sobel_width+x] = result;
    208c:	d0e6d317 	ldw	r3,-25780(gp)
    2090:	d126cf17 	ldw	r4,-25796(gp)
    2094:	e0bffd17 	ldw	r2,-12(fp)
    2098:	2089383a 	mul	r4,r4,r2
    209c:	e0bffc17 	ldw	r2,-16(fp)
    20a0:	2085883a 	add	r2,r4,r2
    20a4:	1085883a 	add	r2,r2,r2
    20a8:	1885883a 	add	r2,r3,r2
    20ac:	e0fffe0b 	ldhu	r3,-8(fp)
    20b0:	10c0000d 	sth	r3,0(r2)
         if (result < 0) {
    20b4:	e0bffe0f 	ldh	r2,-8(fp)
    20b8:	10000e0e 	bge	r2,zero,20f4 <sobel_y_with_rgb+0xb8>
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    20bc:	d0e6d417 	ldw	r3,-25776(gp)
    20c0:	d126cf17 	ldw	r4,-25796(gp)
    20c4:	e0bffd17 	ldw	r2,-12(fp)
    20c8:	2089383a 	mul	r4,r4,r2
    20cc:	e0bffc17 	ldw	r2,-16(fp)
    20d0:	2085883a 	add	r2,r4,r2
    20d4:	1085883a 	add	r2,r2,r2
    20d8:	1885883a 	add	r2,r3,r2
    20dc:	e0fffe0f 	ldh	r3,-8(fp)
    20e0:	00c7c83a 	sub	r3,zero,r3
    20e4:	1807d0ba 	srai	r3,r3,2
    20e8:	1806917a 	slli	r3,r3,5
    20ec:	10c0000d 	sth	r3,0(r2)
    20f0:	00000d06 	br	2128 <sobel_y_with_rgb+0xec>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    20f4:	d0e6d417 	ldw	r3,-25776(gp)
    20f8:	d126cf17 	ldw	r4,-25796(gp)
    20fc:	e0bffd17 	ldw	r2,-12(fp)
    2100:	2089383a 	mul	r4,r4,r2
    2104:	e0bffc17 	ldw	r2,-16(fp)
    2108:	2085883a 	add	r2,r4,r2
    210c:	1085883a 	add	r2,r2,r2
    2110:	1885883a 	add	r2,r3,r2
    2114:	e0fffe0f 	ldh	r3,-8(fp)
    2118:	1807d0fa 	srai	r3,r3,3
    211c:	18ffffcc 	andi	r3,r3,65535
    2120:	180692fa 	slli	r3,r3,11
    2124:	10c0000d 	sth	r3,0(r2)
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    2128:	e0bffc17 	ldw	r2,-16(fp)
    212c:	10800044 	addi	r2,r2,1
    2130:	e0bffc15 	stw	r2,-16(fp)
    2134:	d0a6cf17 	ldw	r2,-25796(gp)
    2138:	10bfffc4 	addi	r2,r2,-1
    213c:	e0fffc17 	ldw	r3,-16(fp)
    2140:	18bfc916 	blt	r3,r2,2068 <__alt_data_end+0xff002068>
//change here,
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    2144:	e0bffd17 	ldw	r2,-12(fp)
    2148:	10800044 	addi	r2,r2,1
    214c:	e0bffd15 	stw	r2,-12(fp)
    2150:	d0a6d117 	ldw	r2,-25788(gp)
    2154:	10bfffc4 	addi	r2,r2,-1
    2158:	e0fffd17 	ldw	r3,-12(fp)
    215c:	18bfbf16 	blt	r3,r2,205c <__alt_data_end+0xff00205c>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
         }
      }
   }
}
    2160:	0001883a 	nop
    2164:	e037883a 	mov	sp,fp
    2168:	dfc00117 	ldw	ra,4(sp)
    216c:	df000017 	ldw	fp,0(sp)
    2170:	dec00204 	addi	sp,sp,8
    2174:	f800283a 	ret

00002178 <sobel_threshold>:

void sobel_threshold(short threshold) {
    2178:	defffa04 	addi	sp,sp,-24
    217c:	df000515 	stw	fp,20(sp)
    2180:	df000504 	addi	fp,sp,20
    2184:	2005883a 	mov	r2,r4
    2188:	e0bfff0d 	sth	r2,-4(fp)
	int x,y,arrayindex;
	short sum,value;
   //unrolling loop
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    218c:	00800044 	movi	r2,1
    2190:	e0bffc15 	stw	r2,-16(fp)
    2194:	00003406 	br	2268 <sobel_threshold+0xf0>
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    2198:	00800044 	movi	r2,1
    219c:	e0bffb15 	stw	r2,-20(fp)
    21a0:	00002a06 	br	224c <sobel_threshold+0xd4>
			arrayindex = (y*sobel_width)+x;
    21a4:	d0e6cf17 	ldw	r3,-25796(gp)
    21a8:	e0bffc17 	ldw	r2,-16(fp)
    21ac:	1887383a 	mul	r3,r3,r2
    21b0:	e0bffb17 	ldw	r2,-20(fp)
    21b4:	1885883a 	add	r2,r3,r2
    21b8:	e0bffd15 	stw	r2,-12(fp)
			value = sobel_x_result[arrayindex];
    21bc:	d0e6d217 	ldw	r3,-25784(gp)
    21c0:	e0bffd17 	ldw	r2,-12(fp)
    21c4:	1085883a 	add	r2,r2,r2
    21c8:	1885883a 	add	r2,r3,r2
    21cc:	1080000b 	ldhu	r2,0(r2)
    21d0:	e0bffe0d 	sth	r2,-8(fp)
			sum = abs(value);
    21d4:	e0bffe0f 	ldh	r2,-8(fp)
    21d8:	1000010e 	bge	r2,zero,21e0 <sobel_threshold+0x68>
    21dc:	0085c83a 	sub	r2,zero,r2
    21e0:	e0bffe8d 	sth	r2,-6(fp)
			value = sobel_y_result[arrayindex];
    21e4:	d0e6d317 	ldw	r3,-25780(gp)
    21e8:	e0bffd17 	ldw	r2,-12(fp)
    21ec:	1085883a 	add	r2,r2,r2
    21f0:	1885883a 	add	r2,r3,r2
    21f4:	1080000b 	ldhu	r2,0(r2)
    21f8:	e0bffe0d 	sth	r2,-8(fp)
			sum += abs(value);
    21fc:	e0bffe0f 	ldh	r2,-8(fp)
    2200:	1000010e 	bge	r2,zero,2208 <sobel_threshold+0x90>
    2204:	0085c83a 	sub	r2,zero,r2
    2208:	1007883a 	mov	r3,r2
    220c:	e0bffe8b 	ldhu	r2,-6(fp)
    2210:	1885883a 	add	r2,r3,r2
    2214:	e0bffe8d 	sth	r2,-6(fp)
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    2218:	d0e6d017 	ldw	r3,-25792(gp)
    221c:	e0bffd17 	ldw	r2,-12(fp)
    2220:	1887883a 	add	r3,r3,r2
    2224:	e0bffe8f 	ldh	r2,-6(fp)
    2228:	e13fff0f 	ldh	r4,-4(fp)
    222c:	2080020e 	bge	r4,r2,2238 <sobel_threshold+0xc0>
    2230:	00bfffc4 	movi	r2,-1
    2234:	00000106 	br	223c <sobel_threshold+0xc4>
    2238:	0005883a 	mov	r2,zero
    223c:	18800005 	stb	r2,0(r3)
void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
   //unrolling loop
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    2240:	e0bffb17 	ldw	r2,-20(fp)
    2244:	10800044 	addi	r2,r2,1
    2248:	e0bffb15 	stw	r2,-20(fp)
    224c:	d0a6cf17 	ldw	r2,-25796(gp)
    2250:	10bfffc4 	addi	r2,r2,-1
    2254:	e0fffb17 	ldw	r3,-20(fp)
    2258:	18bfd216 	blt	r3,r2,21a4 <__alt_data_end+0xff0021a4>

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
   //unrolling loop
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    225c:	e0bffc17 	ldw	r2,-16(fp)
    2260:	10800044 	addi	r2,r2,1
    2264:	e0bffc15 	stw	r2,-16(fp)
    2268:	d0a6d117 	ldw	r2,-25788(gp)
    226c:	10bfffc4 	addi	r2,r2,-1
    2270:	e0fffc17 	ldw	r3,-16(fp)
    2274:	18bfc816 	blt	r3,r2,2198 <__alt_data_end+0xff002198>
			value = sobel_y_result[arrayindex];
			sum += abs(value);
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
		}
	}
}
    2278:	0001883a 	nop
    227c:	e037883a 	mov	sp,fp
    2280:	df000017 	ldw	fp,0(sp)
    2284:	dec00104 	addi	sp,sp,4
    2288:	f800283a 	ret

0000228c <GetSobel_rgb>:

unsigned short *GetSobel_rgb() {
    228c:	deffff04 	addi	sp,sp,-4
    2290:	df000015 	stw	fp,0(sp)
    2294:	d839883a 	mov	fp,sp
	return sobel_rgb565;
    2298:	d0a6d417 	ldw	r2,-25776(gp)
}
    229c:	e037883a 	mov	sp,fp
    22a0:	df000017 	ldw	fp,0(sp)
    22a4:	dec00104 	addi	sp,sp,4
    22a8:	f800283a 	ret

000022ac <GetSobelResult>:

unsigned char *GetSobelResult() {
    22ac:	deffff04 	addi	sp,sp,-4
    22b0:	df000015 	stw	fp,0(sp)
    22b4:	d839883a 	mov	fp,sp
	return sobel_result;
    22b8:	d0a6d017 	ldw	r2,-25792(gp)
}
    22bc:	e037883a 	mov	sp,fp
    22c0:	df000017 	ldw	fp,0(sp)
    22c4:	dec00104 	addi	sp,sp,4
    22c8:	f800283a 	ret

000022cc <vga_set_pointer>:
 */

#include <system.h>
#include <io.h>

void vga_set_pointer( void* image ) {
    22cc:	defffe04 	addi	sp,sp,-8
    22d0:	df000115 	stw	fp,4(sp)
    22d4:	df000104 	addi	fp,sp,4
    22d8:	e13fff15 	stw	r4,-4(fp)
	IOWR_32DIRECT(VGA_DMA_0_BASE,0,(int)image);
    22dc:	e0ffff17 	ldw	r3,-4(fp)
    22e0:	00804034 	movhi	r2,256
    22e4:	10843404 	addi	r2,r2,4304
    22e8:	10c00035 	stwio	r3,0(r2)
}
    22ec:	0001883a 	nop
    22f0:	e037883a 	mov	sp,fp
    22f4:	df000017 	ldw	fp,0(sp)
    22f8:	dec00104 	addi	sp,sp,4
    22fc:	f800283a 	ret

00002300 <vga_set_swap>:

void vga_set_swap(char swap) {
    2300:	defffe04 	addi	sp,sp,-8
    2304:	df000115 	stw	fp,4(sp)
    2308:	df000104 	addi	fp,sp,4
    230c:	2005883a 	mov	r2,r4
    2310:	e0bfff05 	stb	r2,-4(fp)
	IOWR_8DIRECT(VGA_DMA_0_BASE,4,swap);
    2314:	e0ffff07 	ldb	r3,-4(fp)
    2318:	00804034 	movhi	r2,256
    231c:	10843504 	addi	r2,r2,4308
    2320:	10c00025 	stbio	r3,0(r2)
}
    2324:	0001883a 	nop
    2328:	e037883a 	mov	sp,fp
    232c:	df000017 	ldw	fp,0(sp)
    2330:	dec00104 	addi	sp,sp,4
    2334:	f800283a 	ret

00002338 <malloc>:
    2338:	00800074 	movhi	r2,1
    233c:	108e4d04 	addi	r2,r2,14644
    2340:	200b883a 	mov	r5,r4
    2344:	11000017 	ldw	r4,0(r2)
    2348:	00023601 	jmpi	2360 <_malloc_r>

0000234c <free>:
    234c:	00800074 	movhi	r2,1
    2350:	108e4d04 	addi	r2,r2,14644
    2354:	200b883a 	mov	r5,r4
    2358:	11000017 	ldw	r4,0(r2)
    235c:	00071b01 	jmpi	71b0 <_free_r>

00002360 <_malloc_r>:
    2360:	defff504 	addi	sp,sp,-44
    2364:	dc800315 	stw	r18,12(sp)
    2368:	dfc00a15 	stw	ra,40(sp)
    236c:	df000915 	stw	fp,36(sp)
    2370:	ddc00815 	stw	r23,32(sp)
    2374:	dd800715 	stw	r22,28(sp)
    2378:	dd400615 	stw	r21,24(sp)
    237c:	dd000515 	stw	r20,20(sp)
    2380:	dcc00415 	stw	r19,16(sp)
    2384:	dc400215 	stw	r17,8(sp)
    2388:	dc000115 	stw	r16,4(sp)
    238c:	288002c4 	addi	r2,r5,11
    2390:	00c00584 	movi	r3,22
    2394:	2025883a 	mov	r18,r4
    2398:	18807f2e 	bgeu	r3,r2,2598 <_malloc_r+0x238>
    239c:	047ffe04 	movi	r17,-8
    23a0:	1462703a 	and	r17,r2,r17
    23a4:	8800a316 	blt	r17,zero,2634 <_malloc_r+0x2d4>
    23a8:	8940a236 	bltu	r17,r5,2634 <_malloc_r+0x2d4>
    23ac:	000f1fc0 	call	f1fc <__malloc_lock>
    23b0:	00807dc4 	movi	r2,503
    23b4:	1441e92e 	bgeu	r2,r17,2b5c <_malloc_r+0x7fc>
    23b8:	8804d27a 	srli	r2,r17,9
    23bc:	1000a126 	beq	r2,zero,2644 <_malloc_r+0x2e4>
    23c0:	00c00104 	movi	r3,4
    23c4:	18811e36 	bltu	r3,r2,2840 <_malloc_r+0x4e0>
    23c8:	8804d1ba 	srli	r2,r17,6
    23cc:	12000e44 	addi	r8,r2,57
    23d0:	11c00e04 	addi	r7,r2,56
    23d4:	4209883a 	add	r4,r8,r8
    23d8:	04c00074 	movhi	r19,1
    23dc:	2109883a 	add	r4,r4,r4
    23e0:	9cc79f04 	addi	r19,r19,7804
    23e4:	2109883a 	add	r4,r4,r4
    23e8:	9909883a 	add	r4,r19,r4
    23ec:	24000117 	ldw	r16,4(r4)
    23f0:	213ffe04 	addi	r4,r4,-8
    23f4:	24009726 	beq	r4,r16,2654 <_malloc_r+0x2f4>
    23f8:	80800117 	ldw	r2,4(r16)
    23fc:	01bfff04 	movi	r6,-4
    2400:	014003c4 	movi	r5,15
    2404:	1184703a 	and	r2,r2,r6
    2408:	1447c83a 	sub	r3,r2,r17
    240c:	28c00716 	blt	r5,r3,242c <_malloc_r+0xcc>
    2410:	1800920e 	bge	r3,zero,265c <_malloc_r+0x2fc>
    2414:	84000317 	ldw	r16,12(r16)
    2418:	24008e26 	beq	r4,r16,2654 <_malloc_r+0x2f4>
    241c:	80800117 	ldw	r2,4(r16)
    2420:	1184703a 	and	r2,r2,r6
    2424:	1447c83a 	sub	r3,r2,r17
    2428:	28fff90e 	bge	r5,r3,2410 <__alt_data_end+0xff002410>
    242c:	3809883a 	mov	r4,r7
    2430:	01800074 	movhi	r6,1
    2434:	9c000417 	ldw	r16,16(r19)
    2438:	31879f04 	addi	r6,r6,7804
    243c:	32000204 	addi	r8,r6,8
    2440:	82013426 	beq	r16,r8,2914 <_malloc_r+0x5b4>
    2444:	80c00117 	ldw	r3,4(r16)
    2448:	00bfff04 	movi	r2,-4
    244c:	188e703a 	and	r7,r3,r2
    2450:	3c45c83a 	sub	r2,r7,r17
    2454:	00c003c4 	movi	r3,15
    2458:	18811f16 	blt	r3,r2,28d8 <_malloc_r+0x578>
    245c:	32000515 	stw	r8,20(r6)
    2460:	32000415 	stw	r8,16(r6)
    2464:	10007f0e 	bge	r2,zero,2664 <_malloc_r+0x304>
    2468:	00807fc4 	movi	r2,511
    246c:	11c0fd36 	bltu	r2,r7,2864 <_malloc_r+0x504>
    2470:	3806d0fa 	srli	r3,r7,3
    2474:	01c00044 	movi	r7,1
    2478:	30800117 	ldw	r2,4(r6)
    247c:	19400044 	addi	r5,r3,1
    2480:	294b883a 	add	r5,r5,r5
    2484:	1807d0ba 	srai	r3,r3,2
    2488:	294b883a 	add	r5,r5,r5
    248c:	294b883a 	add	r5,r5,r5
    2490:	298b883a 	add	r5,r5,r6
    2494:	38c6983a 	sll	r3,r7,r3
    2498:	29c00017 	ldw	r7,0(r5)
    249c:	2a7ffe04 	addi	r9,r5,-8
    24a0:	1886b03a 	or	r3,r3,r2
    24a4:	82400315 	stw	r9,12(r16)
    24a8:	81c00215 	stw	r7,8(r16)
    24ac:	30c00115 	stw	r3,4(r6)
    24b0:	2c000015 	stw	r16,0(r5)
    24b4:	3c000315 	stw	r16,12(r7)
    24b8:	2005d0ba 	srai	r2,r4,2
    24bc:	01400044 	movi	r5,1
    24c0:	288a983a 	sll	r5,r5,r2
    24c4:	19406f36 	bltu	r3,r5,2684 <_malloc_r+0x324>
    24c8:	28c4703a 	and	r2,r5,r3
    24cc:	10000a1e 	bne	r2,zero,24f8 <_malloc_r+0x198>
    24d0:	00bfff04 	movi	r2,-4
    24d4:	294b883a 	add	r5,r5,r5
    24d8:	2088703a 	and	r4,r4,r2
    24dc:	28c4703a 	and	r2,r5,r3
    24e0:	21000104 	addi	r4,r4,4
    24e4:	1000041e 	bne	r2,zero,24f8 <_malloc_r+0x198>
    24e8:	294b883a 	add	r5,r5,r5
    24ec:	28c4703a 	and	r2,r5,r3
    24f0:	21000104 	addi	r4,r4,4
    24f4:	103ffc26 	beq	r2,zero,24e8 <__alt_data_end+0xff0024e8>
    24f8:	02bfff04 	movi	r10,-4
    24fc:	024003c4 	movi	r9,15
    2500:	21800044 	addi	r6,r4,1
    2504:	318d883a 	add	r6,r6,r6
    2508:	318d883a 	add	r6,r6,r6
    250c:	318d883a 	add	r6,r6,r6
    2510:	998d883a 	add	r6,r19,r6
    2514:	333ffe04 	addi	r12,r6,-8
    2518:	2017883a 	mov	r11,r4
    251c:	31800104 	addi	r6,r6,4
    2520:	34000017 	ldw	r16,0(r6)
    2524:	31fffd04 	addi	r7,r6,-12
    2528:	81c0041e 	bne	r16,r7,253c <_malloc_r+0x1dc>
    252c:	0000fb06 	br	291c <_malloc_r+0x5bc>
    2530:	1801030e 	bge	r3,zero,2940 <_malloc_r+0x5e0>
    2534:	84000317 	ldw	r16,12(r16)
    2538:	81c0f826 	beq	r16,r7,291c <_malloc_r+0x5bc>
    253c:	80800117 	ldw	r2,4(r16)
    2540:	1284703a 	and	r2,r2,r10
    2544:	1447c83a 	sub	r3,r2,r17
    2548:	48fff90e 	bge	r9,r3,2530 <__alt_data_end+0xff002530>
    254c:	80800317 	ldw	r2,12(r16)
    2550:	81000217 	ldw	r4,8(r16)
    2554:	89400054 	ori	r5,r17,1
    2558:	81400115 	stw	r5,4(r16)
    255c:	20800315 	stw	r2,12(r4)
    2560:	11000215 	stw	r4,8(r2)
    2564:	8463883a 	add	r17,r16,r17
    2568:	9c400515 	stw	r17,20(r19)
    256c:	9c400415 	stw	r17,16(r19)
    2570:	18800054 	ori	r2,r3,1
    2574:	88800115 	stw	r2,4(r17)
    2578:	8a000315 	stw	r8,12(r17)
    257c:	8a000215 	stw	r8,8(r17)
    2580:	88e3883a 	add	r17,r17,r3
    2584:	88c00015 	stw	r3,0(r17)
    2588:	9009883a 	mov	r4,r18
    258c:	000f2200 	call	f220 <__malloc_unlock>
    2590:	80800204 	addi	r2,r16,8
    2594:	00001b06 	br	2604 <_malloc_r+0x2a4>
    2598:	04400404 	movi	r17,16
    259c:	89402536 	bltu	r17,r5,2634 <_malloc_r+0x2d4>
    25a0:	000f1fc0 	call	f1fc <__malloc_lock>
    25a4:	00800184 	movi	r2,6
    25a8:	01000084 	movi	r4,2
    25ac:	04c00074 	movhi	r19,1
    25b0:	1085883a 	add	r2,r2,r2
    25b4:	9cc79f04 	addi	r19,r19,7804
    25b8:	1085883a 	add	r2,r2,r2
    25bc:	9885883a 	add	r2,r19,r2
    25c0:	14000117 	ldw	r16,4(r2)
    25c4:	10fffe04 	addi	r3,r2,-8
    25c8:	80c0d926 	beq	r16,r3,2930 <_malloc_r+0x5d0>
    25cc:	80c00117 	ldw	r3,4(r16)
    25d0:	81000317 	ldw	r4,12(r16)
    25d4:	00bfff04 	movi	r2,-4
    25d8:	1884703a 	and	r2,r3,r2
    25dc:	81400217 	ldw	r5,8(r16)
    25e0:	8085883a 	add	r2,r16,r2
    25e4:	10c00117 	ldw	r3,4(r2)
    25e8:	29000315 	stw	r4,12(r5)
    25ec:	21400215 	stw	r5,8(r4)
    25f0:	18c00054 	ori	r3,r3,1
    25f4:	10c00115 	stw	r3,4(r2)
    25f8:	9009883a 	mov	r4,r18
    25fc:	000f2200 	call	f220 <__malloc_unlock>
    2600:	80800204 	addi	r2,r16,8
    2604:	dfc00a17 	ldw	ra,40(sp)
    2608:	df000917 	ldw	fp,36(sp)
    260c:	ddc00817 	ldw	r23,32(sp)
    2610:	dd800717 	ldw	r22,28(sp)
    2614:	dd400617 	ldw	r21,24(sp)
    2618:	dd000517 	ldw	r20,20(sp)
    261c:	dcc00417 	ldw	r19,16(sp)
    2620:	dc800317 	ldw	r18,12(sp)
    2624:	dc400217 	ldw	r17,8(sp)
    2628:	dc000117 	ldw	r16,4(sp)
    262c:	dec00b04 	addi	sp,sp,44
    2630:	f800283a 	ret
    2634:	00800304 	movi	r2,12
    2638:	90800015 	stw	r2,0(r18)
    263c:	0005883a 	mov	r2,zero
    2640:	003ff006 	br	2604 <__alt_data_end+0xff002604>
    2644:	01002004 	movi	r4,128
    2648:	02001004 	movi	r8,64
    264c:	01c00fc4 	movi	r7,63
    2650:	003f6106 	br	23d8 <__alt_data_end+0xff0023d8>
    2654:	4009883a 	mov	r4,r8
    2658:	003f7506 	br	2430 <__alt_data_end+0xff002430>
    265c:	81000317 	ldw	r4,12(r16)
    2660:	003fde06 	br	25dc <__alt_data_end+0xff0025dc>
    2664:	81c5883a 	add	r2,r16,r7
    2668:	11400117 	ldw	r5,4(r2)
    266c:	9009883a 	mov	r4,r18
    2670:	29400054 	ori	r5,r5,1
    2674:	11400115 	stw	r5,4(r2)
    2678:	000f2200 	call	f220 <__malloc_unlock>
    267c:	80800204 	addi	r2,r16,8
    2680:	003fe006 	br	2604 <__alt_data_end+0xff002604>
    2684:	9c000217 	ldw	r16,8(r19)
    2688:	00bfff04 	movi	r2,-4
    268c:	85800117 	ldw	r22,4(r16)
    2690:	b0ac703a 	and	r22,r22,r2
    2694:	b4400336 	bltu	r22,r17,26a4 <_malloc_r+0x344>
    2698:	b445c83a 	sub	r2,r22,r17
    269c:	00c003c4 	movi	r3,15
    26a0:	18805d16 	blt	r3,r2,2818 <_malloc_r+0x4b8>
    26a4:	05c00074 	movhi	r23,1
    26a8:	00800074 	movhi	r2,1
    26ac:	10952104 	addi	r2,r2,21636
    26b0:	bdce4a04 	addi	r23,r23,14632
    26b4:	15400017 	ldw	r21,0(r2)
    26b8:	b8c00017 	ldw	r3,0(r23)
    26bc:	00bfffc4 	movi	r2,-1
    26c0:	858d883a 	add	r6,r16,r22
    26c4:	8d6b883a 	add	r21,r17,r21
    26c8:	1880ea26 	beq	r3,r2,2a74 <_malloc_r+0x714>
    26cc:	ad4403c4 	addi	r21,r21,4111
    26d0:	00bc0004 	movi	r2,-4096
    26d4:	a8aa703a 	and	r21,r21,r2
    26d8:	a80b883a 	mov	r5,r21
    26dc:	9009883a 	mov	r4,r18
    26e0:	d9800015 	stw	r6,0(sp)
    26e4:	0002cac0 	call	2cac <_sbrk_r>
    26e8:	1029883a 	mov	r20,r2
    26ec:	00bfffc4 	movi	r2,-1
    26f0:	d9800017 	ldw	r6,0(sp)
    26f4:	a080e826 	beq	r20,r2,2a98 <_malloc_r+0x738>
    26f8:	a180a636 	bltu	r20,r6,2994 <_malloc_r+0x634>
    26fc:	07000074 	movhi	fp,1
    2700:	e7152f04 	addi	fp,fp,21692
    2704:	e0800017 	ldw	r2,0(fp)
    2708:	a887883a 	add	r3,r21,r2
    270c:	e0c00015 	stw	r3,0(fp)
    2710:	3500e626 	beq	r6,r20,2aac <_malloc_r+0x74c>
    2714:	b9000017 	ldw	r4,0(r23)
    2718:	00bfffc4 	movi	r2,-1
    271c:	2080ee26 	beq	r4,r2,2ad8 <_malloc_r+0x778>
    2720:	a185c83a 	sub	r2,r20,r6
    2724:	10c5883a 	add	r2,r2,r3
    2728:	e0800015 	stw	r2,0(fp)
    272c:	a0c001cc 	andi	r3,r20,7
    2730:	1800bc26 	beq	r3,zero,2a24 <_malloc_r+0x6c4>
    2734:	a0e9c83a 	sub	r20,r20,r3
    2738:	00840204 	movi	r2,4104
    273c:	a5000204 	addi	r20,r20,8
    2740:	10c7c83a 	sub	r3,r2,r3
    2744:	a545883a 	add	r2,r20,r21
    2748:	1083ffcc 	andi	r2,r2,4095
    274c:	18abc83a 	sub	r21,r3,r2
    2750:	a80b883a 	mov	r5,r21
    2754:	9009883a 	mov	r4,r18
    2758:	0002cac0 	call	2cac <_sbrk_r>
    275c:	00ffffc4 	movi	r3,-1
    2760:	10c0e126 	beq	r2,r3,2ae8 <_malloc_r+0x788>
    2764:	1505c83a 	sub	r2,r2,r20
    2768:	1545883a 	add	r2,r2,r21
    276c:	10800054 	ori	r2,r2,1
    2770:	e0c00017 	ldw	r3,0(fp)
    2774:	9d000215 	stw	r20,8(r19)
    2778:	a0800115 	stw	r2,4(r20)
    277c:	a8c7883a 	add	r3,r21,r3
    2780:	e0c00015 	stw	r3,0(fp)
    2784:	84c00e26 	beq	r16,r19,27c0 <_malloc_r+0x460>
    2788:	018003c4 	movi	r6,15
    278c:	3580a72e 	bgeu	r6,r22,2a2c <_malloc_r+0x6cc>
    2790:	81400117 	ldw	r5,4(r16)
    2794:	013ffe04 	movi	r4,-8
    2798:	b0bffd04 	addi	r2,r22,-12
    279c:	1104703a 	and	r2,r2,r4
    27a0:	2900004c 	andi	r4,r5,1
    27a4:	2088b03a 	or	r4,r4,r2
    27a8:	81000115 	stw	r4,4(r16)
    27ac:	01400144 	movi	r5,5
    27b0:	8089883a 	add	r4,r16,r2
    27b4:	21400115 	stw	r5,4(r4)
    27b8:	21400215 	stw	r5,8(r4)
    27bc:	3080cd36 	bltu	r6,r2,2af4 <_malloc_r+0x794>
    27c0:	00800074 	movhi	r2,1
    27c4:	10952004 	addi	r2,r2,21632
    27c8:	11000017 	ldw	r4,0(r2)
    27cc:	20c0012e 	bgeu	r4,r3,27d4 <_malloc_r+0x474>
    27d0:	10c00015 	stw	r3,0(r2)
    27d4:	00800074 	movhi	r2,1
    27d8:	10951f04 	addi	r2,r2,21628
    27dc:	11000017 	ldw	r4,0(r2)
    27e0:	9c000217 	ldw	r16,8(r19)
    27e4:	20c0012e 	bgeu	r4,r3,27ec <_malloc_r+0x48c>
    27e8:	10c00015 	stw	r3,0(r2)
    27ec:	80c00117 	ldw	r3,4(r16)
    27f0:	00bfff04 	movi	r2,-4
    27f4:	1886703a 	and	r3,r3,r2
    27f8:	1c45c83a 	sub	r2,r3,r17
    27fc:	1c400236 	bltu	r3,r17,2808 <_malloc_r+0x4a8>
    2800:	00c003c4 	movi	r3,15
    2804:	18800416 	blt	r3,r2,2818 <_malloc_r+0x4b8>
    2808:	9009883a 	mov	r4,r18
    280c:	000f2200 	call	f220 <__malloc_unlock>
    2810:	0005883a 	mov	r2,zero
    2814:	003f7b06 	br	2604 <__alt_data_end+0xff002604>
    2818:	88c00054 	ori	r3,r17,1
    281c:	80c00115 	stw	r3,4(r16)
    2820:	8463883a 	add	r17,r16,r17
    2824:	10800054 	ori	r2,r2,1
    2828:	9c400215 	stw	r17,8(r19)
    282c:	88800115 	stw	r2,4(r17)
    2830:	9009883a 	mov	r4,r18
    2834:	000f2200 	call	f220 <__malloc_unlock>
    2838:	80800204 	addi	r2,r16,8
    283c:	003f7106 	br	2604 <__alt_data_end+0xff002604>
    2840:	00c00504 	movi	r3,20
    2844:	18804a2e 	bgeu	r3,r2,2970 <_malloc_r+0x610>
    2848:	00c01504 	movi	r3,84
    284c:	18806e36 	bltu	r3,r2,2a08 <_malloc_r+0x6a8>
    2850:	8804d33a 	srli	r2,r17,12
    2854:	12001bc4 	addi	r8,r2,111
    2858:	11c01b84 	addi	r7,r2,110
    285c:	4209883a 	add	r4,r8,r8
    2860:	003edd06 	br	23d8 <__alt_data_end+0xff0023d8>
    2864:	3804d27a 	srli	r2,r7,9
    2868:	00c00104 	movi	r3,4
    286c:	1880442e 	bgeu	r3,r2,2980 <_malloc_r+0x620>
    2870:	00c00504 	movi	r3,20
    2874:	18808136 	bltu	r3,r2,2a7c <_malloc_r+0x71c>
    2878:	11401704 	addi	r5,r2,92
    287c:	10c016c4 	addi	r3,r2,91
    2880:	294b883a 	add	r5,r5,r5
    2884:	294b883a 	add	r5,r5,r5
    2888:	294b883a 	add	r5,r5,r5
    288c:	994b883a 	add	r5,r19,r5
    2890:	28800017 	ldw	r2,0(r5)
    2894:	01800074 	movhi	r6,1
    2898:	297ffe04 	addi	r5,r5,-8
    289c:	31879f04 	addi	r6,r6,7804
    28a0:	28806526 	beq	r5,r2,2a38 <_malloc_r+0x6d8>
    28a4:	01bfff04 	movi	r6,-4
    28a8:	10c00117 	ldw	r3,4(r2)
    28ac:	1986703a 	and	r3,r3,r6
    28b0:	38c0022e 	bgeu	r7,r3,28bc <_malloc_r+0x55c>
    28b4:	10800217 	ldw	r2,8(r2)
    28b8:	28bffb1e 	bne	r5,r2,28a8 <__alt_data_end+0xff0028a8>
    28bc:	11400317 	ldw	r5,12(r2)
    28c0:	98c00117 	ldw	r3,4(r19)
    28c4:	81400315 	stw	r5,12(r16)
    28c8:	80800215 	stw	r2,8(r16)
    28cc:	2c000215 	stw	r16,8(r5)
    28d0:	14000315 	stw	r16,12(r2)
    28d4:	003ef806 	br	24b8 <__alt_data_end+0xff0024b8>
    28d8:	88c00054 	ori	r3,r17,1
    28dc:	80c00115 	stw	r3,4(r16)
    28e0:	8463883a 	add	r17,r16,r17
    28e4:	34400515 	stw	r17,20(r6)
    28e8:	34400415 	stw	r17,16(r6)
    28ec:	10c00054 	ori	r3,r2,1
    28f0:	8a000315 	stw	r8,12(r17)
    28f4:	8a000215 	stw	r8,8(r17)
    28f8:	88c00115 	stw	r3,4(r17)
    28fc:	88a3883a 	add	r17,r17,r2
    2900:	88800015 	stw	r2,0(r17)
    2904:	9009883a 	mov	r4,r18
    2908:	000f2200 	call	f220 <__malloc_unlock>
    290c:	80800204 	addi	r2,r16,8
    2910:	003f3c06 	br	2604 <__alt_data_end+0xff002604>
    2914:	30c00117 	ldw	r3,4(r6)
    2918:	003ee706 	br	24b8 <__alt_data_end+0xff0024b8>
    291c:	5ac00044 	addi	r11,r11,1
    2920:	588000cc 	andi	r2,r11,3
    2924:	31800204 	addi	r6,r6,8
    2928:	103efd1e 	bne	r2,zero,2520 <__alt_data_end+0xff002520>
    292c:	00002406 	br	29c0 <_malloc_r+0x660>
    2930:	14000317 	ldw	r16,12(r2)
    2934:	143f251e 	bne	r2,r16,25cc <__alt_data_end+0xff0025cc>
    2938:	21000084 	addi	r4,r4,2
    293c:	003ebc06 	br	2430 <__alt_data_end+0xff002430>
    2940:	8085883a 	add	r2,r16,r2
    2944:	10c00117 	ldw	r3,4(r2)
    2948:	81000317 	ldw	r4,12(r16)
    294c:	81400217 	ldw	r5,8(r16)
    2950:	18c00054 	ori	r3,r3,1
    2954:	10c00115 	stw	r3,4(r2)
    2958:	29000315 	stw	r4,12(r5)
    295c:	21400215 	stw	r5,8(r4)
    2960:	9009883a 	mov	r4,r18
    2964:	000f2200 	call	f220 <__malloc_unlock>
    2968:	80800204 	addi	r2,r16,8
    296c:	003f2506 	br	2604 <__alt_data_end+0xff002604>
    2970:	12001704 	addi	r8,r2,92
    2974:	11c016c4 	addi	r7,r2,91
    2978:	4209883a 	add	r4,r8,r8
    297c:	003e9606 	br	23d8 <__alt_data_end+0xff0023d8>
    2980:	3804d1ba 	srli	r2,r7,6
    2984:	11400e44 	addi	r5,r2,57
    2988:	10c00e04 	addi	r3,r2,56
    298c:	294b883a 	add	r5,r5,r5
    2990:	003fbc06 	br	2884 <__alt_data_end+0xff002884>
    2994:	84ff5926 	beq	r16,r19,26fc <__alt_data_end+0xff0026fc>
    2998:	00800074 	movhi	r2,1
    299c:	10879f04 	addi	r2,r2,7804
    29a0:	14000217 	ldw	r16,8(r2)
    29a4:	00bfff04 	movi	r2,-4
    29a8:	80c00117 	ldw	r3,4(r16)
    29ac:	1886703a 	and	r3,r3,r2
    29b0:	003f9106 	br	27f8 <__alt_data_end+0xff0027f8>
    29b4:	60800217 	ldw	r2,8(r12)
    29b8:	213fffc4 	addi	r4,r4,-1
    29bc:	1300651e 	bne	r2,r12,2b54 <_malloc_r+0x7f4>
    29c0:	208000cc 	andi	r2,r4,3
    29c4:	633ffe04 	addi	r12,r12,-8
    29c8:	103ffa1e 	bne	r2,zero,29b4 <__alt_data_end+0xff0029b4>
    29cc:	98800117 	ldw	r2,4(r19)
    29d0:	0146303a 	nor	r3,zero,r5
    29d4:	1884703a 	and	r2,r3,r2
    29d8:	98800115 	stw	r2,4(r19)
    29dc:	294b883a 	add	r5,r5,r5
    29e0:	117f2836 	bltu	r2,r5,2684 <__alt_data_end+0xff002684>
    29e4:	283f2726 	beq	r5,zero,2684 <__alt_data_end+0xff002684>
    29e8:	2886703a 	and	r3,r5,r2
    29ec:	5809883a 	mov	r4,r11
    29f0:	183ec31e 	bne	r3,zero,2500 <__alt_data_end+0xff002500>
    29f4:	294b883a 	add	r5,r5,r5
    29f8:	2886703a 	and	r3,r5,r2
    29fc:	21000104 	addi	r4,r4,4
    2a00:	183ffc26 	beq	r3,zero,29f4 <__alt_data_end+0xff0029f4>
    2a04:	003ebe06 	br	2500 <__alt_data_end+0xff002500>
    2a08:	00c05504 	movi	r3,340
    2a0c:	18801236 	bltu	r3,r2,2a58 <_malloc_r+0x6f8>
    2a10:	8804d3fa 	srli	r2,r17,15
    2a14:	12001e04 	addi	r8,r2,120
    2a18:	11c01dc4 	addi	r7,r2,119
    2a1c:	4209883a 	add	r4,r8,r8
    2a20:	003e6d06 	br	23d8 <__alt_data_end+0xff0023d8>
    2a24:	00c40004 	movi	r3,4096
    2a28:	003f4606 	br	2744 <__alt_data_end+0xff002744>
    2a2c:	00800044 	movi	r2,1
    2a30:	a0800115 	stw	r2,4(r20)
    2a34:	003f7406 	br	2808 <__alt_data_end+0xff002808>
    2a38:	1805d0ba 	srai	r2,r3,2
    2a3c:	01c00044 	movi	r7,1
    2a40:	30c00117 	ldw	r3,4(r6)
    2a44:	388e983a 	sll	r7,r7,r2
    2a48:	2805883a 	mov	r2,r5
    2a4c:	38c6b03a 	or	r3,r7,r3
    2a50:	30c00115 	stw	r3,4(r6)
    2a54:	003f9b06 	br	28c4 <__alt_data_end+0xff0028c4>
    2a58:	00c15504 	movi	r3,1364
    2a5c:	18801a36 	bltu	r3,r2,2ac8 <_malloc_r+0x768>
    2a60:	8804d4ba 	srli	r2,r17,18
    2a64:	12001f44 	addi	r8,r2,125
    2a68:	11c01f04 	addi	r7,r2,124
    2a6c:	4209883a 	add	r4,r8,r8
    2a70:	003e5906 	br	23d8 <__alt_data_end+0xff0023d8>
    2a74:	ad400404 	addi	r21,r21,16
    2a78:	003f1706 	br	26d8 <__alt_data_end+0xff0026d8>
    2a7c:	00c01504 	movi	r3,84
    2a80:	18802336 	bltu	r3,r2,2b10 <_malloc_r+0x7b0>
    2a84:	3804d33a 	srli	r2,r7,12
    2a88:	11401bc4 	addi	r5,r2,111
    2a8c:	10c01b84 	addi	r3,r2,110
    2a90:	294b883a 	add	r5,r5,r5
    2a94:	003f7b06 	br	2884 <__alt_data_end+0xff002884>
    2a98:	9c000217 	ldw	r16,8(r19)
    2a9c:	00bfff04 	movi	r2,-4
    2aa0:	80c00117 	ldw	r3,4(r16)
    2aa4:	1886703a 	and	r3,r3,r2
    2aa8:	003f5306 	br	27f8 <__alt_data_end+0xff0027f8>
    2aac:	3083ffcc 	andi	r2,r6,4095
    2ab0:	103f181e 	bne	r2,zero,2714 <__alt_data_end+0xff002714>
    2ab4:	99000217 	ldw	r4,8(r19)
    2ab8:	b545883a 	add	r2,r22,r21
    2abc:	10800054 	ori	r2,r2,1
    2ac0:	20800115 	stw	r2,4(r4)
    2ac4:	003f3e06 	br	27c0 <__alt_data_end+0xff0027c0>
    2ac8:	01003f84 	movi	r4,254
    2acc:	02001fc4 	movi	r8,127
    2ad0:	01c01f84 	movi	r7,126
    2ad4:	003e4006 	br	23d8 <__alt_data_end+0xff0023d8>
    2ad8:	00800074 	movhi	r2,1
    2adc:	108e4a04 	addi	r2,r2,14632
    2ae0:	15000015 	stw	r20,0(r2)
    2ae4:	003f1106 	br	272c <__alt_data_end+0xff00272c>
    2ae8:	00800044 	movi	r2,1
    2aec:	002b883a 	mov	r21,zero
    2af0:	003f1f06 	br	2770 <__alt_data_end+0xff002770>
    2af4:	81400204 	addi	r5,r16,8
    2af8:	9009883a 	mov	r4,r18
    2afc:	00071b00 	call	71b0 <_free_r>
    2b00:	00800074 	movhi	r2,1
    2b04:	10952f04 	addi	r2,r2,21692
    2b08:	10c00017 	ldw	r3,0(r2)
    2b0c:	003f2c06 	br	27c0 <__alt_data_end+0xff0027c0>
    2b10:	00c05504 	movi	r3,340
    2b14:	18800536 	bltu	r3,r2,2b2c <_malloc_r+0x7cc>
    2b18:	3804d3fa 	srli	r2,r7,15
    2b1c:	11401e04 	addi	r5,r2,120
    2b20:	10c01dc4 	addi	r3,r2,119
    2b24:	294b883a 	add	r5,r5,r5
    2b28:	003f5606 	br	2884 <__alt_data_end+0xff002884>
    2b2c:	00c15504 	movi	r3,1364
    2b30:	18800536 	bltu	r3,r2,2b48 <_malloc_r+0x7e8>
    2b34:	3804d4ba 	srli	r2,r7,18
    2b38:	11401f44 	addi	r5,r2,125
    2b3c:	10c01f04 	addi	r3,r2,124
    2b40:	294b883a 	add	r5,r5,r5
    2b44:	003f4f06 	br	2884 <__alt_data_end+0xff002884>
    2b48:	01403f84 	movi	r5,254
    2b4c:	00c01f84 	movi	r3,126
    2b50:	003f4c06 	br	2884 <__alt_data_end+0xff002884>
    2b54:	98800117 	ldw	r2,4(r19)
    2b58:	003fa006 	br	29dc <__alt_data_end+0xff0029dc>
    2b5c:	8808d0fa 	srli	r4,r17,3
    2b60:	20800044 	addi	r2,r4,1
    2b64:	1085883a 	add	r2,r2,r2
    2b68:	003e9006 	br	25ac <__alt_data_end+0xff0025ac>

00002b6c <_printf_r>:
    2b6c:	defffd04 	addi	sp,sp,-12
    2b70:	2805883a 	mov	r2,r5
    2b74:	dfc00015 	stw	ra,0(sp)
    2b78:	d9800115 	stw	r6,4(sp)
    2b7c:	d9c00215 	stw	r7,8(sp)
    2b80:	21400217 	ldw	r5,8(r4)
    2b84:	d9c00104 	addi	r7,sp,4
    2b88:	100d883a 	mov	r6,r2
    2b8c:	0002d980 	call	2d98 <___vfprintf_internal_r>
    2b90:	dfc00017 	ldw	ra,0(sp)
    2b94:	dec00304 	addi	sp,sp,12
    2b98:	f800283a 	ret

00002b9c <printf>:
    2b9c:	defffc04 	addi	sp,sp,-16
    2ba0:	dfc00015 	stw	ra,0(sp)
    2ba4:	d9400115 	stw	r5,4(sp)
    2ba8:	d9800215 	stw	r6,8(sp)
    2bac:	d9c00315 	stw	r7,12(sp)
    2bb0:	00800074 	movhi	r2,1
    2bb4:	108e4d04 	addi	r2,r2,14644
    2bb8:	10800017 	ldw	r2,0(r2)
    2bbc:	200b883a 	mov	r5,r4
    2bc0:	d9800104 	addi	r6,sp,4
    2bc4:	11000217 	ldw	r4,8(r2)
    2bc8:	0004f900 	call	4f90 <__vfprintf_internal>
    2bcc:	dfc00017 	ldw	ra,0(sp)
    2bd0:	dec00404 	addi	sp,sp,16
    2bd4:	f800283a 	ret

00002bd8 <_puts_r>:
    2bd8:	defff604 	addi	sp,sp,-40
    2bdc:	dc000715 	stw	r16,28(sp)
    2be0:	2021883a 	mov	r16,r4
    2be4:	2809883a 	mov	r4,r5
    2be8:	dc400815 	stw	r17,32(sp)
    2bec:	dfc00915 	stw	ra,36(sp)
    2bf0:	2823883a 	mov	r17,r5
    2bf4:	0002d000 	call	2d00 <strlen>
    2bf8:	10c00044 	addi	r3,r2,1
    2bfc:	d8800115 	stw	r2,4(sp)
    2c00:	00800074 	movhi	r2,1
    2c04:	1086e104 	addi	r2,r2,7044
    2c08:	d8800215 	stw	r2,8(sp)
    2c0c:	00800044 	movi	r2,1
    2c10:	d8800315 	stw	r2,12(sp)
    2c14:	00800084 	movi	r2,2
    2c18:	dc400015 	stw	r17,0(sp)
    2c1c:	d8c00615 	stw	r3,24(sp)
    2c20:	dec00415 	stw	sp,16(sp)
    2c24:	d8800515 	stw	r2,20(sp)
    2c28:	80000226 	beq	r16,zero,2c34 <_puts_r+0x5c>
    2c2c:	80800e17 	ldw	r2,56(r16)
    2c30:	10001426 	beq	r2,zero,2c84 <_puts_r+0xac>
    2c34:	81400217 	ldw	r5,8(r16)
    2c38:	2880030b 	ldhu	r2,12(r5)
    2c3c:	10c8000c 	andi	r3,r2,8192
    2c40:	1800061e 	bne	r3,zero,2c5c <_puts_r+0x84>
    2c44:	29001917 	ldw	r4,100(r5)
    2c48:	00f7ffc4 	movi	r3,-8193
    2c4c:	10880014 	ori	r2,r2,8192
    2c50:	20c6703a 	and	r3,r4,r3
    2c54:	2880030d 	sth	r2,12(r5)
    2c58:	28c01915 	stw	r3,100(r5)
    2c5c:	d9800404 	addi	r6,sp,16
    2c60:	8009883a 	mov	r4,r16
    2c64:	00074c00 	call	74c0 <__sfvwrite_r>
    2c68:	1000091e 	bne	r2,zero,2c90 <_puts_r+0xb8>
    2c6c:	00800284 	movi	r2,10
    2c70:	dfc00917 	ldw	ra,36(sp)
    2c74:	dc400817 	ldw	r17,32(sp)
    2c78:	dc000717 	ldw	r16,28(sp)
    2c7c:	dec00a04 	addi	sp,sp,40
    2c80:	f800283a 	ret
    2c84:	8009883a 	mov	r4,r16
    2c88:	000703c0 	call	703c <__sinit>
    2c8c:	003fe906 	br	2c34 <__alt_data_end+0xff002c34>
    2c90:	00bfffc4 	movi	r2,-1
    2c94:	003ff606 	br	2c70 <__alt_data_end+0xff002c70>

00002c98 <puts>:
    2c98:	00800074 	movhi	r2,1
    2c9c:	108e4d04 	addi	r2,r2,14644
    2ca0:	200b883a 	mov	r5,r4
    2ca4:	11000017 	ldw	r4,0(r2)
    2ca8:	0002bd81 	jmpi	2bd8 <_puts_r>

00002cac <_sbrk_r>:
    2cac:	defffd04 	addi	sp,sp,-12
    2cb0:	dc000015 	stw	r16,0(sp)
    2cb4:	04000074 	movhi	r16,1
    2cb8:	dc400115 	stw	r17,4(sp)
    2cbc:	84152204 	addi	r16,r16,21640
    2cc0:	2023883a 	mov	r17,r4
    2cc4:	2809883a 	mov	r4,r5
    2cc8:	dfc00215 	stw	ra,8(sp)
    2ccc:	80000015 	stw	zero,0(r16)
    2cd0:	000f3e00 	call	f3e0 <sbrk>
    2cd4:	00ffffc4 	movi	r3,-1
    2cd8:	10c00526 	beq	r2,r3,2cf0 <_sbrk_r+0x44>
    2cdc:	dfc00217 	ldw	ra,8(sp)
    2ce0:	dc400117 	ldw	r17,4(sp)
    2ce4:	dc000017 	ldw	r16,0(sp)
    2ce8:	dec00304 	addi	sp,sp,12
    2cec:	f800283a 	ret
    2cf0:	80c00017 	ldw	r3,0(r16)
    2cf4:	183ff926 	beq	r3,zero,2cdc <__alt_data_end+0xff002cdc>
    2cf8:	88c00015 	stw	r3,0(r17)
    2cfc:	003ff706 	br	2cdc <__alt_data_end+0xff002cdc>

00002d00 <strlen>:
    2d00:	208000cc 	andi	r2,r4,3
    2d04:	10002026 	beq	r2,zero,2d88 <strlen+0x88>
    2d08:	20800007 	ldb	r2,0(r4)
    2d0c:	10002026 	beq	r2,zero,2d90 <strlen+0x90>
    2d10:	2005883a 	mov	r2,r4
    2d14:	00000206 	br	2d20 <strlen+0x20>
    2d18:	10c00007 	ldb	r3,0(r2)
    2d1c:	18001826 	beq	r3,zero,2d80 <strlen+0x80>
    2d20:	10800044 	addi	r2,r2,1
    2d24:	10c000cc 	andi	r3,r2,3
    2d28:	183ffb1e 	bne	r3,zero,2d18 <__alt_data_end+0xff002d18>
    2d2c:	10c00017 	ldw	r3,0(r2)
    2d30:	01ffbff4 	movhi	r7,65279
    2d34:	39ffbfc4 	addi	r7,r7,-257
    2d38:	00ca303a 	nor	r5,zero,r3
    2d3c:	01a02074 	movhi	r6,32897
    2d40:	19c7883a 	add	r3,r3,r7
    2d44:	31a02004 	addi	r6,r6,-32640
    2d48:	1946703a 	and	r3,r3,r5
    2d4c:	1986703a 	and	r3,r3,r6
    2d50:	1800091e 	bne	r3,zero,2d78 <strlen+0x78>
    2d54:	10800104 	addi	r2,r2,4
    2d58:	10c00017 	ldw	r3,0(r2)
    2d5c:	19cb883a 	add	r5,r3,r7
    2d60:	00c6303a 	nor	r3,zero,r3
    2d64:	28c6703a 	and	r3,r5,r3
    2d68:	1986703a 	and	r3,r3,r6
    2d6c:	183ff926 	beq	r3,zero,2d54 <__alt_data_end+0xff002d54>
    2d70:	00000106 	br	2d78 <strlen+0x78>
    2d74:	10800044 	addi	r2,r2,1
    2d78:	10c00007 	ldb	r3,0(r2)
    2d7c:	183ffd1e 	bne	r3,zero,2d74 <__alt_data_end+0xff002d74>
    2d80:	1105c83a 	sub	r2,r2,r4
    2d84:	f800283a 	ret
    2d88:	2005883a 	mov	r2,r4
    2d8c:	003fe706 	br	2d2c <__alt_data_end+0xff002d2c>
    2d90:	0005883a 	mov	r2,zero
    2d94:	f800283a 	ret

00002d98 <___vfprintf_internal_r>:
    2d98:	deffb804 	addi	sp,sp,-288
    2d9c:	dfc04715 	stw	ra,284(sp)
    2da0:	ddc04515 	stw	r23,276(sp)
    2da4:	dd404315 	stw	r21,268(sp)
    2da8:	d9002c15 	stw	r4,176(sp)
    2dac:	282f883a 	mov	r23,r5
    2db0:	302b883a 	mov	r21,r6
    2db4:	d9c02d15 	stw	r7,180(sp)
    2db8:	df004615 	stw	fp,280(sp)
    2dbc:	dd804415 	stw	r22,272(sp)
    2dc0:	dd004215 	stw	r20,264(sp)
    2dc4:	dcc04115 	stw	r19,260(sp)
    2dc8:	dc804015 	stw	r18,256(sp)
    2dcc:	dc403f15 	stw	r17,252(sp)
    2dd0:	dc003e15 	stw	r16,248(sp)
    2dd4:	0007bb00 	call	7bb0 <_localeconv_r>
    2dd8:	10800017 	ldw	r2,0(r2)
    2ddc:	1009883a 	mov	r4,r2
    2de0:	d8803415 	stw	r2,208(sp)
    2de4:	0002d000 	call	2d00 <strlen>
    2de8:	d8803715 	stw	r2,220(sp)
    2dec:	d8802c17 	ldw	r2,176(sp)
    2df0:	10000226 	beq	r2,zero,2dfc <___vfprintf_internal_r+0x64>
    2df4:	10800e17 	ldw	r2,56(r2)
    2df8:	1000f926 	beq	r2,zero,31e0 <___vfprintf_internal_r+0x448>
    2dfc:	b880030b 	ldhu	r2,12(r23)
    2e00:	10c8000c 	andi	r3,r2,8192
    2e04:	1800061e 	bne	r3,zero,2e20 <___vfprintf_internal_r+0x88>
    2e08:	b9001917 	ldw	r4,100(r23)
    2e0c:	00f7ffc4 	movi	r3,-8193
    2e10:	10880014 	ori	r2,r2,8192
    2e14:	20c6703a 	and	r3,r4,r3
    2e18:	b880030d 	sth	r2,12(r23)
    2e1c:	b8c01915 	stw	r3,100(r23)
    2e20:	10c0020c 	andi	r3,r2,8
    2e24:	1800c126 	beq	r3,zero,312c <___vfprintf_internal_r+0x394>
    2e28:	b8c00417 	ldw	r3,16(r23)
    2e2c:	1800bf26 	beq	r3,zero,312c <___vfprintf_internal_r+0x394>
    2e30:	1080068c 	andi	r2,r2,26
    2e34:	00c00284 	movi	r3,10
    2e38:	10c0c426 	beq	r2,r3,314c <___vfprintf_internal_r+0x3b4>
    2e3c:	d8c00404 	addi	r3,sp,16
    2e40:	05000074 	movhi	r20,1
    2e44:	d9001e04 	addi	r4,sp,120
    2e48:	a506f284 	addi	r20,r20,7114
    2e4c:	d8c01e15 	stw	r3,120(sp)
    2e50:	d8002015 	stw	zero,128(sp)
    2e54:	d8001f15 	stw	zero,124(sp)
    2e58:	d8003315 	stw	zero,204(sp)
    2e5c:	d8003615 	stw	zero,216(sp)
    2e60:	d8003815 	stw	zero,224(sp)
    2e64:	1811883a 	mov	r8,r3
    2e68:	d8003915 	stw	zero,228(sp)
    2e6c:	d8003a15 	stw	zero,232(sp)
    2e70:	d8002f15 	stw	zero,188(sp)
    2e74:	d9002815 	stw	r4,160(sp)
    2e78:	a8800007 	ldb	r2,0(r21)
    2e7c:	10027b26 	beq	r2,zero,386c <___vfprintf_internal_r+0xad4>
    2e80:	00c00944 	movi	r3,37
    2e84:	a821883a 	mov	r16,r21
    2e88:	10c0021e 	bne	r2,r3,2e94 <___vfprintf_internal_r+0xfc>
    2e8c:	00001406 	br	2ee0 <___vfprintf_internal_r+0x148>
    2e90:	10c00326 	beq	r2,r3,2ea0 <___vfprintf_internal_r+0x108>
    2e94:	84000044 	addi	r16,r16,1
    2e98:	80800007 	ldb	r2,0(r16)
    2e9c:	103ffc1e 	bne	r2,zero,2e90 <__alt_data_end+0xff002e90>
    2ea0:	8563c83a 	sub	r17,r16,r21
    2ea4:	88000e26 	beq	r17,zero,2ee0 <___vfprintf_internal_r+0x148>
    2ea8:	d8c02017 	ldw	r3,128(sp)
    2eac:	d8801f17 	ldw	r2,124(sp)
    2eb0:	45400015 	stw	r21,0(r8)
    2eb4:	1c47883a 	add	r3,r3,r17
    2eb8:	10800044 	addi	r2,r2,1
    2ebc:	d8c02015 	stw	r3,128(sp)
    2ec0:	44400115 	stw	r17,4(r8)
    2ec4:	d8801f15 	stw	r2,124(sp)
    2ec8:	00c001c4 	movi	r3,7
    2ecc:	1880a716 	blt	r3,r2,316c <___vfprintf_internal_r+0x3d4>
    2ed0:	42000204 	addi	r8,r8,8
    2ed4:	d9402f17 	ldw	r5,188(sp)
    2ed8:	2c4b883a 	add	r5,r5,r17
    2edc:	d9402f15 	stw	r5,188(sp)
    2ee0:	80800007 	ldb	r2,0(r16)
    2ee4:	1000a826 	beq	r2,zero,3188 <___vfprintf_internal_r+0x3f0>
    2ee8:	84400047 	ldb	r17,1(r16)
    2eec:	00bfffc4 	movi	r2,-1
    2ef0:	85400044 	addi	r21,r16,1
    2ef4:	d8002785 	stb	zero,158(sp)
    2ef8:	0007883a 	mov	r3,zero
    2efc:	000f883a 	mov	r7,zero
    2f00:	d8802915 	stw	r2,164(sp)
    2f04:	d8003115 	stw	zero,196(sp)
    2f08:	0025883a 	mov	r18,zero
    2f0c:	01401604 	movi	r5,88
    2f10:	01800244 	movi	r6,9
    2f14:	02800a84 	movi	r10,42
    2f18:	02401b04 	movi	r9,108
    2f1c:	ad400044 	addi	r21,r21,1
    2f20:	88bff804 	addi	r2,r17,-32
    2f24:	28830436 	bltu	r5,r2,3b38 <___vfprintf_internal_r+0xda0>
    2f28:	100490ba 	slli	r2,r2,2
    2f2c:	01000034 	movhi	r4,0
    2f30:	210bd004 	addi	r4,r4,12096
    2f34:	1105883a 	add	r2,r2,r4
    2f38:	10800017 	ldw	r2,0(r2)
    2f3c:	1000683a 	jmp	r2
    2f40:	00003a58 	cmpnei	zero,zero,233
    2f44:	00003b38 	rdprs	zero,zero,236
    2f48:	00003b38 	rdprs	zero,zero,236
    2f4c:	00003a78 	rdprs	zero,zero,233
    2f50:	00003b38 	rdprs	zero,zero,236
    2f54:	00003b38 	rdprs	zero,zero,236
    2f58:	00003b38 	rdprs	zero,zero,236
    2f5c:	00003b38 	rdprs	zero,zero,236
    2f60:	00003b38 	rdprs	zero,zero,236
    2f64:	00003b38 	rdprs	zero,zero,236
    2f68:	000031ec 	andhi	zero,zero,199
    2f6c:	00003994 	movui	zero,230
    2f70:	00003b38 	rdprs	zero,zero,236
    2f74:	000030b4 	movhi	zero,194
    2f78:	00003214 	movui	zero,200
    2f7c:	00003b38 	rdprs	zero,zero,236
    2f80:	00003254 	movui	zero,201
    2f84:	00003260 	cmpeqi	zero,zero,201
    2f88:	00003260 	cmpeqi	zero,zero,201
    2f8c:	00003260 	cmpeqi	zero,zero,201
    2f90:	00003260 	cmpeqi	zero,zero,201
    2f94:	00003260 	cmpeqi	zero,zero,201
    2f98:	00003260 	cmpeqi	zero,zero,201
    2f9c:	00003260 	cmpeqi	zero,zero,201
    2fa0:	00003260 	cmpeqi	zero,zero,201
    2fa4:	00003260 	cmpeqi	zero,zero,201
    2fa8:	00003b38 	rdprs	zero,zero,236
    2fac:	00003b38 	rdprs	zero,zero,236
    2fb0:	00003b38 	rdprs	zero,zero,236
    2fb4:	00003b38 	rdprs	zero,zero,236
    2fb8:	00003b38 	rdprs	zero,zero,236
    2fbc:	00003b38 	rdprs	zero,zero,236
    2fc0:	00003b38 	rdprs	zero,zero,236
    2fc4:	00003b38 	rdprs	zero,zero,236
    2fc8:	00003b38 	rdprs	zero,zero,236
    2fcc:	00003b38 	rdprs	zero,zero,236
    2fd0:	00003294 	movui	zero,202
    2fd4:	00003350 	cmplti	zero,zero,205
    2fd8:	00003b38 	rdprs	zero,zero,236
    2fdc:	00003350 	cmplti	zero,zero,205
    2fe0:	00003b38 	rdprs	zero,zero,236
    2fe4:	00003b38 	rdprs	zero,zero,236
    2fe8:	00003b38 	rdprs	zero,zero,236
    2fec:	00003b38 	rdprs	zero,zero,236
    2ff0:	000033f0 	cmpltui	zero,zero,207
    2ff4:	00003b38 	rdprs	zero,zero,236
    2ff8:	00003b38 	rdprs	zero,zero,236
    2ffc:	000033fc 	xorhi	zero,zero,207
    3000:	00003b38 	rdprs	zero,zero,236
    3004:	00003b38 	rdprs	zero,zero,236
    3008:	00003b38 	rdprs	zero,zero,236
    300c:	00003b38 	rdprs	zero,zero,236
    3010:	00003b38 	rdprs	zero,zero,236
    3014:	00003874 	movhi	zero,225
    3018:	00003b38 	rdprs	zero,zero,236
    301c:	00003b38 	rdprs	zero,zero,236
    3020:	000038d4 	movui	zero,227
    3024:	00003b38 	rdprs	zero,zero,236
    3028:	00003b38 	rdprs	zero,zero,236
    302c:	00003b38 	rdprs	zero,zero,236
    3030:	00003b38 	rdprs	zero,zero,236
    3034:	00003b38 	rdprs	zero,zero,236
    3038:	00003b38 	rdprs	zero,zero,236
    303c:	00003b38 	rdprs	zero,zero,236
    3040:	00003b38 	rdprs	zero,zero,236
    3044:	00003b38 	rdprs	zero,zero,236
    3048:	00003b38 	rdprs	zero,zero,236
    304c:	00003ae4 	muli	zero,zero,235
    3050:	00003a84 	movi	zero,234
    3054:	00003350 	cmplti	zero,zero,205
    3058:	00003350 	cmplti	zero,zero,205
    305c:	00003350 	cmplti	zero,zero,205
    3060:	00003a94 	movui	zero,234
    3064:	00003a84 	movi	zero,234
    3068:	00003b38 	rdprs	zero,zero,236
    306c:	00003b38 	rdprs	zero,zero,236
    3070:	00003aa0 	cmpeqi	zero,zero,234
    3074:	00003b38 	rdprs	zero,zero,236
    3078:	00003ab0 	cmpltui	zero,zero,234
    307c:	00003984 	movi	zero,230
    3080:	000030c0 	call	30c <init_camera+0x8c>
    3084:	000039a4 	muli	zero,zero,230
    3088:	00003b38 	rdprs	zero,zero,236
    308c:	000039b0 	cmpltui	zero,zero,230
    3090:	00003b38 	rdprs	zero,zero,236
    3094:	00003a0c 	andi	zero,zero,232
    3098:	00003b38 	rdprs	zero,zero,236
    309c:	00003b38 	rdprs	zero,zero,236
    30a0:	00003a1c 	xori	zero,zero,232
    30a4:	d9003117 	ldw	r4,196(sp)
    30a8:	d8802d15 	stw	r2,180(sp)
    30ac:	0109c83a 	sub	r4,zero,r4
    30b0:	d9003115 	stw	r4,196(sp)
    30b4:	94800114 	ori	r18,r18,4
    30b8:	ac400007 	ldb	r17,0(r21)
    30bc:	003f9706 	br	2f1c <__alt_data_end+0xff002f1c>
    30c0:	00800c04 	movi	r2,48
    30c4:	d9002d17 	ldw	r4,180(sp)
    30c8:	d9402917 	ldw	r5,164(sp)
    30cc:	d8802705 	stb	r2,156(sp)
    30d0:	00801e04 	movi	r2,120
    30d4:	d8802745 	stb	r2,157(sp)
    30d8:	d8002785 	stb	zero,158(sp)
    30dc:	20c00104 	addi	r3,r4,4
    30e0:	24c00017 	ldw	r19,0(r4)
    30e4:	002d883a 	mov	r22,zero
    30e8:	90800094 	ori	r2,r18,2
    30ec:	28029a16 	blt	r5,zero,3b58 <___vfprintf_internal_r+0xdc0>
    30f0:	00bfdfc4 	movi	r2,-129
    30f4:	90a4703a 	and	r18,r18,r2
    30f8:	d8c02d15 	stw	r3,180(sp)
    30fc:	94800094 	ori	r18,r18,2
    3100:	9802871e 	bne	r19,zero,3b20 <___vfprintf_internal_r+0xd88>
    3104:	00800074 	movhi	r2,1
    3108:	1086eb04 	addi	r2,r2,7084
    310c:	d8803915 	stw	r2,228(sp)
    3110:	04401e04 	movi	r17,120
    3114:	d8802917 	ldw	r2,164(sp)
    3118:	0039883a 	mov	fp,zero
    311c:	1001e926 	beq	r2,zero,38c4 <___vfprintf_internal_r+0xb2c>
    3120:	0027883a 	mov	r19,zero
    3124:	002d883a 	mov	r22,zero
    3128:	00020506 	br	3940 <___vfprintf_internal_r+0xba8>
    312c:	d9002c17 	ldw	r4,176(sp)
    3130:	b80b883a 	mov	r5,r23
    3134:	00050680 	call	5068 <__swsetup_r>
    3138:	1005ac1e 	bne	r2,zero,47ec <___vfprintf_internal_r+0x1a54>
    313c:	b880030b 	ldhu	r2,12(r23)
    3140:	00c00284 	movi	r3,10
    3144:	1080068c 	andi	r2,r2,26
    3148:	10ff3c1e 	bne	r2,r3,2e3c <__alt_data_end+0xff002e3c>
    314c:	b880038f 	ldh	r2,14(r23)
    3150:	103f3a16 	blt	r2,zero,2e3c <__alt_data_end+0xff002e3c>
    3154:	d9c02d17 	ldw	r7,180(sp)
    3158:	d9002c17 	ldw	r4,176(sp)
    315c:	a80d883a 	mov	r6,r21
    3160:	b80b883a 	mov	r5,r23
    3164:	0004fac0 	call	4fac <__sbprintf>
    3168:	00001106 	br	31b0 <___vfprintf_internal_r+0x418>
    316c:	d9002c17 	ldw	r4,176(sp)
    3170:	d9801e04 	addi	r6,sp,120
    3174:	b80b883a 	mov	r5,r23
    3178:	0009b340 	call	9b34 <__sprint_r>
    317c:	1000081e 	bne	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    3180:	da000404 	addi	r8,sp,16
    3184:	003f5306 	br	2ed4 <__alt_data_end+0xff002ed4>
    3188:	d8802017 	ldw	r2,128(sp)
    318c:	10000426 	beq	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    3190:	d9002c17 	ldw	r4,176(sp)
    3194:	d9801e04 	addi	r6,sp,120
    3198:	b80b883a 	mov	r5,r23
    319c:	0009b340 	call	9b34 <__sprint_r>
    31a0:	b880030b 	ldhu	r2,12(r23)
    31a4:	1080100c 	andi	r2,r2,64
    31a8:	1005901e 	bne	r2,zero,47ec <___vfprintf_internal_r+0x1a54>
    31ac:	d8802f17 	ldw	r2,188(sp)
    31b0:	dfc04717 	ldw	ra,284(sp)
    31b4:	df004617 	ldw	fp,280(sp)
    31b8:	ddc04517 	ldw	r23,276(sp)
    31bc:	dd804417 	ldw	r22,272(sp)
    31c0:	dd404317 	ldw	r21,268(sp)
    31c4:	dd004217 	ldw	r20,264(sp)
    31c8:	dcc04117 	ldw	r19,260(sp)
    31cc:	dc804017 	ldw	r18,256(sp)
    31d0:	dc403f17 	ldw	r17,252(sp)
    31d4:	dc003e17 	ldw	r16,248(sp)
    31d8:	dec04804 	addi	sp,sp,288
    31dc:	f800283a 	ret
    31e0:	d9002c17 	ldw	r4,176(sp)
    31e4:	000703c0 	call	703c <__sinit>
    31e8:	003f0406 	br	2dfc <__alt_data_end+0xff002dfc>
    31ec:	d8802d17 	ldw	r2,180(sp)
    31f0:	d9002d17 	ldw	r4,180(sp)
    31f4:	10800017 	ldw	r2,0(r2)
    31f8:	d8803115 	stw	r2,196(sp)
    31fc:	20800104 	addi	r2,r4,4
    3200:	d9003117 	ldw	r4,196(sp)
    3204:	203fa716 	blt	r4,zero,30a4 <__alt_data_end+0xff0030a4>
    3208:	d8802d15 	stw	r2,180(sp)
    320c:	ac400007 	ldb	r17,0(r21)
    3210:	003f4206 	br	2f1c <__alt_data_end+0xff002f1c>
    3214:	ac400007 	ldb	r17,0(r21)
    3218:	aac00044 	addi	r11,r21,1
    321c:	8a872826 	beq	r17,r10,4ec0 <___vfprintf_internal_r+0x2128>
    3220:	88bff404 	addi	r2,r17,-48
    3224:	0009883a 	mov	r4,zero
    3228:	30867d36 	bltu	r6,r2,4c20 <___vfprintf_internal_r+0x1e88>
    322c:	5c400007 	ldb	r17,0(r11)
    3230:	210002a4 	muli	r4,r4,10
    3234:	5d400044 	addi	r21,r11,1
    3238:	a817883a 	mov	r11,r21
    323c:	2089883a 	add	r4,r4,r2
    3240:	88bff404 	addi	r2,r17,-48
    3244:	30bff92e 	bgeu	r6,r2,322c <__alt_data_end+0xff00322c>
    3248:	2005c916 	blt	r4,zero,4970 <___vfprintf_internal_r+0x1bd8>
    324c:	d9002915 	stw	r4,164(sp)
    3250:	003f3306 	br	2f20 <__alt_data_end+0xff002f20>
    3254:	94802014 	ori	r18,r18,128
    3258:	ac400007 	ldb	r17,0(r21)
    325c:	003f2f06 	br	2f1c <__alt_data_end+0xff002f1c>
    3260:	a809883a 	mov	r4,r21
    3264:	d8003115 	stw	zero,196(sp)
    3268:	88bff404 	addi	r2,r17,-48
    326c:	0017883a 	mov	r11,zero
    3270:	24400007 	ldb	r17,0(r4)
    3274:	5ac002a4 	muli	r11,r11,10
    3278:	ad400044 	addi	r21,r21,1
    327c:	a809883a 	mov	r4,r21
    3280:	12d7883a 	add	r11,r2,r11
    3284:	88bff404 	addi	r2,r17,-48
    3288:	30bff92e 	bgeu	r6,r2,3270 <__alt_data_end+0xff003270>
    328c:	dac03115 	stw	r11,196(sp)
    3290:	003f2306 	br	2f20 <__alt_data_end+0xff002f20>
    3294:	18c03fcc 	andi	r3,r3,255
    3298:	18072b1e 	bne	r3,zero,4f48 <___vfprintf_internal_r+0x21b0>
    329c:	94800414 	ori	r18,r18,16
    32a0:	9080080c 	andi	r2,r18,32
    32a4:	10037b26 	beq	r2,zero,4094 <___vfprintf_internal_r+0x12fc>
    32a8:	d9402d17 	ldw	r5,180(sp)
    32ac:	28800117 	ldw	r2,4(r5)
    32b0:	2cc00017 	ldw	r19,0(r5)
    32b4:	29400204 	addi	r5,r5,8
    32b8:	d9402d15 	stw	r5,180(sp)
    32bc:	102d883a 	mov	r22,r2
    32c0:	10044b16 	blt	r2,zero,43f0 <___vfprintf_internal_r+0x1658>
    32c4:	d9402917 	ldw	r5,164(sp)
    32c8:	df002783 	ldbu	fp,158(sp)
    32cc:	2803bc16 	blt	r5,zero,41c0 <___vfprintf_internal_r+0x1428>
    32d0:	00ffdfc4 	movi	r3,-129
    32d4:	9d84b03a 	or	r2,r19,r22
    32d8:	90e4703a 	and	r18,r18,r3
    32dc:	10017726 	beq	r2,zero,38bc <___vfprintf_internal_r+0xb24>
    32e0:	b0038326 	beq	r22,zero,40f0 <___vfprintf_internal_r+0x1358>
    32e4:	dc402a15 	stw	r17,168(sp)
    32e8:	dc001e04 	addi	r16,sp,120
    32ec:	b023883a 	mov	r17,r22
    32f0:	402d883a 	mov	r22,r8
    32f4:	9809883a 	mov	r4,r19
    32f8:	880b883a 	mov	r5,r17
    32fc:	01800284 	movi	r6,10
    3300:	000f883a 	mov	r7,zero
    3304:	000bf2c0 	call	bf2c <__umoddi3>
    3308:	10800c04 	addi	r2,r2,48
    330c:	843fffc4 	addi	r16,r16,-1
    3310:	9809883a 	mov	r4,r19
    3314:	880b883a 	mov	r5,r17
    3318:	80800005 	stb	r2,0(r16)
    331c:	01800284 	movi	r6,10
    3320:	000f883a 	mov	r7,zero
    3324:	000b9b40 	call	b9b4 <__udivdi3>
    3328:	1027883a 	mov	r19,r2
    332c:	10c4b03a 	or	r2,r2,r3
    3330:	1823883a 	mov	r17,r3
    3334:	103fef1e 	bne	r2,zero,32f4 <__alt_data_end+0xff0032f4>
    3338:	d8c02817 	ldw	r3,160(sp)
    333c:	dc402a17 	ldw	r17,168(sp)
    3340:	b011883a 	mov	r8,r22
    3344:	1c07c83a 	sub	r3,r3,r16
    3348:	d8c02e15 	stw	r3,184(sp)
    334c:	00005906 	br	34b4 <___vfprintf_internal_r+0x71c>
    3350:	18c03fcc 	andi	r3,r3,255
    3354:	1806fa1e 	bne	r3,zero,4f40 <___vfprintf_internal_r+0x21a8>
    3358:	9080020c 	andi	r2,r18,8
    335c:	10048a26 	beq	r2,zero,4588 <___vfprintf_internal_r+0x17f0>
    3360:	d8c02d17 	ldw	r3,180(sp)
    3364:	d9002d17 	ldw	r4,180(sp)
    3368:	d9402d17 	ldw	r5,180(sp)
    336c:	18c00017 	ldw	r3,0(r3)
    3370:	21000117 	ldw	r4,4(r4)
    3374:	29400204 	addi	r5,r5,8
    3378:	d8c03615 	stw	r3,216(sp)
    337c:	d9003815 	stw	r4,224(sp)
    3380:	d9402d15 	stw	r5,180(sp)
    3384:	d9003617 	ldw	r4,216(sp)
    3388:	d9403817 	ldw	r5,224(sp)
    338c:	da003d15 	stw	r8,244(sp)
    3390:	04000044 	movi	r16,1
    3394:	00097ac0 	call	97ac <__fpclassifyd>
    3398:	da003d17 	ldw	r8,244(sp)
    339c:	14041f1e 	bne	r2,r16,441c <___vfprintf_internal_r+0x1684>
    33a0:	d9003617 	ldw	r4,216(sp)
    33a4:	d9403817 	ldw	r5,224(sp)
    33a8:	000d883a 	mov	r6,zero
    33ac:	000f883a 	mov	r7,zero
    33b0:	000d9100 	call	d910 <__ledf2>
    33b4:	da003d17 	ldw	r8,244(sp)
    33b8:	1005be16 	blt	r2,zero,4ab4 <___vfprintf_internal_r+0x1d1c>
    33bc:	df002783 	ldbu	fp,158(sp)
    33c0:	008011c4 	movi	r2,71
    33c4:	1445330e 	bge	r2,r17,4894 <___vfprintf_internal_r+0x1afc>
    33c8:	04000074 	movhi	r16,1
    33cc:	8406e304 	addi	r16,r16,7052
    33d0:	00c000c4 	movi	r3,3
    33d4:	00bfdfc4 	movi	r2,-129
    33d8:	d8c02a15 	stw	r3,168(sp)
    33dc:	90a4703a 	and	r18,r18,r2
    33e0:	d8c02e15 	stw	r3,184(sp)
    33e4:	d8002915 	stw	zero,164(sp)
    33e8:	d8003215 	stw	zero,200(sp)
    33ec:	00003706 	br	34cc <___vfprintf_internal_r+0x734>
    33f0:	94800214 	ori	r18,r18,8
    33f4:	ac400007 	ldb	r17,0(r21)
    33f8:	003ec806 	br	2f1c <__alt_data_end+0xff002f1c>
    33fc:	18c03fcc 	andi	r3,r3,255
    3400:	1806db1e 	bne	r3,zero,4f70 <___vfprintf_internal_r+0x21d8>
    3404:	94800414 	ori	r18,r18,16
    3408:	9080080c 	andi	r2,r18,32
    340c:	1002d826 	beq	r2,zero,3f70 <___vfprintf_internal_r+0x11d8>
    3410:	d9402d17 	ldw	r5,180(sp)
    3414:	d8c02917 	ldw	r3,164(sp)
    3418:	d8002785 	stb	zero,158(sp)
    341c:	28800204 	addi	r2,r5,8
    3420:	2cc00017 	ldw	r19,0(r5)
    3424:	2d800117 	ldw	r22,4(r5)
    3428:	18048f16 	blt	r3,zero,4668 <___vfprintf_internal_r+0x18d0>
    342c:	013fdfc4 	movi	r4,-129
    3430:	9d86b03a 	or	r3,r19,r22
    3434:	d8802d15 	stw	r2,180(sp)
    3438:	9124703a 	and	r18,r18,r4
    343c:	1802d91e 	bne	r3,zero,3fa4 <___vfprintf_internal_r+0x120c>
    3440:	d8c02917 	ldw	r3,164(sp)
    3444:	0039883a 	mov	fp,zero
    3448:	1805c326 	beq	r3,zero,4b58 <___vfprintf_internal_r+0x1dc0>
    344c:	0027883a 	mov	r19,zero
    3450:	002d883a 	mov	r22,zero
    3454:	dc001e04 	addi	r16,sp,120
    3458:	9806d0fa 	srli	r3,r19,3
    345c:	b008977a 	slli	r4,r22,29
    3460:	b02cd0fa 	srli	r22,r22,3
    3464:	9cc001cc 	andi	r19,r19,7
    3468:	98800c04 	addi	r2,r19,48
    346c:	843fffc4 	addi	r16,r16,-1
    3470:	20e6b03a 	or	r19,r4,r3
    3474:	80800005 	stb	r2,0(r16)
    3478:	9d86b03a 	or	r3,r19,r22
    347c:	183ff61e 	bne	r3,zero,3458 <__alt_data_end+0xff003458>
    3480:	90c0004c 	andi	r3,r18,1
    3484:	18013b26 	beq	r3,zero,3974 <___vfprintf_internal_r+0xbdc>
    3488:	10803fcc 	andi	r2,r2,255
    348c:	1080201c 	xori	r2,r2,128
    3490:	10bfe004 	addi	r2,r2,-128
    3494:	00c00c04 	movi	r3,48
    3498:	10c13626 	beq	r2,r3,3974 <___vfprintf_internal_r+0xbdc>
    349c:	80ffffc5 	stb	r3,-1(r16)
    34a0:	d8c02817 	ldw	r3,160(sp)
    34a4:	80bfffc4 	addi	r2,r16,-1
    34a8:	1021883a 	mov	r16,r2
    34ac:	1887c83a 	sub	r3,r3,r2
    34b0:	d8c02e15 	stw	r3,184(sp)
    34b4:	d8802e17 	ldw	r2,184(sp)
    34b8:	d9002917 	ldw	r4,164(sp)
    34bc:	1100010e 	bge	r2,r4,34c4 <___vfprintf_internal_r+0x72c>
    34c0:	2005883a 	mov	r2,r4
    34c4:	d8802a15 	stw	r2,168(sp)
    34c8:	d8003215 	stw	zero,200(sp)
    34cc:	e7003fcc 	andi	fp,fp,255
    34d0:	e700201c 	xori	fp,fp,128
    34d4:	e73fe004 	addi	fp,fp,-128
    34d8:	e0000326 	beq	fp,zero,34e8 <___vfprintf_internal_r+0x750>
    34dc:	d8c02a17 	ldw	r3,168(sp)
    34e0:	18c00044 	addi	r3,r3,1
    34e4:	d8c02a15 	stw	r3,168(sp)
    34e8:	90c0008c 	andi	r3,r18,2
    34ec:	d8c02b15 	stw	r3,172(sp)
    34f0:	18000326 	beq	r3,zero,3500 <___vfprintf_internal_r+0x768>
    34f4:	d8c02a17 	ldw	r3,168(sp)
    34f8:	18c00084 	addi	r3,r3,2
    34fc:	d8c02a15 	stw	r3,168(sp)
    3500:	90c0210c 	andi	r3,r18,132
    3504:	d8c03015 	stw	r3,192(sp)
    3508:	1801a31e 	bne	r3,zero,3b98 <___vfprintf_internal_r+0xe00>
    350c:	d9003117 	ldw	r4,196(sp)
    3510:	d8c02a17 	ldw	r3,168(sp)
    3514:	20e7c83a 	sub	r19,r4,r3
    3518:	04c19f0e 	bge	zero,r19,3b98 <___vfprintf_internal_r+0xe00>
    351c:	02400404 	movi	r9,16
    3520:	d8c02017 	ldw	r3,128(sp)
    3524:	d8801f17 	ldw	r2,124(sp)
    3528:	4cc50d0e 	bge	r9,r19,4960 <___vfprintf_internal_r+0x1bc8>
    352c:	01400074 	movhi	r5,1
    3530:	2946f684 	addi	r5,r5,7130
    3534:	dc403b15 	stw	r17,236(sp)
    3538:	d9403515 	stw	r5,212(sp)
    353c:	9823883a 	mov	r17,r19
    3540:	482d883a 	mov	r22,r9
    3544:	9027883a 	mov	r19,r18
    3548:	070001c4 	movi	fp,7
    354c:	8025883a 	mov	r18,r16
    3550:	dc002c17 	ldw	r16,176(sp)
    3554:	00000306 	br	3564 <___vfprintf_internal_r+0x7cc>
    3558:	8c7ffc04 	addi	r17,r17,-16
    355c:	42000204 	addi	r8,r8,8
    3560:	b440130e 	bge	r22,r17,35b0 <___vfprintf_internal_r+0x818>
    3564:	01000074 	movhi	r4,1
    3568:	18c00404 	addi	r3,r3,16
    356c:	10800044 	addi	r2,r2,1
    3570:	2106f684 	addi	r4,r4,7130
    3574:	41000015 	stw	r4,0(r8)
    3578:	45800115 	stw	r22,4(r8)
    357c:	d8c02015 	stw	r3,128(sp)
    3580:	d8801f15 	stw	r2,124(sp)
    3584:	e0bff40e 	bge	fp,r2,3558 <__alt_data_end+0xff003558>
    3588:	d9801e04 	addi	r6,sp,120
    358c:	b80b883a 	mov	r5,r23
    3590:	8009883a 	mov	r4,r16
    3594:	0009b340 	call	9b34 <__sprint_r>
    3598:	103f011e 	bne	r2,zero,31a0 <__alt_data_end+0xff0031a0>
    359c:	8c7ffc04 	addi	r17,r17,-16
    35a0:	d8c02017 	ldw	r3,128(sp)
    35a4:	d8801f17 	ldw	r2,124(sp)
    35a8:	da000404 	addi	r8,sp,16
    35ac:	b47fed16 	blt	r22,r17,3564 <__alt_data_end+0xff003564>
    35b0:	9021883a 	mov	r16,r18
    35b4:	9825883a 	mov	r18,r19
    35b8:	8827883a 	mov	r19,r17
    35bc:	dc403b17 	ldw	r17,236(sp)
    35c0:	d9403517 	ldw	r5,212(sp)
    35c4:	98c7883a 	add	r3,r19,r3
    35c8:	10800044 	addi	r2,r2,1
    35cc:	41400015 	stw	r5,0(r8)
    35d0:	44c00115 	stw	r19,4(r8)
    35d4:	d8c02015 	stw	r3,128(sp)
    35d8:	d8801f15 	stw	r2,124(sp)
    35dc:	010001c4 	movi	r4,7
    35e0:	2082a316 	blt	r4,r2,4070 <___vfprintf_internal_r+0x12d8>
    35e4:	df002787 	ldb	fp,158(sp)
    35e8:	42000204 	addi	r8,r8,8
    35ec:	e0000c26 	beq	fp,zero,3620 <___vfprintf_internal_r+0x888>
    35f0:	d8801f17 	ldw	r2,124(sp)
    35f4:	d9002784 	addi	r4,sp,158
    35f8:	18c00044 	addi	r3,r3,1
    35fc:	10800044 	addi	r2,r2,1
    3600:	41000015 	stw	r4,0(r8)
    3604:	01000044 	movi	r4,1
    3608:	41000115 	stw	r4,4(r8)
    360c:	d8c02015 	stw	r3,128(sp)
    3610:	d8801f15 	stw	r2,124(sp)
    3614:	010001c4 	movi	r4,7
    3618:	20823c16 	blt	r4,r2,3f0c <___vfprintf_internal_r+0x1174>
    361c:	42000204 	addi	r8,r8,8
    3620:	d8802b17 	ldw	r2,172(sp)
    3624:	10000c26 	beq	r2,zero,3658 <___vfprintf_internal_r+0x8c0>
    3628:	d8801f17 	ldw	r2,124(sp)
    362c:	d9002704 	addi	r4,sp,156
    3630:	18c00084 	addi	r3,r3,2
    3634:	10800044 	addi	r2,r2,1
    3638:	41000015 	stw	r4,0(r8)
    363c:	01000084 	movi	r4,2
    3640:	41000115 	stw	r4,4(r8)
    3644:	d8c02015 	stw	r3,128(sp)
    3648:	d8801f15 	stw	r2,124(sp)
    364c:	010001c4 	movi	r4,7
    3650:	20823616 	blt	r4,r2,3f2c <___vfprintf_internal_r+0x1194>
    3654:	42000204 	addi	r8,r8,8
    3658:	d9003017 	ldw	r4,192(sp)
    365c:	00802004 	movi	r2,128
    3660:	20819926 	beq	r4,r2,3cc8 <___vfprintf_internal_r+0xf30>
    3664:	d9402917 	ldw	r5,164(sp)
    3668:	d8802e17 	ldw	r2,184(sp)
    366c:	28adc83a 	sub	r22,r5,r2
    3670:	0580310e 	bge	zero,r22,3738 <___vfprintf_internal_r+0x9a0>
    3674:	07000404 	movi	fp,16
    3678:	d8801f17 	ldw	r2,124(sp)
    367c:	e584140e 	bge	fp,r22,46d0 <___vfprintf_internal_r+0x1938>
    3680:	01400074 	movhi	r5,1
    3684:	2946f284 	addi	r5,r5,7114
    3688:	dc402915 	stw	r17,164(sp)
    368c:	d9402b15 	stw	r5,172(sp)
    3690:	b023883a 	mov	r17,r22
    3694:	04c001c4 	movi	r19,7
    3698:	a82d883a 	mov	r22,r21
    369c:	902b883a 	mov	r21,r18
    36a0:	8025883a 	mov	r18,r16
    36a4:	dc002c17 	ldw	r16,176(sp)
    36a8:	00000306 	br	36b8 <___vfprintf_internal_r+0x920>
    36ac:	8c7ffc04 	addi	r17,r17,-16
    36b0:	42000204 	addi	r8,r8,8
    36b4:	e440110e 	bge	fp,r17,36fc <___vfprintf_internal_r+0x964>
    36b8:	18c00404 	addi	r3,r3,16
    36bc:	10800044 	addi	r2,r2,1
    36c0:	45000015 	stw	r20,0(r8)
    36c4:	47000115 	stw	fp,4(r8)
    36c8:	d8c02015 	stw	r3,128(sp)
    36cc:	d8801f15 	stw	r2,124(sp)
    36d0:	98bff60e 	bge	r19,r2,36ac <__alt_data_end+0xff0036ac>
    36d4:	d9801e04 	addi	r6,sp,120
    36d8:	b80b883a 	mov	r5,r23
    36dc:	8009883a 	mov	r4,r16
    36e0:	0009b340 	call	9b34 <__sprint_r>
    36e4:	103eae1e 	bne	r2,zero,31a0 <__alt_data_end+0xff0031a0>
    36e8:	8c7ffc04 	addi	r17,r17,-16
    36ec:	d8c02017 	ldw	r3,128(sp)
    36f0:	d8801f17 	ldw	r2,124(sp)
    36f4:	da000404 	addi	r8,sp,16
    36f8:	e47fef16 	blt	fp,r17,36b8 <__alt_data_end+0xff0036b8>
    36fc:	9021883a 	mov	r16,r18
    3700:	a825883a 	mov	r18,r21
    3704:	b02b883a 	mov	r21,r22
    3708:	882d883a 	mov	r22,r17
    370c:	dc402917 	ldw	r17,164(sp)
    3710:	d9002b17 	ldw	r4,172(sp)
    3714:	1d87883a 	add	r3,r3,r22
    3718:	10800044 	addi	r2,r2,1
    371c:	41000015 	stw	r4,0(r8)
    3720:	45800115 	stw	r22,4(r8)
    3724:	d8c02015 	stw	r3,128(sp)
    3728:	d8801f15 	stw	r2,124(sp)
    372c:	010001c4 	movi	r4,7
    3730:	2081ee16 	blt	r4,r2,3eec <___vfprintf_internal_r+0x1154>
    3734:	42000204 	addi	r8,r8,8
    3738:	9080400c 	andi	r2,r18,256
    373c:	1001181e 	bne	r2,zero,3ba0 <___vfprintf_internal_r+0xe08>
    3740:	d9402e17 	ldw	r5,184(sp)
    3744:	d8801f17 	ldw	r2,124(sp)
    3748:	44000015 	stw	r16,0(r8)
    374c:	1947883a 	add	r3,r3,r5
    3750:	10800044 	addi	r2,r2,1
    3754:	41400115 	stw	r5,4(r8)
    3758:	d8c02015 	stw	r3,128(sp)
    375c:	d8801f15 	stw	r2,124(sp)
    3760:	010001c4 	movi	r4,7
    3764:	2081d316 	blt	r4,r2,3eb4 <___vfprintf_internal_r+0x111c>
    3768:	42000204 	addi	r8,r8,8
    376c:	9480010c 	andi	r18,r18,4
    3770:	90003226 	beq	r18,zero,383c <___vfprintf_internal_r+0xaa4>
    3774:	d9403117 	ldw	r5,196(sp)
    3778:	d8802a17 	ldw	r2,168(sp)
    377c:	28a1c83a 	sub	r16,r5,r2
    3780:	04002e0e 	bge	zero,r16,383c <___vfprintf_internal_r+0xaa4>
    3784:	04400404 	movi	r17,16
    3788:	d8801f17 	ldw	r2,124(sp)
    378c:	8c04a20e 	bge	r17,r16,4a18 <___vfprintf_internal_r+0x1c80>
    3790:	01400074 	movhi	r5,1
    3794:	2946f684 	addi	r5,r5,7130
    3798:	d9403515 	stw	r5,212(sp)
    379c:	048001c4 	movi	r18,7
    37a0:	dcc02c17 	ldw	r19,176(sp)
    37a4:	00000306 	br	37b4 <___vfprintf_internal_r+0xa1c>
    37a8:	843ffc04 	addi	r16,r16,-16
    37ac:	42000204 	addi	r8,r8,8
    37b0:	8c00130e 	bge	r17,r16,3800 <___vfprintf_internal_r+0xa68>
    37b4:	01000074 	movhi	r4,1
    37b8:	18c00404 	addi	r3,r3,16
    37bc:	10800044 	addi	r2,r2,1
    37c0:	2106f684 	addi	r4,r4,7130
    37c4:	41000015 	stw	r4,0(r8)
    37c8:	44400115 	stw	r17,4(r8)
    37cc:	d8c02015 	stw	r3,128(sp)
    37d0:	d8801f15 	stw	r2,124(sp)
    37d4:	90bff40e 	bge	r18,r2,37a8 <__alt_data_end+0xff0037a8>
    37d8:	d9801e04 	addi	r6,sp,120
    37dc:	b80b883a 	mov	r5,r23
    37e0:	9809883a 	mov	r4,r19
    37e4:	0009b340 	call	9b34 <__sprint_r>
    37e8:	103e6d1e 	bne	r2,zero,31a0 <__alt_data_end+0xff0031a0>
    37ec:	843ffc04 	addi	r16,r16,-16
    37f0:	d8c02017 	ldw	r3,128(sp)
    37f4:	d8801f17 	ldw	r2,124(sp)
    37f8:	da000404 	addi	r8,sp,16
    37fc:	8c3fed16 	blt	r17,r16,37b4 <__alt_data_end+0xff0037b4>
    3800:	d9403517 	ldw	r5,212(sp)
    3804:	1c07883a 	add	r3,r3,r16
    3808:	10800044 	addi	r2,r2,1
    380c:	41400015 	stw	r5,0(r8)
    3810:	44000115 	stw	r16,4(r8)
    3814:	d8c02015 	stw	r3,128(sp)
    3818:	d8801f15 	stw	r2,124(sp)
    381c:	010001c4 	movi	r4,7
    3820:	2080060e 	bge	r4,r2,383c <___vfprintf_internal_r+0xaa4>
    3824:	d9002c17 	ldw	r4,176(sp)
    3828:	d9801e04 	addi	r6,sp,120
    382c:	b80b883a 	mov	r5,r23
    3830:	0009b340 	call	9b34 <__sprint_r>
    3834:	103e5a1e 	bne	r2,zero,31a0 <__alt_data_end+0xff0031a0>
    3838:	d8c02017 	ldw	r3,128(sp)
    383c:	d8803117 	ldw	r2,196(sp)
    3840:	d9002a17 	ldw	r4,168(sp)
    3844:	1100010e 	bge	r2,r4,384c <___vfprintf_internal_r+0xab4>
    3848:	2005883a 	mov	r2,r4
    384c:	d9402f17 	ldw	r5,188(sp)
    3850:	288b883a 	add	r5,r5,r2
    3854:	d9402f15 	stw	r5,188(sp)
    3858:	18019e1e 	bne	r3,zero,3ed4 <___vfprintf_internal_r+0x113c>
    385c:	a8800007 	ldb	r2,0(r21)
    3860:	d8001f15 	stw	zero,124(sp)
    3864:	da000404 	addi	r8,sp,16
    3868:	103d851e 	bne	r2,zero,2e80 <__alt_data_end+0xff002e80>
    386c:	a821883a 	mov	r16,r21
    3870:	003d9b06 	br	2ee0 <__alt_data_end+0xff002ee0>
    3874:	18c03fcc 	andi	r3,r3,255
    3878:	1805c11e 	bne	r3,zero,4f80 <___vfprintf_internal_r+0x21e8>
    387c:	94800414 	ori	r18,r18,16
    3880:	9080080c 	andi	r2,r18,32
    3884:	10020c26 	beq	r2,zero,40b8 <___vfprintf_internal_r+0x1320>
    3888:	d8802d17 	ldw	r2,180(sp)
    388c:	d9002917 	ldw	r4,164(sp)
    3890:	d8002785 	stb	zero,158(sp)
    3894:	10c00204 	addi	r3,r2,8
    3898:	14c00017 	ldw	r19,0(r2)
    389c:	15800117 	ldw	r22,4(r2)
    38a0:	20040f16 	blt	r4,zero,48e0 <___vfprintf_internal_r+0x1b48>
    38a4:	013fdfc4 	movi	r4,-129
    38a8:	9d84b03a 	or	r2,r19,r22
    38ac:	d8c02d15 	stw	r3,180(sp)
    38b0:	9124703a 	and	r18,r18,r4
    38b4:	0039883a 	mov	fp,zero
    38b8:	103e891e 	bne	r2,zero,32e0 <__alt_data_end+0xff0032e0>
    38bc:	d9002917 	ldw	r4,164(sp)
    38c0:	2002c11e 	bne	r4,zero,43c8 <___vfprintf_internal_r+0x1630>
    38c4:	d8002915 	stw	zero,164(sp)
    38c8:	d8002e15 	stw	zero,184(sp)
    38cc:	dc001e04 	addi	r16,sp,120
    38d0:	003ef806 	br	34b4 <__alt_data_end+0xff0034b4>
    38d4:	18c03fcc 	andi	r3,r3,255
    38d8:	18059d1e 	bne	r3,zero,4f50 <___vfprintf_internal_r+0x21b8>
    38dc:	01400074 	movhi	r5,1
    38e0:	2946e604 	addi	r5,r5,7064
    38e4:	d9403915 	stw	r5,228(sp)
    38e8:	9080080c 	andi	r2,r18,32
    38ec:	10005226 	beq	r2,zero,3a38 <___vfprintf_internal_r+0xca0>
    38f0:	d8802d17 	ldw	r2,180(sp)
    38f4:	14c00017 	ldw	r19,0(r2)
    38f8:	15800117 	ldw	r22,4(r2)
    38fc:	10800204 	addi	r2,r2,8
    3900:	d8802d15 	stw	r2,180(sp)
    3904:	9080004c 	andi	r2,r18,1
    3908:	10019026 	beq	r2,zero,3f4c <___vfprintf_internal_r+0x11b4>
    390c:	9d84b03a 	or	r2,r19,r22
    3910:	10036926 	beq	r2,zero,46b8 <___vfprintf_internal_r+0x1920>
    3914:	d8c02917 	ldw	r3,164(sp)
    3918:	00800c04 	movi	r2,48
    391c:	d8802705 	stb	r2,156(sp)
    3920:	dc402745 	stb	r17,157(sp)
    3924:	d8002785 	stb	zero,158(sp)
    3928:	90800094 	ori	r2,r18,2
    392c:	18045d16 	blt	r3,zero,4aa4 <___vfprintf_internal_r+0x1d0c>
    3930:	00bfdfc4 	movi	r2,-129
    3934:	90a4703a 	and	r18,r18,r2
    3938:	94800094 	ori	r18,r18,2
    393c:	0039883a 	mov	fp,zero
    3940:	d9003917 	ldw	r4,228(sp)
    3944:	dc001e04 	addi	r16,sp,120
    3948:	988003cc 	andi	r2,r19,15
    394c:	b006973a 	slli	r3,r22,28
    3950:	2085883a 	add	r2,r4,r2
    3954:	9826d13a 	srli	r19,r19,4
    3958:	10800003 	ldbu	r2,0(r2)
    395c:	b02cd13a 	srli	r22,r22,4
    3960:	843fffc4 	addi	r16,r16,-1
    3964:	1ce6b03a 	or	r19,r3,r19
    3968:	80800005 	stb	r2,0(r16)
    396c:	9d84b03a 	or	r2,r19,r22
    3970:	103ff51e 	bne	r2,zero,3948 <__alt_data_end+0xff003948>
    3974:	d8c02817 	ldw	r3,160(sp)
    3978:	1c07c83a 	sub	r3,r3,r16
    397c:	d8c02e15 	stw	r3,184(sp)
    3980:	003ecc06 	br	34b4 <__alt_data_end+0xff0034b4>
    3984:	18c03fcc 	andi	r3,r3,255
    3988:	183e9f26 	beq	r3,zero,3408 <__alt_data_end+0xff003408>
    398c:	d9c02785 	stb	r7,158(sp)
    3990:	003e9d06 	br	3408 <__alt_data_end+0xff003408>
    3994:	00c00044 	movi	r3,1
    3998:	01c00ac4 	movi	r7,43
    399c:	ac400007 	ldb	r17,0(r21)
    39a0:	003d5e06 	br	2f1c <__alt_data_end+0xff002f1c>
    39a4:	94800814 	ori	r18,r18,32
    39a8:	ac400007 	ldb	r17,0(r21)
    39ac:	003d5b06 	br	2f1c <__alt_data_end+0xff002f1c>
    39b0:	d8c02d17 	ldw	r3,180(sp)
    39b4:	d8002785 	stb	zero,158(sp)
    39b8:	1c000017 	ldw	r16,0(r3)
    39bc:	1cc00104 	addi	r19,r3,4
    39c0:	80041926 	beq	r16,zero,4a28 <___vfprintf_internal_r+0x1c90>
    39c4:	d9002917 	ldw	r4,164(sp)
    39c8:	2003d016 	blt	r4,zero,490c <___vfprintf_internal_r+0x1b74>
    39cc:	200d883a 	mov	r6,r4
    39d0:	000b883a 	mov	r5,zero
    39d4:	8009883a 	mov	r4,r16
    39d8:	da003d15 	stw	r8,244(sp)
    39dc:	0007d9c0 	call	7d9c <memchr>
    39e0:	da003d17 	ldw	r8,244(sp)
    39e4:	10045426 	beq	r2,zero,4b38 <___vfprintf_internal_r+0x1da0>
    39e8:	1405c83a 	sub	r2,r2,r16
    39ec:	d8802e15 	stw	r2,184(sp)
    39f0:	1003cc16 	blt	r2,zero,4924 <___vfprintf_internal_r+0x1b8c>
    39f4:	df002783 	ldbu	fp,158(sp)
    39f8:	d8802a15 	stw	r2,168(sp)
    39fc:	dcc02d15 	stw	r19,180(sp)
    3a00:	d8002915 	stw	zero,164(sp)
    3a04:	d8003215 	stw	zero,200(sp)
    3a08:	003eb006 	br	34cc <__alt_data_end+0xff0034cc>
    3a0c:	18c03fcc 	andi	r3,r3,255
    3a10:	183f9b26 	beq	r3,zero,3880 <__alt_data_end+0xff003880>
    3a14:	d9c02785 	stb	r7,158(sp)
    3a18:	003f9906 	br	3880 <__alt_data_end+0xff003880>
    3a1c:	18c03fcc 	andi	r3,r3,255
    3a20:	1805551e 	bne	r3,zero,4f78 <___vfprintf_internal_r+0x21e0>
    3a24:	01400074 	movhi	r5,1
    3a28:	2946eb04 	addi	r5,r5,7084
    3a2c:	d9403915 	stw	r5,228(sp)
    3a30:	9080080c 	andi	r2,r18,32
    3a34:	103fae1e 	bne	r2,zero,38f0 <__alt_data_end+0xff0038f0>
    3a38:	9080040c 	andi	r2,r18,16
    3a3c:	1002de26 	beq	r2,zero,45b8 <___vfprintf_internal_r+0x1820>
    3a40:	d8c02d17 	ldw	r3,180(sp)
    3a44:	002d883a 	mov	r22,zero
    3a48:	1cc00017 	ldw	r19,0(r3)
    3a4c:	18c00104 	addi	r3,r3,4
    3a50:	d8c02d15 	stw	r3,180(sp)
    3a54:	003fab06 	br	3904 <__alt_data_end+0xff003904>
    3a58:	38803fcc 	andi	r2,r7,255
    3a5c:	1080201c 	xori	r2,r2,128
    3a60:	10bfe004 	addi	r2,r2,-128
    3a64:	1002d21e 	bne	r2,zero,45b0 <___vfprintf_internal_r+0x1818>
    3a68:	00c00044 	movi	r3,1
    3a6c:	01c00804 	movi	r7,32
    3a70:	ac400007 	ldb	r17,0(r21)
    3a74:	003d2906 	br	2f1c <__alt_data_end+0xff002f1c>
    3a78:	94800054 	ori	r18,r18,1
    3a7c:	ac400007 	ldb	r17,0(r21)
    3a80:	003d2606 	br	2f1c <__alt_data_end+0xff002f1c>
    3a84:	18c03fcc 	andi	r3,r3,255
    3a88:	183e0526 	beq	r3,zero,32a0 <__alt_data_end+0xff0032a0>
    3a8c:	d9c02785 	stb	r7,158(sp)
    3a90:	003e0306 	br	32a0 <__alt_data_end+0xff0032a0>
    3a94:	94801014 	ori	r18,r18,64
    3a98:	ac400007 	ldb	r17,0(r21)
    3a9c:	003d1f06 	br	2f1c <__alt_data_end+0xff002f1c>
    3aa0:	ac400007 	ldb	r17,0(r21)
    3aa4:	8a438726 	beq	r17,r9,48c4 <___vfprintf_internal_r+0x1b2c>
    3aa8:	94800414 	ori	r18,r18,16
    3aac:	003d1b06 	br	2f1c <__alt_data_end+0xff002f1c>
    3ab0:	18c03fcc 	andi	r3,r3,255
    3ab4:	1805341e 	bne	r3,zero,4f88 <___vfprintf_internal_r+0x21f0>
    3ab8:	9080080c 	andi	r2,r18,32
    3abc:	1002cd26 	beq	r2,zero,45f4 <___vfprintf_internal_r+0x185c>
    3ac0:	d9402d17 	ldw	r5,180(sp)
    3ac4:	d9002f17 	ldw	r4,188(sp)
    3ac8:	28800017 	ldw	r2,0(r5)
    3acc:	2007d7fa 	srai	r3,r4,31
    3ad0:	29400104 	addi	r5,r5,4
    3ad4:	d9402d15 	stw	r5,180(sp)
    3ad8:	11000015 	stw	r4,0(r2)
    3adc:	10c00115 	stw	r3,4(r2)
    3ae0:	003ce506 	br	2e78 <__alt_data_end+0xff002e78>
    3ae4:	d8c02d17 	ldw	r3,180(sp)
    3ae8:	d9002d17 	ldw	r4,180(sp)
    3aec:	d8002785 	stb	zero,158(sp)
    3af0:	18800017 	ldw	r2,0(r3)
    3af4:	21000104 	addi	r4,r4,4
    3af8:	00c00044 	movi	r3,1
    3afc:	d8c02a15 	stw	r3,168(sp)
    3b00:	d8801405 	stb	r2,80(sp)
    3b04:	d9002d15 	stw	r4,180(sp)
    3b08:	d8c02e15 	stw	r3,184(sp)
    3b0c:	d8002915 	stw	zero,164(sp)
    3b10:	d8003215 	stw	zero,200(sp)
    3b14:	dc001404 	addi	r16,sp,80
    3b18:	0039883a 	mov	fp,zero
    3b1c:	003e7206 	br	34e8 <__alt_data_end+0xff0034e8>
    3b20:	01000074 	movhi	r4,1
    3b24:	2106eb04 	addi	r4,r4,7084
    3b28:	0039883a 	mov	fp,zero
    3b2c:	d9003915 	stw	r4,228(sp)
    3b30:	04401e04 	movi	r17,120
    3b34:	003f8206 	br	3940 <__alt_data_end+0xff003940>
    3b38:	18c03fcc 	andi	r3,r3,255
    3b3c:	1805061e 	bne	r3,zero,4f58 <___vfprintf_internal_r+0x21c0>
    3b40:	883d9126 	beq	r17,zero,3188 <__alt_data_end+0xff003188>
    3b44:	00c00044 	movi	r3,1
    3b48:	d8c02a15 	stw	r3,168(sp)
    3b4c:	dc401405 	stb	r17,80(sp)
    3b50:	d8002785 	stb	zero,158(sp)
    3b54:	003fec06 	br	3b08 <__alt_data_end+0xff003b08>
    3b58:	01400074 	movhi	r5,1
    3b5c:	2946eb04 	addi	r5,r5,7084
    3b60:	d9403915 	stw	r5,228(sp)
    3b64:	d8c02d15 	stw	r3,180(sp)
    3b68:	1025883a 	mov	r18,r2
    3b6c:	04401e04 	movi	r17,120
    3b70:	9d84b03a 	or	r2,r19,r22
    3b74:	1000fc1e 	bne	r2,zero,3f68 <___vfprintf_internal_r+0x11d0>
    3b78:	0039883a 	mov	fp,zero
    3b7c:	00800084 	movi	r2,2
    3b80:	10803fcc 	andi	r2,r2,255
    3b84:	00c00044 	movi	r3,1
    3b88:	10c20f26 	beq	r2,r3,43c8 <___vfprintf_internal_r+0x1630>
    3b8c:	00c00084 	movi	r3,2
    3b90:	10fd6326 	beq	r2,r3,3120 <__alt_data_end+0xff003120>
    3b94:	003e2d06 	br	344c <__alt_data_end+0xff00344c>
    3b98:	d8c02017 	ldw	r3,128(sp)
    3b9c:	003e9306 	br	35ec <__alt_data_end+0xff0035ec>
    3ba0:	00801944 	movi	r2,101
    3ba4:	14407e0e 	bge	r2,r17,3da0 <___vfprintf_internal_r+0x1008>
    3ba8:	d9003617 	ldw	r4,216(sp)
    3bac:	d9403817 	ldw	r5,224(sp)
    3bb0:	000d883a 	mov	r6,zero
    3bb4:	000f883a 	mov	r7,zero
    3bb8:	d8c03c15 	stw	r3,240(sp)
    3bbc:	da003d15 	stw	r8,244(sp)
    3bc0:	000d7ac0 	call	d7ac <__eqdf2>
    3bc4:	d8c03c17 	ldw	r3,240(sp)
    3bc8:	da003d17 	ldw	r8,244(sp)
    3bcc:	1000f71e 	bne	r2,zero,3fac <___vfprintf_internal_r+0x1214>
    3bd0:	d8801f17 	ldw	r2,124(sp)
    3bd4:	01000074 	movhi	r4,1
    3bd8:	2106f204 	addi	r4,r4,7112
    3bdc:	18c00044 	addi	r3,r3,1
    3be0:	10800044 	addi	r2,r2,1
    3be4:	41000015 	stw	r4,0(r8)
    3be8:	01000044 	movi	r4,1
    3bec:	41000115 	stw	r4,4(r8)
    3bf0:	d8c02015 	stw	r3,128(sp)
    3bf4:	d8801f15 	stw	r2,124(sp)
    3bf8:	010001c4 	movi	r4,7
    3bfc:	2082b816 	blt	r4,r2,46e0 <___vfprintf_internal_r+0x1948>
    3c00:	42000204 	addi	r8,r8,8
    3c04:	d8802617 	ldw	r2,152(sp)
    3c08:	d9403317 	ldw	r5,204(sp)
    3c0c:	11400216 	blt	r2,r5,3c18 <___vfprintf_internal_r+0xe80>
    3c10:	9080004c 	andi	r2,r18,1
    3c14:	103ed526 	beq	r2,zero,376c <__alt_data_end+0xff00376c>
    3c18:	d8803717 	ldw	r2,220(sp)
    3c1c:	d9003417 	ldw	r4,208(sp)
    3c20:	d9403717 	ldw	r5,220(sp)
    3c24:	1887883a 	add	r3,r3,r2
    3c28:	d8801f17 	ldw	r2,124(sp)
    3c2c:	41000015 	stw	r4,0(r8)
    3c30:	41400115 	stw	r5,4(r8)
    3c34:	10800044 	addi	r2,r2,1
    3c38:	d8c02015 	stw	r3,128(sp)
    3c3c:	d8801f15 	stw	r2,124(sp)
    3c40:	010001c4 	movi	r4,7
    3c44:	20832916 	blt	r4,r2,48ec <___vfprintf_internal_r+0x1b54>
    3c48:	42000204 	addi	r8,r8,8
    3c4c:	d8803317 	ldw	r2,204(sp)
    3c50:	143fffc4 	addi	r16,r2,-1
    3c54:	043ec50e 	bge	zero,r16,376c <__alt_data_end+0xff00376c>
    3c58:	04400404 	movi	r17,16
    3c5c:	d8801f17 	ldw	r2,124(sp)
    3c60:	8c00880e 	bge	r17,r16,3e84 <___vfprintf_internal_r+0x10ec>
    3c64:	01400074 	movhi	r5,1
    3c68:	2946f284 	addi	r5,r5,7114
    3c6c:	d9402b15 	stw	r5,172(sp)
    3c70:	058001c4 	movi	r22,7
    3c74:	dcc02c17 	ldw	r19,176(sp)
    3c78:	00000306 	br	3c88 <___vfprintf_internal_r+0xef0>
    3c7c:	42000204 	addi	r8,r8,8
    3c80:	843ffc04 	addi	r16,r16,-16
    3c84:	8c00820e 	bge	r17,r16,3e90 <___vfprintf_internal_r+0x10f8>
    3c88:	18c00404 	addi	r3,r3,16
    3c8c:	10800044 	addi	r2,r2,1
    3c90:	45000015 	stw	r20,0(r8)
    3c94:	44400115 	stw	r17,4(r8)
    3c98:	d8c02015 	stw	r3,128(sp)
    3c9c:	d8801f15 	stw	r2,124(sp)
    3ca0:	b0bff60e 	bge	r22,r2,3c7c <__alt_data_end+0xff003c7c>
    3ca4:	d9801e04 	addi	r6,sp,120
    3ca8:	b80b883a 	mov	r5,r23
    3cac:	9809883a 	mov	r4,r19
    3cb0:	0009b340 	call	9b34 <__sprint_r>
    3cb4:	103d3a1e 	bne	r2,zero,31a0 <__alt_data_end+0xff0031a0>
    3cb8:	d8c02017 	ldw	r3,128(sp)
    3cbc:	d8801f17 	ldw	r2,124(sp)
    3cc0:	da000404 	addi	r8,sp,16
    3cc4:	003fee06 	br	3c80 <__alt_data_end+0xff003c80>
    3cc8:	d9403117 	ldw	r5,196(sp)
    3ccc:	d8802a17 	ldw	r2,168(sp)
    3cd0:	28adc83a 	sub	r22,r5,r2
    3cd4:	05be630e 	bge	zero,r22,3664 <__alt_data_end+0xff003664>
    3cd8:	07000404 	movi	fp,16
    3cdc:	d8801f17 	ldw	r2,124(sp)
    3ce0:	e5838f0e 	bge	fp,r22,4b20 <___vfprintf_internal_r+0x1d88>
    3ce4:	01400074 	movhi	r5,1
    3ce8:	2946f284 	addi	r5,r5,7114
    3cec:	dc403015 	stw	r17,192(sp)
    3cf0:	d9402b15 	stw	r5,172(sp)
    3cf4:	b023883a 	mov	r17,r22
    3cf8:	04c001c4 	movi	r19,7
    3cfc:	a82d883a 	mov	r22,r21
    3d00:	902b883a 	mov	r21,r18
    3d04:	8025883a 	mov	r18,r16
    3d08:	dc002c17 	ldw	r16,176(sp)
    3d0c:	00000306 	br	3d1c <___vfprintf_internal_r+0xf84>
    3d10:	8c7ffc04 	addi	r17,r17,-16
    3d14:	42000204 	addi	r8,r8,8
    3d18:	e440110e 	bge	fp,r17,3d60 <___vfprintf_internal_r+0xfc8>
    3d1c:	18c00404 	addi	r3,r3,16
    3d20:	10800044 	addi	r2,r2,1
    3d24:	45000015 	stw	r20,0(r8)
    3d28:	47000115 	stw	fp,4(r8)
    3d2c:	d8c02015 	stw	r3,128(sp)
    3d30:	d8801f15 	stw	r2,124(sp)
    3d34:	98bff60e 	bge	r19,r2,3d10 <__alt_data_end+0xff003d10>
    3d38:	d9801e04 	addi	r6,sp,120
    3d3c:	b80b883a 	mov	r5,r23
    3d40:	8009883a 	mov	r4,r16
    3d44:	0009b340 	call	9b34 <__sprint_r>
    3d48:	103d151e 	bne	r2,zero,31a0 <__alt_data_end+0xff0031a0>
    3d4c:	8c7ffc04 	addi	r17,r17,-16
    3d50:	d8c02017 	ldw	r3,128(sp)
    3d54:	d8801f17 	ldw	r2,124(sp)
    3d58:	da000404 	addi	r8,sp,16
    3d5c:	e47fef16 	blt	fp,r17,3d1c <__alt_data_end+0xff003d1c>
    3d60:	9021883a 	mov	r16,r18
    3d64:	a825883a 	mov	r18,r21
    3d68:	b02b883a 	mov	r21,r22
    3d6c:	882d883a 	mov	r22,r17
    3d70:	dc403017 	ldw	r17,192(sp)
    3d74:	d9002b17 	ldw	r4,172(sp)
    3d78:	1d87883a 	add	r3,r3,r22
    3d7c:	10800044 	addi	r2,r2,1
    3d80:	41000015 	stw	r4,0(r8)
    3d84:	45800115 	stw	r22,4(r8)
    3d88:	d8c02015 	stw	r3,128(sp)
    3d8c:	d8801f15 	stw	r2,124(sp)
    3d90:	010001c4 	movi	r4,7
    3d94:	20818e16 	blt	r4,r2,43d0 <___vfprintf_internal_r+0x1638>
    3d98:	42000204 	addi	r8,r8,8
    3d9c:	003e3106 	br	3664 <__alt_data_end+0xff003664>
    3da0:	d9403317 	ldw	r5,204(sp)
    3da4:	00800044 	movi	r2,1
    3da8:	18c00044 	addi	r3,r3,1
    3dac:	1141530e 	bge	r2,r5,42fc <___vfprintf_internal_r+0x1564>
    3db0:	dc401f17 	ldw	r17,124(sp)
    3db4:	00800044 	movi	r2,1
    3db8:	40800115 	stw	r2,4(r8)
    3dbc:	8c400044 	addi	r17,r17,1
    3dc0:	44000015 	stw	r16,0(r8)
    3dc4:	d8c02015 	stw	r3,128(sp)
    3dc8:	dc401f15 	stw	r17,124(sp)
    3dcc:	008001c4 	movi	r2,7
    3dd0:	14416b16 	blt	r2,r17,4380 <___vfprintf_internal_r+0x15e8>
    3dd4:	42000204 	addi	r8,r8,8
    3dd8:	d8803717 	ldw	r2,220(sp)
    3ddc:	d9003417 	ldw	r4,208(sp)
    3de0:	8c400044 	addi	r17,r17,1
    3de4:	10c7883a 	add	r3,r2,r3
    3de8:	40800115 	stw	r2,4(r8)
    3dec:	41000015 	stw	r4,0(r8)
    3df0:	d8c02015 	stw	r3,128(sp)
    3df4:	dc401f15 	stw	r17,124(sp)
    3df8:	008001c4 	movi	r2,7
    3dfc:	14416916 	blt	r2,r17,43a4 <___vfprintf_internal_r+0x160c>
    3e00:	45800204 	addi	r22,r8,8
    3e04:	d9003617 	ldw	r4,216(sp)
    3e08:	d9403817 	ldw	r5,224(sp)
    3e0c:	000d883a 	mov	r6,zero
    3e10:	000f883a 	mov	r7,zero
    3e14:	d8c03c15 	stw	r3,240(sp)
    3e18:	000d7ac0 	call	d7ac <__eqdf2>
    3e1c:	d8c03c17 	ldw	r3,240(sp)
    3e20:	1000bc26 	beq	r2,zero,4114 <___vfprintf_internal_r+0x137c>
    3e24:	d9403317 	ldw	r5,204(sp)
    3e28:	84000044 	addi	r16,r16,1
    3e2c:	8c400044 	addi	r17,r17,1
    3e30:	28bfffc4 	addi	r2,r5,-1
    3e34:	1887883a 	add	r3,r3,r2
    3e38:	b0800115 	stw	r2,4(r22)
    3e3c:	b4000015 	stw	r16,0(r22)
    3e40:	d8c02015 	stw	r3,128(sp)
    3e44:	dc401f15 	stw	r17,124(sp)
    3e48:	008001c4 	movi	r2,7
    3e4c:	14414316 	blt	r2,r17,435c <___vfprintf_internal_r+0x15c4>
    3e50:	b5800204 	addi	r22,r22,8
    3e54:	d9003a17 	ldw	r4,232(sp)
    3e58:	df0022c4 	addi	fp,sp,139
    3e5c:	8c400044 	addi	r17,r17,1
    3e60:	20c7883a 	add	r3,r4,r3
    3e64:	b7000015 	stw	fp,0(r22)
    3e68:	b1000115 	stw	r4,4(r22)
    3e6c:	d8c02015 	stw	r3,128(sp)
    3e70:	dc401f15 	stw	r17,124(sp)
    3e74:	008001c4 	movi	r2,7
    3e78:	14400e16 	blt	r2,r17,3eb4 <___vfprintf_internal_r+0x111c>
    3e7c:	b2000204 	addi	r8,r22,8
    3e80:	003e3a06 	br	376c <__alt_data_end+0xff00376c>
    3e84:	01000074 	movhi	r4,1
    3e88:	2106f284 	addi	r4,r4,7114
    3e8c:	d9002b15 	stw	r4,172(sp)
    3e90:	d9002b17 	ldw	r4,172(sp)
    3e94:	1c07883a 	add	r3,r3,r16
    3e98:	44000115 	stw	r16,4(r8)
    3e9c:	41000015 	stw	r4,0(r8)
    3ea0:	10800044 	addi	r2,r2,1
    3ea4:	d8c02015 	stw	r3,128(sp)
    3ea8:	d8801f15 	stw	r2,124(sp)
    3eac:	010001c4 	movi	r4,7
    3eb0:	20be2d0e 	bge	r4,r2,3768 <__alt_data_end+0xff003768>
    3eb4:	d9002c17 	ldw	r4,176(sp)
    3eb8:	d9801e04 	addi	r6,sp,120
    3ebc:	b80b883a 	mov	r5,r23
    3ec0:	0009b340 	call	9b34 <__sprint_r>
    3ec4:	103cb61e 	bne	r2,zero,31a0 <__alt_data_end+0xff0031a0>
    3ec8:	d8c02017 	ldw	r3,128(sp)
    3ecc:	da000404 	addi	r8,sp,16
    3ed0:	003e2606 	br	376c <__alt_data_end+0xff00376c>
    3ed4:	d9002c17 	ldw	r4,176(sp)
    3ed8:	d9801e04 	addi	r6,sp,120
    3edc:	b80b883a 	mov	r5,r23
    3ee0:	0009b340 	call	9b34 <__sprint_r>
    3ee4:	103e5d26 	beq	r2,zero,385c <__alt_data_end+0xff00385c>
    3ee8:	003cad06 	br	31a0 <__alt_data_end+0xff0031a0>
    3eec:	d9002c17 	ldw	r4,176(sp)
    3ef0:	d9801e04 	addi	r6,sp,120
    3ef4:	b80b883a 	mov	r5,r23
    3ef8:	0009b340 	call	9b34 <__sprint_r>
    3efc:	103ca81e 	bne	r2,zero,31a0 <__alt_data_end+0xff0031a0>
    3f00:	d8c02017 	ldw	r3,128(sp)
    3f04:	da000404 	addi	r8,sp,16
    3f08:	003e0b06 	br	3738 <__alt_data_end+0xff003738>
    3f0c:	d9002c17 	ldw	r4,176(sp)
    3f10:	d9801e04 	addi	r6,sp,120
    3f14:	b80b883a 	mov	r5,r23
    3f18:	0009b340 	call	9b34 <__sprint_r>
    3f1c:	103ca01e 	bne	r2,zero,31a0 <__alt_data_end+0xff0031a0>
    3f20:	d8c02017 	ldw	r3,128(sp)
    3f24:	da000404 	addi	r8,sp,16
    3f28:	003dbd06 	br	3620 <__alt_data_end+0xff003620>
    3f2c:	d9002c17 	ldw	r4,176(sp)
    3f30:	d9801e04 	addi	r6,sp,120
    3f34:	b80b883a 	mov	r5,r23
    3f38:	0009b340 	call	9b34 <__sprint_r>
    3f3c:	103c981e 	bne	r2,zero,31a0 <__alt_data_end+0xff0031a0>
    3f40:	d8c02017 	ldw	r3,128(sp)
    3f44:	da000404 	addi	r8,sp,16
    3f48:	003dc306 	br	3658 <__alt_data_end+0xff003658>
    3f4c:	d8802917 	ldw	r2,164(sp)
    3f50:	d8002785 	stb	zero,158(sp)
    3f54:	103f0616 	blt	r2,zero,3b70 <__alt_data_end+0xff003b70>
    3f58:	00ffdfc4 	movi	r3,-129
    3f5c:	9d84b03a 	or	r2,r19,r22
    3f60:	90e4703a 	and	r18,r18,r3
    3f64:	103c6b26 	beq	r2,zero,3114 <__alt_data_end+0xff003114>
    3f68:	0039883a 	mov	fp,zero
    3f6c:	003e7406 	br	3940 <__alt_data_end+0xff003940>
    3f70:	9080040c 	andi	r2,r18,16
    3f74:	1001b326 	beq	r2,zero,4644 <___vfprintf_internal_r+0x18ac>
    3f78:	d9002d17 	ldw	r4,180(sp)
    3f7c:	d9402917 	ldw	r5,164(sp)
    3f80:	d8002785 	stb	zero,158(sp)
    3f84:	20800104 	addi	r2,r4,4
    3f88:	24c00017 	ldw	r19,0(r4)
    3f8c:	002d883a 	mov	r22,zero
    3f90:	2801b516 	blt	r5,zero,4668 <___vfprintf_internal_r+0x18d0>
    3f94:	00ffdfc4 	movi	r3,-129
    3f98:	d8802d15 	stw	r2,180(sp)
    3f9c:	90e4703a 	and	r18,r18,r3
    3fa0:	983d2726 	beq	r19,zero,3440 <__alt_data_end+0xff003440>
    3fa4:	0039883a 	mov	fp,zero
    3fa8:	003d2a06 	br	3454 <__alt_data_end+0xff003454>
    3fac:	dc402617 	ldw	r17,152(sp)
    3fb0:	0441d30e 	bge	zero,r17,4700 <___vfprintf_internal_r+0x1968>
    3fb4:	dc403217 	ldw	r17,200(sp)
    3fb8:	d8803317 	ldw	r2,204(sp)
    3fbc:	1440010e 	bge	r2,r17,3fc4 <___vfprintf_internal_r+0x122c>
    3fc0:	1023883a 	mov	r17,r2
    3fc4:	04400a0e 	bge	zero,r17,3ff0 <___vfprintf_internal_r+0x1258>
    3fc8:	d8801f17 	ldw	r2,124(sp)
    3fcc:	1c47883a 	add	r3,r3,r17
    3fd0:	44000015 	stw	r16,0(r8)
    3fd4:	10800044 	addi	r2,r2,1
    3fd8:	44400115 	stw	r17,4(r8)
    3fdc:	d8c02015 	stw	r3,128(sp)
    3fe0:	d8801f15 	stw	r2,124(sp)
    3fe4:	010001c4 	movi	r4,7
    3fe8:	20826516 	blt	r4,r2,4980 <___vfprintf_internal_r+0x1be8>
    3fec:	42000204 	addi	r8,r8,8
    3ff0:	88026116 	blt	r17,zero,4978 <___vfprintf_internal_r+0x1be0>
    3ff4:	d9003217 	ldw	r4,200(sp)
    3ff8:	2463c83a 	sub	r17,r4,r17
    3ffc:	04407b0e 	bge	zero,r17,41ec <___vfprintf_internal_r+0x1454>
    4000:	05800404 	movi	r22,16
    4004:	d8801f17 	ldw	r2,124(sp)
    4008:	b4419d0e 	bge	r22,r17,4680 <___vfprintf_internal_r+0x18e8>
    400c:	01000074 	movhi	r4,1
    4010:	2106f284 	addi	r4,r4,7114
    4014:	d9002b15 	stw	r4,172(sp)
    4018:	070001c4 	movi	fp,7
    401c:	dcc02c17 	ldw	r19,176(sp)
    4020:	00000306 	br	4030 <___vfprintf_internal_r+0x1298>
    4024:	42000204 	addi	r8,r8,8
    4028:	8c7ffc04 	addi	r17,r17,-16
    402c:	b441970e 	bge	r22,r17,468c <___vfprintf_internal_r+0x18f4>
    4030:	18c00404 	addi	r3,r3,16
    4034:	10800044 	addi	r2,r2,1
    4038:	45000015 	stw	r20,0(r8)
    403c:	45800115 	stw	r22,4(r8)
    4040:	d8c02015 	stw	r3,128(sp)
    4044:	d8801f15 	stw	r2,124(sp)
    4048:	e0bff60e 	bge	fp,r2,4024 <__alt_data_end+0xff004024>
    404c:	d9801e04 	addi	r6,sp,120
    4050:	b80b883a 	mov	r5,r23
    4054:	9809883a 	mov	r4,r19
    4058:	0009b340 	call	9b34 <__sprint_r>
    405c:	103c501e 	bne	r2,zero,31a0 <__alt_data_end+0xff0031a0>
    4060:	d8c02017 	ldw	r3,128(sp)
    4064:	d8801f17 	ldw	r2,124(sp)
    4068:	da000404 	addi	r8,sp,16
    406c:	003fee06 	br	4028 <__alt_data_end+0xff004028>
    4070:	d9002c17 	ldw	r4,176(sp)
    4074:	d9801e04 	addi	r6,sp,120
    4078:	b80b883a 	mov	r5,r23
    407c:	0009b340 	call	9b34 <__sprint_r>
    4080:	103c471e 	bne	r2,zero,31a0 <__alt_data_end+0xff0031a0>
    4084:	d8c02017 	ldw	r3,128(sp)
    4088:	df002787 	ldb	fp,158(sp)
    408c:	da000404 	addi	r8,sp,16
    4090:	003d5606 	br	35ec <__alt_data_end+0xff0035ec>
    4094:	9080040c 	andi	r2,r18,16
    4098:	10016126 	beq	r2,zero,4620 <___vfprintf_internal_r+0x1888>
    409c:	d8802d17 	ldw	r2,180(sp)
    40a0:	14c00017 	ldw	r19,0(r2)
    40a4:	10800104 	addi	r2,r2,4
    40a8:	d8802d15 	stw	r2,180(sp)
    40ac:	982dd7fa 	srai	r22,r19,31
    40b0:	b005883a 	mov	r2,r22
    40b4:	003c8206 	br	32c0 <__alt_data_end+0xff0032c0>
    40b8:	9080040c 	andi	r2,r18,16
    40bc:	10003526 	beq	r2,zero,4194 <___vfprintf_internal_r+0x13fc>
    40c0:	d9402d17 	ldw	r5,180(sp)
    40c4:	d8c02917 	ldw	r3,164(sp)
    40c8:	d8002785 	stb	zero,158(sp)
    40cc:	28800104 	addi	r2,r5,4
    40d0:	2cc00017 	ldw	r19,0(r5)
    40d4:	002d883a 	mov	r22,zero
    40d8:	18003716 	blt	r3,zero,41b8 <___vfprintf_internal_r+0x1420>
    40dc:	00ffdfc4 	movi	r3,-129
    40e0:	d8802d15 	stw	r2,180(sp)
    40e4:	90e4703a 	and	r18,r18,r3
    40e8:	0039883a 	mov	fp,zero
    40ec:	983df326 	beq	r19,zero,38bc <__alt_data_end+0xff0038bc>
    40f0:	00800244 	movi	r2,9
    40f4:	14fc7b36 	bltu	r2,r19,32e4 <__alt_data_end+0xff0032e4>
    40f8:	d8c02817 	ldw	r3,160(sp)
    40fc:	dc001dc4 	addi	r16,sp,119
    4100:	9cc00c04 	addi	r19,r19,48
    4104:	1c07c83a 	sub	r3,r3,r16
    4108:	dcc01dc5 	stb	r19,119(sp)
    410c:	d8c02e15 	stw	r3,184(sp)
    4110:	003ce806 	br	34b4 <__alt_data_end+0xff0034b4>
    4114:	d8803317 	ldw	r2,204(sp)
    4118:	143fffc4 	addi	r16,r2,-1
    411c:	043f4d0e 	bge	zero,r16,3e54 <__alt_data_end+0xff003e54>
    4120:	07000404 	movi	fp,16
    4124:	e400810e 	bge	fp,r16,432c <___vfprintf_internal_r+0x1594>
    4128:	01400074 	movhi	r5,1
    412c:	2946f284 	addi	r5,r5,7114
    4130:	d9402b15 	stw	r5,172(sp)
    4134:	01c001c4 	movi	r7,7
    4138:	dcc02c17 	ldw	r19,176(sp)
    413c:	00000306 	br	414c <___vfprintf_internal_r+0x13b4>
    4140:	b5800204 	addi	r22,r22,8
    4144:	843ffc04 	addi	r16,r16,-16
    4148:	e4007b0e 	bge	fp,r16,4338 <___vfprintf_internal_r+0x15a0>
    414c:	18c00404 	addi	r3,r3,16
    4150:	8c400044 	addi	r17,r17,1
    4154:	b5000015 	stw	r20,0(r22)
    4158:	b7000115 	stw	fp,4(r22)
    415c:	d8c02015 	stw	r3,128(sp)
    4160:	dc401f15 	stw	r17,124(sp)
    4164:	3c7ff60e 	bge	r7,r17,4140 <__alt_data_end+0xff004140>
    4168:	d9801e04 	addi	r6,sp,120
    416c:	b80b883a 	mov	r5,r23
    4170:	9809883a 	mov	r4,r19
    4174:	d9c03c15 	stw	r7,240(sp)
    4178:	0009b340 	call	9b34 <__sprint_r>
    417c:	d9c03c17 	ldw	r7,240(sp)
    4180:	103c071e 	bne	r2,zero,31a0 <__alt_data_end+0xff0031a0>
    4184:	d8c02017 	ldw	r3,128(sp)
    4188:	dc401f17 	ldw	r17,124(sp)
    418c:	dd800404 	addi	r22,sp,16
    4190:	003fec06 	br	4144 <__alt_data_end+0xff004144>
    4194:	9080100c 	andi	r2,r18,64
    4198:	d8002785 	stb	zero,158(sp)
    419c:	10010e26 	beq	r2,zero,45d8 <___vfprintf_internal_r+0x1840>
    41a0:	d9002d17 	ldw	r4,180(sp)
    41a4:	d9402917 	ldw	r5,164(sp)
    41a8:	002d883a 	mov	r22,zero
    41ac:	20800104 	addi	r2,r4,4
    41b0:	24c0000b 	ldhu	r19,0(r4)
    41b4:	283fc90e 	bge	r5,zero,40dc <__alt_data_end+0xff0040dc>
    41b8:	d8802d15 	stw	r2,180(sp)
    41bc:	0039883a 	mov	fp,zero
    41c0:	9d84b03a 	or	r2,r19,r22
    41c4:	103c461e 	bne	r2,zero,32e0 <__alt_data_end+0xff0032e0>
    41c8:	00800044 	movi	r2,1
    41cc:	003e6c06 	br	3b80 <__alt_data_end+0xff003b80>
    41d0:	d9002c17 	ldw	r4,176(sp)
    41d4:	d9801e04 	addi	r6,sp,120
    41d8:	b80b883a 	mov	r5,r23
    41dc:	0009b340 	call	9b34 <__sprint_r>
    41e0:	103bef1e 	bne	r2,zero,31a0 <__alt_data_end+0xff0031a0>
    41e4:	d8c02017 	ldw	r3,128(sp)
    41e8:	da000404 	addi	r8,sp,16
    41ec:	d9003217 	ldw	r4,200(sp)
    41f0:	d8802617 	ldw	r2,152(sp)
    41f4:	d9403317 	ldw	r5,204(sp)
    41f8:	8123883a 	add	r17,r16,r4
    41fc:	11400216 	blt	r2,r5,4208 <___vfprintf_internal_r+0x1470>
    4200:	9100004c 	andi	r4,r18,1
    4204:	20000d26 	beq	r4,zero,423c <___vfprintf_internal_r+0x14a4>
    4208:	d9003717 	ldw	r4,220(sp)
    420c:	d9403417 	ldw	r5,208(sp)
    4210:	1907883a 	add	r3,r3,r4
    4214:	d9001f17 	ldw	r4,124(sp)
    4218:	41400015 	stw	r5,0(r8)
    421c:	d9403717 	ldw	r5,220(sp)
    4220:	21000044 	addi	r4,r4,1
    4224:	d8c02015 	stw	r3,128(sp)
    4228:	41400115 	stw	r5,4(r8)
    422c:	d9001f15 	stw	r4,124(sp)
    4230:	014001c4 	movi	r5,7
    4234:	2901e816 	blt	r5,r4,49d8 <___vfprintf_internal_r+0x1c40>
    4238:	42000204 	addi	r8,r8,8
    423c:	d9003317 	ldw	r4,204(sp)
    4240:	8121883a 	add	r16,r16,r4
    4244:	2085c83a 	sub	r2,r4,r2
    4248:	8461c83a 	sub	r16,r16,r17
    424c:	1400010e 	bge	r2,r16,4254 <___vfprintf_internal_r+0x14bc>
    4250:	1021883a 	mov	r16,r2
    4254:	04000a0e 	bge	zero,r16,4280 <___vfprintf_internal_r+0x14e8>
    4258:	d9001f17 	ldw	r4,124(sp)
    425c:	1c07883a 	add	r3,r3,r16
    4260:	44400015 	stw	r17,0(r8)
    4264:	21000044 	addi	r4,r4,1
    4268:	44000115 	stw	r16,4(r8)
    426c:	d8c02015 	stw	r3,128(sp)
    4270:	d9001f15 	stw	r4,124(sp)
    4274:	014001c4 	movi	r5,7
    4278:	2901fb16 	blt	r5,r4,4a68 <___vfprintf_internal_r+0x1cd0>
    427c:	42000204 	addi	r8,r8,8
    4280:	8001f716 	blt	r16,zero,4a60 <___vfprintf_internal_r+0x1cc8>
    4284:	1421c83a 	sub	r16,r2,r16
    4288:	043d380e 	bge	zero,r16,376c <__alt_data_end+0xff00376c>
    428c:	04400404 	movi	r17,16
    4290:	d8801f17 	ldw	r2,124(sp)
    4294:	8c3efb0e 	bge	r17,r16,3e84 <__alt_data_end+0xff003e84>
    4298:	01400074 	movhi	r5,1
    429c:	2946f284 	addi	r5,r5,7114
    42a0:	d9402b15 	stw	r5,172(sp)
    42a4:	058001c4 	movi	r22,7
    42a8:	dcc02c17 	ldw	r19,176(sp)
    42ac:	00000306 	br	42bc <___vfprintf_internal_r+0x1524>
    42b0:	42000204 	addi	r8,r8,8
    42b4:	843ffc04 	addi	r16,r16,-16
    42b8:	8c3ef50e 	bge	r17,r16,3e90 <__alt_data_end+0xff003e90>
    42bc:	18c00404 	addi	r3,r3,16
    42c0:	10800044 	addi	r2,r2,1
    42c4:	45000015 	stw	r20,0(r8)
    42c8:	44400115 	stw	r17,4(r8)
    42cc:	d8c02015 	stw	r3,128(sp)
    42d0:	d8801f15 	stw	r2,124(sp)
    42d4:	b0bff60e 	bge	r22,r2,42b0 <__alt_data_end+0xff0042b0>
    42d8:	d9801e04 	addi	r6,sp,120
    42dc:	b80b883a 	mov	r5,r23
    42e0:	9809883a 	mov	r4,r19
    42e4:	0009b340 	call	9b34 <__sprint_r>
    42e8:	103bad1e 	bne	r2,zero,31a0 <__alt_data_end+0xff0031a0>
    42ec:	d8c02017 	ldw	r3,128(sp)
    42f0:	d8801f17 	ldw	r2,124(sp)
    42f4:	da000404 	addi	r8,sp,16
    42f8:	003fee06 	br	42b4 <__alt_data_end+0xff0042b4>
    42fc:	9088703a 	and	r4,r18,r2
    4300:	203eab1e 	bne	r4,zero,3db0 <__alt_data_end+0xff003db0>
    4304:	dc401f17 	ldw	r17,124(sp)
    4308:	40800115 	stw	r2,4(r8)
    430c:	44000015 	stw	r16,0(r8)
    4310:	8c400044 	addi	r17,r17,1
    4314:	d8c02015 	stw	r3,128(sp)
    4318:	dc401f15 	stw	r17,124(sp)
    431c:	008001c4 	movi	r2,7
    4320:	14400e16 	blt	r2,r17,435c <___vfprintf_internal_r+0x15c4>
    4324:	45800204 	addi	r22,r8,8
    4328:	003eca06 	br	3e54 <__alt_data_end+0xff003e54>
    432c:	01000074 	movhi	r4,1
    4330:	2106f284 	addi	r4,r4,7114
    4334:	d9002b15 	stw	r4,172(sp)
    4338:	d8802b17 	ldw	r2,172(sp)
    433c:	1c07883a 	add	r3,r3,r16
    4340:	8c400044 	addi	r17,r17,1
    4344:	b0800015 	stw	r2,0(r22)
    4348:	b4000115 	stw	r16,4(r22)
    434c:	d8c02015 	stw	r3,128(sp)
    4350:	dc401f15 	stw	r17,124(sp)
    4354:	008001c4 	movi	r2,7
    4358:	147ebd0e 	bge	r2,r17,3e50 <__alt_data_end+0xff003e50>
    435c:	d9002c17 	ldw	r4,176(sp)
    4360:	d9801e04 	addi	r6,sp,120
    4364:	b80b883a 	mov	r5,r23
    4368:	0009b340 	call	9b34 <__sprint_r>
    436c:	103b8c1e 	bne	r2,zero,31a0 <__alt_data_end+0xff0031a0>
    4370:	d8c02017 	ldw	r3,128(sp)
    4374:	dc401f17 	ldw	r17,124(sp)
    4378:	dd800404 	addi	r22,sp,16
    437c:	003eb506 	br	3e54 <__alt_data_end+0xff003e54>
    4380:	d9002c17 	ldw	r4,176(sp)
    4384:	d9801e04 	addi	r6,sp,120
    4388:	b80b883a 	mov	r5,r23
    438c:	0009b340 	call	9b34 <__sprint_r>
    4390:	103b831e 	bne	r2,zero,31a0 <__alt_data_end+0xff0031a0>
    4394:	d8c02017 	ldw	r3,128(sp)
    4398:	dc401f17 	ldw	r17,124(sp)
    439c:	da000404 	addi	r8,sp,16
    43a0:	003e8d06 	br	3dd8 <__alt_data_end+0xff003dd8>
    43a4:	d9002c17 	ldw	r4,176(sp)
    43a8:	d9801e04 	addi	r6,sp,120
    43ac:	b80b883a 	mov	r5,r23
    43b0:	0009b340 	call	9b34 <__sprint_r>
    43b4:	103b7a1e 	bne	r2,zero,31a0 <__alt_data_end+0xff0031a0>
    43b8:	d8c02017 	ldw	r3,128(sp)
    43bc:	dc401f17 	ldw	r17,124(sp)
    43c0:	dd800404 	addi	r22,sp,16
    43c4:	003e8f06 	br	3e04 <__alt_data_end+0xff003e04>
    43c8:	0027883a 	mov	r19,zero
    43cc:	003f4a06 	br	40f8 <__alt_data_end+0xff0040f8>
    43d0:	d9002c17 	ldw	r4,176(sp)
    43d4:	d9801e04 	addi	r6,sp,120
    43d8:	b80b883a 	mov	r5,r23
    43dc:	0009b340 	call	9b34 <__sprint_r>
    43e0:	103b6f1e 	bne	r2,zero,31a0 <__alt_data_end+0xff0031a0>
    43e4:	d8c02017 	ldw	r3,128(sp)
    43e8:	da000404 	addi	r8,sp,16
    43ec:	003c9d06 	br	3664 <__alt_data_end+0xff003664>
    43f0:	04e7c83a 	sub	r19,zero,r19
    43f4:	9804c03a 	cmpne	r2,r19,zero
    43f8:	05adc83a 	sub	r22,zero,r22
    43fc:	b0adc83a 	sub	r22,r22,r2
    4400:	d8802917 	ldw	r2,164(sp)
    4404:	07000b44 	movi	fp,45
    4408:	df002785 	stb	fp,158(sp)
    440c:	10017b16 	blt	r2,zero,49fc <___vfprintf_internal_r+0x1c64>
    4410:	00bfdfc4 	movi	r2,-129
    4414:	90a4703a 	and	r18,r18,r2
    4418:	003bb106 	br	32e0 <__alt_data_end+0xff0032e0>
    441c:	d9003617 	ldw	r4,216(sp)
    4420:	d9403817 	ldw	r5,224(sp)
    4424:	da003d15 	stw	r8,244(sp)
    4428:	00097ac0 	call	97ac <__fpclassifyd>
    442c:	da003d17 	ldw	r8,244(sp)
    4430:	1000f026 	beq	r2,zero,47f4 <___vfprintf_internal_r+0x1a5c>
    4434:	d9002917 	ldw	r4,164(sp)
    4438:	05bff7c4 	movi	r22,-33
    443c:	00bfffc4 	movi	r2,-1
    4440:	8dac703a 	and	r22,r17,r22
    4444:	20820026 	beq	r4,r2,4c48 <___vfprintf_internal_r+0x1eb0>
    4448:	008011c4 	movi	r2,71
    444c:	b081f726 	beq	r22,r2,4c2c <___vfprintf_internal_r+0x1e94>
    4450:	d9003817 	ldw	r4,224(sp)
    4454:	90c04014 	ori	r3,r18,256
    4458:	d8c02b15 	stw	r3,172(sp)
    445c:	20021516 	blt	r4,zero,4cb4 <___vfprintf_internal_r+0x1f1c>
    4460:	dcc03817 	ldw	r19,224(sp)
    4464:	d8002a05 	stb	zero,168(sp)
    4468:	00801984 	movi	r2,102
    446c:	8881f926 	beq	r17,r2,4c54 <___vfprintf_internal_r+0x1ebc>
    4470:	00801184 	movi	r2,70
    4474:	88821c26 	beq	r17,r2,4ce8 <___vfprintf_internal_r+0x1f50>
    4478:	00801144 	movi	r2,69
    447c:	b081ef26 	beq	r22,r2,4c3c <___vfprintf_internal_r+0x1ea4>
    4480:	d8c02917 	ldw	r3,164(sp)
    4484:	d8802104 	addi	r2,sp,132
    4488:	d8800315 	stw	r2,12(sp)
    448c:	d9403617 	ldw	r5,216(sp)
    4490:	d8802504 	addi	r2,sp,148
    4494:	d9002c17 	ldw	r4,176(sp)
    4498:	d8800215 	stw	r2,8(sp)
    449c:	d8802604 	addi	r2,sp,152
    44a0:	d8c00015 	stw	r3,0(sp)
    44a4:	d8800115 	stw	r2,4(sp)
    44a8:	01c00084 	movi	r7,2
    44ac:	980d883a 	mov	r6,r19
    44b0:	d8c03c15 	stw	r3,240(sp)
    44b4:	da003d15 	stw	r8,244(sp)
    44b8:	00053bc0 	call	53bc <_dtoa_r>
    44bc:	1021883a 	mov	r16,r2
    44c0:	008019c4 	movi	r2,103
    44c4:	d8c03c17 	ldw	r3,240(sp)
    44c8:	da003d17 	ldw	r8,244(sp)
    44cc:	88817126 	beq	r17,r2,4a94 <___vfprintf_internal_r+0x1cfc>
    44d0:	008011c4 	movi	r2,71
    44d4:	88829226 	beq	r17,r2,4f20 <___vfprintf_internal_r+0x2188>
    44d8:	80f9883a 	add	fp,r16,r3
    44dc:	d9003617 	ldw	r4,216(sp)
    44e0:	000d883a 	mov	r6,zero
    44e4:	000f883a 	mov	r7,zero
    44e8:	980b883a 	mov	r5,r19
    44ec:	da003d15 	stw	r8,244(sp)
    44f0:	000d7ac0 	call	d7ac <__eqdf2>
    44f4:	da003d17 	ldw	r8,244(sp)
    44f8:	10018d26 	beq	r2,zero,4b30 <___vfprintf_internal_r+0x1d98>
    44fc:	d8802117 	ldw	r2,132(sp)
    4500:	1700062e 	bgeu	r2,fp,451c <___vfprintf_internal_r+0x1784>
    4504:	01000c04 	movi	r4,48
    4508:	10c00044 	addi	r3,r2,1
    450c:	d8c02115 	stw	r3,132(sp)
    4510:	11000005 	stb	r4,0(r2)
    4514:	d8802117 	ldw	r2,132(sp)
    4518:	173ffb36 	bltu	r2,fp,4508 <__alt_data_end+0xff004508>
    451c:	1405c83a 	sub	r2,r2,r16
    4520:	d8803315 	stw	r2,204(sp)
    4524:	008011c4 	movi	r2,71
    4528:	b0817626 	beq	r22,r2,4b04 <___vfprintf_internal_r+0x1d6c>
    452c:	00801944 	movi	r2,101
    4530:	1442810e 	bge	r2,r17,4f38 <___vfprintf_internal_r+0x21a0>
    4534:	d8c02617 	ldw	r3,152(sp)
    4538:	00801984 	movi	r2,102
    453c:	d8c03215 	stw	r3,200(sp)
    4540:	8881fe26 	beq	r17,r2,4d3c <___vfprintf_internal_r+0x1fa4>
    4544:	d8c03217 	ldw	r3,200(sp)
    4548:	d9003317 	ldw	r4,204(sp)
    454c:	1901dd16 	blt	r3,r4,4cc4 <___vfprintf_internal_r+0x1f2c>
    4550:	9480004c 	andi	r18,r18,1
    4554:	90022b1e 	bne	r18,zero,4e04 <___vfprintf_internal_r+0x206c>
    4558:	1805883a 	mov	r2,r3
    455c:	18028016 	blt	r3,zero,4f60 <___vfprintf_internal_r+0x21c8>
    4560:	d8c03217 	ldw	r3,200(sp)
    4564:	044019c4 	movi	r17,103
    4568:	d8c02e15 	stw	r3,184(sp)
    456c:	df002a07 	ldb	fp,168(sp)
    4570:	e001531e 	bne	fp,zero,4ac0 <___vfprintf_internal_r+0x1d28>
    4574:	df002783 	ldbu	fp,158(sp)
    4578:	d8802a15 	stw	r2,168(sp)
    457c:	dc802b17 	ldw	r18,172(sp)
    4580:	d8002915 	stw	zero,164(sp)
    4584:	003bd106 	br	34cc <__alt_data_end+0xff0034cc>
    4588:	d8802d17 	ldw	r2,180(sp)
    458c:	d8c02d17 	ldw	r3,180(sp)
    4590:	d9002d17 	ldw	r4,180(sp)
    4594:	10800017 	ldw	r2,0(r2)
    4598:	18c00117 	ldw	r3,4(r3)
    459c:	21000204 	addi	r4,r4,8
    45a0:	d8803615 	stw	r2,216(sp)
    45a4:	d8c03815 	stw	r3,224(sp)
    45a8:	d9002d15 	stw	r4,180(sp)
    45ac:	003b7506 	br	3384 <__alt_data_end+0xff003384>
    45b0:	ac400007 	ldb	r17,0(r21)
    45b4:	003a5906 	br	2f1c <__alt_data_end+0xff002f1c>
    45b8:	9080100c 	andi	r2,r18,64
    45bc:	1000a826 	beq	r2,zero,4860 <___vfprintf_internal_r+0x1ac8>
    45c0:	d9002d17 	ldw	r4,180(sp)
    45c4:	002d883a 	mov	r22,zero
    45c8:	24c0000b 	ldhu	r19,0(r4)
    45cc:	21000104 	addi	r4,r4,4
    45d0:	d9002d15 	stw	r4,180(sp)
    45d4:	003ccb06 	br	3904 <__alt_data_end+0xff003904>
    45d8:	d8c02d17 	ldw	r3,180(sp)
    45dc:	d9002917 	ldw	r4,164(sp)
    45e0:	002d883a 	mov	r22,zero
    45e4:	18800104 	addi	r2,r3,4
    45e8:	1cc00017 	ldw	r19,0(r3)
    45ec:	203ebb0e 	bge	r4,zero,40dc <__alt_data_end+0xff0040dc>
    45f0:	003ef106 	br	41b8 <__alt_data_end+0xff0041b8>
    45f4:	9080040c 	andi	r2,r18,16
    45f8:	1000921e 	bne	r2,zero,4844 <___vfprintf_internal_r+0x1aac>
    45fc:	9480100c 	andi	r18,r18,64
    4600:	90013926 	beq	r18,zero,4ae8 <___vfprintf_internal_r+0x1d50>
    4604:	d9002d17 	ldw	r4,180(sp)
    4608:	d9402f17 	ldw	r5,188(sp)
    460c:	20800017 	ldw	r2,0(r4)
    4610:	21000104 	addi	r4,r4,4
    4614:	d9002d15 	stw	r4,180(sp)
    4618:	1140000d 	sth	r5,0(r2)
    461c:	003a1606 	br	2e78 <__alt_data_end+0xff002e78>
    4620:	9080100c 	andi	r2,r18,64
    4624:	10008026 	beq	r2,zero,4828 <___vfprintf_internal_r+0x1a90>
    4628:	d8c02d17 	ldw	r3,180(sp)
    462c:	1cc0000f 	ldh	r19,0(r3)
    4630:	18c00104 	addi	r3,r3,4
    4634:	d8c02d15 	stw	r3,180(sp)
    4638:	982dd7fa 	srai	r22,r19,31
    463c:	b005883a 	mov	r2,r22
    4640:	003b1f06 	br	32c0 <__alt_data_end+0xff0032c0>
    4644:	9080100c 	andi	r2,r18,64
    4648:	d8002785 	stb	zero,158(sp)
    464c:	10008a1e 	bne	r2,zero,4878 <___vfprintf_internal_r+0x1ae0>
    4650:	d9402d17 	ldw	r5,180(sp)
    4654:	d8c02917 	ldw	r3,164(sp)
    4658:	002d883a 	mov	r22,zero
    465c:	28800104 	addi	r2,r5,4
    4660:	2cc00017 	ldw	r19,0(r5)
    4664:	183e4b0e 	bge	r3,zero,3f94 <__alt_data_end+0xff003f94>
    4668:	9d86b03a 	or	r3,r19,r22
    466c:	d8802d15 	stw	r2,180(sp)
    4670:	183e4c1e 	bne	r3,zero,3fa4 <__alt_data_end+0xff003fa4>
    4674:	0039883a 	mov	fp,zero
    4678:	0005883a 	mov	r2,zero
    467c:	003d4006 	br	3b80 <__alt_data_end+0xff003b80>
    4680:	01400074 	movhi	r5,1
    4684:	2946f284 	addi	r5,r5,7114
    4688:	d9402b15 	stw	r5,172(sp)
    468c:	d9402b17 	ldw	r5,172(sp)
    4690:	1c47883a 	add	r3,r3,r17
    4694:	10800044 	addi	r2,r2,1
    4698:	41400015 	stw	r5,0(r8)
    469c:	44400115 	stw	r17,4(r8)
    46a0:	d8c02015 	stw	r3,128(sp)
    46a4:	d8801f15 	stw	r2,124(sp)
    46a8:	010001c4 	movi	r4,7
    46ac:	20bec816 	blt	r4,r2,41d0 <__alt_data_end+0xff0041d0>
    46b0:	42000204 	addi	r8,r8,8
    46b4:	003ecd06 	br	41ec <__alt_data_end+0xff0041ec>
    46b8:	d9002917 	ldw	r4,164(sp)
    46bc:	d8002785 	stb	zero,158(sp)
    46c0:	203d2d16 	blt	r4,zero,3b78 <__alt_data_end+0xff003b78>
    46c4:	00bfdfc4 	movi	r2,-129
    46c8:	90a4703a 	and	r18,r18,r2
    46cc:	003a9106 	br	3114 <__alt_data_end+0xff003114>
    46d0:	01000074 	movhi	r4,1
    46d4:	2106f284 	addi	r4,r4,7114
    46d8:	d9002b15 	stw	r4,172(sp)
    46dc:	003c0c06 	br	3710 <__alt_data_end+0xff003710>
    46e0:	d9002c17 	ldw	r4,176(sp)
    46e4:	d9801e04 	addi	r6,sp,120
    46e8:	b80b883a 	mov	r5,r23
    46ec:	0009b340 	call	9b34 <__sprint_r>
    46f0:	103aab1e 	bne	r2,zero,31a0 <__alt_data_end+0xff0031a0>
    46f4:	d8c02017 	ldw	r3,128(sp)
    46f8:	da000404 	addi	r8,sp,16
    46fc:	003d4106 	br	3c04 <__alt_data_end+0xff003c04>
    4700:	d8801f17 	ldw	r2,124(sp)
    4704:	01400074 	movhi	r5,1
    4708:	01000044 	movi	r4,1
    470c:	18c00044 	addi	r3,r3,1
    4710:	10800044 	addi	r2,r2,1
    4714:	2946f204 	addi	r5,r5,7112
    4718:	41000115 	stw	r4,4(r8)
    471c:	41400015 	stw	r5,0(r8)
    4720:	d8c02015 	stw	r3,128(sp)
    4724:	d8801f15 	stw	r2,124(sp)
    4728:	010001c4 	movi	r4,7
    472c:	20805c16 	blt	r4,r2,48a0 <___vfprintf_internal_r+0x1b08>
    4730:	42000204 	addi	r8,r8,8
    4734:	8800041e 	bne	r17,zero,4748 <___vfprintf_internal_r+0x19b0>
    4738:	d8803317 	ldw	r2,204(sp)
    473c:	1000021e 	bne	r2,zero,4748 <___vfprintf_internal_r+0x19b0>
    4740:	9080004c 	andi	r2,r18,1
    4744:	103c0926 	beq	r2,zero,376c <__alt_data_end+0xff00376c>
    4748:	d9003717 	ldw	r4,220(sp)
    474c:	d8801f17 	ldw	r2,124(sp)
    4750:	d9403417 	ldw	r5,208(sp)
    4754:	20c7883a 	add	r3,r4,r3
    4758:	10800044 	addi	r2,r2,1
    475c:	41000115 	stw	r4,4(r8)
    4760:	41400015 	stw	r5,0(r8)
    4764:	d8c02015 	stw	r3,128(sp)
    4768:	d8801f15 	stw	r2,124(sp)
    476c:	010001c4 	movi	r4,7
    4770:	20812116 	blt	r4,r2,4bf8 <___vfprintf_internal_r+0x1e60>
    4774:	42000204 	addi	r8,r8,8
    4778:	0463c83a 	sub	r17,zero,r17
    477c:	0440730e 	bge	zero,r17,494c <___vfprintf_internal_r+0x1bb4>
    4780:	05800404 	movi	r22,16
    4784:	b440860e 	bge	r22,r17,49a0 <___vfprintf_internal_r+0x1c08>
    4788:	01400074 	movhi	r5,1
    478c:	2946f284 	addi	r5,r5,7114
    4790:	d9402b15 	stw	r5,172(sp)
    4794:	070001c4 	movi	fp,7
    4798:	dcc02c17 	ldw	r19,176(sp)
    479c:	00000306 	br	47ac <___vfprintf_internal_r+0x1a14>
    47a0:	42000204 	addi	r8,r8,8
    47a4:	8c7ffc04 	addi	r17,r17,-16
    47a8:	b440800e 	bge	r22,r17,49ac <___vfprintf_internal_r+0x1c14>
    47ac:	18c00404 	addi	r3,r3,16
    47b0:	10800044 	addi	r2,r2,1
    47b4:	45000015 	stw	r20,0(r8)
    47b8:	45800115 	stw	r22,4(r8)
    47bc:	d8c02015 	stw	r3,128(sp)
    47c0:	d8801f15 	stw	r2,124(sp)
    47c4:	e0bff60e 	bge	fp,r2,47a0 <__alt_data_end+0xff0047a0>
    47c8:	d9801e04 	addi	r6,sp,120
    47cc:	b80b883a 	mov	r5,r23
    47d0:	9809883a 	mov	r4,r19
    47d4:	0009b340 	call	9b34 <__sprint_r>
    47d8:	103a711e 	bne	r2,zero,31a0 <__alt_data_end+0xff0031a0>
    47dc:	d8c02017 	ldw	r3,128(sp)
    47e0:	d8801f17 	ldw	r2,124(sp)
    47e4:	da000404 	addi	r8,sp,16
    47e8:	003fee06 	br	47a4 <__alt_data_end+0xff0047a4>
    47ec:	00bfffc4 	movi	r2,-1
    47f0:	003a6f06 	br	31b0 <__alt_data_end+0xff0031b0>
    47f4:	008011c4 	movi	r2,71
    47f8:	1440b816 	blt	r2,r17,4adc <___vfprintf_internal_r+0x1d44>
    47fc:	04000074 	movhi	r16,1
    4800:	8406e404 	addi	r16,r16,7056
    4804:	00c000c4 	movi	r3,3
    4808:	00bfdfc4 	movi	r2,-129
    480c:	d8c02a15 	stw	r3,168(sp)
    4810:	90a4703a 	and	r18,r18,r2
    4814:	df002783 	ldbu	fp,158(sp)
    4818:	d8c02e15 	stw	r3,184(sp)
    481c:	d8002915 	stw	zero,164(sp)
    4820:	d8003215 	stw	zero,200(sp)
    4824:	003b2906 	br	34cc <__alt_data_end+0xff0034cc>
    4828:	d9002d17 	ldw	r4,180(sp)
    482c:	24c00017 	ldw	r19,0(r4)
    4830:	21000104 	addi	r4,r4,4
    4834:	d9002d15 	stw	r4,180(sp)
    4838:	982dd7fa 	srai	r22,r19,31
    483c:	b005883a 	mov	r2,r22
    4840:	003a9f06 	br	32c0 <__alt_data_end+0xff0032c0>
    4844:	d9402d17 	ldw	r5,180(sp)
    4848:	d8c02f17 	ldw	r3,188(sp)
    484c:	28800017 	ldw	r2,0(r5)
    4850:	29400104 	addi	r5,r5,4
    4854:	d9402d15 	stw	r5,180(sp)
    4858:	10c00015 	stw	r3,0(r2)
    485c:	00398606 	br	2e78 <__alt_data_end+0xff002e78>
    4860:	d9402d17 	ldw	r5,180(sp)
    4864:	002d883a 	mov	r22,zero
    4868:	2cc00017 	ldw	r19,0(r5)
    486c:	29400104 	addi	r5,r5,4
    4870:	d9402d15 	stw	r5,180(sp)
    4874:	003c2306 	br	3904 <__alt_data_end+0xff003904>
    4878:	d8c02d17 	ldw	r3,180(sp)
    487c:	d9002917 	ldw	r4,164(sp)
    4880:	002d883a 	mov	r22,zero
    4884:	18800104 	addi	r2,r3,4
    4888:	1cc0000b 	ldhu	r19,0(r3)
    488c:	203dc10e 	bge	r4,zero,3f94 <__alt_data_end+0xff003f94>
    4890:	003f7506 	br	4668 <__alt_data_end+0xff004668>
    4894:	04000074 	movhi	r16,1
    4898:	8406e204 	addi	r16,r16,7048
    489c:	003acc06 	br	33d0 <__alt_data_end+0xff0033d0>
    48a0:	d9002c17 	ldw	r4,176(sp)
    48a4:	d9801e04 	addi	r6,sp,120
    48a8:	b80b883a 	mov	r5,r23
    48ac:	0009b340 	call	9b34 <__sprint_r>
    48b0:	103a3b1e 	bne	r2,zero,31a0 <__alt_data_end+0xff0031a0>
    48b4:	dc402617 	ldw	r17,152(sp)
    48b8:	d8c02017 	ldw	r3,128(sp)
    48bc:	da000404 	addi	r8,sp,16
    48c0:	003f9c06 	br	4734 <__alt_data_end+0xff004734>
    48c4:	ac400043 	ldbu	r17,1(r21)
    48c8:	94800814 	ori	r18,r18,32
    48cc:	ad400044 	addi	r21,r21,1
    48d0:	8c403fcc 	andi	r17,r17,255
    48d4:	8c40201c 	xori	r17,r17,128
    48d8:	8c7fe004 	addi	r17,r17,-128
    48dc:	00398f06 	br	2f1c <__alt_data_end+0xff002f1c>
    48e0:	d8c02d15 	stw	r3,180(sp)
    48e4:	0039883a 	mov	fp,zero
    48e8:	003e3506 	br	41c0 <__alt_data_end+0xff0041c0>
    48ec:	d9002c17 	ldw	r4,176(sp)
    48f0:	d9801e04 	addi	r6,sp,120
    48f4:	b80b883a 	mov	r5,r23
    48f8:	0009b340 	call	9b34 <__sprint_r>
    48fc:	103a281e 	bne	r2,zero,31a0 <__alt_data_end+0xff0031a0>
    4900:	d8c02017 	ldw	r3,128(sp)
    4904:	da000404 	addi	r8,sp,16
    4908:	003cd006 	br	3c4c <__alt_data_end+0xff003c4c>
    490c:	8009883a 	mov	r4,r16
    4910:	da003d15 	stw	r8,244(sp)
    4914:	0002d000 	call	2d00 <strlen>
    4918:	d8802e15 	stw	r2,184(sp)
    491c:	da003d17 	ldw	r8,244(sp)
    4920:	103c340e 	bge	r2,zero,39f4 <__alt_data_end+0xff0039f4>
    4924:	0005883a 	mov	r2,zero
    4928:	003c3206 	br	39f4 <__alt_data_end+0xff0039f4>
    492c:	d9002c17 	ldw	r4,176(sp)
    4930:	d9801e04 	addi	r6,sp,120
    4934:	b80b883a 	mov	r5,r23
    4938:	0009b340 	call	9b34 <__sprint_r>
    493c:	103a181e 	bne	r2,zero,31a0 <__alt_data_end+0xff0031a0>
    4940:	d8c02017 	ldw	r3,128(sp)
    4944:	d8801f17 	ldw	r2,124(sp)
    4948:	da000404 	addi	r8,sp,16
    494c:	d9403317 	ldw	r5,204(sp)
    4950:	10800044 	addi	r2,r2,1
    4954:	44000015 	stw	r16,0(r8)
    4958:	28c7883a 	add	r3,r5,r3
    495c:	003b7d06 	br	3754 <__alt_data_end+0xff003754>
    4960:	01000074 	movhi	r4,1
    4964:	2106f684 	addi	r4,r4,7130
    4968:	d9003515 	stw	r4,212(sp)
    496c:	003b1406 	br	35c0 <__alt_data_end+0xff0035c0>
    4970:	013fffc4 	movi	r4,-1
    4974:	003a3506 	br	324c <__alt_data_end+0xff00324c>
    4978:	0023883a 	mov	r17,zero
    497c:	003d9d06 	br	3ff4 <__alt_data_end+0xff003ff4>
    4980:	d9002c17 	ldw	r4,176(sp)
    4984:	d9801e04 	addi	r6,sp,120
    4988:	b80b883a 	mov	r5,r23
    498c:	0009b340 	call	9b34 <__sprint_r>
    4990:	103a031e 	bne	r2,zero,31a0 <__alt_data_end+0xff0031a0>
    4994:	d8c02017 	ldw	r3,128(sp)
    4998:	da000404 	addi	r8,sp,16
    499c:	003d9406 	br	3ff0 <__alt_data_end+0xff003ff0>
    49a0:	01000074 	movhi	r4,1
    49a4:	2106f284 	addi	r4,r4,7114
    49a8:	d9002b15 	stw	r4,172(sp)
    49ac:	d9002b17 	ldw	r4,172(sp)
    49b0:	1c47883a 	add	r3,r3,r17
    49b4:	10800044 	addi	r2,r2,1
    49b8:	41000015 	stw	r4,0(r8)
    49bc:	44400115 	stw	r17,4(r8)
    49c0:	d8c02015 	stw	r3,128(sp)
    49c4:	d8801f15 	stw	r2,124(sp)
    49c8:	010001c4 	movi	r4,7
    49cc:	20bfd716 	blt	r4,r2,492c <__alt_data_end+0xff00492c>
    49d0:	42000204 	addi	r8,r8,8
    49d4:	003fdd06 	br	494c <__alt_data_end+0xff00494c>
    49d8:	d9002c17 	ldw	r4,176(sp)
    49dc:	d9801e04 	addi	r6,sp,120
    49e0:	b80b883a 	mov	r5,r23
    49e4:	0009b340 	call	9b34 <__sprint_r>
    49e8:	1039ed1e 	bne	r2,zero,31a0 <__alt_data_end+0xff0031a0>
    49ec:	d8802617 	ldw	r2,152(sp)
    49f0:	d8c02017 	ldw	r3,128(sp)
    49f4:	da000404 	addi	r8,sp,16
    49f8:	003e1006 	br	423c <__alt_data_end+0xff00423c>
    49fc:	00800044 	movi	r2,1
    4a00:	10803fcc 	andi	r2,r2,255
    4a04:	00c00044 	movi	r3,1
    4a08:	10fa3526 	beq	r2,r3,32e0 <__alt_data_end+0xff0032e0>
    4a0c:	00c00084 	movi	r3,2
    4a10:	10fbcb26 	beq	r2,r3,3940 <__alt_data_end+0xff003940>
    4a14:	003a8f06 	br	3454 <__alt_data_end+0xff003454>
    4a18:	01000074 	movhi	r4,1
    4a1c:	2106f684 	addi	r4,r4,7130
    4a20:	d9003515 	stw	r4,212(sp)
    4a24:	003b7606 	br	3800 <__alt_data_end+0xff003800>
    4a28:	d8802917 	ldw	r2,164(sp)
    4a2c:	00c00184 	movi	r3,6
    4a30:	1880012e 	bgeu	r3,r2,4a38 <___vfprintf_internal_r+0x1ca0>
    4a34:	1805883a 	mov	r2,r3
    4a38:	d8802e15 	stw	r2,184(sp)
    4a3c:	1000ef16 	blt	r2,zero,4dfc <___vfprintf_internal_r+0x2064>
    4a40:	04000074 	movhi	r16,1
    4a44:	d8802a15 	stw	r2,168(sp)
    4a48:	dcc02d15 	stw	r19,180(sp)
    4a4c:	d8002915 	stw	zero,164(sp)
    4a50:	d8003215 	stw	zero,200(sp)
    4a54:	8406f004 	addi	r16,r16,7104
    4a58:	0039883a 	mov	fp,zero
    4a5c:	003aa206 	br	34e8 <__alt_data_end+0xff0034e8>
    4a60:	0021883a 	mov	r16,zero
    4a64:	003e0706 	br	4284 <__alt_data_end+0xff004284>
    4a68:	d9002c17 	ldw	r4,176(sp)
    4a6c:	d9801e04 	addi	r6,sp,120
    4a70:	b80b883a 	mov	r5,r23
    4a74:	0009b340 	call	9b34 <__sprint_r>
    4a78:	1039c91e 	bne	r2,zero,31a0 <__alt_data_end+0xff0031a0>
    4a7c:	d8802617 	ldw	r2,152(sp)
    4a80:	d9403317 	ldw	r5,204(sp)
    4a84:	d8c02017 	ldw	r3,128(sp)
    4a88:	da000404 	addi	r8,sp,16
    4a8c:	2885c83a 	sub	r2,r5,r2
    4a90:	003dfb06 	br	4280 <__alt_data_end+0xff004280>
    4a94:	9080004c 	andi	r2,r18,1
    4a98:	103e8f1e 	bne	r2,zero,44d8 <__alt_data_end+0xff0044d8>
    4a9c:	d8802117 	ldw	r2,132(sp)
    4aa0:	003e9e06 	br	451c <__alt_data_end+0xff00451c>
    4aa4:	1025883a 	mov	r18,r2
    4aa8:	0039883a 	mov	fp,zero
    4aac:	00800084 	movi	r2,2
    4ab0:	003fd306 	br	4a00 <__alt_data_end+0xff004a00>
    4ab4:	07000b44 	movi	fp,45
    4ab8:	df002785 	stb	fp,158(sp)
    4abc:	003a4006 	br	33c0 <__alt_data_end+0xff0033c0>
    4ac0:	00c00b44 	movi	r3,45
    4ac4:	d8c02785 	stb	r3,158(sp)
    4ac8:	d8802a15 	stw	r2,168(sp)
    4acc:	dc802b17 	ldw	r18,172(sp)
    4ad0:	d8002915 	stw	zero,164(sp)
    4ad4:	07000b44 	movi	fp,45
    4ad8:	003a8006 	br	34dc <__alt_data_end+0xff0034dc>
    4adc:	04000074 	movhi	r16,1
    4ae0:	8406e504 	addi	r16,r16,7060
    4ae4:	003f4706 	br	4804 <__alt_data_end+0xff004804>
    4ae8:	d8c02d17 	ldw	r3,180(sp)
    4aec:	d9002f17 	ldw	r4,188(sp)
    4af0:	18800017 	ldw	r2,0(r3)
    4af4:	18c00104 	addi	r3,r3,4
    4af8:	d8c02d15 	stw	r3,180(sp)
    4afc:	11000015 	stw	r4,0(r2)
    4b00:	0038dd06 	br	2e78 <__alt_data_end+0xff002e78>
    4b04:	dd802617 	ldw	r22,152(sp)
    4b08:	00bfff44 	movi	r2,-3
    4b0c:	b0801c16 	blt	r22,r2,4b80 <___vfprintf_internal_r+0x1de8>
    4b10:	d9402917 	ldw	r5,164(sp)
    4b14:	2d801a16 	blt	r5,r22,4b80 <___vfprintf_internal_r+0x1de8>
    4b18:	dd803215 	stw	r22,200(sp)
    4b1c:	003e8906 	br	4544 <__alt_data_end+0xff004544>
    4b20:	01000074 	movhi	r4,1
    4b24:	2106f284 	addi	r4,r4,7114
    4b28:	d9002b15 	stw	r4,172(sp)
    4b2c:	003c9106 	br	3d74 <__alt_data_end+0xff003d74>
    4b30:	e005883a 	mov	r2,fp
    4b34:	003e7906 	br	451c <__alt_data_end+0xff00451c>
    4b38:	d9402917 	ldw	r5,164(sp)
    4b3c:	df002783 	ldbu	fp,158(sp)
    4b40:	dcc02d15 	stw	r19,180(sp)
    4b44:	d9402a15 	stw	r5,168(sp)
    4b48:	d9402e15 	stw	r5,184(sp)
    4b4c:	d8002915 	stw	zero,164(sp)
    4b50:	d8003215 	stw	zero,200(sp)
    4b54:	003a5d06 	br	34cc <__alt_data_end+0xff0034cc>
    4b58:	9080004c 	andi	r2,r18,1
    4b5c:	0039883a 	mov	fp,zero
    4b60:	10000426 	beq	r2,zero,4b74 <___vfprintf_internal_r+0x1ddc>
    4b64:	00800c04 	movi	r2,48
    4b68:	dc001dc4 	addi	r16,sp,119
    4b6c:	d8801dc5 	stb	r2,119(sp)
    4b70:	003b8006 	br	3974 <__alt_data_end+0xff003974>
    4b74:	d8002e15 	stw	zero,184(sp)
    4b78:	dc001e04 	addi	r16,sp,120
    4b7c:	003a4d06 	br	34b4 <__alt_data_end+0xff0034b4>
    4b80:	8c7fff84 	addi	r17,r17,-2
    4b84:	b5bfffc4 	addi	r22,r22,-1
    4b88:	dd802615 	stw	r22,152(sp)
    4b8c:	dc4022c5 	stb	r17,139(sp)
    4b90:	b000bf16 	blt	r22,zero,4e90 <___vfprintf_internal_r+0x20f8>
    4b94:	00800ac4 	movi	r2,43
    4b98:	d8802305 	stb	r2,140(sp)
    4b9c:	00800244 	movi	r2,9
    4ba0:	15807016 	blt	r2,r22,4d64 <___vfprintf_internal_r+0x1fcc>
    4ba4:	00800c04 	movi	r2,48
    4ba8:	b5800c04 	addi	r22,r22,48
    4bac:	d8802345 	stb	r2,141(sp)
    4bb0:	dd802385 	stb	r22,142(sp)
    4bb4:	d88023c4 	addi	r2,sp,143
    4bb8:	df0022c4 	addi	fp,sp,139
    4bbc:	d8c03317 	ldw	r3,204(sp)
    4bc0:	1739c83a 	sub	fp,r2,fp
    4bc4:	d9003317 	ldw	r4,204(sp)
    4bc8:	e0c7883a 	add	r3,fp,r3
    4bcc:	df003a15 	stw	fp,232(sp)
    4bd0:	d8c02e15 	stw	r3,184(sp)
    4bd4:	00800044 	movi	r2,1
    4bd8:	1100b30e 	bge	r2,r4,4ea8 <___vfprintf_internal_r+0x2110>
    4bdc:	d8c02e17 	ldw	r3,184(sp)
    4be0:	18c00044 	addi	r3,r3,1
    4be4:	d8c02e15 	stw	r3,184(sp)
    4be8:	1805883a 	mov	r2,r3
    4bec:	1800ac16 	blt	r3,zero,4ea0 <___vfprintf_internal_r+0x2108>
    4bf0:	d8003215 	stw	zero,200(sp)
    4bf4:	003e5d06 	br	456c <__alt_data_end+0xff00456c>
    4bf8:	d9002c17 	ldw	r4,176(sp)
    4bfc:	d9801e04 	addi	r6,sp,120
    4c00:	b80b883a 	mov	r5,r23
    4c04:	0009b340 	call	9b34 <__sprint_r>
    4c08:	1039651e 	bne	r2,zero,31a0 <__alt_data_end+0xff0031a0>
    4c0c:	dc402617 	ldw	r17,152(sp)
    4c10:	d8c02017 	ldw	r3,128(sp)
    4c14:	d8801f17 	ldw	r2,124(sp)
    4c18:	da000404 	addi	r8,sp,16
    4c1c:	003ed606 	br	4778 <__alt_data_end+0xff004778>
    4c20:	582b883a 	mov	r21,r11
    4c24:	d8002915 	stw	zero,164(sp)
    4c28:	0038bd06 	br	2f20 <__alt_data_end+0xff002f20>
    4c2c:	d8802917 	ldw	r2,164(sp)
    4c30:	103e071e 	bne	r2,zero,4450 <__alt_data_end+0xff004450>
    4c34:	dc002915 	stw	r16,164(sp)
    4c38:	003e0506 	br	4450 <__alt_data_end+0xff004450>
    4c3c:	d9002917 	ldw	r4,164(sp)
    4c40:	20c00044 	addi	r3,r4,1
    4c44:	003e0f06 	br	4484 <__alt_data_end+0xff004484>
    4c48:	01400184 	movi	r5,6
    4c4c:	d9402915 	stw	r5,164(sp)
    4c50:	003dff06 	br	4450 <__alt_data_end+0xff004450>
    4c54:	d8802104 	addi	r2,sp,132
    4c58:	d8800315 	stw	r2,12(sp)
    4c5c:	d8802504 	addi	r2,sp,148
    4c60:	d8800215 	stw	r2,8(sp)
    4c64:	d8802604 	addi	r2,sp,152
    4c68:	d8800115 	stw	r2,4(sp)
    4c6c:	d8802917 	ldw	r2,164(sp)
    4c70:	d9403617 	ldw	r5,216(sp)
    4c74:	d9002c17 	ldw	r4,176(sp)
    4c78:	d8800015 	stw	r2,0(sp)
    4c7c:	01c000c4 	movi	r7,3
    4c80:	980d883a 	mov	r6,r19
    4c84:	da003d15 	stw	r8,244(sp)
    4c88:	00053bc0 	call	53bc <_dtoa_r>
    4c8c:	d8c02917 	ldw	r3,164(sp)
    4c90:	da003d17 	ldw	r8,244(sp)
    4c94:	1021883a 	mov	r16,r2
    4c98:	10f9883a 	add	fp,r2,r3
    4c9c:	81000007 	ldb	r4,0(r16)
    4ca0:	00800c04 	movi	r2,48
    4ca4:	20805e26 	beq	r4,r2,4e20 <___vfprintf_internal_r+0x2088>
    4ca8:	d8c02617 	ldw	r3,152(sp)
    4cac:	e0f9883a 	add	fp,fp,r3
    4cb0:	003e0a06 	br	44dc <__alt_data_end+0xff0044dc>
    4cb4:	00c00b44 	movi	r3,45
    4cb8:	24e0003c 	xorhi	r19,r4,32768
    4cbc:	d8c02a05 	stb	r3,168(sp)
    4cc0:	003de906 	br	4468 <__alt_data_end+0xff004468>
    4cc4:	d8c03217 	ldw	r3,200(sp)
    4cc8:	00c07a0e 	bge	zero,r3,4eb4 <___vfprintf_internal_r+0x211c>
    4ccc:	00800044 	movi	r2,1
    4cd0:	d9003317 	ldw	r4,204(sp)
    4cd4:	1105883a 	add	r2,r2,r4
    4cd8:	d8802e15 	stw	r2,184(sp)
    4cdc:	10004e16 	blt	r2,zero,4e18 <___vfprintf_internal_r+0x2080>
    4ce0:	044019c4 	movi	r17,103
    4ce4:	003e2106 	br	456c <__alt_data_end+0xff00456c>
    4ce8:	d9002917 	ldw	r4,164(sp)
    4cec:	d8802104 	addi	r2,sp,132
    4cf0:	d8800315 	stw	r2,12(sp)
    4cf4:	d9000015 	stw	r4,0(sp)
    4cf8:	d8802504 	addi	r2,sp,148
    4cfc:	d9403617 	ldw	r5,216(sp)
    4d00:	d9002c17 	ldw	r4,176(sp)
    4d04:	d8800215 	stw	r2,8(sp)
    4d08:	d8802604 	addi	r2,sp,152
    4d0c:	d8800115 	stw	r2,4(sp)
    4d10:	01c000c4 	movi	r7,3
    4d14:	980d883a 	mov	r6,r19
    4d18:	da003d15 	stw	r8,244(sp)
    4d1c:	00053bc0 	call	53bc <_dtoa_r>
    4d20:	d8c02917 	ldw	r3,164(sp)
    4d24:	da003d17 	ldw	r8,244(sp)
    4d28:	1021883a 	mov	r16,r2
    4d2c:	00801184 	movi	r2,70
    4d30:	80f9883a 	add	fp,r16,r3
    4d34:	88bfd926 	beq	r17,r2,4c9c <__alt_data_end+0xff004c9c>
    4d38:	003de806 	br	44dc <__alt_data_end+0xff0044dc>
    4d3c:	d9002917 	ldw	r4,164(sp)
    4d40:	00c04d0e 	bge	zero,r3,4e78 <___vfprintf_internal_r+0x20e0>
    4d44:	2000441e 	bne	r4,zero,4e58 <___vfprintf_internal_r+0x20c0>
    4d48:	9480004c 	andi	r18,r18,1
    4d4c:	9000421e 	bne	r18,zero,4e58 <___vfprintf_internal_r+0x20c0>
    4d50:	1805883a 	mov	r2,r3
    4d54:	18007016 	blt	r3,zero,4f18 <___vfprintf_internal_r+0x2180>
    4d58:	d8c03217 	ldw	r3,200(sp)
    4d5c:	d8c02e15 	stw	r3,184(sp)
    4d60:	003e0206 	br	456c <__alt_data_end+0xff00456c>
    4d64:	df0022c4 	addi	fp,sp,139
    4d68:	dc002915 	stw	r16,164(sp)
    4d6c:	4027883a 	mov	r19,r8
    4d70:	e021883a 	mov	r16,fp
    4d74:	b009883a 	mov	r4,r22
    4d78:	01400284 	movi	r5,10
    4d7c:	000c4e80 	call	c4e8 <__modsi3>
    4d80:	10800c04 	addi	r2,r2,48
    4d84:	843fffc4 	addi	r16,r16,-1
    4d88:	b009883a 	mov	r4,r22
    4d8c:	01400284 	movi	r5,10
    4d90:	80800005 	stb	r2,0(r16)
    4d94:	000c4640 	call	c464 <__divsi3>
    4d98:	102d883a 	mov	r22,r2
    4d9c:	00800244 	movi	r2,9
    4da0:	15bff416 	blt	r2,r22,4d74 <__alt_data_end+0xff004d74>
    4da4:	9811883a 	mov	r8,r19
    4da8:	b0800c04 	addi	r2,r22,48
    4dac:	8027883a 	mov	r19,r16
    4db0:	997fffc4 	addi	r5,r19,-1
    4db4:	98bfffc5 	stb	r2,-1(r19)
    4db8:	dc002917 	ldw	r16,164(sp)
    4dbc:	2f006a2e 	bgeu	r5,fp,4f68 <___vfprintf_internal_r+0x21d0>
    4dc0:	d9c02384 	addi	r7,sp,142
    4dc4:	3ccfc83a 	sub	r7,r7,r19
    4dc8:	d9002344 	addi	r4,sp,141
    4dcc:	e1cf883a 	add	r7,fp,r7
    4dd0:	00000106 	br	4dd8 <___vfprintf_internal_r+0x2040>
    4dd4:	28800003 	ldbu	r2,0(r5)
    4dd8:	20800005 	stb	r2,0(r4)
    4ddc:	21000044 	addi	r4,r4,1
    4de0:	29400044 	addi	r5,r5,1
    4de4:	393ffb1e 	bne	r7,r4,4dd4 <__alt_data_end+0xff004dd4>
    4de8:	d8802304 	addi	r2,sp,140
    4dec:	14c5c83a 	sub	r2,r2,r19
    4df0:	d8c02344 	addi	r3,sp,141
    4df4:	1885883a 	add	r2,r3,r2
    4df8:	003f7006 	br	4bbc <__alt_data_end+0xff004bbc>
    4dfc:	0005883a 	mov	r2,zero
    4e00:	003f0f06 	br	4a40 <__alt_data_end+0xff004a40>
    4e04:	d8c03217 	ldw	r3,200(sp)
    4e08:	18c00044 	addi	r3,r3,1
    4e0c:	d8c02e15 	stw	r3,184(sp)
    4e10:	1805883a 	mov	r2,r3
    4e14:	183fb20e 	bge	r3,zero,4ce0 <__alt_data_end+0xff004ce0>
    4e18:	0005883a 	mov	r2,zero
    4e1c:	003fb006 	br	4ce0 <__alt_data_end+0xff004ce0>
    4e20:	d9003617 	ldw	r4,216(sp)
    4e24:	000d883a 	mov	r6,zero
    4e28:	000f883a 	mov	r7,zero
    4e2c:	980b883a 	mov	r5,r19
    4e30:	d8c03c15 	stw	r3,240(sp)
    4e34:	da003d15 	stw	r8,244(sp)
    4e38:	000d7ac0 	call	d7ac <__eqdf2>
    4e3c:	d8c03c17 	ldw	r3,240(sp)
    4e40:	da003d17 	ldw	r8,244(sp)
    4e44:	103f9826 	beq	r2,zero,4ca8 <__alt_data_end+0xff004ca8>
    4e48:	00800044 	movi	r2,1
    4e4c:	10c7c83a 	sub	r3,r2,r3
    4e50:	d8c02615 	stw	r3,152(sp)
    4e54:	003f9506 	br	4cac <__alt_data_end+0xff004cac>
    4e58:	d9002917 	ldw	r4,164(sp)
    4e5c:	d8c03217 	ldw	r3,200(sp)
    4e60:	20800044 	addi	r2,r4,1
    4e64:	1885883a 	add	r2,r3,r2
    4e68:	d8802e15 	stw	r2,184(sp)
    4e6c:	103dbf0e 	bge	r2,zero,456c <__alt_data_end+0xff00456c>
    4e70:	0005883a 	mov	r2,zero
    4e74:	003dbd06 	br	456c <__alt_data_end+0xff00456c>
    4e78:	2000211e 	bne	r4,zero,4f00 <___vfprintf_internal_r+0x2168>
    4e7c:	9480004c 	andi	r18,r18,1
    4e80:	90001f1e 	bne	r18,zero,4f00 <___vfprintf_internal_r+0x2168>
    4e84:	00800044 	movi	r2,1
    4e88:	d8802e15 	stw	r2,184(sp)
    4e8c:	003db706 	br	456c <__alt_data_end+0xff00456c>
    4e90:	00800b44 	movi	r2,45
    4e94:	05adc83a 	sub	r22,zero,r22
    4e98:	d8802305 	stb	r2,140(sp)
    4e9c:	003f3f06 	br	4b9c <__alt_data_end+0xff004b9c>
    4ea0:	0005883a 	mov	r2,zero
    4ea4:	003f5206 	br	4bf0 <__alt_data_end+0xff004bf0>
    4ea8:	90a4703a 	and	r18,r18,r2
    4eac:	903f4e26 	beq	r18,zero,4be8 <__alt_data_end+0xff004be8>
    4eb0:	003f4a06 	br	4bdc <__alt_data_end+0xff004bdc>
    4eb4:	00800084 	movi	r2,2
    4eb8:	10c5c83a 	sub	r2,r2,r3
    4ebc:	003f8406 	br	4cd0 <__alt_data_end+0xff004cd0>
    4ec0:	d8802d17 	ldw	r2,180(sp)
    4ec4:	d9002d17 	ldw	r4,180(sp)
    4ec8:	ac400043 	ldbu	r17,1(r21)
    4ecc:	10800017 	ldw	r2,0(r2)
    4ed0:	582b883a 	mov	r21,r11
    4ed4:	d8802915 	stw	r2,164(sp)
    4ed8:	20800104 	addi	r2,r4,4
    4edc:	d9002917 	ldw	r4,164(sp)
    4ee0:	d8802d15 	stw	r2,180(sp)
    4ee4:	203e7a0e 	bge	r4,zero,48d0 <__alt_data_end+0xff0048d0>
    4ee8:	8c403fcc 	andi	r17,r17,255
    4eec:	00bfffc4 	movi	r2,-1
    4ef0:	8c40201c 	xori	r17,r17,128
    4ef4:	d8802915 	stw	r2,164(sp)
    4ef8:	8c7fe004 	addi	r17,r17,-128
    4efc:	00380706 	br	2f1c <__alt_data_end+0xff002f1c>
    4f00:	d8c02917 	ldw	r3,164(sp)
    4f04:	18c00084 	addi	r3,r3,2
    4f08:	d8c02e15 	stw	r3,184(sp)
    4f0c:	1805883a 	mov	r2,r3
    4f10:	183d960e 	bge	r3,zero,456c <__alt_data_end+0xff00456c>
    4f14:	003fd606 	br	4e70 <__alt_data_end+0xff004e70>
    4f18:	0005883a 	mov	r2,zero
    4f1c:	003f8e06 	br	4d58 <__alt_data_end+0xff004d58>
    4f20:	9080004c 	andi	r2,r18,1
    4f24:	103f811e 	bne	r2,zero,4d2c <__alt_data_end+0xff004d2c>
    4f28:	d8802117 	ldw	r2,132(sp)
    4f2c:	1405c83a 	sub	r2,r2,r16
    4f30:	d8803315 	stw	r2,204(sp)
    4f34:	b47ef326 	beq	r22,r17,4b04 <__alt_data_end+0xff004b04>
    4f38:	dd802617 	ldw	r22,152(sp)
    4f3c:	003f1106 	br	4b84 <__alt_data_end+0xff004b84>
    4f40:	d9c02785 	stb	r7,158(sp)
    4f44:	00390406 	br	3358 <__alt_data_end+0xff003358>
    4f48:	d9c02785 	stb	r7,158(sp)
    4f4c:	0038d306 	br	329c <__alt_data_end+0xff00329c>
    4f50:	d9c02785 	stb	r7,158(sp)
    4f54:	003a6106 	br	38dc <__alt_data_end+0xff0038dc>
    4f58:	d9c02785 	stb	r7,158(sp)
    4f5c:	003af806 	br	3b40 <__alt_data_end+0xff003b40>
    4f60:	0005883a 	mov	r2,zero
    4f64:	003d7e06 	br	4560 <__alt_data_end+0xff004560>
    4f68:	d8802344 	addi	r2,sp,141
    4f6c:	003f1306 	br	4bbc <__alt_data_end+0xff004bbc>
    4f70:	d9c02785 	stb	r7,158(sp)
    4f74:	00392306 	br	3404 <__alt_data_end+0xff003404>
    4f78:	d9c02785 	stb	r7,158(sp)
    4f7c:	003aa906 	br	3a24 <__alt_data_end+0xff003a24>
    4f80:	d9c02785 	stb	r7,158(sp)
    4f84:	003a3d06 	br	387c <__alt_data_end+0xff00387c>
    4f88:	d9c02785 	stb	r7,158(sp)
    4f8c:	003aca06 	br	3ab8 <__alt_data_end+0xff003ab8>

00004f90 <__vfprintf_internal>:
    4f90:	00800074 	movhi	r2,1
    4f94:	108e4d04 	addi	r2,r2,14644
    4f98:	300f883a 	mov	r7,r6
    4f9c:	280d883a 	mov	r6,r5
    4fa0:	200b883a 	mov	r5,r4
    4fa4:	11000017 	ldw	r4,0(r2)
    4fa8:	0002d981 	jmpi	2d98 <___vfprintf_internal_r>

00004fac <__sbprintf>:
    4fac:	2880030b 	ldhu	r2,12(r5)
    4fb0:	2ac01917 	ldw	r11,100(r5)
    4fb4:	2a80038b 	ldhu	r10,14(r5)
    4fb8:	2a400717 	ldw	r9,28(r5)
    4fbc:	2a000917 	ldw	r8,36(r5)
    4fc0:	defee204 	addi	sp,sp,-1144
    4fc4:	00c10004 	movi	r3,1024
    4fc8:	dc011a15 	stw	r16,1128(sp)
    4fcc:	10bfff4c 	andi	r2,r2,65533
    4fd0:	2821883a 	mov	r16,r5
    4fd4:	d8cb883a 	add	r5,sp,r3
    4fd8:	dc811c15 	stw	r18,1136(sp)
    4fdc:	dc411b15 	stw	r17,1132(sp)
    4fe0:	dfc11d15 	stw	ra,1140(sp)
    4fe4:	2025883a 	mov	r18,r4
    4fe8:	d881030d 	sth	r2,1036(sp)
    4fec:	dac11915 	stw	r11,1124(sp)
    4ff0:	da81038d 	sth	r10,1038(sp)
    4ff4:	da410715 	stw	r9,1052(sp)
    4ff8:	da010915 	stw	r8,1060(sp)
    4ffc:	dec10015 	stw	sp,1024(sp)
    5000:	dec10415 	stw	sp,1040(sp)
    5004:	d8c10215 	stw	r3,1032(sp)
    5008:	d8c10515 	stw	r3,1044(sp)
    500c:	d8010615 	stw	zero,1048(sp)
    5010:	0002d980 	call	2d98 <___vfprintf_internal_r>
    5014:	1023883a 	mov	r17,r2
    5018:	10000416 	blt	r2,zero,502c <__sbprintf+0x80>
    501c:	d9410004 	addi	r5,sp,1024
    5020:	9009883a 	mov	r4,r18
    5024:	0006c600 	call	6c60 <_fflush_r>
    5028:	10000d1e 	bne	r2,zero,5060 <__sbprintf+0xb4>
    502c:	d881030b 	ldhu	r2,1036(sp)
    5030:	1080100c 	andi	r2,r2,64
    5034:	10000326 	beq	r2,zero,5044 <__sbprintf+0x98>
    5038:	8080030b 	ldhu	r2,12(r16)
    503c:	10801014 	ori	r2,r2,64
    5040:	8080030d 	sth	r2,12(r16)
    5044:	8805883a 	mov	r2,r17
    5048:	dfc11d17 	ldw	ra,1140(sp)
    504c:	dc811c17 	ldw	r18,1136(sp)
    5050:	dc411b17 	ldw	r17,1132(sp)
    5054:	dc011a17 	ldw	r16,1128(sp)
    5058:	dec11e04 	addi	sp,sp,1144
    505c:	f800283a 	ret
    5060:	047fffc4 	movi	r17,-1
    5064:	003ff106 	br	502c <__alt_data_end+0xff00502c>

00005068 <__swsetup_r>:
    5068:	00800074 	movhi	r2,1
    506c:	defffd04 	addi	sp,sp,-12
    5070:	108e4d04 	addi	r2,r2,14644
    5074:	dc400115 	stw	r17,4(sp)
    5078:	2023883a 	mov	r17,r4
    507c:	11000017 	ldw	r4,0(r2)
    5080:	dc000015 	stw	r16,0(sp)
    5084:	dfc00215 	stw	ra,8(sp)
    5088:	2821883a 	mov	r16,r5
    508c:	20000226 	beq	r4,zero,5098 <__swsetup_r+0x30>
    5090:	20800e17 	ldw	r2,56(r4)
    5094:	10003126 	beq	r2,zero,515c <__swsetup_r+0xf4>
    5098:	8080030b 	ldhu	r2,12(r16)
    509c:	10c0020c 	andi	r3,r2,8
    50a0:	1009883a 	mov	r4,r2
    50a4:	18000f26 	beq	r3,zero,50e4 <__swsetup_r+0x7c>
    50a8:	80c00417 	ldw	r3,16(r16)
    50ac:	18001526 	beq	r3,zero,5104 <__swsetup_r+0x9c>
    50b0:	1100004c 	andi	r4,r2,1
    50b4:	20001c1e 	bne	r4,zero,5128 <__swsetup_r+0xc0>
    50b8:	1080008c 	andi	r2,r2,2
    50bc:	1000291e 	bne	r2,zero,5164 <__swsetup_r+0xfc>
    50c0:	80800517 	ldw	r2,20(r16)
    50c4:	80800215 	stw	r2,8(r16)
    50c8:	18001c26 	beq	r3,zero,513c <__swsetup_r+0xd4>
    50cc:	0005883a 	mov	r2,zero
    50d0:	dfc00217 	ldw	ra,8(sp)
    50d4:	dc400117 	ldw	r17,4(sp)
    50d8:	dc000017 	ldw	r16,0(sp)
    50dc:	dec00304 	addi	sp,sp,12
    50e0:	f800283a 	ret
    50e4:	2080040c 	andi	r2,r4,16
    50e8:	10002e26 	beq	r2,zero,51a4 <__swsetup_r+0x13c>
    50ec:	2080010c 	andi	r2,r4,4
    50f0:	10001e1e 	bne	r2,zero,516c <__swsetup_r+0x104>
    50f4:	80c00417 	ldw	r3,16(r16)
    50f8:	20800214 	ori	r2,r4,8
    50fc:	8080030d 	sth	r2,12(r16)
    5100:	183feb1e 	bne	r3,zero,50b0 <__alt_data_end+0xff0050b0>
    5104:	1100a00c 	andi	r4,r2,640
    5108:	01408004 	movi	r5,512
    510c:	217fe826 	beq	r4,r5,50b0 <__alt_data_end+0xff0050b0>
    5110:	800b883a 	mov	r5,r16
    5114:	8809883a 	mov	r4,r17
    5118:	0007be00 	call	7be0 <__smakebuf_r>
    511c:	8080030b 	ldhu	r2,12(r16)
    5120:	80c00417 	ldw	r3,16(r16)
    5124:	003fe206 	br	50b0 <__alt_data_end+0xff0050b0>
    5128:	80800517 	ldw	r2,20(r16)
    512c:	80000215 	stw	zero,8(r16)
    5130:	0085c83a 	sub	r2,zero,r2
    5134:	80800615 	stw	r2,24(r16)
    5138:	183fe41e 	bne	r3,zero,50cc <__alt_data_end+0xff0050cc>
    513c:	80c0030b 	ldhu	r3,12(r16)
    5140:	0005883a 	mov	r2,zero
    5144:	1900200c 	andi	r4,r3,128
    5148:	203fe126 	beq	r4,zero,50d0 <__alt_data_end+0xff0050d0>
    514c:	18c01014 	ori	r3,r3,64
    5150:	80c0030d 	sth	r3,12(r16)
    5154:	00bfffc4 	movi	r2,-1
    5158:	003fdd06 	br	50d0 <__alt_data_end+0xff0050d0>
    515c:	000703c0 	call	703c <__sinit>
    5160:	003fcd06 	br	5098 <__alt_data_end+0xff005098>
    5164:	0005883a 	mov	r2,zero
    5168:	003fd606 	br	50c4 <__alt_data_end+0xff0050c4>
    516c:	81400c17 	ldw	r5,48(r16)
    5170:	28000626 	beq	r5,zero,518c <__swsetup_r+0x124>
    5174:	80801004 	addi	r2,r16,64
    5178:	28800326 	beq	r5,r2,5188 <__swsetup_r+0x120>
    517c:	8809883a 	mov	r4,r17
    5180:	00071b00 	call	71b0 <_free_r>
    5184:	8100030b 	ldhu	r4,12(r16)
    5188:	80000c15 	stw	zero,48(r16)
    518c:	80c00417 	ldw	r3,16(r16)
    5190:	00bff6c4 	movi	r2,-37
    5194:	1108703a 	and	r4,r2,r4
    5198:	80000115 	stw	zero,4(r16)
    519c:	80c00015 	stw	r3,0(r16)
    51a0:	003fd506 	br	50f8 <__alt_data_end+0xff0050f8>
    51a4:	00800244 	movi	r2,9
    51a8:	88800015 	stw	r2,0(r17)
    51ac:	20801014 	ori	r2,r4,64
    51b0:	8080030d 	sth	r2,12(r16)
    51b4:	00bfffc4 	movi	r2,-1
    51b8:	003fc506 	br	50d0 <__alt_data_end+0xff0050d0>

000051bc <quorem>:
    51bc:	defff704 	addi	sp,sp,-36
    51c0:	dc800215 	stw	r18,8(sp)
    51c4:	20800417 	ldw	r2,16(r4)
    51c8:	2c800417 	ldw	r18,16(r5)
    51cc:	dfc00815 	stw	ra,32(sp)
    51d0:	ddc00715 	stw	r23,28(sp)
    51d4:	dd800615 	stw	r22,24(sp)
    51d8:	dd400515 	stw	r21,20(sp)
    51dc:	dd000415 	stw	r20,16(sp)
    51e0:	dcc00315 	stw	r19,12(sp)
    51e4:	dc400115 	stw	r17,4(sp)
    51e8:	dc000015 	stw	r16,0(sp)
    51ec:	14807116 	blt	r2,r18,53b4 <quorem+0x1f8>
    51f0:	94bfffc4 	addi	r18,r18,-1
    51f4:	94ad883a 	add	r22,r18,r18
    51f8:	b5ad883a 	add	r22,r22,r22
    51fc:	2c400504 	addi	r17,r5,20
    5200:	8da9883a 	add	r20,r17,r22
    5204:	25400504 	addi	r21,r4,20
    5208:	282f883a 	mov	r23,r5
    520c:	adad883a 	add	r22,r21,r22
    5210:	a1400017 	ldw	r5,0(r20)
    5214:	2021883a 	mov	r16,r4
    5218:	b1000017 	ldw	r4,0(r22)
    521c:	29400044 	addi	r5,r5,1
    5220:	000c55c0 	call	c55c <__udivsi3>
    5224:	1027883a 	mov	r19,r2
    5228:	10002c26 	beq	r2,zero,52dc <quorem+0x120>
    522c:	a813883a 	mov	r9,r21
    5230:	880b883a 	mov	r5,r17
    5234:	0009883a 	mov	r4,zero
    5238:	000d883a 	mov	r6,zero
    523c:	2a000017 	ldw	r8,0(r5)
    5240:	49c00017 	ldw	r7,0(r9)
    5244:	29400104 	addi	r5,r5,4
    5248:	40bfffcc 	andi	r2,r8,65535
    524c:	14c5383a 	mul	r2,r2,r19
    5250:	4010d43a 	srli	r8,r8,16
    5254:	38ffffcc 	andi	r3,r7,65535
    5258:	1105883a 	add	r2,r2,r4
    525c:	1008d43a 	srli	r4,r2,16
    5260:	44d1383a 	mul	r8,r8,r19
    5264:	198d883a 	add	r6,r3,r6
    5268:	10ffffcc 	andi	r3,r2,65535
    526c:	30c7c83a 	sub	r3,r6,r3
    5270:	380ed43a 	srli	r7,r7,16
    5274:	4105883a 	add	r2,r8,r4
    5278:	180dd43a 	srai	r6,r3,16
    527c:	113fffcc 	andi	r4,r2,65535
    5280:	390fc83a 	sub	r7,r7,r4
    5284:	398d883a 	add	r6,r7,r6
    5288:	300e943a 	slli	r7,r6,16
    528c:	18ffffcc 	andi	r3,r3,65535
    5290:	1008d43a 	srli	r4,r2,16
    5294:	38ceb03a 	or	r7,r7,r3
    5298:	49c00015 	stw	r7,0(r9)
    529c:	300dd43a 	srai	r6,r6,16
    52a0:	4a400104 	addi	r9,r9,4
    52a4:	a17fe52e 	bgeu	r20,r5,523c <__alt_data_end+0xff00523c>
    52a8:	b0800017 	ldw	r2,0(r22)
    52ac:	10000b1e 	bne	r2,zero,52dc <quorem+0x120>
    52b0:	b0bfff04 	addi	r2,r22,-4
    52b4:	a880082e 	bgeu	r21,r2,52d8 <quorem+0x11c>
    52b8:	b0ffff17 	ldw	r3,-4(r22)
    52bc:	18000326 	beq	r3,zero,52cc <quorem+0x110>
    52c0:	00000506 	br	52d8 <quorem+0x11c>
    52c4:	10c00017 	ldw	r3,0(r2)
    52c8:	1800031e 	bne	r3,zero,52d8 <quorem+0x11c>
    52cc:	10bfff04 	addi	r2,r2,-4
    52d0:	94bfffc4 	addi	r18,r18,-1
    52d4:	a8bffb36 	bltu	r21,r2,52c4 <__alt_data_end+0xff0052c4>
    52d8:	84800415 	stw	r18,16(r16)
    52dc:	b80b883a 	mov	r5,r23
    52e0:	8009883a 	mov	r4,r16
    52e4:	0008b140 	call	8b14 <__mcmp>
    52e8:	10002616 	blt	r2,zero,5384 <quorem+0x1c8>
    52ec:	9cc00044 	addi	r19,r19,1
    52f0:	a805883a 	mov	r2,r21
    52f4:	000b883a 	mov	r5,zero
    52f8:	11000017 	ldw	r4,0(r2)
    52fc:	89800017 	ldw	r6,0(r17)
    5300:	10800104 	addi	r2,r2,4
    5304:	20ffffcc 	andi	r3,r4,65535
    5308:	194b883a 	add	r5,r3,r5
    530c:	30ffffcc 	andi	r3,r6,65535
    5310:	28c7c83a 	sub	r3,r5,r3
    5314:	300cd43a 	srli	r6,r6,16
    5318:	2008d43a 	srli	r4,r4,16
    531c:	180bd43a 	srai	r5,r3,16
    5320:	18ffffcc 	andi	r3,r3,65535
    5324:	2189c83a 	sub	r4,r4,r6
    5328:	2149883a 	add	r4,r4,r5
    532c:	200c943a 	slli	r6,r4,16
    5330:	8c400104 	addi	r17,r17,4
    5334:	200bd43a 	srai	r5,r4,16
    5338:	30c6b03a 	or	r3,r6,r3
    533c:	10ffff15 	stw	r3,-4(r2)
    5340:	a47fed2e 	bgeu	r20,r17,52f8 <__alt_data_end+0xff0052f8>
    5344:	9485883a 	add	r2,r18,r18
    5348:	1085883a 	add	r2,r2,r2
    534c:	a887883a 	add	r3,r21,r2
    5350:	18800017 	ldw	r2,0(r3)
    5354:	10000b1e 	bne	r2,zero,5384 <quorem+0x1c8>
    5358:	18bfff04 	addi	r2,r3,-4
    535c:	a880082e 	bgeu	r21,r2,5380 <quorem+0x1c4>
    5360:	18ffff17 	ldw	r3,-4(r3)
    5364:	18000326 	beq	r3,zero,5374 <quorem+0x1b8>
    5368:	00000506 	br	5380 <quorem+0x1c4>
    536c:	10c00017 	ldw	r3,0(r2)
    5370:	1800031e 	bne	r3,zero,5380 <quorem+0x1c4>
    5374:	10bfff04 	addi	r2,r2,-4
    5378:	94bfffc4 	addi	r18,r18,-1
    537c:	a8bffb36 	bltu	r21,r2,536c <__alt_data_end+0xff00536c>
    5380:	84800415 	stw	r18,16(r16)
    5384:	9805883a 	mov	r2,r19
    5388:	dfc00817 	ldw	ra,32(sp)
    538c:	ddc00717 	ldw	r23,28(sp)
    5390:	dd800617 	ldw	r22,24(sp)
    5394:	dd400517 	ldw	r21,20(sp)
    5398:	dd000417 	ldw	r20,16(sp)
    539c:	dcc00317 	ldw	r19,12(sp)
    53a0:	dc800217 	ldw	r18,8(sp)
    53a4:	dc400117 	ldw	r17,4(sp)
    53a8:	dc000017 	ldw	r16,0(sp)
    53ac:	dec00904 	addi	sp,sp,36
    53b0:	f800283a 	ret
    53b4:	0005883a 	mov	r2,zero
    53b8:	003ff306 	br	5388 <__alt_data_end+0xff005388>

000053bc <_dtoa_r>:
    53bc:	20801017 	ldw	r2,64(r4)
    53c0:	deffde04 	addi	sp,sp,-136
    53c4:	df002015 	stw	fp,128(sp)
    53c8:	dcc01b15 	stw	r19,108(sp)
    53cc:	dc801a15 	stw	r18,104(sp)
    53d0:	dc401915 	stw	r17,100(sp)
    53d4:	dc001815 	stw	r16,96(sp)
    53d8:	dfc02115 	stw	ra,132(sp)
    53dc:	ddc01f15 	stw	r23,124(sp)
    53e0:	dd801e15 	stw	r22,120(sp)
    53e4:	dd401d15 	stw	r21,116(sp)
    53e8:	dd001c15 	stw	r20,112(sp)
    53ec:	d9c00315 	stw	r7,12(sp)
    53f0:	2039883a 	mov	fp,r4
    53f4:	3023883a 	mov	r17,r6
    53f8:	2825883a 	mov	r18,r5
    53fc:	dc002417 	ldw	r16,144(sp)
    5400:	3027883a 	mov	r19,r6
    5404:	10000826 	beq	r2,zero,5428 <_dtoa_r+0x6c>
    5408:	21801117 	ldw	r6,68(r4)
    540c:	00c00044 	movi	r3,1
    5410:	100b883a 	mov	r5,r2
    5414:	1986983a 	sll	r3,r3,r6
    5418:	11800115 	stw	r6,4(r2)
    541c:	10c00215 	stw	r3,8(r2)
    5420:	00082f40 	call	82f4 <_Bfree>
    5424:	e0001015 	stw	zero,64(fp)
    5428:	88002e16 	blt	r17,zero,54e4 <_dtoa_r+0x128>
    542c:	80000015 	stw	zero,0(r16)
    5430:	889ffc2c 	andhi	r2,r17,32752
    5434:	00dffc34 	movhi	r3,32752
    5438:	10c01c26 	beq	r2,r3,54ac <_dtoa_r+0xf0>
    543c:	000d883a 	mov	r6,zero
    5440:	000f883a 	mov	r7,zero
    5444:	9009883a 	mov	r4,r18
    5448:	980b883a 	mov	r5,r19
    544c:	000d7ac0 	call	d7ac <__eqdf2>
    5450:	10002b1e 	bne	r2,zero,5500 <_dtoa_r+0x144>
    5454:	d9c02317 	ldw	r7,140(sp)
    5458:	00800044 	movi	r2,1
    545c:	38800015 	stw	r2,0(r7)
    5460:	d8802517 	ldw	r2,148(sp)
    5464:	10019e26 	beq	r2,zero,5ae0 <_dtoa_r+0x724>
    5468:	d8c02517 	ldw	r3,148(sp)
    546c:	00800074 	movhi	r2,1
    5470:	1086f244 	addi	r2,r2,7113
    5474:	18800015 	stw	r2,0(r3)
    5478:	10bfffc4 	addi	r2,r2,-1
    547c:	dfc02117 	ldw	ra,132(sp)
    5480:	df002017 	ldw	fp,128(sp)
    5484:	ddc01f17 	ldw	r23,124(sp)
    5488:	dd801e17 	ldw	r22,120(sp)
    548c:	dd401d17 	ldw	r21,116(sp)
    5490:	dd001c17 	ldw	r20,112(sp)
    5494:	dcc01b17 	ldw	r19,108(sp)
    5498:	dc801a17 	ldw	r18,104(sp)
    549c:	dc401917 	ldw	r17,100(sp)
    54a0:	dc001817 	ldw	r16,96(sp)
    54a4:	dec02204 	addi	sp,sp,136
    54a8:	f800283a 	ret
    54ac:	d8c02317 	ldw	r3,140(sp)
    54b0:	0089c3c4 	movi	r2,9999
    54b4:	18800015 	stw	r2,0(r3)
    54b8:	90017726 	beq	r18,zero,5a98 <_dtoa_r+0x6dc>
    54bc:	00800074 	movhi	r2,1
    54c0:	1086fe04 	addi	r2,r2,7160
    54c4:	d9002517 	ldw	r4,148(sp)
    54c8:	203fec26 	beq	r4,zero,547c <__alt_data_end+0xff00547c>
    54cc:	10c000c7 	ldb	r3,3(r2)
    54d0:	1801781e 	bne	r3,zero,5ab4 <_dtoa_r+0x6f8>
    54d4:	10c000c4 	addi	r3,r2,3
    54d8:	d9802517 	ldw	r6,148(sp)
    54dc:	30c00015 	stw	r3,0(r6)
    54e0:	003fe606 	br	547c <__alt_data_end+0xff00547c>
    54e4:	04e00034 	movhi	r19,32768
    54e8:	9cffffc4 	addi	r19,r19,-1
    54ec:	00800044 	movi	r2,1
    54f0:	8ce6703a 	and	r19,r17,r19
    54f4:	80800015 	stw	r2,0(r16)
    54f8:	9823883a 	mov	r17,r19
    54fc:	003fcc06 	br	5430 <__alt_data_end+0xff005430>
    5500:	d8800204 	addi	r2,sp,8
    5504:	d8800015 	stw	r2,0(sp)
    5508:	d9c00104 	addi	r7,sp,4
    550c:	900b883a 	mov	r5,r18
    5510:	980d883a 	mov	r6,r19
    5514:	e009883a 	mov	r4,fp
    5518:	8820d53a 	srli	r16,r17,20
    551c:	0008ee00 	call	8ee0 <__d2b>
    5520:	d8800915 	stw	r2,36(sp)
    5524:	8001651e 	bne	r16,zero,5abc <_dtoa_r+0x700>
    5528:	dd800217 	ldw	r22,8(sp)
    552c:	dc000117 	ldw	r16,4(sp)
    5530:	00800804 	movi	r2,32
    5534:	b421883a 	add	r16,r22,r16
    5538:	80c10c84 	addi	r3,r16,1074
    553c:	10c2d10e 	bge	r2,r3,6084 <_dtoa_r+0xcc8>
    5540:	00801004 	movi	r2,64
    5544:	81010484 	addi	r4,r16,1042
    5548:	10c7c83a 	sub	r3,r2,r3
    554c:	9108d83a 	srl	r4,r18,r4
    5550:	88e2983a 	sll	r17,r17,r3
    5554:	2448b03a 	or	r4,r4,r17
    5558:	000eb740 	call	eb74 <__floatunsidf>
    555c:	017f8434 	movhi	r5,65040
    5560:	01800044 	movi	r6,1
    5564:	1009883a 	mov	r4,r2
    5568:	194b883a 	add	r5,r3,r5
    556c:	843fffc4 	addi	r16,r16,-1
    5570:	d9801115 	stw	r6,68(sp)
    5574:	000d883a 	mov	r6,zero
    5578:	01cffe34 	movhi	r7,16376
    557c:	000e11c0 	call	e11c <__subdf3>
    5580:	0198dbf4 	movhi	r6,25455
    5584:	01cff4f4 	movhi	r7,16339
    5588:	3190d844 	addi	r6,r6,17249
    558c:	39e1e9c4 	addi	r7,r7,-30809
    5590:	1009883a 	mov	r4,r2
    5594:	180b883a 	mov	r5,r3
    5598:	000da040 	call	da04 <__muldf3>
    559c:	01a2d874 	movhi	r6,35681
    55a0:	01cff1f4 	movhi	r7,16327
    55a4:	31b22cc4 	addi	r6,r6,-14157
    55a8:	39e28a04 	addi	r7,r7,-30168
    55ac:	180b883a 	mov	r5,r3
    55b0:	1009883a 	mov	r4,r2
    55b4:	000c6180 	call	c618 <__adddf3>
    55b8:	8009883a 	mov	r4,r16
    55bc:	1029883a 	mov	r20,r2
    55c0:	1823883a 	mov	r17,r3
    55c4:	000ea980 	call	ea98 <__floatsidf>
    55c8:	019427f4 	movhi	r6,20639
    55cc:	01cff4f4 	movhi	r7,16339
    55d0:	319e7ec4 	addi	r6,r6,31227
    55d4:	39d104c4 	addi	r7,r7,17427
    55d8:	1009883a 	mov	r4,r2
    55dc:	180b883a 	mov	r5,r3
    55e0:	000da040 	call	da04 <__muldf3>
    55e4:	100d883a 	mov	r6,r2
    55e8:	180f883a 	mov	r7,r3
    55ec:	a009883a 	mov	r4,r20
    55f0:	880b883a 	mov	r5,r17
    55f4:	000c6180 	call	c618 <__adddf3>
    55f8:	1009883a 	mov	r4,r2
    55fc:	180b883a 	mov	r5,r3
    5600:	1029883a 	mov	r20,r2
    5604:	1823883a 	mov	r17,r3
    5608:	000ea180 	call	ea18 <__fixdfsi>
    560c:	000d883a 	mov	r6,zero
    5610:	000f883a 	mov	r7,zero
    5614:	a009883a 	mov	r4,r20
    5618:	880b883a 	mov	r5,r17
    561c:	d8800515 	stw	r2,20(sp)
    5620:	000d9100 	call	d910 <__ledf2>
    5624:	10028716 	blt	r2,zero,6044 <_dtoa_r+0xc88>
    5628:	d8c00517 	ldw	r3,20(sp)
    562c:	00800584 	movi	r2,22
    5630:	10c27536 	bltu	r2,r3,6008 <_dtoa_r+0xc4c>
    5634:	180490fa 	slli	r2,r3,3
    5638:	00c00074 	movhi	r3,1
    563c:	18c71a04 	addi	r3,r3,7272
    5640:	1885883a 	add	r2,r3,r2
    5644:	11000017 	ldw	r4,0(r2)
    5648:	11400117 	ldw	r5,4(r2)
    564c:	900d883a 	mov	r6,r18
    5650:	980f883a 	mov	r7,r19
    5654:	000d8340 	call	d834 <__gedf2>
    5658:	00828d0e 	bge	zero,r2,6090 <_dtoa_r+0xcd4>
    565c:	d9000517 	ldw	r4,20(sp)
    5660:	d8000e15 	stw	zero,56(sp)
    5664:	213fffc4 	addi	r4,r4,-1
    5668:	d9000515 	stw	r4,20(sp)
    566c:	b42dc83a 	sub	r22,r22,r16
    5670:	b5bfffc4 	addi	r22,r22,-1
    5674:	b0026f16 	blt	r22,zero,6034 <_dtoa_r+0xc78>
    5678:	d8000815 	stw	zero,32(sp)
    567c:	d9c00517 	ldw	r7,20(sp)
    5680:	38026416 	blt	r7,zero,6014 <_dtoa_r+0xc58>
    5684:	b1ed883a 	add	r22,r22,r7
    5688:	d9c00d15 	stw	r7,52(sp)
    568c:	d8000a15 	stw	zero,40(sp)
    5690:	d9800317 	ldw	r6,12(sp)
    5694:	00800244 	movi	r2,9
    5698:	11811436 	bltu	r2,r6,5aec <_dtoa_r+0x730>
    569c:	00800144 	movi	r2,5
    56a0:	1184e10e 	bge	r2,r6,6a28 <_dtoa_r+0x166c>
    56a4:	31bfff04 	addi	r6,r6,-4
    56a8:	d9800315 	stw	r6,12(sp)
    56ac:	0023883a 	mov	r17,zero
    56b0:	d9800317 	ldw	r6,12(sp)
    56b4:	008000c4 	movi	r2,3
    56b8:	30836726 	beq	r6,r2,6458 <_dtoa_r+0x109c>
    56bc:	1183410e 	bge	r2,r6,63c4 <_dtoa_r+0x1008>
    56c0:	d9c00317 	ldw	r7,12(sp)
    56c4:	00800104 	movi	r2,4
    56c8:	38827c26 	beq	r7,r2,60bc <_dtoa_r+0xd00>
    56cc:	00800144 	movi	r2,5
    56d0:	3884c41e 	bne	r7,r2,69e4 <_dtoa_r+0x1628>
    56d4:	00800044 	movi	r2,1
    56d8:	d8800b15 	stw	r2,44(sp)
    56dc:	d8c00517 	ldw	r3,20(sp)
    56e0:	d9002217 	ldw	r4,136(sp)
    56e4:	1907883a 	add	r3,r3,r4
    56e8:	19800044 	addi	r6,r3,1
    56ec:	d8c00c15 	stw	r3,48(sp)
    56f0:	d9800615 	stw	r6,24(sp)
    56f4:	0183a40e 	bge	zero,r6,6588 <_dtoa_r+0x11cc>
    56f8:	d9800617 	ldw	r6,24(sp)
    56fc:	3021883a 	mov	r16,r6
    5700:	e0001115 	stw	zero,68(fp)
    5704:	008005c4 	movi	r2,23
    5708:	1184c92e 	bgeu	r2,r6,6a30 <_dtoa_r+0x1674>
    570c:	00c00044 	movi	r3,1
    5710:	00800104 	movi	r2,4
    5714:	1085883a 	add	r2,r2,r2
    5718:	11000504 	addi	r4,r2,20
    571c:	180b883a 	mov	r5,r3
    5720:	18c00044 	addi	r3,r3,1
    5724:	313ffb2e 	bgeu	r6,r4,5714 <__alt_data_end+0xff005714>
    5728:	e1401115 	stw	r5,68(fp)
    572c:	e009883a 	mov	r4,fp
    5730:	000824c0 	call	824c <_Balloc>
    5734:	d8800715 	stw	r2,28(sp)
    5738:	e0801015 	stw	r2,64(fp)
    573c:	00800384 	movi	r2,14
    5740:	1400f736 	bltu	r2,r16,5b20 <_dtoa_r+0x764>
    5744:	8800f626 	beq	r17,zero,5b20 <_dtoa_r+0x764>
    5748:	d9c00517 	ldw	r7,20(sp)
    574c:	01c39a0e 	bge	zero,r7,65b8 <_dtoa_r+0x11fc>
    5750:	388003cc 	andi	r2,r7,15
    5754:	100490fa 	slli	r2,r2,3
    5758:	382bd13a 	srai	r21,r7,4
    575c:	00c00074 	movhi	r3,1
    5760:	18c71a04 	addi	r3,r3,7272
    5764:	1885883a 	add	r2,r3,r2
    5768:	a8c0040c 	andi	r3,r21,16
    576c:	12400017 	ldw	r9,0(r2)
    5770:	12000117 	ldw	r8,4(r2)
    5774:	18037926 	beq	r3,zero,655c <_dtoa_r+0x11a0>
    5778:	00800074 	movhi	r2,1
    577c:	10871004 	addi	r2,r2,7232
    5780:	11800817 	ldw	r6,32(r2)
    5784:	11c00917 	ldw	r7,36(r2)
    5788:	9009883a 	mov	r4,r18
    578c:	980b883a 	mov	r5,r19
    5790:	da001715 	stw	r8,92(sp)
    5794:	da401615 	stw	r9,88(sp)
    5798:	000cec40 	call	cec4 <__divdf3>
    579c:	da001717 	ldw	r8,92(sp)
    57a0:	da401617 	ldw	r9,88(sp)
    57a4:	ad4003cc 	andi	r21,r21,15
    57a8:	040000c4 	movi	r16,3
    57ac:	1023883a 	mov	r17,r2
    57b0:	1829883a 	mov	r20,r3
    57b4:	a8001126 	beq	r21,zero,57fc <_dtoa_r+0x440>
    57b8:	05c00074 	movhi	r23,1
    57bc:	bdc71004 	addi	r23,r23,7232
    57c0:	4805883a 	mov	r2,r9
    57c4:	4007883a 	mov	r3,r8
    57c8:	a980004c 	andi	r6,r21,1
    57cc:	1009883a 	mov	r4,r2
    57d0:	a82bd07a 	srai	r21,r21,1
    57d4:	180b883a 	mov	r5,r3
    57d8:	30000426 	beq	r6,zero,57ec <_dtoa_r+0x430>
    57dc:	b9800017 	ldw	r6,0(r23)
    57e0:	b9c00117 	ldw	r7,4(r23)
    57e4:	84000044 	addi	r16,r16,1
    57e8:	000da040 	call	da04 <__muldf3>
    57ec:	bdc00204 	addi	r23,r23,8
    57f0:	a83ff51e 	bne	r21,zero,57c8 <__alt_data_end+0xff0057c8>
    57f4:	1013883a 	mov	r9,r2
    57f8:	1811883a 	mov	r8,r3
    57fc:	480d883a 	mov	r6,r9
    5800:	400f883a 	mov	r7,r8
    5804:	8809883a 	mov	r4,r17
    5808:	a00b883a 	mov	r5,r20
    580c:	000cec40 	call	cec4 <__divdf3>
    5810:	d8800f15 	stw	r2,60(sp)
    5814:	d8c01015 	stw	r3,64(sp)
    5818:	d8c00e17 	ldw	r3,56(sp)
    581c:	18000626 	beq	r3,zero,5838 <_dtoa_r+0x47c>
    5820:	d9000f17 	ldw	r4,60(sp)
    5824:	d9401017 	ldw	r5,64(sp)
    5828:	000d883a 	mov	r6,zero
    582c:	01cffc34 	movhi	r7,16368
    5830:	000d9100 	call	d910 <__ledf2>
    5834:	10040b16 	blt	r2,zero,6864 <_dtoa_r+0x14a8>
    5838:	8009883a 	mov	r4,r16
    583c:	000ea980 	call	ea98 <__floatsidf>
    5840:	d9800f17 	ldw	r6,60(sp)
    5844:	d9c01017 	ldw	r7,64(sp)
    5848:	1009883a 	mov	r4,r2
    584c:	180b883a 	mov	r5,r3
    5850:	000da040 	call	da04 <__muldf3>
    5854:	000d883a 	mov	r6,zero
    5858:	01d00734 	movhi	r7,16412
    585c:	1009883a 	mov	r4,r2
    5860:	180b883a 	mov	r5,r3
    5864:	000c6180 	call	c618 <__adddf3>
    5868:	1021883a 	mov	r16,r2
    586c:	d8800617 	ldw	r2,24(sp)
    5870:	047f3034 	movhi	r17,64704
    5874:	1c63883a 	add	r17,r3,r17
    5878:	10031826 	beq	r2,zero,64dc <_dtoa_r+0x1120>
    587c:	d8c00517 	ldw	r3,20(sp)
    5880:	db000617 	ldw	r12,24(sp)
    5884:	d8c01315 	stw	r3,76(sp)
    5888:	d9000b17 	ldw	r4,44(sp)
    588c:	20038f26 	beq	r4,zero,66cc <_dtoa_r+0x1310>
    5890:	60bfffc4 	addi	r2,r12,-1
    5894:	100490fa 	slli	r2,r2,3
    5898:	00c00074 	movhi	r3,1
    589c:	18c71a04 	addi	r3,r3,7272
    58a0:	1885883a 	add	r2,r3,r2
    58a4:	11800017 	ldw	r6,0(r2)
    58a8:	11c00117 	ldw	r7,4(r2)
    58ac:	d8800717 	ldw	r2,28(sp)
    58b0:	0009883a 	mov	r4,zero
    58b4:	014ff834 	movhi	r5,16352
    58b8:	db001615 	stw	r12,88(sp)
    58bc:	15c00044 	addi	r23,r2,1
    58c0:	000cec40 	call	cec4 <__divdf3>
    58c4:	800d883a 	mov	r6,r16
    58c8:	880f883a 	mov	r7,r17
    58cc:	1009883a 	mov	r4,r2
    58d0:	180b883a 	mov	r5,r3
    58d4:	000e11c0 	call	e11c <__subdf3>
    58d8:	d9401017 	ldw	r5,64(sp)
    58dc:	d9000f17 	ldw	r4,60(sp)
    58e0:	102b883a 	mov	r21,r2
    58e4:	d8c01215 	stw	r3,72(sp)
    58e8:	000ea180 	call	ea18 <__fixdfsi>
    58ec:	1009883a 	mov	r4,r2
    58f0:	1029883a 	mov	r20,r2
    58f4:	000ea980 	call	ea98 <__floatsidf>
    58f8:	d9000f17 	ldw	r4,60(sp)
    58fc:	d9401017 	ldw	r5,64(sp)
    5900:	100d883a 	mov	r6,r2
    5904:	180f883a 	mov	r7,r3
    5908:	000e11c0 	call	e11c <__subdf3>
    590c:	1823883a 	mov	r17,r3
    5910:	d8c00717 	ldw	r3,28(sp)
    5914:	d9401217 	ldw	r5,72(sp)
    5918:	a2000c04 	addi	r8,r20,48
    591c:	1021883a 	mov	r16,r2
    5920:	1a000005 	stb	r8,0(r3)
    5924:	800d883a 	mov	r6,r16
    5928:	880f883a 	mov	r7,r17
    592c:	a809883a 	mov	r4,r21
    5930:	4029883a 	mov	r20,r8
    5934:	000d8340 	call	d834 <__gedf2>
    5938:	00841d16 	blt	zero,r2,69b0 <_dtoa_r+0x15f4>
    593c:	800d883a 	mov	r6,r16
    5940:	880f883a 	mov	r7,r17
    5944:	0009883a 	mov	r4,zero
    5948:	014ffc34 	movhi	r5,16368
    594c:	000e11c0 	call	e11c <__subdf3>
    5950:	d9401217 	ldw	r5,72(sp)
    5954:	100d883a 	mov	r6,r2
    5958:	180f883a 	mov	r7,r3
    595c:	a809883a 	mov	r4,r21
    5960:	000d8340 	call	d834 <__gedf2>
    5964:	db001617 	ldw	r12,88(sp)
    5968:	00840e16 	blt	zero,r2,69a4 <_dtoa_r+0x15e8>
    596c:	00800044 	movi	r2,1
    5970:	13006b0e 	bge	r2,r12,5b20 <_dtoa_r+0x764>
    5974:	d9000717 	ldw	r4,28(sp)
    5978:	dd800f15 	stw	r22,60(sp)
    597c:	dcc01015 	stw	r19,64(sp)
    5980:	2319883a 	add	r12,r4,r12
    5984:	dcc01217 	ldw	r19,72(sp)
    5988:	602d883a 	mov	r22,r12
    598c:	dc801215 	stw	r18,72(sp)
    5990:	b825883a 	mov	r18,r23
    5994:	00000906 	br	59bc <_dtoa_r+0x600>
    5998:	000e11c0 	call	e11c <__subdf3>
    599c:	a80d883a 	mov	r6,r21
    59a0:	980f883a 	mov	r7,r19
    59a4:	1009883a 	mov	r4,r2
    59a8:	180b883a 	mov	r5,r3
    59ac:	000d9100 	call	d910 <__ledf2>
    59b0:	1003e816 	blt	r2,zero,6954 <_dtoa_r+0x1598>
    59b4:	b825883a 	mov	r18,r23
    59b8:	bd83e926 	beq	r23,r22,6960 <_dtoa_r+0x15a4>
    59bc:	a809883a 	mov	r4,r21
    59c0:	980b883a 	mov	r5,r19
    59c4:	000d883a 	mov	r6,zero
    59c8:	01d00934 	movhi	r7,16420
    59cc:	000da040 	call	da04 <__muldf3>
    59d0:	000d883a 	mov	r6,zero
    59d4:	01d00934 	movhi	r7,16420
    59d8:	8009883a 	mov	r4,r16
    59dc:	880b883a 	mov	r5,r17
    59e0:	102b883a 	mov	r21,r2
    59e4:	1827883a 	mov	r19,r3
    59e8:	000da040 	call	da04 <__muldf3>
    59ec:	180b883a 	mov	r5,r3
    59f0:	1009883a 	mov	r4,r2
    59f4:	1821883a 	mov	r16,r3
    59f8:	1023883a 	mov	r17,r2
    59fc:	000ea180 	call	ea18 <__fixdfsi>
    5a00:	1009883a 	mov	r4,r2
    5a04:	1029883a 	mov	r20,r2
    5a08:	000ea980 	call	ea98 <__floatsidf>
    5a0c:	8809883a 	mov	r4,r17
    5a10:	800b883a 	mov	r5,r16
    5a14:	100d883a 	mov	r6,r2
    5a18:	180f883a 	mov	r7,r3
    5a1c:	000e11c0 	call	e11c <__subdf3>
    5a20:	a5000c04 	addi	r20,r20,48
    5a24:	a80d883a 	mov	r6,r21
    5a28:	980f883a 	mov	r7,r19
    5a2c:	1009883a 	mov	r4,r2
    5a30:	180b883a 	mov	r5,r3
    5a34:	95000005 	stb	r20,0(r18)
    5a38:	1021883a 	mov	r16,r2
    5a3c:	1823883a 	mov	r17,r3
    5a40:	000d9100 	call	d910 <__ledf2>
    5a44:	bdc00044 	addi	r23,r23,1
    5a48:	800d883a 	mov	r6,r16
    5a4c:	880f883a 	mov	r7,r17
    5a50:	0009883a 	mov	r4,zero
    5a54:	014ffc34 	movhi	r5,16368
    5a58:	103fcf0e 	bge	r2,zero,5998 <__alt_data_end+0xff005998>
    5a5c:	d8c01317 	ldw	r3,76(sp)
    5a60:	d8c00515 	stw	r3,20(sp)
    5a64:	d9400917 	ldw	r5,36(sp)
    5a68:	e009883a 	mov	r4,fp
    5a6c:	00082f40 	call	82f4 <_Bfree>
    5a70:	d9000517 	ldw	r4,20(sp)
    5a74:	d9802317 	ldw	r6,140(sp)
    5a78:	d9c02517 	ldw	r7,148(sp)
    5a7c:	b8000005 	stb	zero,0(r23)
    5a80:	20800044 	addi	r2,r4,1
    5a84:	30800015 	stw	r2,0(r6)
    5a88:	3802aa26 	beq	r7,zero,6534 <_dtoa_r+0x1178>
    5a8c:	3dc00015 	stw	r23,0(r7)
    5a90:	d8800717 	ldw	r2,28(sp)
    5a94:	003e7906 	br	547c <__alt_data_end+0xff00547c>
    5a98:	00800434 	movhi	r2,16
    5a9c:	10bfffc4 	addi	r2,r2,-1
    5aa0:	88a2703a 	and	r17,r17,r2
    5aa4:	883e851e 	bne	r17,zero,54bc <__alt_data_end+0xff0054bc>
    5aa8:	00800074 	movhi	r2,1
    5aac:	1086fb04 	addi	r2,r2,7148
    5ab0:	003e8406 	br	54c4 <__alt_data_end+0xff0054c4>
    5ab4:	10c00204 	addi	r3,r2,8
    5ab8:	003e8706 	br	54d8 <__alt_data_end+0xff0054d8>
    5abc:	01400434 	movhi	r5,16
    5ac0:	297fffc4 	addi	r5,r5,-1
    5ac4:	994a703a 	and	r5,r19,r5
    5ac8:	9009883a 	mov	r4,r18
    5acc:	843f0044 	addi	r16,r16,-1023
    5ad0:	294ffc34 	orhi	r5,r5,16368
    5ad4:	dd800217 	ldw	r22,8(sp)
    5ad8:	d8001115 	stw	zero,68(sp)
    5adc:	003ea506 	br	5574 <__alt_data_end+0xff005574>
    5ae0:	00800074 	movhi	r2,1
    5ae4:	1086f204 	addi	r2,r2,7112
    5ae8:	003e6406 	br	547c <__alt_data_end+0xff00547c>
    5aec:	e0001115 	stw	zero,68(fp)
    5af0:	000b883a 	mov	r5,zero
    5af4:	e009883a 	mov	r4,fp
    5af8:	000824c0 	call	824c <_Balloc>
    5afc:	01bfffc4 	movi	r6,-1
    5b00:	01c00044 	movi	r7,1
    5b04:	d8800715 	stw	r2,28(sp)
    5b08:	d9800c15 	stw	r6,48(sp)
    5b0c:	e0801015 	stw	r2,64(fp)
    5b10:	d8000315 	stw	zero,12(sp)
    5b14:	d9c00b15 	stw	r7,44(sp)
    5b18:	d9800615 	stw	r6,24(sp)
    5b1c:	d8002215 	stw	zero,136(sp)
    5b20:	d8800117 	ldw	r2,4(sp)
    5b24:	10008916 	blt	r2,zero,5d4c <_dtoa_r+0x990>
    5b28:	d9000517 	ldw	r4,20(sp)
    5b2c:	00c00384 	movi	r3,14
    5b30:	19008616 	blt	r3,r4,5d4c <_dtoa_r+0x990>
    5b34:	200490fa 	slli	r2,r4,3
    5b38:	00c00074 	movhi	r3,1
    5b3c:	d9802217 	ldw	r6,136(sp)
    5b40:	18c71a04 	addi	r3,r3,7272
    5b44:	1885883a 	add	r2,r3,r2
    5b48:	14000017 	ldw	r16,0(r2)
    5b4c:	14400117 	ldw	r17,4(r2)
    5b50:	30016316 	blt	r6,zero,60e0 <_dtoa_r+0xd24>
    5b54:	800d883a 	mov	r6,r16
    5b58:	880f883a 	mov	r7,r17
    5b5c:	9009883a 	mov	r4,r18
    5b60:	980b883a 	mov	r5,r19
    5b64:	000cec40 	call	cec4 <__divdf3>
    5b68:	180b883a 	mov	r5,r3
    5b6c:	1009883a 	mov	r4,r2
    5b70:	000ea180 	call	ea18 <__fixdfsi>
    5b74:	1009883a 	mov	r4,r2
    5b78:	102b883a 	mov	r21,r2
    5b7c:	000ea980 	call	ea98 <__floatsidf>
    5b80:	800d883a 	mov	r6,r16
    5b84:	880f883a 	mov	r7,r17
    5b88:	1009883a 	mov	r4,r2
    5b8c:	180b883a 	mov	r5,r3
    5b90:	000da040 	call	da04 <__muldf3>
    5b94:	100d883a 	mov	r6,r2
    5b98:	180f883a 	mov	r7,r3
    5b9c:	9009883a 	mov	r4,r18
    5ba0:	980b883a 	mov	r5,r19
    5ba4:	000e11c0 	call	e11c <__subdf3>
    5ba8:	d9c00717 	ldw	r7,28(sp)
    5bac:	1009883a 	mov	r4,r2
    5bb0:	a8800c04 	addi	r2,r21,48
    5bb4:	38800005 	stb	r2,0(r7)
    5bb8:	3dc00044 	addi	r23,r7,1
    5bbc:	d9c00617 	ldw	r7,24(sp)
    5bc0:	01800044 	movi	r6,1
    5bc4:	180b883a 	mov	r5,r3
    5bc8:	2005883a 	mov	r2,r4
    5bcc:	39803826 	beq	r7,r6,5cb0 <_dtoa_r+0x8f4>
    5bd0:	000d883a 	mov	r6,zero
    5bd4:	01d00934 	movhi	r7,16420
    5bd8:	000da040 	call	da04 <__muldf3>
    5bdc:	000d883a 	mov	r6,zero
    5be0:	000f883a 	mov	r7,zero
    5be4:	1009883a 	mov	r4,r2
    5be8:	180b883a 	mov	r5,r3
    5bec:	1025883a 	mov	r18,r2
    5bf0:	1827883a 	mov	r19,r3
    5bf4:	000d7ac0 	call	d7ac <__eqdf2>
    5bf8:	103f9a26 	beq	r2,zero,5a64 <__alt_data_end+0xff005a64>
    5bfc:	d9c00617 	ldw	r7,24(sp)
    5c00:	d8c00717 	ldw	r3,28(sp)
    5c04:	b829883a 	mov	r20,r23
    5c08:	38bfffc4 	addi	r2,r7,-1
    5c0c:	18ad883a 	add	r22,r3,r2
    5c10:	00000a06 	br	5c3c <_dtoa_r+0x880>
    5c14:	000da040 	call	da04 <__muldf3>
    5c18:	000d883a 	mov	r6,zero
    5c1c:	000f883a 	mov	r7,zero
    5c20:	1009883a 	mov	r4,r2
    5c24:	180b883a 	mov	r5,r3
    5c28:	1025883a 	mov	r18,r2
    5c2c:	1827883a 	mov	r19,r3
    5c30:	b829883a 	mov	r20,r23
    5c34:	000d7ac0 	call	d7ac <__eqdf2>
    5c38:	103f8a26 	beq	r2,zero,5a64 <__alt_data_end+0xff005a64>
    5c3c:	800d883a 	mov	r6,r16
    5c40:	880f883a 	mov	r7,r17
    5c44:	9009883a 	mov	r4,r18
    5c48:	980b883a 	mov	r5,r19
    5c4c:	000cec40 	call	cec4 <__divdf3>
    5c50:	180b883a 	mov	r5,r3
    5c54:	1009883a 	mov	r4,r2
    5c58:	000ea180 	call	ea18 <__fixdfsi>
    5c5c:	1009883a 	mov	r4,r2
    5c60:	102b883a 	mov	r21,r2
    5c64:	000ea980 	call	ea98 <__floatsidf>
    5c68:	800d883a 	mov	r6,r16
    5c6c:	880f883a 	mov	r7,r17
    5c70:	1009883a 	mov	r4,r2
    5c74:	180b883a 	mov	r5,r3
    5c78:	000da040 	call	da04 <__muldf3>
    5c7c:	100d883a 	mov	r6,r2
    5c80:	180f883a 	mov	r7,r3
    5c84:	9009883a 	mov	r4,r18
    5c88:	980b883a 	mov	r5,r19
    5c8c:	000e11c0 	call	e11c <__subdf3>
    5c90:	aa000c04 	addi	r8,r21,48
    5c94:	a2000005 	stb	r8,0(r20)
    5c98:	000d883a 	mov	r6,zero
    5c9c:	01d00934 	movhi	r7,16420
    5ca0:	1009883a 	mov	r4,r2
    5ca4:	180b883a 	mov	r5,r3
    5ca8:	a5c00044 	addi	r23,r20,1
    5cac:	b53fd91e 	bne	r22,r20,5c14 <__alt_data_end+0xff005c14>
    5cb0:	100d883a 	mov	r6,r2
    5cb4:	180f883a 	mov	r7,r3
    5cb8:	1009883a 	mov	r4,r2
    5cbc:	180b883a 	mov	r5,r3
    5cc0:	000c6180 	call	c618 <__adddf3>
    5cc4:	100d883a 	mov	r6,r2
    5cc8:	180f883a 	mov	r7,r3
    5ccc:	8009883a 	mov	r4,r16
    5cd0:	880b883a 	mov	r5,r17
    5cd4:	1027883a 	mov	r19,r2
    5cd8:	1825883a 	mov	r18,r3
    5cdc:	000d9100 	call	d910 <__ledf2>
    5ce0:	10000816 	blt	r2,zero,5d04 <_dtoa_r+0x948>
    5ce4:	980d883a 	mov	r6,r19
    5ce8:	900f883a 	mov	r7,r18
    5cec:	8009883a 	mov	r4,r16
    5cf0:	880b883a 	mov	r5,r17
    5cf4:	000d7ac0 	call	d7ac <__eqdf2>
    5cf8:	103f5a1e 	bne	r2,zero,5a64 <__alt_data_end+0xff005a64>
    5cfc:	ad40004c 	andi	r21,r21,1
    5d00:	a83f5826 	beq	r21,zero,5a64 <__alt_data_end+0xff005a64>
    5d04:	bd3fffc3 	ldbu	r20,-1(r23)
    5d08:	b8bfffc4 	addi	r2,r23,-1
    5d0c:	1007883a 	mov	r3,r2
    5d10:	01400e44 	movi	r5,57
    5d14:	d9800717 	ldw	r6,28(sp)
    5d18:	00000506 	br	5d30 <_dtoa_r+0x974>
    5d1c:	18ffffc4 	addi	r3,r3,-1
    5d20:	11824726 	beq	r2,r6,6640 <_dtoa_r+0x1284>
    5d24:	1d000003 	ldbu	r20,0(r3)
    5d28:	102f883a 	mov	r23,r2
    5d2c:	10bfffc4 	addi	r2,r2,-1
    5d30:	a1003fcc 	andi	r4,r20,255
    5d34:	2100201c 	xori	r4,r4,128
    5d38:	213fe004 	addi	r4,r4,-128
    5d3c:	217ff726 	beq	r4,r5,5d1c <__alt_data_end+0xff005d1c>
    5d40:	a2000044 	addi	r8,r20,1
    5d44:	12000005 	stb	r8,0(r2)
    5d48:	003f4606 	br	5a64 <__alt_data_end+0xff005a64>
    5d4c:	d9000b17 	ldw	r4,44(sp)
    5d50:	2000c826 	beq	r4,zero,6074 <_dtoa_r+0xcb8>
    5d54:	d9800317 	ldw	r6,12(sp)
    5d58:	00c00044 	movi	r3,1
    5d5c:	1980f90e 	bge	r3,r6,6144 <_dtoa_r+0xd88>
    5d60:	d8800617 	ldw	r2,24(sp)
    5d64:	d8c00a17 	ldw	r3,40(sp)
    5d68:	157fffc4 	addi	r21,r2,-1
    5d6c:	1d41f316 	blt	r3,r21,653c <_dtoa_r+0x1180>
    5d70:	1d6bc83a 	sub	r21,r3,r21
    5d74:	d9c00617 	ldw	r7,24(sp)
    5d78:	3802aa16 	blt	r7,zero,6824 <_dtoa_r+0x1468>
    5d7c:	dd000817 	ldw	r20,32(sp)
    5d80:	d8800617 	ldw	r2,24(sp)
    5d84:	d8c00817 	ldw	r3,32(sp)
    5d88:	01400044 	movi	r5,1
    5d8c:	e009883a 	mov	r4,fp
    5d90:	1887883a 	add	r3,r3,r2
    5d94:	d8c00815 	stw	r3,32(sp)
    5d98:	b0ad883a 	add	r22,r22,r2
    5d9c:	00086580 	call	8658 <__i2b>
    5da0:	1023883a 	mov	r17,r2
    5da4:	a0000826 	beq	r20,zero,5dc8 <_dtoa_r+0xa0c>
    5da8:	0580070e 	bge	zero,r22,5dc8 <_dtoa_r+0xa0c>
    5dac:	a005883a 	mov	r2,r20
    5db0:	b500b916 	blt	r22,r20,6098 <_dtoa_r+0xcdc>
    5db4:	d9000817 	ldw	r4,32(sp)
    5db8:	a0a9c83a 	sub	r20,r20,r2
    5dbc:	b0adc83a 	sub	r22,r22,r2
    5dc0:	2089c83a 	sub	r4,r4,r2
    5dc4:	d9000815 	stw	r4,32(sp)
    5dc8:	d9800a17 	ldw	r6,40(sp)
    5dcc:	0181810e 	bge	zero,r6,63d4 <_dtoa_r+0x1018>
    5dd0:	d9c00b17 	ldw	r7,44(sp)
    5dd4:	3800b326 	beq	r7,zero,60a4 <_dtoa_r+0xce8>
    5dd8:	a800b226 	beq	r21,zero,60a4 <_dtoa_r+0xce8>
    5ddc:	880b883a 	mov	r5,r17
    5de0:	a80d883a 	mov	r6,r21
    5de4:	e009883a 	mov	r4,fp
    5de8:	000888c0 	call	888c <__pow5mult>
    5dec:	d9800917 	ldw	r6,36(sp)
    5df0:	100b883a 	mov	r5,r2
    5df4:	e009883a 	mov	r4,fp
    5df8:	1023883a 	mov	r17,r2
    5dfc:	00086940 	call	8694 <__multiply>
    5e00:	1021883a 	mov	r16,r2
    5e04:	d8800a17 	ldw	r2,40(sp)
    5e08:	d9400917 	ldw	r5,36(sp)
    5e0c:	e009883a 	mov	r4,fp
    5e10:	1545c83a 	sub	r2,r2,r21
    5e14:	d8800a15 	stw	r2,40(sp)
    5e18:	00082f40 	call	82f4 <_Bfree>
    5e1c:	d8c00a17 	ldw	r3,40(sp)
    5e20:	18009f1e 	bne	r3,zero,60a0 <_dtoa_r+0xce4>
    5e24:	05c00044 	movi	r23,1
    5e28:	e009883a 	mov	r4,fp
    5e2c:	b80b883a 	mov	r5,r23
    5e30:	00086580 	call	8658 <__i2b>
    5e34:	d9000d17 	ldw	r4,52(sp)
    5e38:	102b883a 	mov	r21,r2
    5e3c:	2000ce26 	beq	r4,zero,6178 <_dtoa_r+0xdbc>
    5e40:	200d883a 	mov	r6,r4
    5e44:	100b883a 	mov	r5,r2
    5e48:	e009883a 	mov	r4,fp
    5e4c:	000888c0 	call	888c <__pow5mult>
    5e50:	d9800317 	ldw	r6,12(sp)
    5e54:	102b883a 	mov	r21,r2
    5e58:	b981810e 	bge	r23,r6,6460 <_dtoa_r+0x10a4>
    5e5c:	0027883a 	mov	r19,zero
    5e60:	a8800417 	ldw	r2,16(r21)
    5e64:	05c00804 	movi	r23,32
    5e68:	10800104 	addi	r2,r2,4
    5e6c:	1085883a 	add	r2,r2,r2
    5e70:	1085883a 	add	r2,r2,r2
    5e74:	a885883a 	add	r2,r21,r2
    5e78:	11000017 	ldw	r4,0(r2)
    5e7c:	00085400 	call	8540 <__hi0bits>
    5e80:	b885c83a 	sub	r2,r23,r2
    5e84:	1585883a 	add	r2,r2,r22
    5e88:	108007cc 	andi	r2,r2,31
    5e8c:	1000b326 	beq	r2,zero,615c <_dtoa_r+0xda0>
    5e90:	00c00804 	movi	r3,32
    5e94:	1887c83a 	sub	r3,r3,r2
    5e98:	01000104 	movi	r4,4
    5e9c:	20c2cd0e 	bge	r4,r3,69d4 <_dtoa_r+0x1618>
    5ea0:	00c00704 	movi	r3,28
    5ea4:	1885c83a 	sub	r2,r3,r2
    5ea8:	d8c00817 	ldw	r3,32(sp)
    5eac:	a0a9883a 	add	r20,r20,r2
    5eb0:	b0ad883a 	add	r22,r22,r2
    5eb4:	1887883a 	add	r3,r3,r2
    5eb8:	d8c00815 	stw	r3,32(sp)
    5ebc:	d9800817 	ldw	r6,32(sp)
    5ec0:	0180040e 	bge	zero,r6,5ed4 <_dtoa_r+0xb18>
    5ec4:	800b883a 	mov	r5,r16
    5ec8:	e009883a 	mov	r4,fp
    5ecc:	00089cc0 	call	89cc <__lshift>
    5ed0:	1021883a 	mov	r16,r2
    5ed4:	0580050e 	bge	zero,r22,5eec <_dtoa_r+0xb30>
    5ed8:	a80b883a 	mov	r5,r21
    5edc:	b00d883a 	mov	r6,r22
    5ee0:	e009883a 	mov	r4,fp
    5ee4:	00089cc0 	call	89cc <__lshift>
    5ee8:	102b883a 	mov	r21,r2
    5eec:	d9c00e17 	ldw	r7,56(sp)
    5ef0:	3801211e 	bne	r7,zero,6378 <_dtoa_r+0xfbc>
    5ef4:	d9800617 	ldw	r6,24(sp)
    5ef8:	0181380e 	bge	zero,r6,63dc <_dtoa_r+0x1020>
    5efc:	d8c00b17 	ldw	r3,44(sp)
    5f00:	1800ab1e 	bne	r3,zero,61b0 <_dtoa_r+0xdf4>
    5f04:	dc800717 	ldw	r18,28(sp)
    5f08:	dcc00617 	ldw	r19,24(sp)
    5f0c:	9029883a 	mov	r20,r18
    5f10:	00000206 	br	5f1c <_dtoa_r+0xb60>
    5f14:	000831c0 	call	831c <__multadd>
    5f18:	1021883a 	mov	r16,r2
    5f1c:	a80b883a 	mov	r5,r21
    5f20:	8009883a 	mov	r4,r16
    5f24:	00051bc0 	call	51bc <quorem>
    5f28:	10800c04 	addi	r2,r2,48
    5f2c:	90800005 	stb	r2,0(r18)
    5f30:	94800044 	addi	r18,r18,1
    5f34:	9507c83a 	sub	r3,r18,r20
    5f38:	000f883a 	mov	r7,zero
    5f3c:	01800284 	movi	r6,10
    5f40:	800b883a 	mov	r5,r16
    5f44:	e009883a 	mov	r4,fp
    5f48:	1cfff216 	blt	r3,r19,5f14 <__alt_data_end+0xff005f14>
    5f4c:	1011883a 	mov	r8,r2
    5f50:	d8800617 	ldw	r2,24(sp)
    5f54:	0082370e 	bge	zero,r2,6834 <_dtoa_r+0x1478>
    5f58:	d9000717 	ldw	r4,28(sp)
    5f5c:	0025883a 	mov	r18,zero
    5f60:	20af883a 	add	r23,r4,r2
    5f64:	01800044 	movi	r6,1
    5f68:	800b883a 	mov	r5,r16
    5f6c:	e009883a 	mov	r4,fp
    5f70:	da001715 	stw	r8,92(sp)
    5f74:	00089cc0 	call	89cc <__lshift>
    5f78:	a80b883a 	mov	r5,r21
    5f7c:	1009883a 	mov	r4,r2
    5f80:	d8800915 	stw	r2,36(sp)
    5f84:	0008b140 	call	8b14 <__mcmp>
    5f88:	da001717 	ldw	r8,92(sp)
    5f8c:	0081800e 	bge	zero,r2,6590 <_dtoa_r+0x11d4>
    5f90:	b93fffc3 	ldbu	r4,-1(r23)
    5f94:	b8bfffc4 	addi	r2,r23,-1
    5f98:	1007883a 	mov	r3,r2
    5f9c:	01800e44 	movi	r6,57
    5fa0:	d9c00717 	ldw	r7,28(sp)
    5fa4:	00000506 	br	5fbc <_dtoa_r+0xc00>
    5fa8:	18ffffc4 	addi	r3,r3,-1
    5fac:	11c12326 	beq	r2,r7,643c <_dtoa_r+0x1080>
    5fb0:	19000003 	ldbu	r4,0(r3)
    5fb4:	102f883a 	mov	r23,r2
    5fb8:	10bfffc4 	addi	r2,r2,-1
    5fbc:	21403fcc 	andi	r5,r4,255
    5fc0:	2940201c 	xori	r5,r5,128
    5fc4:	297fe004 	addi	r5,r5,-128
    5fc8:	29bff726 	beq	r5,r6,5fa8 <__alt_data_end+0xff005fa8>
    5fcc:	21000044 	addi	r4,r4,1
    5fd0:	11000005 	stb	r4,0(r2)
    5fd4:	a80b883a 	mov	r5,r21
    5fd8:	e009883a 	mov	r4,fp
    5fdc:	00082f40 	call	82f4 <_Bfree>
    5fe0:	883ea026 	beq	r17,zero,5a64 <__alt_data_end+0xff005a64>
    5fe4:	90000426 	beq	r18,zero,5ff8 <_dtoa_r+0xc3c>
    5fe8:	94400326 	beq	r18,r17,5ff8 <_dtoa_r+0xc3c>
    5fec:	900b883a 	mov	r5,r18
    5ff0:	e009883a 	mov	r4,fp
    5ff4:	00082f40 	call	82f4 <_Bfree>
    5ff8:	880b883a 	mov	r5,r17
    5ffc:	e009883a 	mov	r4,fp
    6000:	00082f40 	call	82f4 <_Bfree>
    6004:	003e9706 	br	5a64 <__alt_data_end+0xff005a64>
    6008:	01800044 	movi	r6,1
    600c:	d9800e15 	stw	r6,56(sp)
    6010:	003d9606 	br	566c <__alt_data_end+0xff00566c>
    6014:	d8800817 	ldw	r2,32(sp)
    6018:	d8c00517 	ldw	r3,20(sp)
    601c:	d8000d15 	stw	zero,52(sp)
    6020:	10c5c83a 	sub	r2,r2,r3
    6024:	00c9c83a 	sub	r4,zero,r3
    6028:	d8800815 	stw	r2,32(sp)
    602c:	d9000a15 	stw	r4,40(sp)
    6030:	003d9706 	br	5690 <__alt_data_end+0xff005690>
    6034:	05adc83a 	sub	r22,zero,r22
    6038:	dd800815 	stw	r22,32(sp)
    603c:	002d883a 	mov	r22,zero
    6040:	003d8e06 	br	567c <__alt_data_end+0xff00567c>
    6044:	d9000517 	ldw	r4,20(sp)
    6048:	000ea980 	call	ea98 <__floatsidf>
    604c:	100d883a 	mov	r6,r2
    6050:	180f883a 	mov	r7,r3
    6054:	a009883a 	mov	r4,r20
    6058:	880b883a 	mov	r5,r17
    605c:	000d7ac0 	call	d7ac <__eqdf2>
    6060:	103d7126 	beq	r2,zero,5628 <__alt_data_end+0xff005628>
    6064:	d9c00517 	ldw	r7,20(sp)
    6068:	39ffffc4 	addi	r7,r7,-1
    606c:	d9c00515 	stw	r7,20(sp)
    6070:	003d6d06 	br	5628 <__alt_data_end+0xff005628>
    6074:	dd400a17 	ldw	r21,40(sp)
    6078:	dd000817 	ldw	r20,32(sp)
    607c:	0023883a 	mov	r17,zero
    6080:	003f4806 	br	5da4 <__alt_data_end+0xff005da4>
    6084:	10e3c83a 	sub	r17,r2,r3
    6088:	9448983a 	sll	r4,r18,r17
    608c:	003d3206 	br	5558 <__alt_data_end+0xff005558>
    6090:	d8000e15 	stw	zero,56(sp)
    6094:	003d7506 	br	566c <__alt_data_end+0xff00566c>
    6098:	b005883a 	mov	r2,r22
    609c:	003f4506 	br	5db4 <__alt_data_end+0xff005db4>
    60a0:	dc000915 	stw	r16,36(sp)
    60a4:	d9800a17 	ldw	r6,40(sp)
    60a8:	d9400917 	ldw	r5,36(sp)
    60ac:	e009883a 	mov	r4,fp
    60b0:	000888c0 	call	888c <__pow5mult>
    60b4:	1021883a 	mov	r16,r2
    60b8:	003f5a06 	br	5e24 <__alt_data_end+0xff005e24>
    60bc:	01c00044 	movi	r7,1
    60c0:	d9c00b15 	stw	r7,44(sp)
    60c4:	d8802217 	ldw	r2,136(sp)
    60c8:	0081280e 	bge	zero,r2,656c <_dtoa_r+0x11b0>
    60cc:	100d883a 	mov	r6,r2
    60d0:	1021883a 	mov	r16,r2
    60d4:	d8800c15 	stw	r2,48(sp)
    60d8:	d8800615 	stw	r2,24(sp)
    60dc:	003d8806 	br	5700 <__alt_data_end+0xff005700>
    60e0:	d8800617 	ldw	r2,24(sp)
    60e4:	00be9b16 	blt	zero,r2,5b54 <__alt_data_end+0xff005b54>
    60e8:	10010f1e 	bne	r2,zero,6528 <_dtoa_r+0x116c>
    60ec:	880b883a 	mov	r5,r17
    60f0:	000d883a 	mov	r6,zero
    60f4:	01d00534 	movhi	r7,16404
    60f8:	8009883a 	mov	r4,r16
    60fc:	000da040 	call	da04 <__muldf3>
    6100:	900d883a 	mov	r6,r18
    6104:	980f883a 	mov	r7,r19
    6108:	1009883a 	mov	r4,r2
    610c:	180b883a 	mov	r5,r3
    6110:	000d8340 	call	d834 <__gedf2>
    6114:	002b883a 	mov	r21,zero
    6118:	0023883a 	mov	r17,zero
    611c:	1000bf16 	blt	r2,zero,641c <_dtoa_r+0x1060>
    6120:	d9802217 	ldw	r6,136(sp)
    6124:	ddc00717 	ldw	r23,28(sp)
    6128:	018c303a 	nor	r6,zero,r6
    612c:	d9800515 	stw	r6,20(sp)
    6130:	a80b883a 	mov	r5,r21
    6134:	e009883a 	mov	r4,fp
    6138:	00082f40 	call	82f4 <_Bfree>
    613c:	883e4926 	beq	r17,zero,5a64 <__alt_data_end+0xff005a64>
    6140:	003fad06 	br	5ff8 <__alt_data_end+0xff005ff8>
    6144:	d9c01117 	ldw	r7,68(sp)
    6148:	3801bc26 	beq	r7,zero,683c <_dtoa_r+0x1480>
    614c:	10810cc4 	addi	r2,r2,1075
    6150:	dd400a17 	ldw	r21,40(sp)
    6154:	dd000817 	ldw	r20,32(sp)
    6158:	003f0a06 	br	5d84 <__alt_data_end+0xff005d84>
    615c:	00800704 	movi	r2,28
    6160:	d9000817 	ldw	r4,32(sp)
    6164:	a0a9883a 	add	r20,r20,r2
    6168:	b0ad883a 	add	r22,r22,r2
    616c:	2089883a 	add	r4,r4,r2
    6170:	d9000815 	stw	r4,32(sp)
    6174:	003f5106 	br	5ebc <__alt_data_end+0xff005ebc>
    6178:	d8c00317 	ldw	r3,12(sp)
    617c:	b8c1fc0e 	bge	r23,r3,6970 <_dtoa_r+0x15b4>
    6180:	0027883a 	mov	r19,zero
    6184:	b805883a 	mov	r2,r23
    6188:	003f3e06 	br	5e84 <__alt_data_end+0xff005e84>
    618c:	880b883a 	mov	r5,r17
    6190:	e009883a 	mov	r4,fp
    6194:	000f883a 	mov	r7,zero
    6198:	01800284 	movi	r6,10
    619c:	000831c0 	call	831c <__multadd>
    61a0:	d9000c17 	ldw	r4,48(sp)
    61a4:	1023883a 	mov	r17,r2
    61a8:	0102040e 	bge	zero,r4,69bc <_dtoa_r+0x1600>
    61ac:	d9000615 	stw	r4,24(sp)
    61b0:	0500050e 	bge	zero,r20,61c8 <_dtoa_r+0xe0c>
    61b4:	880b883a 	mov	r5,r17
    61b8:	a00d883a 	mov	r6,r20
    61bc:	e009883a 	mov	r4,fp
    61c0:	00089cc0 	call	89cc <__lshift>
    61c4:	1023883a 	mov	r17,r2
    61c8:	9801241e 	bne	r19,zero,665c <_dtoa_r+0x12a0>
    61cc:	8829883a 	mov	r20,r17
    61d0:	d9000617 	ldw	r4,24(sp)
    61d4:	dcc00717 	ldw	r19,28(sp)
    61d8:	9480004c 	andi	r18,r18,1
    61dc:	20bfffc4 	addi	r2,r4,-1
    61e0:	9885883a 	add	r2,r19,r2
    61e4:	d8800415 	stw	r2,16(sp)
    61e8:	dc800615 	stw	r18,24(sp)
    61ec:	a80b883a 	mov	r5,r21
    61f0:	8009883a 	mov	r4,r16
    61f4:	00051bc0 	call	51bc <quorem>
    61f8:	880b883a 	mov	r5,r17
    61fc:	8009883a 	mov	r4,r16
    6200:	102f883a 	mov	r23,r2
    6204:	0008b140 	call	8b14 <__mcmp>
    6208:	a80b883a 	mov	r5,r21
    620c:	a00d883a 	mov	r6,r20
    6210:	e009883a 	mov	r4,fp
    6214:	102d883a 	mov	r22,r2
    6218:	0008b740 	call	8b74 <__mdiff>
    621c:	1007883a 	mov	r3,r2
    6220:	10800317 	ldw	r2,12(r2)
    6224:	bc800c04 	addi	r18,r23,48
    6228:	180b883a 	mov	r5,r3
    622c:	10004e1e 	bne	r2,zero,6368 <_dtoa_r+0xfac>
    6230:	8009883a 	mov	r4,r16
    6234:	d8c01615 	stw	r3,88(sp)
    6238:	0008b140 	call	8b14 <__mcmp>
    623c:	d8c01617 	ldw	r3,88(sp)
    6240:	e009883a 	mov	r4,fp
    6244:	d8801615 	stw	r2,88(sp)
    6248:	180b883a 	mov	r5,r3
    624c:	00082f40 	call	82f4 <_Bfree>
    6250:	d8801617 	ldw	r2,88(sp)
    6254:	1000041e 	bne	r2,zero,6268 <_dtoa_r+0xeac>
    6258:	d9800317 	ldw	r6,12(sp)
    625c:	3000021e 	bne	r6,zero,6268 <_dtoa_r+0xeac>
    6260:	d8c00617 	ldw	r3,24(sp)
    6264:	18003726 	beq	r3,zero,6344 <_dtoa_r+0xf88>
    6268:	b0002016 	blt	r22,zero,62ec <_dtoa_r+0xf30>
    626c:	b000041e 	bne	r22,zero,6280 <_dtoa_r+0xec4>
    6270:	d9000317 	ldw	r4,12(sp)
    6274:	2000021e 	bne	r4,zero,6280 <_dtoa_r+0xec4>
    6278:	d8c00617 	ldw	r3,24(sp)
    627c:	18001b26 	beq	r3,zero,62ec <_dtoa_r+0xf30>
    6280:	00810716 	blt	zero,r2,66a0 <_dtoa_r+0x12e4>
    6284:	d8c00417 	ldw	r3,16(sp)
    6288:	9d800044 	addi	r22,r19,1
    628c:	9c800005 	stb	r18,0(r19)
    6290:	b02f883a 	mov	r23,r22
    6294:	98c10626 	beq	r19,r3,66b0 <_dtoa_r+0x12f4>
    6298:	800b883a 	mov	r5,r16
    629c:	000f883a 	mov	r7,zero
    62a0:	01800284 	movi	r6,10
    62a4:	e009883a 	mov	r4,fp
    62a8:	000831c0 	call	831c <__multadd>
    62ac:	1021883a 	mov	r16,r2
    62b0:	000f883a 	mov	r7,zero
    62b4:	01800284 	movi	r6,10
    62b8:	880b883a 	mov	r5,r17
    62bc:	e009883a 	mov	r4,fp
    62c0:	8d002526 	beq	r17,r20,6358 <_dtoa_r+0xf9c>
    62c4:	000831c0 	call	831c <__multadd>
    62c8:	a00b883a 	mov	r5,r20
    62cc:	000f883a 	mov	r7,zero
    62d0:	01800284 	movi	r6,10
    62d4:	e009883a 	mov	r4,fp
    62d8:	1023883a 	mov	r17,r2
    62dc:	000831c0 	call	831c <__multadd>
    62e0:	1029883a 	mov	r20,r2
    62e4:	b027883a 	mov	r19,r22
    62e8:	003fc006 	br	61ec <__alt_data_end+0xff0061ec>
    62ec:	9011883a 	mov	r8,r18
    62f0:	00800e0e 	bge	zero,r2,632c <_dtoa_r+0xf70>
    62f4:	800b883a 	mov	r5,r16
    62f8:	01800044 	movi	r6,1
    62fc:	e009883a 	mov	r4,fp
    6300:	da001715 	stw	r8,92(sp)
    6304:	00089cc0 	call	89cc <__lshift>
    6308:	a80b883a 	mov	r5,r21
    630c:	1009883a 	mov	r4,r2
    6310:	1021883a 	mov	r16,r2
    6314:	0008b140 	call	8b14 <__mcmp>
    6318:	da001717 	ldw	r8,92(sp)
    631c:	0081960e 	bge	zero,r2,6978 <_dtoa_r+0x15bc>
    6320:	00800e44 	movi	r2,57
    6324:	40817026 	beq	r8,r2,68e8 <_dtoa_r+0x152c>
    6328:	ba000c44 	addi	r8,r23,49
    632c:	8825883a 	mov	r18,r17
    6330:	9dc00044 	addi	r23,r19,1
    6334:	9a000005 	stb	r8,0(r19)
    6338:	a023883a 	mov	r17,r20
    633c:	dc000915 	stw	r16,36(sp)
    6340:	003f2406 	br	5fd4 <__alt_data_end+0xff005fd4>
    6344:	00800e44 	movi	r2,57
    6348:	9011883a 	mov	r8,r18
    634c:	90816626 	beq	r18,r2,68e8 <_dtoa_r+0x152c>
    6350:	05bff516 	blt	zero,r22,6328 <__alt_data_end+0xff006328>
    6354:	003ff506 	br	632c <__alt_data_end+0xff00632c>
    6358:	000831c0 	call	831c <__multadd>
    635c:	1023883a 	mov	r17,r2
    6360:	1029883a 	mov	r20,r2
    6364:	003fdf06 	br	62e4 <__alt_data_end+0xff0062e4>
    6368:	e009883a 	mov	r4,fp
    636c:	00082f40 	call	82f4 <_Bfree>
    6370:	00800044 	movi	r2,1
    6374:	003fbc06 	br	6268 <__alt_data_end+0xff006268>
    6378:	a80b883a 	mov	r5,r21
    637c:	8009883a 	mov	r4,r16
    6380:	0008b140 	call	8b14 <__mcmp>
    6384:	103edb0e 	bge	r2,zero,5ef4 <__alt_data_end+0xff005ef4>
    6388:	800b883a 	mov	r5,r16
    638c:	000f883a 	mov	r7,zero
    6390:	01800284 	movi	r6,10
    6394:	e009883a 	mov	r4,fp
    6398:	000831c0 	call	831c <__multadd>
    639c:	1021883a 	mov	r16,r2
    63a0:	d8800517 	ldw	r2,20(sp)
    63a4:	d8c00b17 	ldw	r3,44(sp)
    63a8:	10bfffc4 	addi	r2,r2,-1
    63ac:	d8800515 	stw	r2,20(sp)
    63b0:	183f761e 	bne	r3,zero,618c <__alt_data_end+0xff00618c>
    63b4:	d9000c17 	ldw	r4,48(sp)
    63b8:	0101730e 	bge	zero,r4,6988 <_dtoa_r+0x15cc>
    63bc:	d9000615 	stw	r4,24(sp)
    63c0:	003ed006 	br	5f04 <__alt_data_end+0xff005f04>
    63c4:	00800084 	movi	r2,2
    63c8:	3081861e 	bne	r6,r2,69e4 <_dtoa_r+0x1628>
    63cc:	d8000b15 	stw	zero,44(sp)
    63d0:	003f3c06 	br	60c4 <__alt_data_end+0xff0060c4>
    63d4:	dc000917 	ldw	r16,36(sp)
    63d8:	003e9206 	br	5e24 <__alt_data_end+0xff005e24>
    63dc:	d9c00317 	ldw	r7,12(sp)
    63e0:	00800084 	movi	r2,2
    63e4:	11fec50e 	bge	r2,r7,5efc <__alt_data_end+0xff005efc>
    63e8:	d9000617 	ldw	r4,24(sp)
    63ec:	20013c1e 	bne	r4,zero,68e0 <_dtoa_r+0x1524>
    63f0:	a80b883a 	mov	r5,r21
    63f4:	000f883a 	mov	r7,zero
    63f8:	01800144 	movi	r6,5
    63fc:	e009883a 	mov	r4,fp
    6400:	000831c0 	call	831c <__multadd>
    6404:	100b883a 	mov	r5,r2
    6408:	8009883a 	mov	r4,r16
    640c:	102b883a 	mov	r21,r2
    6410:	0008b140 	call	8b14 <__mcmp>
    6414:	dc000915 	stw	r16,36(sp)
    6418:	00bf410e 	bge	zero,r2,6120 <__alt_data_end+0xff006120>
    641c:	d9c00717 	ldw	r7,28(sp)
    6420:	00800c44 	movi	r2,49
    6424:	38800005 	stb	r2,0(r7)
    6428:	d8800517 	ldw	r2,20(sp)
    642c:	3dc00044 	addi	r23,r7,1
    6430:	10800044 	addi	r2,r2,1
    6434:	d8800515 	stw	r2,20(sp)
    6438:	003f3d06 	br	6130 <__alt_data_end+0xff006130>
    643c:	d9800517 	ldw	r6,20(sp)
    6440:	d9c00717 	ldw	r7,28(sp)
    6444:	00800c44 	movi	r2,49
    6448:	31800044 	addi	r6,r6,1
    644c:	d9800515 	stw	r6,20(sp)
    6450:	38800005 	stb	r2,0(r7)
    6454:	003edf06 	br	5fd4 <__alt_data_end+0xff005fd4>
    6458:	d8000b15 	stw	zero,44(sp)
    645c:	003c9f06 	br	56dc <__alt_data_end+0xff0056dc>
    6460:	903e7e1e 	bne	r18,zero,5e5c <__alt_data_end+0xff005e5c>
    6464:	00800434 	movhi	r2,16
    6468:	10bfffc4 	addi	r2,r2,-1
    646c:	9884703a 	and	r2,r19,r2
    6470:	1000ea1e 	bne	r2,zero,681c <_dtoa_r+0x1460>
    6474:	9cdffc2c 	andhi	r19,r19,32752
    6478:	9800e826 	beq	r19,zero,681c <_dtoa_r+0x1460>
    647c:	d9c00817 	ldw	r7,32(sp)
    6480:	b5800044 	addi	r22,r22,1
    6484:	04c00044 	movi	r19,1
    6488:	39c00044 	addi	r7,r7,1
    648c:	d9c00815 	stw	r7,32(sp)
    6490:	d8800d17 	ldw	r2,52(sp)
    6494:	103e721e 	bne	r2,zero,5e60 <__alt_data_end+0xff005e60>
    6498:	00800044 	movi	r2,1
    649c:	003e7906 	br	5e84 <__alt_data_end+0xff005e84>
    64a0:	8009883a 	mov	r4,r16
    64a4:	000ea980 	call	ea98 <__floatsidf>
    64a8:	d9800f17 	ldw	r6,60(sp)
    64ac:	d9c01017 	ldw	r7,64(sp)
    64b0:	1009883a 	mov	r4,r2
    64b4:	180b883a 	mov	r5,r3
    64b8:	000da040 	call	da04 <__muldf3>
    64bc:	000d883a 	mov	r6,zero
    64c0:	01d00734 	movhi	r7,16412
    64c4:	1009883a 	mov	r4,r2
    64c8:	180b883a 	mov	r5,r3
    64cc:	000c6180 	call	c618 <__adddf3>
    64d0:	047f3034 	movhi	r17,64704
    64d4:	1021883a 	mov	r16,r2
    64d8:	1c63883a 	add	r17,r3,r17
    64dc:	d9000f17 	ldw	r4,60(sp)
    64e0:	d9401017 	ldw	r5,64(sp)
    64e4:	000d883a 	mov	r6,zero
    64e8:	01d00534 	movhi	r7,16404
    64ec:	000e11c0 	call	e11c <__subdf3>
    64f0:	800d883a 	mov	r6,r16
    64f4:	880f883a 	mov	r7,r17
    64f8:	1009883a 	mov	r4,r2
    64fc:	180b883a 	mov	r5,r3
    6500:	102b883a 	mov	r21,r2
    6504:	1829883a 	mov	r20,r3
    6508:	000d8340 	call	d834 <__gedf2>
    650c:	00806c16 	blt	zero,r2,66c0 <_dtoa_r+0x1304>
    6510:	89e0003c 	xorhi	r7,r17,32768
    6514:	800d883a 	mov	r6,r16
    6518:	a809883a 	mov	r4,r21
    651c:	a00b883a 	mov	r5,r20
    6520:	000d9100 	call	d910 <__ledf2>
    6524:	103d7e0e 	bge	r2,zero,5b20 <__alt_data_end+0xff005b20>
    6528:	002b883a 	mov	r21,zero
    652c:	0023883a 	mov	r17,zero
    6530:	003efb06 	br	6120 <__alt_data_end+0xff006120>
    6534:	d8800717 	ldw	r2,28(sp)
    6538:	003bd006 	br	547c <__alt_data_end+0xff00547c>
    653c:	d9000a17 	ldw	r4,40(sp)
    6540:	d9800d17 	ldw	r6,52(sp)
    6544:	dd400a15 	stw	r21,40(sp)
    6548:	a905c83a 	sub	r2,r21,r4
    654c:	308d883a 	add	r6,r6,r2
    6550:	d9800d15 	stw	r6,52(sp)
    6554:	002b883a 	mov	r21,zero
    6558:	003e0606 	br	5d74 <__alt_data_end+0xff005d74>
    655c:	9023883a 	mov	r17,r18
    6560:	9829883a 	mov	r20,r19
    6564:	04000084 	movi	r16,2
    6568:	003c9206 	br	57b4 <__alt_data_end+0xff0057b4>
    656c:	04000044 	movi	r16,1
    6570:	dc000c15 	stw	r16,48(sp)
    6574:	dc000615 	stw	r16,24(sp)
    6578:	dc002215 	stw	r16,136(sp)
    657c:	e0001115 	stw	zero,68(fp)
    6580:	000b883a 	mov	r5,zero
    6584:	003c6906 	br	572c <__alt_data_end+0xff00572c>
    6588:	3021883a 	mov	r16,r6
    658c:	003ffb06 	br	657c <__alt_data_end+0xff00657c>
    6590:	1000021e 	bne	r2,zero,659c <_dtoa_r+0x11e0>
    6594:	4200004c 	andi	r8,r8,1
    6598:	403e7d1e 	bne	r8,zero,5f90 <__alt_data_end+0xff005f90>
    659c:	01000c04 	movi	r4,48
    65a0:	00000106 	br	65a8 <_dtoa_r+0x11ec>
    65a4:	102f883a 	mov	r23,r2
    65a8:	b8bfffc4 	addi	r2,r23,-1
    65ac:	10c00007 	ldb	r3,0(r2)
    65b0:	193ffc26 	beq	r3,r4,65a4 <__alt_data_end+0xff0065a4>
    65b4:	003e8706 	br	5fd4 <__alt_data_end+0xff005fd4>
    65b8:	d8800517 	ldw	r2,20(sp)
    65bc:	00a3c83a 	sub	r17,zero,r2
    65c0:	8800a426 	beq	r17,zero,6854 <_dtoa_r+0x1498>
    65c4:	888003cc 	andi	r2,r17,15
    65c8:	100490fa 	slli	r2,r2,3
    65cc:	00c00074 	movhi	r3,1
    65d0:	18c71a04 	addi	r3,r3,7272
    65d4:	1885883a 	add	r2,r3,r2
    65d8:	11800017 	ldw	r6,0(r2)
    65dc:	11c00117 	ldw	r7,4(r2)
    65e0:	9009883a 	mov	r4,r18
    65e4:	980b883a 	mov	r5,r19
    65e8:	8823d13a 	srai	r17,r17,4
    65ec:	000da040 	call	da04 <__muldf3>
    65f0:	d8800f15 	stw	r2,60(sp)
    65f4:	d8c01015 	stw	r3,64(sp)
    65f8:	8800e826 	beq	r17,zero,699c <_dtoa_r+0x15e0>
    65fc:	05000074 	movhi	r20,1
    6600:	a5071004 	addi	r20,r20,7232
    6604:	04000084 	movi	r16,2
    6608:	8980004c 	andi	r6,r17,1
    660c:	1009883a 	mov	r4,r2
    6610:	8823d07a 	srai	r17,r17,1
    6614:	180b883a 	mov	r5,r3
    6618:	30000426 	beq	r6,zero,662c <_dtoa_r+0x1270>
    661c:	a1800017 	ldw	r6,0(r20)
    6620:	a1c00117 	ldw	r7,4(r20)
    6624:	84000044 	addi	r16,r16,1
    6628:	000da040 	call	da04 <__muldf3>
    662c:	a5000204 	addi	r20,r20,8
    6630:	883ff51e 	bne	r17,zero,6608 <__alt_data_end+0xff006608>
    6634:	d8800f15 	stw	r2,60(sp)
    6638:	d8c01015 	stw	r3,64(sp)
    663c:	003c7606 	br	5818 <__alt_data_end+0xff005818>
    6640:	00c00c04 	movi	r3,48
    6644:	10c00005 	stb	r3,0(r2)
    6648:	d8c00517 	ldw	r3,20(sp)
    664c:	bd3fffc3 	ldbu	r20,-1(r23)
    6650:	18c00044 	addi	r3,r3,1
    6654:	d8c00515 	stw	r3,20(sp)
    6658:	003db906 	br	5d40 <__alt_data_end+0xff005d40>
    665c:	89400117 	ldw	r5,4(r17)
    6660:	e009883a 	mov	r4,fp
    6664:	000824c0 	call	824c <_Balloc>
    6668:	89800417 	ldw	r6,16(r17)
    666c:	89400304 	addi	r5,r17,12
    6670:	11000304 	addi	r4,r2,12
    6674:	31800084 	addi	r6,r6,2
    6678:	318d883a 	add	r6,r6,r6
    667c:	318d883a 	add	r6,r6,r6
    6680:	1027883a 	mov	r19,r2
    6684:	0007e800 	call	7e80 <memcpy>
    6688:	01800044 	movi	r6,1
    668c:	980b883a 	mov	r5,r19
    6690:	e009883a 	mov	r4,fp
    6694:	00089cc0 	call	89cc <__lshift>
    6698:	1029883a 	mov	r20,r2
    669c:	003ecc06 	br	61d0 <__alt_data_end+0xff0061d0>
    66a0:	00800e44 	movi	r2,57
    66a4:	90809026 	beq	r18,r2,68e8 <_dtoa_r+0x152c>
    66a8:	92000044 	addi	r8,r18,1
    66ac:	003f1f06 	br	632c <__alt_data_end+0xff00632c>
    66b0:	9011883a 	mov	r8,r18
    66b4:	8825883a 	mov	r18,r17
    66b8:	a023883a 	mov	r17,r20
    66bc:	003e2906 	br	5f64 <__alt_data_end+0xff005f64>
    66c0:	002b883a 	mov	r21,zero
    66c4:	0023883a 	mov	r17,zero
    66c8:	003f5406 	br	641c <__alt_data_end+0xff00641c>
    66cc:	61bfffc4 	addi	r6,r12,-1
    66d0:	300490fa 	slli	r2,r6,3
    66d4:	00c00074 	movhi	r3,1
    66d8:	18c71a04 	addi	r3,r3,7272
    66dc:	1885883a 	add	r2,r3,r2
    66e0:	11000017 	ldw	r4,0(r2)
    66e4:	11400117 	ldw	r5,4(r2)
    66e8:	d8800717 	ldw	r2,28(sp)
    66ec:	880f883a 	mov	r7,r17
    66f0:	d9801215 	stw	r6,72(sp)
    66f4:	800d883a 	mov	r6,r16
    66f8:	db001615 	stw	r12,88(sp)
    66fc:	15c00044 	addi	r23,r2,1
    6700:	000da040 	call	da04 <__muldf3>
    6704:	d9401017 	ldw	r5,64(sp)
    6708:	d9000f17 	ldw	r4,60(sp)
    670c:	d8c01515 	stw	r3,84(sp)
    6710:	d8801415 	stw	r2,80(sp)
    6714:	000ea180 	call	ea18 <__fixdfsi>
    6718:	1009883a 	mov	r4,r2
    671c:	1021883a 	mov	r16,r2
    6720:	000ea980 	call	ea98 <__floatsidf>
    6724:	d9000f17 	ldw	r4,60(sp)
    6728:	d9401017 	ldw	r5,64(sp)
    672c:	100d883a 	mov	r6,r2
    6730:	180f883a 	mov	r7,r3
    6734:	000e11c0 	call	e11c <__subdf3>
    6738:	1829883a 	mov	r20,r3
    673c:	d8c00717 	ldw	r3,28(sp)
    6740:	84000c04 	addi	r16,r16,48
    6744:	1023883a 	mov	r17,r2
    6748:	1c000005 	stb	r16,0(r3)
    674c:	db001617 	ldw	r12,88(sp)
    6750:	00800044 	movi	r2,1
    6754:	60802226 	beq	r12,r2,67e0 <_dtoa_r+0x1424>
    6758:	d9c00717 	ldw	r7,28(sp)
    675c:	8805883a 	mov	r2,r17
    6760:	b82b883a 	mov	r21,r23
    6764:	3b19883a 	add	r12,r7,r12
    6768:	6023883a 	mov	r17,r12
    676c:	a007883a 	mov	r3,r20
    6770:	dc800f15 	stw	r18,60(sp)
    6774:	000d883a 	mov	r6,zero
    6778:	01d00934 	movhi	r7,16420
    677c:	1009883a 	mov	r4,r2
    6780:	180b883a 	mov	r5,r3
    6784:	000da040 	call	da04 <__muldf3>
    6788:	180b883a 	mov	r5,r3
    678c:	1009883a 	mov	r4,r2
    6790:	1829883a 	mov	r20,r3
    6794:	1025883a 	mov	r18,r2
    6798:	000ea180 	call	ea18 <__fixdfsi>
    679c:	1009883a 	mov	r4,r2
    67a0:	1021883a 	mov	r16,r2
    67a4:	000ea980 	call	ea98 <__floatsidf>
    67a8:	100d883a 	mov	r6,r2
    67ac:	180f883a 	mov	r7,r3
    67b0:	9009883a 	mov	r4,r18
    67b4:	a00b883a 	mov	r5,r20
    67b8:	84000c04 	addi	r16,r16,48
    67bc:	000e11c0 	call	e11c <__subdf3>
    67c0:	ad400044 	addi	r21,r21,1
    67c4:	ac3fffc5 	stb	r16,-1(r21)
    67c8:	ac7fea1e 	bne	r21,r17,6774 <__alt_data_end+0xff006774>
    67cc:	1023883a 	mov	r17,r2
    67d0:	d8801217 	ldw	r2,72(sp)
    67d4:	dc800f17 	ldw	r18,60(sp)
    67d8:	1829883a 	mov	r20,r3
    67dc:	b8af883a 	add	r23,r23,r2
    67e0:	d9001417 	ldw	r4,80(sp)
    67e4:	d9401517 	ldw	r5,84(sp)
    67e8:	000d883a 	mov	r6,zero
    67ec:	01cff834 	movhi	r7,16352
    67f0:	000c6180 	call	c618 <__adddf3>
    67f4:	880d883a 	mov	r6,r17
    67f8:	a00f883a 	mov	r7,r20
    67fc:	1009883a 	mov	r4,r2
    6800:	180b883a 	mov	r5,r3
    6804:	000d9100 	call	d910 <__ledf2>
    6808:	10003e0e 	bge	r2,zero,6904 <_dtoa_r+0x1548>
    680c:	d9001317 	ldw	r4,76(sp)
    6810:	bd3fffc3 	ldbu	r20,-1(r23)
    6814:	d9000515 	stw	r4,20(sp)
    6818:	003d3b06 	br	5d08 <__alt_data_end+0xff005d08>
    681c:	0027883a 	mov	r19,zero
    6820:	003f1b06 	br	6490 <__alt_data_end+0xff006490>
    6824:	d8800817 	ldw	r2,32(sp)
    6828:	11e9c83a 	sub	r20,r2,r7
    682c:	0005883a 	mov	r2,zero
    6830:	003d5406 	br	5d84 <__alt_data_end+0xff005d84>
    6834:	00800044 	movi	r2,1
    6838:	003dc706 	br	5f58 <__alt_data_end+0xff005f58>
    683c:	d8c00217 	ldw	r3,8(sp)
    6840:	00800d84 	movi	r2,54
    6844:	dd400a17 	ldw	r21,40(sp)
    6848:	10c5c83a 	sub	r2,r2,r3
    684c:	dd000817 	ldw	r20,32(sp)
    6850:	003d4c06 	br	5d84 <__alt_data_end+0xff005d84>
    6854:	dc800f15 	stw	r18,60(sp)
    6858:	dcc01015 	stw	r19,64(sp)
    685c:	04000084 	movi	r16,2
    6860:	003bed06 	br	5818 <__alt_data_end+0xff005818>
    6864:	d9000617 	ldw	r4,24(sp)
    6868:	203f0d26 	beq	r4,zero,64a0 <__alt_data_end+0xff0064a0>
    686c:	d9800c17 	ldw	r6,48(sp)
    6870:	01bcab0e 	bge	zero,r6,5b20 <__alt_data_end+0xff005b20>
    6874:	d9401017 	ldw	r5,64(sp)
    6878:	d9000f17 	ldw	r4,60(sp)
    687c:	000d883a 	mov	r6,zero
    6880:	01d00934 	movhi	r7,16420
    6884:	000da040 	call	da04 <__muldf3>
    6888:	81000044 	addi	r4,r16,1
    688c:	d8800f15 	stw	r2,60(sp)
    6890:	d8c01015 	stw	r3,64(sp)
    6894:	000ea980 	call	ea98 <__floatsidf>
    6898:	d9800f17 	ldw	r6,60(sp)
    689c:	d9c01017 	ldw	r7,64(sp)
    68a0:	1009883a 	mov	r4,r2
    68a4:	180b883a 	mov	r5,r3
    68a8:	000da040 	call	da04 <__muldf3>
    68ac:	01d00734 	movhi	r7,16412
    68b0:	000d883a 	mov	r6,zero
    68b4:	1009883a 	mov	r4,r2
    68b8:	180b883a 	mov	r5,r3
    68bc:	000c6180 	call	c618 <__adddf3>
    68c0:	d9c00517 	ldw	r7,20(sp)
    68c4:	047f3034 	movhi	r17,64704
    68c8:	1021883a 	mov	r16,r2
    68cc:	39ffffc4 	addi	r7,r7,-1
    68d0:	d9c01315 	stw	r7,76(sp)
    68d4:	1c63883a 	add	r17,r3,r17
    68d8:	db000c17 	ldw	r12,48(sp)
    68dc:	003bea06 	br	5888 <__alt_data_end+0xff005888>
    68e0:	dc000915 	stw	r16,36(sp)
    68e4:	003e0e06 	br	6120 <__alt_data_end+0xff006120>
    68e8:	01000e44 	movi	r4,57
    68ec:	8825883a 	mov	r18,r17
    68f0:	9dc00044 	addi	r23,r19,1
    68f4:	99000005 	stb	r4,0(r19)
    68f8:	a023883a 	mov	r17,r20
    68fc:	dc000915 	stw	r16,36(sp)
    6900:	003da406 	br	5f94 <__alt_data_end+0xff005f94>
    6904:	d9801417 	ldw	r6,80(sp)
    6908:	d9c01517 	ldw	r7,84(sp)
    690c:	0009883a 	mov	r4,zero
    6910:	014ff834 	movhi	r5,16352
    6914:	000e11c0 	call	e11c <__subdf3>
    6918:	880d883a 	mov	r6,r17
    691c:	a00f883a 	mov	r7,r20
    6920:	1009883a 	mov	r4,r2
    6924:	180b883a 	mov	r5,r3
    6928:	000d8340 	call	d834 <__gedf2>
    692c:	00bc7c0e 	bge	zero,r2,5b20 <__alt_data_end+0xff005b20>
    6930:	01000c04 	movi	r4,48
    6934:	00000106 	br	693c <_dtoa_r+0x1580>
    6938:	102f883a 	mov	r23,r2
    693c:	b8bfffc4 	addi	r2,r23,-1
    6940:	10c00007 	ldb	r3,0(r2)
    6944:	193ffc26 	beq	r3,r4,6938 <__alt_data_end+0xff006938>
    6948:	d9801317 	ldw	r6,76(sp)
    694c:	d9800515 	stw	r6,20(sp)
    6950:	003c4406 	br	5a64 <__alt_data_end+0xff005a64>
    6954:	d9801317 	ldw	r6,76(sp)
    6958:	d9800515 	stw	r6,20(sp)
    695c:	003cea06 	br	5d08 <__alt_data_end+0xff005d08>
    6960:	dd800f17 	ldw	r22,60(sp)
    6964:	dcc01017 	ldw	r19,64(sp)
    6968:	dc801217 	ldw	r18,72(sp)
    696c:	003c6c06 	br	5b20 <__alt_data_end+0xff005b20>
    6970:	903e031e 	bne	r18,zero,6180 <__alt_data_end+0xff006180>
    6974:	003ebb06 	br	6464 <__alt_data_end+0xff006464>
    6978:	103e6c1e 	bne	r2,zero,632c <__alt_data_end+0xff00632c>
    697c:	4080004c 	andi	r2,r8,1
    6980:	103e6a26 	beq	r2,zero,632c <__alt_data_end+0xff00632c>
    6984:	003e6606 	br	6320 <__alt_data_end+0xff006320>
    6988:	d8c00317 	ldw	r3,12(sp)
    698c:	00800084 	movi	r2,2
    6990:	10c02916 	blt	r2,r3,6a38 <_dtoa_r+0x167c>
    6994:	d9000c17 	ldw	r4,48(sp)
    6998:	003e8806 	br	63bc <__alt_data_end+0xff0063bc>
    699c:	04000084 	movi	r16,2
    69a0:	003b9d06 	br	5818 <__alt_data_end+0xff005818>
    69a4:	d9001317 	ldw	r4,76(sp)
    69a8:	d9000515 	stw	r4,20(sp)
    69ac:	003cd606 	br	5d08 <__alt_data_end+0xff005d08>
    69b0:	d8801317 	ldw	r2,76(sp)
    69b4:	d8800515 	stw	r2,20(sp)
    69b8:	003c2a06 	br	5a64 <__alt_data_end+0xff005a64>
    69bc:	d9800317 	ldw	r6,12(sp)
    69c0:	00800084 	movi	r2,2
    69c4:	11801516 	blt	r2,r6,6a1c <_dtoa_r+0x1660>
    69c8:	d9c00c17 	ldw	r7,48(sp)
    69cc:	d9c00615 	stw	r7,24(sp)
    69d0:	003df706 	br	61b0 <__alt_data_end+0xff0061b0>
    69d4:	193d3926 	beq	r3,r4,5ebc <__alt_data_end+0xff005ebc>
    69d8:	00c00f04 	movi	r3,60
    69dc:	1885c83a 	sub	r2,r3,r2
    69e0:	003ddf06 	br	6160 <__alt_data_end+0xff006160>
    69e4:	e009883a 	mov	r4,fp
    69e8:	e0001115 	stw	zero,68(fp)
    69ec:	000b883a 	mov	r5,zero
    69f0:	000824c0 	call	824c <_Balloc>
    69f4:	d8800715 	stw	r2,28(sp)
    69f8:	d8c00717 	ldw	r3,28(sp)
    69fc:	00bfffc4 	movi	r2,-1
    6a00:	01000044 	movi	r4,1
    6a04:	d8800c15 	stw	r2,48(sp)
    6a08:	e0c01015 	stw	r3,64(fp)
    6a0c:	d9000b15 	stw	r4,44(sp)
    6a10:	d8800615 	stw	r2,24(sp)
    6a14:	d8002215 	stw	zero,136(sp)
    6a18:	003c4106 	br	5b20 <__alt_data_end+0xff005b20>
    6a1c:	d8c00c17 	ldw	r3,48(sp)
    6a20:	d8c00615 	stw	r3,24(sp)
    6a24:	003e7006 	br	63e8 <__alt_data_end+0xff0063e8>
    6a28:	04400044 	movi	r17,1
    6a2c:	003b2006 	br	56b0 <__alt_data_end+0xff0056b0>
    6a30:	000b883a 	mov	r5,zero
    6a34:	003b3d06 	br	572c <__alt_data_end+0xff00572c>
    6a38:	d8800c17 	ldw	r2,48(sp)
    6a3c:	d8800615 	stw	r2,24(sp)
    6a40:	003e6906 	br	63e8 <__alt_data_end+0xff0063e8>

00006a44 <__sflush_r>:
    6a44:	2880030b 	ldhu	r2,12(r5)
    6a48:	defffb04 	addi	sp,sp,-20
    6a4c:	dcc00315 	stw	r19,12(sp)
    6a50:	dc400115 	stw	r17,4(sp)
    6a54:	dfc00415 	stw	ra,16(sp)
    6a58:	dc800215 	stw	r18,8(sp)
    6a5c:	dc000015 	stw	r16,0(sp)
    6a60:	10c0020c 	andi	r3,r2,8
    6a64:	2823883a 	mov	r17,r5
    6a68:	2027883a 	mov	r19,r4
    6a6c:	1800311e 	bne	r3,zero,6b34 <__sflush_r+0xf0>
    6a70:	28c00117 	ldw	r3,4(r5)
    6a74:	10820014 	ori	r2,r2,2048
    6a78:	2880030d 	sth	r2,12(r5)
    6a7c:	00c04b0e 	bge	zero,r3,6bac <__sflush_r+0x168>
    6a80:	8a000a17 	ldw	r8,40(r17)
    6a84:	40002326 	beq	r8,zero,6b14 <__sflush_r+0xd0>
    6a88:	9c000017 	ldw	r16,0(r19)
    6a8c:	10c4000c 	andi	r3,r2,4096
    6a90:	98000015 	stw	zero,0(r19)
    6a94:	18004826 	beq	r3,zero,6bb8 <__sflush_r+0x174>
    6a98:	89801417 	ldw	r6,80(r17)
    6a9c:	10c0010c 	andi	r3,r2,4
    6aa0:	18000626 	beq	r3,zero,6abc <__sflush_r+0x78>
    6aa4:	88c00117 	ldw	r3,4(r17)
    6aa8:	88800c17 	ldw	r2,48(r17)
    6aac:	30cdc83a 	sub	r6,r6,r3
    6ab0:	10000226 	beq	r2,zero,6abc <__sflush_r+0x78>
    6ab4:	88800f17 	ldw	r2,60(r17)
    6ab8:	308dc83a 	sub	r6,r6,r2
    6abc:	89400717 	ldw	r5,28(r17)
    6ac0:	000f883a 	mov	r7,zero
    6ac4:	9809883a 	mov	r4,r19
    6ac8:	403ee83a 	callr	r8
    6acc:	00ffffc4 	movi	r3,-1
    6ad0:	10c04426 	beq	r2,r3,6be4 <__sflush_r+0x1a0>
    6ad4:	88c0030b 	ldhu	r3,12(r17)
    6ad8:	89000417 	ldw	r4,16(r17)
    6adc:	88000115 	stw	zero,4(r17)
    6ae0:	197dffcc 	andi	r5,r3,63487
    6ae4:	8940030d 	sth	r5,12(r17)
    6ae8:	89000015 	stw	r4,0(r17)
    6aec:	18c4000c 	andi	r3,r3,4096
    6af0:	18002c1e 	bne	r3,zero,6ba4 <__sflush_r+0x160>
    6af4:	89400c17 	ldw	r5,48(r17)
    6af8:	9c000015 	stw	r16,0(r19)
    6afc:	28000526 	beq	r5,zero,6b14 <__sflush_r+0xd0>
    6b00:	88801004 	addi	r2,r17,64
    6b04:	28800226 	beq	r5,r2,6b10 <__sflush_r+0xcc>
    6b08:	9809883a 	mov	r4,r19
    6b0c:	00071b00 	call	71b0 <_free_r>
    6b10:	88000c15 	stw	zero,48(r17)
    6b14:	0005883a 	mov	r2,zero
    6b18:	dfc00417 	ldw	ra,16(sp)
    6b1c:	dcc00317 	ldw	r19,12(sp)
    6b20:	dc800217 	ldw	r18,8(sp)
    6b24:	dc400117 	ldw	r17,4(sp)
    6b28:	dc000017 	ldw	r16,0(sp)
    6b2c:	dec00504 	addi	sp,sp,20
    6b30:	f800283a 	ret
    6b34:	2c800417 	ldw	r18,16(r5)
    6b38:	903ff626 	beq	r18,zero,6b14 <__alt_data_end+0xff006b14>
    6b3c:	2c000017 	ldw	r16,0(r5)
    6b40:	108000cc 	andi	r2,r2,3
    6b44:	2c800015 	stw	r18,0(r5)
    6b48:	84a1c83a 	sub	r16,r16,r18
    6b4c:	1000131e 	bne	r2,zero,6b9c <__sflush_r+0x158>
    6b50:	28800517 	ldw	r2,20(r5)
    6b54:	88800215 	stw	r2,8(r17)
    6b58:	04000316 	blt	zero,r16,6b68 <__sflush_r+0x124>
    6b5c:	003fed06 	br	6b14 <__alt_data_end+0xff006b14>
    6b60:	90a5883a 	add	r18,r18,r2
    6b64:	043feb0e 	bge	zero,r16,6b14 <__alt_data_end+0xff006b14>
    6b68:	88800917 	ldw	r2,36(r17)
    6b6c:	89400717 	ldw	r5,28(r17)
    6b70:	800f883a 	mov	r7,r16
    6b74:	900d883a 	mov	r6,r18
    6b78:	9809883a 	mov	r4,r19
    6b7c:	103ee83a 	callr	r2
    6b80:	80a1c83a 	sub	r16,r16,r2
    6b84:	00bff616 	blt	zero,r2,6b60 <__alt_data_end+0xff006b60>
    6b88:	88c0030b 	ldhu	r3,12(r17)
    6b8c:	00bfffc4 	movi	r2,-1
    6b90:	18c01014 	ori	r3,r3,64
    6b94:	88c0030d 	sth	r3,12(r17)
    6b98:	003fdf06 	br	6b18 <__alt_data_end+0xff006b18>
    6b9c:	0005883a 	mov	r2,zero
    6ba0:	003fec06 	br	6b54 <__alt_data_end+0xff006b54>
    6ba4:	88801415 	stw	r2,80(r17)
    6ba8:	003fd206 	br	6af4 <__alt_data_end+0xff006af4>
    6bac:	28c00f17 	ldw	r3,60(r5)
    6bb0:	00ffb316 	blt	zero,r3,6a80 <__alt_data_end+0xff006a80>
    6bb4:	003fd706 	br	6b14 <__alt_data_end+0xff006b14>
    6bb8:	89400717 	ldw	r5,28(r17)
    6bbc:	000d883a 	mov	r6,zero
    6bc0:	01c00044 	movi	r7,1
    6bc4:	9809883a 	mov	r4,r19
    6bc8:	403ee83a 	callr	r8
    6bcc:	100d883a 	mov	r6,r2
    6bd0:	00bfffc4 	movi	r2,-1
    6bd4:	30801426 	beq	r6,r2,6c28 <__sflush_r+0x1e4>
    6bd8:	8880030b 	ldhu	r2,12(r17)
    6bdc:	8a000a17 	ldw	r8,40(r17)
    6be0:	003fae06 	br	6a9c <__alt_data_end+0xff006a9c>
    6be4:	98c00017 	ldw	r3,0(r19)
    6be8:	183fba26 	beq	r3,zero,6ad4 <__alt_data_end+0xff006ad4>
    6bec:	01000744 	movi	r4,29
    6bf0:	19000626 	beq	r3,r4,6c0c <__sflush_r+0x1c8>
    6bf4:	01000584 	movi	r4,22
    6bf8:	19000426 	beq	r3,r4,6c0c <__sflush_r+0x1c8>
    6bfc:	88c0030b 	ldhu	r3,12(r17)
    6c00:	18c01014 	ori	r3,r3,64
    6c04:	88c0030d 	sth	r3,12(r17)
    6c08:	003fc306 	br	6b18 <__alt_data_end+0xff006b18>
    6c0c:	8880030b 	ldhu	r2,12(r17)
    6c10:	88c00417 	ldw	r3,16(r17)
    6c14:	88000115 	stw	zero,4(r17)
    6c18:	10bdffcc 	andi	r2,r2,63487
    6c1c:	8880030d 	sth	r2,12(r17)
    6c20:	88c00015 	stw	r3,0(r17)
    6c24:	003fb306 	br	6af4 <__alt_data_end+0xff006af4>
    6c28:	98800017 	ldw	r2,0(r19)
    6c2c:	103fea26 	beq	r2,zero,6bd8 <__alt_data_end+0xff006bd8>
    6c30:	00c00744 	movi	r3,29
    6c34:	10c00226 	beq	r2,r3,6c40 <__sflush_r+0x1fc>
    6c38:	00c00584 	movi	r3,22
    6c3c:	10c0031e 	bne	r2,r3,6c4c <__sflush_r+0x208>
    6c40:	9c000015 	stw	r16,0(r19)
    6c44:	0005883a 	mov	r2,zero
    6c48:	003fb306 	br	6b18 <__alt_data_end+0xff006b18>
    6c4c:	88c0030b 	ldhu	r3,12(r17)
    6c50:	3005883a 	mov	r2,r6
    6c54:	18c01014 	ori	r3,r3,64
    6c58:	88c0030d 	sth	r3,12(r17)
    6c5c:	003fae06 	br	6b18 <__alt_data_end+0xff006b18>

00006c60 <_fflush_r>:
    6c60:	defffd04 	addi	sp,sp,-12
    6c64:	dc000115 	stw	r16,4(sp)
    6c68:	dfc00215 	stw	ra,8(sp)
    6c6c:	2021883a 	mov	r16,r4
    6c70:	20000226 	beq	r4,zero,6c7c <_fflush_r+0x1c>
    6c74:	20800e17 	ldw	r2,56(r4)
    6c78:	10000c26 	beq	r2,zero,6cac <_fflush_r+0x4c>
    6c7c:	2880030f 	ldh	r2,12(r5)
    6c80:	1000051e 	bne	r2,zero,6c98 <_fflush_r+0x38>
    6c84:	0005883a 	mov	r2,zero
    6c88:	dfc00217 	ldw	ra,8(sp)
    6c8c:	dc000117 	ldw	r16,4(sp)
    6c90:	dec00304 	addi	sp,sp,12
    6c94:	f800283a 	ret
    6c98:	8009883a 	mov	r4,r16
    6c9c:	dfc00217 	ldw	ra,8(sp)
    6ca0:	dc000117 	ldw	r16,4(sp)
    6ca4:	dec00304 	addi	sp,sp,12
    6ca8:	0006a441 	jmpi	6a44 <__sflush_r>
    6cac:	d9400015 	stw	r5,0(sp)
    6cb0:	000703c0 	call	703c <__sinit>
    6cb4:	d9400017 	ldw	r5,0(sp)
    6cb8:	003ff006 	br	6c7c <__alt_data_end+0xff006c7c>

00006cbc <fflush>:
    6cbc:	20000526 	beq	r4,zero,6cd4 <fflush+0x18>
    6cc0:	00800074 	movhi	r2,1
    6cc4:	108e4d04 	addi	r2,r2,14644
    6cc8:	200b883a 	mov	r5,r4
    6ccc:	11000017 	ldw	r4,0(r2)
    6cd0:	0006c601 	jmpi	6c60 <_fflush_r>
    6cd4:	00800074 	movhi	r2,1
    6cd8:	108e4c04 	addi	r2,r2,14640
    6cdc:	11000017 	ldw	r4,0(r2)
    6ce0:	01400034 	movhi	r5,0
    6ce4:	295b1804 	addi	r5,r5,27744
    6ce8:	0007a401 	jmpi	7a40 <_fwalk_reent>

00006cec <__fp_unlock>:
    6cec:	0005883a 	mov	r2,zero
    6cf0:	f800283a 	ret

00006cf4 <_cleanup_r>:
    6cf4:	01400074 	movhi	r5,1
    6cf8:	296c7e04 	addi	r5,r5,-19976
    6cfc:	0007a401 	jmpi	7a40 <_fwalk_reent>

00006d00 <__sinit.part.1>:
    6d00:	defff704 	addi	sp,sp,-36
    6d04:	00c00034 	movhi	r3,0
    6d08:	dfc00815 	stw	ra,32(sp)
    6d0c:	ddc00715 	stw	r23,28(sp)
    6d10:	dd800615 	stw	r22,24(sp)
    6d14:	dd400515 	stw	r21,20(sp)
    6d18:	dd000415 	stw	r20,16(sp)
    6d1c:	dcc00315 	stw	r19,12(sp)
    6d20:	dc800215 	stw	r18,8(sp)
    6d24:	dc400115 	stw	r17,4(sp)
    6d28:	dc000015 	stw	r16,0(sp)
    6d2c:	18db3d04 	addi	r3,r3,27892
    6d30:	24000117 	ldw	r16,4(r4)
    6d34:	20c00f15 	stw	r3,60(r4)
    6d38:	2080bb04 	addi	r2,r4,748
    6d3c:	00c000c4 	movi	r3,3
    6d40:	20c0b915 	stw	r3,740(r4)
    6d44:	2080ba15 	stw	r2,744(r4)
    6d48:	2000b815 	stw	zero,736(r4)
    6d4c:	05c00204 	movi	r23,8
    6d50:	00800104 	movi	r2,4
    6d54:	2025883a 	mov	r18,r4
    6d58:	b80d883a 	mov	r6,r23
    6d5c:	81001704 	addi	r4,r16,92
    6d60:	000b883a 	mov	r5,zero
    6d64:	80000015 	stw	zero,0(r16)
    6d68:	80000115 	stw	zero,4(r16)
    6d6c:	80000215 	stw	zero,8(r16)
    6d70:	8080030d 	sth	r2,12(r16)
    6d74:	80001915 	stw	zero,100(r16)
    6d78:	8000038d 	sth	zero,14(r16)
    6d7c:	80000415 	stw	zero,16(r16)
    6d80:	80000515 	stw	zero,20(r16)
    6d84:	80000615 	stw	zero,24(r16)
    6d88:	00081240 	call	8124 <memset>
    6d8c:	05800074 	movhi	r22,1
    6d90:	94400217 	ldw	r17,8(r18)
    6d94:	05400074 	movhi	r21,1
    6d98:	05000074 	movhi	r20,1
    6d9c:	04c00074 	movhi	r19,1
    6da0:	b5a60804 	addi	r22,r22,-26592
    6da4:	ad661f04 	addi	r21,r21,-26500
    6da8:	a5263e04 	addi	r20,r20,-26376
    6dac:	9ce65504 	addi	r19,r19,-26284
    6db0:	85800815 	stw	r22,32(r16)
    6db4:	85400915 	stw	r21,36(r16)
    6db8:	85000a15 	stw	r20,40(r16)
    6dbc:	84c00b15 	stw	r19,44(r16)
    6dc0:	84000715 	stw	r16,28(r16)
    6dc4:	00800284 	movi	r2,10
    6dc8:	8880030d 	sth	r2,12(r17)
    6dcc:	00800044 	movi	r2,1
    6dd0:	b80d883a 	mov	r6,r23
    6dd4:	89001704 	addi	r4,r17,92
    6dd8:	000b883a 	mov	r5,zero
    6ddc:	88000015 	stw	zero,0(r17)
    6de0:	88000115 	stw	zero,4(r17)
    6de4:	88000215 	stw	zero,8(r17)
    6de8:	88001915 	stw	zero,100(r17)
    6dec:	8880038d 	sth	r2,14(r17)
    6df0:	88000415 	stw	zero,16(r17)
    6df4:	88000515 	stw	zero,20(r17)
    6df8:	88000615 	stw	zero,24(r17)
    6dfc:	00081240 	call	8124 <memset>
    6e00:	94000317 	ldw	r16,12(r18)
    6e04:	00800484 	movi	r2,18
    6e08:	8c400715 	stw	r17,28(r17)
    6e0c:	8d800815 	stw	r22,32(r17)
    6e10:	8d400915 	stw	r21,36(r17)
    6e14:	8d000a15 	stw	r20,40(r17)
    6e18:	8cc00b15 	stw	r19,44(r17)
    6e1c:	8080030d 	sth	r2,12(r16)
    6e20:	00800084 	movi	r2,2
    6e24:	80000015 	stw	zero,0(r16)
    6e28:	80000115 	stw	zero,4(r16)
    6e2c:	80000215 	stw	zero,8(r16)
    6e30:	80001915 	stw	zero,100(r16)
    6e34:	8080038d 	sth	r2,14(r16)
    6e38:	80000415 	stw	zero,16(r16)
    6e3c:	80000515 	stw	zero,20(r16)
    6e40:	80000615 	stw	zero,24(r16)
    6e44:	b80d883a 	mov	r6,r23
    6e48:	000b883a 	mov	r5,zero
    6e4c:	81001704 	addi	r4,r16,92
    6e50:	00081240 	call	8124 <memset>
    6e54:	00800044 	movi	r2,1
    6e58:	84000715 	stw	r16,28(r16)
    6e5c:	85800815 	stw	r22,32(r16)
    6e60:	85400915 	stw	r21,36(r16)
    6e64:	85000a15 	stw	r20,40(r16)
    6e68:	84c00b15 	stw	r19,44(r16)
    6e6c:	90800e15 	stw	r2,56(r18)
    6e70:	dfc00817 	ldw	ra,32(sp)
    6e74:	ddc00717 	ldw	r23,28(sp)
    6e78:	dd800617 	ldw	r22,24(sp)
    6e7c:	dd400517 	ldw	r21,20(sp)
    6e80:	dd000417 	ldw	r20,16(sp)
    6e84:	dcc00317 	ldw	r19,12(sp)
    6e88:	dc800217 	ldw	r18,8(sp)
    6e8c:	dc400117 	ldw	r17,4(sp)
    6e90:	dc000017 	ldw	r16,0(sp)
    6e94:	dec00904 	addi	sp,sp,36
    6e98:	f800283a 	ret

00006e9c <__fp_lock>:
    6e9c:	0005883a 	mov	r2,zero
    6ea0:	f800283a 	ret

00006ea4 <__sfmoreglue>:
    6ea4:	defffc04 	addi	sp,sp,-16
    6ea8:	dc400115 	stw	r17,4(sp)
    6eac:	2c7fffc4 	addi	r17,r5,-1
    6eb0:	8c401a24 	muli	r17,r17,104
    6eb4:	dc800215 	stw	r18,8(sp)
    6eb8:	2825883a 	mov	r18,r5
    6ebc:	89401d04 	addi	r5,r17,116
    6ec0:	dc000015 	stw	r16,0(sp)
    6ec4:	dfc00315 	stw	ra,12(sp)
    6ec8:	00023600 	call	2360 <_malloc_r>
    6ecc:	1021883a 	mov	r16,r2
    6ed0:	10000726 	beq	r2,zero,6ef0 <__sfmoreglue+0x4c>
    6ed4:	11000304 	addi	r4,r2,12
    6ed8:	10000015 	stw	zero,0(r2)
    6edc:	14800115 	stw	r18,4(r2)
    6ee0:	11000215 	stw	r4,8(r2)
    6ee4:	89801a04 	addi	r6,r17,104
    6ee8:	000b883a 	mov	r5,zero
    6eec:	00081240 	call	8124 <memset>
    6ef0:	8005883a 	mov	r2,r16
    6ef4:	dfc00317 	ldw	ra,12(sp)
    6ef8:	dc800217 	ldw	r18,8(sp)
    6efc:	dc400117 	ldw	r17,4(sp)
    6f00:	dc000017 	ldw	r16,0(sp)
    6f04:	dec00404 	addi	sp,sp,16
    6f08:	f800283a 	ret

00006f0c <__sfp>:
    6f0c:	defffb04 	addi	sp,sp,-20
    6f10:	dc000015 	stw	r16,0(sp)
    6f14:	04000074 	movhi	r16,1
    6f18:	840e4c04 	addi	r16,r16,14640
    6f1c:	dcc00315 	stw	r19,12(sp)
    6f20:	2027883a 	mov	r19,r4
    6f24:	81000017 	ldw	r4,0(r16)
    6f28:	dfc00415 	stw	ra,16(sp)
    6f2c:	dc800215 	stw	r18,8(sp)
    6f30:	20800e17 	ldw	r2,56(r4)
    6f34:	dc400115 	stw	r17,4(sp)
    6f38:	1000021e 	bne	r2,zero,6f44 <__sfp+0x38>
    6f3c:	0006d000 	call	6d00 <__sinit.part.1>
    6f40:	81000017 	ldw	r4,0(r16)
    6f44:	2480b804 	addi	r18,r4,736
    6f48:	047fffc4 	movi	r17,-1
    6f4c:	91000117 	ldw	r4,4(r18)
    6f50:	94000217 	ldw	r16,8(r18)
    6f54:	213fffc4 	addi	r4,r4,-1
    6f58:	20000a16 	blt	r4,zero,6f84 <__sfp+0x78>
    6f5c:	8080030f 	ldh	r2,12(r16)
    6f60:	10000c26 	beq	r2,zero,6f94 <__sfp+0x88>
    6f64:	80c01d04 	addi	r3,r16,116
    6f68:	00000206 	br	6f74 <__sfp+0x68>
    6f6c:	18bfe60f 	ldh	r2,-104(r3)
    6f70:	10000826 	beq	r2,zero,6f94 <__sfp+0x88>
    6f74:	213fffc4 	addi	r4,r4,-1
    6f78:	1c3ffd04 	addi	r16,r3,-12
    6f7c:	18c01a04 	addi	r3,r3,104
    6f80:	247ffa1e 	bne	r4,r17,6f6c <__alt_data_end+0xff006f6c>
    6f84:	90800017 	ldw	r2,0(r18)
    6f88:	10001d26 	beq	r2,zero,7000 <__sfp+0xf4>
    6f8c:	1025883a 	mov	r18,r2
    6f90:	003fee06 	br	6f4c <__alt_data_end+0xff006f4c>
    6f94:	00bfffc4 	movi	r2,-1
    6f98:	8080038d 	sth	r2,14(r16)
    6f9c:	00800044 	movi	r2,1
    6fa0:	8080030d 	sth	r2,12(r16)
    6fa4:	80001915 	stw	zero,100(r16)
    6fa8:	80000015 	stw	zero,0(r16)
    6fac:	80000215 	stw	zero,8(r16)
    6fb0:	80000115 	stw	zero,4(r16)
    6fb4:	80000415 	stw	zero,16(r16)
    6fb8:	80000515 	stw	zero,20(r16)
    6fbc:	80000615 	stw	zero,24(r16)
    6fc0:	01800204 	movi	r6,8
    6fc4:	000b883a 	mov	r5,zero
    6fc8:	81001704 	addi	r4,r16,92
    6fcc:	00081240 	call	8124 <memset>
    6fd0:	8005883a 	mov	r2,r16
    6fd4:	80000c15 	stw	zero,48(r16)
    6fd8:	80000d15 	stw	zero,52(r16)
    6fdc:	80001115 	stw	zero,68(r16)
    6fe0:	80001215 	stw	zero,72(r16)
    6fe4:	dfc00417 	ldw	ra,16(sp)
    6fe8:	dcc00317 	ldw	r19,12(sp)
    6fec:	dc800217 	ldw	r18,8(sp)
    6ff0:	dc400117 	ldw	r17,4(sp)
    6ff4:	dc000017 	ldw	r16,0(sp)
    6ff8:	dec00504 	addi	sp,sp,20
    6ffc:	f800283a 	ret
    7000:	01400104 	movi	r5,4
    7004:	9809883a 	mov	r4,r19
    7008:	0006ea40 	call	6ea4 <__sfmoreglue>
    700c:	90800015 	stw	r2,0(r18)
    7010:	103fde1e 	bne	r2,zero,6f8c <__alt_data_end+0xff006f8c>
    7014:	00800304 	movi	r2,12
    7018:	98800015 	stw	r2,0(r19)
    701c:	0005883a 	mov	r2,zero
    7020:	003ff006 	br	6fe4 <__alt_data_end+0xff006fe4>

00007024 <_cleanup>:
    7024:	00800074 	movhi	r2,1
    7028:	108e4c04 	addi	r2,r2,14640
    702c:	11000017 	ldw	r4,0(r2)
    7030:	01400074 	movhi	r5,1
    7034:	296c7e04 	addi	r5,r5,-19976
    7038:	0007a401 	jmpi	7a40 <_fwalk_reent>

0000703c <__sinit>:
    703c:	20800e17 	ldw	r2,56(r4)
    7040:	10000126 	beq	r2,zero,7048 <__sinit+0xc>
    7044:	f800283a 	ret
    7048:	0006d001 	jmpi	6d00 <__sinit.part.1>

0000704c <__sfp_lock_acquire>:
    704c:	f800283a 	ret

00007050 <__sfp_lock_release>:
    7050:	f800283a 	ret

00007054 <__sinit_lock_acquire>:
    7054:	f800283a 	ret

00007058 <__sinit_lock_release>:
    7058:	f800283a 	ret

0000705c <__fp_lock_all>:
    705c:	00800074 	movhi	r2,1
    7060:	108e4d04 	addi	r2,r2,14644
    7064:	11000017 	ldw	r4,0(r2)
    7068:	01400034 	movhi	r5,0
    706c:	295ba704 	addi	r5,r5,28316
    7070:	000797c1 	jmpi	797c <_fwalk>

00007074 <__fp_unlock_all>:
    7074:	00800074 	movhi	r2,1
    7078:	108e4d04 	addi	r2,r2,14644
    707c:	11000017 	ldw	r4,0(r2)
    7080:	01400034 	movhi	r5,0
    7084:	295b3b04 	addi	r5,r5,27884
    7088:	000797c1 	jmpi	797c <_fwalk>

0000708c <_malloc_trim_r>:
    708c:	defffb04 	addi	sp,sp,-20
    7090:	dcc00315 	stw	r19,12(sp)
    7094:	04c00074 	movhi	r19,1
    7098:	dc800215 	stw	r18,8(sp)
    709c:	dc400115 	stw	r17,4(sp)
    70a0:	dc000015 	stw	r16,0(sp)
    70a4:	dfc00415 	stw	ra,16(sp)
    70a8:	2821883a 	mov	r16,r5
    70ac:	9cc79f04 	addi	r19,r19,7804
    70b0:	2025883a 	mov	r18,r4
    70b4:	000f1fc0 	call	f1fc <__malloc_lock>
    70b8:	98800217 	ldw	r2,8(r19)
    70bc:	14400117 	ldw	r17,4(r2)
    70c0:	00bfff04 	movi	r2,-4
    70c4:	88a2703a 	and	r17,r17,r2
    70c8:	8c21c83a 	sub	r16,r17,r16
    70cc:	8403fbc4 	addi	r16,r16,4079
    70d0:	8020d33a 	srli	r16,r16,12
    70d4:	0083ffc4 	movi	r2,4095
    70d8:	843fffc4 	addi	r16,r16,-1
    70dc:	8020933a 	slli	r16,r16,12
    70e0:	1400060e 	bge	r2,r16,70fc <_malloc_trim_r+0x70>
    70e4:	000b883a 	mov	r5,zero
    70e8:	9009883a 	mov	r4,r18
    70ec:	0002cac0 	call	2cac <_sbrk_r>
    70f0:	98c00217 	ldw	r3,8(r19)
    70f4:	1c47883a 	add	r3,r3,r17
    70f8:	10c00a26 	beq	r2,r3,7124 <_malloc_trim_r+0x98>
    70fc:	9009883a 	mov	r4,r18
    7100:	000f2200 	call	f220 <__malloc_unlock>
    7104:	0005883a 	mov	r2,zero
    7108:	dfc00417 	ldw	ra,16(sp)
    710c:	dcc00317 	ldw	r19,12(sp)
    7110:	dc800217 	ldw	r18,8(sp)
    7114:	dc400117 	ldw	r17,4(sp)
    7118:	dc000017 	ldw	r16,0(sp)
    711c:	dec00504 	addi	sp,sp,20
    7120:	f800283a 	ret
    7124:	040bc83a 	sub	r5,zero,r16
    7128:	9009883a 	mov	r4,r18
    712c:	0002cac0 	call	2cac <_sbrk_r>
    7130:	00ffffc4 	movi	r3,-1
    7134:	10c00d26 	beq	r2,r3,716c <_malloc_trim_r+0xe0>
    7138:	00c00074 	movhi	r3,1
    713c:	18d52f04 	addi	r3,r3,21692
    7140:	18800017 	ldw	r2,0(r3)
    7144:	99000217 	ldw	r4,8(r19)
    7148:	8c23c83a 	sub	r17,r17,r16
    714c:	8c400054 	ori	r17,r17,1
    7150:	1421c83a 	sub	r16,r2,r16
    7154:	24400115 	stw	r17,4(r4)
    7158:	9009883a 	mov	r4,r18
    715c:	1c000015 	stw	r16,0(r3)
    7160:	000f2200 	call	f220 <__malloc_unlock>
    7164:	00800044 	movi	r2,1
    7168:	003fe706 	br	7108 <__alt_data_end+0xff007108>
    716c:	000b883a 	mov	r5,zero
    7170:	9009883a 	mov	r4,r18
    7174:	0002cac0 	call	2cac <_sbrk_r>
    7178:	99000217 	ldw	r4,8(r19)
    717c:	014003c4 	movi	r5,15
    7180:	1107c83a 	sub	r3,r2,r4
    7184:	28ffdd0e 	bge	r5,r3,70fc <__alt_data_end+0xff0070fc>
    7188:	01400074 	movhi	r5,1
    718c:	294e4a04 	addi	r5,r5,14632
    7190:	29400017 	ldw	r5,0(r5)
    7194:	18c00054 	ori	r3,r3,1
    7198:	20c00115 	stw	r3,4(r4)
    719c:	00c00074 	movhi	r3,1
    71a0:	1145c83a 	sub	r2,r2,r5
    71a4:	18d52f04 	addi	r3,r3,21692
    71a8:	18800015 	stw	r2,0(r3)
    71ac:	003fd306 	br	70fc <__alt_data_end+0xff0070fc>

000071b0 <_free_r>:
    71b0:	28004126 	beq	r5,zero,72b8 <_free_r+0x108>
    71b4:	defffd04 	addi	sp,sp,-12
    71b8:	dc400115 	stw	r17,4(sp)
    71bc:	dc000015 	stw	r16,0(sp)
    71c0:	2023883a 	mov	r17,r4
    71c4:	2821883a 	mov	r16,r5
    71c8:	dfc00215 	stw	ra,8(sp)
    71cc:	000f1fc0 	call	f1fc <__malloc_lock>
    71d0:	81ffff17 	ldw	r7,-4(r16)
    71d4:	00bfff84 	movi	r2,-2
    71d8:	01000074 	movhi	r4,1
    71dc:	81bffe04 	addi	r6,r16,-8
    71e0:	3884703a 	and	r2,r7,r2
    71e4:	21079f04 	addi	r4,r4,7804
    71e8:	308b883a 	add	r5,r6,r2
    71ec:	2a400117 	ldw	r9,4(r5)
    71f0:	22000217 	ldw	r8,8(r4)
    71f4:	00ffff04 	movi	r3,-4
    71f8:	48c6703a 	and	r3,r9,r3
    71fc:	2a005726 	beq	r5,r8,735c <_free_r+0x1ac>
    7200:	28c00115 	stw	r3,4(r5)
    7204:	39c0004c 	andi	r7,r7,1
    7208:	3800091e 	bne	r7,zero,7230 <_free_r+0x80>
    720c:	823ffe17 	ldw	r8,-8(r16)
    7210:	22400204 	addi	r9,r4,8
    7214:	320dc83a 	sub	r6,r6,r8
    7218:	31c00217 	ldw	r7,8(r6)
    721c:	1205883a 	add	r2,r2,r8
    7220:	3a406526 	beq	r7,r9,73b8 <_free_r+0x208>
    7224:	32000317 	ldw	r8,12(r6)
    7228:	3a000315 	stw	r8,12(r7)
    722c:	41c00215 	stw	r7,8(r8)
    7230:	28cf883a 	add	r7,r5,r3
    7234:	39c00117 	ldw	r7,4(r7)
    7238:	39c0004c 	andi	r7,r7,1
    723c:	38003a26 	beq	r7,zero,7328 <_free_r+0x178>
    7240:	10c00054 	ori	r3,r2,1
    7244:	30c00115 	stw	r3,4(r6)
    7248:	3087883a 	add	r3,r6,r2
    724c:	18800015 	stw	r2,0(r3)
    7250:	00c07fc4 	movi	r3,511
    7254:	18801936 	bltu	r3,r2,72bc <_free_r+0x10c>
    7258:	1004d0fa 	srli	r2,r2,3
    725c:	01c00044 	movi	r7,1
    7260:	21400117 	ldw	r5,4(r4)
    7264:	10c00044 	addi	r3,r2,1
    7268:	18c7883a 	add	r3,r3,r3
    726c:	1005d0ba 	srai	r2,r2,2
    7270:	18c7883a 	add	r3,r3,r3
    7274:	18c7883a 	add	r3,r3,r3
    7278:	1907883a 	add	r3,r3,r4
    727c:	3884983a 	sll	r2,r7,r2
    7280:	19c00017 	ldw	r7,0(r3)
    7284:	1a3ffe04 	addi	r8,r3,-8
    7288:	1144b03a 	or	r2,r2,r5
    728c:	32000315 	stw	r8,12(r6)
    7290:	31c00215 	stw	r7,8(r6)
    7294:	20800115 	stw	r2,4(r4)
    7298:	19800015 	stw	r6,0(r3)
    729c:	39800315 	stw	r6,12(r7)
    72a0:	8809883a 	mov	r4,r17
    72a4:	dfc00217 	ldw	ra,8(sp)
    72a8:	dc400117 	ldw	r17,4(sp)
    72ac:	dc000017 	ldw	r16,0(sp)
    72b0:	dec00304 	addi	sp,sp,12
    72b4:	000f2201 	jmpi	f220 <__malloc_unlock>
    72b8:	f800283a 	ret
    72bc:	100ad27a 	srli	r5,r2,9
    72c0:	00c00104 	movi	r3,4
    72c4:	19404a36 	bltu	r3,r5,73f0 <_free_r+0x240>
    72c8:	100ad1ba 	srli	r5,r2,6
    72cc:	28c00e44 	addi	r3,r5,57
    72d0:	18c7883a 	add	r3,r3,r3
    72d4:	29400e04 	addi	r5,r5,56
    72d8:	18c7883a 	add	r3,r3,r3
    72dc:	18c7883a 	add	r3,r3,r3
    72e0:	1909883a 	add	r4,r3,r4
    72e4:	20c00017 	ldw	r3,0(r4)
    72e8:	01c00074 	movhi	r7,1
    72ec:	213ffe04 	addi	r4,r4,-8
    72f0:	39c79f04 	addi	r7,r7,7804
    72f4:	20c04426 	beq	r4,r3,7408 <_free_r+0x258>
    72f8:	01ffff04 	movi	r7,-4
    72fc:	19400117 	ldw	r5,4(r3)
    7300:	29ca703a 	and	r5,r5,r7
    7304:	1140022e 	bgeu	r2,r5,7310 <_free_r+0x160>
    7308:	18c00217 	ldw	r3,8(r3)
    730c:	20fffb1e 	bne	r4,r3,72fc <__alt_data_end+0xff0072fc>
    7310:	19000317 	ldw	r4,12(r3)
    7314:	31000315 	stw	r4,12(r6)
    7318:	30c00215 	stw	r3,8(r6)
    731c:	21800215 	stw	r6,8(r4)
    7320:	19800315 	stw	r6,12(r3)
    7324:	003fde06 	br	72a0 <__alt_data_end+0xff0072a0>
    7328:	29c00217 	ldw	r7,8(r5)
    732c:	10c5883a 	add	r2,r2,r3
    7330:	00c00074 	movhi	r3,1
    7334:	18c7a104 	addi	r3,r3,7812
    7338:	38c03b26 	beq	r7,r3,7428 <_free_r+0x278>
    733c:	2a000317 	ldw	r8,12(r5)
    7340:	11400054 	ori	r5,r2,1
    7344:	3087883a 	add	r3,r6,r2
    7348:	3a000315 	stw	r8,12(r7)
    734c:	41c00215 	stw	r7,8(r8)
    7350:	31400115 	stw	r5,4(r6)
    7354:	18800015 	stw	r2,0(r3)
    7358:	003fbd06 	br	7250 <__alt_data_end+0xff007250>
    735c:	39c0004c 	andi	r7,r7,1
    7360:	10c5883a 	add	r2,r2,r3
    7364:	3800071e 	bne	r7,zero,7384 <_free_r+0x1d4>
    7368:	81fffe17 	ldw	r7,-8(r16)
    736c:	31cdc83a 	sub	r6,r6,r7
    7370:	30c00317 	ldw	r3,12(r6)
    7374:	31400217 	ldw	r5,8(r6)
    7378:	11c5883a 	add	r2,r2,r7
    737c:	28c00315 	stw	r3,12(r5)
    7380:	19400215 	stw	r5,8(r3)
    7384:	10c00054 	ori	r3,r2,1
    7388:	30c00115 	stw	r3,4(r6)
    738c:	00c00074 	movhi	r3,1
    7390:	18ce4b04 	addi	r3,r3,14636
    7394:	18c00017 	ldw	r3,0(r3)
    7398:	21800215 	stw	r6,8(r4)
    739c:	10ffc036 	bltu	r2,r3,72a0 <__alt_data_end+0xff0072a0>
    73a0:	00800074 	movhi	r2,1
    73a4:	10952104 	addi	r2,r2,21636
    73a8:	11400017 	ldw	r5,0(r2)
    73ac:	8809883a 	mov	r4,r17
    73b0:	000708c0 	call	708c <_malloc_trim_r>
    73b4:	003fba06 	br	72a0 <__alt_data_end+0xff0072a0>
    73b8:	28c9883a 	add	r4,r5,r3
    73bc:	21000117 	ldw	r4,4(r4)
    73c0:	2100004c 	andi	r4,r4,1
    73c4:	2000391e 	bne	r4,zero,74ac <_free_r+0x2fc>
    73c8:	29c00217 	ldw	r7,8(r5)
    73cc:	29000317 	ldw	r4,12(r5)
    73d0:	1885883a 	add	r2,r3,r2
    73d4:	10c00054 	ori	r3,r2,1
    73d8:	39000315 	stw	r4,12(r7)
    73dc:	21c00215 	stw	r7,8(r4)
    73e0:	30c00115 	stw	r3,4(r6)
    73e4:	308d883a 	add	r6,r6,r2
    73e8:	30800015 	stw	r2,0(r6)
    73ec:	003fac06 	br	72a0 <__alt_data_end+0xff0072a0>
    73f0:	00c00504 	movi	r3,20
    73f4:	19401536 	bltu	r3,r5,744c <_free_r+0x29c>
    73f8:	28c01704 	addi	r3,r5,92
    73fc:	18c7883a 	add	r3,r3,r3
    7400:	294016c4 	addi	r5,r5,91
    7404:	003fb406 	br	72d8 <__alt_data_end+0xff0072d8>
    7408:	280bd0ba 	srai	r5,r5,2
    740c:	00c00044 	movi	r3,1
    7410:	38800117 	ldw	r2,4(r7)
    7414:	194a983a 	sll	r5,r3,r5
    7418:	2007883a 	mov	r3,r4
    741c:	2884b03a 	or	r2,r5,r2
    7420:	38800115 	stw	r2,4(r7)
    7424:	003fbb06 	br	7314 <__alt_data_end+0xff007314>
    7428:	21800515 	stw	r6,20(r4)
    742c:	21800415 	stw	r6,16(r4)
    7430:	10c00054 	ori	r3,r2,1
    7434:	31c00315 	stw	r7,12(r6)
    7438:	31c00215 	stw	r7,8(r6)
    743c:	30c00115 	stw	r3,4(r6)
    7440:	308d883a 	add	r6,r6,r2
    7444:	30800015 	stw	r2,0(r6)
    7448:	003f9506 	br	72a0 <__alt_data_end+0xff0072a0>
    744c:	00c01504 	movi	r3,84
    7450:	19400536 	bltu	r3,r5,7468 <_free_r+0x2b8>
    7454:	100ad33a 	srli	r5,r2,12
    7458:	28c01bc4 	addi	r3,r5,111
    745c:	18c7883a 	add	r3,r3,r3
    7460:	29401b84 	addi	r5,r5,110
    7464:	003f9c06 	br	72d8 <__alt_data_end+0xff0072d8>
    7468:	00c05504 	movi	r3,340
    746c:	19400536 	bltu	r3,r5,7484 <_free_r+0x2d4>
    7470:	100ad3fa 	srli	r5,r2,15
    7474:	28c01e04 	addi	r3,r5,120
    7478:	18c7883a 	add	r3,r3,r3
    747c:	29401dc4 	addi	r5,r5,119
    7480:	003f9506 	br	72d8 <__alt_data_end+0xff0072d8>
    7484:	00c15504 	movi	r3,1364
    7488:	19400536 	bltu	r3,r5,74a0 <_free_r+0x2f0>
    748c:	100ad4ba 	srli	r5,r2,18
    7490:	28c01f44 	addi	r3,r5,125
    7494:	18c7883a 	add	r3,r3,r3
    7498:	29401f04 	addi	r5,r5,124
    749c:	003f8e06 	br	72d8 <__alt_data_end+0xff0072d8>
    74a0:	00c03f84 	movi	r3,254
    74a4:	01401f84 	movi	r5,126
    74a8:	003f8b06 	br	72d8 <__alt_data_end+0xff0072d8>
    74ac:	10c00054 	ori	r3,r2,1
    74b0:	30c00115 	stw	r3,4(r6)
    74b4:	308d883a 	add	r6,r6,r2
    74b8:	30800015 	stw	r2,0(r6)
    74bc:	003f7806 	br	72a0 <__alt_data_end+0xff0072a0>

000074c0 <__sfvwrite_r>:
    74c0:	30800217 	ldw	r2,8(r6)
    74c4:	10006726 	beq	r2,zero,7664 <__sfvwrite_r+0x1a4>
    74c8:	28c0030b 	ldhu	r3,12(r5)
    74cc:	defff404 	addi	sp,sp,-48
    74d0:	dd400715 	stw	r21,28(sp)
    74d4:	dd000615 	stw	r20,24(sp)
    74d8:	dc000215 	stw	r16,8(sp)
    74dc:	dfc00b15 	stw	ra,44(sp)
    74e0:	df000a15 	stw	fp,40(sp)
    74e4:	ddc00915 	stw	r23,36(sp)
    74e8:	dd800815 	stw	r22,32(sp)
    74ec:	dcc00515 	stw	r19,20(sp)
    74f0:	dc800415 	stw	r18,16(sp)
    74f4:	dc400315 	stw	r17,12(sp)
    74f8:	1880020c 	andi	r2,r3,8
    74fc:	2821883a 	mov	r16,r5
    7500:	202b883a 	mov	r21,r4
    7504:	3029883a 	mov	r20,r6
    7508:	10002726 	beq	r2,zero,75a8 <__sfvwrite_r+0xe8>
    750c:	28800417 	ldw	r2,16(r5)
    7510:	10002526 	beq	r2,zero,75a8 <__sfvwrite_r+0xe8>
    7514:	1880008c 	andi	r2,r3,2
    7518:	a4400017 	ldw	r17,0(r20)
    751c:	10002a26 	beq	r2,zero,75c8 <__sfvwrite_r+0x108>
    7520:	05a00034 	movhi	r22,32768
    7524:	0027883a 	mov	r19,zero
    7528:	0025883a 	mov	r18,zero
    752c:	b5bf0004 	addi	r22,r22,-1024
    7530:	980d883a 	mov	r6,r19
    7534:	a809883a 	mov	r4,r21
    7538:	90004626 	beq	r18,zero,7654 <__sfvwrite_r+0x194>
    753c:	900f883a 	mov	r7,r18
    7540:	b480022e 	bgeu	r22,r18,754c <__sfvwrite_r+0x8c>
    7544:	01e00034 	movhi	r7,32768
    7548:	39ff0004 	addi	r7,r7,-1024
    754c:	80800917 	ldw	r2,36(r16)
    7550:	81400717 	ldw	r5,28(r16)
    7554:	103ee83a 	callr	r2
    7558:	0080570e 	bge	zero,r2,76b8 <__sfvwrite_r+0x1f8>
    755c:	a0c00217 	ldw	r3,8(r20)
    7560:	98a7883a 	add	r19,r19,r2
    7564:	90a5c83a 	sub	r18,r18,r2
    7568:	1885c83a 	sub	r2,r3,r2
    756c:	a0800215 	stw	r2,8(r20)
    7570:	103fef1e 	bne	r2,zero,7530 <__alt_data_end+0xff007530>
    7574:	0005883a 	mov	r2,zero
    7578:	dfc00b17 	ldw	ra,44(sp)
    757c:	df000a17 	ldw	fp,40(sp)
    7580:	ddc00917 	ldw	r23,36(sp)
    7584:	dd800817 	ldw	r22,32(sp)
    7588:	dd400717 	ldw	r21,28(sp)
    758c:	dd000617 	ldw	r20,24(sp)
    7590:	dcc00517 	ldw	r19,20(sp)
    7594:	dc800417 	ldw	r18,16(sp)
    7598:	dc400317 	ldw	r17,12(sp)
    759c:	dc000217 	ldw	r16,8(sp)
    75a0:	dec00c04 	addi	sp,sp,48
    75a4:	f800283a 	ret
    75a8:	800b883a 	mov	r5,r16
    75ac:	a809883a 	mov	r4,r21
    75b0:	00050680 	call	5068 <__swsetup_r>
    75b4:	1000eb1e 	bne	r2,zero,7964 <__sfvwrite_r+0x4a4>
    75b8:	80c0030b 	ldhu	r3,12(r16)
    75bc:	a4400017 	ldw	r17,0(r20)
    75c0:	1880008c 	andi	r2,r3,2
    75c4:	103fd61e 	bne	r2,zero,7520 <__alt_data_end+0xff007520>
    75c8:	1880004c 	andi	r2,r3,1
    75cc:	10003f1e 	bne	r2,zero,76cc <__sfvwrite_r+0x20c>
    75d0:	0039883a 	mov	fp,zero
    75d4:	0025883a 	mov	r18,zero
    75d8:	90001a26 	beq	r18,zero,7644 <__sfvwrite_r+0x184>
    75dc:	1880800c 	andi	r2,r3,512
    75e0:	84c00217 	ldw	r19,8(r16)
    75e4:	10002126 	beq	r2,zero,766c <__sfvwrite_r+0x1ac>
    75e8:	982f883a 	mov	r23,r19
    75ec:	94c09336 	bltu	r18,r19,783c <__sfvwrite_r+0x37c>
    75f0:	1881200c 	andi	r2,r3,1152
    75f4:	10009e1e 	bne	r2,zero,7870 <__sfvwrite_r+0x3b0>
    75f8:	81000017 	ldw	r4,0(r16)
    75fc:	b80d883a 	mov	r6,r23
    7600:	e00b883a 	mov	r5,fp
    7604:	0007fc80 	call	7fc8 <memmove>
    7608:	80c00217 	ldw	r3,8(r16)
    760c:	81000017 	ldw	r4,0(r16)
    7610:	9005883a 	mov	r2,r18
    7614:	1ce7c83a 	sub	r19,r3,r19
    7618:	25cf883a 	add	r7,r4,r23
    761c:	84c00215 	stw	r19,8(r16)
    7620:	81c00015 	stw	r7,0(r16)
    7624:	a0c00217 	ldw	r3,8(r20)
    7628:	e0b9883a 	add	fp,fp,r2
    762c:	90a5c83a 	sub	r18,r18,r2
    7630:	18a7c83a 	sub	r19,r3,r2
    7634:	a4c00215 	stw	r19,8(r20)
    7638:	983fce26 	beq	r19,zero,7574 <__alt_data_end+0xff007574>
    763c:	80c0030b 	ldhu	r3,12(r16)
    7640:	903fe61e 	bne	r18,zero,75dc <__alt_data_end+0xff0075dc>
    7644:	8f000017 	ldw	fp,0(r17)
    7648:	8c800117 	ldw	r18,4(r17)
    764c:	8c400204 	addi	r17,r17,8
    7650:	003fe106 	br	75d8 <__alt_data_end+0xff0075d8>
    7654:	8cc00017 	ldw	r19,0(r17)
    7658:	8c800117 	ldw	r18,4(r17)
    765c:	8c400204 	addi	r17,r17,8
    7660:	003fb306 	br	7530 <__alt_data_end+0xff007530>
    7664:	0005883a 	mov	r2,zero
    7668:	f800283a 	ret
    766c:	81000017 	ldw	r4,0(r16)
    7670:	80800417 	ldw	r2,16(r16)
    7674:	11005736 	bltu	r2,r4,77d4 <__sfvwrite_r+0x314>
    7678:	85c00517 	ldw	r23,20(r16)
    767c:	95c05536 	bltu	r18,r23,77d4 <__sfvwrite_r+0x314>
    7680:	00a00034 	movhi	r2,32768
    7684:	10bfffc4 	addi	r2,r2,-1
    7688:	9009883a 	mov	r4,r18
    768c:	1480012e 	bgeu	r2,r18,7694 <__sfvwrite_r+0x1d4>
    7690:	1009883a 	mov	r4,r2
    7694:	b80b883a 	mov	r5,r23
    7698:	000c4640 	call	c464 <__divsi3>
    769c:	15cf383a 	mul	r7,r2,r23
    76a0:	81400717 	ldw	r5,28(r16)
    76a4:	80800917 	ldw	r2,36(r16)
    76a8:	e00d883a 	mov	r6,fp
    76ac:	a809883a 	mov	r4,r21
    76b0:	103ee83a 	callr	r2
    76b4:	00bfdb16 	blt	zero,r2,7624 <__alt_data_end+0xff007624>
    76b8:	8080030b 	ldhu	r2,12(r16)
    76bc:	10801014 	ori	r2,r2,64
    76c0:	8080030d 	sth	r2,12(r16)
    76c4:	00bfffc4 	movi	r2,-1
    76c8:	003fab06 	br	7578 <__alt_data_end+0xff007578>
    76cc:	0027883a 	mov	r19,zero
    76d0:	0011883a 	mov	r8,zero
    76d4:	0039883a 	mov	fp,zero
    76d8:	0025883a 	mov	r18,zero
    76dc:	90001f26 	beq	r18,zero,775c <__sfvwrite_r+0x29c>
    76e0:	40005a26 	beq	r8,zero,784c <__sfvwrite_r+0x38c>
    76e4:	982d883a 	mov	r22,r19
    76e8:	94c0012e 	bgeu	r18,r19,76f0 <__sfvwrite_r+0x230>
    76ec:	902d883a 	mov	r22,r18
    76f0:	81000017 	ldw	r4,0(r16)
    76f4:	80800417 	ldw	r2,16(r16)
    76f8:	b02f883a 	mov	r23,r22
    76fc:	81c00517 	ldw	r7,20(r16)
    7700:	1100032e 	bgeu	r2,r4,7710 <__sfvwrite_r+0x250>
    7704:	80c00217 	ldw	r3,8(r16)
    7708:	38c7883a 	add	r3,r7,r3
    770c:	1d801816 	blt	r3,r22,7770 <__sfvwrite_r+0x2b0>
    7710:	b1c03e16 	blt	r22,r7,780c <__sfvwrite_r+0x34c>
    7714:	80800917 	ldw	r2,36(r16)
    7718:	81400717 	ldw	r5,28(r16)
    771c:	e00d883a 	mov	r6,fp
    7720:	da000115 	stw	r8,4(sp)
    7724:	a809883a 	mov	r4,r21
    7728:	103ee83a 	callr	r2
    772c:	102f883a 	mov	r23,r2
    7730:	da000117 	ldw	r8,4(sp)
    7734:	00bfe00e 	bge	zero,r2,76b8 <__alt_data_end+0xff0076b8>
    7738:	9de7c83a 	sub	r19,r19,r23
    773c:	98001f26 	beq	r19,zero,77bc <__sfvwrite_r+0x2fc>
    7740:	a0800217 	ldw	r2,8(r20)
    7744:	e5f9883a 	add	fp,fp,r23
    7748:	95e5c83a 	sub	r18,r18,r23
    774c:	15efc83a 	sub	r23,r2,r23
    7750:	a5c00215 	stw	r23,8(r20)
    7754:	b83f8726 	beq	r23,zero,7574 <__alt_data_end+0xff007574>
    7758:	903fe11e 	bne	r18,zero,76e0 <__alt_data_end+0xff0076e0>
    775c:	8f000017 	ldw	fp,0(r17)
    7760:	8c800117 	ldw	r18,4(r17)
    7764:	0011883a 	mov	r8,zero
    7768:	8c400204 	addi	r17,r17,8
    776c:	003fdb06 	br	76dc <__alt_data_end+0xff0076dc>
    7770:	180d883a 	mov	r6,r3
    7774:	e00b883a 	mov	r5,fp
    7778:	da000115 	stw	r8,4(sp)
    777c:	d8c00015 	stw	r3,0(sp)
    7780:	0007fc80 	call	7fc8 <memmove>
    7784:	d8c00017 	ldw	r3,0(sp)
    7788:	80800017 	ldw	r2,0(r16)
    778c:	800b883a 	mov	r5,r16
    7790:	a809883a 	mov	r4,r21
    7794:	10c5883a 	add	r2,r2,r3
    7798:	80800015 	stw	r2,0(r16)
    779c:	d8c00015 	stw	r3,0(sp)
    77a0:	0006c600 	call	6c60 <_fflush_r>
    77a4:	d8c00017 	ldw	r3,0(sp)
    77a8:	da000117 	ldw	r8,4(sp)
    77ac:	103fc21e 	bne	r2,zero,76b8 <__alt_data_end+0xff0076b8>
    77b0:	182f883a 	mov	r23,r3
    77b4:	9de7c83a 	sub	r19,r19,r23
    77b8:	983fe11e 	bne	r19,zero,7740 <__alt_data_end+0xff007740>
    77bc:	800b883a 	mov	r5,r16
    77c0:	a809883a 	mov	r4,r21
    77c4:	0006c600 	call	6c60 <_fflush_r>
    77c8:	103fbb1e 	bne	r2,zero,76b8 <__alt_data_end+0xff0076b8>
    77cc:	0011883a 	mov	r8,zero
    77d0:	003fdb06 	br	7740 <__alt_data_end+0xff007740>
    77d4:	94c0012e 	bgeu	r18,r19,77dc <__sfvwrite_r+0x31c>
    77d8:	9027883a 	mov	r19,r18
    77dc:	980d883a 	mov	r6,r19
    77e0:	e00b883a 	mov	r5,fp
    77e4:	0007fc80 	call	7fc8 <memmove>
    77e8:	80800217 	ldw	r2,8(r16)
    77ec:	80c00017 	ldw	r3,0(r16)
    77f0:	14c5c83a 	sub	r2,r2,r19
    77f4:	1cc7883a 	add	r3,r3,r19
    77f8:	80800215 	stw	r2,8(r16)
    77fc:	80c00015 	stw	r3,0(r16)
    7800:	10004326 	beq	r2,zero,7910 <__sfvwrite_r+0x450>
    7804:	9805883a 	mov	r2,r19
    7808:	003f8606 	br	7624 <__alt_data_end+0xff007624>
    780c:	b00d883a 	mov	r6,r22
    7810:	e00b883a 	mov	r5,fp
    7814:	da000115 	stw	r8,4(sp)
    7818:	0007fc80 	call	7fc8 <memmove>
    781c:	80800217 	ldw	r2,8(r16)
    7820:	80c00017 	ldw	r3,0(r16)
    7824:	da000117 	ldw	r8,4(sp)
    7828:	1585c83a 	sub	r2,r2,r22
    782c:	1dad883a 	add	r22,r3,r22
    7830:	80800215 	stw	r2,8(r16)
    7834:	85800015 	stw	r22,0(r16)
    7838:	003fbf06 	br	7738 <__alt_data_end+0xff007738>
    783c:	81000017 	ldw	r4,0(r16)
    7840:	9027883a 	mov	r19,r18
    7844:	902f883a 	mov	r23,r18
    7848:	003f6c06 	br	75fc <__alt_data_end+0xff0075fc>
    784c:	900d883a 	mov	r6,r18
    7850:	01400284 	movi	r5,10
    7854:	e009883a 	mov	r4,fp
    7858:	0007d9c0 	call	7d9c <memchr>
    785c:	10003e26 	beq	r2,zero,7958 <__sfvwrite_r+0x498>
    7860:	10800044 	addi	r2,r2,1
    7864:	1727c83a 	sub	r19,r2,fp
    7868:	02000044 	movi	r8,1
    786c:	003f9d06 	br	76e4 <__alt_data_end+0xff0076e4>
    7870:	80800517 	ldw	r2,20(r16)
    7874:	81400417 	ldw	r5,16(r16)
    7878:	81c00017 	ldw	r7,0(r16)
    787c:	10a7883a 	add	r19,r2,r2
    7880:	9885883a 	add	r2,r19,r2
    7884:	1026d7fa 	srli	r19,r2,31
    7888:	396dc83a 	sub	r22,r7,r5
    788c:	b1000044 	addi	r4,r22,1
    7890:	9885883a 	add	r2,r19,r2
    7894:	1027d07a 	srai	r19,r2,1
    7898:	2485883a 	add	r2,r4,r18
    789c:	980d883a 	mov	r6,r19
    78a0:	9880022e 	bgeu	r19,r2,78ac <__sfvwrite_r+0x3ec>
    78a4:	1027883a 	mov	r19,r2
    78a8:	100d883a 	mov	r6,r2
    78ac:	18c1000c 	andi	r3,r3,1024
    78b0:	18001c26 	beq	r3,zero,7924 <__sfvwrite_r+0x464>
    78b4:	300b883a 	mov	r5,r6
    78b8:	a809883a 	mov	r4,r21
    78bc:	00023600 	call	2360 <_malloc_r>
    78c0:	102f883a 	mov	r23,r2
    78c4:	10002926 	beq	r2,zero,796c <__sfvwrite_r+0x4ac>
    78c8:	81400417 	ldw	r5,16(r16)
    78cc:	b00d883a 	mov	r6,r22
    78d0:	1009883a 	mov	r4,r2
    78d4:	0007e800 	call	7e80 <memcpy>
    78d8:	8080030b 	ldhu	r2,12(r16)
    78dc:	00fedfc4 	movi	r3,-1153
    78e0:	10c4703a 	and	r2,r2,r3
    78e4:	10802014 	ori	r2,r2,128
    78e8:	8080030d 	sth	r2,12(r16)
    78ec:	bd89883a 	add	r4,r23,r22
    78f0:	9d8fc83a 	sub	r7,r19,r22
    78f4:	85c00415 	stw	r23,16(r16)
    78f8:	84c00515 	stw	r19,20(r16)
    78fc:	81000015 	stw	r4,0(r16)
    7900:	9027883a 	mov	r19,r18
    7904:	81c00215 	stw	r7,8(r16)
    7908:	902f883a 	mov	r23,r18
    790c:	003f3b06 	br	75fc <__alt_data_end+0xff0075fc>
    7910:	800b883a 	mov	r5,r16
    7914:	a809883a 	mov	r4,r21
    7918:	0006c600 	call	6c60 <_fflush_r>
    791c:	103fb926 	beq	r2,zero,7804 <__alt_data_end+0xff007804>
    7920:	003f6506 	br	76b8 <__alt_data_end+0xff0076b8>
    7924:	a809883a 	mov	r4,r21
    7928:	00092480 	call	9248 <_realloc_r>
    792c:	102f883a 	mov	r23,r2
    7930:	103fee1e 	bne	r2,zero,78ec <__alt_data_end+0xff0078ec>
    7934:	81400417 	ldw	r5,16(r16)
    7938:	a809883a 	mov	r4,r21
    793c:	00071b00 	call	71b0 <_free_r>
    7940:	8080030b 	ldhu	r2,12(r16)
    7944:	00ffdfc4 	movi	r3,-129
    7948:	1884703a 	and	r2,r3,r2
    794c:	00c00304 	movi	r3,12
    7950:	a8c00015 	stw	r3,0(r21)
    7954:	003f5906 	br	76bc <__alt_data_end+0xff0076bc>
    7958:	94c00044 	addi	r19,r18,1
    795c:	02000044 	movi	r8,1
    7960:	003f6006 	br	76e4 <__alt_data_end+0xff0076e4>
    7964:	00bfffc4 	movi	r2,-1
    7968:	003f0306 	br	7578 <__alt_data_end+0xff007578>
    796c:	00800304 	movi	r2,12
    7970:	a8800015 	stw	r2,0(r21)
    7974:	8080030b 	ldhu	r2,12(r16)
    7978:	003f5006 	br	76bc <__alt_data_end+0xff0076bc>

0000797c <_fwalk>:
    797c:	defff704 	addi	sp,sp,-36
    7980:	dd000415 	stw	r20,16(sp)
    7984:	dfc00815 	stw	ra,32(sp)
    7988:	ddc00715 	stw	r23,28(sp)
    798c:	dd800615 	stw	r22,24(sp)
    7990:	dd400515 	stw	r21,20(sp)
    7994:	dcc00315 	stw	r19,12(sp)
    7998:	dc800215 	stw	r18,8(sp)
    799c:	dc400115 	stw	r17,4(sp)
    79a0:	dc000015 	stw	r16,0(sp)
    79a4:	2500b804 	addi	r20,r4,736
    79a8:	a0002326 	beq	r20,zero,7a38 <_fwalk+0xbc>
    79ac:	282b883a 	mov	r21,r5
    79b0:	002f883a 	mov	r23,zero
    79b4:	05800044 	movi	r22,1
    79b8:	04ffffc4 	movi	r19,-1
    79bc:	a4400117 	ldw	r17,4(r20)
    79c0:	a4800217 	ldw	r18,8(r20)
    79c4:	8c7fffc4 	addi	r17,r17,-1
    79c8:	88000d16 	blt	r17,zero,7a00 <_fwalk+0x84>
    79cc:	94000304 	addi	r16,r18,12
    79d0:	94800384 	addi	r18,r18,14
    79d4:	8080000b 	ldhu	r2,0(r16)
    79d8:	8c7fffc4 	addi	r17,r17,-1
    79dc:	813ffd04 	addi	r4,r16,-12
    79e0:	b080042e 	bgeu	r22,r2,79f4 <_fwalk+0x78>
    79e4:	9080000f 	ldh	r2,0(r18)
    79e8:	14c00226 	beq	r2,r19,79f4 <_fwalk+0x78>
    79ec:	a83ee83a 	callr	r21
    79f0:	b8aeb03a 	or	r23,r23,r2
    79f4:	84001a04 	addi	r16,r16,104
    79f8:	94801a04 	addi	r18,r18,104
    79fc:	8cfff51e 	bne	r17,r19,79d4 <__alt_data_end+0xff0079d4>
    7a00:	a5000017 	ldw	r20,0(r20)
    7a04:	a03fed1e 	bne	r20,zero,79bc <__alt_data_end+0xff0079bc>
    7a08:	b805883a 	mov	r2,r23
    7a0c:	dfc00817 	ldw	ra,32(sp)
    7a10:	ddc00717 	ldw	r23,28(sp)
    7a14:	dd800617 	ldw	r22,24(sp)
    7a18:	dd400517 	ldw	r21,20(sp)
    7a1c:	dd000417 	ldw	r20,16(sp)
    7a20:	dcc00317 	ldw	r19,12(sp)
    7a24:	dc800217 	ldw	r18,8(sp)
    7a28:	dc400117 	ldw	r17,4(sp)
    7a2c:	dc000017 	ldw	r16,0(sp)
    7a30:	dec00904 	addi	sp,sp,36
    7a34:	f800283a 	ret
    7a38:	002f883a 	mov	r23,zero
    7a3c:	003ff206 	br	7a08 <__alt_data_end+0xff007a08>

00007a40 <_fwalk_reent>:
    7a40:	defff704 	addi	sp,sp,-36
    7a44:	dd000415 	stw	r20,16(sp)
    7a48:	dfc00815 	stw	ra,32(sp)
    7a4c:	ddc00715 	stw	r23,28(sp)
    7a50:	dd800615 	stw	r22,24(sp)
    7a54:	dd400515 	stw	r21,20(sp)
    7a58:	dcc00315 	stw	r19,12(sp)
    7a5c:	dc800215 	stw	r18,8(sp)
    7a60:	dc400115 	stw	r17,4(sp)
    7a64:	dc000015 	stw	r16,0(sp)
    7a68:	2500b804 	addi	r20,r4,736
    7a6c:	a0002326 	beq	r20,zero,7afc <_fwalk_reent+0xbc>
    7a70:	282b883a 	mov	r21,r5
    7a74:	2027883a 	mov	r19,r4
    7a78:	002f883a 	mov	r23,zero
    7a7c:	05800044 	movi	r22,1
    7a80:	04bfffc4 	movi	r18,-1
    7a84:	a4400117 	ldw	r17,4(r20)
    7a88:	a4000217 	ldw	r16,8(r20)
    7a8c:	8c7fffc4 	addi	r17,r17,-1
    7a90:	88000c16 	blt	r17,zero,7ac4 <_fwalk_reent+0x84>
    7a94:	84000304 	addi	r16,r16,12
    7a98:	8080000b 	ldhu	r2,0(r16)
    7a9c:	8c7fffc4 	addi	r17,r17,-1
    7aa0:	817ffd04 	addi	r5,r16,-12
    7aa4:	b080052e 	bgeu	r22,r2,7abc <_fwalk_reent+0x7c>
    7aa8:	8080008f 	ldh	r2,2(r16)
    7aac:	9809883a 	mov	r4,r19
    7ab0:	14800226 	beq	r2,r18,7abc <_fwalk_reent+0x7c>
    7ab4:	a83ee83a 	callr	r21
    7ab8:	b8aeb03a 	or	r23,r23,r2
    7abc:	84001a04 	addi	r16,r16,104
    7ac0:	8cbff51e 	bne	r17,r18,7a98 <__alt_data_end+0xff007a98>
    7ac4:	a5000017 	ldw	r20,0(r20)
    7ac8:	a03fee1e 	bne	r20,zero,7a84 <__alt_data_end+0xff007a84>
    7acc:	b805883a 	mov	r2,r23
    7ad0:	dfc00817 	ldw	ra,32(sp)
    7ad4:	ddc00717 	ldw	r23,28(sp)
    7ad8:	dd800617 	ldw	r22,24(sp)
    7adc:	dd400517 	ldw	r21,20(sp)
    7ae0:	dd000417 	ldw	r20,16(sp)
    7ae4:	dcc00317 	ldw	r19,12(sp)
    7ae8:	dc800217 	ldw	r18,8(sp)
    7aec:	dc400117 	ldw	r17,4(sp)
    7af0:	dc000017 	ldw	r16,0(sp)
    7af4:	dec00904 	addi	sp,sp,36
    7af8:	f800283a 	ret
    7afc:	002f883a 	mov	r23,zero
    7b00:	003ff206 	br	7acc <__alt_data_end+0xff007acc>

00007b04 <_setlocale_r>:
    7b04:	30001b26 	beq	r6,zero,7b74 <_setlocale_r+0x70>
    7b08:	01400074 	movhi	r5,1
    7b0c:	defffe04 	addi	sp,sp,-8
    7b10:	29470004 	addi	r5,r5,7168
    7b14:	3009883a 	mov	r4,r6
    7b18:	dc000015 	stw	r16,0(sp)
    7b1c:	dfc00115 	stw	ra,4(sp)
    7b20:	3021883a 	mov	r16,r6
    7b24:	000995c0 	call	995c <strcmp>
    7b28:	1000061e 	bne	r2,zero,7b44 <_setlocale_r+0x40>
    7b2c:	00800074 	movhi	r2,1
    7b30:	1086ff04 	addi	r2,r2,7164
    7b34:	dfc00117 	ldw	ra,4(sp)
    7b38:	dc000017 	ldw	r16,0(sp)
    7b3c:	dec00204 	addi	sp,sp,8
    7b40:	f800283a 	ret
    7b44:	01400074 	movhi	r5,1
    7b48:	2946ff04 	addi	r5,r5,7164
    7b4c:	8009883a 	mov	r4,r16
    7b50:	000995c0 	call	995c <strcmp>
    7b54:	103ff526 	beq	r2,zero,7b2c <__alt_data_end+0xff007b2c>
    7b58:	01400074 	movhi	r5,1
    7b5c:	2946ea04 	addi	r5,r5,7080
    7b60:	8009883a 	mov	r4,r16
    7b64:	000995c0 	call	995c <strcmp>
    7b68:	103ff026 	beq	r2,zero,7b2c <__alt_data_end+0xff007b2c>
    7b6c:	0005883a 	mov	r2,zero
    7b70:	003ff006 	br	7b34 <__alt_data_end+0xff007b34>
    7b74:	00800074 	movhi	r2,1
    7b78:	1086ff04 	addi	r2,r2,7164
    7b7c:	f800283a 	ret

00007b80 <__locale_charset>:
    7b80:	00800074 	movhi	r2,1
    7b84:	1089b204 	addi	r2,r2,9928
    7b88:	f800283a 	ret

00007b8c <__locale_mb_cur_max>:
    7b8c:	00800074 	movhi	r2,1
    7b90:	108e4e04 	addi	r2,r2,14648
    7b94:	10800017 	ldw	r2,0(r2)
    7b98:	f800283a 	ret

00007b9c <__locale_msgcharset>:
    7b9c:	00800074 	movhi	r2,1
    7ba0:	1089aa04 	addi	r2,r2,9896
    7ba4:	f800283a 	ret

00007ba8 <__locale_cjk_lang>:
    7ba8:	0005883a 	mov	r2,zero
    7bac:	f800283a 	ret

00007bb0 <_localeconv_r>:
    7bb0:	00800074 	movhi	r2,1
    7bb4:	1089ba04 	addi	r2,r2,9960
    7bb8:	f800283a 	ret

00007bbc <setlocale>:
    7bbc:	00800074 	movhi	r2,1
    7bc0:	108e4d04 	addi	r2,r2,14644
    7bc4:	280d883a 	mov	r6,r5
    7bc8:	200b883a 	mov	r5,r4
    7bcc:	11000017 	ldw	r4,0(r2)
    7bd0:	0007b041 	jmpi	7b04 <_setlocale_r>

00007bd4 <localeconv>:
    7bd4:	00800074 	movhi	r2,1
    7bd8:	1089ba04 	addi	r2,r2,9960
    7bdc:	f800283a 	ret

00007be0 <__smakebuf_r>:
    7be0:	2880030b 	ldhu	r2,12(r5)
    7be4:	10c0008c 	andi	r3,r2,2
    7be8:	1800411e 	bne	r3,zero,7cf0 <__smakebuf_r+0x110>
    7bec:	deffec04 	addi	sp,sp,-80
    7bf0:	dc000f15 	stw	r16,60(sp)
    7bf4:	2821883a 	mov	r16,r5
    7bf8:	2940038f 	ldh	r5,14(r5)
    7bfc:	dc401015 	stw	r17,64(sp)
    7c00:	dfc01315 	stw	ra,76(sp)
    7c04:	dcc01215 	stw	r19,72(sp)
    7c08:	dc801115 	stw	r18,68(sp)
    7c0c:	2023883a 	mov	r17,r4
    7c10:	28001c16 	blt	r5,zero,7c84 <__smakebuf_r+0xa4>
    7c14:	d80d883a 	mov	r6,sp
    7c18:	000b5040 	call	b504 <_fstat_r>
    7c1c:	10001816 	blt	r2,zero,7c80 <__smakebuf_r+0xa0>
    7c20:	d8800117 	ldw	r2,4(sp)
    7c24:	00e00014 	movui	r3,32768
    7c28:	10bc000c 	andi	r2,r2,61440
    7c2c:	14c80020 	cmpeqi	r19,r2,8192
    7c30:	10c03726 	beq	r2,r3,7d10 <__smakebuf_r+0x130>
    7c34:	80c0030b 	ldhu	r3,12(r16)
    7c38:	18c20014 	ori	r3,r3,2048
    7c3c:	80c0030d 	sth	r3,12(r16)
    7c40:	00c80004 	movi	r3,8192
    7c44:	10c0521e 	bne	r2,r3,7d90 <__smakebuf_r+0x1b0>
    7c48:	8140038f 	ldh	r5,14(r16)
    7c4c:	8809883a 	mov	r4,r17
    7c50:	000b5600 	call	b560 <_isatty_r>
    7c54:	10004c26 	beq	r2,zero,7d88 <__smakebuf_r+0x1a8>
    7c58:	8080030b 	ldhu	r2,12(r16)
    7c5c:	80c010c4 	addi	r3,r16,67
    7c60:	80c00015 	stw	r3,0(r16)
    7c64:	10800054 	ori	r2,r2,1
    7c68:	8080030d 	sth	r2,12(r16)
    7c6c:	00800044 	movi	r2,1
    7c70:	80c00415 	stw	r3,16(r16)
    7c74:	80800515 	stw	r2,20(r16)
    7c78:	04810004 	movi	r18,1024
    7c7c:	00000706 	br	7c9c <__smakebuf_r+0xbc>
    7c80:	8080030b 	ldhu	r2,12(r16)
    7c84:	10c0200c 	andi	r3,r2,128
    7c88:	18001f1e 	bne	r3,zero,7d08 <__smakebuf_r+0x128>
    7c8c:	04810004 	movi	r18,1024
    7c90:	10820014 	ori	r2,r2,2048
    7c94:	8080030d 	sth	r2,12(r16)
    7c98:	0027883a 	mov	r19,zero
    7c9c:	900b883a 	mov	r5,r18
    7ca0:	8809883a 	mov	r4,r17
    7ca4:	00023600 	call	2360 <_malloc_r>
    7ca8:	10002c26 	beq	r2,zero,7d5c <__smakebuf_r+0x17c>
    7cac:	80c0030b 	ldhu	r3,12(r16)
    7cb0:	01000034 	movhi	r4,0
    7cb4:	211b3d04 	addi	r4,r4,27892
    7cb8:	89000f15 	stw	r4,60(r17)
    7cbc:	18c02014 	ori	r3,r3,128
    7cc0:	80c0030d 	sth	r3,12(r16)
    7cc4:	80800015 	stw	r2,0(r16)
    7cc8:	80800415 	stw	r2,16(r16)
    7ccc:	84800515 	stw	r18,20(r16)
    7cd0:	98001a1e 	bne	r19,zero,7d3c <__smakebuf_r+0x15c>
    7cd4:	dfc01317 	ldw	ra,76(sp)
    7cd8:	dcc01217 	ldw	r19,72(sp)
    7cdc:	dc801117 	ldw	r18,68(sp)
    7ce0:	dc401017 	ldw	r17,64(sp)
    7ce4:	dc000f17 	ldw	r16,60(sp)
    7ce8:	dec01404 	addi	sp,sp,80
    7cec:	f800283a 	ret
    7cf0:	288010c4 	addi	r2,r5,67
    7cf4:	28800015 	stw	r2,0(r5)
    7cf8:	28800415 	stw	r2,16(r5)
    7cfc:	00800044 	movi	r2,1
    7d00:	28800515 	stw	r2,20(r5)
    7d04:	f800283a 	ret
    7d08:	04801004 	movi	r18,64
    7d0c:	003fe006 	br	7c90 <__alt_data_end+0xff007c90>
    7d10:	81000a17 	ldw	r4,40(r16)
    7d14:	00c00074 	movhi	r3,1
    7d18:	18e63e04 	addi	r3,r3,-26376
    7d1c:	20ffc51e 	bne	r4,r3,7c34 <__alt_data_end+0xff007c34>
    7d20:	8080030b 	ldhu	r2,12(r16)
    7d24:	04810004 	movi	r18,1024
    7d28:	84801315 	stw	r18,76(r16)
    7d2c:	1484b03a 	or	r2,r2,r18
    7d30:	8080030d 	sth	r2,12(r16)
    7d34:	0027883a 	mov	r19,zero
    7d38:	003fd806 	br	7c9c <__alt_data_end+0xff007c9c>
    7d3c:	8140038f 	ldh	r5,14(r16)
    7d40:	8809883a 	mov	r4,r17
    7d44:	000b5600 	call	b560 <_isatty_r>
    7d48:	103fe226 	beq	r2,zero,7cd4 <__alt_data_end+0xff007cd4>
    7d4c:	8080030b 	ldhu	r2,12(r16)
    7d50:	10800054 	ori	r2,r2,1
    7d54:	8080030d 	sth	r2,12(r16)
    7d58:	003fde06 	br	7cd4 <__alt_data_end+0xff007cd4>
    7d5c:	8080030b 	ldhu	r2,12(r16)
    7d60:	10c0800c 	andi	r3,r2,512
    7d64:	183fdb1e 	bne	r3,zero,7cd4 <__alt_data_end+0xff007cd4>
    7d68:	10800094 	ori	r2,r2,2
    7d6c:	80c010c4 	addi	r3,r16,67
    7d70:	8080030d 	sth	r2,12(r16)
    7d74:	00800044 	movi	r2,1
    7d78:	80c00015 	stw	r3,0(r16)
    7d7c:	80c00415 	stw	r3,16(r16)
    7d80:	80800515 	stw	r2,20(r16)
    7d84:	003fd306 	br	7cd4 <__alt_data_end+0xff007cd4>
    7d88:	04810004 	movi	r18,1024
    7d8c:	003fc306 	br	7c9c <__alt_data_end+0xff007c9c>
    7d90:	0027883a 	mov	r19,zero
    7d94:	04810004 	movi	r18,1024
    7d98:	003fc006 	br	7c9c <__alt_data_end+0xff007c9c>

00007d9c <memchr>:
    7d9c:	208000cc 	andi	r2,r4,3
    7da0:	280f883a 	mov	r7,r5
    7da4:	10003426 	beq	r2,zero,7e78 <memchr+0xdc>
    7da8:	30bfffc4 	addi	r2,r6,-1
    7dac:	30001a26 	beq	r6,zero,7e18 <memchr+0x7c>
    7db0:	20c00003 	ldbu	r3,0(r4)
    7db4:	29803fcc 	andi	r6,r5,255
    7db8:	30c0051e 	bne	r6,r3,7dd0 <memchr+0x34>
    7dbc:	00001806 	br	7e20 <memchr+0x84>
    7dc0:	10001526 	beq	r2,zero,7e18 <memchr+0x7c>
    7dc4:	20c00003 	ldbu	r3,0(r4)
    7dc8:	10bfffc4 	addi	r2,r2,-1
    7dcc:	30c01426 	beq	r6,r3,7e20 <memchr+0x84>
    7dd0:	21000044 	addi	r4,r4,1
    7dd4:	20c000cc 	andi	r3,r4,3
    7dd8:	183ff91e 	bne	r3,zero,7dc0 <__alt_data_end+0xff007dc0>
    7ddc:	020000c4 	movi	r8,3
    7de0:	40801136 	bltu	r8,r2,7e28 <memchr+0x8c>
    7de4:	10000c26 	beq	r2,zero,7e18 <memchr+0x7c>
    7de8:	20c00003 	ldbu	r3,0(r4)
    7dec:	29403fcc 	andi	r5,r5,255
    7df0:	28c00b26 	beq	r5,r3,7e20 <memchr+0x84>
    7df4:	20c00044 	addi	r3,r4,1
    7df8:	39803fcc 	andi	r6,r7,255
    7dfc:	2089883a 	add	r4,r4,r2
    7e00:	00000306 	br	7e10 <memchr+0x74>
    7e04:	18c00044 	addi	r3,r3,1
    7e08:	197fffc3 	ldbu	r5,-1(r3)
    7e0c:	31400526 	beq	r6,r5,7e24 <memchr+0x88>
    7e10:	1805883a 	mov	r2,r3
    7e14:	20fffb1e 	bne	r4,r3,7e04 <__alt_data_end+0xff007e04>
    7e18:	0005883a 	mov	r2,zero
    7e1c:	f800283a 	ret
    7e20:	2005883a 	mov	r2,r4
    7e24:	f800283a 	ret
    7e28:	28c03fcc 	andi	r3,r5,255
    7e2c:	1812923a 	slli	r9,r3,8
    7e30:	02ffbff4 	movhi	r11,65279
    7e34:	02a02074 	movhi	r10,32897
    7e38:	48d2b03a 	or	r9,r9,r3
    7e3c:	4806943a 	slli	r3,r9,16
    7e40:	5affbfc4 	addi	r11,r11,-257
    7e44:	52a02004 	addi	r10,r10,-32640
    7e48:	48d2b03a 	or	r9,r9,r3
    7e4c:	20c00017 	ldw	r3,0(r4)
    7e50:	48c6f03a 	xor	r3,r9,r3
    7e54:	1acd883a 	add	r6,r3,r11
    7e58:	00c6303a 	nor	r3,zero,r3
    7e5c:	30c6703a 	and	r3,r6,r3
    7e60:	1a86703a 	and	r3,r3,r10
    7e64:	183fe01e 	bne	r3,zero,7de8 <__alt_data_end+0xff007de8>
    7e68:	10bfff04 	addi	r2,r2,-4
    7e6c:	21000104 	addi	r4,r4,4
    7e70:	40bff636 	bltu	r8,r2,7e4c <__alt_data_end+0xff007e4c>
    7e74:	003fdb06 	br	7de4 <__alt_data_end+0xff007de4>
    7e78:	3005883a 	mov	r2,r6
    7e7c:	003fd706 	br	7ddc <__alt_data_end+0xff007ddc>

00007e80 <memcpy>:
    7e80:	defffd04 	addi	sp,sp,-12
    7e84:	dfc00215 	stw	ra,8(sp)
    7e88:	dc400115 	stw	r17,4(sp)
    7e8c:	dc000015 	stw	r16,0(sp)
    7e90:	00c003c4 	movi	r3,15
    7e94:	2005883a 	mov	r2,r4
    7e98:	1980452e 	bgeu	r3,r6,7fb0 <memcpy+0x130>
    7e9c:	2906b03a 	or	r3,r5,r4
    7ea0:	18c000cc 	andi	r3,r3,3
    7ea4:	1800441e 	bne	r3,zero,7fb8 <memcpy+0x138>
    7ea8:	347ffc04 	addi	r17,r6,-16
    7eac:	8822d13a 	srli	r17,r17,4
    7eb0:	28c00104 	addi	r3,r5,4
    7eb4:	23400104 	addi	r13,r4,4
    7eb8:	8820913a 	slli	r16,r17,4
    7ebc:	2b000204 	addi	r12,r5,8
    7ec0:	22c00204 	addi	r11,r4,8
    7ec4:	84000504 	addi	r16,r16,20
    7ec8:	2a800304 	addi	r10,r5,12
    7ecc:	22400304 	addi	r9,r4,12
    7ed0:	2c21883a 	add	r16,r5,r16
    7ed4:	2811883a 	mov	r8,r5
    7ed8:	200f883a 	mov	r7,r4
    7edc:	41000017 	ldw	r4,0(r8)
    7ee0:	1fc00017 	ldw	ra,0(r3)
    7ee4:	63c00017 	ldw	r15,0(r12)
    7ee8:	39000015 	stw	r4,0(r7)
    7eec:	53800017 	ldw	r14,0(r10)
    7ef0:	6fc00015 	stw	ra,0(r13)
    7ef4:	5bc00015 	stw	r15,0(r11)
    7ef8:	4b800015 	stw	r14,0(r9)
    7efc:	18c00404 	addi	r3,r3,16
    7f00:	39c00404 	addi	r7,r7,16
    7f04:	42000404 	addi	r8,r8,16
    7f08:	6b400404 	addi	r13,r13,16
    7f0c:	63000404 	addi	r12,r12,16
    7f10:	5ac00404 	addi	r11,r11,16
    7f14:	52800404 	addi	r10,r10,16
    7f18:	4a400404 	addi	r9,r9,16
    7f1c:	1c3fef1e 	bne	r3,r16,7edc <__alt_data_end+0xff007edc>
    7f20:	89c00044 	addi	r7,r17,1
    7f24:	380e913a 	slli	r7,r7,4
    7f28:	310003cc 	andi	r4,r6,15
    7f2c:	02c000c4 	movi	r11,3
    7f30:	11c7883a 	add	r3,r2,r7
    7f34:	29cb883a 	add	r5,r5,r7
    7f38:	5900212e 	bgeu	r11,r4,7fc0 <memcpy+0x140>
    7f3c:	1813883a 	mov	r9,r3
    7f40:	2811883a 	mov	r8,r5
    7f44:	200f883a 	mov	r7,r4
    7f48:	42800017 	ldw	r10,0(r8)
    7f4c:	4a400104 	addi	r9,r9,4
    7f50:	39ffff04 	addi	r7,r7,-4
    7f54:	4abfff15 	stw	r10,-4(r9)
    7f58:	42000104 	addi	r8,r8,4
    7f5c:	59fffa36 	bltu	r11,r7,7f48 <__alt_data_end+0xff007f48>
    7f60:	213fff04 	addi	r4,r4,-4
    7f64:	2008d0ba 	srli	r4,r4,2
    7f68:	318000cc 	andi	r6,r6,3
    7f6c:	21000044 	addi	r4,r4,1
    7f70:	2109883a 	add	r4,r4,r4
    7f74:	2109883a 	add	r4,r4,r4
    7f78:	1907883a 	add	r3,r3,r4
    7f7c:	290b883a 	add	r5,r5,r4
    7f80:	30000626 	beq	r6,zero,7f9c <memcpy+0x11c>
    7f84:	198d883a 	add	r6,r3,r6
    7f88:	29c00003 	ldbu	r7,0(r5)
    7f8c:	18c00044 	addi	r3,r3,1
    7f90:	29400044 	addi	r5,r5,1
    7f94:	19ffffc5 	stb	r7,-1(r3)
    7f98:	19bffb1e 	bne	r3,r6,7f88 <__alt_data_end+0xff007f88>
    7f9c:	dfc00217 	ldw	ra,8(sp)
    7fa0:	dc400117 	ldw	r17,4(sp)
    7fa4:	dc000017 	ldw	r16,0(sp)
    7fa8:	dec00304 	addi	sp,sp,12
    7fac:	f800283a 	ret
    7fb0:	2007883a 	mov	r3,r4
    7fb4:	003ff206 	br	7f80 <__alt_data_end+0xff007f80>
    7fb8:	2007883a 	mov	r3,r4
    7fbc:	003ff106 	br	7f84 <__alt_data_end+0xff007f84>
    7fc0:	200d883a 	mov	r6,r4
    7fc4:	003fee06 	br	7f80 <__alt_data_end+0xff007f80>

00007fc8 <memmove>:
    7fc8:	2005883a 	mov	r2,r4
    7fcc:	29000b2e 	bgeu	r5,r4,7ffc <memmove+0x34>
    7fd0:	298f883a 	add	r7,r5,r6
    7fd4:	21c0092e 	bgeu	r4,r7,7ffc <memmove+0x34>
    7fd8:	2187883a 	add	r3,r4,r6
    7fdc:	198bc83a 	sub	r5,r3,r6
    7fe0:	30004826 	beq	r6,zero,8104 <memmove+0x13c>
    7fe4:	39ffffc4 	addi	r7,r7,-1
    7fe8:	39000003 	ldbu	r4,0(r7)
    7fec:	18ffffc4 	addi	r3,r3,-1
    7ff0:	19000005 	stb	r4,0(r3)
    7ff4:	28fffb1e 	bne	r5,r3,7fe4 <__alt_data_end+0xff007fe4>
    7ff8:	f800283a 	ret
    7ffc:	00c003c4 	movi	r3,15
    8000:	1980412e 	bgeu	r3,r6,8108 <memmove+0x140>
    8004:	2886b03a 	or	r3,r5,r2
    8008:	18c000cc 	andi	r3,r3,3
    800c:	1800401e 	bne	r3,zero,8110 <memmove+0x148>
    8010:	33fffc04 	addi	r15,r6,-16
    8014:	781ed13a 	srli	r15,r15,4
    8018:	28c00104 	addi	r3,r5,4
    801c:	13400104 	addi	r13,r2,4
    8020:	781c913a 	slli	r14,r15,4
    8024:	2b000204 	addi	r12,r5,8
    8028:	12c00204 	addi	r11,r2,8
    802c:	73800504 	addi	r14,r14,20
    8030:	2a800304 	addi	r10,r5,12
    8034:	12400304 	addi	r9,r2,12
    8038:	2b9d883a 	add	r14,r5,r14
    803c:	2811883a 	mov	r8,r5
    8040:	100f883a 	mov	r7,r2
    8044:	41000017 	ldw	r4,0(r8)
    8048:	39c00404 	addi	r7,r7,16
    804c:	18c00404 	addi	r3,r3,16
    8050:	393ffc15 	stw	r4,-16(r7)
    8054:	193ffc17 	ldw	r4,-16(r3)
    8058:	6b400404 	addi	r13,r13,16
    805c:	5ac00404 	addi	r11,r11,16
    8060:	693ffc15 	stw	r4,-16(r13)
    8064:	61000017 	ldw	r4,0(r12)
    8068:	4a400404 	addi	r9,r9,16
    806c:	42000404 	addi	r8,r8,16
    8070:	593ffc15 	stw	r4,-16(r11)
    8074:	51000017 	ldw	r4,0(r10)
    8078:	63000404 	addi	r12,r12,16
    807c:	52800404 	addi	r10,r10,16
    8080:	493ffc15 	stw	r4,-16(r9)
    8084:	1bbfef1e 	bne	r3,r14,8044 <__alt_data_end+0xff008044>
    8088:	79000044 	addi	r4,r15,1
    808c:	2008913a 	slli	r4,r4,4
    8090:	328003cc 	andi	r10,r6,15
    8094:	02c000c4 	movi	r11,3
    8098:	1107883a 	add	r3,r2,r4
    809c:	290b883a 	add	r5,r5,r4
    80a0:	5a801e2e 	bgeu	r11,r10,811c <memmove+0x154>
    80a4:	1813883a 	mov	r9,r3
    80a8:	2811883a 	mov	r8,r5
    80ac:	500f883a 	mov	r7,r10
    80b0:	41000017 	ldw	r4,0(r8)
    80b4:	4a400104 	addi	r9,r9,4
    80b8:	39ffff04 	addi	r7,r7,-4
    80bc:	493fff15 	stw	r4,-4(r9)
    80c0:	42000104 	addi	r8,r8,4
    80c4:	59fffa36 	bltu	r11,r7,80b0 <__alt_data_end+0xff0080b0>
    80c8:	513fff04 	addi	r4,r10,-4
    80cc:	2008d0ba 	srli	r4,r4,2
    80d0:	318000cc 	andi	r6,r6,3
    80d4:	21000044 	addi	r4,r4,1
    80d8:	2109883a 	add	r4,r4,r4
    80dc:	2109883a 	add	r4,r4,r4
    80e0:	1907883a 	add	r3,r3,r4
    80e4:	290b883a 	add	r5,r5,r4
    80e8:	30000b26 	beq	r6,zero,8118 <memmove+0x150>
    80ec:	198d883a 	add	r6,r3,r6
    80f0:	29c00003 	ldbu	r7,0(r5)
    80f4:	18c00044 	addi	r3,r3,1
    80f8:	29400044 	addi	r5,r5,1
    80fc:	19ffffc5 	stb	r7,-1(r3)
    8100:	19bffb1e 	bne	r3,r6,80f0 <__alt_data_end+0xff0080f0>
    8104:	f800283a 	ret
    8108:	1007883a 	mov	r3,r2
    810c:	003ff606 	br	80e8 <__alt_data_end+0xff0080e8>
    8110:	1007883a 	mov	r3,r2
    8114:	003ff506 	br	80ec <__alt_data_end+0xff0080ec>
    8118:	f800283a 	ret
    811c:	500d883a 	mov	r6,r10
    8120:	003ff106 	br	80e8 <__alt_data_end+0xff0080e8>

00008124 <memset>:
    8124:	20c000cc 	andi	r3,r4,3
    8128:	2005883a 	mov	r2,r4
    812c:	18004426 	beq	r3,zero,8240 <memset+0x11c>
    8130:	31ffffc4 	addi	r7,r6,-1
    8134:	30004026 	beq	r6,zero,8238 <memset+0x114>
    8138:	2813883a 	mov	r9,r5
    813c:	200d883a 	mov	r6,r4
    8140:	2007883a 	mov	r3,r4
    8144:	00000406 	br	8158 <memset+0x34>
    8148:	3a3fffc4 	addi	r8,r7,-1
    814c:	31800044 	addi	r6,r6,1
    8150:	38003926 	beq	r7,zero,8238 <memset+0x114>
    8154:	400f883a 	mov	r7,r8
    8158:	18c00044 	addi	r3,r3,1
    815c:	32400005 	stb	r9,0(r6)
    8160:	1a0000cc 	andi	r8,r3,3
    8164:	403ff81e 	bne	r8,zero,8148 <__alt_data_end+0xff008148>
    8168:	010000c4 	movi	r4,3
    816c:	21c02d2e 	bgeu	r4,r7,8224 <memset+0x100>
    8170:	29003fcc 	andi	r4,r5,255
    8174:	200c923a 	slli	r6,r4,8
    8178:	3108b03a 	or	r4,r6,r4
    817c:	200c943a 	slli	r6,r4,16
    8180:	218cb03a 	or	r6,r4,r6
    8184:	010003c4 	movi	r4,15
    8188:	21c0182e 	bgeu	r4,r7,81ec <memset+0xc8>
    818c:	3b3ffc04 	addi	r12,r7,-16
    8190:	6018d13a 	srli	r12,r12,4
    8194:	1a000104 	addi	r8,r3,4
    8198:	1ac00204 	addi	r11,r3,8
    819c:	6008913a 	slli	r4,r12,4
    81a0:	1a800304 	addi	r10,r3,12
    81a4:	1813883a 	mov	r9,r3
    81a8:	21000504 	addi	r4,r4,20
    81ac:	1909883a 	add	r4,r3,r4
    81b0:	49800015 	stw	r6,0(r9)
    81b4:	41800015 	stw	r6,0(r8)
    81b8:	59800015 	stw	r6,0(r11)
    81bc:	51800015 	stw	r6,0(r10)
    81c0:	42000404 	addi	r8,r8,16
    81c4:	4a400404 	addi	r9,r9,16
    81c8:	5ac00404 	addi	r11,r11,16
    81cc:	52800404 	addi	r10,r10,16
    81d0:	413ff71e 	bne	r8,r4,81b0 <__alt_data_end+0xff0081b0>
    81d4:	63000044 	addi	r12,r12,1
    81d8:	6018913a 	slli	r12,r12,4
    81dc:	39c003cc 	andi	r7,r7,15
    81e0:	010000c4 	movi	r4,3
    81e4:	1b07883a 	add	r3,r3,r12
    81e8:	21c00e2e 	bgeu	r4,r7,8224 <memset+0x100>
    81ec:	1813883a 	mov	r9,r3
    81f0:	3811883a 	mov	r8,r7
    81f4:	010000c4 	movi	r4,3
    81f8:	49800015 	stw	r6,0(r9)
    81fc:	423fff04 	addi	r8,r8,-4
    8200:	4a400104 	addi	r9,r9,4
    8204:	223ffc36 	bltu	r4,r8,81f8 <__alt_data_end+0xff0081f8>
    8208:	393fff04 	addi	r4,r7,-4
    820c:	2008d0ba 	srli	r4,r4,2
    8210:	39c000cc 	andi	r7,r7,3
    8214:	21000044 	addi	r4,r4,1
    8218:	2109883a 	add	r4,r4,r4
    821c:	2109883a 	add	r4,r4,r4
    8220:	1907883a 	add	r3,r3,r4
    8224:	38000526 	beq	r7,zero,823c <memset+0x118>
    8228:	19cf883a 	add	r7,r3,r7
    822c:	19400005 	stb	r5,0(r3)
    8230:	18c00044 	addi	r3,r3,1
    8234:	38fffd1e 	bne	r7,r3,822c <__alt_data_end+0xff00822c>
    8238:	f800283a 	ret
    823c:	f800283a 	ret
    8240:	2007883a 	mov	r3,r4
    8244:	300f883a 	mov	r7,r6
    8248:	003fc706 	br	8168 <__alt_data_end+0xff008168>

0000824c <_Balloc>:
    824c:	20801317 	ldw	r2,76(r4)
    8250:	defffc04 	addi	sp,sp,-16
    8254:	dc400115 	stw	r17,4(sp)
    8258:	dc000015 	stw	r16,0(sp)
    825c:	dfc00315 	stw	ra,12(sp)
    8260:	dc800215 	stw	r18,8(sp)
    8264:	2023883a 	mov	r17,r4
    8268:	2821883a 	mov	r16,r5
    826c:	10000f26 	beq	r2,zero,82ac <_Balloc+0x60>
    8270:	8407883a 	add	r3,r16,r16
    8274:	18c7883a 	add	r3,r3,r3
    8278:	10c7883a 	add	r3,r2,r3
    827c:	18800017 	ldw	r2,0(r3)
    8280:	10001126 	beq	r2,zero,82c8 <_Balloc+0x7c>
    8284:	11000017 	ldw	r4,0(r2)
    8288:	19000015 	stw	r4,0(r3)
    828c:	10000415 	stw	zero,16(r2)
    8290:	10000315 	stw	zero,12(r2)
    8294:	dfc00317 	ldw	ra,12(sp)
    8298:	dc800217 	ldw	r18,8(sp)
    829c:	dc400117 	ldw	r17,4(sp)
    82a0:	dc000017 	ldw	r16,0(sp)
    82a4:	dec00404 	addi	sp,sp,16
    82a8:	f800283a 	ret
    82ac:	01800844 	movi	r6,33
    82b0:	01400104 	movi	r5,4
    82b4:	000b1340 	call	b134 <_calloc_r>
    82b8:	88801315 	stw	r2,76(r17)
    82bc:	103fec1e 	bne	r2,zero,8270 <__alt_data_end+0xff008270>
    82c0:	0005883a 	mov	r2,zero
    82c4:	003ff306 	br	8294 <__alt_data_end+0xff008294>
    82c8:	01400044 	movi	r5,1
    82cc:	2c24983a 	sll	r18,r5,r16
    82d0:	8809883a 	mov	r4,r17
    82d4:	91800144 	addi	r6,r18,5
    82d8:	318d883a 	add	r6,r6,r6
    82dc:	318d883a 	add	r6,r6,r6
    82e0:	000b1340 	call	b134 <_calloc_r>
    82e4:	103ff626 	beq	r2,zero,82c0 <__alt_data_end+0xff0082c0>
    82e8:	14000115 	stw	r16,4(r2)
    82ec:	14800215 	stw	r18,8(r2)
    82f0:	003fe606 	br	828c <__alt_data_end+0xff00828c>

000082f4 <_Bfree>:
    82f4:	28000826 	beq	r5,zero,8318 <_Bfree+0x24>
    82f8:	28c00117 	ldw	r3,4(r5)
    82fc:	20801317 	ldw	r2,76(r4)
    8300:	18c7883a 	add	r3,r3,r3
    8304:	18c7883a 	add	r3,r3,r3
    8308:	10c5883a 	add	r2,r2,r3
    830c:	10c00017 	ldw	r3,0(r2)
    8310:	28c00015 	stw	r3,0(r5)
    8314:	11400015 	stw	r5,0(r2)
    8318:	f800283a 	ret

0000831c <__multadd>:
    831c:	defffa04 	addi	sp,sp,-24
    8320:	dc800315 	stw	r18,12(sp)
    8324:	dc400215 	stw	r17,8(sp)
    8328:	dc000115 	stw	r16,4(sp)
    832c:	2823883a 	mov	r17,r5
    8330:	2c000417 	ldw	r16,16(r5)
    8334:	dfc00515 	stw	ra,20(sp)
    8338:	dcc00415 	stw	r19,16(sp)
    833c:	2025883a 	mov	r18,r4
    8340:	29400504 	addi	r5,r5,20
    8344:	0011883a 	mov	r8,zero
    8348:	28c00017 	ldw	r3,0(r5)
    834c:	29400104 	addi	r5,r5,4
    8350:	42000044 	addi	r8,r8,1
    8354:	18bfffcc 	andi	r2,r3,65535
    8358:	1185383a 	mul	r2,r2,r6
    835c:	1806d43a 	srli	r3,r3,16
    8360:	11cf883a 	add	r7,r2,r7
    8364:	3808d43a 	srli	r4,r7,16
    8368:	1987383a 	mul	r3,r3,r6
    836c:	38bfffcc 	andi	r2,r7,65535
    8370:	1907883a 	add	r3,r3,r4
    8374:	1808943a 	slli	r4,r3,16
    8378:	180ed43a 	srli	r7,r3,16
    837c:	2085883a 	add	r2,r4,r2
    8380:	28bfff15 	stw	r2,-4(r5)
    8384:	443ff016 	blt	r8,r16,8348 <__alt_data_end+0xff008348>
    8388:	38000926 	beq	r7,zero,83b0 <__multadd+0x94>
    838c:	88800217 	ldw	r2,8(r17)
    8390:	80800f0e 	bge	r16,r2,83d0 <__multadd+0xb4>
    8394:	80800144 	addi	r2,r16,5
    8398:	1085883a 	add	r2,r2,r2
    839c:	1085883a 	add	r2,r2,r2
    83a0:	8885883a 	add	r2,r17,r2
    83a4:	11c00015 	stw	r7,0(r2)
    83a8:	84000044 	addi	r16,r16,1
    83ac:	8c000415 	stw	r16,16(r17)
    83b0:	8805883a 	mov	r2,r17
    83b4:	dfc00517 	ldw	ra,20(sp)
    83b8:	dcc00417 	ldw	r19,16(sp)
    83bc:	dc800317 	ldw	r18,12(sp)
    83c0:	dc400217 	ldw	r17,8(sp)
    83c4:	dc000117 	ldw	r16,4(sp)
    83c8:	dec00604 	addi	sp,sp,24
    83cc:	f800283a 	ret
    83d0:	89400117 	ldw	r5,4(r17)
    83d4:	9009883a 	mov	r4,r18
    83d8:	d9c00015 	stw	r7,0(sp)
    83dc:	29400044 	addi	r5,r5,1
    83e0:	000824c0 	call	824c <_Balloc>
    83e4:	89800417 	ldw	r6,16(r17)
    83e8:	89400304 	addi	r5,r17,12
    83ec:	11000304 	addi	r4,r2,12
    83f0:	31800084 	addi	r6,r6,2
    83f4:	318d883a 	add	r6,r6,r6
    83f8:	318d883a 	add	r6,r6,r6
    83fc:	1027883a 	mov	r19,r2
    8400:	0007e800 	call	7e80 <memcpy>
    8404:	d9c00017 	ldw	r7,0(sp)
    8408:	88000a26 	beq	r17,zero,8434 <__multadd+0x118>
    840c:	88c00117 	ldw	r3,4(r17)
    8410:	90801317 	ldw	r2,76(r18)
    8414:	18c7883a 	add	r3,r3,r3
    8418:	18c7883a 	add	r3,r3,r3
    841c:	10c5883a 	add	r2,r2,r3
    8420:	10c00017 	ldw	r3,0(r2)
    8424:	88c00015 	stw	r3,0(r17)
    8428:	14400015 	stw	r17,0(r2)
    842c:	9823883a 	mov	r17,r19
    8430:	003fd806 	br	8394 <__alt_data_end+0xff008394>
    8434:	9823883a 	mov	r17,r19
    8438:	003fd606 	br	8394 <__alt_data_end+0xff008394>

0000843c <__s2b>:
    843c:	defff904 	addi	sp,sp,-28
    8440:	dc400115 	stw	r17,4(sp)
    8444:	dc000015 	stw	r16,0(sp)
    8448:	2023883a 	mov	r17,r4
    844c:	2821883a 	mov	r16,r5
    8450:	39000204 	addi	r4,r7,8
    8454:	01400244 	movi	r5,9
    8458:	dcc00315 	stw	r19,12(sp)
    845c:	dc800215 	stw	r18,8(sp)
    8460:	dfc00615 	stw	ra,24(sp)
    8464:	dd400515 	stw	r21,20(sp)
    8468:	dd000415 	stw	r20,16(sp)
    846c:	3825883a 	mov	r18,r7
    8470:	3027883a 	mov	r19,r6
    8474:	000c4640 	call	c464 <__divsi3>
    8478:	00c00044 	movi	r3,1
    847c:	000b883a 	mov	r5,zero
    8480:	1880030e 	bge	r3,r2,8490 <__s2b+0x54>
    8484:	18c7883a 	add	r3,r3,r3
    8488:	29400044 	addi	r5,r5,1
    848c:	18bffd16 	blt	r3,r2,8484 <__alt_data_end+0xff008484>
    8490:	8809883a 	mov	r4,r17
    8494:	000824c0 	call	824c <_Balloc>
    8498:	d8c00717 	ldw	r3,28(sp)
    849c:	10c00515 	stw	r3,20(r2)
    84a0:	00c00044 	movi	r3,1
    84a4:	10c00415 	stw	r3,16(r2)
    84a8:	00c00244 	movi	r3,9
    84ac:	1cc0210e 	bge	r3,r19,8534 <__s2b+0xf8>
    84b0:	80eb883a 	add	r21,r16,r3
    84b4:	a829883a 	mov	r20,r21
    84b8:	84e1883a 	add	r16,r16,r19
    84bc:	a1c00007 	ldb	r7,0(r20)
    84c0:	01800284 	movi	r6,10
    84c4:	a5000044 	addi	r20,r20,1
    84c8:	100b883a 	mov	r5,r2
    84cc:	39fff404 	addi	r7,r7,-48
    84d0:	8809883a 	mov	r4,r17
    84d4:	000831c0 	call	831c <__multadd>
    84d8:	a43ff81e 	bne	r20,r16,84bc <__alt_data_end+0xff0084bc>
    84dc:	ace1883a 	add	r16,r21,r19
    84e0:	843ffe04 	addi	r16,r16,-8
    84e4:	9c800a0e 	bge	r19,r18,8510 <__s2b+0xd4>
    84e8:	94e5c83a 	sub	r18,r18,r19
    84ec:	84a5883a 	add	r18,r16,r18
    84f0:	81c00007 	ldb	r7,0(r16)
    84f4:	01800284 	movi	r6,10
    84f8:	84000044 	addi	r16,r16,1
    84fc:	100b883a 	mov	r5,r2
    8500:	39fff404 	addi	r7,r7,-48
    8504:	8809883a 	mov	r4,r17
    8508:	000831c0 	call	831c <__multadd>
    850c:	84bff81e 	bne	r16,r18,84f0 <__alt_data_end+0xff0084f0>
    8510:	dfc00617 	ldw	ra,24(sp)
    8514:	dd400517 	ldw	r21,20(sp)
    8518:	dd000417 	ldw	r20,16(sp)
    851c:	dcc00317 	ldw	r19,12(sp)
    8520:	dc800217 	ldw	r18,8(sp)
    8524:	dc400117 	ldw	r17,4(sp)
    8528:	dc000017 	ldw	r16,0(sp)
    852c:	dec00704 	addi	sp,sp,28
    8530:	f800283a 	ret
    8534:	84000284 	addi	r16,r16,10
    8538:	1827883a 	mov	r19,r3
    853c:	003fe906 	br	84e4 <__alt_data_end+0xff0084e4>

00008540 <__hi0bits>:
    8540:	20bfffec 	andhi	r2,r4,65535
    8544:	1000141e 	bne	r2,zero,8598 <__hi0bits+0x58>
    8548:	2008943a 	slli	r4,r4,16
    854c:	00800404 	movi	r2,16
    8550:	20ffc02c 	andhi	r3,r4,65280
    8554:	1800021e 	bne	r3,zero,8560 <__hi0bits+0x20>
    8558:	2008923a 	slli	r4,r4,8
    855c:	10800204 	addi	r2,r2,8
    8560:	20fc002c 	andhi	r3,r4,61440
    8564:	1800021e 	bne	r3,zero,8570 <__hi0bits+0x30>
    8568:	2008913a 	slli	r4,r4,4
    856c:	10800104 	addi	r2,r2,4
    8570:	20f0002c 	andhi	r3,r4,49152
    8574:	1800031e 	bne	r3,zero,8584 <__hi0bits+0x44>
    8578:	2109883a 	add	r4,r4,r4
    857c:	10800084 	addi	r2,r2,2
    8580:	2109883a 	add	r4,r4,r4
    8584:	20000316 	blt	r4,zero,8594 <__hi0bits+0x54>
    8588:	2110002c 	andhi	r4,r4,16384
    858c:	2000041e 	bne	r4,zero,85a0 <__hi0bits+0x60>
    8590:	00800804 	movi	r2,32
    8594:	f800283a 	ret
    8598:	0005883a 	mov	r2,zero
    859c:	003fec06 	br	8550 <__alt_data_end+0xff008550>
    85a0:	10800044 	addi	r2,r2,1
    85a4:	f800283a 	ret

000085a8 <__lo0bits>:
    85a8:	20c00017 	ldw	r3,0(r4)
    85ac:	188001cc 	andi	r2,r3,7
    85b0:	10000826 	beq	r2,zero,85d4 <__lo0bits+0x2c>
    85b4:	1880004c 	andi	r2,r3,1
    85b8:	1000211e 	bne	r2,zero,8640 <__lo0bits+0x98>
    85bc:	1880008c 	andi	r2,r3,2
    85c0:	1000211e 	bne	r2,zero,8648 <__lo0bits+0xa0>
    85c4:	1806d0ba 	srli	r3,r3,2
    85c8:	00800084 	movi	r2,2
    85cc:	20c00015 	stw	r3,0(r4)
    85d0:	f800283a 	ret
    85d4:	18bfffcc 	andi	r2,r3,65535
    85d8:	10001326 	beq	r2,zero,8628 <__lo0bits+0x80>
    85dc:	0005883a 	mov	r2,zero
    85e0:	19403fcc 	andi	r5,r3,255
    85e4:	2800021e 	bne	r5,zero,85f0 <__lo0bits+0x48>
    85e8:	1806d23a 	srli	r3,r3,8
    85ec:	10800204 	addi	r2,r2,8
    85f0:	194003cc 	andi	r5,r3,15
    85f4:	2800021e 	bne	r5,zero,8600 <__lo0bits+0x58>
    85f8:	1806d13a 	srli	r3,r3,4
    85fc:	10800104 	addi	r2,r2,4
    8600:	194000cc 	andi	r5,r3,3
    8604:	2800021e 	bne	r5,zero,8610 <__lo0bits+0x68>
    8608:	1806d0ba 	srli	r3,r3,2
    860c:	10800084 	addi	r2,r2,2
    8610:	1940004c 	andi	r5,r3,1
    8614:	2800081e 	bne	r5,zero,8638 <__lo0bits+0x90>
    8618:	1806d07a 	srli	r3,r3,1
    861c:	1800051e 	bne	r3,zero,8634 <__lo0bits+0x8c>
    8620:	00800804 	movi	r2,32
    8624:	f800283a 	ret
    8628:	1806d43a 	srli	r3,r3,16
    862c:	00800404 	movi	r2,16
    8630:	003feb06 	br	85e0 <__alt_data_end+0xff0085e0>
    8634:	10800044 	addi	r2,r2,1
    8638:	20c00015 	stw	r3,0(r4)
    863c:	f800283a 	ret
    8640:	0005883a 	mov	r2,zero
    8644:	f800283a 	ret
    8648:	1806d07a 	srli	r3,r3,1
    864c:	00800044 	movi	r2,1
    8650:	20c00015 	stw	r3,0(r4)
    8654:	f800283a 	ret

00008658 <__i2b>:
    8658:	defffd04 	addi	sp,sp,-12
    865c:	dc000015 	stw	r16,0(sp)
    8660:	04000044 	movi	r16,1
    8664:	dc400115 	stw	r17,4(sp)
    8668:	2823883a 	mov	r17,r5
    866c:	800b883a 	mov	r5,r16
    8670:	dfc00215 	stw	ra,8(sp)
    8674:	000824c0 	call	824c <_Balloc>
    8678:	14400515 	stw	r17,20(r2)
    867c:	14000415 	stw	r16,16(r2)
    8680:	dfc00217 	ldw	ra,8(sp)
    8684:	dc400117 	ldw	r17,4(sp)
    8688:	dc000017 	ldw	r16,0(sp)
    868c:	dec00304 	addi	sp,sp,12
    8690:	f800283a 	ret

00008694 <__multiply>:
    8694:	defffa04 	addi	sp,sp,-24
    8698:	dcc00315 	stw	r19,12(sp)
    869c:	dc800215 	stw	r18,8(sp)
    86a0:	34c00417 	ldw	r19,16(r6)
    86a4:	2c800417 	ldw	r18,16(r5)
    86a8:	dd000415 	stw	r20,16(sp)
    86ac:	dc400115 	stw	r17,4(sp)
    86b0:	dfc00515 	stw	ra,20(sp)
    86b4:	dc000015 	stw	r16,0(sp)
    86b8:	2829883a 	mov	r20,r5
    86bc:	3023883a 	mov	r17,r6
    86c0:	94c0050e 	bge	r18,r19,86d8 <__multiply+0x44>
    86c4:	9007883a 	mov	r3,r18
    86c8:	3029883a 	mov	r20,r6
    86cc:	9825883a 	mov	r18,r19
    86d0:	2823883a 	mov	r17,r5
    86d4:	1827883a 	mov	r19,r3
    86d8:	a0800217 	ldw	r2,8(r20)
    86dc:	94e1883a 	add	r16,r18,r19
    86e0:	a1400117 	ldw	r5,4(r20)
    86e4:	1400010e 	bge	r2,r16,86ec <__multiply+0x58>
    86e8:	29400044 	addi	r5,r5,1
    86ec:	000824c0 	call	824c <_Balloc>
    86f0:	8415883a 	add	r10,r16,r16
    86f4:	12c00504 	addi	r11,r2,20
    86f8:	5295883a 	add	r10,r10,r10
    86fc:	5a95883a 	add	r10,r11,r10
    8700:	5807883a 	mov	r3,r11
    8704:	5a80032e 	bgeu	r11,r10,8714 <__multiply+0x80>
    8708:	18000015 	stw	zero,0(r3)
    870c:	18c00104 	addi	r3,r3,4
    8710:	1abffd36 	bltu	r3,r10,8708 <__alt_data_end+0xff008708>
    8714:	9ce7883a 	add	r19,r19,r19
    8718:	94a5883a 	add	r18,r18,r18
    871c:	89800504 	addi	r6,r17,20
    8720:	9ce7883a 	add	r19,r19,r19
    8724:	a3400504 	addi	r13,r20,20
    8728:	94a5883a 	add	r18,r18,r18
    872c:	34d9883a 	add	r12,r6,r19
    8730:	6c93883a 	add	r9,r13,r18
    8734:	3300422e 	bgeu	r6,r12,8840 <__multiply+0x1ac>
    8738:	37c00017 	ldw	ra,0(r6)
    873c:	fbffffcc 	andi	r15,ra,65535
    8740:	78001b26 	beq	r15,zero,87b0 <__multiply+0x11c>
    8744:	5811883a 	mov	r8,r11
    8748:	681d883a 	mov	r14,r13
    874c:	000f883a 	mov	r7,zero
    8750:	71000017 	ldw	r4,0(r14)
    8754:	40c00017 	ldw	r3,0(r8)
    8758:	73800104 	addi	r14,r14,4
    875c:	217fffcc 	andi	r5,r4,65535
    8760:	2bcb383a 	mul	r5,r5,r15
    8764:	2008d43a 	srli	r4,r4,16
    8768:	1c7fffcc 	andi	r17,r3,65535
    876c:	2c4b883a 	add	r5,r5,r17
    8770:	29cb883a 	add	r5,r5,r7
    8774:	23c9383a 	mul	r4,r4,r15
    8778:	1806d43a 	srli	r3,r3,16
    877c:	280ed43a 	srli	r7,r5,16
    8780:	297fffcc 	andi	r5,r5,65535
    8784:	20c7883a 	add	r3,r4,r3
    8788:	19c7883a 	add	r3,r3,r7
    878c:	1808943a 	slli	r4,r3,16
    8790:	4023883a 	mov	r17,r8
    8794:	180ed43a 	srli	r7,r3,16
    8798:	214ab03a 	or	r5,r4,r5
    879c:	41400015 	stw	r5,0(r8)
    87a0:	42000104 	addi	r8,r8,4
    87a4:	727fea36 	bltu	r14,r9,8750 <__alt_data_end+0xff008750>
    87a8:	89c00115 	stw	r7,4(r17)
    87ac:	37c00017 	ldw	ra,0(r6)
    87b0:	f83ed43a 	srli	ra,ra,16
    87b4:	f8001f26 	beq	ra,zero,8834 <__multiply+0x1a0>
    87b8:	58c00017 	ldw	r3,0(r11)
    87bc:	681d883a 	mov	r14,r13
    87c0:	581f883a 	mov	r15,r11
    87c4:	1811883a 	mov	r8,r3
    87c8:	5825883a 	mov	r18,r11
    87cc:	000f883a 	mov	r7,zero
    87d0:	00000106 	br	87d8 <__multiply+0x144>
    87d4:	8825883a 	mov	r18,r17
    87d8:	7140000b 	ldhu	r5,0(r14)
    87dc:	4010d43a 	srli	r8,r8,16
    87e0:	193fffcc 	andi	r4,r3,65535
    87e4:	2fcb383a 	mul	r5,r5,ra
    87e8:	7bc00104 	addi	r15,r15,4
    87ec:	73800104 	addi	r14,r14,4
    87f0:	2a0b883a 	add	r5,r5,r8
    87f4:	29cb883a 	add	r5,r5,r7
    87f8:	2806943a 	slli	r3,r5,16
    87fc:	94400104 	addi	r17,r18,4
    8800:	280ad43a 	srli	r5,r5,16
    8804:	1908b03a 	or	r4,r3,r4
    8808:	793fff15 	stw	r4,-4(r15)
    880c:	70ffff17 	ldw	r3,-4(r14)
    8810:	8a000017 	ldw	r8,0(r17)
    8814:	1806d43a 	srli	r3,r3,16
    8818:	413fffcc 	andi	r4,r8,65535
    881c:	1fc7383a 	mul	r3,r3,ra
    8820:	1907883a 	add	r3,r3,r4
    8824:	1947883a 	add	r3,r3,r5
    8828:	180ed43a 	srli	r7,r3,16
    882c:	727fe936 	bltu	r14,r9,87d4 <__alt_data_end+0xff0087d4>
    8830:	90c00115 	stw	r3,4(r18)
    8834:	31800104 	addi	r6,r6,4
    8838:	5ac00104 	addi	r11,r11,4
    883c:	333fbe36 	bltu	r6,r12,8738 <__alt_data_end+0xff008738>
    8840:	0400090e 	bge	zero,r16,8868 <__multiply+0x1d4>
    8844:	50ffff17 	ldw	r3,-4(r10)
    8848:	52bfff04 	addi	r10,r10,-4
    884c:	18000326 	beq	r3,zero,885c <__multiply+0x1c8>
    8850:	00000506 	br	8868 <__multiply+0x1d4>
    8854:	50c00017 	ldw	r3,0(r10)
    8858:	1800031e 	bne	r3,zero,8868 <__multiply+0x1d4>
    885c:	843fffc4 	addi	r16,r16,-1
    8860:	52bfff04 	addi	r10,r10,-4
    8864:	803ffb1e 	bne	r16,zero,8854 <__alt_data_end+0xff008854>
    8868:	14000415 	stw	r16,16(r2)
    886c:	dfc00517 	ldw	ra,20(sp)
    8870:	dd000417 	ldw	r20,16(sp)
    8874:	dcc00317 	ldw	r19,12(sp)
    8878:	dc800217 	ldw	r18,8(sp)
    887c:	dc400117 	ldw	r17,4(sp)
    8880:	dc000017 	ldw	r16,0(sp)
    8884:	dec00604 	addi	sp,sp,24
    8888:	f800283a 	ret

0000888c <__pow5mult>:
    888c:	defffa04 	addi	sp,sp,-24
    8890:	dcc00315 	stw	r19,12(sp)
    8894:	dc000015 	stw	r16,0(sp)
    8898:	dfc00515 	stw	ra,20(sp)
    889c:	dd000415 	stw	r20,16(sp)
    88a0:	dc800215 	stw	r18,8(sp)
    88a4:	dc400115 	stw	r17,4(sp)
    88a8:	308000cc 	andi	r2,r6,3
    88ac:	3021883a 	mov	r16,r6
    88b0:	2027883a 	mov	r19,r4
    88b4:	10002f1e 	bne	r2,zero,8974 <__pow5mult+0xe8>
    88b8:	2825883a 	mov	r18,r5
    88bc:	8021d0ba 	srai	r16,r16,2
    88c0:	80001a26 	beq	r16,zero,892c <__pow5mult+0xa0>
    88c4:	9c401217 	ldw	r17,72(r19)
    88c8:	8800061e 	bne	r17,zero,88e4 <__pow5mult+0x58>
    88cc:	00003406 	br	89a0 <__pow5mult+0x114>
    88d0:	8021d07a 	srai	r16,r16,1
    88d4:	80001526 	beq	r16,zero,892c <__pow5mult+0xa0>
    88d8:	88800017 	ldw	r2,0(r17)
    88dc:	10001c26 	beq	r2,zero,8950 <__pow5mult+0xc4>
    88e0:	1023883a 	mov	r17,r2
    88e4:	8080004c 	andi	r2,r16,1
    88e8:	103ff926 	beq	r2,zero,88d0 <__alt_data_end+0xff0088d0>
    88ec:	880d883a 	mov	r6,r17
    88f0:	900b883a 	mov	r5,r18
    88f4:	9809883a 	mov	r4,r19
    88f8:	00086940 	call	8694 <__multiply>
    88fc:	90001b26 	beq	r18,zero,896c <__pow5mult+0xe0>
    8900:	91000117 	ldw	r4,4(r18)
    8904:	98c01317 	ldw	r3,76(r19)
    8908:	8021d07a 	srai	r16,r16,1
    890c:	2109883a 	add	r4,r4,r4
    8910:	2109883a 	add	r4,r4,r4
    8914:	1907883a 	add	r3,r3,r4
    8918:	19000017 	ldw	r4,0(r3)
    891c:	91000015 	stw	r4,0(r18)
    8920:	1c800015 	stw	r18,0(r3)
    8924:	1025883a 	mov	r18,r2
    8928:	803feb1e 	bne	r16,zero,88d8 <__alt_data_end+0xff0088d8>
    892c:	9005883a 	mov	r2,r18
    8930:	dfc00517 	ldw	ra,20(sp)
    8934:	dd000417 	ldw	r20,16(sp)
    8938:	dcc00317 	ldw	r19,12(sp)
    893c:	dc800217 	ldw	r18,8(sp)
    8940:	dc400117 	ldw	r17,4(sp)
    8944:	dc000017 	ldw	r16,0(sp)
    8948:	dec00604 	addi	sp,sp,24
    894c:	f800283a 	ret
    8950:	880d883a 	mov	r6,r17
    8954:	880b883a 	mov	r5,r17
    8958:	9809883a 	mov	r4,r19
    895c:	00086940 	call	8694 <__multiply>
    8960:	88800015 	stw	r2,0(r17)
    8964:	10000015 	stw	zero,0(r2)
    8968:	003fdd06 	br	88e0 <__alt_data_end+0xff0088e0>
    896c:	1025883a 	mov	r18,r2
    8970:	003fd706 	br	88d0 <__alt_data_end+0xff0088d0>
    8974:	10bfffc4 	addi	r2,r2,-1
    8978:	1085883a 	add	r2,r2,r2
    897c:	00c00074 	movhi	r3,1
    8980:	18c70304 	addi	r3,r3,7180
    8984:	1085883a 	add	r2,r2,r2
    8988:	1885883a 	add	r2,r3,r2
    898c:	11800017 	ldw	r6,0(r2)
    8990:	000f883a 	mov	r7,zero
    8994:	000831c0 	call	831c <__multadd>
    8998:	1025883a 	mov	r18,r2
    899c:	003fc706 	br	88bc <__alt_data_end+0xff0088bc>
    89a0:	05000044 	movi	r20,1
    89a4:	a00b883a 	mov	r5,r20
    89a8:	9809883a 	mov	r4,r19
    89ac:	000824c0 	call	824c <_Balloc>
    89b0:	1023883a 	mov	r17,r2
    89b4:	00809c44 	movi	r2,625
    89b8:	88800515 	stw	r2,20(r17)
    89bc:	8d000415 	stw	r20,16(r17)
    89c0:	9c401215 	stw	r17,72(r19)
    89c4:	88000015 	stw	zero,0(r17)
    89c8:	003fc606 	br	88e4 <__alt_data_end+0xff0088e4>

000089cc <__lshift>:
    89cc:	defff904 	addi	sp,sp,-28
    89d0:	dd400515 	stw	r21,20(sp)
    89d4:	dcc00315 	stw	r19,12(sp)
    89d8:	302bd17a 	srai	r21,r6,5
    89dc:	2cc00417 	ldw	r19,16(r5)
    89e0:	28800217 	ldw	r2,8(r5)
    89e4:	dd000415 	stw	r20,16(sp)
    89e8:	ace7883a 	add	r19,r21,r19
    89ec:	dc800215 	stw	r18,8(sp)
    89f0:	dc400115 	stw	r17,4(sp)
    89f4:	dc000015 	stw	r16,0(sp)
    89f8:	dfc00615 	stw	ra,24(sp)
    89fc:	9c000044 	addi	r16,r19,1
    8a00:	2823883a 	mov	r17,r5
    8a04:	3029883a 	mov	r20,r6
    8a08:	2025883a 	mov	r18,r4
    8a0c:	29400117 	ldw	r5,4(r5)
    8a10:	1400030e 	bge	r2,r16,8a20 <__lshift+0x54>
    8a14:	1085883a 	add	r2,r2,r2
    8a18:	29400044 	addi	r5,r5,1
    8a1c:	143ffd16 	blt	r2,r16,8a14 <__alt_data_end+0xff008a14>
    8a20:	9009883a 	mov	r4,r18
    8a24:	000824c0 	call	824c <_Balloc>
    8a28:	10c00504 	addi	r3,r2,20
    8a2c:	0540070e 	bge	zero,r21,8a4c <__lshift+0x80>
    8a30:	ad6b883a 	add	r21,r21,r21
    8a34:	ad6b883a 	add	r21,r21,r21
    8a38:	1809883a 	mov	r4,r3
    8a3c:	1d47883a 	add	r3,r3,r21
    8a40:	20000015 	stw	zero,0(r4)
    8a44:	21000104 	addi	r4,r4,4
    8a48:	193ffd1e 	bne	r3,r4,8a40 <__alt_data_end+0xff008a40>
    8a4c:	8a000417 	ldw	r8,16(r17)
    8a50:	89000504 	addi	r4,r17,20
    8a54:	a18007cc 	andi	r6,r20,31
    8a58:	4211883a 	add	r8,r8,r8
    8a5c:	4211883a 	add	r8,r8,r8
    8a60:	2211883a 	add	r8,r4,r8
    8a64:	30002326 	beq	r6,zero,8af4 <__lshift+0x128>
    8a68:	02400804 	movi	r9,32
    8a6c:	4993c83a 	sub	r9,r9,r6
    8a70:	000b883a 	mov	r5,zero
    8a74:	21c00017 	ldw	r7,0(r4)
    8a78:	1815883a 	mov	r10,r3
    8a7c:	18c00104 	addi	r3,r3,4
    8a80:	398e983a 	sll	r7,r7,r6
    8a84:	21000104 	addi	r4,r4,4
    8a88:	394ab03a 	or	r5,r7,r5
    8a8c:	197fff15 	stw	r5,-4(r3)
    8a90:	217fff17 	ldw	r5,-4(r4)
    8a94:	2a4ad83a 	srl	r5,r5,r9
    8a98:	223ff636 	bltu	r4,r8,8a74 <__alt_data_end+0xff008a74>
    8a9c:	51400115 	stw	r5,4(r10)
    8aa0:	28001a1e 	bne	r5,zero,8b0c <__lshift+0x140>
    8aa4:	843fffc4 	addi	r16,r16,-1
    8aa8:	14000415 	stw	r16,16(r2)
    8aac:	88000826 	beq	r17,zero,8ad0 <__lshift+0x104>
    8ab0:	89000117 	ldw	r4,4(r17)
    8ab4:	90c01317 	ldw	r3,76(r18)
    8ab8:	2109883a 	add	r4,r4,r4
    8abc:	2109883a 	add	r4,r4,r4
    8ac0:	1907883a 	add	r3,r3,r4
    8ac4:	19000017 	ldw	r4,0(r3)
    8ac8:	89000015 	stw	r4,0(r17)
    8acc:	1c400015 	stw	r17,0(r3)
    8ad0:	dfc00617 	ldw	ra,24(sp)
    8ad4:	dd400517 	ldw	r21,20(sp)
    8ad8:	dd000417 	ldw	r20,16(sp)
    8adc:	dcc00317 	ldw	r19,12(sp)
    8ae0:	dc800217 	ldw	r18,8(sp)
    8ae4:	dc400117 	ldw	r17,4(sp)
    8ae8:	dc000017 	ldw	r16,0(sp)
    8aec:	dec00704 	addi	sp,sp,28
    8af0:	f800283a 	ret
    8af4:	21400017 	ldw	r5,0(r4)
    8af8:	18c00104 	addi	r3,r3,4
    8afc:	21000104 	addi	r4,r4,4
    8b00:	197fff15 	stw	r5,-4(r3)
    8b04:	223ffb36 	bltu	r4,r8,8af4 <__alt_data_end+0xff008af4>
    8b08:	003fe606 	br	8aa4 <__alt_data_end+0xff008aa4>
    8b0c:	9c000084 	addi	r16,r19,2
    8b10:	003fe406 	br	8aa4 <__alt_data_end+0xff008aa4>

00008b14 <__mcmp>:
    8b14:	20800417 	ldw	r2,16(r4)
    8b18:	28c00417 	ldw	r3,16(r5)
    8b1c:	10c5c83a 	sub	r2,r2,r3
    8b20:	1000111e 	bne	r2,zero,8b68 <__mcmp+0x54>
    8b24:	18c7883a 	add	r3,r3,r3
    8b28:	18c7883a 	add	r3,r3,r3
    8b2c:	21000504 	addi	r4,r4,20
    8b30:	29400504 	addi	r5,r5,20
    8b34:	20c5883a 	add	r2,r4,r3
    8b38:	28cb883a 	add	r5,r5,r3
    8b3c:	00000106 	br	8b44 <__mcmp+0x30>
    8b40:	20800a2e 	bgeu	r4,r2,8b6c <__mcmp+0x58>
    8b44:	10bfff04 	addi	r2,r2,-4
    8b48:	297fff04 	addi	r5,r5,-4
    8b4c:	11800017 	ldw	r6,0(r2)
    8b50:	28c00017 	ldw	r3,0(r5)
    8b54:	30fffa26 	beq	r6,r3,8b40 <__alt_data_end+0xff008b40>
    8b58:	30c00236 	bltu	r6,r3,8b64 <__mcmp+0x50>
    8b5c:	00800044 	movi	r2,1
    8b60:	f800283a 	ret
    8b64:	00bfffc4 	movi	r2,-1
    8b68:	f800283a 	ret
    8b6c:	0005883a 	mov	r2,zero
    8b70:	f800283a 	ret

00008b74 <__mdiff>:
    8b74:	28c00417 	ldw	r3,16(r5)
    8b78:	30800417 	ldw	r2,16(r6)
    8b7c:	defffa04 	addi	sp,sp,-24
    8b80:	dcc00315 	stw	r19,12(sp)
    8b84:	dc800215 	stw	r18,8(sp)
    8b88:	dfc00515 	stw	ra,20(sp)
    8b8c:	dd000415 	stw	r20,16(sp)
    8b90:	dc400115 	stw	r17,4(sp)
    8b94:	dc000015 	stw	r16,0(sp)
    8b98:	1887c83a 	sub	r3,r3,r2
    8b9c:	2825883a 	mov	r18,r5
    8ba0:	3027883a 	mov	r19,r6
    8ba4:	1800141e 	bne	r3,zero,8bf8 <__mdiff+0x84>
    8ba8:	1085883a 	add	r2,r2,r2
    8bac:	1085883a 	add	r2,r2,r2
    8bb0:	2a000504 	addi	r8,r5,20
    8bb4:	34000504 	addi	r16,r6,20
    8bb8:	4087883a 	add	r3,r8,r2
    8bbc:	8085883a 	add	r2,r16,r2
    8bc0:	00000106 	br	8bc8 <__mdiff+0x54>
    8bc4:	40c0592e 	bgeu	r8,r3,8d2c <__mdiff+0x1b8>
    8bc8:	18ffff04 	addi	r3,r3,-4
    8bcc:	10bfff04 	addi	r2,r2,-4
    8bd0:	19c00017 	ldw	r7,0(r3)
    8bd4:	11400017 	ldw	r5,0(r2)
    8bd8:	397ffa26 	beq	r7,r5,8bc4 <__alt_data_end+0xff008bc4>
    8bdc:	3940592e 	bgeu	r7,r5,8d44 <__mdiff+0x1d0>
    8be0:	9005883a 	mov	r2,r18
    8be4:	4023883a 	mov	r17,r8
    8be8:	9825883a 	mov	r18,r19
    8bec:	05000044 	movi	r20,1
    8bf0:	1027883a 	mov	r19,r2
    8bf4:	00000406 	br	8c08 <__mdiff+0x94>
    8bf8:	18005616 	blt	r3,zero,8d54 <__mdiff+0x1e0>
    8bfc:	34400504 	addi	r17,r6,20
    8c00:	2c000504 	addi	r16,r5,20
    8c04:	0029883a 	mov	r20,zero
    8c08:	91400117 	ldw	r5,4(r18)
    8c0c:	000824c0 	call	824c <_Balloc>
    8c10:	92400417 	ldw	r9,16(r18)
    8c14:	9b000417 	ldw	r12,16(r19)
    8c18:	12c00504 	addi	r11,r2,20
    8c1c:	4a51883a 	add	r8,r9,r9
    8c20:	6319883a 	add	r12,r12,r12
    8c24:	4211883a 	add	r8,r8,r8
    8c28:	6319883a 	add	r12,r12,r12
    8c2c:	15000315 	stw	r20,12(r2)
    8c30:	8211883a 	add	r8,r16,r8
    8c34:	8b19883a 	add	r12,r17,r12
    8c38:	0007883a 	mov	r3,zero
    8c3c:	81400017 	ldw	r5,0(r16)
    8c40:	89c00017 	ldw	r7,0(r17)
    8c44:	59800104 	addi	r6,r11,4
    8c48:	293fffcc 	andi	r4,r5,65535
    8c4c:	20c7883a 	add	r3,r4,r3
    8c50:	393fffcc 	andi	r4,r7,65535
    8c54:	1909c83a 	sub	r4,r3,r4
    8c58:	280ad43a 	srli	r5,r5,16
    8c5c:	380ed43a 	srli	r7,r7,16
    8c60:	2007d43a 	srai	r3,r4,16
    8c64:	213fffcc 	andi	r4,r4,65535
    8c68:	29cbc83a 	sub	r5,r5,r7
    8c6c:	28c7883a 	add	r3,r5,r3
    8c70:	180a943a 	slli	r5,r3,16
    8c74:	8c400104 	addi	r17,r17,4
    8c78:	84000104 	addi	r16,r16,4
    8c7c:	2908b03a 	or	r4,r5,r4
    8c80:	59000015 	stw	r4,0(r11)
    8c84:	1807d43a 	srai	r3,r3,16
    8c88:	3015883a 	mov	r10,r6
    8c8c:	3017883a 	mov	r11,r6
    8c90:	8b3fea36 	bltu	r17,r12,8c3c <__alt_data_end+0xff008c3c>
    8c94:	8200162e 	bgeu	r16,r8,8cf0 <__mdiff+0x17c>
    8c98:	8017883a 	mov	r11,r16
    8c9c:	59400017 	ldw	r5,0(r11)
    8ca0:	31800104 	addi	r6,r6,4
    8ca4:	5ac00104 	addi	r11,r11,4
    8ca8:	293fffcc 	andi	r4,r5,65535
    8cac:	20c7883a 	add	r3,r4,r3
    8cb0:	280ed43a 	srli	r7,r5,16
    8cb4:	180bd43a 	srai	r5,r3,16
    8cb8:	193fffcc 	andi	r4,r3,65535
    8cbc:	3947883a 	add	r3,r7,r5
    8cc0:	180a943a 	slli	r5,r3,16
    8cc4:	1807d43a 	srai	r3,r3,16
    8cc8:	2908b03a 	or	r4,r5,r4
    8ccc:	313fff15 	stw	r4,-4(r6)
    8cd0:	5a3ff236 	bltu	r11,r8,8c9c <__alt_data_end+0xff008c9c>
    8cd4:	0406303a 	nor	r3,zero,r16
    8cd8:	1a07883a 	add	r3,r3,r8
    8cdc:	1806d0ba 	srli	r3,r3,2
    8ce0:	18c00044 	addi	r3,r3,1
    8ce4:	18c7883a 	add	r3,r3,r3
    8ce8:	18c7883a 	add	r3,r3,r3
    8cec:	50d5883a 	add	r10,r10,r3
    8cf0:	50ffff04 	addi	r3,r10,-4
    8cf4:	2000041e 	bne	r4,zero,8d08 <__mdiff+0x194>
    8cf8:	18ffff04 	addi	r3,r3,-4
    8cfc:	19000017 	ldw	r4,0(r3)
    8d00:	4a7fffc4 	addi	r9,r9,-1
    8d04:	203ffc26 	beq	r4,zero,8cf8 <__alt_data_end+0xff008cf8>
    8d08:	12400415 	stw	r9,16(r2)
    8d0c:	dfc00517 	ldw	ra,20(sp)
    8d10:	dd000417 	ldw	r20,16(sp)
    8d14:	dcc00317 	ldw	r19,12(sp)
    8d18:	dc800217 	ldw	r18,8(sp)
    8d1c:	dc400117 	ldw	r17,4(sp)
    8d20:	dc000017 	ldw	r16,0(sp)
    8d24:	dec00604 	addi	sp,sp,24
    8d28:	f800283a 	ret
    8d2c:	000b883a 	mov	r5,zero
    8d30:	000824c0 	call	824c <_Balloc>
    8d34:	00c00044 	movi	r3,1
    8d38:	10c00415 	stw	r3,16(r2)
    8d3c:	10000515 	stw	zero,20(r2)
    8d40:	003ff206 	br	8d0c <__alt_data_end+0xff008d0c>
    8d44:	8023883a 	mov	r17,r16
    8d48:	0029883a 	mov	r20,zero
    8d4c:	4021883a 	mov	r16,r8
    8d50:	003fad06 	br	8c08 <__alt_data_end+0xff008c08>
    8d54:	9005883a 	mov	r2,r18
    8d58:	94400504 	addi	r17,r18,20
    8d5c:	9c000504 	addi	r16,r19,20
    8d60:	9825883a 	mov	r18,r19
    8d64:	05000044 	movi	r20,1
    8d68:	1027883a 	mov	r19,r2
    8d6c:	003fa606 	br	8c08 <__alt_data_end+0xff008c08>

00008d70 <__ulp>:
    8d70:	295ffc2c 	andhi	r5,r5,32752
    8d74:	00bf3034 	movhi	r2,64704
    8d78:	2887883a 	add	r3,r5,r2
    8d7c:	00c0020e 	bge	zero,r3,8d88 <__ulp+0x18>
    8d80:	0005883a 	mov	r2,zero
    8d84:	f800283a 	ret
    8d88:	00c7c83a 	sub	r3,zero,r3
    8d8c:	1807d53a 	srai	r3,r3,20
    8d90:	008004c4 	movi	r2,19
    8d94:	10c00b0e 	bge	r2,r3,8dc4 <__ulp+0x54>
    8d98:	18bffb04 	addi	r2,r3,-20
    8d9c:	01000784 	movi	r4,30
    8da0:	0007883a 	mov	r3,zero
    8da4:	20800516 	blt	r4,r2,8dbc <__ulp+0x4c>
    8da8:	010007c4 	movi	r4,31
    8dac:	2089c83a 	sub	r4,r4,r2
    8db0:	00800044 	movi	r2,1
    8db4:	1104983a 	sll	r2,r2,r4
    8db8:	f800283a 	ret
    8dbc:	00800044 	movi	r2,1
    8dc0:	f800283a 	ret
    8dc4:	01400234 	movhi	r5,8
    8dc8:	28c7d83a 	sra	r3,r5,r3
    8dcc:	0005883a 	mov	r2,zero
    8dd0:	f800283a 	ret

00008dd4 <__b2d>:
    8dd4:	defffa04 	addi	sp,sp,-24
    8dd8:	dc000015 	stw	r16,0(sp)
    8ddc:	24000417 	ldw	r16,16(r4)
    8de0:	dc400115 	stw	r17,4(sp)
    8de4:	24400504 	addi	r17,r4,20
    8de8:	8421883a 	add	r16,r16,r16
    8dec:	8421883a 	add	r16,r16,r16
    8df0:	8c21883a 	add	r16,r17,r16
    8df4:	dc800215 	stw	r18,8(sp)
    8df8:	84bfff17 	ldw	r18,-4(r16)
    8dfc:	dd000415 	stw	r20,16(sp)
    8e00:	dcc00315 	stw	r19,12(sp)
    8e04:	9009883a 	mov	r4,r18
    8e08:	2829883a 	mov	r20,r5
    8e0c:	dfc00515 	stw	ra,20(sp)
    8e10:	00085400 	call	8540 <__hi0bits>
    8e14:	00c00804 	movi	r3,32
    8e18:	1889c83a 	sub	r4,r3,r2
    8e1c:	a1000015 	stw	r4,0(r20)
    8e20:	01000284 	movi	r4,10
    8e24:	84ffff04 	addi	r19,r16,-4
    8e28:	20801216 	blt	r4,r2,8e74 <__b2d+0xa0>
    8e2c:	018002c4 	movi	r6,11
    8e30:	308dc83a 	sub	r6,r6,r2
    8e34:	9186d83a 	srl	r3,r18,r6
    8e38:	18cffc34 	orhi	r3,r3,16368
    8e3c:	8cc0212e 	bgeu	r17,r19,8ec4 <__b2d+0xf0>
    8e40:	813ffe17 	ldw	r4,-8(r16)
    8e44:	218cd83a 	srl	r6,r4,r6
    8e48:	10800544 	addi	r2,r2,21
    8e4c:	9084983a 	sll	r2,r18,r2
    8e50:	1184b03a 	or	r2,r2,r6
    8e54:	dfc00517 	ldw	ra,20(sp)
    8e58:	dd000417 	ldw	r20,16(sp)
    8e5c:	dcc00317 	ldw	r19,12(sp)
    8e60:	dc800217 	ldw	r18,8(sp)
    8e64:	dc400117 	ldw	r17,4(sp)
    8e68:	dc000017 	ldw	r16,0(sp)
    8e6c:	dec00604 	addi	sp,sp,24
    8e70:	f800283a 	ret
    8e74:	8cc00f2e 	bgeu	r17,r19,8eb4 <__b2d+0xe0>
    8e78:	117ffd44 	addi	r5,r2,-11
    8e7c:	80bffe17 	ldw	r2,-8(r16)
    8e80:	28000e26 	beq	r5,zero,8ebc <__b2d+0xe8>
    8e84:	1949c83a 	sub	r4,r3,r5
    8e88:	9164983a 	sll	r18,r18,r5
    8e8c:	1106d83a 	srl	r3,r2,r4
    8e90:	81bffe04 	addi	r6,r16,-8
    8e94:	948ffc34 	orhi	r18,r18,16368
    8e98:	90c6b03a 	or	r3,r18,r3
    8e9c:	89800e2e 	bgeu	r17,r6,8ed8 <__b2d+0x104>
    8ea0:	81bffd17 	ldw	r6,-12(r16)
    8ea4:	1144983a 	sll	r2,r2,r5
    8ea8:	310ad83a 	srl	r5,r6,r4
    8eac:	2884b03a 	or	r2,r5,r2
    8eb0:	003fe806 	br	8e54 <__alt_data_end+0xff008e54>
    8eb4:	10bffd44 	addi	r2,r2,-11
    8eb8:	1000041e 	bne	r2,zero,8ecc <__b2d+0xf8>
    8ebc:	90cffc34 	orhi	r3,r18,16368
    8ec0:	003fe406 	br	8e54 <__alt_data_end+0xff008e54>
    8ec4:	000d883a 	mov	r6,zero
    8ec8:	003fdf06 	br	8e48 <__alt_data_end+0xff008e48>
    8ecc:	90a4983a 	sll	r18,r18,r2
    8ed0:	0005883a 	mov	r2,zero
    8ed4:	003ff906 	br	8ebc <__alt_data_end+0xff008ebc>
    8ed8:	1144983a 	sll	r2,r2,r5
    8edc:	003fdd06 	br	8e54 <__alt_data_end+0xff008e54>

00008ee0 <__d2b>:
    8ee0:	defff804 	addi	sp,sp,-32
    8ee4:	dc000215 	stw	r16,8(sp)
    8ee8:	3021883a 	mov	r16,r6
    8eec:	dc400315 	stw	r17,12(sp)
    8ef0:	8022907a 	slli	r17,r16,1
    8ef4:	dd000615 	stw	r20,24(sp)
    8ef8:	2829883a 	mov	r20,r5
    8efc:	01400044 	movi	r5,1
    8f00:	dcc00515 	stw	r19,20(sp)
    8f04:	dc800415 	stw	r18,16(sp)
    8f08:	dfc00715 	stw	ra,28(sp)
    8f0c:	3825883a 	mov	r18,r7
    8f10:	8822d57a 	srli	r17,r17,21
    8f14:	000824c0 	call	824c <_Balloc>
    8f18:	1027883a 	mov	r19,r2
    8f1c:	00800434 	movhi	r2,16
    8f20:	10bfffc4 	addi	r2,r2,-1
    8f24:	808c703a 	and	r6,r16,r2
    8f28:	88000126 	beq	r17,zero,8f30 <__d2b+0x50>
    8f2c:	31800434 	orhi	r6,r6,16
    8f30:	d9800015 	stw	r6,0(sp)
    8f34:	a0002426 	beq	r20,zero,8fc8 <__d2b+0xe8>
    8f38:	d9000104 	addi	r4,sp,4
    8f3c:	dd000115 	stw	r20,4(sp)
    8f40:	00085a80 	call	85a8 <__lo0bits>
    8f44:	d8c00017 	ldw	r3,0(sp)
    8f48:	10002f1e 	bne	r2,zero,9008 <__d2b+0x128>
    8f4c:	d9000117 	ldw	r4,4(sp)
    8f50:	99000515 	stw	r4,20(r19)
    8f54:	1821003a 	cmpeq	r16,r3,zero
    8f58:	01000084 	movi	r4,2
    8f5c:	2421c83a 	sub	r16,r4,r16
    8f60:	98c00615 	stw	r3,24(r19)
    8f64:	9c000415 	stw	r16,16(r19)
    8f68:	88001f1e 	bne	r17,zero,8fe8 <__d2b+0x108>
    8f6c:	10bef384 	addi	r2,r2,-1074
    8f70:	90800015 	stw	r2,0(r18)
    8f74:	00900034 	movhi	r2,16384
    8f78:	10bfffc4 	addi	r2,r2,-1
    8f7c:	8085883a 	add	r2,r16,r2
    8f80:	1085883a 	add	r2,r2,r2
    8f84:	1085883a 	add	r2,r2,r2
    8f88:	9885883a 	add	r2,r19,r2
    8f8c:	11000517 	ldw	r4,20(r2)
    8f90:	8020917a 	slli	r16,r16,5
    8f94:	00085400 	call	8540 <__hi0bits>
    8f98:	d8c00817 	ldw	r3,32(sp)
    8f9c:	8085c83a 	sub	r2,r16,r2
    8fa0:	18800015 	stw	r2,0(r3)
    8fa4:	9805883a 	mov	r2,r19
    8fa8:	dfc00717 	ldw	ra,28(sp)
    8fac:	dd000617 	ldw	r20,24(sp)
    8fb0:	dcc00517 	ldw	r19,20(sp)
    8fb4:	dc800417 	ldw	r18,16(sp)
    8fb8:	dc400317 	ldw	r17,12(sp)
    8fbc:	dc000217 	ldw	r16,8(sp)
    8fc0:	dec00804 	addi	sp,sp,32
    8fc4:	f800283a 	ret
    8fc8:	d809883a 	mov	r4,sp
    8fcc:	00085a80 	call	85a8 <__lo0bits>
    8fd0:	d8c00017 	ldw	r3,0(sp)
    8fd4:	04000044 	movi	r16,1
    8fd8:	9c000415 	stw	r16,16(r19)
    8fdc:	98c00515 	stw	r3,20(r19)
    8fe0:	10800804 	addi	r2,r2,32
    8fe4:	883fe126 	beq	r17,zero,8f6c <__alt_data_end+0xff008f6c>
    8fe8:	00c00d44 	movi	r3,53
    8fec:	8c7ef344 	addi	r17,r17,-1075
    8ff0:	88a3883a 	add	r17,r17,r2
    8ff4:	1885c83a 	sub	r2,r3,r2
    8ff8:	d8c00817 	ldw	r3,32(sp)
    8ffc:	94400015 	stw	r17,0(r18)
    9000:	18800015 	stw	r2,0(r3)
    9004:	003fe706 	br	8fa4 <__alt_data_end+0xff008fa4>
    9008:	01000804 	movi	r4,32
    900c:	2089c83a 	sub	r4,r4,r2
    9010:	1908983a 	sll	r4,r3,r4
    9014:	d9400117 	ldw	r5,4(sp)
    9018:	1886d83a 	srl	r3,r3,r2
    901c:	2148b03a 	or	r4,r4,r5
    9020:	99000515 	stw	r4,20(r19)
    9024:	d8c00015 	stw	r3,0(sp)
    9028:	003fca06 	br	8f54 <__alt_data_end+0xff008f54>

0000902c <__ratio>:
    902c:	defff904 	addi	sp,sp,-28
    9030:	dc400315 	stw	r17,12(sp)
    9034:	2823883a 	mov	r17,r5
    9038:	d9400104 	addi	r5,sp,4
    903c:	dfc00615 	stw	ra,24(sp)
    9040:	dcc00515 	stw	r19,20(sp)
    9044:	dc800415 	stw	r18,16(sp)
    9048:	2027883a 	mov	r19,r4
    904c:	dc000215 	stw	r16,8(sp)
    9050:	0008dd40 	call	8dd4 <__b2d>
    9054:	d80b883a 	mov	r5,sp
    9058:	8809883a 	mov	r4,r17
    905c:	1025883a 	mov	r18,r2
    9060:	1821883a 	mov	r16,r3
    9064:	0008dd40 	call	8dd4 <__b2d>
    9068:	8a000417 	ldw	r8,16(r17)
    906c:	99000417 	ldw	r4,16(r19)
    9070:	d9400117 	ldw	r5,4(sp)
    9074:	2209c83a 	sub	r4,r4,r8
    9078:	2010917a 	slli	r8,r4,5
    907c:	d9000017 	ldw	r4,0(sp)
    9080:	2909c83a 	sub	r4,r5,r4
    9084:	4109883a 	add	r4,r8,r4
    9088:	01000e0e 	bge	zero,r4,90c4 <__ratio+0x98>
    908c:	2008953a 	slli	r4,r4,20
    9090:	2421883a 	add	r16,r4,r16
    9094:	100d883a 	mov	r6,r2
    9098:	180f883a 	mov	r7,r3
    909c:	9009883a 	mov	r4,r18
    90a0:	800b883a 	mov	r5,r16
    90a4:	000cec40 	call	cec4 <__divdf3>
    90a8:	dfc00617 	ldw	ra,24(sp)
    90ac:	dcc00517 	ldw	r19,20(sp)
    90b0:	dc800417 	ldw	r18,16(sp)
    90b4:	dc400317 	ldw	r17,12(sp)
    90b8:	dc000217 	ldw	r16,8(sp)
    90bc:	dec00704 	addi	sp,sp,28
    90c0:	f800283a 	ret
    90c4:	2008953a 	slli	r4,r4,20
    90c8:	1907c83a 	sub	r3,r3,r4
    90cc:	003ff106 	br	9094 <__alt_data_end+0xff009094>

000090d0 <_mprec_log10>:
    90d0:	defffe04 	addi	sp,sp,-8
    90d4:	dc000015 	stw	r16,0(sp)
    90d8:	dfc00115 	stw	ra,4(sp)
    90dc:	008005c4 	movi	r2,23
    90e0:	2021883a 	mov	r16,r4
    90e4:	11000d0e 	bge	r2,r4,911c <_mprec_log10+0x4c>
    90e8:	0005883a 	mov	r2,zero
    90ec:	00cffc34 	movhi	r3,16368
    90f0:	843fffc4 	addi	r16,r16,-1
    90f4:	000d883a 	mov	r6,zero
    90f8:	01d00934 	movhi	r7,16420
    90fc:	1009883a 	mov	r4,r2
    9100:	180b883a 	mov	r5,r3
    9104:	000da040 	call	da04 <__muldf3>
    9108:	803ff91e 	bne	r16,zero,90f0 <__alt_data_end+0xff0090f0>
    910c:	dfc00117 	ldw	ra,4(sp)
    9110:	dc000017 	ldw	r16,0(sp)
    9114:	dec00204 	addi	sp,sp,8
    9118:	f800283a 	ret
    911c:	202090fa 	slli	r16,r4,3
    9120:	00800074 	movhi	r2,1
    9124:	10871a04 	addi	r2,r2,7272
    9128:	1421883a 	add	r16,r2,r16
    912c:	80800017 	ldw	r2,0(r16)
    9130:	80c00117 	ldw	r3,4(r16)
    9134:	dfc00117 	ldw	ra,4(sp)
    9138:	dc000017 	ldw	r16,0(sp)
    913c:	dec00204 	addi	sp,sp,8
    9140:	f800283a 	ret

00009144 <__copybits>:
    9144:	297fffc4 	addi	r5,r5,-1
    9148:	280fd17a 	srai	r7,r5,5
    914c:	30c00417 	ldw	r3,16(r6)
    9150:	30800504 	addi	r2,r6,20
    9154:	39c00044 	addi	r7,r7,1
    9158:	18c7883a 	add	r3,r3,r3
    915c:	39cf883a 	add	r7,r7,r7
    9160:	18c7883a 	add	r3,r3,r3
    9164:	39cf883a 	add	r7,r7,r7
    9168:	10c7883a 	add	r3,r2,r3
    916c:	21cf883a 	add	r7,r4,r7
    9170:	10c00d2e 	bgeu	r2,r3,91a8 <__copybits+0x64>
    9174:	200b883a 	mov	r5,r4
    9178:	12000017 	ldw	r8,0(r2)
    917c:	29400104 	addi	r5,r5,4
    9180:	10800104 	addi	r2,r2,4
    9184:	2a3fff15 	stw	r8,-4(r5)
    9188:	10fffb36 	bltu	r2,r3,9178 <__alt_data_end+0xff009178>
    918c:	1985c83a 	sub	r2,r3,r6
    9190:	10bffac4 	addi	r2,r2,-21
    9194:	1004d0ba 	srli	r2,r2,2
    9198:	10800044 	addi	r2,r2,1
    919c:	1085883a 	add	r2,r2,r2
    91a0:	1085883a 	add	r2,r2,r2
    91a4:	2089883a 	add	r4,r4,r2
    91a8:	21c0032e 	bgeu	r4,r7,91b8 <__copybits+0x74>
    91ac:	20000015 	stw	zero,0(r4)
    91b0:	21000104 	addi	r4,r4,4
    91b4:	21fffd36 	bltu	r4,r7,91ac <__alt_data_end+0xff0091ac>
    91b8:	f800283a 	ret

000091bc <__any_on>:
    91bc:	20c00417 	ldw	r3,16(r4)
    91c0:	2805d17a 	srai	r2,r5,5
    91c4:	21000504 	addi	r4,r4,20
    91c8:	18800d0e 	bge	r3,r2,9200 <__any_on+0x44>
    91cc:	18c7883a 	add	r3,r3,r3
    91d0:	18c7883a 	add	r3,r3,r3
    91d4:	20c7883a 	add	r3,r4,r3
    91d8:	20c0192e 	bgeu	r4,r3,9240 <__any_on+0x84>
    91dc:	18bfff17 	ldw	r2,-4(r3)
    91e0:	18ffff04 	addi	r3,r3,-4
    91e4:	1000041e 	bne	r2,zero,91f8 <__any_on+0x3c>
    91e8:	20c0142e 	bgeu	r4,r3,923c <__any_on+0x80>
    91ec:	18ffff04 	addi	r3,r3,-4
    91f0:	19400017 	ldw	r5,0(r3)
    91f4:	283ffc26 	beq	r5,zero,91e8 <__alt_data_end+0xff0091e8>
    91f8:	00800044 	movi	r2,1
    91fc:	f800283a 	ret
    9200:	10c00a0e 	bge	r2,r3,922c <__any_on+0x70>
    9204:	1085883a 	add	r2,r2,r2
    9208:	1085883a 	add	r2,r2,r2
    920c:	294007cc 	andi	r5,r5,31
    9210:	2087883a 	add	r3,r4,r2
    9214:	283ff026 	beq	r5,zero,91d8 <__alt_data_end+0xff0091d8>
    9218:	19800017 	ldw	r6,0(r3)
    921c:	3144d83a 	srl	r2,r6,r5
    9220:	114a983a 	sll	r5,r2,r5
    9224:	317ff41e 	bne	r6,r5,91f8 <__alt_data_end+0xff0091f8>
    9228:	003feb06 	br	91d8 <__alt_data_end+0xff0091d8>
    922c:	1085883a 	add	r2,r2,r2
    9230:	1085883a 	add	r2,r2,r2
    9234:	2087883a 	add	r3,r4,r2
    9238:	003fe706 	br	91d8 <__alt_data_end+0xff0091d8>
    923c:	f800283a 	ret
    9240:	0005883a 	mov	r2,zero
    9244:	f800283a 	ret

00009248 <_realloc_r>:
    9248:	defff604 	addi	sp,sp,-40
    924c:	dc800215 	stw	r18,8(sp)
    9250:	dfc00915 	stw	ra,36(sp)
    9254:	df000815 	stw	fp,32(sp)
    9258:	ddc00715 	stw	r23,28(sp)
    925c:	dd800615 	stw	r22,24(sp)
    9260:	dd400515 	stw	r21,20(sp)
    9264:	dd000415 	stw	r20,16(sp)
    9268:	dcc00315 	stw	r19,12(sp)
    926c:	dc400115 	stw	r17,4(sp)
    9270:	dc000015 	stw	r16,0(sp)
    9274:	3025883a 	mov	r18,r6
    9278:	2800b726 	beq	r5,zero,9558 <_realloc_r+0x310>
    927c:	282b883a 	mov	r21,r5
    9280:	2029883a 	mov	r20,r4
    9284:	000f1fc0 	call	f1fc <__malloc_lock>
    9288:	a8bfff17 	ldw	r2,-4(r21)
    928c:	043fff04 	movi	r16,-4
    9290:	90c002c4 	addi	r3,r18,11
    9294:	01000584 	movi	r4,22
    9298:	acfffe04 	addi	r19,r21,-8
    929c:	1420703a 	and	r16,r2,r16
    92a0:	20c0332e 	bgeu	r4,r3,9370 <_realloc_r+0x128>
    92a4:	047ffe04 	movi	r17,-8
    92a8:	1c62703a 	and	r17,r3,r17
    92ac:	8807883a 	mov	r3,r17
    92b0:	88005816 	blt	r17,zero,9414 <_realloc_r+0x1cc>
    92b4:	8c805736 	bltu	r17,r18,9414 <_realloc_r+0x1cc>
    92b8:	80c0300e 	bge	r16,r3,937c <_realloc_r+0x134>
    92bc:	07000074 	movhi	fp,1
    92c0:	e7079f04 	addi	fp,fp,7804
    92c4:	e1c00217 	ldw	r7,8(fp)
    92c8:	9c09883a 	add	r4,r19,r16
    92cc:	22000117 	ldw	r8,4(r4)
    92d0:	21c06326 	beq	r4,r7,9460 <_realloc_r+0x218>
    92d4:	017fff84 	movi	r5,-2
    92d8:	414a703a 	and	r5,r8,r5
    92dc:	214b883a 	add	r5,r4,r5
    92e0:	29800117 	ldw	r6,4(r5)
    92e4:	3180004c 	andi	r6,r6,1
    92e8:	30003f26 	beq	r6,zero,93e8 <_realloc_r+0x1a0>
    92ec:	1080004c 	andi	r2,r2,1
    92f0:	10008326 	beq	r2,zero,9500 <_realloc_r+0x2b8>
    92f4:	900b883a 	mov	r5,r18
    92f8:	a009883a 	mov	r4,r20
    92fc:	00023600 	call	2360 <_malloc_r>
    9300:	1025883a 	mov	r18,r2
    9304:	10011e26 	beq	r2,zero,9780 <_realloc_r+0x538>
    9308:	a93fff17 	ldw	r4,-4(r21)
    930c:	10fffe04 	addi	r3,r2,-8
    9310:	00bfff84 	movi	r2,-2
    9314:	2084703a 	and	r2,r4,r2
    9318:	9885883a 	add	r2,r19,r2
    931c:	1880ee26 	beq	r3,r2,96d8 <_realloc_r+0x490>
    9320:	81bfff04 	addi	r6,r16,-4
    9324:	00800904 	movi	r2,36
    9328:	1180b836 	bltu	r2,r6,960c <_realloc_r+0x3c4>
    932c:	00c004c4 	movi	r3,19
    9330:	19809636 	bltu	r3,r6,958c <_realloc_r+0x344>
    9334:	9005883a 	mov	r2,r18
    9338:	a807883a 	mov	r3,r21
    933c:	19000017 	ldw	r4,0(r3)
    9340:	11000015 	stw	r4,0(r2)
    9344:	19000117 	ldw	r4,4(r3)
    9348:	11000115 	stw	r4,4(r2)
    934c:	18c00217 	ldw	r3,8(r3)
    9350:	10c00215 	stw	r3,8(r2)
    9354:	a80b883a 	mov	r5,r21
    9358:	a009883a 	mov	r4,r20
    935c:	00071b00 	call	71b0 <_free_r>
    9360:	a009883a 	mov	r4,r20
    9364:	000f2200 	call	f220 <__malloc_unlock>
    9368:	9005883a 	mov	r2,r18
    936c:	00001206 	br	93b8 <_realloc_r+0x170>
    9370:	00c00404 	movi	r3,16
    9374:	1823883a 	mov	r17,r3
    9378:	003fce06 	br	92b4 <__alt_data_end+0xff0092b4>
    937c:	a825883a 	mov	r18,r21
    9380:	8445c83a 	sub	r2,r16,r17
    9384:	00c003c4 	movi	r3,15
    9388:	18802636 	bltu	r3,r2,9424 <_realloc_r+0x1dc>
    938c:	99800117 	ldw	r6,4(r19)
    9390:	9c07883a 	add	r3,r19,r16
    9394:	3180004c 	andi	r6,r6,1
    9398:	3420b03a 	or	r16,r6,r16
    939c:	9c000115 	stw	r16,4(r19)
    93a0:	18800117 	ldw	r2,4(r3)
    93a4:	10800054 	ori	r2,r2,1
    93a8:	18800115 	stw	r2,4(r3)
    93ac:	a009883a 	mov	r4,r20
    93b0:	000f2200 	call	f220 <__malloc_unlock>
    93b4:	9005883a 	mov	r2,r18
    93b8:	dfc00917 	ldw	ra,36(sp)
    93bc:	df000817 	ldw	fp,32(sp)
    93c0:	ddc00717 	ldw	r23,28(sp)
    93c4:	dd800617 	ldw	r22,24(sp)
    93c8:	dd400517 	ldw	r21,20(sp)
    93cc:	dd000417 	ldw	r20,16(sp)
    93d0:	dcc00317 	ldw	r19,12(sp)
    93d4:	dc800217 	ldw	r18,8(sp)
    93d8:	dc400117 	ldw	r17,4(sp)
    93dc:	dc000017 	ldw	r16,0(sp)
    93e0:	dec00a04 	addi	sp,sp,40
    93e4:	f800283a 	ret
    93e8:	017fff04 	movi	r5,-4
    93ec:	414a703a 	and	r5,r8,r5
    93f0:	814d883a 	add	r6,r16,r5
    93f4:	30c01f16 	blt	r6,r3,9474 <_realloc_r+0x22c>
    93f8:	20800317 	ldw	r2,12(r4)
    93fc:	20c00217 	ldw	r3,8(r4)
    9400:	a825883a 	mov	r18,r21
    9404:	3021883a 	mov	r16,r6
    9408:	18800315 	stw	r2,12(r3)
    940c:	10c00215 	stw	r3,8(r2)
    9410:	003fdb06 	br	9380 <__alt_data_end+0xff009380>
    9414:	00800304 	movi	r2,12
    9418:	a0800015 	stw	r2,0(r20)
    941c:	0005883a 	mov	r2,zero
    9420:	003fe506 	br	93b8 <__alt_data_end+0xff0093b8>
    9424:	98c00117 	ldw	r3,4(r19)
    9428:	9c4b883a 	add	r5,r19,r17
    942c:	11000054 	ori	r4,r2,1
    9430:	18c0004c 	andi	r3,r3,1
    9434:	1c62b03a 	or	r17,r3,r17
    9438:	9c400115 	stw	r17,4(r19)
    943c:	29000115 	stw	r4,4(r5)
    9440:	2885883a 	add	r2,r5,r2
    9444:	10c00117 	ldw	r3,4(r2)
    9448:	29400204 	addi	r5,r5,8
    944c:	a009883a 	mov	r4,r20
    9450:	18c00054 	ori	r3,r3,1
    9454:	10c00115 	stw	r3,4(r2)
    9458:	00071b00 	call	71b0 <_free_r>
    945c:	003fd306 	br	93ac <__alt_data_end+0xff0093ac>
    9460:	017fff04 	movi	r5,-4
    9464:	414a703a 	and	r5,r8,r5
    9468:	89800404 	addi	r6,r17,16
    946c:	8151883a 	add	r8,r16,r5
    9470:	4180590e 	bge	r8,r6,95d8 <_realloc_r+0x390>
    9474:	1080004c 	andi	r2,r2,1
    9478:	103f9e1e 	bne	r2,zero,92f4 <__alt_data_end+0xff0092f4>
    947c:	adbffe17 	ldw	r22,-8(r21)
    9480:	00bfff04 	movi	r2,-4
    9484:	9dadc83a 	sub	r22,r19,r22
    9488:	b1800117 	ldw	r6,4(r22)
    948c:	3084703a 	and	r2,r6,r2
    9490:	20002026 	beq	r4,zero,9514 <_realloc_r+0x2cc>
    9494:	80af883a 	add	r23,r16,r2
    9498:	b96f883a 	add	r23,r23,r5
    949c:	21c05f26 	beq	r4,r7,961c <_realloc_r+0x3d4>
    94a0:	b8c01c16 	blt	r23,r3,9514 <_realloc_r+0x2cc>
    94a4:	20800317 	ldw	r2,12(r4)
    94a8:	20c00217 	ldw	r3,8(r4)
    94ac:	81bfff04 	addi	r6,r16,-4
    94b0:	01000904 	movi	r4,36
    94b4:	18800315 	stw	r2,12(r3)
    94b8:	10c00215 	stw	r3,8(r2)
    94bc:	b0c00217 	ldw	r3,8(r22)
    94c0:	b0800317 	ldw	r2,12(r22)
    94c4:	b4800204 	addi	r18,r22,8
    94c8:	18800315 	stw	r2,12(r3)
    94cc:	10c00215 	stw	r3,8(r2)
    94d0:	21801b36 	bltu	r4,r6,9540 <_realloc_r+0x2f8>
    94d4:	008004c4 	movi	r2,19
    94d8:	1180352e 	bgeu	r2,r6,95b0 <_realloc_r+0x368>
    94dc:	a8800017 	ldw	r2,0(r21)
    94e0:	b0800215 	stw	r2,8(r22)
    94e4:	a8800117 	ldw	r2,4(r21)
    94e8:	b0800315 	stw	r2,12(r22)
    94ec:	008006c4 	movi	r2,27
    94f0:	11807f36 	bltu	r2,r6,96f0 <_realloc_r+0x4a8>
    94f4:	b0800404 	addi	r2,r22,16
    94f8:	ad400204 	addi	r21,r21,8
    94fc:	00002d06 	br	95b4 <_realloc_r+0x36c>
    9500:	adbffe17 	ldw	r22,-8(r21)
    9504:	00bfff04 	movi	r2,-4
    9508:	9dadc83a 	sub	r22,r19,r22
    950c:	b1000117 	ldw	r4,4(r22)
    9510:	2084703a 	and	r2,r4,r2
    9514:	b03f7726 	beq	r22,zero,92f4 <__alt_data_end+0xff0092f4>
    9518:	80af883a 	add	r23,r16,r2
    951c:	b8ff7516 	blt	r23,r3,92f4 <__alt_data_end+0xff0092f4>
    9520:	b0800317 	ldw	r2,12(r22)
    9524:	b0c00217 	ldw	r3,8(r22)
    9528:	81bfff04 	addi	r6,r16,-4
    952c:	01000904 	movi	r4,36
    9530:	18800315 	stw	r2,12(r3)
    9534:	10c00215 	stw	r3,8(r2)
    9538:	b4800204 	addi	r18,r22,8
    953c:	21bfe52e 	bgeu	r4,r6,94d4 <__alt_data_end+0xff0094d4>
    9540:	a80b883a 	mov	r5,r21
    9544:	9009883a 	mov	r4,r18
    9548:	0007fc80 	call	7fc8 <memmove>
    954c:	b821883a 	mov	r16,r23
    9550:	b027883a 	mov	r19,r22
    9554:	003f8a06 	br	9380 <__alt_data_end+0xff009380>
    9558:	300b883a 	mov	r5,r6
    955c:	dfc00917 	ldw	ra,36(sp)
    9560:	df000817 	ldw	fp,32(sp)
    9564:	ddc00717 	ldw	r23,28(sp)
    9568:	dd800617 	ldw	r22,24(sp)
    956c:	dd400517 	ldw	r21,20(sp)
    9570:	dd000417 	ldw	r20,16(sp)
    9574:	dcc00317 	ldw	r19,12(sp)
    9578:	dc800217 	ldw	r18,8(sp)
    957c:	dc400117 	ldw	r17,4(sp)
    9580:	dc000017 	ldw	r16,0(sp)
    9584:	dec00a04 	addi	sp,sp,40
    9588:	00023601 	jmpi	2360 <_malloc_r>
    958c:	a8c00017 	ldw	r3,0(r21)
    9590:	90c00015 	stw	r3,0(r18)
    9594:	a8c00117 	ldw	r3,4(r21)
    9598:	90c00115 	stw	r3,4(r18)
    959c:	00c006c4 	movi	r3,27
    95a0:	19804536 	bltu	r3,r6,96b8 <_realloc_r+0x470>
    95a4:	90800204 	addi	r2,r18,8
    95a8:	a8c00204 	addi	r3,r21,8
    95ac:	003f6306 	br	933c <__alt_data_end+0xff00933c>
    95b0:	9005883a 	mov	r2,r18
    95b4:	a8c00017 	ldw	r3,0(r21)
    95b8:	b821883a 	mov	r16,r23
    95bc:	b027883a 	mov	r19,r22
    95c0:	10c00015 	stw	r3,0(r2)
    95c4:	a8c00117 	ldw	r3,4(r21)
    95c8:	10c00115 	stw	r3,4(r2)
    95cc:	a8c00217 	ldw	r3,8(r21)
    95d0:	10c00215 	stw	r3,8(r2)
    95d4:	003f6a06 	br	9380 <__alt_data_end+0xff009380>
    95d8:	9c67883a 	add	r19,r19,r17
    95dc:	4445c83a 	sub	r2,r8,r17
    95e0:	e4c00215 	stw	r19,8(fp)
    95e4:	10800054 	ori	r2,r2,1
    95e8:	98800115 	stw	r2,4(r19)
    95ec:	a8bfff17 	ldw	r2,-4(r21)
    95f0:	a009883a 	mov	r4,r20
    95f4:	1080004c 	andi	r2,r2,1
    95f8:	1462b03a 	or	r17,r2,r17
    95fc:	ac7fff15 	stw	r17,-4(r21)
    9600:	000f2200 	call	f220 <__malloc_unlock>
    9604:	a805883a 	mov	r2,r21
    9608:	003f6b06 	br	93b8 <__alt_data_end+0xff0093b8>
    960c:	a80b883a 	mov	r5,r21
    9610:	9009883a 	mov	r4,r18
    9614:	0007fc80 	call	7fc8 <memmove>
    9618:	003f4e06 	br	9354 <__alt_data_end+0xff009354>
    961c:	89000404 	addi	r4,r17,16
    9620:	b93fbc16 	blt	r23,r4,9514 <__alt_data_end+0xff009514>
    9624:	b0800317 	ldw	r2,12(r22)
    9628:	b0c00217 	ldw	r3,8(r22)
    962c:	81bfff04 	addi	r6,r16,-4
    9630:	01000904 	movi	r4,36
    9634:	18800315 	stw	r2,12(r3)
    9638:	10c00215 	stw	r3,8(r2)
    963c:	b4800204 	addi	r18,r22,8
    9640:	21804336 	bltu	r4,r6,9750 <_realloc_r+0x508>
    9644:	008004c4 	movi	r2,19
    9648:	11803f2e 	bgeu	r2,r6,9748 <_realloc_r+0x500>
    964c:	a8800017 	ldw	r2,0(r21)
    9650:	b0800215 	stw	r2,8(r22)
    9654:	a8800117 	ldw	r2,4(r21)
    9658:	b0800315 	stw	r2,12(r22)
    965c:	008006c4 	movi	r2,27
    9660:	11803f36 	bltu	r2,r6,9760 <_realloc_r+0x518>
    9664:	b0800404 	addi	r2,r22,16
    9668:	ad400204 	addi	r21,r21,8
    966c:	a8c00017 	ldw	r3,0(r21)
    9670:	10c00015 	stw	r3,0(r2)
    9674:	a8c00117 	ldw	r3,4(r21)
    9678:	10c00115 	stw	r3,4(r2)
    967c:	a8c00217 	ldw	r3,8(r21)
    9680:	10c00215 	stw	r3,8(r2)
    9684:	b447883a 	add	r3,r22,r17
    9688:	bc45c83a 	sub	r2,r23,r17
    968c:	e0c00215 	stw	r3,8(fp)
    9690:	10800054 	ori	r2,r2,1
    9694:	18800115 	stw	r2,4(r3)
    9698:	b0800117 	ldw	r2,4(r22)
    969c:	a009883a 	mov	r4,r20
    96a0:	1080004c 	andi	r2,r2,1
    96a4:	1462b03a 	or	r17,r2,r17
    96a8:	b4400115 	stw	r17,4(r22)
    96ac:	000f2200 	call	f220 <__malloc_unlock>
    96b0:	9005883a 	mov	r2,r18
    96b4:	003f4006 	br	93b8 <__alt_data_end+0xff0093b8>
    96b8:	a8c00217 	ldw	r3,8(r21)
    96bc:	90c00215 	stw	r3,8(r18)
    96c0:	a8c00317 	ldw	r3,12(r21)
    96c4:	90c00315 	stw	r3,12(r18)
    96c8:	30801126 	beq	r6,r2,9710 <_realloc_r+0x4c8>
    96cc:	90800404 	addi	r2,r18,16
    96d0:	a8c00404 	addi	r3,r21,16
    96d4:	003f1906 	br	933c <__alt_data_end+0xff00933c>
    96d8:	90ffff17 	ldw	r3,-4(r18)
    96dc:	00bfff04 	movi	r2,-4
    96e0:	a825883a 	mov	r18,r21
    96e4:	1884703a 	and	r2,r3,r2
    96e8:	80a1883a 	add	r16,r16,r2
    96ec:	003f2406 	br	9380 <__alt_data_end+0xff009380>
    96f0:	a8800217 	ldw	r2,8(r21)
    96f4:	b0800415 	stw	r2,16(r22)
    96f8:	a8800317 	ldw	r2,12(r21)
    96fc:	b0800515 	stw	r2,20(r22)
    9700:	31000a26 	beq	r6,r4,972c <_realloc_r+0x4e4>
    9704:	b0800604 	addi	r2,r22,24
    9708:	ad400404 	addi	r21,r21,16
    970c:	003fa906 	br	95b4 <__alt_data_end+0xff0095b4>
    9710:	a9000417 	ldw	r4,16(r21)
    9714:	90800604 	addi	r2,r18,24
    9718:	a8c00604 	addi	r3,r21,24
    971c:	91000415 	stw	r4,16(r18)
    9720:	a9000517 	ldw	r4,20(r21)
    9724:	91000515 	stw	r4,20(r18)
    9728:	003f0406 	br	933c <__alt_data_end+0xff00933c>
    972c:	a8c00417 	ldw	r3,16(r21)
    9730:	ad400604 	addi	r21,r21,24
    9734:	b0800804 	addi	r2,r22,32
    9738:	b0c00615 	stw	r3,24(r22)
    973c:	a8ffff17 	ldw	r3,-4(r21)
    9740:	b0c00715 	stw	r3,28(r22)
    9744:	003f9b06 	br	95b4 <__alt_data_end+0xff0095b4>
    9748:	9005883a 	mov	r2,r18
    974c:	003fc706 	br	966c <__alt_data_end+0xff00966c>
    9750:	a80b883a 	mov	r5,r21
    9754:	9009883a 	mov	r4,r18
    9758:	0007fc80 	call	7fc8 <memmove>
    975c:	003fc906 	br	9684 <__alt_data_end+0xff009684>
    9760:	a8800217 	ldw	r2,8(r21)
    9764:	b0800415 	stw	r2,16(r22)
    9768:	a8800317 	ldw	r2,12(r21)
    976c:	b0800515 	stw	r2,20(r22)
    9770:	31000726 	beq	r6,r4,9790 <_realloc_r+0x548>
    9774:	b0800604 	addi	r2,r22,24
    9778:	ad400404 	addi	r21,r21,16
    977c:	003fbb06 	br	966c <__alt_data_end+0xff00966c>
    9780:	a009883a 	mov	r4,r20
    9784:	000f2200 	call	f220 <__malloc_unlock>
    9788:	0005883a 	mov	r2,zero
    978c:	003f0a06 	br	93b8 <__alt_data_end+0xff0093b8>
    9790:	a8c00417 	ldw	r3,16(r21)
    9794:	ad400604 	addi	r21,r21,24
    9798:	b0800804 	addi	r2,r22,32
    979c:	b0c00615 	stw	r3,24(r22)
    97a0:	a8ffff17 	ldw	r3,-4(r21)
    97a4:	b0c00715 	stw	r3,28(r22)
    97a8:	003fb006 	br	966c <__alt_data_end+0xff00966c>

000097ac <__fpclassifyd>:
    97ac:	00a00034 	movhi	r2,32768
    97b0:	10bfffc4 	addi	r2,r2,-1
    97b4:	2884703a 	and	r2,r5,r2
    97b8:	10000726 	beq	r2,zero,97d8 <__fpclassifyd+0x2c>
    97bc:	00fffc34 	movhi	r3,65520
    97c0:	019ff834 	movhi	r6,32736
    97c4:	28c7883a 	add	r3,r5,r3
    97c8:	31bfffc4 	addi	r6,r6,-1
    97cc:	30c00536 	bltu	r6,r3,97e4 <__fpclassifyd+0x38>
    97d0:	00800104 	movi	r2,4
    97d4:	f800283a 	ret
    97d8:	2000021e 	bne	r4,zero,97e4 <__fpclassifyd+0x38>
    97dc:	00800084 	movi	r2,2
    97e0:	f800283a 	ret
    97e4:	00dffc34 	movhi	r3,32752
    97e8:	019ff834 	movhi	r6,32736
    97ec:	28cb883a 	add	r5,r5,r3
    97f0:	31bfffc4 	addi	r6,r6,-1
    97f4:	317ff62e 	bgeu	r6,r5,97d0 <__alt_data_end+0xff0097d0>
    97f8:	01400434 	movhi	r5,16
    97fc:	297fffc4 	addi	r5,r5,-1
    9800:	28800236 	bltu	r5,r2,980c <__fpclassifyd+0x60>
    9804:	008000c4 	movi	r2,3
    9808:	f800283a 	ret
    980c:	10c00226 	beq	r2,r3,9818 <__fpclassifyd+0x6c>
    9810:	0005883a 	mov	r2,zero
    9814:	f800283a 	ret
    9818:	2005003a 	cmpeq	r2,r4,zero
    981c:	f800283a 	ret

00009820 <__sread>:
    9820:	defffe04 	addi	sp,sp,-8
    9824:	dc000015 	stw	r16,0(sp)
    9828:	2821883a 	mov	r16,r5
    982c:	2940038f 	ldh	r5,14(r5)
    9830:	dfc00115 	stw	ra,4(sp)
    9834:	000b6140 	call	b614 <_read_r>
    9838:	10000716 	blt	r2,zero,9858 <__sread+0x38>
    983c:	80c01417 	ldw	r3,80(r16)
    9840:	1887883a 	add	r3,r3,r2
    9844:	80c01415 	stw	r3,80(r16)
    9848:	dfc00117 	ldw	ra,4(sp)
    984c:	dc000017 	ldw	r16,0(sp)
    9850:	dec00204 	addi	sp,sp,8
    9854:	f800283a 	ret
    9858:	80c0030b 	ldhu	r3,12(r16)
    985c:	18fbffcc 	andi	r3,r3,61439
    9860:	80c0030d 	sth	r3,12(r16)
    9864:	dfc00117 	ldw	ra,4(sp)
    9868:	dc000017 	ldw	r16,0(sp)
    986c:	dec00204 	addi	sp,sp,8
    9870:	f800283a 	ret

00009874 <__seofread>:
    9874:	0005883a 	mov	r2,zero
    9878:	f800283a 	ret

0000987c <__swrite>:
    987c:	2880030b 	ldhu	r2,12(r5)
    9880:	defffb04 	addi	sp,sp,-20
    9884:	dcc00315 	stw	r19,12(sp)
    9888:	dc800215 	stw	r18,8(sp)
    988c:	dc400115 	stw	r17,4(sp)
    9890:	dc000015 	stw	r16,0(sp)
    9894:	dfc00415 	stw	ra,16(sp)
    9898:	10c0400c 	andi	r3,r2,256
    989c:	2821883a 	mov	r16,r5
    98a0:	2023883a 	mov	r17,r4
    98a4:	3025883a 	mov	r18,r6
    98a8:	3827883a 	mov	r19,r7
    98ac:	18000526 	beq	r3,zero,98c4 <__swrite+0x48>
    98b0:	2940038f 	ldh	r5,14(r5)
    98b4:	01c00084 	movi	r7,2
    98b8:	000d883a 	mov	r6,zero
    98bc:	000b5b40 	call	b5b4 <_lseek_r>
    98c0:	8080030b 	ldhu	r2,12(r16)
    98c4:	8140038f 	ldh	r5,14(r16)
    98c8:	10bbffcc 	andi	r2,r2,61439
    98cc:	980f883a 	mov	r7,r19
    98d0:	900d883a 	mov	r6,r18
    98d4:	8809883a 	mov	r4,r17
    98d8:	8080030d 	sth	r2,12(r16)
    98dc:	dfc00417 	ldw	ra,16(sp)
    98e0:	dcc00317 	ldw	r19,12(sp)
    98e4:	dc800217 	ldw	r18,8(sp)
    98e8:	dc400117 	ldw	r17,4(sp)
    98ec:	dc000017 	ldw	r16,0(sp)
    98f0:	dec00504 	addi	sp,sp,20
    98f4:	000b0801 	jmpi	b080 <_write_r>

000098f8 <__sseek>:
    98f8:	defffe04 	addi	sp,sp,-8
    98fc:	dc000015 	stw	r16,0(sp)
    9900:	2821883a 	mov	r16,r5
    9904:	2940038f 	ldh	r5,14(r5)
    9908:	dfc00115 	stw	ra,4(sp)
    990c:	000b5b40 	call	b5b4 <_lseek_r>
    9910:	00ffffc4 	movi	r3,-1
    9914:	10c00826 	beq	r2,r3,9938 <__sseek+0x40>
    9918:	80c0030b 	ldhu	r3,12(r16)
    991c:	80801415 	stw	r2,80(r16)
    9920:	18c40014 	ori	r3,r3,4096
    9924:	80c0030d 	sth	r3,12(r16)
    9928:	dfc00117 	ldw	ra,4(sp)
    992c:	dc000017 	ldw	r16,0(sp)
    9930:	dec00204 	addi	sp,sp,8
    9934:	f800283a 	ret
    9938:	80c0030b 	ldhu	r3,12(r16)
    993c:	18fbffcc 	andi	r3,r3,61439
    9940:	80c0030d 	sth	r3,12(r16)
    9944:	dfc00117 	ldw	ra,4(sp)
    9948:	dc000017 	ldw	r16,0(sp)
    994c:	dec00204 	addi	sp,sp,8
    9950:	f800283a 	ret

00009954 <__sclose>:
    9954:	2940038f 	ldh	r5,14(r5)
    9958:	000b0e01 	jmpi	b0e0 <_close_r>

0000995c <strcmp>:
    995c:	2144b03a 	or	r2,r4,r5
    9960:	108000cc 	andi	r2,r2,3
    9964:	1000171e 	bne	r2,zero,99c4 <strcmp+0x68>
    9968:	20800017 	ldw	r2,0(r4)
    996c:	28c00017 	ldw	r3,0(r5)
    9970:	10c0141e 	bne	r2,r3,99c4 <strcmp+0x68>
    9974:	027fbff4 	movhi	r9,65279
    9978:	4a7fbfc4 	addi	r9,r9,-257
    997c:	0086303a 	nor	r3,zero,r2
    9980:	02202074 	movhi	r8,32897
    9984:	1245883a 	add	r2,r2,r9
    9988:	42202004 	addi	r8,r8,-32640
    998c:	10c4703a 	and	r2,r2,r3
    9990:	1204703a 	and	r2,r2,r8
    9994:	10000226 	beq	r2,zero,99a0 <strcmp+0x44>
    9998:	00002306 	br	9a28 <strcmp+0xcc>
    999c:	1000221e 	bne	r2,zero,9a28 <strcmp+0xcc>
    99a0:	21000104 	addi	r4,r4,4
    99a4:	20c00017 	ldw	r3,0(r4)
    99a8:	29400104 	addi	r5,r5,4
    99ac:	29800017 	ldw	r6,0(r5)
    99b0:	1a4f883a 	add	r7,r3,r9
    99b4:	00c4303a 	nor	r2,zero,r3
    99b8:	3884703a 	and	r2,r7,r2
    99bc:	1204703a 	and	r2,r2,r8
    99c0:	19bff626 	beq	r3,r6,999c <__alt_data_end+0xff00999c>
    99c4:	20800003 	ldbu	r2,0(r4)
    99c8:	10c03fcc 	andi	r3,r2,255
    99cc:	18c0201c 	xori	r3,r3,128
    99d0:	18ffe004 	addi	r3,r3,-128
    99d4:	18000c26 	beq	r3,zero,9a08 <strcmp+0xac>
    99d8:	29800007 	ldb	r6,0(r5)
    99dc:	19800326 	beq	r3,r6,99ec <strcmp+0x90>
    99e0:	00001306 	br	9a30 <strcmp+0xd4>
    99e4:	29800007 	ldb	r6,0(r5)
    99e8:	11800b1e 	bne	r2,r6,9a18 <strcmp+0xbc>
    99ec:	21000044 	addi	r4,r4,1
    99f0:	20c00003 	ldbu	r3,0(r4)
    99f4:	29400044 	addi	r5,r5,1
    99f8:	18803fcc 	andi	r2,r3,255
    99fc:	1080201c 	xori	r2,r2,128
    9a00:	10bfe004 	addi	r2,r2,-128
    9a04:	103ff71e 	bne	r2,zero,99e4 <__alt_data_end+0xff0099e4>
    9a08:	0007883a 	mov	r3,zero
    9a0c:	28800003 	ldbu	r2,0(r5)
    9a10:	1885c83a 	sub	r2,r3,r2
    9a14:	f800283a 	ret
    9a18:	28800003 	ldbu	r2,0(r5)
    9a1c:	18c03fcc 	andi	r3,r3,255
    9a20:	1885c83a 	sub	r2,r3,r2
    9a24:	f800283a 	ret
    9a28:	0005883a 	mov	r2,zero
    9a2c:	f800283a 	ret
    9a30:	10c03fcc 	andi	r3,r2,255
    9a34:	003ff506 	br	9a0c <__alt_data_end+0xff009a0c>

00009a38 <__sprint_r.part.0>:
    9a38:	28801917 	ldw	r2,100(r5)
    9a3c:	defff604 	addi	sp,sp,-40
    9a40:	dd400515 	stw	r21,20(sp)
    9a44:	dfc00915 	stw	ra,36(sp)
    9a48:	df000815 	stw	fp,32(sp)
    9a4c:	ddc00715 	stw	r23,28(sp)
    9a50:	dd800615 	stw	r22,24(sp)
    9a54:	dd000415 	stw	r20,16(sp)
    9a58:	dcc00315 	stw	r19,12(sp)
    9a5c:	dc800215 	stw	r18,8(sp)
    9a60:	dc400115 	stw	r17,4(sp)
    9a64:	dc000015 	stw	r16,0(sp)
    9a68:	1088000c 	andi	r2,r2,8192
    9a6c:	302b883a 	mov	r21,r6
    9a70:	10002e26 	beq	r2,zero,9b2c <__sprint_r.part.0+0xf4>
    9a74:	30800217 	ldw	r2,8(r6)
    9a78:	35800017 	ldw	r22,0(r6)
    9a7c:	10002926 	beq	r2,zero,9b24 <__sprint_r.part.0+0xec>
    9a80:	2827883a 	mov	r19,r5
    9a84:	2029883a 	mov	r20,r4
    9a88:	b5c00104 	addi	r23,r22,4
    9a8c:	04bfffc4 	movi	r18,-1
    9a90:	bc400017 	ldw	r17,0(r23)
    9a94:	b4000017 	ldw	r16,0(r22)
    9a98:	0039883a 	mov	fp,zero
    9a9c:	8822d0ba 	srli	r17,r17,2
    9aa0:	8800031e 	bne	r17,zero,9ab0 <__sprint_r.part.0+0x78>
    9aa4:	00001806 	br	9b08 <__sprint_r.part.0+0xd0>
    9aa8:	84000104 	addi	r16,r16,4
    9aac:	8f001526 	beq	r17,fp,9b04 <__sprint_r.part.0+0xcc>
    9ab0:	81400017 	ldw	r5,0(r16)
    9ab4:	980d883a 	mov	r6,r19
    9ab8:	a009883a 	mov	r4,r20
    9abc:	000b4600 	call	b460 <_fputwc_r>
    9ac0:	e7000044 	addi	fp,fp,1
    9ac4:	14bff81e 	bne	r2,r18,9aa8 <__alt_data_end+0xff009aa8>
    9ac8:	9005883a 	mov	r2,r18
    9acc:	a8000215 	stw	zero,8(r21)
    9ad0:	a8000115 	stw	zero,4(r21)
    9ad4:	dfc00917 	ldw	ra,36(sp)
    9ad8:	df000817 	ldw	fp,32(sp)
    9adc:	ddc00717 	ldw	r23,28(sp)
    9ae0:	dd800617 	ldw	r22,24(sp)
    9ae4:	dd400517 	ldw	r21,20(sp)
    9ae8:	dd000417 	ldw	r20,16(sp)
    9aec:	dcc00317 	ldw	r19,12(sp)
    9af0:	dc800217 	ldw	r18,8(sp)
    9af4:	dc400117 	ldw	r17,4(sp)
    9af8:	dc000017 	ldw	r16,0(sp)
    9afc:	dec00a04 	addi	sp,sp,40
    9b00:	f800283a 	ret
    9b04:	a8800217 	ldw	r2,8(r21)
    9b08:	8c63883a 	add	r17,r17,r17
    9b0c:	8c63883a 	add	r17,r17,r17
    9b10:	1445c83a 	sub	r2,r2,r17
    9b14:	a8800215 	stw	r2,8(r21)
    9b18:	b5800204 	addi	r22,r22,8
    9b1c:	bdc00204 	addi	r23,r23,8
    9b20:	103fdb1e 	bne	r2,zero,9a90 <__alt_data_end+0xff009a90>
    9b24:	0005883a 	mov	r2,zero
    9b28:	003fe806 	br	9acc <__alt_data_end+0xff009acc>
    9b2c:	00074c00 	call	74c0 <__sfvwrite_r>
    9b30:	003fe606 	br	9acc <__alt_data_end+0xff009acc>

00009b34 <__sprint_r>:
    9b34:	30c00217 	ldw	r3,8(r6)
    9b38:	18000126 	beq	r3,zero,9b40 <__sprint_r+0xc>
    9b3c:	0009a381 	jmpi	9a38 <__sprint_r.part.0>
    9b40:	30000115 	stw	zero,4(r6)
    9b44:	0005883a 	mov	r2,zero
    9b48:	f800283a 	ret

00009b4c <___vfiprintf_internal_r>:
    9b4c:	deffc904 	addi	sp,sp,-220
    9b50:	df003515 	stw	fp,212(sp)
    9b54:	dd003115 	stw	r20,196(sp)
    9b58:	dfc03615 	stw	ra,216(sp)
    9b5c:	ddc03415 	stw	r23,208(sp)
    9b60:	dd803315 	stw	r22,204(sp)
    9b64:	dd403215 	stw	r21,200(sp)
    9b68:	dcc03015 	stw	r19,192(sp)
    9b6c:	dc802f15 	stw	r18,188(sp)
    9b70:	dc402e15 	stw	r17,184(sp)
    9b74:	dc002d15 	stw	r16,180(sp)
    9b78:	d9002015 	stw	r4,128(sp)
    9b7c:	d9c02215 	stw	r7,136(sp)
    9b80:	2829883a 	mov	r20,r5
    9b84:	3039883a 	mov	fp,r6
    9b88:	20000226 	beq	r4,zero,9b94 <___vfiprintf_internal_r+0x48>
    9b8c:	20800e17 	ldw	r2,56(r4)
    9b90:	1000cf26 	beq	r2,zero,9ed0 <___vfiprintf_internal_r+0x384>
    9b94:	a080030b 	ldhu	r2,12(r20)
    9b98:	10c8000c 	andi	r3,r2,8192
    9b9c:	1800061e 	bne	r3,zero,9bb8 <___vfiprintf_internal_r+0x6c>
    9ba0:	a1001917 	ldw	r4,100(r20)
    9ba4:	00f7ffc4 	movi	r3,-8193
    9ba8:	10880014 	ori	r2,r2,8192
    9bac:	20c6703a 	and	r3,r4,r3
    9bb0:	a080030d 	sth	r2,12(r20)
    9bb4:	a0c01915 	stw	r3,100(r20)
    9bb8:	10c0020c 	andi	r3,r2,8
    9bbc:	1800a926 	beq	r3,zero,9e64 <___vfiprintf_internal_r+0x318>
    9bc0:	a0c00417 	ldw	r3,16(r20)
    9bc4:	1800a726 	beq	r3,zero,9e64 <___vfiprintf_internal_r+0x318>
    9bc8:	1080068c 	andi	r2,r2,26
    9bcc:	00c00284 	movi	r3,10
    9bd0:	10c0ac26 	beq	r2,r3,9e84 <___vfiprintf_internal_r+0x338>
    9bd4:	da801a04 	addi	r10,sp,104
    9bd8:	da801e15 	stw	r10,120(sp)
    9bdc:	d8801e17 	ldw	r2,120(sp)
    9be0:	da8019c4 	addi	r10,sp,103
    9be4:	05800074 	movhi	r22,1
    9be8:	05c00074 	movhi	r23,1
    9bec:	da801f15 	stw	r10,124(sp)
    9bf0:	1295c83a 	sub	r10,r2,r10
    9bf4:	b5875004 	addi	r22,r22,7488
    9bf8:	bdc74c04 	addi	r23,r23,7472
    9bfc:	dec01a15 	stw	sp,104(sp)
    9c00:	d8001c15 	stw	zero,112(sp)
    9c04:	d8001b15 	stw	zero,108(sp)
    9c08:	d8002615 	stw	zero,152(sp)
    9c0c:	d8002315 	stw	zero,140(sp)
    9c10:	da802715 	stw	r10,156(sp)
    9c14:	d811883a 	mov	r8,sp
    9c18:	dd002115 	stw	r20,132(sp)
    9c1c:	e021883a 	mov	r16,fp
    9c20:	80800007 	ldb	r2,0(r16)
    9c24:	1003ea26 	beq	r2,zero,abd0 <___vfiprintf_internal_r+0x1084>
    9c28:	00c00944 	movi	r3,37
    9c2c:	8025883a 	mov	r18,r16
    9c30:	10c0021e 	bne	r2,r3,9c3c <___vfiprintf_internal_r+0xf0>
    9c34:	00001606 	br	9c90 <___vfiprintf_internal_r+0x144>
    9c38:	10c00326 	beq	r2,r3,9c48 <___vfiprintf_internal_r+0xfc>
    9c3c:	94800044 	addi	r18,r18,1
    9c40:	90800007 	ldb	r2,0(r18)
    9c44:	103ffc1e 	bne	r2,zero,9c38 <__alt_data_end+0xff009c38>
    9c48:	9423c83a 	sub	r17,r18,r16
    9c4c:	88001026 	beq	r17,zero,9c90 <___vfiprintf_internal_r+0x144>
    9c50:	d8c01c17 	ldw	r3,112(sp)
    9c54:	d8801b17 	ldw	r2,108(sp)
    9c58:	44000015 	stw	r16,0(r8)
    9c5c:	88c7883a 	add	r3,r17,r3
    9c60:	10800044 	addi	r2,r2,1
    9c64:	44400115 	stw	r17,4(r8)
    9c68:	d8c01c15 	stw	r3,112(sp)
    9c6c:	d8801b15 	stw	r2,108(sp)
    9c70:	010001c4 	movi	r4,7
    9c74:	2080760e 	bge	r4,r2,9e50 <___vfiprintf_internal_r+0x304>
    9c78:	1803821e 	bne	r3,zero,aa84 <___vfiprintf_internal_r+0xf38>
    9c7c:	da802317 	ldw	r10,140(sp)
    9c80:	d8001b15 	stw	zero,108(sp)
    9c84:	d811883a 	mov	r8,sp
    9c88:	5455883a 	add	r10,r10,r17
    9c8c:	da802315 	stw	r10,140(sp)
    9c90:	90800007 	ldb	r2,0(r18)
    9c94:	10044626 	beq	r2,zero,adb0 <___vfiprintf_internal_r+0x1264>
    9c98:	90c00047 	ldb	r3,1(r18)
    9c9c:	94000044 	addi	r16,r18,1
    9ca0:	d8001d85 	stb	zero,118(sp)
    9ca4:	0009883a 	mov	r4,zero
    9ca8:	000f883a 	mov	r7,zero
    9cac:	027fffc4 	movi	r9,-1
    9cb0:	0023883a 	mov	r17,zero
    9cb4:	0029883a 	mov	r20,zero
    9cb8:	01401604 	movi	r5,88
    9cbc:	01800244 	movi	r6,9
    9cc0:	03400a84 	movi	r13,42
    9cc4:	03001b04 	movi	r12,108
    9cc8:	84000044 	addi	r16,r16,1
    9ccc:	18bff804 	addi	r2,r3,-32
    9cd0:	28827336 	bltu	r5,r2,a6a0 <___vfiprintf_internal_r+0xb54>
    9cd4:	100490ba 	slli	r2,r2,2
    9cd8:	02800074 	movhi	r10,1
    9cdc:	52a73b04 	addi	r10,r10,-25364
    9ce0:	1285883a 	add	r2,r2,r10
    9ce4:	10800017 	ldw	r2,0(r2)
    9ce8:	1000683a 	jmp	r2
    9cec:	0000a3d4 	movui	zero,655
    9cf0:	0000a6a0 	cmpeqi	zero,zero,666
    9cf4:	0000a6a0 	cmpeqi	zero,zero,666
    9cf8:	0000a3f4 	movhi	zero,655
    9cfc:	0000a6a0 	cmpeqi	zero,zero,666
    9d00:	0000a6a0 	cmpeqi	zero,zero,666
    9d04:	0000a6a0 	cmpeqi	zero,zero,666
    9d08:	0000a6a0 	cmpeqi	zero,zero,666
    9d0c:	0000a6a0 	cmpeqi	zero,zero,666
    9d10:	0000a6a0 	cmpeqi	zero,zero,666
    9d14:	0000a5dc 	xori	zero,zero,663
    9d18:	0000a5f8 	rdprs	zero,zero,663
    9d1c:	0000a6a0 	cmpeqi	zero,zero,666
    9d20:	00009ee0 	cmpeqi	zero,zero,635
    9d24:	0000a608 	cmpgei	zero,zero,664
    9d28:	0000a6a0 	cmpeqi	zero,zero,666
    9d2c:	0000a400 	call	a40 <new_image_available+0x14>
    9d30:	0000a40c 	andi	zero,zero,656
    9d34:	0000a40c 	andi	zero,zero,656
    9d38:	0000a40c 	andi	zero,zero,656
    9d3c:	0000a40c 	andi	zero,zero,656
    9d40:	0000a40c 	andi	zero,zero,656
    9d44:	0000a40c 	andi	zero,zero,656
    9d48:	0000a40c 	andi	zero,zero,656
    9d4c:	0000a40c 	andi	zero,zero,656
    9d50:	0000a40c 	andi	zero,zero,656
    9d54:	0000a6a0 	cmpeqi	zero,zero,666
    9d58:	0000a6a0 	cmpeqi	zero,zero,666
    9d5c:	0000a6a0 	cmpeqi	zero,zero,666
    9d60:	0000a6a0 	cmpeqi	zero,zero,666
    9d64:	0000a6a0 	cmpeqi	zero,zero,666
    9d68:	0000a6a0 	cmpeqi	zero,zero,666
    9d6c:	0000a6a0 	cmpeqi	zero,zero,666
    9d70:	0000a6a0 	cmpeqi	zero,zero,666
    9d74:	0000a6a0 	cmpeqi	zero,zero,666
    9d78:	0000a6a0 	cmpeqi	zero,zero,666
    9d7c:	0000a438 	rdprs	zero,zero,656
    9d80:	0000a6a0 	cmpeqi	zero,zero,666
    9d84:	0000a6a0 	cmpeqi	zero,zero,666
    9d88:	0000a6a0 	cmpeqi	zero,zero,666
    9d8c:	0000a6a0 	cmpeqi	zero,zero,666
    9d90:	0000a6a0 	cmpeqi	zero,zero,666
    9d94:	0000a6a0 	cmpeqi	zero,zero,666
    9d98:	0000a6a0 	cmpeqi	zero,zero,666
    9d9c:	0000a6a0 	cmpeqi	zero,zero,666
    9da0:	0000a6a0 	cmpeqi	zero,zero,666
    9da4:	0000a6a0 	cmpeqi	zero,zero,666
    9da8:	0000a470 	cmpltui	zero,zero,657
    9dac:	0000a6a0 	cmpeqi	zero,zero,666
    9db0:	0000a6a0 	cmpeqi	zero,zero,666
    9db4:	0000a6a0 	cmpeqi	zero,zero,666
    9db8:	0000a6a0 	cmpeqi	zero,zero,666
    9dbc:	0000a6a0 	cmpeqi	zero,zero,666
    9dc0:	0000a4c8 	cmpgei	zero,zero,659
    9dc4:	0000a6a0 	cmpeqi	zero,zero,666
    9dc8:	0000a6a0 	cmpeqi	zero,zero,666
    9dcc:	0000a538 	rdprs	zero,zero,660
    9dd0:	0000a6a0 	cmpeqi	zero,zero,666
    9dd4:	0000a6a0 	cmpeqi	zero,zero,666
    9dd8:	0000a6a0 	cmpeqi	zero,zero,666
    9ddc:	0000a6a0 	cmpeqi	zero,zero,666
    9de0:	0000a6a0 	cmpeqi	zero,zero,666
    9de4:	0000a6a0 	cmpeqi	zero,zero,666
    9de8:	0000a6a0 	cmpeqi	zero,zero,666
    9dec:	0000a6a0 	cmpeqi	zero,zero,666
    9df0:	0000a6a0 	cmpeqi	zero,zero,666
    9df4:	0000a6a0 	cmpeqi	zero,zero,666
    9df8:	0000a2e4 	muli	zero,zero,651
    9dfc:	0000a310 	cmplti	zero,zero,652
    9e00:	0000a6a0 	cmpeqi	zero,zero,666
    9e04:	0000a6a0 	cmpeqi	zero,zero,666
    9e08:	0000a6a0 	cmpeqi	zero,zero,666
    9e0c:	0000a648 	cmpgei	zero,zero,665
    9e10:	0000a310 	cmplti	zero,zero,652
    9e14:	0000a6a0 	cmpeqi	zero,zero,666
    9e18:	0000a6a0 	cmpeqi	zero,zero,666
    9e1c:	0000a1a4 	muli	zero,zero,646
    9e20:	0000a6a0 	cmpeqi	zero,zero,666
    9e24:	0000a1b4 	movhi	zero,646
    9e28:	0000a1f0 	cmpltui	zero,zero,647
    9e2c:	00009eec 	andhi	zero,zero,635
    9e30:	0000a198 	cmpnei	zero,zero,646
    9e34:	0000a6a0 	cmpeqi	zero,zero,666
    9e38:	0000a574 	movhi	zero,661
    9e3c:	0000a6a0 	cmpeqi	zero,zero,666
    9e40:	0000a5cc 	andi	zero,zero,663
    9e44:	0000a6a0 	cmpeqi	zero,zero,666
    9e48:	0000a6a0 	cmpeqi	zero,zero,666
    9e4c:	0000a290 	cmplti	zero,zero,650
    9e50:	42000204 	addi	r8,r8,8
    9e54:	da802317 	ldw	r10,140(sp)
    9e58:	5455883a 	add	r10,r10,r17
    9e5c:	da802315 	stw	r10,140(sp)
    9e60:	003f8b06 	br	9c90 <__alt_data_end+0xff009c90>
    9e64:	d9002017 	ldw	r4,128(sp)
    9e68:	a00b883a 	mov	r5,r20
    9e6c:	00050680 	call	5068 <__swsetup_r>
    9e70:	1003b11e 	bne	r2,zero,ad38 <___vfiprintf_internal_r+0x11ec>
    9e74:	a080030b 	ldhu	r2,12(r20)
    9e78:	00c00284 	movi	r3,10
    9e7c:	1080068c 	andi	r2,r2,26
    9e80:	10ff541e 	bne	r2,r3,9bd4 <__alt_data_end+0xff009bd4>
    9e84:	a080038f 	ldh	r2,14(r20)
    9e88:	103f5216 	blt	r2,zero,9bd4 <__alt_data_end+0xff009bd4>
    9e8c:	d9c02217 	ldw	r7,136(sp)
    9e90:	d9002017 	ldw	r4,128(sp)
    9e94:	e00d883a 	mov	r6,fp
    9e98:	a00b883a 	mov	r5,r20
    9e9c:	000afc40 	call	afc4 <__sbprintf>
    9ea0:	dfc03617 	ldw	ra,216(sp)
    9ea4:	df003517 	ldw	fp,212(sp)
    9ea8:	ddc03417 	ldw	r23,208(sp)
    9eac:	dd803317 	ldw	r22,204(sp)
    9eb0:	dd403217 	ldw	r21,200(sp)
    9eb4:	dd003117 	ldw	r20,196(sp)
    9eb8:	dcc03017 	ldw	r19,192(sp)
    9ebc:	dc802f17 	ldw	r18,188(sp)
    9ec0:	dc402e17 	ldw	r17,184(sp)
    9ec4:	dc002d17 	ldw	r16,180(sp)
    9ec8:	dec03704 	addi	sp,sp,220
    9ecc:	f800283a 	ret
    9ed0:	000703c0 	call	703c <__sinit>
    9ed4:	003f2f06 	br	9b94 <__alt_data_end+0xff009b94>
    9ed8:	0463c83a 	sub	r17,zero,r17
    9edc:	d8802215 	stw	r2,136(sp)
    9ee0:	a5000114 	ori	r20,r20,4
    9ee4:	80c00007 	ldb	r3,0(r16)
    9ee8:	003f7706 	br	9cc8 <__alt_data_end+0xff009cc8>
    9eec:	00800c04 	movi	r2,48
    9ef0:	da802217 	ldw	r10,136(sp)
    9ef4:	d8801d05 	stb	r2,116(sp)
    9ef8:	00801e04 	movi	r2,120
    9efc:	d8801d45 	stb	r2,117(sp)
    9f00:	d8001d85 	stb	zero,118(sp)
    9f04:	50c00104 	addi	r3,r10,4
    9f08:	54800017 	ldw	r18,0(r10)
    9f0c:	0027883a 	mov	r19,zero
    9f10:	a0800094 	ori	r2,r20,2
    9f14:	48030b16 	blt	r9,zero,ab44 <___vfiprintf_internal_r+0xff8>
    9f18:	00bfdfc4 	movi	r2,-129
    9f1c:	a096703a 	and	r11,r20,r2
    9f20:	d8c02215 	stw	r3,136(sp)
    9f24:	5d000094 	ori	r20,r11,2
    9f28:	90032b1e 	bne	r18,zero,abd8 <___vfiprintf_internal_r+0x108c>
    9f2c:	00800074 	movhi	r2,1
    9f30:	1086eb04 	addi	r2,r2,7084
    9f34:	d8802615 	stw	r2,152(sp)
    9f38:	0039883a 	mov	fp,zero
    9f3c:	48017b1e 	bne	r9,zero,a52c <___vfiprintf_internal_r+0x9e0>
    9f40:	0013883a 	mov	r9,zero
    9f44:	0027883a 	mov	r19,zero
    9f48:	dd401a04 	addi	r21,sp,104
    9f4c:	4825883a 	mov	r18,r9
    9f50:	4cc0010e 	bge	r9,r19,9f58 <___vfiprintf_internal_r+0x40c>
    9f54:	9825883a 	mov	r18,r19
    9f58:	e7003fcc 	andi	fp,fp,255
    9f5c:	e700201c 	xori	fp,fp,128
    9f60:	e73fe004 	addi	fp,fp,-128
    9f64:	e0000126 	beq	fp,zero,9f6c <___vfiprintf_internal_r+0x420>
    9f68:	94800044 	addi	r18,r18,1
    9f6c:	a380008c 	andi	r14,r20,2
    9f70:	70000126 	beq	r14,zero,9f78 <___vfiprintf_internal_r+0x42c>
    9f74:	94800084 	addi	r18,r18,2
    9f78:	a700210c 	andi	fp,r20,132
    9f7c:	e001df1e 	bne	fp,zero,a6fc <___vfiprintf_internal_r+0xbb0>
    9f80:	8c87c83a 	sub	r3,r17,r18
    9f84:	00c1dd0e 	bge	zero,r3,a6fc <___vfiprintf_internal_r+0xbb0>
    9f88:	01c00404 	movi	r7,16
    9f8c:	d8801c17 	ldw	r2,112(sp)
    9f90:	38c3ad0e 	bge	r7,r3,ae48 <___vfiprintf_internal_r+0x12fc>
    9f94:	02800074 	movhi	r10,1
    9f98:	52875004 	addi	r10,r10,7488
    9f9c:	dc002915 	stw	r16,164(sp)
    9fa0:	d9801b17 	ldw	r6,108(sp)
    9fa4:	da802415 	stw	r10,144(sp)
    9fa8:	03c001c4 	movi	r15,7
    9fac:	da402515 	stw	r9,148(sp)
    9fb0:	db802815 	stw	r14,160(sp)
    9fb4:	1821883a 	mov	r16,r3
    9fb8:	00000506 	br	9fd0 <___vfiprintf_internal_r+0x484>
    9fbc:	31400084 	addi	r5,r6,2
    9fc0:	42000204 	addi	r8,r8,8
    9fc4:	200d883a 	mov	r6,r4
    9fc8:	843ffc04 	addi	r16,r16,-16
    9fcc:	3c000d0e 	bge	r7,r16,a004 <___vfiprintf_internal_r+0x4b8>
    9fd0:	10800404 	addi	r2,r2,16
    9fd4:	31000044 	addi	r4,r6,1
    9fd8:	45800015 	stw	r22,0(r8)
    9fdc:	41c00115 	stw	r7,4(r8)
    9fe0:	d8801c15 	stw	r2,112(sp)
    9fe4:	d9001b15 	stw	r4,108(sp)
    9fe8:	793ff40e 	bge	r15,r4,9fbc <__alt_data_end+0xff009fbc>
    9fec:	1001b51e 	bne	r2,zero,a6c4 <___vfiprintf_internal_r+0xb78>
    9ff0:	843ffc04 	addi	r16,r16,-16
    9ff4:	000d883a 	mov	r6,zero
    9ff8:	01400044 	movi	r5,1
    9ffc:	d811883a 	mov	r8,sp
    a000:	3c3ff316 	blt	r7,r16,9fd0 <__alt_data_end+0xff009fd0>
    a004:	8007883a 	mov	r3,r16
    a008:	da402517 	ldw	r9,148(sp)
    a00c:	db802817 	ldw	r14,160(sp)
    a010:	dc002917 	ldw	r16,164(sp)
    a014:	da802417 	ldw	r10,144(sp)
    a018:	1885883a 	add	r2,r3,r2
    a01c:	40c00115 	stw	r3,4(r8)
    a020:	42800015 	stw	r10,0(r8)
    a024:	d8801c15 	stw	r2,112(sp)
    a028:	d9401b15 	stw	r5,108(sp)
    a02c:	00c001c4 	movi	r3,7
    a030:	19426016 	blt	r3,r5,a9b4 <___vfiprintf_internal_r+0xe68>
    a034:	d8c01d87 	ldb	r3,118(sp)
    a038:	42000204 	addi	r8,r8,8
    a03c:	29000044 	addi	r4,r5,1
    a040:	1801b31e 	bne	r3,zero,a710 <___vfiprintf_internal_r+0xbc4>
    a044:	7001c026 	beq	r14,zero,a748 <___vfiprintf_internal_r+0xbfc>
    a048:	d8c01d04 	addi	r3,sp,116
    a04c:	10800084 	addi	r2,r2,2
    a050:	40c00015 	stw	r3,0(r8)
    a054:	00c00084 	movi	r3,2
    a058:	40c00115 	stw	r3,4(r8)
    a05c:	d8801c15 	stw	r2,112(sp)
    a060:	d9001b15 	stw	r4,108(sp)
    a064:	00c001c4 	movi	r3,7
    a068:	1902650e 	bge	r3,r4,aa00 <___vfiprintf_internal_r+0xeb4>
    a06c:	10029a1e 	bne	r2,zero,aad8 <___vfiprintf_internal_r+0xf8c>
    a070:	00c02004 	movi	r3,128
    a074:	01000044 	movi	r4,1
    a078:	000b883a 	mov	r5,zero
    a07c:	d811883a 	mov	r8,sp
    a080:	e0c1b31e 	bne	fp,r3,a750 <___vfiprintf_internal_r+0xc04>
    a084:	8cb9c83a 	sub	fp,r17,r18
    a088:	0701b10e 	bge	zero,fp,a750 <___vfiprintf_internal_r+0xc04>
    a08c:	01c00404 	movi	r7,16
    a090:	3f03890e 	bge	r7,fp,aeb8 <___vfiprintf_internal_r+0x136c>
    a094:	00c00074 	movhi	r3,1
    a098:	18c74c04 	addi	r3,r3,7472
    a09c:	d8c02415 	stw	r3,144(sp)
    a0a0:	8007883a 	mov	r3,r16
    a0a4:	034001c4 	movi	r13,7
    a0a8:	e021883a 	mov	r16,fp
    a0ac:	da402515 	stw	r9,148(sp)
    a0b0:	1839883a 	mov	fp,r3
    a0b4:	00000506 	br	a0cc <___vfiprintf_internal_r+0x580>
    a0b8:	29800084 	addi	r6,r5,2
    a0bc:	42000204 	addi	r8,r8,8
    a0c0:	180b883a 	mov	r5,r3
    a0c4:	843ffc04 	addi	r16,r16,-16
    a0c8:	3c000d0e 	bge	r7,r16,a100 <___vfiprintf_internal_r+0x5b4>
    a0cc:	10800404 	addi	r2,r2,16
    a0d0:	28c00044 	addi	r3,r5,1
    a0d4:	45c00015 	stw	r23,0(r8)
    a0d8:	41c00115 	stw	r7,4(r8)
    a0dc:	d8801c15 	stw	r2,112(sp)
    a0e0:	d8c01b15 	stw	r3,108(sp)
    a0e4:	68fff40e 	bge	r13,r3,a0b8 <__alt_data_end+0xff00a0b8>
    a0e8:	1002241e 	bne	r2,zero,a97c <___vfiprintf_internal_r+0xe30>
    a0ec:	843ffc04 	addi	r16,r16,-16
    a0f0:	01800044 	movi	r6,1
    a0f4:	000b883a 	mov	r5,zero
    a0f8:	d811883a 	mov	r8,sp
    a0fc:	3c3ff316 	blt	r7,r16,a0cc <__alt_data_end+0xff00a0cc>
    a100:	da402517 	ldw	r9,148(sp)
    a104:	e007883a 	mov	r3,fp
    a108:	8039883a 	mov	fp,r16
    a10c:	1821883a 	mov	r16,r3
    a110:	d8c02417 	ldw	r3,144(sp)
    a114:	1705883a 	add	r2,r2,fp
    a118:	47000115 	stw	fp,4(r8)
    a11c:	40c00015 	stw	r3,0(r8)
    a120:	d8801c15 	stw	r2,112(sp)
    a124:	d9801b15 	stw	r6,108(sp)
    a128:	00c001c4 	movi	r3,7
    a12c:	19827616 	blt	r3,r6,ab08 <___vfiprintf_internal_r+0xfbc>
    a130:	4cf9c83a 	sub	fp,r9,r19
    a134:	42000204 	addi	r8,r8,8
    a138:	31000044 	addi	r4,r6,1
    a13c:	300b883a 	mov	r5,r6
    a140:	07018516 	blt	zero,fp,a758 <___vfiprintf_internal_r+0xc0c>
    a144:	9885883a 	add	r2,r19,r2
    a148:	45400015 	stw	r21,0(r8)
    a14c:	44c00115 	stw	r19,4(r8)
    a150:	d8801c15 	stw	r2,112(sp)
    a154:	d9001b15 	stw	r4,108(sp)
    a158:	00c001c4 	movi	r3,7
    a15c:	1901dd0e 	bge	r3,r4,a8d4 <___vfiprintf_internal_r+0xd88>
    a160:	1002401e 	bne	r2,zero,aa64 <___vfiprintf_internal_r+0xf18>
    a164:	d8001b15 	stw	zero,108(sp)
    a168:	a2c0010c 	andi	r11,r20,4
    a16c:	58000226 	beq	r11,zero,a178 <___vfiprintf_internal_r+0x62c>
    a170:	8ca7c83a 	sub	r19,r17,r18
    a174:	04c2f216 	blt	zero,r19,ad40 <___vfiprintf_internal_r+0x11f4>
    a178:	8c80010e 	bge	r17,r18,a180 <___vfiprintf_internal_r+0x634>
    a17c:	9023883a 	mov	r17,r18
    a180:	da802317 	ldw	r10,140(sp)
    a184:	5455883a 	add	r10,r10,r17
    a188:	da802315 	stw	r10,140(sp)
    a18c:	d8001b15 	stw	zero,108(sp)
    a190:	d811883a 	mov	r8,sp
    a194:	003ea206 	br	9c20 <__alt_data_end+0xff009c20>
    a198:	a5000814 	ori	r20,r20,32
    a19c:	80c00007 	ldb	r3,0(r16)
    a1a0:	003ec906 	br	9cc8 <__alt_data_end+0xff009cc8>
    a1a4:	80c00007 	ldb	r3,0(r16)
    a1a8:	1b030926 	beq	r3,r12,add0 <___vfiprintf_internal_r+0x1284>
    a1ac:	a5000414 	ori	r20,r20,16
    a1b0:	003ec506 	br	9cc8 <__alt_data_end+0xff009cc8>
    a1b4:	21003fcc 	andi	r4,r4,255
    a1b8:	20035e1e 	bne	r4,zero,af34 <___vfiprintf_internal_r+0x13e8>
    a1bc:	a080080c 	andi	r2,r20,32
    a1c0:	1002a526 	beq	r2,zero,ac58 <___vfiprintf_internal_r+0x110c>
    a1c4:	da802217 	ldw	r10,136(sp)
    a1c8:	50800017 	ldw	r2,0(r10)
    a1cc:	da802317 	ldw	r10,140(sp)
    a1d0:	5007d7fa 	srai	r3,r10,31
    a1d4:	da802217 	ldw	r10,136(sp)
    a1d8:	10c00115 	stw	r3,4(r2)
    a1dc:	52800104 	addi	r10,r10,4
    a1e0:	da802215 	stw	r10,136(sp)
    a1e4:	da802317 	ldw	r10,140(sp)
    a1e8:	12800015 	stw	r10,0(r2)
    a1ec:	003e8c06 	br	9c20 <__alt_data_end+0xff009c20>
    a1f0:	21003fcc 	andi	r4,r4,255
    a1f4:	2003511e 	bne	r4,zero,af3c <___vfiprintf_internal_r+0x13f0>
    a1f8:	a080080c 	andi	r2,r20,32
    a1fc:	1000a126 	beq	r2,zero,a484 <___vfiprintf_internal_r+0x938>
    a200:	da802217 	ldw	r10,136(sp)
    a204:	d8001d85 	stb	zero,118(sp)
    a208:	50800204 	addi	r2,r10,8
    a20c:	54800017 	ldw	r18,0(r10)
    a210:	54c00117 	ldw	r19,4(r10)
    a214:	4802b416 	blt	r9,zero,ace8 <___vfiprintf_internal_r+0x119c>
    a218:	013fdfc4 	movi	r4,-129
    a21c:	94c6b03a 	or	r3,r18,r19
    a220:	d8802215 	stw	r2,136(sp)
    a224:	a128703a 	and	r20,r20,r4
    a228:	1800a226 	beq	r3,zero,a4b4 <___vfiprintf_internal_r+0x968>
    a22c:	0039883a 	mov	fp,zero
    a230:	dd401a04 	addi	r21,sp,104
    a234:	9006d0fa 	srli	r3,r18,3
    a238:	9808977a 	slli	r4,r19,29
    a23c:	9826d0fa 	srli	r19,r19,3
    a240:	948001cc 	andi	r18,r18,7
    a244:	90800c04 	addi	r2,r18,48
    a248:	ad7fffc4 	addi	r21,r21,-1
    a24c:	20e4b03a 	or	r18,r4,r3
    a250:	a8800005 	stb	r2,0(r21)
    a254:	94c6b03a 	or	r3,r18,r19
    a258:	183ff61e 	bne	r3,zero,a234 <__alt_data_end+0xff00a234>
    a25c:	a0c0004c 	andi	r3,r20,1
    a260:	18005926 	beq	r3,zero,a3c8 <___vfiprintf_internal_r+0x87c>
    a264:	10803fcc 	andi	r2,r2,255
    a268:	1080201c 	xori	r2,r2,128
    a26c:	10bfe004 	addi	r2,r2,-128
    a270:	00c00c04 	movi	r3,48
    a274:	10c05426 	beq	r2,r3,a3c8 <___vfiprintf_internal_r+0x87c>
    a278:	da801e17 	ldw	r10,120(sp)
    a27c:	a8bfffc4 	addi	r2,r21,-1
    a280:	a8ffffc5 	stb	r3,-1(r21)
    a284:	50a7c83a 	sub	r19,r10,r2
    a288:	102b883a 	mov	r21,r2
    a28c:	003f2f06 	br	9f4c <__alt_data_end+0xff009f4c>
    a290:	21003fcc 	andi	r4,r4,255
    a294:	2003421e 	bne	r4,zero,afa0 <___vfiprintf_internal_r+0x1454>
    a298:	00800074 	movhi	r2,1
    a29c:	1086eb04 	addi	r2,r2,7084
    a2a0:	d8802615 	stw	r2,152(sp)
    a2a4:	a080080c 	andi	r2,r20,32
    a2a8:	1000aa26 	beq	r2,zero,a554 <___vfiprintf_internal_r+0xa08>
    a2ac:	da802217 	ldw	r10,136(sp)
    a2b0:	54800017 	ldw	r18,0(r10)
    a2b4:	54c00117 	ldw	r19,4(r10)
    a2b8:	52800204 	addi	r10,r10,8
    a2bc:	da802215 	stw	r10,136(sp)
    a2c0:	a080004c 	andi	r2,r20,1
    a2c4:	1001d226 	beq	r2,zero,aa10 <___vfiprintf_internal_r+0xec4>
    a2c8:	94c4b03a 	or	r2,r18,r19
    a2cc:	1002351e 	bne	r2,zero,aba4 <___vfiprintf_internal_r+0x1058>
    a2d0:	d8001d85 	stb	zero,118(sp)
    a2d4:	48022216 	blt	r9,zero,ab60 <___vfiprintf_internal_r+0x1014>
    a2d8:	00bfdfc4 	movi	r2,-129
    a2dc:	a0a8703a 	and	r20,r20,r2
    a2e0:	003f1506 	br	9f38 <__alt_data_end+0xff009f38>
    a2e4:	da802217 	ldw	r10,136(sp)
    a2e8:	04800044 	movi	r18,1
    a2ec:	d8001d85 	stb	zero,118(sp)
    a2f0:	50800017 	ldw	r2,0(r10)
    a2f4:	52800104 	addi	r10,r10,4
    a2f8:	da802215 	stw	r10,136(sp)
    a2fc:	d8801005 	stb	r2,64(sp)
    a300:	9027883a 	mov	r19,r18
    a304:	dd401004 	addi	r21,sp,64
    a308:	0013883a 	mov	r9,zero
    a30c:	003f1706 	br	9f6c <__alt_data_end+0xff009f6c>
    a310:	21003fcc 	andi	r4,r4,255
    a314:	2003201e 	bne	r4,zero,af98 <___vfiprintf_internal_r+0x144c>
    a318:	a080080c 	andi	r2,r20,32
    a31c:	10004b26 	beq	r2,zero,a44c <___vfiprintf_internal_r+0x900>
    a320:	da802217 	ldw	r10,136(sp)
    a324:	50800117 	ldw	r2,4(r10)
    a328:	54800017 	ldw	r18,0(r10)
    a32c:	52800204 	addi	r10,r10,8
    a330:	da802215 	stw	r10,136(sp)
    a334:	1027883a 	mov	r19,r2
    a338:	10022c16 	blt	r2,zero,abec <___vfiprintf_internal_r+0x10a0>
    a33c:	df001d83 	ldbu	fp,118(sp)
    a340:	48007216 	blt	r9,zero,a50c <___vfiprintf_internal_r+0x9c0>
    a344:	00ffdfc4 	movi	r3,-129
    a348:	94c4b03a 	or	r2,r18,r19
    a34c:	a0e8703a 	and	r20,r20,r3
    a350:	1000cc26 	beq	r2,zero,a684 <___vfiprintf_internal_r+0xb38>
    a354:	98021026 	beq	r19,zero,ab98 <___vfiprintf_internal_r+0x104c>
    a358:	dc402415 	stw	r17,144(sp)
    a35c:	dc002515 	stw	r16,148(sp)
    a360:	9823883a 	mov	r17,r19
    a364:	9021883a 	mov	r16,r18
    a368:	dd401a04 	addi	r21,sp,104
    a36c:	4825883a 	mov	r18,r9
    a370:	4027883a 	mov	r19,r8
    a374:	8009883a 	mov	r4,r16
    a378:	880b883a 	mov	r5,r17
    a37c:	01800284 	movi	r6,10
    a380:	000f883a 	mov	r7,zero
    a384:	000bf2c0 	call	bf2c <__umoddi3>
    a388:	10800c04 	addi	r2,r2,48
    a38c:	ad7fffc4 	addi	r21,r21,-1
    a390:	8009883a 	mov	r4,r16
    a394:	880b883a 	mov	r5,r17
    a398:	a8800005 	stb	r2,0(r21)
    a39c:	01800284 	movi	r6,10
    a3a0:	000f883a 	mov	r7,zero
    a3a4:	000b9b40 	call	b9b4 <__udivdi3>
    a3a8:	1021883a 	mov	r16,r2
    a3ac:	10c4b03a 	or	r2,r2,r3
    a3b0:	1823883a 	mov	r17,r3
    a3b4:	103fef1e 	bne	r2,zero,a374 <__alt_data_end+0xff00a374>
    a3b8:	dc402417 	ldw	r17,144(sp)
    a3bc:	dc002517 	ldw	r16,148(sp)
    a3c0:	9013883a 	mov	r9,r18
    a3c4:	9811883a 	mov	r8,r19
    a3c8:	da801e17 	ldw	r10,120(sp)
    a3cc:	5567c83a 	sub	r19,r10,r21
    a3d0:	003ede06 	br	9f4c <__alt_data_end+0xff009f4c>
    a3d4:	38803fcc 	andi	r2,r7,255
    a3d8:	1080201c 	xori	r2,r2,128
    a3dc:	10bfe004 	addi	r2,r2,-128
    a3e0:	1002371e 	bne	r2,zero,acc0 <___vfiprintf_internal_r+0x1174>
    a3e4:	01000044 	movi	r4,1
    a3e8:	01c00804 	movi	r7,32
    a3ec:	80c00007 	ldb	r3,0(r16)
    a3f0:	003e3506 	br	9cc8 <__alt_data_end+0xff009cc8>
    a3f4:	a5000054 	ori	r20,r20,1
    a3f8:	80c00007 	ldb	r3,0(r16)
    a3fc:	003e3206 	br	9cc8 <__alt_data_end+0xff009cc8>
    a400:	a5002014 	ori	r20,r20,128
    a404:	80c00007 	ldb	r3,0(r16)
    a408:	003e2f06 	br	9cc8 <__alt_data_end+0xff009cc8>
    a40c:	8015883a 	mov	r10,r16
    a410:	0023883a 	mov	r17,zero
    a414:	18bff404 	addi	r2,r3,-48
    a418:	50c00007 	ldb	r3,0(r10)
    a41c:	8c4002a4 	muli	r17,r17,10
    a420:	84000044 	addi	r16,r16,1
    a424:	8015883a 	mov	r10,r16
    a428:	1463883a 	add	r17,r2,r17
    a42c:	18bff404 	addi	r2,r3,-48
    a430:	30bff92e 	bgeu	r6,r2,a418 <__alt_data_end+0xff00a418>
    a434:	003e2506 	br	9ccc <__alt_data_end+0xff009ccc>
    a438:	21003fcc 	andi	r4,r4,255
    a43c:	2002d41e 	bne	r4,zero,af90 <___vfiprintf_internal_r+0x1444>
    a440:	a5000414 	ori	r20,r20,16
    a444:	a080080c 	andi	r2,r20,32
    a448:	103fb51e 	bne	r2,zero,a320 <__alt_data_end+0xff00a320>
    a44c:	a080040c 	andi	r2,r20,16
    a450:	1001f826 	beq	r2,zero,ac34 <___vfiprintf_internal_r+0x10e8>
    a454:	da802217 	ldw	r10,136(sp)
    a458:	54800017 	ldw	r18,0(r10)
    a45c:	52800104 	addi	r10,r10,4
    a460:	da802215 	stw	r10,136(sp)
    a464:	9027d7fa 	srai	r19,r18,31
    a468:	9805883a 	mov	r2,r19
    a46c:	003fb206 	br	a338 <__alt_data_end+0xff00a338>
    a470:	21003fcc 	andi	r4,r4,255
    a474:	2002c41e 	bne	r4,zero,af88 <___vfiprintf_internal_r+0x143c>
    a478:	a5000414 	ori	r20,r20,16
    a47c:	a080080c 	andi	r2,r20,32
    a480:	103f5f1e 	bne	r2,zero,a200 <__alt_data_end+0xff00a200>
    a484:	a080040c 	andi	r2,r20,16
    a488:	10020f26 	beq	r2,zero,acc8 <___vfiprintf_internal_r+0x117c>
    a48c:	da802217 	ldw	r10,136(sp)
    a490:	d8001d85 	stb	zero,118(sp)
    a494:	0027883a 	mov	r19,zero
    a498:	50800104 	addi	r2,r10,4
    a49c:	54800017 	ldw	r18,0(r10)
    a4a0:	48021116 	blt	r9,zero,ace8 <___vfiprintf_internal_r+0x119c>
    a4a4:	00ffdfc4 	movi	r3,-129
    a4a8:	d8802215 	stw	r2,136(sp)
    a4ac:	a0e8703a 	and	r20,r20,r3
    a4b0:	903f5e1e 	bne	r18,zero,a22c <__alt_data_end+0xff00a22c>
    a4b4:	0039883a 	mov	fp,zero
    a4b8:	4802a626 	beq	r9,zero,af54 <___vfiprintf_internal_r+0x1408>
    a4bc:	0025883a 	mov	r18,zero
    a4c0:	0027883a 	mov	r19,zero
    a4c4:	003f5a06 	br	a230 <__alt_data_end+0xff00a230>
    a4c8:	21003fcc 	andi	r4,r4,255
    a4cc:	20029f1e 	bne	r4,zero,af4c <___vfiprintf_internal_r+0x1400>
    a4d0:	a5000414 	ori	r20,r20,16
    a4d4:	a080080c 	andi	r2,r20,32
    a4d8:	10005e1e 	bne	r2,zero,a654 <___vfiprintf_internal_r+0xb08>
    a4dc:	a080040c 	andi	r2,r20,16
    a4e0:	1001a21e 	bne	r2,zero,ab6c <___vfiprintf_internal_r+0x1020>
    a4e4:	a080100c 	andi	r2,r20,64
    a4e8:	d8001d85 	stb	zero,118(sp)
    a4ec:	da802217 	ldw	r10,136(sp)
    a4f0:	1002231e 	bne	r2,zero,ad80 <___vfiprintf_internal_r+0x1234>
    a4f4:	50800104 	addi	r2,r10,4
    a4f8:	54800017 	ldw	r18,0(r10)
    a4fc:	0027883a 	mov	r19,zero
    a500:	4801a00e 	bge	r9,zero,ab84 <___vfiprintf_internal_r+0x1038>
    a504:	d8802215 	stw	r2,136(sp)
    a508:	0039883a 	mov	fp,zero
    a50c:	94c4b03a 	or	r2,r18,r19
    a510:	103f901e 	bne	r2,zero,a354 <__alt_data_end+0xff00a354>
    a514:	00800044 	movi	r2,1
    a518:	10803fcc 	andi	r2,r2,255
    a51c:	00c00044 	movi	r3,1
    a520:	10c05926 	beq	r2,r3,a688 <___vfiprintf_internal_r+0xb3c>
    a524:	00c00084 	movi	r3,2
    a528:	10ffe41e 	bne	r2,r3,a4bc <__alt_data_end+0xff00a4bc>
    a52c:	0025883a 	mov	r18,zero
    a530:	0027883a 	mov	r19,zero
    a534:	00013d06 	br	aa2c <___vfiprintf_internal_r+0xee0>
    a538:	21003fcc 	andi	r4,r4,255
    a53c:	2002811e 	bne	r4,zero,af44 <___vfiprintf_internal_r+0x13f8>
    a540:	00800074 	movhi	r2,1
    a544:	1086e604 	addi	r2,r2,7064
    a548:	d8802615 	stw	r2,152(sp)
    a54c:	a080080c 	andi	r2,r20,32
    a550:	103f561e 	bne	r2,zero,a2ac <__alt_data_end+0xff00a2ac>
    a554:	a080040c 	andi	r2,r20,16
    a558:	1001d126 	beq	r2,zero,aca0 <___vfiprintf_internal_r+0x1154>
    a55c:	da802217 	ldw	r10,136(sp)
    a560:	0027883a 	mov	r19,zero
    a564:	54800017 	ldw	r18,0(r10)
    a568:	52800104 	addi	r10,r10,4
    a56c:	da802215 	stw	r10,136(sp)
    a570:	003f5306 	br	a2c0 <__alt_data_end+0xff00a2c0>
    a574:	da802217 	ldw	r10,136(sp)
    a578:	d8001d85 	stb	zero,118(sp)
    a57c:	55400017 	ldw	r21,0(r10)
    a580:	50c00104 	addi	r3,r10,4
    a584:	a8024226 	beq	r21,zero,ae90 <___vfiprintf_internal_r+0x1344>
    a588:	48021816 	blt	r9,zero,adec <___vfiprintf_internal_r+0x12a0>
    a58c:	480d883a 	mov	r6,r9
    a590:	000b883a 	mov	r5,zero
    a594:	a809883a 	mov	r4,r21
    a598:	d8c02a15 	stw	r3,168(sp)
    a59c:	da002b15 	stw	r8,172(sp)
    a5a0:	da402c15 	stw	r9,176(sp)
    a5a4:	0007d9c0 	call	7d9c <memchr>
    a5a8:	d8c02a17 	ldw	r3,168(sp)
    a5ac:	da002b17 	ldw	r8,172(sp)
    a5b0:	da402c17 	ldw	r9,176(sp)
    a5b4:	10024826 	beq	r2,zero,aed8 <___vfiprintf_internal_r+0x138c>
    a5b8:	1567c83a 	sub	r19,r2,r21
    a5bc:	df001d83 	ldbu	fp,118(sp)
    a5c0:	d8c02215 	stw	r3,136(sp)
    a5c4:	0013883a 	mov	r9,zero
    a5c8:	003e6006 	br	9f4c <__alt_data_end+0xff009f4c>
    a5cc:	21003fcc 	andi	r4,r4,255
    a5d0:	203fc026 	beq	r4,zero,a4d4 <__alt_data_end+0xff00a4d4>
    a5d4:	d9c01d85 	stb	r7,118(sp)
    a5d8:	003fbe06 	br	a4d4 <__alt_data_end+0xff00a4d4>
    a5dc:	da802217 	ldw	r10,136(sp)
    a5e0:	54400017 	ldw	r17,0(r10)
    a5e4:	50800104 	addi	r2,r10,4
    a5e8:	883e3b16 	blt	r17,zero,9ed8 <__alt_data_end+0xff009ed8>
    a5ec:	d8802215 	stw	r2,136(sp)
    a5f0:	80c00007 	ldb	r3,0(r16)
    a5f4:	003db406 	br	9cc8 <__alt_data_end+0xff009cc8>
    a5f8:	01000044 	movi	r4,1
    a5fc:	01c00ac4 	movi	r7,43
    a600:	80c00007 	ldb	r3,0(r16)
    a604:	003db006 	br	9cc8 <__alt_data_end+0xff009cc8>
    a608:	80c00007 	ldb	r3,0(r16)
    a60c:	82800044 	addi	r10,r16,1
    a610:	1b423c26 	beq	r3,r13,af04 <___vfiprintf_internal_r+0x13b8>
    a614:	18bff404 	addi	r2,r3,-48
    a618:	0013883a 	mov	r9,zero
    a61c:	30822b36 	bltu	r6,r2,aecc <___vfiprintf_internal_r+0x1380>
    a620:	50c00007 	ldb	r3,0(r10)
    a624:	4a4002a4 	muli	r9,r9,10
    a628:	54000044 	addi	r16,r10,1
    a62c:	8015883a 	mov	r10,r16
    a630:	4893883a 	add	r9,r9,r2
    a634:	18bff404 	addi	r2,r3,-48
    a638:	30bff92e 	bgeu	r6,r2,a620 <__alt_data_end+0xff00a620>
    a63c:	483da30e 	bge	r9,zero,9ccc <__alt_data_end+0xff009ccc>
    a640:	027fffc4 	movi	r9,-1
    a644:	003da106 	br	9ccc <__alt_data_end+0xff009ccc>
    a648:	a5001014 	ori	r20,r20,64
    a64c:	80c00007 	ldb	r3,0(r16)
    a650:	003d9d06 	br	9cc8 <__alt_data_end+0xff009cc8>
    a654:	da802217 	ldw	r10,136(sp)
    a658:	d8001d85 	stb	zero,118(sp)
    a65c:	50c00204 	addi	r3,r10,8
    a660:	54800017 	ldw	r18,0(r10)
    a664:	54c00117 	ldw	r19,4(r10)
    a668:	4801ca16 	blt	r9,zero,ad94 <___vfiprintf_internal_r+0x1248>
    a66c:	013fdfc4 	movi	r4,-129
    a670:	94c4b03a 	or	r2,r18,r19
    a674:	d8c02215 	stw	r3,136(sp)
    a678:	a128703a 	and	r20,r20,r4
    a67c:	0039883a 	mov	fp,zero
    a680:	103f341e 	bne	r2,zero,a354 <__alt_data_end+0xff00a354>
    a684:	483e2e26 	beq	r9,zero,9f40 <__alt_data_end+0xff009f40>
    a688:	0025883a 	mov	r18,zero
    a68c:	94800c04 	addi	r18,r18,48
    a690:	dc8019c5 	stb	r18,103(sp)
    a694:	dcc02717 	ldw	r19,156(sp)
    a698:	dd4019c4 	addi	r21,sp,103
    a69c:	003e2b06 	br	9f4c <__alt_data_end+0xff009f4c>
    a6a0:	21003fcc 	andi	r4,r4,255
    a6a4:	2002361e 	bne	r4,zero,af80 <___vfiprintf_internal_r+0x1434>
    a6a8:	1801c126 	beq	r3,zero,adb0 <___vfiprintf_internal_r+0x1264>
    a6ac:	04800044 	movi	r18,1
    a6b0:	d8c01005 	stb	r3,64(sp)
    a6b4:	d8001d85 	stb	zero,118(sp)
    a6b8:	9027883a 	mov	r19,r18
    a6bc:	dd401004 	addi	r21,sp,64
    a6c0:	003f1106 	br	a308 <__alt_data_end+0xff00a308>
    a6c4:	d9402117 	ldw	r5,132(sp)
    a6c8:	d9002017 	ldw	r4,128(sp)
    a6cc:	d9801a04 	addi	r6,sp,104
    a6d0:	d9c02b15 	stw	r7,172(sp)
    a6d4:	dbc02a15 	stw	r15,168(sp)
    a6d8:	0009a380 	call	9a38 <__sprint_r.part.0>
    a6dc:	d9c02b17 	ldw	r7,172(sp)
    a6e0:	dbc02a17 	ldw	r15,168(sp)
    a6e4:	10006d1e 	bne	r2,zero,a89c <___vfiprintf_internal_r+0xd50>
    a6e8:	d9801b17 	ldw	r6,108(sp)
    a6ec:	d8801c17 	ldw	r2,112(sp)
    a6f0:	d811883a 	mov	r8,sp
    a6f4:	31400044 	addi	r5,r6,1
    a6f8:	003e3306 	br	9fc8 <__alt_data_end+0xff009fc8>
    a6fc:	d9401b17 	ldw	r5,108(sp)
    a700:	d8801c17 	ldw	r2,112(sp)
    a704:	29000044 	addi	r4,r5,1
    a708:	d8c01d87 	ldb	r3,118(sp)
    a70c:	183e4d26 	beq	r3,zero,a044 <__alt_data_end+0xff00a044>
    a710:	00c00044 	movi	r3,1
    a714:	d9401d84 	addi	r5,sp,118
    a718:	10c5883a 	add	r2,r2,r3
    a71c:	41400015 	stw	r5,0(r8)
    a720:	40c00115 	stw	r3,4(r8)
    a724:	d8801c15 	stw	r2,112(sp)
    a728:	d9001b15 	stw	r4,108(sp)
    a72c:	014001c4 	movi	r5,7
    a730:	2900a90e 	bge	r5,r4,a9d8 <___vfiprintf_internal_r+0xe8c>
    a734:	1000da1e 	bne	r2,zero,aaa0 <___vfiprintf_internal_r+0xf54>
    a738:	7000ab1e 	bne	r14,zero,a9e8 <___vfiprintf_internal_r+0xe9c>
    a73c:	000b883a 	mov	r5,zero
    a740:	1809883a 	mov	r4,r3
    a744:	d811883a 	mov	r8,sp
    a748:	00c02004 	movi	r3,128
    a74c:	e0fe4d26 	beq	fp,r3,a084 <__alt_data_end+0xff00a084>
    a750:	4cf9c83a 	sub	fp,r9,r19
    a754:	073e7b0e 	bge	zero,fp,a144 <__alt_data_end+0xff00a144>
    a758:	01c00404 	movi	r7,16
    a75c:	3f01900e 	bge	r7,fp,ada0 <___vfiprintf_internal_r+0x1254>
    a760:	00c00074 	movhi	r3,1
    a764:	18c74c04 	addi	r3,r3,7472
    a768:	d8c02415 	stw	r3,144(sp)
    a76c:	034001c4 	movi	r13,7
    a770:	00000506 	br	a788 <___vfiprintf_internal_r+0xc3c>
    a774:	29000084 	addi	r4,r5,2
    a778:	42000204 	addi	r8,r8,8
    a77c:	180b883a 	mov	r5,r3
    a780:	e73ffc04 	addi	fp,fp,-16
    a784:	3f000d0e 	bge	r7,fp,a7bc <___vfiprintf_internal_r+0xc70>
    a788:	10800404 	addi	r2,r2,16
    a78c:	28c00044 	addi	r3,r5,1
    a790:	45c00015 	stw	r23,0(r8)
    a794:	41c00115 	stw	r7,4(r8)
    a798:	d8801c15 	stw	r2,112(sp)
    a79c:	d8c01b15 	stw	r3,108(sp)
    a7a0:	68fff40e 	bge	r13,r3,a774 <__alt_data_end+0xff00a774>
    a7a4:	1000101e 	bne	r2,zero,a7e8 <___vfiprintf_internal_r+0xc9c>
    a7a8:	e73ffc04 	addi	fp,fp,-16
    a7ac:	01000044 	movi	r4,1
    a7b0:	000b883a 	mov	r5,zero
    a7b4:	d811883a 	mov	r8,sp
    a7b8:	3f3ff316 	blt	r7,fp,a788 <__alt_data_end+0xff00a788>
    a7bc:	da802417 	ldw	r10,144(sp)
    a7c0:	1705883a 	add	r2,r2,fp
    a7c4:	47000115 	stw	fp,4(r8)
    a7c8:	42800015 	stw	r10,0(r8)
    a7cc:	d8801c15 	stw	r2,112(sp)
    a7d0:	d9001b15 	stw	r4,108(sp)
    a7d4:	00c001c4 	movi	r3,7
    a7d8:	19003616 	blt	r3,r4,a8b4 <___vfiprintf_internal_r+0xd68>
    a7dc:	42000204 	addi	r8,r8,8
    a7e0:	21000044 	addi	r4,r4,1
    a7e4:	003e5706 	br	a144 <__alt_data_end+0xff00a144>
    a7e8:	d9402117 	ldw	r5,132(sp)
    a7ec:	d9002017 	ldw	r4,128(sp)
    a7f0:	d9801a04 	addi	r6,sp,104
    a7f4:	d9c02b15 	stw	r7,172(sp)
    a7f8:	db402a15 	stw	r13,168(sp)
    a7fc:	0009a380 	call	9a38 <__sprint_r.part.0>
    a800:	d9c02b17 	ldw	r7,172(sp)
    a804:	db402a17 	ldw	r13,168(sp)
    a808:	1000241e 	bne	r2,zero,a89c <___vfiprintf_internal_r+0xd50>
    a80c:	d9401b17 	ldw	r5,108(sp)
    a810:	d8801c17 	ldw	r2,112(sp)
    a814:	d811883a 	mov	r8,sp
    a818:	29000044 	addi	r4,r5,1
    a81c:	003fd806 	br	a780 <__alt_data_end+0xff00a780>
    a820:	d9401b17 	ldw	r5,108(sp)
    a824:	00c00074 	movhi	r3,1
    a828:	18c75004 	addi	r3,r3,7488
    a82c:	d8c02415 	stw	r3,144(sp)
    a830:	29400044 	addi	r5,r5,1
    a834:	d8c02417 	ldw	r3,144(sp)
    a838:	14c5883a 	add	r2,r2,r19
    a83c:	44c00115 	stw	r19,4(r8)
    a840:	40c00015 	stw	r3,0(r8)
    a844:	d8801c15 	stw	r2,112(sp)
    a848:	d9401b15 	stw	r5,108(sp)
    a84c:	00c001c4 	movi	r3,7
    a850:	1940070e 	bge	r3,r5,a870 <___vfiprintf_internal_r+0xd24>
    a854:	103e4826 	beq	r2,zero,a178 <__alt_data_end+0xff00a178>
    a858:	d9402117 	ldw	r5,132(sp)
    a85c:	d9002017 	ldw	r4,128(sp)
    a860:	d9801a04 	addi	r6,sp,104
    a864:	0009a380 	call	9a38 <__sprint_r.part.0>
    a868:	10000c1e 	bne	r2,zero,a89c <___vfiprintf_internal_r+0xd50>
    a86c:	d8801c17 	ldw	r2,112(sp)
    a870:	8c80010e 	bge	r17,r18,a878 <___vfiprintf_internal_r+0xd2c>
    a874:	9023883a 	mov	r17,r18
    a878:	da802317 	ldw	r10,140(sp)
    a87c:	5455883a 	add	r10,r10,r17
    a880:	da802315 	stw	r10,140(sp)
    a884:	103e4126 	beq	r2,zero,a18c <__alt_data_end+0xff00a18c>
    a888:	d9402117 	ldw	r5,132(sp)
    a88c:	d9002017 	ldw	r4,128(sp)
    a890:	d9801a04 	addi	r6,sp,104
    a894:	0009a380 	call	9a38 <__sprint_r.part.0>
    a898:	103e3c26 	beq	r2,zero,a18c <__alt_data_end+0xff00a18c>
    a89c:	dd002117 	ldw	r20,132(sp)
    a8a0:	a080030b 	ldhu	r2,12(r20)
    a8a4:	1080100c 	andi	r2,r2,64
    a8a8:	1001231e 	bne	r2,zero,ad38 <___vfiprintf_internal_r+0x11ec>
    a8ac:	d8802317 	ldw	r2,140(sp)
    a8b0:	003d7b06 	br	9ea0 <__alt_data_end+0xff009ea0>
    a8b4:	1000991e 	bne	r2,zero,ab1c <___vfiprintf_internal_r+0xfd0>
    a8b8:	00c00044 	movi	r3,1
    a8bc:	9805883a 	mov	r2,r19
    a8c0:	dd400015 	stw	r21,0(sp)
    a8c4:	dcc00115 	stw	r19,4(sp)
    a8c8:	dcc01c15 	stw	r19,112(sp)
    a8cc:	d8c01b15 	stw	r3,108(sp)
    a8d0:	d811883a 	mov	r8,sp
    a8d4:	42000204 	addi	r8,r8,8
    a8d8:	a2c0010c 	andi	r11,r20,4
    a8dc:	583fe426 	beq	r11,zero,a870 <__alt_data_end+0xff00a870>
    a8e0:	8ca7c83a 	sub	r19,r17,r18
    a8e4:	04ffe20e 	bge	zero,r19,a870 <__alt_data_end+0xff00a870>
    a8e8:	01c00404 	movi	r7,16
    a8ec:	3cffcc0e 	bge	r7,r19,a820 <__alt_data_end+0xff00a820>
    a8f0:	02800074 	movhi	r10,1
    a8f4:	52875004 	addi	r10,r10,7488
    a8f8:	d9001b17 	ldw	r4,108(sp)
    a8fc:	da802415 	stw	r10,144(sp)
    a900:	382b883a 	mov	r21,r7
    a904:	050001c4 	movi	r20,7
    a908:	df002017 	ldw	fp,128(sp)
    a90c:	00000506 	br	a924 <___vfiprintf_internal_r+0xdd8>
    a910:	21400084 	addi	r5,r4,2
    a914:	42000204 	addi	r8,r8,8
    a918:	1809883a 	mov	r4,r3
    a91c:	9cfffc04 	addi	r19,r19,-16
    a920:	acffc40e 	bge	r21,r19,a834 <__alt_data_end+0xff00a834>
    a924:	10800404 	addi	r2,r2,16
    a928:	20c00044 	addi	r3,r4,1
    a92c:	45800015 	stw	r22,0(r8)
    a930:	45400115 	stw	r21,4(r8)
    a934:	d8801c15 	stw	r2,112(sp)
    a938:	d8c01b15 	stw	r3,108(sp)
    a93c:	a0fff40e 	bge	r20,r3,a910 <__alt_data_end+0xff00a910>
    a940:	1000041e 	bne	r2,zero,a954 <___vfiprintf_internal_r+0xe08>
    a944:	01400044 	movi	r5,1
    a948:	0009883a 	mov	r4,zero
    a94c:	d811883a 	mov	r8,sp
    a950:	003ff206 	br	a91c <__alt_data_end+0xff00a91c>
    a954:	d9402117 	ldw	r5,132(sp)
    a958:	d9801a04 	addi	r6,sp,104
    a95c:	e009883a 	mov	r4,fp
    a960:	0009a380 	call	9a38 <__sprint_r.part.0>
    a964:	103fcd1e 	bne	r2,zero,a89c <__alt_data_end+0xff00a89c>
    a968:	d9001b17 	ldw	r4,108(sp)
    a96c:	d8801c17 	ldw	r2,112(sp)
    a970:	d811883a 	mov	r8,sp
    a974:	21400044 	addi	r5,r4,1
    a978:	003fe806 	br	a91c <__alt_data_end+0xff00a91c>
    a97c:	d9402117 	ldw	r5,132(sp)
    a980:	d9002017 	ldw	r4,128(sp)
    a984:	d9801a04 	addi	r6,sp,104
    a988:	d9c02b15 	stw	r7,172(sp)
    a98c:	db402a15 	stw	r13,168(sp)
    a990:	0009a380 	call	9a38 <__sprint_r.part.0>
    a994:	d9c02b17 	ldw	r7,172(sp)
    a998:	db402a17 	ldw	r13,168(sp)
    a99c:	103fbf1e 	bne	r2,zero,a89c <__alt_data_end+0xff00a89c>
    a9a0:	d9401b17 	ldw	r5,108(sp)
    a9a4:	d8801c17 	ldw	r2,112(sp)
    a9a8:	d811883a 	mov	r8,sp
    a9ac:	29800044 	addi	r6,r5,1
    a9b0:	003dc406 	br	a0c4 <__alt_data_end+0xff00a0c4>
    a9b4:	1000d21e 	bne	r2,zero,ad00 <___vfiprintf_internal_r+0x11b4>
    a9b8:	d8c01d87 	ldb	r3,118(sp)
    a9bc:	18009526 	beq	r3,zero,ac14 <___vfiprintf_internal_r+0x10c8>
    a9c0:	00800044 	movi	r2,1
    a9c4:	d8c01d84 	addi	r3,sp,118
    a9c8:	1009883a 	mov	r4,r2
    a9cc:	d8c00015 	stw	r3,0(sp)
    a9d0:	d8800115 	stw	r2,4(sp)
    a9d4:	d811883a 	mov	r8,sp
    a9d8:	200b883a 	mov	r5,r4
    a9dc:	42000204 	addi	r8,r8,8
    a9e0:	21000044 	addi	r4,r4,1
    a9e4:	003d9706 	br	a044 <__alt_data_end+0xff00a044>
    a9e8:	d9001d04 	addi	r4,sp,116
    a9ec:	00800084 	movi	r2,2
    a9f0:	d9000015 	stw	r4,0(sp)
    a9f4:	d8800115 	stw	r2,4(sp)
    a9f8:	1809883a 	mov	r4,r3
    a9fc:	d811883a 	mov	r8,sp
    aa00:	200b883a 	mov	r5,r4
    aa04:	42000204 	addi	r8,r8,8
    aa08:	21000044 	addi	r4,r4,1
    aa0c:	003f4e06 	br	a748 <__alt_data_end+0xff00a748>
    aa10:	d8001d85 	stb	zero,118(sp)
    aa14:	48005016 	blt	r9,zero,ab58 <___vfiprintf_internal_r+0x100c>
    aa18:	00ffdfc4 	movi	r3,-129
    aa1c:	94c4b03a 	or	r2,r18,r19
    aa20:	a0e8703a 	and	r20,r20,r3
    aa24:	103d4426 	beq	r2,zero,9f38 <__alt_data_end+0xff009f38>
    aa28:	0039883a 	mov	fp,zero
    aa2c:	d9002617 	ldw	r4,152(sp)
    aa30:	dd401a04 	addi	r21,sp,104
    aa34:	908003cc 	andi	r2,r18,15
    aa38:	9806973a 	slli	r3,r19,28
    aa3c:	2085883a 	add	r2,r4,r2
    aa40:	9024d13a 	srli	r18,r18,4
    aa44:	10800003 	ldbu	r2,0(r2)
    aa48:	9826d13a 	srli	r19,r19,4
    aa4c:	ad7fffc4 	addi	r21,r21,-1
    aa50:	1ca4b03a 	or	r18,r3,r18
    aa54:	a8800005 	stb	r2,0(r21)
    aa58:	94c4b03a 	or	r2,r18,r19
    aa5c:	103ff51e 	bne	r2,zero,aa34 <__alt_data_end+0xff00aa34>
    aa60:	003e5906 	br	a3c8 <__alt_data_end+0xff00a3c8>
    aa64:	d9402117 	ldw	r5,132(sp)
    aa68:	d9002017 	ldw	r4,128(sp)
    aa6c:	d9801a04 	addi	r6,sp,104
    aa70:	0009a380 	call	9a38 <__sprint_r.part.0>
    aa74:	103f891e 	bne	r2,zero,a89c <__alt_data_end+0xff00a89c>
    aa78:	d8801c17 	ldw	r2,112(sp)
    aa7c:	d811883a 	mov	r8,sp
    aa80:	003f9506 	br	a8d8 <__alt_data_end+0xff00a8d8>
    aa84:	d9402117 	ldw	r5,132(sp)
    aa88:	d9002017 	ldw	r4,128(sp)
    aa8c:	d9801a04 	addi	r6,sp,104
    aa90:	0009a380 	call	9a38 <__sprint_r.part.0>
    aa94:	103f811e 	bne	r2,zero,a89c <__alt_data_end+0xff00a89c>
    aa98:	d811883a 	mov	r8,sp
    aa9c:	003ced06 	br	9e54 <__alt_data_end+0xff009e54>
    aaa0:	d9402117 	ldw	r5,132(sp)
    aaa4:	d9002017 	ldw	r4,128(sp)
    aaa8:	d9801a04 	addi	r6,sp,104
    aaac:	da402c15 	stw	r9,176(sp)
    aab0:	db802a15 	stw	r14,168(sp)
    aab4:	0009a380 	call	9a38 <__sprint_r.part.0>
    aab8:	da402c17 	ldw	r9,176(sp)
    aabc:	db802a17 	ldw	r14,168(sp)
    aac0:	103f761e 	bne	r2,zero,a89c <__alt_data_end+0xff00a89c>
    aac4:	d9401b17 	ldw	r5,108(sp)
    aac8:	d8801c17 	ldw	r2,112(sp)
    aacc:	d811883a 	mov	r8,sp
    aad0:	29000044 	addi	r4,r5,1
    aad4:	003d5b06 	br	a044 <__alt_data_end+0xff00a044>
    aad8:	d9402117 	ldw	r5,132(sp)
    aadc:	d9002017 	ldw	r4,128(sp)
    aae0:	d9801a04 	addi	r6,sp,104
    aae4:	da402c15 	stw	r9,176(sp)
    aae8:	0009a380 	call	9a38 <__sprint_r.part.0>
    aaec:	da402c17 	ldw	r9,176(sp)
    aaf0:	103f6a1e 	bne	r2,zero,a89c <__alt_data_end+0xff00a89c>
    aaf4:	d9401b17 	ldw	r5,108(sp)
    aaf8:	d8801c17 	ldw	r2,112(sp)
    aafc:	d811883a 	mov	r8,sp
    ab00:	29000044 	addi	r4,r5,1
    ab04:	003f1006 	br	a748 <__alt_data_end+0xff00a748>
    ab08:	1000c31e 	bne	r2,zero,ae18 <___vfiprintf_internal_r+0x12cc>
    ab0c:	01000044 	movi	r4,1
    ab10:	000b883a 	mov	r5,zero
    ab14:	d811883a 	mov	r8,sp
    ab18:	003f0d06 	br	a750 <__alt_data_end+0xff00a750>
    ab1c:	d9402117 	ldw	r5,132(sp)
    ab20:	d9002017 	ldw	r4,128(sp)
    ab24:	d9801a04 	addi	r6,sp,104
    ab28:	0009a380 	call	9a38 <__sprint_r.part.0>
    ab2c:	103f5b1e 	bne	r2,zero,a89c <__alt_data_end+0xff00a89c>
    ab30:	d9001b17 	ldw	r4,108(sp)
    ab34:	d8801c17 	ldw	r2,112(sp)
    ab38:	d811883a 	mov	r8,sp
    ab3c:	21000044 	addi	r4,r4,1
    ab40:	003d8006 	br	a144 <__alt_data_end+0xff00a144>
    ab44:	01000074 	movhi	r4,1
    ab48:	2106eb04 	addi	r4,r4,7084
    ab4c:	d9002615 	stw	r4,152(sp)
    ab50:	d8c02215 	stw	r3,136(sp)
    ab54:	1029883a 	mov	r20,r2
    ab58:	94c4b03a 	or	r2,r18,r19
    ab5c:	103fb21e 	bne	r2,zero,aa28 <__alt_data_end+0xff00aa28>
    ab60:	0039883a 	mov	fp,zero
    ab64:	00800084 	movi	r2,2
    ab68:	003e6b06 	br	a518 <__alt_data_end+0xff00a518>
    ab6c:	da802217 	ldw	r10,136(sp)
    ab70:	d8001d85 	stb	zero,118(sp)
    ab74:	0027883a 	mov	r19,zero
    ab78:	50800104 	addi	r2,r10,4
    ab7c:	54800017 	ldw	r18,0(r10)
    ab80:	483e6016 	blt	r9,zero,a504 <__alt_data_end+0xff00a504>
    ab84:	00ffdfc4 	movi	r3,-129
    ab88:	d8802215 	stw	r2,136(sp)
    ab8c:	a0e8703a 	and	r20,r20,r3
    ab90:	0039883a 	mov	fp,zero
    ab94:	903ebb26 	beq	r18,zero,a684 <__alt_data_end+0xff00a684>
    ab98:	00800244 	movi	r2,9
    ab9c:	14bdee36 	bltu	r2,r18,a358 <__alt_data_end+0xff00a358>
    aba0:	003eba06 	br	a68c <__alt_data_end+0xff00a68c>
    aba4:	00800c04 	movi	r2,48
    aba8:	d8c01d45 	stb	r3,117(sp)
    abac:	d8801d05 	stb	r2,116(sp)
    abb0:	d8001d85 	stb	zero,118(sp)
    abb4:	a0c00094 	ori	r3,r20,2
    abb8:	4800a916 	blt	r9,zero,ae60 <___vfiprintf_internal_r+0x1314>
    abbc:	00bfdfc4 	movi	r2,-129
    abc0:	a096703a 	and	r11,r20,r2
    abc4:	5d000094 	ori	r20,r11,2
    abc8:	0039883a 	mov	fp,zero
    abcc:	003f9706 	br	aa2c <__alt_data_end+0xff00aa2c>
    abd0:	8025883a 	mov	r18,r16
    abd4:	003c2e06 	br	9c90 <__alt_data_end+0xff009c90>
    abd8:	00800074 	movhi	r2,1
    abdc:	1086eb04 	addi	r2,r2,7084
    abe0:	0039883a 	mov	fp,zero
    abe4:	d8802615 	stw	r2,152(sp)
    abe8:	003f9006 	br	aa2c <__alt_data_end+0xff00aa2c>
    abec:	04a5c83a 	sub	r18,zero,r18
    abf0:	07000b44 	movi	fp,45
    abf4:	9004c03a 	cmpne	r2,r18,zero
    abf8:	04e7c83a 	sub	r19,zero,r19
    abfc:	df001d85 	stb	fp,118(sp)
    ac00:	98a7c83a 	sub	r19,r19,r2
    ac04:	48009f16 	blt	r9,zero,ae84 <___vfiprintf_internal_r+0x1338>
    ac08:	00bfdfc4 	movi	r2,-129
    ac0c:	a0a8703a 	and	r20,r20,r2
    ac10:	003dd006 	br	a354 <__alt_data_end+0xff00a354>
    ac14:	70004c26 	beq	r14,zero,ad48 <___vfiprintf_internal_r+0x11fc>
    ac18:	00800084 	movi	r2,2
    ac1c:	d8c01d04 	addi	r3,sp,116
    ac20:	d8c00015 	stw	r3,0(sp)
    ac24:	d8800115 	stw	r2,4(sp)
    ac28:	01000044 	movi	r4,1
    ac2c:	d811883a 	mov	r8,sp
    ac30:	003f7306 	br	aa00 <__alt_data_end+0xff00aa00>
    ac34:	a080100c 	andi	r2,r20,64
    ac38:	da802217 	ldw	r10,136(sp)
    ac3c:	103e0626 	beq	r2,zero,a458 <__alt_data_end+0xff00a458>
    ac40:	5480000f 	ldh	r18,0(r10)
    ac44:	52800104 	addi	r10,r10,4
    ac48:	da802215 	stw	r10,136(sp)
    ac4c:	9027d7fa 	srai	r19,r18,31
    ac50:	9805883a 	mov	r2,r19
    ac54:	003db806 	br	a338 <__alt_data_end+0xff00a338>
    ac58:	a080040c 	andi	r2,r20,16
    ac5c:	1000091e 	bne	r2,zero,ac84 <___vfiprintf_internal_r+0x1138>
    ac60:	a2c0100c 	andi	r11,r20,64
    ac64:	58000726 	beq	r11,zero,ac84 <___vfiprintf_internal_r+0x1138>
    ac68:	da802217 	ldw	r10,136(sp)
    ac6c:	50800017 	ldw	r2,0(r10)
    ac70:	52800104 	addi	r10,r10,4
    ac74:	da802215 	stw	r10,136(sp)
    ac78:	da802317 	ldw	r10,140(sp)
    ac7c:	1280000d 	sth	r10,0(r2)
    ac80:	003be706 	br	9c20 <__alt_data_end+0xff009c20>
    ac84:	da802217 	ldw	r10,136(sp)
    ac88:	50800017 	ldw	r2,0(r10)
    ac8c:	52800104 	addi	r10,r10,4
    ac90:	da802215 	stw	r10,136(sp)
    ac94:	da802317 	ldw	r10,140(sp)
    ac98:	12800015 	stw	r10,0(r2)
    ac9c:	003be006 	br	9c20 <__alt_data_end+0xff009c20>
    aca0:	a080100c 	andi	r2,r20,64
    aca4:	da802217 	ldw	r10,136(sp)
    aca8:	10003026 	beq	r2,zero,ad6c <___vfiprintf_internal_r+0x1220>
    acac:	5480000b 	ldhu	r18,0(r10)
    acb0:	52800104 	addi	r10,r10,4
    acb4:	0027883a 	mov	r19,zero
    acb8:	da802215 	stw	r10,136(sp)
    acbc:	003d8006 	br	a2c0 <__alt_data_end+0xff00a2c0>
    acc0:	80c00007 	ldb	r3,0(r16)
    acc4:	003c0006 	br	9cc8 <__alt_data_end+0xff009cc8>
    acc8:	a080100c 	andi	r2,r20,64
    accc:	d8001d85 	stb	zero,118(sp)
    acd0:	da802217 	ldw	r10,136(sp)
    acd4:	1000201e 	bne	r2,zero,ad58 <___vfiprintf_internal_r+0x120c>
    acd8:	50800104 	addi	r2,r10,4
    acdc:	54800017 	ldw	r18,0(r10)
    ace0:	0027883a 	mov	r19,zero
    ace4:	483def0e 	bge	r9,zero,a4a4 <__alt_data_end+0xff00a4a4>
    ace8:	94c6b03a 	or	r3,r18,r19
    acec:	d8802215 	stw	r2,136(sp)
    acf0:	183d4e1e 	bne	r3,zero,a22c <__alt_data_end+0xff00a22c>
    acf4:	0039883a 	mov	fp,zero
    acf8:	0005883a 	mov	r2,zero
    acfc:	003e0606 	br	a518 <__alt_data_end+0xff00a518>
    ad00:	d9402117 	ldw	r5,132(sp)
    ad04:	d9002017 	ldw	r4,128(sp)
    ad08:	d9801a04 	addi	r6,sp,104
    ad0c:	da402c15 	stw	r9,176(sp)
    ad10:	db802a15 	stw	r14,168(sp)
    ad14:	0009a380 	call	9a38 <__sprint_r.part.0>
    ad18:	da402c17 	ldw	r9,176(sp)
    ad1c:	db802a17 	ldw	r14,168(sp)
    ad20:	103ede1e 	bne	r2,zero,a89c <__alt_data_end+0xff00a89c>
    ad24:	d9401b17 	ldw	r5,108(sp)
    ad28:	d8801c17 	ldw	r2,112(sp)
    ad2c:	d811883a 	mov	r8,sp
    ad30:	29000044 	addi	r4,r5,1
    ad34:	003e7406 	br	a708 <__alt_data_end+0xff00a708>
    ad38:	00bfffc4 	movi	r2,-1
    ad3c:	003c5806 	br	9ea0 <__alt_data_end+0xff009ea0>
    ad40:	d811883a 	mov	r8,sp
    ad44:	003ee806 	br	a8e8 <__alt_data_end+0xff00a8e8>
    ad48:	000b883a 	mov	r5,zero
    ad4c:	01000044 	movi	r4,1
    ad50:	d811883a 	mov	r8,sp
    ad54:	003e7c06 	br	a748 <__alt_data_end+0xff00a748>
    ad58:	50800104 	addi	r2,r10,4
    ad5c:	5480000b 	ldhu	r18,0(r10)
    ad60:	0027883a 	mov	r19,zero
    ad64:	483dcf0e 	bge	r9,zero,a4a4 <__alt_data_end+0xff00a4a4>
    ad68:	003fdf06 	br	ace8 <__alt_data_end+0xff00ace8>
    ad6c:	54800017 	ldw	r18,0(r10)
    ad70:	52800104 	addi	r10,r10,4
    ad74:	0027883a 	mov	r19,zero
    ad78:	da802215 	stw	r10,136(sp)
    ad7c:	003d5006 	br	a2c0 <__alt_data_end+0xff00a2c0>
    ad80:	50800104 	addi	r2,r10,4
    ad84:	5480000b 	ldhu	r18,0(r10)
    ad88:	0027883a 	mov	r19,zero
    ad8c:	483f7d0e 	bge	r9,zero,ab84 <__alt_data_end+0xff00ab84>
    ad90:	003ddc06 	br	a504 <__alt_data_end+0xff00a504>
    ad94:	d8c02215 	stw	r3,136(sp)
    ad98:	0039883a 	mov	fp,zero
    ad9c:	003ddb06 	br	a50c <__alt_data_end+0xff00a50c>
    ada0:	02800074 	movhi	r10,1
    ada4:	52874c04 	addi	r10,r10,7472
    ada8:	da802415 	stw	r10,144(sp)
    adac:	003e8306 	br	a7bc <__alt_data_end+0xff00a7bc>
    adb0:	d8801c17 	ldw	r2,112(sp)
    adb4:	dd002117 	ldw	r20,132(sp)
    adb8:	103eb926 	beq	r2,zero,a8a0 <__alt_data_end+0xff00a8a0>
    adbc:	d9002017 	ldw	r4,128(sp)
    adc0:	d9801a04 	addi	r6,sp,104
    adc4:	a00b883a 	mov	r5,r20
    adc8:	0009a380 	call	9a38 <__sprint_r.part.0>
    adcc:	003eb406 	br	a8a0 <__alt_data_end+0xff00a8a0>
    add0:	80c00043 	ldbu	r3,1(r16)
    add4:	a5000814 	ori	r20,r20,32
    add8:	84000044 	addi	r16,r16,1
    addc:	18c03fcc 	andi	r3,r3,255
    ade0:	18c0201c 	xori	r3,r3,128
    ade4:	18ffe004 	addi	r3,r3,-128
    ade8:	003bb706 	br	9cc8 <__alt_data_end+0xff009cc8>
    adec:	a809883a 	mov	r4,r21
    adf0:	d8c02a15 	stw	r3,168(sp)
    adf4:	da002b15 	stw	r8,172(sp)
    adf8:	0002d000 	call	2d00 <strlen>
    adfc:	d8c02a17 	ldw	r3,168(sp)
    ae00:	1027883a 	mov	r19,r2
    ae04:	df001d83 	ldbu	fp,118(sp)
    ae08:	d8c02215 	stw	r3,136(sp)
    ae0c:	0013883a 	mov	r9,zero
    ae10:	da002b17 	ldw	r8,172(sp)
    ae14:	003c4d06 	br	9f4c <__alt_data_end+0xff009f4c>
    ae18:	d9402117 	ldw	r5,132(sp)
    ae1c:	d9002017 	ldw	r4,128(sp)
    ae20:	d9801a04 	addi	r6,sp,104
    ae24:	da402c15 	stw	r9,176(sp)
    ae28:	0009a380 	call	9a38 <__sprint_r.part.0>
    ae2c:	da402c17 	ldw	r9,176(sp)
    ae30:	103e9a1e 	bne	r2,zero,a89c <__alt_data_end+0xff00a89c>
    ae34:	d9401b17 	ldw	r5,108(sp)
    ae38:	d8801c17 	ldw	r2,112(sp)
    ae3c:	d811883a 	mov	r8,sp
    ae40:	29000044 	addi	r4,r5,1
    ae44:	003e4206 	br	a750 <__alt_data_end+0xff00a750>
    ae48:	d9401b17 	ldw	r5,108(sp)
    ae4c:	01000074 	movhi	r4,1
    ae50:	21075004 	addi	r4,r4,7488
    ae54:	d9002415 	stw	r4,144(sp)
    ae58:	29400044 	addi	r5,r5,1
    ae5c:	003c6d06 	br	a014 <__alt_data_end+0xff00a014>
    ae60:	0039883a 	mov	fp,zero
    ae64:	00800084 	movi	r2,2
    ae68:	10803fcc 	andi	r2,r2,255
    ae6c:	01000044 	movi	r4,1
    ae70:	11001e26 	beq	r2,r4,aeec <___vfiprintf_internal_r+0x13a0>
    ae74:	01000084 	movi	r4,2
    ae78:	11001e1e 	bne	r2,r4,aef4 <___vfiprintf_internal_r+0x13a8>
    ae7c:	1829883a 	mov	r20,r3
    ae80:	003eea06 	br	aa2c <__alt_data_end+0xff00aa2c>
    ae84:	a007883a 	mov	r3,r20
    ae88:	00800044 	movi	r2,1
    ae8c:	003ff606 	br	ae68 <__alt_data_end+0xff00ae68>
    ae90:	00800184 	movi	r2,6
    ae94:	1240012e 	bgeu	r2,r9,ae9c <___vfiprintf_internal_r+0x1350>
    ae98:	1013883a 	mov	r9,r2
    ae9c:	4827883a 	mov	r19,r9
    aea0:	4825883a 	mov	r18,r9
    aea4:	48001516 	blt	r9,zero,aefc <___vfiprintf_internal_r+0x13b0>
    aea8:	05400074 	movhi	r21,1
    aeac:	d8c02215 	stw	r3,136(sp)
    aeb0:	ad46f004 	addi	r21,r21,7104
    aeb4:	003d1406 	br	a308 <__alt_data_end+0xff00a308>
    aeb8:	02800074 	movhi	r10,1
    aebc:	52874c04 	addi	r10,r10,7472
    aec0:	da802415 	stw	r10,144(sp)
    aec4:	200d883a 	mov	r6,r4
    aec8:	003c9106 	br	a110 <__alt_data_end+0xff00a110>
    aecc:	5021883a 	mov	r16,r10
    aed0:	0013883a 	mov	r9,zero
    aed4:	003b7d06 	br	9ccc <__alt_data_end+0xff009ccc>
    aed8:	4827883a 	mov	r19,r9
    aedc:	df001d83 	ldbu	fp,118(sp)
    aee0:	d8c02215 	stw	r3,136(sp)
    aee4:	0013883a 	mov	r9,zero
    aee8:	003c1806 	br	9f4c <__alt_data_end+0xff009f4c>
    aeec:	1829883a 	mov	r20,r3
    aef0:	003d1806 	br	a354 <__alt_data_end+0xff00a354>
    aef4:	1829883a 	mov	r20,r3
    aef8:	003ccd06 	br	a230 <__alt_data_end+0xff00a230>
    aefc:	0025883a 	mov	r18,zero
    af00:	003fe906 	br	aea8 <__alt_data_end+0xff00aea8>
    af04:	d8802217 	ldw	r2,136(sp)
    af08:	80c00043 	ldbu	r3,1(r16)
    af0c:	5021883a 	mov	r16,r10
    af10:	12400017 	ldw	r9,0(r2)
    af14:	10800104 	addi	r2,r2,4
    af18:	d8802215 	stw	r2,136(sp)
    af1c:	483faf0e 	bge	r9,zero,addc <__alt_data_end+0xff00addc>
    af20:	18c03fcc 	andi	r3,r3,255
    af24:	18c0201c 	xori	r3,r3,128
    af28:	027fffc4 	movi	r9,-1
    af2c:	18ffe004 	addi	r3,r3,-128
    af30:	003b6506 	br	9cc8 <__alt_data_end+0xff009cc8>
    af34:	d9c01d85 	stb	r7,118(sp)
    af38:	003ca006 	br	a1bc <__alt_data_end+0xff00a1bc>
    af3c:	d9c01d85 	stb	r7,118(sp)
    af40:	003cad06 	br	a1f8 <__alt_data_end+0xff00a1f8>
    af44:	d9c01d85 	stb	r7,118(sp)
    af48:	003d7d06 	br	a540 <__alt_data_end+0xff00a540>
    af4c:	d9c01d85 	stb	r7,118(sp)
    af50:	003d5f06 	br	a4d0 <__alt_data_end+0xff00a4d0>
    af54:	a080004c 	andi	r2,r20,1
    af58:	0039883a 	mov	fp,zero
    af5c:	10000526 	beq	r2,zero,af74 <___vfiprintf_internal_r+0x1428>
    af60:	00800c04 	movi	r2,48
    af64:	d88019c5 	stb	r2,103(sp)
    af68:	dcc02717 	ldw	r19,156(sp)
    af6c:	dd4019c4 	addi	r21,sp,103
    af70:	003bf606 	br	9f4c <__alt_data_end+0xff009f4c>
    af74:	0027883a 	mov	r19,zero
    af78:	dd401a04 	addi	r21,sp,104
    af7c:	003bf306 	br	9f4c <__alt_data_end+0xff009f4c>
    af80:	d9c01d85 	stb	r7,118(sp)
    af84:	003dc806 	br	a6a8 <__alt_data_end+0xff00a6a8>
    af88:	d9c01d85 	stb	r7,118(sp)
    af8c:	003d3a06 	br	a478 <__alt_data_end+0xff00a478>
    af90:	d9c01d85 	stb	r7,118(sp)
    af94:	003d2a06 	br	a440 <__alt_data_end+0xff00a440>
    af98:	d9c01d85 	stb	r7,118(sp)
    af9c:	003cde06 	br	a318 <__alt_data_end+0xff00a318>
    afa0:	d9c01d85 	stb	r7,118(sp)
    afa4:	003cbc06 	br	a298 <__alt_data_end+0xff00a298>

0000afa8 <__vfiprintf_internal>:
    afa8:	00800074 	movhi	r2,1
    afac:	108e4d04 	addi	r2,r2,14644
    afb0:	300f883a 	mov	r7,r6
    afb4:	280d883a 	mov	r6,r5
    afb8:	200b883a 	mov	r5,r4
    afbc:	11000017 	ldw	r4,0(r2)
    afc0:	0009b4c1 	jmpi	9b4c <___vfiprintf_internal_r>

0000afc4 <__sbprintf>:
    afc4:	2880030b 	ldhu	r2,12(r5)
    afc8:	2ac01917 	ldw	r11,100(r5)
    afcc:	2a80038b 	ldhu	r10,14(r5)
    afd0:	2a400717 	ldw	r9,28(r5)
    afd4:	2a000917 	ldw	r8,36(r5)
    afd8:	defee204 	addi	sp,sp,-1144
    afdc:	00c10004 	movi	r3,1024
    afe0:	dc011a15 	stw	r16,1128(sp)
    afe4:	10bfff4c 	andi	r2,r2,65533
    afe8:	2821883a 	mov	r16,r5
    afec:	d8cb883a 	add	r5,sp,r3
    aff0:	dc811c15 	stw	r18,1136(sp)
    aff4:	dc411b15 	stw	r17,1132(sp)
    aff8:	dfc11d15 	stw	ra,1140(sp)
    affc:	2025883a 	mov	r18,r4
    b000:	d881030d 	sth	r2,1036(sp)
    b004:	dac11915 	stw	r11,1124(sp)
    b008:	da81038d 	sth	r10,1038(sp)
    b00c:	da410715 	stw	r9,1052(sp)
    b010:	da010915 	stw	r8,1060(sp)
    b014:	dec10015 	stw	sp,1024(sp)
    b018:	dec10415 	stw	sp,1040(sp)
    b01c:	d8c10215 	stw	r3,1032(sp)
    b020:	d8c10515 	stw	r3,1044(sp)
    b024:	d8010615 	stw	zero,1048(sp)
    b028:	0009b4c0 	call	9b4c <___vfiprintf_internal_r>
    b02c:	1023883a 	mov	r17,r2
    b030:	10000416 	blt	r2,zero,b044 <__sbprintf+0x80>
    b034:	d9410004 	addi	r5,sp,1024
    b038:	9009883a 	mov	r4,r18
    b03c:	0006c600 	call	6c60 <_fflush_r>
    b040:	10000d1e 	bne	r2,zero,b078 <__sbprintf+0xb4>
    b044:	d881030b 	ldhu	r2,1036(sp)
    b048:	1080100c 	andi	r2,r2,64
    b04c:	10000326 	beq	r2,zero,b05c <__sbprintf+0x98>
    b050:	8080030b 	ldhu	r2,12(r16)
    b054:	10801014 	ori	r2,r2,64
    b058:	8080030d 	sth	r2,12(r16)
    b05c:	8805883a 	mov	r2,r17
    b060:	dfc11d17 	ldw	ra,1140(sp)
    b064:	dc811c17 	ldw	r18,1136(sp)
    b068:	dc411b17 	ldw	r17,1132(sp)
    b06c:	dc011a17 	ldw	r16,1128(sp)
    b070:	dec11e04 	addi	sp,sp,1144
    b074:	f800283a 	ret
    b078:	047fffc4 	movi	r17,-1
    b07c:	003ff106 	br	b044 <__alt_data_end+0xff00b044>

0000b080 <_write_r>:
    b080:	defffd04 	addi	sp,sp,-12
    b084:	2805883a 	mov	r2,r5
    b088:	dc000015 	stw	r16,0(sp)
    b08c:	04000074 	movhi	r16,1
    b090:	dc400115 	stw	r17,4(sp)
    b094:	300b883a 	mov	r5,r6
    b098:	84152204 	addi	r16,r16,21640
    b09c:	2023883a 	mov	r17,r4
    b0a0:	380d883a 	mov	r6,r7
    b0a4:	1009883a 	mov	r4,r2
    b0a8:	dfc00215 	stw	ra,8(sp)
    b0ac:	80000015 	stw	zero,0(r16)
    b0b0:	000f4fc0 	call	f4fc <write>
    b0b4:	00ffffc4 	movi	r3,-1
    b0b8:	10c00526 	beq	r2,r3,b0d0 <_write_r+0x50>
    b0bc:	dfc00217 	ldw	ra,8(sp)
    b0c0:	dc400117 	ldw	r17,4(sp)
    b0c4:	dc000017 	ldw	r16,0(sp)
    b0c8:	dec00304 	addi	sp,sp,12
    b0cc:	f800283a 	ret
    b0d0:	80c00017 	ldw	r3,0(r16)
    b0d4:	183ff926 	beq	r3,zero,b0bc <__alt_data_end+0xff00b0bc>
    b0d8:	88c00015 	stw	r3,0(r17)
    b0dc:	003ff706 	br	b0bc <__alt_data_end+0xff00b0bc>

0000b0e0 <_close_r>:
    b0e0:	defffd04 	addi	sp,sp,-12
    b0e4:	dc000015 	stw	r16,0(sp)
    b0e8:	04000074 	movhi	r16,1
    b0ec:	dc400115 	stw	r17,4(sp)
    b0f0:	84152204 	addi	r16,r16,21640
    b0f4:	2023883a 	mov	r17,r4
    b0f8:	2809883a 	mov	r4,r5
    b0fc:	dfc00215 	stw	ra,8(sp)
    b100:	80000015 	stw	zero,0(r16)
    b104:	000ecbc0 	call	ecbc <close>
    b108:	00ffffc4 	movi	r3,-1
    b10c:	10c00526 	beq	r2,r3,b124 <_close_r+0x44>
    b110:	dfc00217 	ldw	ra,8(sp)
    b114:	dc400117 	ldw	r17,4(sp)
    b118:	dc000017 	ldw	r16,0(sp)
    b11c:	dec00304 	addi	sp,sp,12
    b120:	f800283a 	ret
    b124:	80c00017 	ldw	r3,0(r16)
    b128:	183ff926 	beq	r3,zero,b110 <__alt_data_end+0xff00b110>
    b12c:	88c00015 	stw	r3,0(r17)
    b130:	003ff706 	br	b110 <__alt_data_end+0xff00b110>

0000b134 <_calloc_r>:
    b134:	298b383a 	mul	r5,r5,r6
    b138:	defffe04 	addi	sp,sp,-8
    b13c:	dfc00115 	stw	ra,4(sp)
    b140:	dc000015 	stw	r16,0(sp)
    b144:	00023600 	call	2360 <_malloc_r>
    b148:	10002926 	beq	r2,zero,b1f0 <_calloc_r+0xbc>
    b14c:	11bfff17 	ldw	r6,-4(r2)
    b150:	1021883a 	mov	r16,r2
    b154:	00bfff04 	movi	r2,-4
    b158:	308c703a 	and	r6,r6,r2
    b15c:	00c00904 	movi	r3,36
    b160:	308d883a 	add	r6,r6,r2
    b164:	19801636 	bltu	r3,r6,b1c0 <_calloc_r+0x8c>
    b168:	008004c4 	movi	r2,19
    b16c:	11800b2e 	bgeu	r2,r6,b19c <_calloc_r+0x68>
    b170:	80000015 	stw	zero,0(r16)
    b174:	80000115 	stw	zero,4(r16)
    b178:	008006c4 	movi	r2,27
    b17c:	11801a2e 	bgeu	r2,r6,b1e8 <_calloc_r+0xb4>
    b180:	80000215 	stw	zero,8(r16)
    b184:	80000315 	stw	zero,12(r16)
    b188:	30c0151e 	bne	r6,r3,b1e0 <_calloc_r+0xac>
    b18c:	80000415 	stw	zero,16(r16)
    b190:	80800604 	addi	r2,r16,24
    b194:	80000515 	stw	zero,20(r16)
    b198:	00000106 	br	b1a0 <_calloc_r+0x6c>
    b19c:	8005883a 	mov	r2,r16
    b1a0:	10000015 	stw	zero,0(r2)
    b1a4:	10000115 	stw	zero,4(r2)
    b1a8:	10000215 	stw	zero,8(r2)
    b1ac:	8005883a 	mov	r2,r16
    b1b0:	dfc00117 	ldw	ra,4(sp)
    b1b4:	dc000017 	ldw	r16,0(sp)
    b1b8:	dec00204 	addi	sp,sp,8
    b1bc:	f800283a 	ret
    b1c0:	000b883a 	mov	r5,zero
    b1c4:	8009883a 	mov	r4,r16
    b1c8:	00081240 	call	8124 <memset>
    b1cc:	8005883a 	mov	r2,r16
    b1d0:	dfc00117 	ldw	ra,4(sp)
    b1d4:	dc000017 	ldw	r16,0(sp)
    b1d8:	dec00204 	addi	sp,sp,8
    b1dc:	f800283a 	ret
    b1e0:	80800404 	addi	r2,r16,16
    b1e4:	003fee06 	br	b1a0 <__alt_data_end+0xff00b1a0>
    b1e8:	80800204 	addi	r2,r16,8
    b1ec:	003fec06 	br	b1a0 <__alt_data_end+0xff00b1a0>
    b1f0:	0005883a 	mov	r2,zero
    b1f4:	003fee06 	br	b1b0 <__alt_data_end+0xff00b1b0>

0000b1f8 <_fclose_r>:
    b1f8:	28003926 	beq	r5,zero,b2e0 <_fclose_r+0xe8>
    b1fc:	defffc04 	addi	sp,sp,-16
    b200:	dc400115 	stw	r17,4(sp)
    b204:	dc000015 	stw	r16,0(sp)
    b208:	dfc00315 	stw	ra,12(sp)
    b20c:	dc800215 	stw	r18,8(sp)
    b210:	2023883a 	mov	r17,r4
    b214:	2821883a 	mov	r16,r5
    b218:	20000226 	beq	r4,zero,b224 <_fclose_r+0x2c>
    b21c:	20800e17 	ldw	r2,56(r4)
    b220:	10002726 	beq	r2,zero,b2c0 <_fclose_r+0xc8>
    b224:	8080030f 	ldh	r2,12(r16)
    b228:	1000071e 	bne	r2,zero,b248 <_fclose_r+0x50>
    b22c:	0005883a 	mov	r2,zero
    b230:	dfc00317 	ldw	ra,12(sp)
    b234:	dc800217 	ldw	r18,8(sp)
    b238:	dc400117 	ldw	r17,4(sp)
    b23c:	dc000017 	ldw	r16,0(sp)
    b240:	dec00404 	addi	sp,sp,16
    b244:	f800283a 	ret
    b248:	800b883a 	mov	r5,r16
    b24c:	8809883a 	mov	r4,r17
    b250:	0006a440 	call	6a44 <__sflush_r>
    b254:	1025883a 	mov	r18,r2
    b258:	80800b17 	ldw	r2,44(r16)
    b25c:	10000426 	beq	r2,zero,b270 <_fclose_r+0x78>
    b260:	81400717 	ldw	r5,28(r16)
    b264:	8809883a 	mov	r4,r17
    b268:	103ee83a 	callr	r2
    b26c:	10001616 	blt	r2,zero,b2c8 <_fclose_r+0xd0>
    b270:	8080030b 	ldhu	r2,12(r16)
    b274:	1080200c 	andi	r2,r2,128
    b278:	1000151e 	bne	r2,zero,b2d0 <_fclose_r+0xd8>
    b27c:	81400c17 	ldw	r5,48(r16)
    b280:	28000526 	beq	r5,zero,b298 <_fclose_r+0xa0>
    b284:	80801004 	addi	r2,r16,64
    b288:	28800226 	beq	r5,r2,b294 <_fclose_r+0x9c>
    b28c:	8809883a 	mov	r4,r17
    b290:	00071b00 	call	71b0 <_free_r>
    b294:	80000c15 	stw	zero,48(r16)
    b298:	81401117 	ldw	r5,68(r16)
    b29c:	28000326 	beq	r5,zero,b2ac <_fclose_r+0xb4>
    b2a0:	8809883a 	mov	r4,r17
    b2a4:	00071b00 	call	71b0 <_free_r>
    b2a8:	80001115 	stw	zero,68(r16)
    b2ac:	000704c0 	call	704c <__sfp_lock_acquire>
    b2b0:	8000030d 	sth	zero,12(r16)
    b2b4:	00070500 	call	7050 <__sfp_lock_release>
    b2b8:	9005883a 	mov	r2,r18
    b2bc:	003fdc06 	br	b230 <__alt_data_end+0xff00b230>
    b2c0:	000703c0 	call	703c <__sinit>
    b2c4:	003fd706 	br	b224 <__alt_data_end+0xff00b224>
    b2c8:	04bfffc4 	movi	r18,-1
    b2cc:	003fe806 	br	b270 <__alt_data_end+0xff00b270>
    b2d0:	81400417 	ldw	r5,16(r16)
    b2d4:	8809883a 	mov	r4,r17
    b2d8:	00071b00 	call	71b0 <_free_r>
    b2dc:	003fe706 	br	b27c <__alt_data_end+0xff00b27c>
    b2e0:	0005883a 	mov	r2,zero
    b2e4:	f800283a 	ret

0000b2e8 <fclose>:
    b2e8:	00800074 	movhi	r2,1
    b2ec:	108e4d04 	addi	r2,r2,14644
    b2f0:	200b883a 	mov	r5,r4
    b2f4:	11000017 	ldw	r4,0(r2)
    b2f8:	000b1f81 	jmpi	b1f8 <_fclose_r>

0000b2fc <__fputwc>:
    b2fc:	defff804 	addi	sp,sp,-32
    b300:	dcc00415 	stw	r19,16(sp)
    b304:	dc800315 	stw	r18,12(sp)
    b308:	dc000115 	stw	r16,4(sp)
    b30c:	dfc00715 	stw	ra,28(sp)
    b310:	dd400615 	stw	r21,24(sp)
    b314:	dd000515 	stw	r20,20(sp)
    b318:	dc400215 	stw	r17,8(sp)
    b31c:	2027883a 	mov	r19,r4
    b320:	2825883a 	mov	r18,r5
    b324:	3021883a 	mov	r16,r6
    b328:	0007b8c0 	call	7b8c <__locale_mb_cur_max>
    b32c:	00c00044 	movi	r3,1
    b330:	10c03e26 	beq	r2,r3,b42c <__fputwc+0x130>
    b334:	81c01704 	addi	r7,r16,92
    b338:	900d883a 	mov	r6,r18
    b33c:	d80b883a 	mov	r5,sp
    b340:	9809883a 	mov	r4,r19
    b344:	000b7cc0 	call	b7cc <_wcrtomb_r>
    b348:	1029883a 	mov	r20,r2
    b34c:	00bfffc4 	movi	r2,-1
    b350:	a0802026 	beq	r20,r2,b3d4 <__fputwc+0xd8>
    b354:	d9400003 	ldbu	r5,0(sp)
    b358:	a0001c26 	beq	r20,zero,b3cc <__fputwc+0xd0>
    b35c:	0023883a 	mov	r17,zero
    b360:	05400284 	movi	r21,10
    b364:	00000906 	br	b38c <__fputwc+0x90>
    b368:	80800017 	ldw	r2,0(r16)
    b36c:	11400005 	stb	r5,0(r2)
    b370:	80c00017 	ldw	r3,0(r16)
    b374:	18c00044 	addi	r3,r3,1
    b378:	80c00015 	stw	r3,0(r16)
    b37c:	8c400044 	addi	r17,r17,1
    b380:	dc45883a 	add	r2,sp,r17
    b384:	8d00112e 	bgeu	r17,r20,b3cc <__fputwc+0xd0>
    b388:	11400003 	ldbu	r5,0(r2)
    b38c:	80c00217 	ldw	r3,8(r16)
    b390:	18ffffc4 	addi	r3,r3,-1
    b394:	80c00215 	stw	r3,8(r16)
    b398:	183ff30e 	bge	r3,zero,b368 <__alt_data_end+0xff00b368>
    b39c:	80800617 	ldw	r2,24(r16)
    b3a0:	18801916 	blt	r3,r2,b408 <__fputwc+0x10c>
    b3a4:	80800017 	ldw	r2,0(r16)
    b3a8:	11400005 	stb	r5,0(r2)
    b3ac:	80800017 	ldw	r2,0(r16)
    b3b0:	10c00003 	ldbu	r3,0(r2)
    b3b4:	10800044 	addi	r2,r2,1
    b3b8:	1d402326 	beq	r3,r21,b448 <__fputwc+0x14c>
    b3bc:	80800015 	stw	r2,0(r16)
    b3c0:	8c400044 	addi	r17,r17,1
    b3c4:	dc45883a 	add	r2,sp,r17
    b3c8:	8d3fef36 	bltu	r17,r20,b388 <__alt_data_end+0xff00b388>
    b3cc:	9005883a 	mov	r2,r18
    b3d0:	00000406 	br	b3e4 <__fputwc+0xe8>
    b3d4:	80c0030b 	ldhu	r3,12(r16)
    b3d8:	a005883a 	mov	r2,r20
    b3dc:	18c01014 	ori	r3,r3,64
    b3e0:	80c0030d 	sth	r3,12(r16)
    b3e4:	dfc00717 	ldw	ra,28(sp)
    b3e8:	dd400617 	ldw	r21,24(sp)
    b3ec:	dd000517 	ldw	r20,20(sp)
    b3f0:	dcc00417 	ldw	r19,16(sp)
    b3f4:	dc800317 	ldw	r18,12(sp)
    b3f8:	dc400217 	ldw	r17,8(sp)
    b3fc:	dc000117 	ldw	r16,4(sp)
    b400:	dec00804 	addi	sp,sp,32
    b404:	f800283a 	ret
    b408:	800d883a 	mov	r6,r16
    b40c:	29403fcc 	andi	r5,r5,255
    b410:	9809883a 	mov	r4,r19
    b414:	000b6740 	call	b674 <__swbuf_r>
    b418:	10bfffe0 	cmpeqi	r2,r2,-1
    b41c:	10803fcc 	andi	r2,r2,255
    b420:	103fd626 	beq	r2,zero,b37c <__alt_data_end+0xff00b37c>
    b424:	00bfffc4 	movi	r2,-1
    b428:	003fee06 	br	b3e4 <__alt_data_end+0xff00b3e4>
    b42c:	90ffffc4 	addi	r3,r18,-1
    b430:	01003f84 	movi	r4,254
    b434:	20ffbf36 	bltu	r4,r3,b334 <__alt_data_end+0xff00b334>
    b438:	900b883a 	mov	r5,r18
    b43c:	dc800005 	stb	r18,0(sp)
    b440:	1029883a 	mov	r20,r2
    b444:	003fc506 	br	b35c <__alt_data_end+0xff00b35c>
    b448:	800d883a 	mov	r6,r16
    b44c:	a80b883a 	mov	r5,r21
    b450:	9809883a 	mov	r4,r19
    b454:	000b6740 	call	b674 <__swbuf_r>
    b458:	10bfffe0 	cmpeqi	r2,r2,-1
    b45c:	003fef06 	br	b41c <__alt_data_end+0xff00b41c>

0000b460 <_fputwc_r>:
    b460:	3080030b 	ldhu	r2,12(r6)
    b464:	10c8000c 	andi	r3,r2,8192
    b468:	1800051e 	bne	r3,zero,b480 <_fputwc_r+0x20>
    b46c:	30c01917 	ldw	r3,100(r6)
    b470:	10880014 	ori	r2,r2,8192
    b474:	3080030d 	sth	r2,12(r6)
    b478:	18880014 	ori	r2,r3,8192
    b47c:	30801915 	stw	r2,100(r6)
    b480:	000b2fc1 	jmpi	b2fc <__fputwc>

0000b484 <fputwc>:
    b484:	00800074 	movhi	r2,1
    b488:	defffc04 	addi	sp,sp,-16
    b48c:	108e4d04 	addi	r2,r2,14644
    b490:	dc000115 	stw	r16,4(sp)
    b494:	14000017 	ldw	r16,0(r2)
    b498:	dc400215 	stw	r17,8(sp)
    b49c:	dfc00315 	stw	ra,12(sp)
    b4a0:	2023883a 	mov	r17,r4
    b4a4:	80000226 	beq	r16,zero,b4b0 <fputwc+0x2c>
    b4a8:	80800e17 	ldw	r2,56(r16)
    b4ac:	10001026 	beq	r2,zero,b4f0 <fputwc+0x6c>
    b4b0:	2880030b 	ldhu	r2,12(r5)
    b4b4:	10c8000c 	andi	r3,r2,8192
    b4b8:	1800051e 	bne	r3,zero,b4d0 <fputwc+0x4c>
    b4bc:	28c01917 	ldw	r3,100(r5)
    b4c0:	10880014 	ori	r2,r2,8192
    b4c4:	2880030d 	sth	r2,12(r5)
    b4c8:	18880014 	ori	r2,r3,8192
    b4cc:	28801915 	stw	r2,100(r5)
    b4d0:	280d883a 	mov	r6,r5
    b4d4:	8009883a 	mov	r4,r16
    b4d8:	880b883a 	mov	r5,r17
    b4dc:	dfc00317 	ldw	ra,12(sp)
    b4e0:	dc400217 	ldw	r17,8(sp)
    b4e4:	dc000117 	ldw	r16,4(sp)
    b4e8:	dec00404 	addi	sp,sp,16
    b4ec:	000b2fc1 	jmpi	b2fc <__fputwc>
    b4f0:	8009883a 	mov	r4,r16
    b4f4:	d9400015 	stw	r5,0(sp)
    b4f8:	000703c0 	call	703c <__sinit>
    b4fc:	d9400017 	ldw	r5,0(sp)
    b500:	003feb06 	br	b4b0 <__alt_data_end+0xff00b4b0>

0000b504 <_fstat_r>:
    b504:	defffd04 	addi	sp,sp,-12
    b508:	2805883a 	mov	r2,r5
    b50c:	dc000015 	stw	r16,0(sp)
    b510:	04000074 	movhi	r16,1
    b514:	dc400115 	stw	r17,4(sp)
    b518:	84152204 	addi	r16,r16,21640
    b51c:	2023883a 	mov	r17,r4
    b520:	300b883a 	mov	r5,r6
    b524:	1009883a 	mov	r4,r2
    b528:	dfc00215 	stw	ra,8(sp)
    b52c:	80000015 	stw	zero,0(r16)
    b530:	000edf40 	call	edf4 <fstat>
    b534:	00ffffc4 	movi	r3,-1
    b538:	10c00526 	beq	r2,r3,b550 <_fstat_r+0x4c>
    b53c:	dfc00217 	ldw	ra,8(sp)
    b540:	dc400117 	ldw	r17,4(sp)
    b544:	dc000017 	ldw	r16,0(sp)
    b548:	dec00304 	addi	sp,sp,12
    b54c:	f800283a 	ret
    b550:	80c00017 	ldw	r3,0(r16)
    b554:	183ff926 	beq	r3,zero,b53c <__alt_data_end+0xff00b53c>
    b558:	88c00015 	stw	r3,0(r17)
    b55c:	003ff706 	br	b53c <__alt_data_end+0xff00b53c>

0000b560 <_isatty_r>:
    b560:	defffd04 	addi	sp,sp,-12
    b564:	dc000015 	stw	r16,0(sp)
    b568:	04000074 	movhi	r16,1
    b56c:	dc400115 	stw	r17,4(sp)
    b570:	84152204 	addi	r16,r16,21640
    b574:	2023883a 	mov	r17,r4
    b578:	2809883a 	mov	r4,r5
    b57c:	dfc00215 	stw	ra,8(sp)
    b580:	80000015 	stw	zero,0(r16)
    b584:	000eee00 	call	eee0 <isatty>
    b588:	00ffffc4 	movi	r3,-1
    b58c:	10c00526 	beq	r2,r3,b5a4 <_isatty_r+0x44>
    b590:	dfc00217 	ldw	ra,8(sp)
    b594:	dc400117 	ldw	r17,4(sp)
    b598:	dc000017 	ldw	r16,0(sp)
    b59c:	dec00304 	addi	sp,sp,12
    b5a0:	f800283a 	ret
    b5a4:	80c00017 	ldw	r3,0(r16)
    b5a8:	183ff926 	beq	r3,zero,b590 <__alt_data_end+0xff00b590>
    b5ac:	88c00015 	stw	r3,0(r17)
    b5b0:	003ff706 	br	b590 <__alt_data_end+0xff00b590>

0000b5b4 <_lseek_r>:
    b5b4:	defffd04 	addi	sp,sp,-12
    b5b8:	2805883a 	mov	r2,r5
    b5bc:	dc000015 	stw	r16,0(sp)
    b5c0:	04000074 	movhi	r16,1
    b5c4:	dc400115 	stw	r17,4(sp)
    b5c8:	300b883a 	mov	r5,r6
    b5cc:	84152204 	addi	r16,r16,21640
    b5d0:	2023883a 	mov	r17,r4
    b5d4:	380d883a 	mov	r6,r7
    b5d8:	1009883a 	mov	r4,r2
    b5dc:	dfc00215 	stw	ra,8(sp)
    b5e0:	80000015 	stw	zero,0(r16)
    b5e4:	000f0ac0 	call	f0ac <lseek>
    b5e8:	00ffffc4 	movi	r3,-1
    b5ec:	10c00526 	beq	r2,r3,b604 <_lseek_r+0x50>
    b5f0:	dfc00217 	ldw	ra,8(sp)
    b5f4:	dc400117 	ldw	r17,4(sp)
    b5f8:	dc000017 	ldw	r16,0(sp)
    b5fc:	dec00304 	addi	sp,sp,12
    b600:	f800283a 	ret
    b604:	80c00017 	ldw	r3,0(r16)
    b608:	183ff926 	beq	r3,zero,b5f0 <__alt_data_end+0xff00b5f0>
    b60c:	88c00015 	stw	r3,0(r17)
    b610:	003ff706 	br	b5f0 <__alt_data_end+0xff00b5f0>

0000b614 <_read_r>:
    b614:	defffd04 	addi	sp,sp,-12
    b618:	2805883a 	mov	r2,r5
    b61c:	dc000015 	stw	r16,0(sp)
    b620:	04000074 	movhi	r16,1
    b624:	dc400115 	stw	r17,4(sp)
    b628:	300b883a 	mov	r5,r6
    b62c:	84152204 	addi	r16,r16,21640
    b630:	2023883a 	mov	r17,r4
    b634:	380d883a 	mov	r6,r7
    b638:	1009883a 	mov	r4,r2
    b63c:	dfc00215 	stw	ra,8(sp)
    b640:	80000015 	stw	zero,0(r16)
    b644:	000f2800 	call	f280 <read>
    b648:	00ffffc4 	movi	r3,-1
    b64c:	10c00526 	beq	r2,r3,b664 <_read_r+0x50>
    b650:	dfc00217 	ldw	ra,8(sp)
    b654:	dc400117 	ldw	r17,4(sp)
    b658:	dc000017 	ldw	r16,0(sp)
    b65c:	dec00304 	addi	sp,sp,12
    b660:	f800283a 	ret
    b664:	80c00017 	ldw	r3,0(r16)
    b668:	183ff926 	beq	r3,zero,b650 <__alt_data_end+0xff00b650>
    b66c:	88c00015 	stw	r3,0(r17)
    b670:	003ff706 	br	b650 <__alt_data_end+0xff00b650>

0000b674 <__swbuf_r>:
    b674:	defffb04 	addi	sp,sp,-20
    b678:	dcc00315 	stw	r19,12(sp)
    b67c:	dc800215 	stw	r18,8(sp)
    b680:	dc000015 	stw	r16,0(sp)
    b684:	dfc00415 	stw	ra,16(sp)
    b688:	dc400115 	stw	r17,4(sp)
    b68c:	2025883a 	mov	r18,r4
    b690:	2827883a 	mov	r19,r5
    b694:	3021883a 	mov	r16,r6
    b698:	20000226 	beq	r4,zero,b6a4 <__swbuf_r+0x30>
    b69c:	20800e17 	ldw	r2,56(r4)
    b6a0:	10004226 	beq	r2,zero,b7ac <__swbuf_r+0x138>
    b6a4:	80800617 	ldw	r2,24(r16)
    b6a8:	8100030b 	ldhu	r4,12(r16)
    b6ac:	80800215 	stw	r2,8(r16)
    b6b0:	2080020c 	andi	r2,r4,8
    b6b4:	10003626 	beq	r2,zero,b790 <__swbuf_r+0x11c>
    b6b8:	80c00417 	ldw	r3,16(r16)
    b6bc:	18003426 	beq	r3,zero,b790 <__swbuf_r+0x11c>
    b6c0:	2088000c 	andi	r2,r4,8192
    b6c4:	9c403fcc 	andi	r17,r19,255
    b6c8:	10001a26 	beq	r2,zero,b734 <__swbuf_r+0xc0>
    b6cc:	80800017 	ldw	r2,0(r16)
    b6d0:	81000517 	ldw	r4,20(r16)
    b6d4:	10c7c83a 	sub	r3,r2,r3
    b6d8:	1900200e 	bge	r3,r4,b75c <__swbuf_r+0xe8>
    b6dc:	18c00044 	addi	r3,r3,1
    b6e0:	81000217 	ldw	r4,8(r16)
    b6e4:	11400044 	addi	r5,r2,1
    b6e8:	81400015 	stw	r5,0(r16)
    b6ec:	213fffc4 	addi	r4,r4,-1
    b6f0:	81000215 	stw	r4,8(r16)
    b6f4:	14c00005 	stb	r19,0(r2)
    b6f8:	80800517 	ldw	r2,20(r16)
    b6fc:	10c01e26 	beq	r2,r3,b778 <__swbuf_r+0x104>
    b700:	8080030b 	ldhu	r2,12(r16)
    b704:	1080004c 	andi	r2,r2,1
    b708:	10000226 	beq	r2,zero,b714 <__swbuf_r+0xa0>
    b70c:	00800284 	movi	r2,10
    b710:	88801926 	beq	r17,r2,b778 <__swbuf_r+0x104>
    b714:	8805883a 	mov	r2,r17
    b718:	dfc00417 	ldw	ra,16(sp)
    b71c:	dcc00317 	ldw	r19,12(sp)
    b720:	dc800217 	ldw	r18,8(sp)
    b724:	dc400117 	ldw	r17,4(sp)
    b728:	dc000017 	ldw	r16,0(sp)
    b72c:	dec00504 	addi	sp,sp,20
    b730:	f800283a 	ret
    b734:	81401917 	ldw	r5,100(r16)
    b738:	00b7ffc4 	movi	r2,-8193
    b73c:	21080014 	ori	r4,r4,8192
    b740:	2884703a 	and	r2,r5,r2
    b744:	80801915 	stw	r2,100(r16)
    b748:	80800017 	ldw	r2,0(r16)
    b74c:	8100030d 	sth	r4,12(r16)
    b750:	81000517 	ldw	r4,20(r16)
    b754:	10c7c83a 	sub	r3,r2,r3
    b758:	193fe016 	blt	r3,r4,b6dc <__alt_data_end+0xff00b6dc>
    b75c:	800b883a 	mov	r5,r16
    b760:	9009883a 	mov	r4,r18
    b764:	0006c600 	call	6c60 <_fflush_r>
    b768:	1000071e 	bne	r2,zero,b788 <__swbuf_r+0x114>
    b76c:	80800017 	ldw	r2,0(r16)
    b770:	00c00044 	movi	r3,1
    b774:	003fda06 	br	b6e0 <__alt_data_end+0xff00b6e0>
    b778:	800b883a 	mov	r5,r16
    b77c:	9009883a 	mov	r4,r18
    b780:	0006c600 	call	6c60 <_fflush_r>
    b784:	103fe326 	beq	r2,zero,b714 <__alt_data_end+0xff00b714>
    b788:	00bfffc4 	movi	r2,-1
    b78c:	003fe206 	br	b718 <__alt_data_end+0xff00b718>
    b790:	800b883a 	mov	r5,r16
    b794:	9009883a 	mov	r4,r18
    b798:	00050680 	call	5068 <__swsetup_r>
    b79c:	103ffa1e 	bne	r2,zero,b788 <__alt_data_end+0xff00b788>
    b7a0:	8100030b 	ldhu	r4,12(r16)
    b7a4:	80c00417 	ldw	r3,16(r16)
    b7a8:	003fc506 	br	b6c0 <__alt_data_end+0xff00b6c0>
    b7ac:	000703c0 	call	703c <__sinit>
    b7b0:	003fbc06 	br	b6a4 <__alt_data_end+0xff00b6a4>

0000b7b4 <__swbuf>:
    b7b4:	00800074 	movhi	r2,1
    b7b8:	108e4d04 	addi	r2,r2,14644
    b7bc:	280d883a 	mov	r6,r5
    b7c0:	200b883a 	mov	r5,r4
    b7c4:	11000017 	ldw	r4,0(r2)
    b7c8:	000b6741 	jmpi	b674 <__swbuf_r>

0000b7cc <_wcrtomb_r>:
    b7cc:	defff604 	addi	sp,sp,-40
    b7d0:	00800074 	movhi	r2,1
    b7d4:	dc800815 	stw	r18,32(sp)
    b7d8:	dc400715 	stw	r17,28(sp)
    b7dc:	dc000615 	stw	r16,24(sp)
    b7e0:	108e4f04 	addi	r2,r2,14652
    b7e4:	dfc00915 	stw	ra,36(sp)
    b7e8:	2021883a 	mov	r16,r4
    b7ec:	3823883a 	mov	r17,r7
    b7f0:	14800017 	ldw	r18,0(r2)
    b7f4:	28001426 	beq	r5,zero,b848 <_wcrtomb_r+0x7c>
    b7f8:	d9400415 	stw	r5,16(sp)
    b7fc:	d9800515 	stw	r6,20(sp)
    b800:	0007b800 	call	7b80 <__locale_charset>
    b804:	d9800517 	ldw	r6,20(sp)
    b808:	d9400417 	ldw	r5,16(sp)
    b80c:	100f883a 	mov	r7,r2
    b810:	dc400015 	stw	r17,0(sp)
    b814:	8009883a 	mov	r4,r16
    b818:	903ee83a 	callr	r18
    b81c:	00ffffc4 	movi	r3,-1
    b820:	10c0031e 	bne	r2,r3,b830 <_wcrtomb_r+0x64>
    b824:	88000015 	stw	zero,0(r17)
    b828:	00c02284 	movi	r3,138
    b82c:	80c00015 	stw	r3,0(r16)
    b830:	dfc00917 	ldw	ra,36(sp)
    b834:	dc800817 	ldw	r18,32(sp)
    b838:	dc400717 	ldw	r17,28(sp)
    b83c:	dc000617 	ldw	r16,24(sp)
    b840:	dec00a04 	addi	sp,sp,40
    b844:	f800283a 	ret
    b848:	0007b800 	call	7b80 <__locale_charset>
    b84c:	100f883a 	mov	r7,r2
    b850:	dc400015 	stw	r17,0(sp)
    b854:	000d883a 	mov	r6,zero
    b858:	d9400104 	addi	r5,sp,4
    b85c:	8009883a 	mov	r4,r16
    b860:	903ee83a 	callr	r18
    b864:	003fed06 	br	b81c <__alt_data_end+0xff00b81c>

0000b868 <wcrtomb>:
    b868:	defff604 	addi	sp,sp,-40
    b86c:	00800074 	movhi	r2,1
    b870:	dc800615 	stw	r18,24(sp)
    b874:	dc400515 	stw	r17,20(sp)
    b878:	108e4d04 	addi	r2,r2,14644
    b87c:	dfc00915 	stw	ra,36(sp)
    b880:	dd000815 	stw	r20,32(sp)
    b884:	dcc00715 	stw	r19,28(sp)
    b888:	dc000415 	stw	r16,16(sp)
    b88c:	3025883a 	mov	r18,r6
    b890:	14400017 	ldw	r17,0(r2)
    b894:	20001926 	beq	r4,zero,b8fc <wcrtomb+0x94>
    b898:	00800074 	movhi	r2,1
    b89c:	108e4f04 	addi	r2,r2,14652
    b8a0:	15000017 	ldw	r20,0(r2)
    b8a4:	2021883a 	mov	r16,r4
    b8a8:	2827883a 	mov	r19,r5
    b8ac:	0007b800 	call	7b80 <__locale_charset>
    b8b0:	100f883a 	mov	r7,r2
    b8b4:	dc800015 	stw	r18,0(sp)
    b8b8:	980d883a 	mov	r6,r19
    b8bc:	800b883a 	mov	r5,r16
    b8c0:	8809883a 	mov	r4,r17
    b8c4:	a03ee83a 	callr	r20
    b8c8:	00ffffc4 	movi	r3,-1
    b8cc:	10c0031e 	bne	r2,r3,b8dc <wcrtomb+0x74>
    b8d0:	90000015 	stw	zero,0(r18)
    b8d4:	00c02284 	movi	r3,138
    b8d8:	88c00015 	stw	r3,0(r17)
    b8dc:	dfc00917 	ldw	ra,36(sp)
    b8e0:	dd000817 	ldw	r20,32(sp)
    b8e4:	dcc00717 	ldw	r19,28(sp)
    b8e8:	dc800617 	ldw	r18,24(sp)
    b8ec:	dc400517 	ldw	r17,20(sp)
    b8f0:	dc000417 	ldw	r16,16(sp)
    b8f4:	dec00a04 	addi	sp,sp,40
    b8f8:	f800283a 	ret
    b8fc:	00800074 	movhi	r2,1
    b900:	108e4f04 	addi	r2,r2,14652
    b904:	14000017 	ldw	r16,0(r2)
    b908:	0007b800 	call	7b80 <__locale_charset>
    b90c:	100f883a 	mov	r7,r2
    b910:	dc800015 	stw	r18,0(sp)
    b914:	000d883a 	mov	r6,zero
    b918:	d9400104 	addi	r5,sp,4
    b91c:	8809883a 	mov	r4,r17
    b920:	803ee83a 	callr	r16
    b924:	003fe806 	br	b8c8 <__alt_data_end+0xff00b8c8>

0000b928 <__ascii_wctomb>:
    b928:	28000526 	beq	r5,zero,b940 <__ascii_wctomb+0x18>
    b92c:	00803fc4 	movi	r2,255
    b930:	11800536 	bltu	r2,r6,b948 <__ascii_wctomb+0x20>
    b934:	29800005 	stb	r6,0(r5)
    b938:	00800044 	movi	r2,1
    b93c:	f800283a 	ret
    b940:	0005883a 	mov	r2,zero
    b944:	f800283a 	ret
    b948:	00802284 	movi	r2,138
    b94c:	20800015 	stw	r2,0(r4)
    b950:	00bfffc4 	movi	r2,-1
    b954:	f800283a 	ret

0000b958 <_wctomb_r>:
    b958:	00800074 	movhi	r2,1
    b95c:	defff904 	addi	sp,sp,-28
    b960:	108e4f04 	addi	r2,r2,14652
    b964:	dfc00615 	stw	ra,24(sp)
    b968:	dc400515 	stw	r17,20(sp)
    b96c:	dc000415 	stw	r16,16(sp)
    b970:	3823883a 	mov	r17,r7
    b974:	14000017 	ldw	r16,0(r2)
    b978:	d9000115 	stw	r4,4(sp)
    b97c:	d9400215 	stw	r5,8(sp)
    b980:	d9800315 	stw	r6,12(sp)
    b984:	0007b800 	call	7b80 <__locale_charset>
    b988:	d9800317 	ldw	r6,12(sp)
    b98c:	d9400217 	ldw	r5,8(sp)
    b990:	d9000117 	ldw	r4,4(sp)
    b994:	100f883a 	mov	r7,r2
    b998:	dc400015 	stw	r17,0(sp)
    b99c:	803ee83a 	callr	r16
    b9a0:	dfc00617 	ldw	ra,24(sp)
    b9a4:	dc400517 	ldw	r17,20(sp)
    b9a8:	dc000417 	ldw	r16,16(sp)
    b9ac:	dec00704 	addi	sp,sp,28
    b9b0:	f800283a 	ret

0000b9b4 <__udivdi3>:
    b9b4:	defff504 	addi	sp,sp,-44
    b9b8:	dcc00415 	stw	r19,16(sp)
    b9bc:	dc000115 	stw	r16,4(sp)
    b9c0:	dfc00a15 	stw	ra,40(sp)
    b9c4:	df000915 	stw	fp,36(sp)
    b9c8:	ddc00815 	stw	r23,32(sp)
    b9cc:	dd800715 	stw	r22,28(sp)
    b9d0:	dd400615 	stw	r21,24(sp)
    b9d4:	dd000515 	stw	r20,20(sp)
    b9d8:	dc800315 	stw	r18,12(sp)
    b9dc:	dc400215 	stw	r17,8(sp)
    b9e0:	2027883a 	mov	r19,r4
    b9e4:	2821883a 	mov	r16,r5
    b9e8:	3800411e 	bne	r7,zero,baf0 <__udivdi3+0x13c>
    b9ec:	3023883a 	mov	r17,r6
    b9f0:	2025883a 	mov	r18,r4
    b9f4:	2980522e 	bgeu	r5,r6,bb40 <__udivdi3+0x18c>
    b9f8:	00bfffd4 	movui	r2,65535
    b9fc:	282d883a 	mov	r22,r5
    ba00:	1180a836 	bltu	r2,r6,bca4 <__udivdi3+0x2f0>
    ba04:	00803fc4 	movi	r2,255
    ba08:	1185803a 	cmpltu	r2,r2,r6
    ba0c:	100490fa 	slli	r2,r2,3
    ba10:	3086d83a 	srl	r3,r6,r2
    ba14:	01000074 	movhi	r4,1
    ba18:	21075404 	addi	r4,r4,7504
    ba1c:	20c7883a 	add	r3,r4,r3
    ba20:	18c00003 	ldbu	r3,0(r3)
    ba24:	1885883a 	add	r2,r3,r2
    ba28:	00c00804 	movi	r3,32
    ba2c:	1887c83a 	sub	r3,r3,r2
    ba30:	18000526 	beq	r3,zero,ba48 <__udivdi3+0x94>
    ba34:	80e0983a 	sll	r16,r16,r3
    ba38:	9884d83a 	srl	r2,r19,r2
    ba3c:	30e2983a 	sll	r17,r6,r3
    ba40:	98e4983a 	sll	r18,r19,r3
    ba44:	142cb03a 	or	r22,r2,r16
    ba48:	882ad43a 	srli	r21,r17,16
    ba4c:	b009883a 	mov	r4,r22
    ba50:	8d3fffcc 	andi	r20,r17,65535
    ba54:	a80b883a 	mov	r5,r21
    ba58:	000c5c00 	call	c5c0 <__umodsi3>
    ba5c:	b009883a 	mov	r4,r22
    ba60:	a80b883a 	mov	r5,r21
    ba64:	1027883a 	mov	r19,r2
    ba68:	000c55c0 	call	c55c <__udivsi3>
    ba6c:	102d883a 	mov	r22,r2
    ba70:	9826943a 	slli	r19,r19,16
    ba74:	9004d43a 	srli	r2,r18,16
    ba78:	a5a1383a 	mul	r16,r20,r22
    ba7c:	14c4b03a 	or	r2,r2,r19
    ba80:	1400052e 	bgeu	r2,r16,ba98 <__udivdi3+0xe4>
    ba84:	1445883a 	add	r2,r2,r17
    ba88:	b0ffffc4 	addi	r3,r22,-1
    ba8c:	14400136 	bltu	r2,r17,ba94 <__udivdi3+0xe0>
    ba90:	14012336 	bltu	r2,r16,bf20 <__udivdi3+0x56c>
    ba94:	182d883a 	mov	r22,r3
    ba98:	1421c83a 	sub	r16,r2,r16
    ba9c:	a80b883a 	mov	r5,r21
    baa0:	8009883a 	mov	r4,r16
    baa4:	000c5c00 	call	c5c0 <__umodsi3>
    baa8:	1027883a 	mov	r19,r2
    baac:	a80b883a 	mov	r5,r21
    bab0:	8009883a 	mov	r4,r16
    bab4:	000c55c0 	call	c55c <__udivsi3>
    bab8:	9826943a 	slli	r19,r19,16
    babc:	a0a9383a 	mul	r20,r20,r2
    bac0:	94bfffcc 	andi	r18,r18,65535
    bac4:	94e4b03a 	or	r18,r18,r19
    bac8:	9500052e 	bgeu	r18,r20,bae0 <__udivdi3+0x12c>
    bacc:	8ca5883a 	add	r18,r17,r18
    bad0:	10ffffc4 	addi	r3,r2,-1
    bad4:	9440f136 	bltu	r18,r17,be9c <__udivdi3+0x4e8>
    bad8:	9500f02e 	bgeu	r18,r20,be9c <__udivdi3+0x4e8>
    badc:	10bfff84 	addi	r2,r2,-2
    bae0:	b00c943a 	slli	r6,r22,16
    bae4:	0007883a 	mov	r3,zero
    bae8:	3084b03a 	or	r2,r6,r2
    baec:	00005906 	br	bc54 <__udivdi3+0x2a0>
    baf0:	29c05636 	bltu	r5,r7,bc4c <__udivdi3+0x298>
    baf4:	00bfffd4 	movui	r2,65535
    baf8:	11c0622e 	bgeu	r2,r7,bc84 <__udivdi3+0x2d0>
    bafc:	00804034 	movhi	r2,256
    bb00:	10bfffc4 	addi	r2,r2,-1
    bb04:	11c0ee36 	bltu	r2,r7,bec0 <__udivdi3+0x50c>
    bb08:	00800404 	movi	r2,16
    bb0c:	3886d83a 	srl	r3,r7,r2
    bb10:	01000074 	movhi	r4,1
    bb14:	21075404 	addi	r4,r4,7504
    bb18:	20c7883a 	add	r3,r4,r3
    bb1c:	18c00003 	ldbu	r3,0(r3)
    bb20:	05400804 	movi	r21,32
    bb24:	1885883a 	add	r2,r3,r2
    bb28:	a8abc83a 	sub	r21,r21,r2
    bb2c:	a800621e 	bne	r21,zero,bcb8 <__udivdi3+0x304>
    bb30:	3c00e936 	bltu	r7,r16,bed8 <__udivdi3+0x524>
    bb34:	9985403a 	cmpgeu	r2,r19,r6
    bb38:	0007883a 	mov	r3,zero
    bb3c:	00004506 	br	bc54 <__udivdi3+0x2a0>
    bb40:	3000041e 	bne	r6,zero,bb54 <__udivdi3+0x1a0>
    bb44:	000b883a 	mov	r5,zero
    bb48:	01000044 	movi	r4,1
    bb4c:	000c55c0 	call	c55c <__udivsi3>
    bb50:	1023883a 	mov	r17,r2
    bb54:	00bfffd4 	movui	r2,65535
    bb58:	14404e2e 	bgeu	r2,r17,bc94 <__udivdi3+0x2e0>
    bb5c:	00804034 	movhi	r2,256
    bb60:	10bfffc4 	addi	r2,r2,-1
    bb64:	1440d836 	bltu	r2,r17,bec8 <__udivdi3+0x514>
    bb68:	00800404 	movi	r2,16
    bb6c:	8886d83a 	srl	r3,r17,r2
    bb70:	01000074 	movhi	r4,1
    bb74:	21075404 	addi	r4,r4,7504
    bb78:	20c7883a 	add	r3,r4,r3
    bb7c:	18c00003 	ldbu	r3,0(r3)
    bb80:	1885883a 	add	r2,r3,r2
    bb84:	00c00804 	movi	r3,32
    bb88:	1887c83a 	sub	r3,r3,r2
    bb8c:	18008f1e 	bne	r3,zero,bdcc <__udivdi3+0x418>
    bb90:	882ad43a 	srli	r21,r17,16
    bb94:	8461c83a 	sub	r16,r16,r17
    bb98:	8d3fffcc 	andi	r20,r17,65535
    bb9c:	00c00044 	movi	r3,1
    bba0:	8009883a 	mov	r4,r16
    bba4:	a80b883a 	mov	r5,r21
    bba8:	d8c00015 	stw	r3,0(sp)
    bbac:	000c5c00 	call	c5c0 <__umodsi3>
    bbb0:	8009883a 	mov	r4,r16
    bbb4:	a80b883a 	mov	r5,r21
    bbb8:	1027883a 	mov	r19,r2
    bbbc:	000c55c0 	call	c55c <__udivsi3>
    bbc0:	9826943a 	slli	r19,r19,16
    bbc4:	9008d43a 	srli	r4,r18,16
    bbc8:	1521383a 	mul	r16,r2,r20
    bbcc:	102d883a 	mov	r22,r2
    bbd0:	24c8b03a 	or	r4,r4,r19
    bbd4:	d8c00017 	ldw	r3,0(sp)
    bbd8:	2400052e 	bgeu	r4,r16,bbf0 <__udivdi3+0x23c>
    bbdc:	2449883a 	add	r4,r4,r17
    bbe0:	b0bfffc4 	addi	r2,r22,-1
    bbe4:	24400136 	bltu	r4,r17,bbec <__udivdi3+0x238>
    bbe8:	2400ca36 	bltu	r4,r16,bf14 <__udivdi3+0x560>
    bbec:	102d883a 	mov	r22,r2
    bbf0:	2421c83a 	sub	r16,r4,r16
    bbf4:	a80b883a 	mov	r5,r21
    bbf8:	8009883a 	mov	r4,r16
    bbfc:	d8c00015 	stw	r3,0(sp)
    bc00:	000c5c00 	call	c5c0 <__umodsi3>
    bc04:	1027883a 	mov	r19,r2
    bc08:	a80b883a 	mov	r5,r21
    bc0c:	8009883a 	mov	r4,r16
    bc10:	000c55c0 	call	c55c <__udivsi3>
    bc14:	9826943a 	slli	r19,r19,16
    bc18:	1529383a 	mul	r20,r2,r20
    bc1c:	94bfffcc 	andi	r18,r18,65535
    bc20:	94e4b03a 	or	r18,r18,r19
    bc24:	d8c00017 	ldw	r3,0(sp)
    bc28:	9500052e 	bgeu	r18,r20,bc40 <__udivdi3+0x28c>
    bc2c:	8ca5883a 	add	r18,r17,r18
    bc30:	113fffc4 	addi	r4,r2,-1
    bc34:	94409736 	bltu	r18,r17,be94 <__udivdi3+0x4e0>
    bc38:	9500962e 	bgeu	r18,r20,be94 <__udivdi3+0x4e0>
    bc3c:	10bfff84 	addi	r2,r2,-2
    bc40:	b00c943a 	slli	r6,r22,16
    bc44:	3084b03a 	or	r2,r6,r2
    bc48:	00000206 	br	bc54 <__udivdi3+0x2a0>
    bc4c:	0007883a 	mov	r3,zero
    bc50:	0005883a 	mov	r2,zero
    bc54:	dfc00a17 	ldw	ra,40(sp)
    bc58:	df000917 	ldw	fp,36(sp)
    bc5c:	ddc00817 	ldw	r23,32(sp)
    bc60:	dd800717 	ldw	r22,28(sp)
    bc64:	dd400617 	ldw	r21,24(sp)
    bc68:	dd000517 	ldw	r20,20(sp)
    bc6c:	dcc00417 	ldw	r19,16(sp)
    bc70:	dc800317 	ldw	r18,12(sp)
    bc74:	dc400217 	ldw	r17,8(sp)
    bc78:	dc000117 	ldw	r16,4(sp)
    bc7c:	dec00b04 	addi	sp,sp,44
    bc80:	f800283a 	ret
    bc84:	00803fc4 	movi	r2,255
    bc88:	11c5803a 	cmpltu	r2,r2,r7
    bc8c:	100490fa 	slli	r2,r2,3
    bc90:	003f9e06 	br	bb0c <__alt_data_end+0xff00bb0c>
    bc94:	00803fc4 	movi	r2,255
    bc98:	1445803a 	cmpltu	r2,r2,r17
    bc9c:	100490fa 	slli	r2,r2,3
    bca0:	003fb206 	br	bb6c <__alt_data_end+0xff00bb6c>
    bca4:	00804034 	movhi	r2,256
    bca8:	10bfffc4 	addi	r2,r2,-1
    bcac:	11808836 	bltu	r2,r6,bed0 <__udivdi3+0x51c>
    bcb0:	00800404 	movi	r2,16
    bcb4:	003f5606 	br	ba10 <__alt_data_end+0xff00ba10>
    bcb8:	30aed83a 	srl	r23,r6,r2
    bcbc:	3d4e983a 	sll	r7,r7,r21
    bcc0:	80acd83a 	srl	r22,r16,r2
    bcc4:	9884d83a 	srl	r2,r19,r2
    bcc8:	3deeb03a 	or	r23,r7,r23
    bccc:	b824d43a 	srli	r18,r23,16
    bcd0:	8560983a 	sll	r16,r16,r21
    bcd4:	b009883a 	mov	r4,r22
    bcd8:	900b883a 	mov	r5,r18
    bcdc:	3568983a 	sll	r20,r6,r21
    bce0:	1420b03a 	or	r16,r2,r16
    bce4:	000c5c00 	call	c5c0 <__umodsi3>
    bce8:	b009883a 	mov	r4,r22
    bcec:	900b883a 	mov	r5,r18
    bcf0:	1023883a 	mov	r17,r2
    bcf4:	000c55c0 	call	c55c <__udivsi3>
    bcf8:	8808943a 	slli	r4,r17,16
    bcfc:	bf3fffcc 	andi	fp,r23,65535
    bd00:	8006d43a 	srli	r3,r16,16
    bd04:	e0a3383a 	mul	r17,fp,r2
    bd08:	100d883a 	mov	r6,r2
    bd0c:	1906b03a 	or	r3,r3,r4
    bd10:	1c40042e 	bgeu	r3,r17,bd24 <__udivdi3+0x370>
    bd14:	1dc7883a 	add	r3,r3,r23
    bd18:	10bfffc4 	addi	r2,r2,-1
    bd1c:	1dc0752e 	bgeu	r3,r23,bef4 <__udivdi3+0x540>
    bd20:	100d883a 	mov	r6,r2
    bd24:	1c63c83a 	sub	r17,r3,r17
    bd28:	900b883a 	mov	r5,r18
    bd2c:	8809883a 	mov	r4,r17
    bd30:	d9800015 	stw	r6,0(sp)
    bd34:	000c5c00 	call	c5c0 <__umodsi3>
    bd38:	102d883a 	mov	r22,r2
    bd3c:	8809883a 	mov	r4,r17
    bd40:	900b883a 	mov	r5,r18
    bd44:	000c55c0 	call	c55c <__udivsi3>
    bd48:	b02c943a 	slli	r22,r22,16
    bd4c:	e089383a 	mul	r4,fp,r2
    bd50:	843fffcc 	andi	r16,r16,65535
    bd54:	85a0b03a 	or	r16,r16,r22
    bd58:	d9800017 	ldw	r6,0(sp)
    bd5c:	8100042e 	bgeu	r16,r4,bd70 <__udivdi3+0x3bc>
    bd60:	85e1883a 	add	r16,r16,r23
    bd64:	10ffffc4 	addi	r3,r2,-1
    bd68:	85c05e2e 	bgeu	r16,r23,bee4 <__udivdi3+0x530>
    bd6c:	1805883a 	mov	r2,r3
    bd70:	300c943a 	slli	r6,r6,16
    bd74:	a17fffcc 	andi	r5,r20,65535
    bd78:	a028d43a 	srli	r20,r20,16
    bd7c:	3084b03a 	or	r2,r6,r2
    bd80:	10ffffcc 	andi	r3,r2,65535
    bd84:	100cd43a 	srli	r6,r2,16
    bd88:	194f383a 	mul	r7,r3,r5
    bd8c:	1d07383a 	mul	r3,r3,r20
    bd90:	314b383a 	mul	r5,r6,r5
    bd94:	3810d43a 	srli	r8,r7,16
    bd98:	8121c83a 	sub	r16,r16,r4
    bd9c:	1947883a 	add	r3,r3,r5
    bda0:	40c7883a 	add	r3,r8,r3
    bda4:	350d383a 	mul	r6,r6,r20
    bda8:	1940022e 	bgeu	r3,r5,bdb4 <__udivdi3+0x400>
    bdac:	01000074 	movhi	r4,1
    bdb0:	310d883a 	add	r6,r6,r4
    bdb4:	1828d43a 	srli	r20,r3,16
    bdb8:	a18d883a 	add	r6,r20,r6
    bdbc:	81803e36 	bltu	r16,r6,beb8 <__udivdi3+0x504>
    bdc0:	81803826 	beq	r16,r6,bea4 <__udivdi3+0x4f0>
    bdc4:	0007883a 	mov	r3,zero
    bdc8:	003fa206 	br	bc54 <__alt_data_end+0xff00bc54>
    bdcc:	88e2983a 	sll	r17,r17,r3
    bdd0:	80a8d83a 	srl	r20,r16,r2
    bdd4:	80e0983a 	sll	r16,r16,r3
    bdd8:	882ad43a 	srli	r21,r17,16
    bddc:	9884d83a 	srl	r2,r19,r2
    bde0:	a009883a 	mov	r4,r20
    bde4:	a80b883a 	mov	r5,r21
    bde8:	142eb03a 	or	r23,r2,r16
    bdec:	98e4983a 	sll	r18,r19,r3
    bdf0:	000c5c00 	call	c5c0 <__umodsi3>
    bdf4:	a009883a 	mov	r4,r20
    bdf8:	a80b883a 	mov	r5,r21
    bdfc:	1021883a 	mov	r16,r2
    be00:	000c55c0 	call	c55c <__udivsi3>
    be04:	1039883a 	mov	fp,r2
    be08:	8d3fffcc 	andi	r20,r17,65535
    be0c:	8020943a 	slli	r16,r16,16
    be10:	b804d43a 	srli	r2,r23,16
    be14:	a72d383a 	mul	r22,r20,fp
    be18:	1404b03a 	or	r2,r2,r16
    be1c:	1580062e 	bgeu	r2,r22,be38 <__udivdi3+0x484>
    be20:	1445883a 	add	r2,r2,r17
    be24:	e0ffffc4 	addi	r3,fp,-1
    be28:	14403836 	bltu	r2,r17,bf0c <__udivdi3+0x558>
    be2c:	1580372e 	bgeu	r2,r22,bf0c <__udivdi3+0x558>
    be30:	e73fff84 	addi	fp,fp,-2
    be34:	1445883a 	add	r2,r2,r17
    be38:	15adc83a 	sub	r22,r2,r22
    be3c:	a80b883a 	mov	r5,r21
    be40:	b009883a 	mov	r4,r22
    be44:	000c5c00 	call	c5c0 <__umodsi3>
    be48:	1027883a 	mov	r19,r2
    be4c:	b009883a 	mov	r4,r22
    be50:	a80b883a 	mov	r5,r21
    be54:	000c55c0 	call	c55c <__udivsi3>
    be58:	9826943a 	slli	r19,r19,16
    be5c:	a0a1383a 	mul	r16,r20,r2
    be60:	b93fffcc 	andi	r4,r23,65535
    be64:	24c8b03a 	or	r4,r4,r19
    be68:	2400062e 	bgeu	r4,r16,be84 <__udivdi3+0x4d0>
    be6c:	2449883a 	add	r4,r4,r17
    be70:	10ffffc4 	addi	r3,r2,-1
    be74:	24402336 	bltu	r4,r17,bf04 <__udivdi3+0x550>
    be78:	2400222e 	bgeu	r4,r16,bf04 <__udivdi3+0x550>
    be7c:	10bfff84 	addi	r2,r2,-2
    be80:	2449883a 	add	r4,r4,r17
    be84:	e038943a 	slli	fp,fp,16
    be88:	2421c83a 	sub	r16,r4,r16
    be8c:	e086b03a 	or	r3,fp,r2
    be90:	003f4306 	br	bba0 <__alt_data_end+0xff00bba0>
    be94:	2005883a 	mov	r2,r4
    be98:	003f6906 	br	bc40 <__alt_data_end+0xff00bc40>
    be9c:	1805883a 	mov	r2,r3
    bea0:	003f0f06 	br	bae0 <__alt_data_end+0xff00bae0>
    bea4:	1806943a 	slli	r3,r3,16
    bea8:	9d66983a 	sll	r19,r19,r21
    beac:	39ffffcc 	andi	r7,r7,65535
    beb0:	19c7883a 	add	r3,r3,r7
    beb4:	98ffc32e 	bgeu	r19,r3,bdc4 <__alt_data_end+0xff00bdc4>
    beb8:	10bfffc4 	addi	r2,r2,-1
    bebc:	003fc106 	br	bdc4 <__alt_data_end+0xff00bdc4>
    bec0:	00800604 	movi	r2,24
    bec4:	003f1106 	br	bb0c <__alt_data_end+0xff00bb0c>
    bec8:	00800604 	movi	r2,24
    becc:	003f2706 	br	bb6c <__alt_data_end+0xff00bb6c>
    bed0:	00800604 	movi	r2,24
    bed4:	003ece06 	br	ba10 <__alt_data_end+0xff00ba10>
    bed8:	0007883a 	mov	r3,zero
    bedc:	00800044 	movi	r2,1
    bee0:	003f5c06 	br	bc54 <__alt_data_end+0xff00bc54>
    bee4:	813fa12e 	bgeu	r16,r4,bd6c <__alt_data_end+0xff00bd6c>
    bee8:	10bfff84 	addi	r2,r2,-2
    beec:	85e1883a 	add	r16,r16,r23
    bef0:	003f9f06 	br	bd70 <__alt_data_end+0xff00bd70>
    bef4:	1c7f8a2e 	bgeu	r3,r17,bd20 <__alt_data_end+0xff00bd20>
    bef8:	31bfff84 	addi	r6,r6,-2
    befc:	1dc7883a 	add	r3,r3,r23
    bf00:	003f8806 	br	bd24 <__alt_data_end+0xff00bd24>
    bf04:	1805883a 	mov	r2,r3
    bf08:	003fde06 	br	be84 <__alt_data_end+0xff00be84>
    bf0c:	1839883a 	mov	fp,r3
    bf10:	003fc906 	br	be38 <__alt_data_end+0xff00be38>
    bf14:	b5bfff84 	addi	r22,r22,-2
    bf18:	2449883a 	add	r4,r4,r17
    bf1c:	003f3406 	br	bbf0 <__alt_data_end+0xff00bbf0>
    bf20:	b5bfff84 	addi	r22,r22,-2
    bf24:	1445883a 	add	r2,r2,r17
    bf28:	003edb06 	br	ba98 <__alt_data_end+0xff00ba98>

0000bf2c <__umoddi3>:
    bf2c:	defff404 	addi	sp,sp,-48
    bf30:	df000a15 	stw	fp,40(sp)
    bf34:	dc400315 	stw	r17,12(sp)
    bf38:	dc000215 	stw	r16,8(sp)
    bf3c:	dfc00b15 	stw	ra,44(sp)
    bf40:	ddc00915 	stw	r23,36(sp)
    bf44:	dd800815 	stw	r22,32(sp)
    bf48:	dd400715 	stw	r21,28(sp)
    bf4c:	dd000615 	stw	r20,24(sp)
    bf50:	dcc00515 	stw	r19,20(sp)
    bf54:	dc800415 	stw	r18,16(sp)
    bf58:	2021883a 	mov	r16,r4
    bf5c:	2823883a 	mov	r17,r5
    bf60:	2839883a 	mov	fp,r5
    bf64:	38003c1e 	bne	r7,zero,c058 <__umoddi3+0x12c>
    bf68:	3027883a 	mov	r19,r6
    bf6c:	2029883a 	mov	r20,r4
    bf70:	2980512e 	bgeu	r5,r6,c0b8 <__umoddi3+0x18c>
    bf74:	00bfffd4 	movui	r2,65535
    bf78:	11809a36 	bltu	r2,r6,c1e4 <__umoddi3+0x2b8>
    bf7c:	01003fc4 	movi	r4,255
    bf80:	2189803a 	cmpltu	r4,r4,r6
    bf84:	200890fa 	slli	r4,r4,3
    bf88:	3104d83a 	srl	r2,r6,r4
    bf8c:	00c00074 	movhi	r3,1
    bf90:	18c75404 	addi	r3,r3,7504
    bf94:	1885883a 	add	r2,r3,r2
    bf98:	10c00003 	ldbu	r3,0(r2)
    bf9c:	00800804 	movi	r2,32
    bfa0:	1909883a 	add	r4,r3,r4
    bfa4:	1125c83a 	sub	r18,r2,r4
    bfa8:	90000526 	beq	r18,zero,bfc0 <__umoddi3+0x94>
    bfac:	8ca2983a 	sll	r17,r17,r18
    bfb0:	8108d83a 	srl	r4,r16,r4
    bfb4:	34a6983a 	sll	r19,r6,r18
    bfb8:	84a8983a 	sll	r20,r16,r18
    bfbc:	2478b03a 	or	fp,r4,r17
    bfc0:	982ed43a 	srli	r23,r19,16
    bfc4:	e009883a 	mov	r4,fp
    bfc8:	9dbfffcc 	andi	r22,r19,65535
    bfcc:	b80b883a 	mov	r5,r23
    bfd0:	000c5c00 	call	c5c0 <__umodsi3>
    bfd4:	e009883a 	mov	r4,fp
    bfd8:	b80b883a 	mov	r5,r23
    bfdc:	102b883a 	mov	r21,r2
    bfe0:	000c55c0 	call	c55c <__udivsi3>
    bfe4:	a806943a 	slli	r3,r21,16
    bfe8:	a008d43a 	srli	r4,r20,16
    bfec:	b085383a 	mul	r2,r22,r2
    bff0:	20c8b03a 	or	r4,r4,r3
    bff4:	2080032e 	bgeu	r4,r2,c004 <__umoddi3+0xd8>
    bff8:	24c9883a 	add	r4,r4,r19
    bffc:	24c00136 	bltu	r4,r19,c004 <__umoddi3+0xd8>
    c000:	20811036 	bltu	r4,r2,c444 <__umoddi3+0x518>
    c004:	20abc83a 	sub	r21,r4,r2
    c008:	b80b883a 	mov	r5,r23
    c00c:	a809883a 	mov	r4,r21
    c010:	000c5c00 	call	c5c0 <__umodsi3>
    c014:	1023883a 	mov	r17,r2
    c018:	b80b883a 	mov	r5,r23
    c01c:	a809883a 	mov	r4,r21
    c020:	000c55c0 	call	c55c <__udivsi3>
    c024:	8822943a 	slli	r17,r17,16
    c028:	b085383a 	mul	r2,r22,r2
    c02c:	a0ffffcc 	andi	r3,r20,65535
    c030:	1c46b03a 	or	r3,r3,r17
    c034:	1880042e 	bgeu	r3,r2,c048 <__umoddi3+0x11c>
    c038:	1cc7883a 	add	r3,r3,r19
    c03c:	1cc00236 	bltu	r3,r19,c048 <__umoddi3+0x11c>
    c040:	1880012e 	bgeu	r3,r2,c048 <__umoddi3+0x11c>
    c044:	1cc7883a 	add	r3,r3,r19
    c048:	1885c83a 	sub	r2,r3,r2
    c04c:	1484d83a 	srl	r2,r2,r18
    c050:	0007883a 	mov	r3,zero
    c054:	00004f06 	br	c194 <__umoddi3+0x268>
    c058:	29c04c36 	bltu	r5,r7,c18c <__umoddi3+0x260>
    c05c:	00bfffd4 	movui	r2,65535
    c060:	11c0582e 	bgeu	r2,r7,c1c4 <__umoddi3+0x298>
    c064:	00804034 	movhi	r2,256
    c068:	10bfffc4 	addi	r2,r2,-1
    c06c:	11c0e736 	bltu	r2,r7,c40c <__umoddi3+0x4e0>
    c070:	01000404 	movi	r4,16
    c074:	3904d83a 	srl	r2,r7,r4
    c078:	00c00074 	movhi	r3,1
    c07c:	18c75404 	addi	r3,r3,7504
    c080:	1885883a 	add	r2,r3,r2
    c084:	14c00003 	ldbu	r19,0(r2)
    c088:	00c00804 	movi	r3,32
    c08c:	9927883a 	add	r19,r19,r4
    c090:	1ce9c83a 	sub	r20,r3,r19
    c094:	a000581e 	bne	r20,zero,c1f8 <__umoddi3+0x2cc>
    c098:	3c400136 	bltu	r7,r17,c0a0 <__umoddi3+0x174>
    c09c:	8180eb36 	bltu	r16,r6,c44c <__umoddi3+0x520>
    c0a0:	8185c83a 	sub	r2,r16,r6
    c0a4:	89e3c83a 	sub	r17,r17,r7
    c0a8:	8089803a 	cmpltu	r4,r16,r2
    c0ac:	8939c83a 	sub	fp,r17,r4
    c0b0:	e007883a 	mov	r3,fp
    c0b4:	00003706 	br	c194 <__umoddi3+0x268>
    c0b8:	3000041e 	bne	r6,zero,c0cc <__umoddi3+0x1a0>
    c0bc:	000b883a 	mov	r5,zero
    c0c0:	01000044 	movi	r4,1
    c0c4:	000c55c0 	call	c55c <__udivsi3>
    c0c8:	1027883a 	mov	r19,r2
    c0cc:	00bfffd4 	movui	r2,65535
    c0d0:	14c0402e 	bgeu	r2,r19,c1d4 <__umoddi3+0x2a8>
    c0d4:	00804034 	movhi	r2,256
    c0d8:	10bfffc4 	addi	r2,r2,-1
    c0dc:	14c0cd36 	bltu	r2,r19,c414 <__umoddi3+0x4e8>
    c0e0:	00800404 	movi	r2,16
    c0e4:	9886d83a 	srl	r3,r19,r2
    c0e8:	01000074 	movhi	r4,1
    c0ec:	21075404 	addi	r4,r4,7504
    c0f0:	20c7883a 	add	r3,r4,r3
    c0f4:	18c00003 	ldbu	r3,0(r3)
    c0f8:	1887883a 	add	r3,r3,r2
    c0fc:	00800804 	movi	r2,32
    c100:	10e5c83a 	sub	r18,r2,r3
    c104:	9000901e 	bne	r18,zero,c348 <__umoddi3+0x41c>
    c108:	982cd43a 	srli	r22,r19,16
    c10c:	8ce3c83a 	sub	r17,r17,r19
    c110:	9d7fffcc 	andi	r21,r19,65535
    c114:	b00b883a 	mov	r5,r22
    c118:	8809883a 	mov	r4,r17
    c11c:	000c5c00 	call	c5c0 <__umodsi3>
    c120:	8809883a 	mov	r4,r17
    c124:	b00b883a 	mov	r5,r22
    c128:	1021883a 	mov	r16,r2
    c12c:	000c55c0 	call	c55c <__udivsi3>
    c130:	8006943a 	slli	r3,r16,16
    c134:	a008d43a 	srli	r4,r20,16
    c138:	1545383a 	mul	r2,r2,r21
    c13c:	20c8b03a 	or	r4,r4,r3
    c140:	2080042e 	bgeu	r4,r2,c154 <__umoddi3+0x228>
    c144:	24c9883a 	add	r4,r4,r19
    c148:	24c00236 	bltu	r4,r19,c154 <__umoddi3+0x228>
    c14c:	2080012e 	bgeu	r4,r2,c154 <__umoddi3+0x228>
    c150:	24c9883a 	add	r4,r4,r19
    c154:	20a1c83a 	sub	r16,r4,r2
    c158:	b00b883a 	mov	r5,r22
    c15c:	8009883a 	mov	r4,r16
    c160:	000c5c00 	call	c5c0 <__umodsi3>
    c164:	1023883a 	mov	r17,r2
    c168:	b00b883a 	mov	r5,r22
    c16c:	8009883a 	mov	r4,r16
    c170:	000c55c0 	call	c55c <__udivsi3>
    c174:	8822943a 	slli	r17,r17,16
    c178:	1545383a 	mul	r2,r2,r21
    c17c:	a53fffcc 	andi	r20,r20,65535
    c180:	a446b03a 	or	r3,r20,r17
    c184:	18bfb02e 	bgeu	r3,r2,c048 <__alt_data_end+0xff00c048>
    c188:	003fab06 	br	c038 <__alt_data_end+0xff00c038>
    c18c:	2005883a 	mov	r2,r4
    c190:	2807883a 	mov	r3,r5
    c194:	dfc00b17 	ldw	ra,44(sp)
    c198:	df000a17 	ldw	fp,40(sp)
    c19c:	ddc00917 	ldw	r23,36(sp)
    c1a0:	dd800817 	ldw	r22,32(sp)
    c1a4:	dd400717 	ldw	r21,28(sp)
    c1a8:	dd000617 	ldw	r20,24(sp)
    c1ac:	dcc00517 	ldw	r19,20(sp)
    c1b0:	dc800417 	ldw	r18,16(sp)
    c1b4:	dc400317 	ldw	r17,12(sp)
    c1b8:	dc000217 	ldw	r16,8(sp)
    c1bc:	dec00c04 	addi	sp,sp,48
    c1c0:	f800283a 	ret
    c1c4:	04c03fc4 	movi	r19,255
    c1c8:	99c9803a 	cmpltu	r4,r19,r7
    c1cc:	200890fa 	slli	r4,r4,3
    c1d0:	003fa806 	br	c074 <__alt_data_end+0xff00c074>
    c1d4:	00803fc4 	movi	r2,255
    c1d8:	14c5803a 	cmpltu	r2,r2,r19
    c1dc:	100490fa 	slli	r2,r2,3
    c1e0:	003fc006 	br	c0e4 <__alt_data_end+0xff00c0e4>
    c1e4:	00804034 	movhi	r2,256
    c1e8:	10bfffc4 	addi	r2,r2,-1
    c1ec:	11808b36 	bltu	r2,r6,c41c <__umoddi3+0x4f0>
    c1f0:	01000404 	movi	r4,16
    c1f4:	003f6406 	br	bf88 <__alt_data_end+0xff00bf88>
    c1f8:	34c4d83a 	srl	r2,r6,r19
    c1fc:	3d0e983a 	sll	r7,r7,r20
    c200:	8cf8d83a 	srl	fp,r17,r19
    c204:	8d10983a 	sll	r8,r17,r20
    c208:	38aab03a 	or	r21,r7,r2
    c20c:	a82cd43a 	srli	r22,r21,16
    c210:	84e2d83a 	srl	r17,r16,r19
    c214:	e009883a 	mov	r4,fp
    c218:	b00b883a 	mov	r5,r22
    c21c:	8a22b03a 	or	r17,r17,r8
    c220:	3524983a 	sll	r18,r6,r20
    c224:	000c5c00 	call	c5c0 <__umodsi3>
    c228:	e009883a 	mov	r4,fp
    c22c:	b00b883a 	mov	r5,r22
    c230:	102f883a 	mov	r23,r2
    c234:	000c55c0 	call	c55c <__udivsi3>
    c238:	100d883a 	mov	r6,r2
    c23c:	b808943a 	slli	r4,r23,16
    c240:	aa3fffcc 	andi	r8,r21,65535
    c244:	8804d43a 	srli	r2,r17,16
    c248:	41af383a 	mul	r23,r8,r6
    c24c:	8520983a 	sll	r16,r16,r20
    c250:	1104b03a 	or	r2,r2,r4
    c254:	15c0042e 	bgeu	r2,r23,c268 <__umoddi3+0x33c>
    c258:	1545883a 	add	r2,r2,r21
    c25c:	30ffffc4 	addi	r3,r6,-1
    c260:	1540742e 	bgeu	r2,r21,c434 <__umoddi3+0x508>
    c264:	180d883a 	mov	r6,r3
    c268:	15efc83a 	sub	r23,r2,r23
    c26c:	b00b883a 	mov	r5,r22
    c270:	b809883a 	mov	r4,r23
    c274:	d9800115 	stw	r6,4(sp)
    c278:	da000015 	stw	r8,0(sp)
    c27c:	000c5c00 	call	c5c0 <__umodsi3>
    c280:	b00b883a 	mov	r5,r22
    c284:	b809883a 	mov	r4,r23
    c288:	1039883a 	mov	fp,r2
    c28c:	000c55c0 	call	c55c <__udivsi3>
    c290:	da000017 	ldw	r8,0(sp)
    c294:	e038943a 	slli	fp,fp,16
    c298:	100b883a 	mov	r5,r2
    c29c:	4089383a 	mul	r4,r8,r2
    c2a0:	8a3fffcc 	andi	r8,r17,65535
    c2a4:	4710b03a 	or	r8,r8,fp
    c2a8:	d9800117 	ldw	r6,4(sp)
    c2ac:	4100042e 	bgeu	r8,r4,c2c0 <__umoddi3+0x394>
    c2b0:	4551883a 	add	r8,r8,r21
    c2b4:	10bfffc4 	addi	r2,r2,-1
    c2b8:	45405a2e 	bgeu	r8,r21,c424 <__umoddi3+0x4f8>
    c2bc:	100b883a 	mov	r5,r2
    c2c0:	300c943a 	slli	r6,r6,16
    c2c4:	91ffffcc 	andi	r7,r18,65535
    c2c8:	9004d43a 	srli	r2,r18,16
    c2cc:	314cb03a 	or	r6,r6,r5
    c2d0:	317fffcc 	andi	r5,r6,65535
    c2d4:	300cd43a 	srli	r6,r6,16
    c2d8:	29d3383a 	mul	r9,r5,r7
    c2dc:	288b383a 	mul	r5,r5,r2
    c2e0:	31cf383a 	mul	r7,r6,r7
    c2e4:	4806d43a 	srli	r3,r9,16
    c2e8:	4111c83a 	sub	r8,r8,r4
    c2ec:	29cb883a 	add	r5,r5,r7
    c2f0:	194b883a 	add	r5,r3,r5
    c2f4:	3085383a 	mul	r2,r6,r2
    c2f8:	29c0022e 	bgeu	r5,r7,c304 <__umoddi3+0x3d8>
    c2fc:	00c00074 	movhi	r3,1
    c300:	10c5883a 	add	r2,r2,r3
    c304:	2808d43a 	srli	r4,r5,16
    c308:	280a943a 	slli	r5,r5,16
    c30c:	4a7fffcc 	andi	r9,r9,65535
    c310:	2085883a 	add	r2,r4,r2
    c314:	2a4b883a 	add	r5,r5,r9
    c318:	40803636 	bltu	r8,r2,c3f4 <__umoddi3+0x4c8>
    c31c:	40804d26 	beq	r8,r2,c454 <__umoddi3+0x528>
    c320:	4089c83a 	sub	r4,r8,r2
    c324:	280f883a 	mov	r7,r5
    c328:	81cfc83a 	sub	r7,r16,r7
    c32c:	81c7803a 	cmpltu	r3,r16,r7
    c330:	20c7c83a 	sub	r3,r4,r3
    c334:	1cc4983a 	sll	r2,r3,r19
    c338:	3d0ed83a 	srl	r7,r7,r20
    c33c:	1d06d83a 	srl	r3,r3,r20
    c340:	11c4b03a 	or	r2,r2,r7
    c344:	003f9306 	br	c194 <__alt_data_end+0xff00c194>
    c348:	9ca6983a 	sll	r19,r19,r18
    c34c:	88e8d83a 	srl	r20,r17,r3
    c350:	80c4d83a 	srl	r2,r16,r3
    c354:	982cd43a 	srli	r22,r19,16
    c358:	8ca2983a 	sll	r17,r17,r18
    c35c:	a009883a 	mov	r4,r20
    c360:	b00b883a 	mov	r5,r22
    c364:	1478b03a 	or	fp,r2,r17
    c368:	000c5c00 	call	c5c0 <__umodsi3>
    c36c:	a009883a 	mov	r4,r20
    c370:	b00b883a 	mov	r5,r22
    c374:	1023883a 	mov	r17,r2
    c378:	000c55c0 	call	c55c <__udivsi3>
    c37c:	9d7fffcc 	andi	r21,r19,65535
    c380:	880a943a 	slli	r5,r17,16
    c384:	e008d43a 	srli	r4,fp,16
    c388:	a885383a 	mul	r2,r21,r2
    c38c:	84a8983a 	sll	r20,r16,r18
    c390:	2148b03a 	or	r4,r4,r5
    c394:	2080042e 	bgeu	r4,r2,c3a8 <__umoddi3+0x47c>
    c398:	24c9883a 	add	r4,r4,r19
    c39c:	24c00236 	bltu	r4,r19,c3a8 <__umoddi3+0x47c>
    c3a0:	2080012e 	bgeu	r4,r2,c3a8 <__umoddi3+0x47c>
    c3a4:	24c9883a 	add	r4,r4,r19
    c3a8:	20a3c83a 	sub	r17,r4,r2
    c3ac:	b00b883a 	mov	r5,r22
    c3b0:	8809883a 	mov	r4,r17
    c3b4:	000c5c00 	call	c5c0 <__umodsi3>
    c3b8:	102f883a 	mov	r23,r2
    c3bc:	8809883a 	mov	r4,r17
    c3c0:	b00b883a 	mov	r5,r22
    c3c4:	000c55c0 	call	c55c <__udivsi3>
    c3c8:	b82e943a 	slli	r23,r23,16
    c3cc:	a885383a 	mul	r2,r21,r2
    c3d0:	e13fffcc 	andi	r4,fp,65535
    c3d4:	25c8b03a 	or	r4,r4,r23
    c3d8:	2080042e 	bgeu	r4,r2,c3ec <__umoddi3+0x4c0>
    c3dc:	24c9883a 	add	r4,r4,r19
    c3e0:	24c00236 	bltu	r4,r19,c3ec <__umoddi3+0x4c0>
    c3e4:	2080012e 	bgeu	r4,r2,c3ec <__umoddi3+0x4c0>
    c3e8:	24c9883a 	add	r4,r4,r19
    c3ec:	20a3c83a 	sub	r17,r4,r2
    c3f0:	003f4806 	br	c114 <__alt_data_end+0xff00c114>
    c3f4:	2c8fc83a 	sub	r7,r5,r18
    c3f8:	1545c83a 	sub	r2,r2,r21
    c3fc:	29cb803a 	cmpltu	r5,r5,r7
    c400:	1145c83a 	sub	r2,r2,r5
    c404:	4089c83a 	sub	r4,r8,r2
    c408:	003fc706 	br	c328 <__alt_data_end+0xff00c328>
    c40c:	01000604 	movi	r4,24
    c410:	003f1806 	br	c074 <__alt_data_end+0xff00c074>
    c414:	00800604 	movi	r2,24
    c418:	003f3206 	br	c0e4 <__alt_data_end+0xff00c0e4>
    c41c:	01000604 	movi	r4,24
    c420:	003ed906 	br	bf88 <__alt_data_end+0xff00bf88>
    c424:	413fa52e 	bgeu	r8,r4,c2bc <__alt_data_end+0xff00c2bc>
    c428:	297fff84 	addi	r5,r5,-2
    c42c:	4551883a 	add	r8,r8,r21
    c430:	003fa306 	br	c2c0 <__alt_data_end+0xff00c2c0>
    c434:	15ff8b2e 	bgeu	r2,r23,c264 <__alt_data_end+0xff00c264>
    c438:	31bfff84 	addi	r6,r6,-2
    c43c:	1545883a 	add	r2,r2,r21
    c440:	003f8906 	br	c268 <__alt_data_end+0xff00c268>
    c444:	24c9883a 	add	r4,r4,r19
    c448:	003eee06 	br	c004 <__alt_data_end+0xff00c004>
    c44c:	8005883a 	mov	r2,r16
    c450:	003f1706 	br	c0b0 <__alt_data_end+0xff00c0b0>
    c454:	817fe736 	bltu	r16,r5,c3f4 <__alt_data_end+0xff00c3f4>
    c458:	280f883a 	mov	r7,r5
    c45c:	0009883a 	mov	r4,zero
    c460:	003fb106 	br	c328 <__alt_data_end+0xff00c328>

0000c464 <__divsi3>:
    c464:	20001b16 	blt	r4,zero,c4d4 <__divsi3+0x70>
    c468:	000f883a 	mov	r7,zero
    c46c:	28001616 	blt	r5,zero,c4c8 <__divsi3+0x64>
    c470:	200d883a 	mov	r6,r4
    c474:	29001a2e 	bgeu	r5,r4,c4e0 <__divsi3+0x7c>
    c478:	00800804 	movi	r2,32
    c47c:	00c00044 	movi	r3,1
    c480:	00000106 	br	c488 <__divsi3+0x24>
    c484:	10000d26 	beq	r2,zero,c4bc <__divsi3+0x58>
    c488:	294b883a 	add	r5,r5,r5
    c48c:	10bfffc4 	addi	r2,r2,-1
    c490:	18c7883a 	add	r3,r3,r3
    c494:	293ffb36 	bltu	r5,r4,c484 <__alt_data_end+0xff00c484>
    c498:	0005883a 	mov	r2,zero
    c49c:	18000726 	beq	r3,zero,c4bc <__divsi3+0x58>
    c4a0:	0005883a 	mov	r2,zero
    c4a4:	31400236 	bltu	r6,r5,c4b0 <__divsi3+0x4c>
    c4a8:	314dc83a 	sub	r6,r6,r5
    c4ac:	10c4b03a 	or	r2,r2,r3
    c4b0:	1806d07a 	srli	r3,r3,1
    c4b4:	280ad07a 	srli	r5,r5,1
    c4b8:	183ffa1e 	bne	r3,zero,c4a4 <__alt_data_end+0xff00c4a4>
    c4bc:	38000126 	beq	r7,zero,c4c4 <__divsi3+0x60>
    c4c0:	0085c83a 	sub	r2,zero,r2
    c4c4:	f800283a 	ret
    c4c8:	014bc83a 	sub	r5,zero,r5
    c4cc:	39c0005c 	xori	r7,r7,1
    c4d0:	003fe706 	br	c470 <__alt_data_end+0xff00c470>
    c4d4:	0109c83a 	sub	r4,zero,r4
    c4d8:	01c00044 	movi	r7,1
    c4dc:	003fe306 	br	c46c <__alt_data_end+0xff00c46c>
    c4e0:	00c00044 	movi	r3,1
    c4e4:	003fee06 	br	c4a0 <__alt_data_end+0xff00c4a0>

0000c4e8 <__modsi3>:
    c4e8:	20001716 	blt	r4,zero,c548 <__modsi3+0x60>
    c4ec:	000f883a 	mov	r7,zero
    c4f0:	2005883a 	mov	r2,r4
    c4f4:	28001216 	blt	r5,zero,c540 <__modsi3+0x58>
    c4f8:	2900162e 	bgeu	r5,r4,c554 <__modsi3+0x6c>
    c4fc:	01800804 	movi	r6,32
    c500:	00c00044 	movi	r3,1
    c504:	00000106 	br	c50c <__modsi3+0x24>
    c508:	30000a26 	beq	r6,zero,c534 <__modsi3+0x4c>
    c50c:	294b883a 	add	r5,r5,r5
    c510:	31bfffc4 	addi	r6,r6,-1
    c514:	18c7883a 	add	r3,r3,r3
    c518:	293ffb36 	bltu	r5,r4,c508 <__alt_data_end+0xff00c508>
    c51c:	18000526 	beq	r3,zero,c534 <__modsi3+0x4c>
    c520:	1806d07a 	srli	r3,r3,1
    c524:	11400136 	bltu	r2,r5,c52c <__modsi3+0x44>
    c528:	1145c83a 	sub	r2,r2,r5
    c52c:	280ad07a 	srli	r5,r5,1
    c530:	183ffb1e 	bne	r3,zero,c520 <__alt_data_end+0xff00c520>
    c534:	38000126 	beq	r7,zero,c53c <__modsi3+0x54>
    c538:	0085c83a 	sub	r2,zero,r2
    c53c:	f800283a 	ret
    c540:	014bc83a 	sub	r5,zero,r5
    c544:	003fec06 	br	c4f8 <__alt_data_end+0xff00c4f8>
    c548:	0109c83a 	sub	r4,zero,r4
    c54c:	01c00044 	movi	r7,1
    c550:	003fe706 	br	c4f0 <__alt_data_end+0xff00c4f0>
    c554:	00c00044 	movi	r3,1
    c558:	003ff106 	br	c520 <__alt_data_end+0xff00c520>

0000c55c <__udivsi3>:
    c55c:	200d883a 	mov	r6,r4
    c560:	2900152e 	bgeu	r5,r4,c5b8 <__udivsi3+0x5c>
    c564:	28001416 	blt	r5,zero,c5b8 <__udivsi3+0x5c>
    c568:	00800804 	movi	r2,32
    c56c:	00c00044 	movi	r3,1
    c570:	00000206 	br	c57c <__udivsi3+0x20>
    c574:	10000e26 	beq	r2,zero,c5b0 <__udivsi3+0x54>
    c578:	28000516 	blt	r5,zero,c590 <__udivsi3+0x34>
    c57c:	294b883a 	add	r5,r5,r5
    c580:	10bfffc4 	addi	r2,r2,-1
    c584:	18c7883a 	add	r3,r3,r3
    c588:	293ffa36 	bltu	r5,r4,c574 <__alt_data_end+0xff00c574>
    c58c:	18000826 	beq	r3,zero,c5b0 <__udivsi3+0x54>
    c590:	0005883a 	mov	r2,zero
    c594:	31400236 	bltu	r6,r5,c5a0 <__udivsi3+0x44>
    c598:	314dc83a 	sub	r6,r6,r5
    c59c:	10c4b03a 	or	r2,r2,r3
    c5a0:	1806d07a 	srli	r3,r3,1
    c5a4:	280ad07a 	srli	r5,r5,1
    c5a8:	183ffa1e 	bne	r3,zero,c594 <__alt_data_end+0xff00c594>
    c5ac:	f800283a 	ret
    c5b0:	0005883a 	mov	r2,zero
    c5b4:	f800283a 	ret
    c5b8:	00c00044 	movi	r3,1
    c5bc:	003ff406 	br	c590 <__alt_data_end+0xff00c590>

0000c5c0 <__umodsi3>:
    c5c0:	2005883a 	mov	r2,r4
    c5c4:	2900122e 	bgeu	r5,r4,c610 <__umodsi3+0x50>
    c5c8:	28001116 	blt	r5,zero,c610 <__umodsi3+0x50>
    c5cc:	01800804 	movi	r6,32
    c5d0:	00c00044 	movi	r3,1
    c5d4:	00000206 	br	c5e0 <__umodsi3+0x20>
    c5d8:	30000c26 	beq	r6,zero,c60c <__umodsi3+0x4c>
    c5dc:	28000516 	blt	r5,zero,c5f4 <__umodsi3+0x34>
    c5e0:	294b883a 	add	r5,r5,r5
    c5e4:	31bfffc4 	addi	r6,r6,-1
    c5e8:	18c7883a 	add	r3,r3,r3
    c5ec:	293ffa36 	bltu	r5,r4,c5d8 <__alt_data_end+0xff00c5d8>
    c5f0:	18000626 	beq	r3,zero,c60c <__umodsi3+0x4c>
    c5f4:	1806d07a 	srli	r3,r3,1
    c5f8:	11400136 	bltu	r2,r5,c600 <__umodsi3+0x40>
    c5fc:	1145c83a 	sub	r2,r2,r5
    c600:	280ad07a 	srli	r5,r5,1
    c604:	183ffb1e 	bne	r3,zero,c5f4 <__alt_data_end+0xff00c5f4>
    c608:	f800283a 	ret
    c60c:	f800283a 	ret
    c610:	00c00044 	movi	r3,1
    c614:	003ff706 	br	c5f4 <__alt_data_end+0xff00c5f4>

0000c618 <__adddf3>:
    c618:	02c00434 	movhi	r11,16
    c61c:	5affffc4 	addi	r11,r11,-1
    c620:	2806d7fa 	srli	r3,r5,31
    c624:	2ad4703a 	and	r10,r5,r11
    c628:	3ad2703a 	and	r9,r7,r11
    c62c:	3804d53a 	srli	r2,r7,20
    c630:	3018d77a 	srli	r12,r6,29
    c634:	280ad53a 	srli	r5,r5,20
    c638:	501490fa 	slli	r10,r10,3
    c63c:	2010d77a 	srli	r8,r4,29
    c640:	481290fa 	slli	r9,r9,3
    c644:	380ed7fa 	srli	r7,r7,31
    c648:	defffb04 	addi	sp,sp,-20
    c64c:	dc800215 	stw	r18,8(sp)
    c650:	dc400115 	stw	r17,4(sp)
    c654:	dc000015 	stw	r16,0(sp)
    c658:	dfc00415 	stw	ra,16(sp)
    c65c:	dcc00315 	stw	r19,12(sp)
    c660:	1c803fcc 	andi	r18,r3,255
    c664:	2c01ffcc 	andi	r16,r5,2047
    c668:	5210b03a 	or	r8,r10,r8
    c66c:	202290fa 	slli	r17,r4,3
    c670:	1081ffcc 	andi	r2,r2,2047
    c674:	4b12b03a 	or	r9,r9,r12
    c678:	300c90fa 	slli	r6,r6,3
    c67c:	91c07526 	beq	r18,r7,c854 <__adddf3+0x23c>
    c680:	8087c83a 	sub	r3,r16,r2
    c684:	00c0ab0e 	bge	zero,r3,c934 <__adddf3+0x31c>
    c688:	10002a1e 	bne	r2,zero,c734 <__adddf3+0x11c>
    c68c:	4984b03a 	or	r2,r9,r6
    c690:	1000961e 	bne	r2,zero,c8ec <__adddf3+0x2d4>
    c694:	888001cc 	andi	r2,r17,7
    c698:	10000726 	beq	r2,zero,c6b8 <__adddf3+0xa0>
    c69c:	888003cc 	andi	r2,r17,15
    c6a0:	00c00104 	movi	r3,4
    c6a4:	10c00426 	beq	r2,r3,c6b8 <__adddf3+0xa0>
    c6a8:	88c7883a 	add	r3,r17,r3
    c6ac:	1c63803a 	cmpltu	r17,r3,r17
    c6b0:	4451883a 	add	r8,r8,r17
    c6b4:	1823883a 	mov	r17,r3
    c6b8:	4080202c 	andhi	r2,r8,128
    c6bc:	10005926 	beq	r2,zero,c824 <__adddf3+0x20c>
    c6c0:	84000044 	addi	r16,r16,1
    c6c4:	0081ffc4 	movi	r2,2047
    c6c8:	8080ba26 	beq	r16,r2,c9b4 <__adddf3+0x39c>
    c6cc:	00bfe034 	movhi	r2,65408
    c6d0:	10bfffc4 	addi	r2,r2,-1
    c6d4:	4090703a 	and	r8,r8,r2
    c6d8:	4004977a 	slli	r2,r8,29
    c6dc:	4010927a 	slli	r8,r8,9
    c6e0:	8822d0fa 	srli	r17,r17,3
    c6e4:	8401ffcc 	andi	r16,r16,2047
    c6e8:	4010d33a 	srli	r8,r8,12
    c6ec:	9007883a 	mov	r3,r18
    c6f0:	1444b03a 	or	r2,r2,r17
    c6f4:	8401ffcc 	andi	r16,r16,2047
    c6f8:	8020953a 	slli	r16,r16,20
    c6fc:	18c03fcc 	andi	r3,r3,255
    c700:	01000434 	movhi	r4,16
    c704:	213fffc4 	addi	r4,r4,-1
    c708:	180697fa 	slli	r3,r3,31
    c70c:	4110703a 	and	r8,r8,r4
    c710:	4410b03a 	or	r8,r8,r16
    c714:	40c6b03a 	or	r3,r8,r3
    c718:	dfc00417 	ldw	ra,16(sp)
    c71c:	dcc00317 	ldw	r19,12(sp)
    c720:	dc800217 	ldw	r18,8(sp)
    c724:	dc400117 	ldw	r17,4(sp)
    c728:	dc000017 	ldw	r16,0(sp)
    c72c:	dec00504 	addi	sp,sp,20
    c730:	f800283a 	ret
    c734:	0081ffc4 	movi	r2,2047
    c738:	80bfd626 	beq	r16,r2,c694 <__alt_data_end+0xff00c694>
    c73c:	4a402034 	orhi	r9,r9,128
    c740:	00800e04 	movi	r2,56
    c744:	10c09f16 	blt	r2,r3,c9c4 <__adddf3+0x3ac>
    c748:	008007c4 	movi	r2,31
    c74c:	10c0c216 	blt	r2,r3,ca58 <__adddf3+0x440>
    c750:	00800804 	movi	r2,32
    c754:	10c5c83a 	sub	r2,r2,r3
    c758:	488a983a 	sll	r5,r9,r2
    c75c:	30c8d83a 	srl	r4,r6,r3
    c760:	3084983a 	sll	r2,r6,r2
    c764:	48c6d83a 	srl	r3,r9,r3
    c768:	290cb03a 	or	r6,r5,r4
    c76c:	1004c03a 	cmpne	r2,r2,zero
    c770:	308cb03a 	or	r6,r6,r2
    c774:	898dc83a 	sub	r6,r17,r6
    c778:	89a3803a 	cmpltu	r17,r17,r6
    c77c:	40d1c83a 	sub	r8,r8,r3
    c780:	4451c83a 	sub	r8,r8,r17
    c784:	3023883a 	mov	r17,r6
    c788:	4080202c 	andhi	r2,r8,128
    c78c:	10002326 	beq	r2,zero,c81c <__adddf3+0x204>
    c790:	04c02034 	movhi	r19,128
    c794:	9cffffc4 	addi	r19,r19,-1
    c798:	44e6703a 	and	r19,r8,r19
    c79c:	98007626 	beq	r19,zero,c978 <__adddf3+0x360>
    c7a0:	9809883a 	mov	r4,r19
    c7a4:	000ec1c0 	call	ec1c <__clzsi2>
    c7a8:	10fffe04 	addi	r3,r2,-8
    c7ac:	010007c4 	movi	r4,31
    c7b0:	20c07716 	blt	r4,r3,c990 <__adddf3+0x378>
    c7b4:	00800804 	movi	r2,32
    c7b8:	10c5c83a 	sub	r2,r2,r3
    c7bc:	8884d83a 	srl	r2,r17,r2
    c7c0:	98d0983a 	sll	r8,r19,r3
    c7c4:	88e2983a 	sll	r17,r17,r3
    c7c8:	1204b03a 	or	r2,r2,r8
    c7cc:	1c007416 	blt	r3,r16,c9a0 <__adddf3+0x388>
    c7d0:	1c21c83a 	sub	r16,r3,r16
    c7d4:	82000044 	addi	r8,r16,1
    c7d8:	00c007c4 	movi	r3,31
    c7dc:	1a009116 	blt	r3,r8,ca24 <__adddf3+0x40c>
    c7e0:	00c00804 	movi	r3,32
    c7e4:	1a07c83a 	sub	r3,r3,r8
    c7e8:	8a08d83a 	srl	r4,r17,r8
    c7ec:	88e2983a 	sll	r17,r17,r3
    c7f0:	10c6983a 	sll	r3,r2,r3
    c7f4:	1210d83a 	srl	r8,r2,r8
    c7f8:	8804c03a 	cmpne	r2,r17,zero
    c7fc:	1906b03a 	or	r3,r3,r4
    c800:	18a2b03a 	or	r17,r3,r2
    c804:	0021883a 	mov	r16,zero
    c808:	003fa206 	br	c694 <__alt_data_end+0xff00c694>
    c80c:	1890b03a 	or	r8,r3,r2
    c810:	40017d26 	beq	r8,zero,ce08 <__adddf3+0x7f0>
    c814:	1011883a 	mov	r8,r2
    c818:	1823883a 	mov	r17,r3
    c81c:	888001cc 	andi	r2,r17,7
    c820:	103f9e1e 	bne	r2,zero,c69c <__alt_data_end+0xff00c69c>
    c824:	4004977a 	slli	r2,r8,29
    c828:	8822d0fa 	srli	r17,r17,3
    c82c:	4010d0fa 	srli	r8,r8,3
    c830:	9007883a 	mov	r3,r18
    c834:	1444b03a 	or	r2,r2,r17
    c838:	0101ffc4 	movi	r4,2047
    c83c:	81002426 	beq	r16,r4,c8d0 <__adddf3+0x2b8>
    c840:	8120703a 	and	r16,r16,r4
    c844:	01000434 	movhi	r4,16
    c848:	213fffc4 	addi	r4,r4,-1
    c84c:	4110703a 	and	r8,r8,r4
    c850:	003fa806 	br	c6f4 <__alt_data_end+0xff00c6f4>
    c854:	8089c83a 	sub	r4,r16,r2
    c858:	01005e0e 	bge	zero,r4,c9d4 <__adddf3+0x3bc>
    c85c:	10002b26 	beq	r2,zero,c90c <__adddf3+0x2f4>
    c860:	0081ffc4 	movi	r2,2047
    c864:	80bf8b26 	beq	r16,r2,c694 <__alt_data_end+0xff00c694>
    c868:	4a402034 	orhi	r9,r9,128
    c86c:	00800e04 	movi	r2,56
    c870:	1100a40e 	bge	r2,r4,cb04 <__adddf3+0x4ec>
    c874:	498cb03a 	or	r6,r9,r6
    c878:	300ac03a 	cmpne	r5,r6,zero
    c87c:	0013883a 	mov	r9,zero
    c880:	2c4b883a 	add	r5,r5,r17
    c884:	2c63803a 	cmpltu	r17,r5,r17
    c888:	4a11883a 	add	r8,r9,r8
    c88c:	8a11883a 	add	r8,r17,r8
    c890:	2823883a 	mov	r17,r5
    c894:	4080202c 	andhi	r2,r8,128
    c898:	103fe026 	beq	r2,zero,c81c <__alt_data_end+0xff00c81c>
    c89c:	84000044 	addi	r16,r16,1
    c8a0:	0081ffc4 	movi	r2,2047
    c8a4:	8080d226 	beq	r16,r2,cbf0 <__adddf3+0x5d8>
    c8a8:	00bfe034 	movhi	r2,65408
    c8ac:	10bfffc4 	addi	r2,r2,-1
    c8b0:	4090703a 	and	r8,r8,r2
    c8b4:	880ad07a 	srli	r5,r17,1
    c8b8:	400897fa 	slli	r4,r8,31
    c8bc:	88c0004c 	andi	r3,r17,1
    c8c0:	28e2b03a 	or	r17,r5,r3
    c8c4:	4010d07a 	srli	r8,r8,1
    c8c8:	2462b03a 	or	r17,r4,r17
    c8cc:	003f7106 	br	c694 <__alt_data_end+0xff00c694>
    c8d0:	4088b03a 	or	r4,r8,r2
    c8d4:	20014526 	beq	r4,zero,cdec <__adddf3+0x7d4>
    c8d8:	01000434 	movhi	r4,16
    c8dc:	42000234 	orhi	r8,r8,8
    c8e0:	213fffc4 	addi	r4,r4,-1
    c8e4:	4110703a 	and	r8,r8,r4
    c8e8:	003f8206 	br	c6f4 <__alt_data_end+0xff00c6f4>
    c8ec:	18ffffc4 	addi	r3,r3,-1
    c8f0:	1800491e 	bne	r3,zero,ca18 <__adddf3+0x400>
    c8f4:	898bc83a 	sub	r5,r17,r6
    c8f8:	8963803a 	cmpltu	r17,r17,r5
    c8fc:	4251c83a 	sub	r8,r8,r9
    c900:	4451c83a 	sub	r8,r8,r17
    c904:	2823883a 	mov	r17,r5
    c908:	003f9f06 	br	c788 <__alt_data_end+0xff00c788>
    c90c:	4984b03a 	or	r2,r9,r6
    c910:	103f6026 	beq	r2,zero,c694 <__alt_data_end+0xff00c694>
    c914:	213fffc4 	addi	r4,r4,-1
    c918:	2000931e 	bne	r4,zero,cb68 <__adddf3+0x550>
    c91c:	898d883a 	add	r6,r17,r6
    c920:	3463803a 	cmpltu	r17,r6,r17
    c924:	4251883a 	add	r8,r8,r9
    c928:	8a11883a 	add	r8,r17,r8
    c92c:	3023883a 	mov	r17,r6
    c930:	003fd806 	br	c894 <__alt_data_end+0xff00c894>
    c934:	1800541e 	bne	r3,zero,ca88 <__adddf3+0x470>
    c938:	80800044 	addi	r2,r16,1
    c93c:	1081ffcc 	andi	r2,r2,2047
    c940:	00c00044 	movi	r3,1
    c944:	1880a00e 	bge	r3,r2,cbc8 <__adddf3+0x5b0>
    c948:	8989c83a 	sub	r4,r17,r6
    c94c:	8905803a 	cmpltu	r2,r17,r4
    c950:	4267c83a 	sub	r19,r8,r9
    c954:	98a7c83a 	sub	r19,r19,r2
    c958:	9880202c 	andhi	r2,r19,128
    c95c:	10006326 	beq	r2,zero,caec <__adddf3+0x4d4>
    c960:	3463c83a 	sub	r17,r6,r17
    c964:	4a07c83a 	sub	r3,r9,r8
    c968:	344d803a 	cmpltu	r6,r6,r17
    c96c:	19a7c83a 	sub	r19,r3,r6
    c970:	3825883a 	mov	r18,r7
    c974:	983f8a1e 	bne	r19,zero,c7a0 <__alt_data_end+0xff00c7a0>
    c978:	8809883a 	mov	r4,r17
    c97c:	000ec1c0 	call	ec1c <__clzsi2>
    c980:	10800804 	addi	r2,r2,32
    c984:	10fffe04 	addi	r3,r2,-8
    c988:	010007c4 	movi	r4,31
    c98c:	20ff890e 	bge	r4,r3,c7b4 <__alt_data_end+0xff00c7b4>
    c990:	10bff604 	addi	r2,r2,-40
    c994:	8884983a 	sll	r2,r17,r2
    c998:	0023883a 	mov	r17,zero
    c99c:	1c3f8c0e 	bge	r3,r16,c7d0 <__alt_data_end+0xff00c7d0>
    c9a0:	023fe034 	movhi	r8,65408
    c9a4:	423fffc4 	addi	r8,r8,-1
    c9a8:	80e1c83a 	sub	r16,r16,r3
    c9ac:	1210703a 	and	r8,r2,r8
    c9b0:	003f3806 	br	c694 <__alt_data_end+0xff00c694>
    c9b4:	9007883a 	mov	r3,r18
    c9b8:	0011883a 	mov	r8,zero
    c9bc:	0005883a 	mov	r2,zero
    c9c0:	003f4c06 	br	c6f4 <__alt_data_end+0xff00c6f4>
    c9c4:	498cb03a 	or	r6,r9,r6
    c9c8:	300cc03a 	cmpne	r6,r6,zero
    c9cc:	0007883a 	mov	r3,zero
    c9d0:	003f6806 	br	c774 <__alt_data_end+0xff00c774>
    c9d4:	20009c1e 	bne	r4,zero,cc48 <__adddf3+0x630>
    c9d8:	80800044 	addi	r2,r16,1
    c9dc:	1141ffcc 	andi	r5,r2,2047
    c9e0:	01000044 	movi	r4,1
    c9e4:	2140670e 	bge	r4,r5,cb84 <__adddf3+0x56c>
    c9e8:	0101ffc4 	movi	r4,2047
    c9ec:	11007f26 	beq	r2,r4,cbec <__adddf3+0x5d4>
    c9f0:	898d883a 	add	r6,r17,r6
    c9f4:	4247883a 	add	r3,r8,r9
    c9f8:	3451803a 	cmpltu	r8,r6,r17
    c9fc:	40d1883a 	add	r8,r8,r3
    ca00:	402297fa 	slli	r17,r8,31
    ca04:	300cd07a 	srli	r6,r6,1
    ca08:	4010d07a 	srli	r8,r8,1
    ca0c:	1021883a 	mov	r16,r2
    ca10:	89a2b03a 	or	r17,r17,r6
    ca14:	003f1f06 	br	c694 <__alt_data_end+0xff00c694>
    ca18:	0081ffc4 	movi	r2,2047
    ca1c:	80bf481e 	bne	r16,r2,c740 <__alt_data_end+0xff00c740>
    ca20:	003f1c06 	br	c694 <__alt_data_end+0xff00c694>
    ca24:	843ff844 	addi	r16,r16,-31
    ca28:	01000804 	movi	r4,32
    ca2c:	1406d83a 	srl	r3,r2,r16
    ca30:	41005026 	beq	r8,r4,cb74 <__adddf3+0x55c>
    ca34:	01001004 	movi	r4,64
    ca38:	2211c83a 	sub	r8,r4,r8
    ca3c:	1204983a 	sll	r2,r2,r8
    ca40:	88a2b03a 	or	r17,r17,r2
    ca44:	8822c03a 	cmpne	r17,r17,zero
    ca48:	1c62b03a 	or	r17,r3,r17
    ca4c:	0011883a 	mov	r8,zero
    ca50:	0021883a 	mov	r16,zero
    ca54:	003f7106 	br	c81c <__alt_data_end+0xff00c81c>
    ca58:	193ff804 	addi	r4,r3,-32
    ca5c:	00800804 	movi	r2,32
    ca60:	4908d83a 	srl	r4,r9,r4
    ca64:	18804526 	beq	r3,r2,cb7c <__adddf3+0x564>
    ca68:	00801004 	movi	r2,64
    ca6c:	10c5c83a 	sub	r2,r2,r3
    ca70:	4886983a 	sll	r3,r9,r2
    ca74:	198cb03a 	or	r6,r3,r6
    ca78:	300cc03a 	cmpne	r6,r6,zero
    ca7c:	218cb03a 	or	r6,r4,r6
    ca80:	0007883a 	mov	r3,zero
    ca84:	003f3b06 	br	c774 <__alt_data_end+0xff00c774>
    ca88:	80002a26 	beq	r16,zero,cb34 <__adddf3+0x51c>
    ca8c:	0101ffc4 	movi	r4,2047
    ca90:	11006826 	beq	r2,r4,cc34 <__adddf3+0x61c>
    ca94:	00c7c83a 	sub	r3,zero,r3
    ca98:	42002034 	orhi	r8,r8,128
    ca9c:	01000e04 	movi	r4,56
    caa0:	20c07c16 	blt	r4,r3,cc94 <__adddf3+0x67c>
    caa4:	010007c4 	movi	r4,31
    caa8:	20c0da16 	blt	r4,r3,ce14 <__adddf3+0x7fc>
    caac:	01000804 	movi	r4,32
    cab0:	20c9c83a 	sub	r4,r4,r3
    cab4:	4114983a 	sll	r10,r8,r4
    cab8:	88cad83a 	srl	r5,r17,r3
    cabc:	8908983a 	sll	r4,r17,r4
    cac0:	40c6d83a 	srl	r3,r8,r3
    cac4:	5162b03a 	or	r17,r10,r5
    cac8:	2008c03a 	cmpne	r4,r4,zero
    cacc:	8922b03a 	or	r17,r17,r4
    cad0:	3463c83a 	sub	r17,r6,r17
    cad4:	48c7c83a 	sub	r3,r9,r3
    cad8:	344d803a 	cmpltu	r6,r6,r17
    cadc:	1991c83a 	sub	r8,r3,r6
    cae0:	1021883a 	mov	r16,r2
    cae4:	3825883a 	mov	r18,r7
    cae8:	003f2706 	br	c788 <__alt_data_end+0xff00c788>
    caec:	24d0b03a 	or	r8,r4,r19
    caf0:	40001b1e 	bne	r8,zero,cb60 <__adddf3+0x548>
    caf4:	0005883a 	mov	r2,zero
    caf8:	0007883a 	mov	r3,zero
    cafc:	0021883a 	mov	r16,zero
    cb00:	003f4d06 	br	c838 <__alt_data_end+0xff00c838>
    cb04:	008007c4 	movi	r2,31
    cb08:	11003c16 	blt	r2,r4,cbfc <__adddf3+0x5e4>
    cb0c:	00800804 	movi	r2,32
    cb10:	1105c83a 	sub	r2,r2,r4
    cb14:	488e983a 	sll	r7,r9,r2
    cb18:	310ad83a 	srl	r5,r6,r4
    cb1c:	3084983a 	sll	r2,r6,r2
    cb20:	4912d83a 	srl	r9,r9,r4
    cb24:	394ab03a 	or	r5,r7,r5
    cb28:	1004c03a 	cmpne	r2,r2,zero
    cb2c:	288ab03a 	or	r5,r5,r2
    cb30:	003f5306 	br	c880 <__alt_data_end+0xff00c880>
    cb34:	4448b03a 	or	r4,r8,r17
    cb38:	20003e26 	beq	r4,zero,cc34 <__adddf3+0x61c>
    cb3c:	00c6303a 	nor	r3,zero,r3
    cb40:	18003a1e 	bne	r3,zero,cc2c <__adddf3+0x614>
    cb44:	3463c83a 	sub	r17,r6,r17
    cb48:	4a07c83a 	sub	r3,r9,r8
    cb4c:	344d803a 	cmpltu	r6,r6,r17
    cb50:	1991c83a 	sub	r8,r3,r6
    cb54:	1021883a 	mov	r16,r2
    cb58:	3825883a 	mov	r18,r7
    cb5c:	003f0a06 	br	c788 <__alt_data_end+0xff00c788>
    cb60:	2023883a 	mov	r17,r4
    cb64:	003f0d06 	br	c79c <__alt_data_end+0xff00c79c>
    cb68:	0081ffc4 	movi	r2,2047
    cb6c:	80bf3f1e 	bne	r16,r2,c86c <__alt_data_end+0xff00c86c>
    cb70:	003ec806 	br	c694 <__alt_data_end+0xff00c694>
    cb74:	0005883a 	mov	r2,zero
    cb78:	003fb106 	br	ca40 <__alt_data_end+0xff00ca40>
    cb7c:	0007883a 	mov	r3,zero
    cb80:	003fbc06 	br	ca74 <__alt_data_end+0xff00ca74>
    cb84:	4444b03a 	or	r2,r8,r17
    cb88:	8000871e 	bne	r16,zero,cda8 <__adddf3+0x790>
    cb8c:	1000ba26 	beq	r2,zero,ce78 <__adddf3+0x860>
    cb90:	4984b03a 	or	r2,r9,r6
    cb94:	103ebf26 	beq	r2,zero,c694 <__alt_data_end+0xff00c694>
    cb98:	8985883a 	add	r2,r17,r6
    cb9c:	4247883a 	add	r3,r8,r9
    cba0:	1451803a 	cmpltu	r8,r2,r17
    cba4:	40d1883a 	add	r8,r8,r3
    cba8:	40c0202c 	andhi	r3,r8,128
    cbac:	1023883a 	mov	r17,r2
    cbb0:	183f1a26 	beq	r3,zero,c81c <__alt_data_end+0xff00c81c>
    cbb4:	00bfe034 	movhi	r2,65408
    cbb8:	10bfffc4 	addi	r2,r2,-1
    cbbc:	2021883a 	mov	r16,r4
    cbc0:	4090703a 	and	r8,r8,r2
    cbc4:	003eb306 	br	c694 <__alt_data_end+0xff00c694>
    cbc8:	4444b03a 	or	r2,r8,r17
    cbcc:	8000291e 	bne	r16,zero,cc74 <__adddf3+0x65c>
    cbd0:	10004b1e 	bne	r2,zero,cd00 <__adddf3+0x6e8>
    cbd4:	4990b03a 	or	r8,r9,r6
    cbd8:	40008b26 	beq	r8,zero,ce08 <__adddf3+0x7f0>
    cbdc:	4811883a 	mov	r8,r9
    cbe0:	3023883a 	mov	r17,r6
    cbe4:	3825883a 	mov	r18,r7
    cbe8:	003eaa06 	br	c694 <__alt_data_end+0xff00c694>
    cbec:	1021883a 	mov	r16,r2
    cbf0:	0011883a 	mov	r8,zero
    cbf4:	0005883a 	mov	r2,zero
    cbf8:	003f0f06 	br	c838 <__alt_data_end+0xff00c838>
    cbfc:	217ff804 	addi	r5,r4,-32
    cc00:	00800804 	movi	r2,32
    cc04:	494ad83a 	srl	r5,r9,r5
    cc08:	20807d26 	beq	r4,r2,ce00 <__adddf3+0x7e8>
    cc0c:	00801004 	movi	r2,64
    cc10:	1109c83a 	sub	r4,r2,r4
    cc14:	4912983a 	sll	r9,r9,r4
    cc18:	498cb03a 	or	r6,r9,r6
    cc1c:	300cc03a 	cmpne	r6,r6,zero
    cc20:	298ab03a 	or	r5,r5,r6
    cc24:	0013883a 	mov	r9,zero
    cc28:	003f1506 	br	c880 <__alt_data_end+0xff00c880>
    cc2c:	0101ffc4 	movi	r4,2047
    cc30:	113f9a1e 	bne	r2,r4,ca9c <__alt_data_end+0xff00ca9c>
    cc34:	4811883a 	mov	r8,r9
    cc38:	3023883a 	mov	r17,r6
    cc3c:	1021883a 	mov	r16,r2
    cc40:	3825883a 	mov	r18,r7
    cc44:	003e9306 	br	c694 <__alt_data_end+0xff00c694>
    cc48:	8000161e 	bne	r16,zero,cca4 <__adddf3+0x68c>
    cc4c:	444ab03a 	or	r5,r8,r17
    cc50:	28005126 	beq	r5,zero,cd98 <__adddf3+0x780>
    cc54:	0108303a 	nor	r4,zero,r4
    cc58:	20004d1e 	bne	r4,zero,cd90 <__adddf3+0x778>
    cc5c:	89a3883a 	add	r17,r17,r6
    cc60:	4253883a 	add	r9,r8,r9
    cc64:	898d803a 	cmpltu	r6,r17,r6
    cc68:	3251883a 	add	r8,r6,r9
    cc6c:	1021883a 	mov	r16,r2
    cc70:	003f0806 	br	c894 <__alt_data_end+0xff00c894>
    cc74:	1000301e 	bne	r2,zero,cd38 <__adddf3+0x720>
    cc78:	4984b03a 	or	r2,r9,r6
    cc7c:	10007126 	beq	r2,zero,ce44 <__adddf3+0x82c>
    cc80:	4811883a 	mov	r8,r9
    cc84:	3023883a 	mov	r17,r6
    cc88:	3825883a 	mov	r18,r7
    cc8c:	0401ffc4 	movi	r16,2047
    cc90:	003e8006 	br	c694 <__alt_data_end+0xff00c694>
    cc94:	4462b03a 	or	r17,r8,r17
    cc98:	8822c03a 	cmpne	r17,r17,zero
    cc9c:	0007883a 	mov	r3,zero
    cca0:	003f8b06 	br	cad0 <__alt_data_end+0xff00cad0>
    cca4:	0141ffc4 	movi	r5,2047
    cca8:	11403b26 	beq	r2,r5,cd98 <__adddf3+0x780>
    ccac:	0109c83a 	sub	r4,zero,r4
    ccb0:	42002034 	orhi	r8,r8,128
    ccb4:	01400e04 	movi	r5,56
    ccb8:	29006716 	blt	r5,r4,ce58 <__adddf3+0x840>
    ccbc:	014007c4 	movi	r5,31
    ccc0:	29007016 	blt	r5,r4,ce84 <__adddf3+0x86c>
    ccc4:	01400804 	movi	r5,32
    ccc8:	290bc83a 	sub	r5,r5,r4
    cccc:	4154983a 	sll	r10,r8,r5
    ccd0:	890ed83a 	srl	r7,r17,r4
    ccd4:	894a983a 	sll	r5,r17,r5
    ccd8:	4108d83a 	srl	r4,r8,r4
    ccdc:	51e2b03a 	or	r17,r10,r7
    cce0:	280ac03a 	cmpne	r5,r5,zero
    cce4:	8962b03a 	or	r17,r17,r5
    cce8:	89a3883a 	add	r17,r17,r6
    ccec:	2253883a 	add	r9,r4,r9
    ccf0:	898d803a 	cmpltu	r6,r17,r6
    ccf4:	3251883a 	add	r8,r6,r9
    ccf8:	1021883a 	mov	r16,r2
    ccfc:	003ee506 	br	c894 <__alt_data_end+0xff00c894>
    cd00:	4984b03a 	or	r2,r9,r6
    cd04:	103e6326 	beq	r2,zero,c694 <__alt_data_end+0xff00c694>
    cd08:	8987c83a 	sub	r3,r17,r6
    cd0c:	88c9803a 	cmpltu	r4,r17,r3
    cd10:	4245c83a 	sub	r2,r8,r9
    cd14:	1105c83a 	sub	r2,r2,r4
    cd18:	1100202c 	andhi	r4,r2,128
    cd1c:	203ebb26 	beq	r4,zero,c80c <__alt_data_end+0xff00c80c>
    cd20:	3463c83a 	sub	r17,r6,r17
    cd24:	4a07c83a 	sub	r3,r9,r8
    cd28:	344d803a 	cmpltu	r6,r6,r17
    cd2c:	1991c83a 	sub	r8,r3,r6
    cd30:	3825883a 	mov	r18,r7
    cd34:	003e5706 	br	c694 <__alt_data_end+0xff00c694>
    cd38:	4984b03a 	or	r2,r9,r6
    cd3c:	10002e26 	beq	r2,zero,cdf8 <__adddf3+0x7e0>
    cd40:	4004d0fa 	srli	r2,r8,3
    cd44:	8822d0fa 	srli	r17,r17,3
    cd48:	4010977a 	slli	r8,r8,29
    cd4c:	10c0022c 	andhi	r3,r2,8
    cd50:	4462b03a 	or	r17,r8,r17
    cd54:	18000826 	beq	r3,zero,cd78 <__adddf3+0x760>
    cd58:	4808d0fa 	srli	r4,r9,3
    cd5c:	20c0022c 	andhi	r3,r4,8
    cd60:	1800051e 	bne	r3,zero,cd78 <__adddf3+0x760>
    cd64:	300cd0fa 	srli	r6,r6,3
    cd68:	4806977a 	slli	r3,r9,29
    cd6c:	2005883a 	mov	r2,r4
    cd70:	3825883a 	mov	r18,r7
    cd74:	19a2b03a 	or	r17,r3,r6
    cd78:	8810d77a 	srli	r8,r17,29
    cd7c:	100490fa 	slli	r2,r2,3
    cd80:	882290fa 	slli	r17,r17,3
    cd84:	0401ffc4 	movi	r16,2047
    cd88:	4090b03a 	or	r8,r8,r2
    cd8c:	003e4106 	br	c694 <__alt_data_end+0xff00c694>
    cd90:	0141ffc4 	movi	r5,2047
    cd94:	117fc71e 	bne	r2,r5,ccb4 <__alt_data_end+0xff00ccb4>
    cd98:	4811883a 	mov	r8,r9
    cd9c:	3023883a 	mov	r17,r6
    cda0:	1021883a 	mov	r16,r2
    cda4:	003e3b06 	br	c694 <__alt_data_end+0xff00c694>
    cda8:	10002f26 	beq	r2,zero,ce68 <__adddf3+0x850>
    cdac:	4984b03a 	or	r2,r9,r6
    cdb0:	10001126 	beq	r2,zero,cdf8 <__adddf3+0x7e0>
    cdb4:	4004d0fa 	srli	r2,r8,3
    cdb8:	8822d0fa 	srli	r17,r17,3
    cdbc:	4010977a 	slli	r8,r8,29
    cdc0:	10c0022c 	andhi	r3,r2,8
    cdc4:	4462b03a 	or	r17,r8,r17
    cdc8:	183feb26 	beq	r3,zero,cd78 <__alt_data_end+0xff00cd78>
    cdcc:	4808d0fa 	srli	r4,r9,3
    cdd0:	20c0022c 	andhi	r3,r4,8
    cdd4:	183fe81e 	bne	r3,zero,cd78 <__alt_data_end+0xff00cd78>
    cdd8:	300cd0fa 	srli	r6,r6,3
    cddc:	4806977a 	slli	r3,r9,29
    cde0:	2005883a 	mov	r2,r4
    cde4:	19a2b03a 	or	r17,r3,r6
    cde8:	003fe306 	br	cd78 <__alt_data_end+0xff00cd78>
    cdec:	0011883a 	mov	r8,zero
    cdf0:	0005883a 	mov	r2,zero
    cdf4:	003e3f06 	br	c6f4 <__alt_data_end+0xff00c6f4>
    cdf8:	0401ffc4 	movi	r16,2047
    cdfc:	003e2506 	br	c694 <__alt_data_end+0xff00c694>
    ce00:	0013883a 	mov	r9,zero
    ce04:	003f8406 	br	cc18 <__alt_data_end+0xff00cc18>
    ce08:	0005883a 	mov	r2,zero
    ce0c:	0007883a 	mov	r3,zero
    ce10:	003e8906 	br	c838 <__alt_data_end+0xff00c838>
    ce14:	197ff804 	addi	r5,r3,-32
    ce18:	01000804 	movi	r4,32
    ce1c:	414ad83a 	srl	r5,r8,r5
    ce20:	19002426 	beq	r3,r4,ceb4 <__adddf3+0x89c>
    ce24:	01001004 	movi	r4,64
    ce28:	20c7c83a 	sub	r3,r4,r3
    ce2c:	40c6983a 	sll	r3,r8,r3
    ce30:	1c46b03a 	or	r3,r3,r17
    ce34:	1806c03a 	cmpne	r3,r3,zero
    ce38:	28e2b03a 	or	r17,r5,r3
    ce3c:	0007883a 	mov	r3,zero
    ce40:	003f2306 	br	cad0 <__alt_data_end+0xff00cad0>
    ce44:	0007883a 	mov	r3,zero
    ce48:	5811883a 	mov	r8,r11
    ce4c:	00bfffc4 	movi	r2,-1
    ce50:	0401ffc4 	movi	r16,2047
    ce54:	003e7806 	br	c838 <__alt_data_end+0xff00c838>
    ce58:	4462b03a 	or	r17,r8,r17
    ce5c:	8822c03a 	cmpne	r17,r17,zero
    ce60:	0009883a 	mov	r4,zero
    ce64:	003fa006 	br	cce8 <__alt_data_end+0xff00cce8>
    ce68:	4811883a 	mov	r8,r9
    ce6c:	3023883a 	mov	r17,r6
    ce70:	0401ffc4 	movi	r16,2047
    ce74:	003e0706 	br	c694 <__alt_data_end+0xff00c694>
    ce78:	4811883a 	mov	r8,r9
    ce7c:	3023883a 	mov	r17,r6
    ce80:	003e0406 	br	c694 <__alt_data_end+0xff00c694>
    ce84:	21fff804 	addi	r7,r4,-32
    ce88:	01400804 	movi	r5,32
    ce8c:	41ced83a 	srl	r7,r8,r7
    ce90:	21400a26 	beq	r4,r5,cebc <__adddf3+0x8a4>
    ce94:	01401004 	movi	r5,64
    ce98:	2909c83a 	sub	r4,r5,r4
    ce9c:	4108983a 	sll	r4,r8,r4
    cea0:	2448b03a 	or	r4,r4,r17
    cea4:	2008c03a 	cmpne	r4,r4,zero
    cea8:	3922b03a 	or	r17,r7,r4
    ceac:	0009883a 	mov	r4,zero
    ceb0:	003f8d06 	br	cce8 <__alt_data_end+0xff00cce8>
    ceb4:	0007883a 	mov	r3,zero
    ceb8:	003fdd06 	br	ce30 <__alt_data_end+0xff00ce30>
    cebc:	0009883a 	mov	r4,zero
    cec0:	003ff706 	br	cea0 <__alt_data_end+0xff00cea0>

0000cec4 <__divdf3>:
    cec4:	defff204 	addi	sp,sp,-56
    cec8:	dd400915 	stw	r21,36(sp)
    cecc:	282ad53a 	srli	r21,r5,20
    ced0:	dd000815 	stw	r20,32(sp)
    ced4:	2828d7fa 	srli	r20,r5,31
    ced8:	dc000415 	stw	r16,16(sp)
    cedc:	04000434 	movhi	r16,16
    cee0:	df000c15 	stw	fp,48(sp)
    cee4:	843fffc4 	addi	r16,r16,-1
    cee8:	dfc00d15 	stw	ra,52(sp)
    ceec:	ddc00b15 	stw	r23,44(sp)
    cef0:	dd800a15 	stw	r22,40(sp)
    cef4:	dcc00715 	stw	r19,28(sp)
    cef8:	dc800615 	stw	r18,24(sp)
    cefc:	dc400515 	stw	r17,20(sp)
    cf00:	ad41ffcc 	andi	r21,r21,2047
    cf04:	2c20703a 	and	r16,r5,r16
    cf08:	a7003fcc 	andi	fp,r20,255
    cf0c:	a8006126 	beq	r21,zero,d094 <__divdf3+0x1d0>
    cf10:	0081ffc4 	movi	r2,2047
    cf14:	2025883a 	mov	r18,r4
    cf18:	a8803726 	beq	r21,r2,cff8 <__divdf3+0x134>
    cf1c:	80800434 	orhi	r2,r16,16
    cf20:	100490fa 	slli	r2,r2,3
    cf24:	2020d77a 	srli	r16,r4,29
    cf28:	202490fa 	slli	r18,r4,3
    cf2c:	ad7f0044 	addi	r21,r21,-1023
    cf30:	80a0b03a 	or	r16,r16,r2
    cf34:	0027883a 	mov	r19,zero
    cf38:	0013883a 	mov	r9,zero
    cf3c:	3804d53a 	srli	r2,r7,20
    cf40:	382cd7fa 	srli	r22,r7,31
    cf44:	04400434 	movhi	r17,16
    cf48:	8c7fffc4 	addi	r17,r17,-1
    cf4c:	1081ffcc 	andi	r2,r2,2047
    cf50:	3011883a 	mov	r8,r6
    cf54:	3c62703a 	and	r17,r7,r17
    cf58:	b5c03fcc 	andi	r23,r22,255
    cf5c:	10006c26 	beq	r2,zero,d110 <__divdf3+0x24c>
    cf60:	00c1ffc4 	movi	r3,2047
    cf64:	10c06426 	beq	r2,r3,d0f8 <__divdf3+0x234>
    cf68:	88c00434 	orhi	r3,r17,16
    cf6c:	180690fa 	slli	r3,r3,3
    cf70:	3022d77a 	srli	r17,r6,29
    cf74:	301090fa 	slli	r8,r6,3
    cf78:	10bf0044 	addi	r2,r2,-1023
    cf7c:	88e2b03a 	or	r17,r17,r3
    cf80:	000f883a 	mov	r7,zero
    cf84:	a58cf03a 	xor	r6,r20,r22
    cf88:	3cc8b03a 	or	r4,r7,r19
    cf8c:	a8abc83a 	sub	r21,r21,r2
    cf90:	008003c4 	movi	r2,15
    cf94:	3007883a 	mov	r3,r6
    cf98:	34c03fcc 	andi	r19,r6,255
    cf9c:	11009036 	bltu	r2,r4,d1e0 <__divdf3+0x31c>
    cfa0:	200890ba 	slli	r4,r4,2
    cfa4:	00800074 	movhi	r2,1
    cfa8:	10b3ee04 	addi	r2,r2,-12360
    cfac:	2089883a 	add	r4,r4,r2
    cfb0:	20800017 	ldw	r2,0(r4)
    cfb4:	1000683a 	jmp	r2
    cfb8:	0000d1e0 	cmpeqi	zero,zero,839
    cfbc:	0000d030 	cmpltui	zero,zero,832
    cfc0:	0000d1d0 	cmplti	zero,zero,839
    cfc4:	0000d024 	muli	zero,zero,832
    cfc8:	0000d1d0 	cmplti	zero,zero,839
    cfcc:	0000d1a4 	muli	zero,zero,838
    cfd0:	0000d1d0 	cmplti	zero,zero,839
    cfd4:	0000d024 	muli	zero,zero,832
    cfd8:	0000d030 	cmpltui	zero,zero,832
    cfdc:	0000d030 	cmpltui	zero,zero,832
    cfe0:	0000d1a4 	muli	zero,zero,838
    cfe4:	0000d024 	muli	zero,zero,832
    cfe8:	0000d014 	movui	zero,832
    cfec:	0000d014 	movui	zero,832
    cff0:	0000d014 	movui	zero,832
    cff4:	0000d4c4 	movi	zero,851
    cff8:	2404b03a 	or	r2,r4,r16
    cffc:	1000661e 	bne	r2,zero,d198 <__divdf3+0x2d4>
    d000:	04c00204 	movi	r19,8
    d004:	0021883a 	mov	r16,zero
    d008:	0025883a 	mov	r18,zero
    d00c:	02400084 	movi	r9,2
    d010:	003fca06 	br	cf3c <__alt_data_end+0xff00cf3c>
    d014:	8023883a 	mov	r17,r16
    d018:	9011883a 	mov	r8,r18
    d01c:	e02f883a 	mov	r23,fp
    d020:	480f883a 	mov	r7,r9
    d024:	00800084 	movi	r2,2
    d028:	3881311e 	bne	r7,r2,d4f0 <__divdf3+0x62c>
    d02c:	b827883a 	mov	r19,r23
    d030:	98c0004c 	andi	r3,r19,1
    d034:	0081ffc4 	movi	r2,2047
    d038:	000b883a 	mov	r5,zero
    d03c:	0025883a 	mov	r18,zero
    d040:	1004953a 	slli	r2,r2,20
    d044:	18c03fcc 	andi	r3,r3,255
    d048:	04400434 	movhi	r17,16
    d04c:	8c7fffc4 	addi	r17,r17,-1
    d050:	180697fa 	slli	r3,r3,31
    d054:	2c4a703a 	and	r5,r5,r17
    d058:	288ab03a 	or	r5,r5,r2
    d05c:	28c6b03a 	or	r3,r5,r3
    d060:	9005883a 	mov	r2,r18
    d064:	dfc00d17 	ldw	ra,52(sp)
    d068:	df000c17 	ldw	fp,48(sp)
    d06c:	ddc00b17 	ldw	r23,44(sp)
    d070:	dd800a17 	ldw	r22,40(sp)
    d074:	dd400917 	ldw	r21,36(sp)
    d078:	dd000817 	ldw	r20,32(sp)
    d07c:	dcc00717 	ldw	r19,28(sp)
    d080:	dc800617 	ldw	r18,24(sp)
    d084:	dc400517 	ldw	r17,20(sp)
    d088:	dc000417 	ldw	r16,16(sp)
    d08c:	dec00e04 	addi	sp,sp,56
    d090:	f800283a 	ret
    d094:	2404b03a 	or	r2,r4,r16
    d098:	2027883a 	mov	r19,r4
    d09c:	10003926 	beq	r2,zero,d184 <__divdf3+0x2c0>
    d0a0:	80012e26 	beq	r16,zero,d55c <__divdf3+0x698>
    d0a4:	8009883a 	mov	r4,r16
    d0a8:	d9800315 	stw	r6,12(sp)
    d0ac:	d9c00215 	stw	r7,8(sp)
    d0b0:	000ec1c0 	call	ec1c <__clzsi2>
    d0b4:	d9800317 	ldw	r6,12(sp)
    d0b8:	d9c00217 	ldw	r7,8(sp)
    d0bc:	113ffd44 	addi	r4,r2,-11
    d0c0:	00c00704 	movi	r3,28
    d0c4:	19012116 	blt	r3,r4,d54c <__divdf3+0x688>
    d0c8:	00c00744 	movi	r3,29
    d0cc:	147ffe04 	addi	r17,r2,-8
    d0d0:	1907c83a 	sub	r3,r3,r4
    d0d4:	8460983a 	sll	r16,r16,r17
    d0d8:	98c6d83a 	srl	r3,r19,r3
    d0dc:	9c64983a 	sll	r18,r19,r17
    d0e0:	1c20b03a 	or	r16,r3,r16
    d0e4:	1080fcc4 	addi	r2,r2,1011
    d0e8:	00abc83a 	sub	r21,zero,r2
    d0ec:	0027883a 	mov	r19,zero
    d0f0:	0013883a 	mov	r9,zero
    d0f4:	003f9106 	br	cf3c <__alt_data_end+0xff00cf3c>
    d0f8:	3446b03a 	or	r3,r6,r17
    d0fc:	18001f1e 	bne	r3,zero,d17c <__divdf3+0x2b8>
    d100:	0023883a 	mov	r17,zero
    d104:	0011883a 	mov	r8,zero
    d108:	01c00084 	movi	r7,2
    d10c:	003f9d06 	br	cf84 <__alt_data_end+0xff00cf84>
    d110:	3446b03a 	or	r3,r6,r17
    d114:	18001526 	beq	r3,zero,d16c <__divdf3+0x2a8>
    d118:	88011b26 	beq	r17,zero,d588 <__divdf3+0x6c4>
    d11c:	8809883a 	mov	r4,r17
    d120:	d9800315 	stw	r6,12(sp)
    d124:	da400115 	stw	r9,4(sp)
    d128:	000ec1c0 	call	ec1c <__clzsi2>
    d12c:	d9800317 	ldw	r6,12(sp)
    d130:	da400117 	ldw	r9,4(sp)
    d134:	113ffd44 	addi	r4,r2,-11
    d138:	00c00704 	movi	r3,28
    d13c:	19010e16 	blt	r3,r4,d578 <__divdf3+0x6b4>
    d140:	00c00744 	movi	r3,29
    d144:	123ffe04 	addi	r8,r2,-8
    d148:	1907c83a 	sub	r3,r3,r4
    d14c:	8a22983a 	sll	r17,r17,r8
    d150:	30c6d83a 	srl	r3,r6,r3
    d154:	3210983a 	sll	r8,r6,r8
    d158:	1c62b03a 	or	r17,r3,r17
    d15c:	1080fcc4 	addi	r2,r2,1011
    d160:	0085c83a 	sub	r2,zero,r2
    d164:	000f883a 	mov	r7,zero
    d168:	003f8606 	br	cf84 <__alt_data_end+0xff00cf84>
    d16c:	0023883a 	mov	r17,zero
    d170:	0011883a 	mov	r8,zero
    d174:	01c00044 	movi	r7,1
    d178:	003f8206 	br	cf84 <__alt_data_end+0xff00cf84>
    d17c:	01c000c4 	movi	r7,3
    d180:	003f8006 	br	cf84 <__alt_data_end+0xff00cf84>
    d184:	04c00104 	movi	r19,4
    d188:	0021883a 	mov	r16,zero
    d18c:	0025883a 	mov	r18,zero
    d190:	02400044 	movi	r9,1
    d194:	003f6906 	br	cf3c <__alt_data_end+0xff00cf3c>
    d198:	04c00304 	movi	r19,12
    d19c:	024000c4 	movi	r9,3
    d1a0:	003f6606 	br	cf3c <__alt_data_end+0xff00cf3c>
    d1a4:	01400434 	movhi	r5,16
    d1a8:	0007883a 	mov	r3,zero
    d1ac:	297fffc4 	addi	r5,r5,-1
    d1b0:	04bfffc4 	movi	r18,-1
    d1b4:	0081ffc4 	movi	r2,2047
    d1b8:	003fa106 	br	d040 <__alt_data_end+0xff00d040>
    d1bc:	00c00044 	movi	r3,1
    d1c0:	1887c83a 	sub	r3,r3,r2
    d1c4:	01000e04 	movi	r4,56
    d1c8:	20c1210e 	bge	r4,r3,d650 <__divdf3+0x78c>
    d1cc:	98c0004c 	andi	r3,r19,1
    d1d0:	0005883a 	mov	r2,zero
    d1d4:	000b883a 	mov	r5,zero
    d1d8:	0025883a 	mov	r18,zero
    d1dc:	003f9806 	br	d040 <__alt_data_end+0xff00d040>
    d1e0:	8c00fd36 	bltu	r17,r16,d5d8 <__divdf3+0x714>
    d1e4:	8440fb26 	beq	r16,r17,d5d4 <__divdf3+0x710>
    d1e8:	8007883a 	mov	r3,r16
    d1ec:	ad7fffc4 	addi	r21,r21,-1
    d1f0:	0021883a 	mov	r16,zero
    d1f4:	4004d63a 	srli	r2,r8,24
    d1f8:	8822923a 	slli	r17,r17,8
    d1fc:	1809883a 	mov	r4,r3
    d200:	402c923a 	slli	r22,r8,8
    d204:	88b8b03a 	or	fp,r17,r2
    d208:	e028d43a 	srli	r20,fp,16
    d20c:	d8c00015 	stw	r3,0(sp)
    d210:	e5ffffcc 	andi	r23,fp,65535
    d214:	a00b883a 	mov	r5,r20
    d218:	000c55c0 	call	c55c <__udivsi3>
    d21c:	d8c00017 	ldw	r3,0(sp)
    d220:	a00b883a 	mov	r5,r20
    d224:	d8800315 	stw	r2,12(sp)
    d228:	1809883a 	mov	r4,r3
    d22c:	000c5c00 	call	c5c0 <__umodsi3>
    d230:	d9800317 	ldw	r6,12(sp)
    d234:	1006943a 	slli	r3,r2,16
    d238:	9004d43a 	srli	r2,r18,16
    d23c:	b9a3383a 	mul	r17,r23,r6
    d240:	10c4b03a 	or	r2,r2,r3
    d244:	1440062e 	bgeu	r2,r17,d260 <__divdf3+0x39c>
    d248:	1705883a 	add	r2,r2,fp
    d24c:	30ffffc4 	addi	r3,r6,-1
    d250:	1700ee36 	bltu	r2,fp,d60c <__divdf3+0x748>
    d254:	1440ed2e 	bgeu	r2,r17,d60c <__divdf3+0x748>
    d258:	31bfff84 	addi	r6,r6,-2
    d25c:	1705883a 	add	r2,r2,fp
    d260:	1463c83a 	sub	r17,r2,r17
    d264:	a00b883a 	mov	r5,r20
    d268:	8809883a 	mov	r4,r17
    d26c:	d9800315 	stw	r6,12(sp)
    d270:	000c55c0 	call	c55c <__udivsi3>
    d274:	a00b883a 	mov	r5,r20
    d278:	8809883a 	mov	r4,r17
    d27c:	d8800215 	stw	r2,8(sp)
    d280:	000c5c00 	call	c5c0 <__umodsi3>
    d284:	d9c00217 	ldw	r7,8(sp)
    d288:	1004943a 	slli	r2,r2,16
    d28c:	94bfffcc 	andi	r18,r18,65535
    d290:	b9d1383a 	mul	r8,r23,r7
    d294:	90a4b03a 	or	r18,r18,r2
    d298:	d9800317 	ldw	r6,12(sp)
    d29c:	9200062e 	bgeu	r18,r8,d2b8 <__divdf3+0x3f4>
    d2a0:	9725883a 	add	r18,r18,fp
    d2a4:	38bfffc4 	addi	r2,r7,-1
    d2a8:	9700d636 	bltu	r18,fp,d604 <__divdf3+0x740>
    d2ac:	9200d52e 	bgeu	r18,r8,d604 <__divdf3+0x740>
    d2b0:	39ffff84 	addi	r7,r7,-2
    d2b4:	9725883a 	add	r18,r18,fp
    d2b8:	3004943a 	slli	r2,r6,16
    d2bc:	b012d43a 	srli	r9,r22,16
    d2c0:	b1bfffcc 	andi	r6,r22,65535
    d2c4:	11e2b03a 	or	r17,r2,r7
    d2c8:	8806d43a 	srli	r3,r17,16
    d2cc:	893fffcc 	andi	r4,r17,65535
    d2d0:	218b383a 	mul	r5,r4,r6
    d2d4:	30c5383a 	mul	r2,r6,r3
    d2d8:	2249383a 	mul	r4,r4,r9
    d2dc:	280ed43a 	srli	r7,r5,16
    d2e0:	9225c83a 	sub	r18,r18,r8
    d2e4:	2089883a 	add	r4,r4,r2
    d2e8:	3909883a 	add	r4,r7,r4
    d2ec:	1a47383a 	mul	r3,r3,r9
    d2f0:	2080022e 	bgeu	r4,r2,d2fc <__divdf3+0x438>
    d2f4:	00800074 	movhi	r2,1
    d2f8:	1887883a 	add	r3,r3,r2
    d2fc:	2004d43a 	srli	r2,r4,16
    d300:	2008943a 	slli	r4,r4,16
    d304:	297fffcc 	andi	r5,r5,65535
    d308:	10c7883a 	add	r3,r2,r3
    d30c:	2149883a 	add	r4,r4,r5
    d310:	90c0a536 	bltu	r18,r3,d5a8 <__divdf3+0x6e4>
    d314:	90c0bf26 	beq	r18,r3,d614 <__divdf3+0x750>
    d318:	90c7c83a 	sub	r3,r18,r3
    d31c:	810fc83a 	sub	r7,r16,r4
    d320:	81e5803a 	cmpltu	r18,r16,r7
    d324:	1ca5c83a 	sub	r18,r3,r18
    d328:	e480c126 	beq	fp,r18,d630 <__divdf3+0x76c>
    d32c:	a00b883a 	mov	r5,r20
    d330:	9009883a 	mov	r4,r18
    d334:	d9800315 	stw	r6,12(sp)
    d338:	d9c00215 	stw	r7,8(sp)
    d33c:	da400115 	stw	r9,4(sp)
    d340:	000c55c0 	call	c55c <__udivsi3>
    d344:	a00b883a 	mov	r5,r20
    d348:	9009883a 	mov	r4,r18
    d34c:	d8800015 	stw	r2,0(sp)
    d350:	000c5c00 	call	c5c0 <__umodsi3>
    d354:	d9c00217 	ldw	r7,8(sp)
    d358:	da000017 	ldw	r8,0(sp)
    d35c:	1006943a 	slli	r3,r2,16
    d360:	3804d43a 	srli	r2,r7,16
    d364:	ba21383a 	mul	r16,r23,r8
    d368:	d9800317 	ldw	r6,12(sp)
    d36c:	10c4b03a 	or	r2,r2,r3
    d370:	da400117 	ldw	r9,4(sp)
    d374:	1400062e 	bgeu	r2,r16,d390 <__divdf3+0x4cc>
    d378:	1705883a 	add	r2,r2,fp
    d37c:	40ffffc4 	addi	r3,r8,-1
    d380:	1700ad36 	bltu	r2,fp,d638 <__divdf3+0x774>
    d384:	1400ac2e 	bgeu	r2,r16,d638 <__divdf3+0x774>
    d388:	423fff84 	addi	r8,r8,-2
    d38c:	1705883a 	add	r2,r2,fp
    d390:	1421c83a 	sub	r16,r2,r16
    d394:	a00b883a 	mov	r5,r20
    d398:	8009883a 	mov	r4,r16
    d39c:	d9800315 	stw	r6,12(sp)
    d3a0:	d9c00215 	stw	r7,8(sp)
    d3a4:	da000015 	stw	r8,0(sp)
    d3a8:	da400115 	stw	r9,4(sp)
    d3ac:	000c55c0 	call	c55c <__udivsi3>
    d3b0:	8009883a 	mov	r4,r16
    d3b4:	a00b883a 	mov	r5,r20
    d3b8:	1025883a 	mov	r18,r2
    d3bc:	000c5c00 	call	c5c0 <__umodsi3>
    d3c0:	d9c00217 	ldw	r7,8(sp)
    d3c4:	1004943a 	slli	r2,r2,16
    d3c8:	bcaf383a 	mul	r23,r23,r18
    d3cc:	393fffcc 	andi	r4,r7,65535
    d3d0:	2088b03a 	or	r4,r4,r2
    d3d4:	d9800317 	ldw	r6,12(sp)
    d3d8:	da000017 	ldw	r8,0(sp)
    d3dc:	da400117 	ldw	r9,4(sp)
    d3e0:	25c0062e 	bgeu	r4,r23,d3fc <__divdf3+0x538>
    d3e4:	2709883a 	add	r4,r4,fp
    d3e8:	90bfffc4 	addi	r2,r18,-1
    d3ec:	27009436 	bltu	r4,fp,d640 <__divdf3+0x77c>
    d3f0:	25c0932e 	bgeu	r4,r23,d640 <__divdf3+0x77c>
    d3f4:	94bfff84 	addi	r18,r18,-2
    d3f8:	2709883a 	add	r4,r4,fp
    d3fc:	4004943a 	slli	r2,r8,16
    d400:	25efc83a 	sub	r23,r4,r23
    d404:	1490b03a 	or	r8,r2,r18
    d408:	4008d43a 	srli	r4,r8,16
    d40c:	40ffffcc 	andi	r3,r8,65535
    d410:	30c5383a 	mul	r2,r6,r3
    d414:	1a47383a 	mul	r3,r3,r9
    d418:	310d383a 	mul	r6,r6,r4
    d41c:	100ad43a 	srli	r5,r2,16
    d420:	4913383a 	mul	r9,r9,r4
    d424:	1987883a 	add	r3,r3,r6
    d428:	28c7883a 	add	r3,r5,r3
    d42c:	1980022e 	bgeu	r3,r6,d438 <__divdf3+0x574>
    d430:	01000074 	movhi	r4,1
    d434:	4913883a 	add	r9,r9,r4
    d438:	1808d43a 	srli	r4,r3,16
    d43c:	1806943a 	slli	r3,r3,16
    d440:	10bfffcc 	andi	r2,r2,65535
    d444:	2253883a 	add	r9,r4,r9
    d448:	1887883a 	add	r3,r3,r2
    d44c:	ba403836 	bltu	r23,r9,d530 <__divdf3+0x66c>
    d450:	ba403626 	beq	r23,r9,d52c <__divdf3+0x668>
    d454:	42000054 	ori	r8,r8,1
    d458:	a880ffc4 	addi	r2,r21,1023
    d45c:	00bf570e 	bge	zero,r2,d1bc <__alt_data_end+0xff00d1bc>
    d460:	40c001cc 	andi	r3,r8,7
    d464:	18000726 	beq	r3,zero,d484 <__divdf3+0x5c0>
    d468:	40c003cc 	andi	r3,r8,15
    d46c:	01000104 	movi	r4,4
    d470:	19000426 	beq	r3,r4,d484 <__divdf3+0x5c0>
    d474:	4107883a 	add	r3,r8,r4
    d478:	1a11803a 	cmpltu	r8,r3,r8
    d47c:	8a23883a 	add	r17,r17,r8
    d480:	1811883a 	mov	r8,r3
    d484:	88c0402c 	andhi	r3,r17,256
    d488:	18000426 	beq	r3,zero,d49c <__divdf3+0x5d8>
    d48c:	00ffc034 	movhi	r3,65280
    d490:	18ffffc4 	addi	r3,r3,-1
    d494:	a8810004 	addi	r2,r21,1024
    d498:	88e2703a 	and	r17,r17,r3
    d49c:	00c1ff84 	movi	r3,2046
    d4a0:	18bee316 	blt	r3,r2,d030 <__alt_data_end+0xff00d030>
    d4a4:	8824977a 	slli	r18,r17,29
    d4a8:	4010d0fa 	srli	r8,r8,3
    d4ac:	8822927a 	slli	r17,r17,9
    d4b0:	1081ffcc 	andi	r2,r2,2047
    d4b4:	9224b03a 	or	r18,r18,r8
    d4b8:	880ad33a 	srli	r5,r17,12
    d4bc:	98c0004c 	andi	r3,r19,1
    d4c0:	003edf06 	br	d040 <__alt_data_end+0xff00d040>
    d4c4:	8080022c 	andhi	r2,r16,8
    d4c8:	10001226 	beq	r2,zero,d514 <__divdf3+0x650>
    d4cc:	8880022c 	andhi	r2,r17,8
    d4d0:	1000101e 	bne	r2,zero,d514 <__divdf3+0x650>
    d4d4:	00800434 	movhi	r2,16
    d4d8:	89400234 	orhi	r5,r17,8
    d4dc:	10bfffc4 	addi	r2,r2,-1
    d4e0:	b007883a 	mov	r3,r22
    d4e4:	288a703a 	and	r5,r5,r2
    d4e8:	4025883a 	mov	r18,r8
    d4ec:	003f3106 	br	d1b4 <__alt_data_end+0xff00d1b4>
    d4f0:	008000c4 	movi	r2,3
    d4f4:	3880a626 	beq	r7,r2,d790 <__divdf3+0x8cc>
    d4f8:	00800044 	movi	r2,1
    d4fc:	3880521e 	bne	r7,r2,d648 <__divdf3+0x784>
    d500:	b807883a 	mov	r3,r23
    d504:	0005883a 	mov	r2,zero
    d508:	000b883a 	mov	r5,zero
    d50c:	0025883a 	mov	r18,zero
    d510:	003ecb06 	br	d040 <__alt_data_end+0xff00d040>
    d514:	00800434 	movhi	r2,16
    d518:	81400234 	orhi	r5,r16,8
    d51c:	10bfffc4 	addi	r2,r2,-1
    d520:	a007883a 	mov	r3,r20
    d524:	288a703a 	and	r5,r5,r2
    d528:	003f2206 	br	d1b4 <__alt_data_end+0xff00d1b4>
    d52c:	183fca26 	beq	r3,zero,d458 <__alt_data_end+0xff00d458>
    d530:	e5ef883a 	add	r23,fp,r23
    d534:	40bfffc4 	addi	r2,r8,-1
    d538:	bf00392e 	bgeu	r23,fp,d620 <__divdf3+0x75c>
    d53c:	1011883a 	mov	r8,r2
    d540:	ba7fc41e 	bne	r23,r9,d454 <__alt_data_end+0xff00d454>
    d544:	b0ffc31e 	bne	r22,r3,d454 <__alt_data_end+0xff00d454>
    d548:	003fc306 	br	d458 <__alt_data_end+0xff00d458>
    d54c:	143ff604 	addi	r16,r2,-40
    d550:	9c20983a 	sll	r16,r19,r16
    d554:	0025883a 	mov	r18,zero
    d558:	003ee206 	br	d0e4 <__alt_data_end+0xff00d0e4>
    d55c:	d9800315 	stw	r6,12(sp)
    d560:	d9c00215 	stw	r7,8(sp)
    d564:	000ec1c0 	call	ec1c <__clzsi2>
    d568:	10800804 	addi	r2,r2,32
    d56c:	d9c00217 	ldw	r7,8(sp)
    d570:	d9800317 	ldw	r6,12(sp)
    d574:	003ed106 	br	d0bc <__alt_data_end+0xff00d0bc>
    d578:	147ff604 	addi	r17,r2,-40
    d57c:	3462983a 	sll	r17,r6,r17
    d580:	0011883a 	mov	r8,zero
    d584:	003ef506 	br	d15c <__alt_data_end+0xff00d15c>
    d588:	3009883a 	mov	r4,r6
    d58c:	d9800315 	stw	r6,12(sp)
    d590:	da400115 	stw	r9,4(sp)
    d594:	000ec1c0 	call	ec1c <__clzsi2>
    d598:	10800804 	addi	r2,r2,32
    d59c:	da400117 	ldw	r9,4(sp)
    d5a0:	d9800317 	ldw	r6,12(sp)
    d5a4:	003ee306 	br	d134 <__alt_data_end+0xff00d134>
    d5a8:	85a1883a 	add	r16,r16,r22
    d5ac:	8585803a 	cmpltu	r2,r16,r22
    d5b0:	1705883a 	add	r2,r2,fp
    d5b4:	14a5883a 	add	r18,r2,r18
    d5b8:	88bfffc4 	addi	r2,r17,-1
    d5bc:	e4800c2e 	bgeu	fp,r18,d5f0 <__divdf3+0x72c>
    d5c0:	90c03e36 	bltu	r18,r3,d6bc <__divdf3+0x7f8>
    d5c4:	1c806926 	beq	r3,r18,d76c <__divdf3+0x8a8>
    d5c8:	90c7c83a 	sub	r3,r18,r3
    d5cc:	1023883a 	mov	r17,r2
    d5d0:	003f5206 	br	d31c <__alt_data_end+0xff00d31c>
    d5d4:	923f0436 	bltu	r18,r8,d1e8 <__alt_data_end+0xff00d1e8>
    d5d8:	800897fa 	slli	r4,r16,31
    d5dc:	9004d07a 	srli	r2,r18,1
    d5e0:	8006d07a 	srli	r3,r16,1
    d5e4:	902097fa 	slli	r16,r18,31
    d5e8:	20a4b03a 	or	r18,r4,r2
    d5ec:	003f0106 	br	d1f4 <__alt_data_end+0xff00d1f4>
    d5f0:	e4bff51e 	bne	fp,r18,d5c8 <__alt_data_end+0xff00d5c8>
    d5f4:	85bff22e 	bgeu	r16,r22,d5c0 <__alt_data_end+0xff00d5c0>
    d5f8:	e0c7c83a 	sub	r3,fp,r3
    d5fc:	1023883a 	mov	r17,r2
    d600:	003f4606 	br	d31c <__alt_data_end+0xff00d31c>
    d604:	100f883a 	mov	r7,r2
    d608:	003f2b06 	br	d2b8 <__alt_data_end+0xff00d2b8>
    d60c:	180d883a 	mov	r6,r3
    d610:	003f1306 	br	d260 <__alt_data_end+0xff00d260>
    d614:	813fe436 	bltu	r16,r4,d5a8 <__alt_data_end+0xff00d5a8>
    d618:	0007883a 	mov	r3,zero
    d61c:	003f3f06 	br	d31c <__alt_data_end+0xff00d31c>
    d620:	ba402c36 	bltu	r23,r9,d6d4 <__divdf3+0x810>
    d624:	4dc05426 	beq	r9,r23,d778 <__divdf3+0x8b4>
    d628:	1011883a 	mov	r8,r2
    d62c:	003f8906 	br	d454 <__alt_data_end+0xff00d454>
    d630:	023fffc4 	movi	r8,-1
    d634:	003f8806 	br	d458 <__alt_data_end+0xff00d458>
    d638:	1811883a 	mov	r8,r3
    d63c:	003f5406 	br	d390 <__alt_data_end+0xff00d390>
    d640:	1025883a 	mov	r18,r2
    d644:	003f6d06 	br	d3fc <__alt_data_end+0xff00d3fc>
    d648:	b827883a 	mov	r19,r23
    d64c:	003f8206 	br	d458 <__alt_data_end+0xff00d458>
    d650:	010007c4 	movi	r4,31
    d654:	20c02616 	blt	r4,r3,d6f0 <__divdf3+0x82c>
    d658:	00800804 	movi	r2,32
    d65c:	10c5c83a 	sub	r2,r2,r3
    d660:	888a983a 	sll	r5,r17,r2
    d664:	40c8d83a 	srl	r4,r8,r3
    d668:	4084983a 	sll	r2,r8,r2
    d66c:	88e2d83a 	srl	r17,r17,r3
    d670:	2906b03a 	or	r3,r5,r4
    d674:	1004c03a 	cmpne	r2,r2,zero
    d678:	1886b03a 	or	r3,r3,r2
    d67c:	188001cc 	andi	r2,r3,7
    d680:	10000726 	beq	r2,zero,d6a0 <__divdf3+0x7dc>
    d684:	188003cc 	andi	r2,r3,15
    d688:	01000104 	movi	r4,4
    d68c:	11000426 	beq	r2,r4,d6a0 <__divdf3+0x7dc>
    d690:	1805883a 	mov	r2,r3
    d694:	10c00104 	addi	r3,r2,4
    d698:	1885803a 	cmpltu	r2,r3,r2
    d69c:	88a3883a 	add	r17,r17,r2
    d6a0:	8880202c 	andhi	r2,r17,128
    d6a4:	10002726 	beq	r2,zero,d744 <__divdf3+0x880>
    d6a8:	98c0004c 	andi	r3,r19,1
    d6ac:	00800044 	movi	r2,1
    d6b0:	000b883a 	mov	r5,zero
    d6b4:	0025883a 	mov	r18,zero
    d6b8:	003e6106 	br	d040 <__alt_data_end+0xff00d040>
    d6bc:	85a1883a 	add	r16,r16,r22
    d6c0:	8585803a 	cmpltu	r2,r16,r22
    d6c4:	1705883a 	add	r2,r2,fp
    d6c8:	14a5883a 	add	r18,r2,r18
    d6cc:	8c7fff84 	addi	r17,r17,-2
    d6d0:	003f1106 	br	d318 <__alt_data_end+0xff00d318>
    d6d4:	b589883a 	add	r4,r22,r22
    d6d8:	25ad803a 	cmpltu	r22,r4,r22
    d6dc:	b739883a 	add	fp,r22,fp
    d6e0:	40bfff84 	addi	r2,r8,-2
    d6e4:	bf2f883a 	add	r23,r23,fp
    d6e8:	202d883a 	mov	r22,r4
    d6ec:	003f9306 	br	d53c <__alt_data_end+0xff00d53c>
    d6f0:	013ff844 	movi	r4,-31
    d6f4:	2085c83a 	sub	r2,r4,r2
    d6f8:	8888d83a 	srl	r4,r17,r2
    d6fc:	00800804 	movi	r2,32
    d700:	18802126 	beq	r3,r2,d788 <__divdf3+0x8c4>
    d704:	00801004 	movi	r2,64
    d708:	10c5c83a 	sub	r2,r2,r3
    d70c:	8884983a 	sll	r2,r17,r2
    d710:	1204b03a 	or	r2,r2,r8
    d714:	1004c03a 	cmpne	r2,r2,zero
    d718:	2084b03a 	or	r2,r4,r2
    d71c:	144001cc 	andi	r17,r2,7
    d720:	88000d1e 	bne	r17,zero,d758 <__divdf3+0x894>
    d724:	000b883a 	mov	r5,zero
    d728:	1024d0fa 	srli	r18,r2,3
    d72c:	98c0004c 	andi	r3,r19,1
    d730:	0005883a 	mov	r2,zero
    d734:	9464b03a 	or	r18,r18,r17
    d738:	003e4106 	br	d040 <__alt_data_end+0xff00d040>
    d73c:	1007883a 	mov	r3,r2
    d740:	0023883a 	mov	r17,zero
    d744:	880a927a 	slli	r5,r17,9
    d748:	1805883a 	mov	r2,r3
    d74c:	8822977a 	slli	r17,r17,29
    d750:	280ad33a 	srli	r5,r5,12
    d754:	003ff406 	br	d728 <__alt_data_end+0xff00d728>
    d758:	10c003cc 	andi	r3,r2,15
    d75c:	01000104 	movi	r4,4
    d760:	193ff626 	beq	r3,r4,d73c <__alt_data_end+0xff00d73c>
    d764:	0023883a 	mov	r17,zero
    d768:	003fca06 	br	d694 <__alt_data_end+0xff00d694>
    d76c:	813fd336 	bltu	r16,r4,d6bc <__alt_data_end+0xff00d6bc>
    d770:	1023883a 	mov	r17,r2
    d774:	003fa806 	br	d618 <__alt_data_end+0xff00d618>
    d778:	b0ffd636 	bltu	r22,r3,d6d4 <__alt_data_end+0xff00d6d4>
    d77c:	1011883a 	mov	r8,r2
    d780:	b0ff341e 	bne	r22,r3,d454 <__alt_data_end+0xff00d454>
    d784:	003f3406 	br	d458 <__alt_data_end+0xff00d458>
    d788:	0005883a 	mov	r2,zero
    d78c:	003fe006 	br	d710 <__alt_data_end+0xff00d710>
    d790:	00800434 	movhi	r2,16
    d794:	89400234 	orhi	r5,r17,8
    d798:	10bfffc4 	addi	r2,r2,-1
    d79c:	b807883a 	mov	r3,r23
    d7a0:	288a703a 	and	r5,r5,r2
    d7a4:	4025883a 	mov	r18,r8
    d7a8:	003e8206 	br	d1b4 <__alt_data_end+0xff00d1b4>

0000d7ac <__eqdf2>:
    d7ac:	2804d53a 	srli	r2,r5,20
    d7b0:	3806d53a 	srli	r3,r7,20
    d7b4:	02000434 	movhi	r8,16
    d7b8:	423fffc4 	addi	r8,r8,-1
    d7bc:	1081ffcc 	andi	r2,r2,2047
    d7c0:	0281ffc4 	movi	r10,2047
    d7c4:	2a12703a 	and	r9,r5,r8
    d7c8:	18c1ffcc 	andi	r3,r3,2047
    d7cc:	3a10703a 	and	r8,r7,r8
    d7d0:	280ad7fa 	srli	r5,r5,31
    d7d4:	380ed7fa 	srli	r7,r7,31
    d7d8:	12801026 	beq	r2,r10,d81c <__eqdf2+0x70>
    d7dc:	0281ffc4 	movi	r10,2047
    d7e0:	1a800a26 	beq	r3,r10,d80c <__eqdf2+0x60>
    d7e4:	10c00226 	beq	r2,r3,d7f0 <__eqdf2+0x44>
    d7e8:	00800044 	movi	r2,1
    d7ec:	f800283a 	ret
    d7f0:	4a3ffd1e 	bne	r9,r8,d7e8 <__alt_data_end+0xff00d7e8>
    d7f4:	21bffc1e 	bne	r4,r6,d7e8 <__alt_data_end+0xff00d7e8>
    d7f8:	29c00c26 	beq	r5,r7,d82c <__eqdf2+0x80>
    d7fc:	103ffa1e 	bne	r2,zero,d7e8 <__alt_data_end+0xff00d7e8>
    d800:	2244b03a 	or	r2,r4,r9
    d804:	1004c03a 	cmpne	r2,r2,zero
    d808:	f800283a 	ret
    d80c:	3214b03a 	or	r10,r6,r8
    d810:	503ff426 	beq	r10,zero,d7e4 <__alt_data_end+0xff00d7e4>
    d814:	00800044 	movi	r2,1
    d818:	f800283a 	ret
    d81c:	2254b03a 	or	r10,r4,r9
    d820:	503fee26 	beq	r10,zero,d7dc <__alt_data_end+0xff00d7dc>
    d824:	00800044 	movi	r2,1
    d828:	f800283a 	ret
    d82c:	0005883a 	mov	r2,zero
    d830:	f800283a 	ret

0000d834 <__gedf2>:
    d834:	2804d53a 	srli	r2,r5,20
    d838:	3806d53a 	srli	r3,r7,20
    d83c:	02000434 	movhi	r8,16
    d840:	423fffc4 	addi	r8,r8,-1
    d844:	1081ffcc 	andi	r2,r2,2047
    d848:	0241ffc4 	movi	r9,2047
    d84c:	2a14703a 	and	r10,r5,r8
    d850:	18c1ffcc 	andi	r3,r3,2047
    d854:	3a10703a 	and	r8,r7,r8
    d858:	280ad7fa 	srli	r5,r5,31
    d85c:	380ed7fa 	srli	r7,r7,31
    d860:	12401d26 	beq	r2,r9,d8d8 <__gedf2+0xa4>
    d864:	0241ffc4 	movi	r9,2047
    d868:	1a401226 	beq	r3,r9,d8b4 <__gedf2+0x80>
    d86c:	1000081e 	bne	r2,zero,d890 <__gedf2+0x5c>
    d870:	2296b03a 	or	r11,r4,r10
    d874:	5813003a 	cmpeq	r9,r11,zero
    d878:	1800091e 	bne	r3,zero,d8a0 <__gedf2+0x6c>
    d87c:	3218b03a 	or	r12,r6,r8
    d880:	6000071e 	bne	r12,zero,d8a0 <__gedf2+0x6c>
    d884:	0005883a 	mov	r2,zero
    d888:	5800101e 	bne	r11,zero,d8cc <__gedf2+0x98>
    d88c:	f800283a 	ret
    d890:	18000c1e 	bne	r3,zero,d8c4 <__gedf2+0x90>
    d894:	3212b03a 	or	r9,r6,r8
    d898:	48000c26 	beq	r9,zero,d8cc <__gedf2+0x98>
    d89c:	0013883a 	mov	r9,zero
    d8a0:	39c03fcc 	andi	r7,r7,255
    d8a4:	48000826 	beq	r9,zero,d8c8 <__gedf2+0x94>
    d8a8:	38000926 	beq	r7,zero,d8d0 <__gedf2+0x9c>
    d8ac:	00800044 	movi	r2,1
    d8b0:	f800283a 	ret
    d8b4:	3212b03a 	or	r9,r6,r8
    d8b8:	483fec26 	beq	r9,zero,d86c <__alt_data_end+0xff00d86c>
    d8bc:	00bfff84 	movi	r2,-2
    d8c0:	f800283a 	ret
    d8c4:	39c03fcc 	andi	r7,r7,255
    d8c8:	29c00626 	beq	r5,r7,d8e4 <__gedf2+0xb0>
    d8cc:	283ff726 	beq	r5,zero,d8ac <__alt_data_end+0xff00d8ac>
    d8d0:	00bfffc4 	movi	r2,-1
    d8d4:	f800283a 	ret
    d8d8:	2292b03a 	or	r9,r4,r10
    d8dc:	483fe126 	beq	r9,zero,d864 <__alt_data_end+0xff00d864>
    d8e0:	003ff606 	br	d8bc <__alt_data_end+0xff00d8bc>
    d8e4:	18bff916 	blt	r3,r2,d8cc <__alt_data_end+0xff00d8cc>
    d8e8:	10c00316 	blt	r2,r3,d8f8 <__gedf2+0xc4>
    d8ec:	42bff736 	bltu	r8,r10,d8cc <__alt_data_end+0xff00d8cc>
    d8f0:	52000326 	beq	r10,r8,d900 <__gedf2+0xcc>
    d8f4:	5200042e 	bgeu	r10,r8,d908 <__gedf2+0xd4>
    d8f8:	283fec1e 	bne	r5,zero,d8ac <__alt_data_end+0xff00d8ac>
    d8fc:	003ff406 	br	d8d0 <__alt_data_end+0xff00d8d0>
    d900:	313ff236 	bltu	r6,r4,d8cc <__alt_data_end+0xff00d8cc>
    d904:	21bffc36 	bltu	r4,r6,d8f8 <__alt_data_end+0xff00d8f8>
    d908:	0005883a 	mov	r2,zero
    d90c:	f800283a 	ret

0000d910 <__ledf2>:
    d910:	2804d53a 	srli	r2,r5,20
    d914:	3810d53a 	srli	r8,r7,20
    d918:	00c00434 	movhi	r3,16
    d91c:	18ffffc4 	addi	r3,r3,-1
    d920:	1081ffcc 	andi	r2,r2,2047
    d924:	0241ffc4 	movi	r9,2047
    d928:	28d4703a 	and	r10,r5,r3
    d92c:	4201ffcc 	andi	r8,r8,2047
    d930:	38c6703a 	and	r3,r7,r3
    d934:	280ad7fa 	srli	r5,r5,31
    d938:	380ed7fa 	srli	r7,r7,31
    d93c:	12401f26 	beq	r2,r9,d9bc <__ledf2+0xac>
    d940:	0241ffc4 	movi	r9,2047
    d944:	42401426 	beq	r8,r9,d998 <__ledf2+0x88>
    d948:	1000091e 	bne	r2,zero,d970 <__ledf2+0x60>
    d94c:	2296b03a 	or	r11,r4,r10
    d950:	5813003a 	cmpeq	r9,r11,zero
    d954:	29403fcc 	andi	r5,r5,255
    d958:	40000a1e 	bne	r8,zero,d984 <__ledf2+0x74>
    d95c:	30d8b03a 	or	r12,r6,r3
    d960:	6000081e 	bne	r12,zero,d984 <__ledf2+0x74>
    d964:	0005883a 	mov	r2,zero
    d968:	5800111e 	bne	r11,zero,d9b0 <__ledf2+0xa0>
    d96c:	f800283a 	ret
    d970:	29403fcc 	andi	r5,r5,255
    d974:	40000c1e 	bne	r8,zero,d9a8 <__ledf2+0x98>
    d978:	30d2b03a 	or	r9,r6,r3
    d97c:	48000c26 	beq	r9,zero,d9b0 <__ledf2+0xa0>
    d980:	0013883a 	mov	r9,zero
    d984:	39c03fcc 	andi	r7,r7,255
    d988:	48000826 	beq	r9,zero,d9ac <__ledf2+0x9c>
    d98c:	38001126 	beq	r7,zero,d9d4 <__ledf2+0xc4>
    d990:	00800044 	movi	r2,1
    d994:	f800283a 	ret
    d998:	30d2b03a 	or	r9,r6,r3
    d99c:	483fea26 	beq	r9,zero,d948 <__alt_data_end+0xff00d948>
    d9a0:	00800084 	movi	r2,2
    d9a4:	f800283a 	ret
    d9a8:	39c03fcc 	andi	r7,r7,255
    d9ac:	39400726 	beq	r7,r5,d9cc <__ledf2+0xbc>
    d9b0:	2800081e 	bne	r5,zero,d9d4 <__ledf2+0xc4>
    d9b4:	00800044 	movi	r2,1
    d9b8:	f800283a 	ret
    d9bc:	2292b03a 	or	r9,r4,r10
    d9c0:	483fdf26 	beq	r9,zero,d940 <__alt_data_end+0xff00d940>
    d9c4:	00800084 	movi	r2,2
    d9c8:	f800283a 	ret
    d9cc:	4080030e 	bge	r8,r2,d9dc <__ledf2+0xcc>
    d9d0:	383fef26 	beq	r7,zero,d990 <__alt_data_end+0xff00d990>
    d9d4:	00bfffc4 	movi	r2,-1
    d9d8:	f800283a 	ret
    d9dc:	123feb16 	blt	r2,r8,d98c <__alt_data_end+0xff00d98c>
    d9e0:	1abff336 	bltu	r3,r10,d9b0 <__alt_data_end+0xff00d9b0>
    d9e4:	50c00326 	beq	r10,r3,d9f4 <__ledf2+0xe4>
    d9e8:	50c0042e 	bgeu	r10,r3,d9fc <__ledf2+0xec>
    d9ec:	283fe81e 	bne	r5,zero,d990 <__alt_data_end+0xff00d990>
    d9f0:	003ff806 	br	d9d4 <__alt_data_end+0xff00d9d4>
    d9f4:	313fee36 	bltu	r6,r4,d9b0 <__alt_data_end+0xff00d9b0>
    d9f8:	21bffc36 	bltu	r4,r6,d9ec <__alt_data_end+0xff00d9ec>
    d9fc:	0005883a 	mov	r2,zero
    da00:	f800283a 	ret

0000da04 <__muldf3>:
    da04:	defff304 	addi	sp,sp,-52
    da08:	2804d53a 	srli	r2,r5,20
    da0c:	dd800915 	stw	r22,36(sp)
    da10:	282cd7fa 	srli	r22,r5,31
    da14:	dc000315 	stw	r16,12(sp)
    da18:	04000434 	movhi	r16,16
    da1c:	dd400815 	stw	r21,32(sp)
    da20:	dc800515 	stw	r18,20(sp)
    da24:	843fffc4 	addi	r16,r16,-1
    da28:	dfc00c15 	stw	ra,48(sp)
    da2c:	df000b15 	stw	fp,44(sp)
    da30:	ddc00a15 	stw	r23,40(sp)
    da34:	dd000715 	stw	r20,28(sp)
    da38:	dcc00615 	stw	r19,24(sp)
    da3c:	dc400415 	stw	r17,16(sp)
    da40:	1481ffcc 	andi	r18,r2,2047
    da44:	2c20703a 	and	r16,r5,r16
    da48:	b02b883a 	mov	r21,r22
    da4c:	b2403fcc 	andi	r9,r22,255
    da50:	90006026 	beq	r18,zero,dbd4 <__muldf3+0x1d0>
    da54:	0081ffc4 	movi	r2,2047
    da58:	2029883a 	mov	r20,r4
    da5c:	90803626 	beq	r18,r2,db38 <__muldf3+0x134>
    da60:	80800434 	orhi	r2,r16,16
    da64:	100490fa 	slli	r2,r2,3
    da68:	2020d77a 	srli	r16,r4,29
    da6c:	202890fa 	slli	r20,r4,3
    da70:	94bf0044 	addi	r18,r18,-1023
    da74:	80a0b03a 	or	r16,r16,r2
    da78:	0027883a 	mov	r19,zero
    da7c:	0039883a 	mov	fp,zero
    da80:	3804d53a 	srli	r2,r7,20
    da84:	382ed7fa 	srli	r23,r7,31
    da88:	04400434 	movhi	r17,16
    da8c:	8c7fffc4 	addi	r17,r17,-1
    da90:	1081ffcc 	andi	r2,r2,2047
    da94:	3011883a 	mov	r8,r6
    da98:	3c62703a 	and	r17,r7,r17
    da9c:	ba803fcc 	andi	r10,r23,255
    daa0:	10006d26 	beq	r2,zero,dc58 <__muldf3+0x254>
    daa4:	00c1ffc4 	movi	r3,2047
    daa8:	10c06526 	beq	r2,r3,dc40 <__muldf3+0x23c>
    daac:	88c00434 	orhi	r3,r17,16
    dab0:	180690fa 	slli	r3,r3,3
    dab4:	3022d77a 	srli	r17,r6,29
    dab8:	301090fa 	slli	r8,r6,3
    dabc:	10bf0044 	addi	r2,r2,-1023
    dac0:	88e2b03a 	or	r17,r17,r3
    dac4:	000b883a 	mov	r5,zero
    dac8:	9085883a 	add	r2,r18,r2
    dacc:	2cc8b03a 	or	r4,r5,r19
    dad0:	00c003c4 	movi	r3,15
    dad4:	bdacf03a 	xor	r22,r23,r22
    dad8:	12c00044 	addi	r11,r2,1
    dadc:	19009936 	bltu	r3,r4,dd44 <__muldf3+0x340>
    dae0:	200890ba 	slli	r4,r4,2
    dae4:	00c00074 	movhi	r3,1
    dae8:	18f6be04 	addi	r3,r3,-9480
    daec:	20c9883a 	add	r4,r4,r3
    daf0:	20c00017 	ldw	r3,0(r4)
    daf4:	1800683a 	jmp	r3
    daf8:	0000dd44 	movi	zero,885
    dafc:	0000db58 	cmpnei	zero,zero,877
    db00:	0000db58 	cmpnei	zero,zero,877
    db04:	0000db54 	movui	zero,877
    db08:	0000dd20 	cmpeqi	zero,zero,884
    db0c:	0000dd20 	cmpeqi	zero,zero,884
    db10:	0000dd08 	cmpgei	zero,zero,884
    db14:	0000db54 	movui	zero,877
    db18:	0000dd20 	cmpeqi	zero,zero,884
    db1c:	0000dd08 	cmpgei	zero,zero,884
    db20:	0000dd20 	cmpeqi	zero,zero,884
    db24:	0000db54 	movui	zero,877
    db28:	0000dd30 	cmpltui	zero,zero,884
    db2c:	0000dd30 	cmpltui	zero,zero,884
    db30:	0000dd30 	cmpltui	zero,zero,884
    db34:	0000df4c 	andi	zero,zero,893
    db38:	2404b03a 	or	r2,r4,r16
    db3c:	10006f1e 	bne	r2,zero,dcfc <__muldf3+0x2f8>
    db40:	04c00204 	movi	r19,8
    db44:	0021883a 	mov	r16,zero
    db48:	0029883a 	mov	r20,zero
    db4c:	07000084 	movi	fp,2
    db50:	003fcb06 	br	da80 <__alt_data_end+0xff00da80>
    db54:	502d883a 	mov	r22,r10
    db58:	00800084 	movi	r2,2
    db5c:	28805726 	beq	r5,r2,dcbc <__muldf3+0x2b8>
    db60:	008000c4 	movi	r2,3
    db64:	28816626 	beq	r5,r2,e100 <__muldf3+0x6fc>
    db68:	00800044 	movi	r2,1
    db6c:	2881411e 	bne	r5,r2,e074 <__muldf3+0x670>
    db70:	b02b883a 	mov	r21,r22
    db74:	0005883a 	mov	r2,zero
    db78:	000b883a 	mov	r5,zero
    db7c:	0029883a 	mov	r20,zero
    db80:	1004953a 	slli	r2,r2,20
    db84:	a8c03fcc 	andi	r3,r21,255
    db88:	04400434 	movhi	r17,16
    db8c:	8c7fffc4 	addi	r17,r17,-1
    db90:	180697fa 	slli	r3,r3,31
    db94:	2c4a703a 	and	r5,r5,r17
    db98:	288ab03a 	or	r5,r5,r2
    db9c:	28c6b03a 	or	r3,r5,r3
    dba0:	a005883a 	mov	r2,r20
    dba4:	dfc00c17 	ldw	ra,48(sp)
    dba8:	df000b17 	ldw	fp,44(sp)
    dbac:	ddc00a17 	ldw	r23,40(sp)
    dbb0:	dd800917 	ldw	r22,36(sp)
    dbb4:	dd400817 	ldw	r21,32(sp)
    dbb8:	dd000717 	ldw	r20,28(sp)
    dbbc:	dcc00617 	ldw	r19,24(sp)
    dbc0:	dc800517 	ldw	r18,20(sp)
    dbc4:	dc400417 	ldw	r17,16(sp)
    dbc8:	dc000317 	ldw	r16,12(sp)
    dbcc:	dec00d04 	addi	sp,sp,52
    dbd0:	f800283a 	ret
    dbd4:	2404b03a 	or	r2,r4,r16
    dbd8:	2027883a 	mov	r19,r4
    dbdc:	10004226 	beq	r2,zero,dce8 <__muldf3+0x2e4>
    dbe0:	8000fc26 	beq	r16,zero,dfd4 <__muldf3+0x5d0>
    dbe4:	8009883a 	mov	r4,r16
    dbe8:	d9800215 	stw	r6,8(sp)
    dbec:	d9c00015 	stw	r7,0(sp)
    dbf0:	da400115 	stw	r9,4(sp)
    dbf4:	000ec1c0 	call	ec1c <__clzsi2>
    dbf8:	d9800217 	ldw	r6,8(sp)
    dbfc:	d9c00017 	ldw	r7,0(sp)
    dc00:	da400117 	ldw	r9,4(sp)
    dc04:	113ffd44 	addi	r4,r2,-11
    dc08:	00c00704 	movi	r3,28
    dc0c:	1900ed16 	blt	r3,r4,dfc4 <__muldf3+0x5c0>
    dc10:	00c00744 	movi	r3,29
    dc14:	147ffe04 	addi	r17,r2,-8
    dc18:	1907c83a 	sub	r3,r3,r4
    dc1c:	8460983a 	sll	r16,r16,r17
    dc20:	98c6d83a 	srl	r3,r19,r3
    dc24:	9c68983a 	sll	r20,r19,r17
    dc28:	1c20b03a 	or	r16,r3,r16
    dc2c:	1080fcc4 	addi	r2,r2,1011
    dc30:	00a5c83a 	sub	r18,zero,r2
    dc34:	0027883a 	mov	r19,zero
    dc38:	0039883a 	mov	fp,zero
    dc3c:	003f9006 	br	da80 <__alt_data_end+0xff00da80>
    dc40:	3446b03a 	or	r3,r6,r17
    dc44:	1800261e 	bne	r3,zero,dce0 <__muldf3+0x2dc>
    dc48:	0023883a 	mov	r17,zero
    dc4c:	0011883a 	mov	r8,zero
    dc50:	01400084 	movi	r5,2
    dc54:	003f9c06 	br	dac8 <__alt_data_end+0xff00dac8>
    dc58:	3446b03a 	or	r3,r6,r17
    dc5c:	18001c26 	beq	r3,zero,dcd0 <__muldf3+0x2cc>
    dc60:	8800ce26 	beq	r17,zero,df9c <__muldf3+0x598>
    dc64:	8809883a 	mov	r4,r17
    dc68:	d9800215 	stw	r6,8(sp)
    dc6c:	da400115 	stw	r9,4(sp)
    dc70:	da800015 	stw	r10,0(sp)
    dc74:	000ec1c0 	call	ec1c <__clzsi2>
    dc78:	d9800217 	ldw	r6,8(sp)
    dc7c:	da400117 	ldw	r9,4(sp)
    dc80:	da800017 	ldw	r10,0(sp)
    dc84:	113ffd44 	addi	r4,r2,-11
    dc88:	00c00704 	movi	r3,28
    dc8c:	1900bf16 	blt	r3,r4,df8c <__muldf3+0x588>
    dc90:	00c00744 	movi	r3,29
    dc94:	123ffe04 	addi	r8,r2,-8
    dc98:	1907c83a 	sub	r3,r3,r4
    dc9c:	8a22983a 	sll	r17,r17,r8
    dca0:	30c6d83a 	srl	r3,r6,r3
    dca4:	3210983a 	sll	r8,r6,r8
    dca8:	1c62b03a 	or	r17,r3,r17
    dcac:	1080fcc4 	addi	r2,r2,1011
    dcb0:	0085c83a 	sub	r2,zero,r2
    dcb4:	000b883a 	mov	r5,zero
    dcb8:	003f8306 	br	dac8 <__alt_data_end+0xff00dac8>
    dcbc:	b02b883a 	mov	r21,r22
    dcc0:	0081ffc4 	movi	r2,2047
    dcc4:	000b883a 	mov	r5,zero
    dcc8:	0029883a 	mov	r20,zero
    dccc:	003fac06 	br	db80 <__alt_data_end+0xff00db80>
    dcd0:	0023883a 	mov	r17,zero
    dcd4:	0011883a 	mov	r8,zero
    dcd8:	01400044 	movi	r5,1
    dcdc:	003f7a06 	br	dac8 <__alt_data_end+0xff00dac8>
    dce0:	014000c4 	movi	r5,3
    dce4:	003f7806 	br	dac8 <__alt_data_end+0xff00dac8>
    dce8:	04c00104 	movi	r19,4
    dcec:	0021883a 	mov	r16,zero
    dcf0:	0029883a 	mov	r20,zero
    dcf4:	07000044 	movi	fp,1
    dcf8:	003f6106 	br	da80 <__alt_data_end+0xff00da80>
    dcfc:	04c00304 	movi	r19,12
    dd00:	070000c4 	movi	fp,3
    dd04:	003f5e06 	br	da80 <__alt_data_end+0xff00da80>
    dd08:	01400434 	movhi	r5,16
    dd0c:	002b883a 	mov	r21,zero
    dd10:	297fffc4 	addi	r5,r5,-1
    dd14:	053fffc4 	movi	r20,-1
    dd18:	0081ffc4 	movi	r2,2047
    dd1c:	003f9806 	br	db80 <__alt_data_end+0xff00db80>
    dd20:	8023883a 	mov	r17,r16
    dd24:	a011883a 	mov	r8,r20
    dd28:	e00b883a 	mov	r5,fp
    dd2c:	003f8a06 	br	db58 <__alt_data_end+0xff00db58>
    dd30:	8023883a 	mov	r17,r16
    dd34:	a011883a 	mov	r8,r20
    dd38:	482d883a 	mov	r22,r9
    dd3c:	e00b883a 	mov	r5,fp
    dd40:	003f8506 	br	db58 <__alt_data_end+0xff00db58>
    dd44:	a00ad43a 	srli	r5,r20,16
    dd48:	401ad43a 	srli	r13,r8,16
    dd4c:	a53fffcc 	andi	r20,r20,65535
    dd50:	423fffcc 	andi	r8,r8,65535
    dd54:	4519383a 	mul	r12,r8,r20
    dd58:	4147383a 	mul	r3,r8,r5
    dd5c:	6d09383a 	mul	r4,r13,r20
    dd60:	600cd43a 	srli	r6,r12,16
    dd64:	2b5d383a 	mul	r14,r5,r13
    dd68:	20c9883a 	add	r4,r4,r3
    dd6c:	310d883a 	add	r6,r6,r4
    dd70:	30c0022e 	bgeu	r6,r3,dd7c <__muldf3+0x378>
    dd74:	00c00074 	movhi	r3,1
    dd78:	70dd883a 	add	r14,r14,r3
    dd7c:	8826d43a 	srli	r19,r17,16
    dd80:	8bffffcc 	andi	r15,r17,65535
    dd84:	7d23383a 	mul	r17,r15,r20
    dd88:	7949383a 	mul	r4,r15,r5
    dd8c:	9d29383a 	mul	r20,r19,r20
    dd90:	8814d43a 	srli	r10,r17,16
    dd94:	3012943a 	slli	r9,r6,16
    dd98:	a129883a 	add	r20,r20,r4
    dd9c:	633fffcc 	andi	r12,r12,65535
    dda0:	5515883a 	add	r10,r10,r20
    dda4:	3006d43a 	srli	r3,r6,16
    dda8:	4b13883a 	add	r9,r9,r12
    ddac:	2ccb383a 	mul	r5,r5,r19
    ddb0:	5100022e 	bgeu	r10,r4,ddbc <__muldf3+0x3b8>
    ddb4:	01000074 	movhi	r4,1
    ddb8:	290b883a 	add	r5,r5,r4
    ddbc:	802ad43a 	srli	r21,r16,16
    ddc0:	843fffcc 	andi	r16,r16,65535
    ddc4:	440d383a 	mul	r6,r8,r16
    ddc8:	4565383a 	mul	r18,r8,r21
    ddcc:	8349383a 	mul	r4,r16,r13
    ddd0:	500e943a 	slli	r7,r10,16
    ddd4:	3010d43a 	srli	r8,r6,16
    ddd8:	5028d43a 	srli	r20,r10,16
    dddc:	2489883a 	add	r4,r4,r18
    dde0:	8abfffcc 	andi	r10,r17,65535
    dde4:	3a95883a 	add	r10,r7,r10
    dde8:	4119883a 	add	r12,r8,r4
    ddec:	a169883a 	add	r20,r20,r5
    ddf0:	1a87883a 	add	r3,r3,r10
    ddf4:	6d5b383a 	mul	r13,r13,r21
    ddf8:	6480022e 	bgeu	r12,r18,de04 <__muldf3+0x400>
    ddfc:	01000074 	movhi	r4,1
    de00:	691b883a 	add	r13,r13,r4
    de04:	7c25383a 	mul	r18,r15,r16
    de08:	7d4b383a 	mul	r5,r15,r21
    de0c:	84cf383a 	mul	r7,r16,r19
    de10:	901ed43a 	srli	r15,r18,16
    de14:	6008d43a 	srli	r4,r12,16
    de18:	6010943a 	slli	r8,r12,16
    de1c:	394f883a 	add	r7,r7,r5
    de20:	333fffcc 	andi	r12,r6,65535
    de24:	79df883a 	add	r15,r15,r7
    de28:	235b883a 	add	r13,r4,r13
    de2c:	9d63383a 	mul	r17,r19,r21
    de30:	4309883a 	add	r4,r8,r12
    de34:	7940022e 	bgeu	r15,r5,de40 <__muldf3+0x43c>
    de38:	01400074 	movhi	r5,1
    de3c:	8963883a 	add	r17,r17,r5
    de40:	780a943a 	slli	r5,r15,16
    de44:	91bfffcc 	andi	r6,r18,65535
    de48:	70c7883a 	add	r3,r14,r3
    de4c:	298d883a 	add	r6,r5,r6
    de50:	1a8f803a 	cmpltu	r7,r3,r10
    de54:	350b883a 	add	r5,r6,r20
    de58:	20c7883a 	add	r3,r4,r3
    de5c:	3955883a 	add	r10,r7,r5
    de60:	1909803a 	cmpltu	r4,r3,r4
    de64:	6a91883a 	add	r8,r13,r10
    de68:	780cd43a 	srli	r6,r15,16
    de6c:	2219883a 	add	r12,r4,r8
    de70:	2d0b803a 	cmpltu	r5,r5,r20
    de74:	51cf803a 	cmpltu	r7,r10,r7
    de78:	29ceb03a 	or	r7,r5,r7
    de7c:	4351803a 	cmpltu	r8,r8,r13
    de80:	610b803a 	cmpltu	r5,r12,r4
    de84:	4148b03a 	or	r4,r8,r5
    de88:	398f883a 	add	r7,r7,r6
    de8c:	3909883a 	add	r4,r7,r4
    de90:	1810927a 	slli	r8,r3,9
    de94:	2449883a 	add	r4,r4,r17
    de98:	2008927a 	slli	r4,r4,9
    de9c:	6022d5fa 	srli	r17,r12,23
    dea0:	1806d5fa 	srli	r3,r3,23
    dea4:	4252b03a 	or	r9,r8,r9
    dea8:	600a927a 	slli	r5,r12,9
    deac:	4810c03a 	cmpne	r8,r9,zero
    deb0:	2462b03a 	or	r17,r4,r17
    deb4:	40c6b03a 	or	r3,r8,r3
    deb8:	8900402c 	andhi	r4,r17,256
    debc:	1950b03a 	or	r8,r3,r5
    dec0:	20000726 	beq	r4,zero,dee0 <__muldf3+0x4dc>
    dec4:	4006d07a 	srli	r3,r8,1
    dec8:	880497fa 	slli	r2,r17,31
    decc:	4200004c 	andi	r8,r8,1
    ded0:	8822d07a 	srli	r17,r17,1
    ded4:	1a10b03a 	or	r8,r3,r8
    ded8:	1210b03a 	or	r8,r2,r8
    dedc:	5805883a 	mov	r2,r11
    dee0:	1140ffc4 	addi	r5,r2,1023
    dee4:	0140440e 	bge	zero,r5,dff8 <__muldf3+0x5f4>
    dee8:	40c001cc 	andi	r3,r8,7
    deec:	18000726 	beq	r3,zero,df0c <__muldf3+0x508>
    def0:	40c003cc 	andi	r3,r8,15
    def4:	01000104 	movi	r4,4
    def8:	19000426 	beq	r3,r4,df0c <__muldf3+0x508>
    defc:	4107883a 	add	r3,r8,r4
    df00:	1a11803a 	cmpltu	r8,r3,r8
    df04:	8a23883a 	add	r17,r17,r8
    df08:	1811883a 	mov	r8,r3
    df0c:	88c0402c 	andhi	r3,r17,256
    df10:	18000426 	beq	r3,zero,df24 <__muldf3+0x520>
    df14:	11410004 	addi	r5,r2,1024
    df18:	00bfc034 	movhi	r2,65280
    df1c:	10bfffc4 	addi	r2,r2,-1
    df20:	88a2703a 	and	r17,r17,r2
    df24:	0081ff84 	movi	r2,2046
    df28:	117f6416 	blt	r2,r5,dcbc <__alt_data_end+0xff00dcbc>
    df2c:	8828977a 	slli	r20,r17,29
    df30:	4010d0fa 	srli	r8,r8,3
    df34:	8822927a 	slli	r17,r17,9
    df38:	2881ffcc 	andi	r2,r5,2047
    df3c:	a228b03a 	or	r20,r20,r8
    df40:	880ad33a 	srli	r5,r17,12
    df44:	b02b883a 	mov	r21,r22
    df48:	003f0d06 	br	db80 <__alt_data_end+0xff00db80>
    df4c:	8080022c 	andhi	r2,r16,8
    df50:	10000926 	beq	r2,zero,df78 <__muldf3+0x574>
    df54:	8880022c 	andhi	r2,r17,8
    df58:	1000071e 	bne	r2,zero,df78 <__muldf3+0x574>
    df5c:	00800434 	movhi	r2,16
    df60:	89400234 	orhi	r5,r17,8
    df64:	10bfffc4 	addi	r2,r2,-1
    df68:	b82b883a 	mov	r21,r23
    df6c:	288a703a 	and	r5,r5,r2
    df70:	4029883a 	mov	r20,r8
    df74:	003f6806 	br	dd18 <__alt_data_end+0xff00dd18>
    df78:	00800434 	movhi	r2,16
    df7c:	81400234 	orhi	r5,r16,8
    df80:	10bfffc4 	addi	r2,r2,-1
    df84:	288a703a 	and	r5,r5,r2
    df88:	003f6306 	br	dd18 <__alt_data_end+0xff00dd18>
    df8c:	147ff604 	addi	r17,r2,-40
    df90:	3462983a 	sll	r17,r6,r17
    df94:	0011883a 	mov	r8,zero
    df98:	003f4406 	br	dcac <__alt_data_end+0xff00dcac>
    df9c:	3009883a 	mov	r4,r6
    dfa0:	d9800215 	stw	r6,8(sp)
    dfa4:	da400115 	stw	r9,4(sp)
    dfa8:	da800015 	stw	r10,0(sp)
    dfac:	000ec1c0 	call	ec1c <__clzsi2>
    dfb0:	10800804 	addi	r2,r2,32
    dfb4:	da800017 	ldw	r10,0(sp)
    dfb8:	da400117 	ldw	r9,4(sp)
    dfbc:	d9800217 	ldw	r6,8(sp)
    dfc0:	003f3006 	br	dc84 <__alt_data_end+0xff00dc84>
    dfc4:	143ff604 	addi	r16,r2,-40
    dfc8:	9c20983a 	sll	r16,r19,r16
    dfcc:	0029883a 	mov	r20,zero
    dfd0:	003f1606 	br	dc2c <__alt_data_end+0xff00dc2c>
    dfd4:	d9800215 	stw	r6,8(sp)
    dfd8:	d9c00015 	stw	r7,0(sp)
    dfdc:	da400115 	stw	r9,4(sp)
    dfe0:	000ec1c0 	call	ec1c <__clzsi2>
    dfe4:	10800804 	addi	r2,r2,32
    dfe8:	da400117 	ldw	r9,4(sp)
    dfec:	d9c00017 	ldw	r7,0(sp)
    dff0:	d9800217 	ldw	r6,8(sp)
    dff4:	003f0306 	br	dc04 <__alt_data_end+0xff00dc04>
    dff8:	00c00044 	movi	r3,1
    dffc:	1947c83a 	sub	r3,r3,r5
    e000:	00800e04 	movi	r2,56
    e004:	10feda16 	blt	r2,r3,db70 <__alt_data_end+0xff00db70>
    e008:	008007c4 	movi	r2,31
    e00c:	10c01b16 	blt	r2,r3,e07c <__muldf3+0x678>
    e010:	00800804 	movi	r2,32
    e014:	10c5c83a 	sub	r2,r2,r3
    e018:	888a983a 	sll	r5,r17,r2
    e01c:	40c8d83a 	srl	r4,r8,r3
    e020:	4084983a 	sll	r2,r8,r2
    e024:	88e2d83a 	srl	r17,r17,r3
    e028:	2906b03a 	or	r3,r5,r4
    e02c:	1004c03a 	cmpne	r2,r2,zero
    e030:	1886b03a 	or	r3,r3,r2
    e034:	188001cc 	andi	r2,r3,7
    e038:	10000726 	beq	r2,zero,e058 <__muldf3+0x654>
    e03c:	188003cc 	andi	r2,r3,15
    e040:	01000104 	movi	r4,4
    e044:	11000426 	beq	r2,r4,e058 <__muldf3+0x654>
    e048:	1805883a 	mov	r2,r3
    e04c:	10c00104 	addi	r3,r2,4
    e050:	1885803a 	cmpltu	r2,r3,r2
    e054:	88a3883a 	add	r17,r17,r2
    e058:	8880202c 	andhi	r2,r17,128
    e05c:	10001c26 	beq	r2,zero,e0d0 <__muldf3+0x6cc>
    e060:	b02b883a 	mov	r21,r22
    e064:	00800044 	movi	r2,1
    e068:	000b883a 	mov	r5,zero
    e06c:	0029883a 	mov	r20,zero
    e070:	003ec306 	br	db80 <__alt_data_end+0xff00db80>
    e074:	5805883a 	mov	r2,r11
    e078:	003f9906 	br	dee0 <__alt_data_end+0xff00dee0>
    e07c:	00bff844 	movi	r2,-31
    e080:	1145c83a 	sub	r2,r2,r5
    e084:	8888d83a 	srl	r4,r17,r2
    e088:	00800804 	movi	r2,32
    e08c:	18801a26 	beq	r3,r2,e0f8 <__muldf3+0x6f4>
    e090:	00801004 	movi	r2,64
    e094:	10c5c83a 	sub	r2,r2,r3
    e098:	8884983a 	sll	r2,r17,r2
    e09c:	1204b03a 	or	r2,r2,r8
    e0a0:	1004c03a 	cmpne	r2,r2,zero
    e0a4:	2084b03a 	or	r2,r4,r2
    e0a8:	144001cc 	andi	r17,r2,7
    e0ac:	88000d1e 	bne	r17,zero,e0e4 <__muldf3+0x6e0>
    e0b0:	000b883a 	mov	r5,zero
    e0b4:	1028d0fa 	srli	r20,r2,3
    e0b8:	b02b883a 	mov	r21,r22
    e0bc:	0005883a 	mov	r2,zero
    e0c0:	a468b03a 	or	r20,r20,r17
    e0c4:	003eae06 	br	db80 <__alt_data_end+0xff00db80>
    e0c8:	1007883a 	mov	r3,r2
    e0cc:	0023883a 	mov	r17,zero
    e0d0:	880a927a 	slli	r5,r17,9
    e0d4:	1805883a 	mov	r2,r3
    e0d8:	8822977a 	slli	r17,r17,29
    e0dc:	280ad33a 	srli	r5,r5,12
    e0e0:	003ff406 	br	e0b4 <__alt_data_end+0xff00e0b4>
    e0e4:	10c003cc 	andi	r3,r2,15
    e0e8:	01000104 	movi	r4,4
    e0ec:	193ff626 	beq	r3,r4,e0c8 <__alt_data_end+0xff00e0c8>
    e0f0:	0023883a 	mov	r17,zero
    e0f4:	003fd506 	br	e04c <__alt_data_end+0xff00e04c>
    e0f8:	0005883a 	mov	r2,zero
    e0fc:	003fe706 	br	e09c <__alt_data_end+0xff00e09c>
    e100:	00800434 	movhi	r2,16
    e104:	89400234 	orhi	r5,r17,8
    e108:	10bfffc4 	addi	r2,r2,-1
    e10c:	b02b883a 	mov	r21,r22
    e110:	288a703a 	and	r5,r5,r2
    e114:	4029883a 	mov	r20,r8
    e118:	003eff06 	br	dd18 <__alt_data_end+0xff00dd18>

0000e11c <__subdf3>:
    e11c:	02000434 	movhi	r8,16
    e120:	423fffc4 	addi	r8,r8,-1
    e124:	defffb04 	addi	sp,sp,-20
    e128:	2a14703a 	and	r10,r5,r8
    e12c:	3812d53a 	srli	r9,r7,20
    e130:	3a10703a 	and	r8,r7,r8
    e134:	2006d77a 	srli	r3,r4,29
    e138:	3004d77a 	srli	r2,r6,29
    e13c:	dc000015 	stw	r16,0(sp)
    e140:	501490fa 	slli	r10,r10,3
    e144:	2820d53a 	srli	r16,r5,20
    e148:	401090fa 	slli	r8,r8,3
    e14c:	dc800215 	stw	r18,8(sp)
    e150:	dc400115 	stw	r17,4(sp)
    e154:	dfc00415 	stw	ra,16(sp)
    e158:	202290fa 	slli	r17,r4,3
    e15c:	dcc00315 	stw	r19,12(sp)
    e160:	4a41ffcc 	andi	r9,r9,2047
    e164:	0101ffc4 	movi	r4,2047
    e168:	2824d7fa 	srli	r18,r5,31
    e16c:	8401ffcc 	andi	r16,r16,2047
    e170:	50c6b03a 	or	r3,r10,r3
    e174:	380ed7fa 	srli	r7,r7,31
    e178:	408ab03a 	or	r5,r8,r2
    e17c:	300c90fa 	slli	r6,r6,3
    e180:	49009626 	beq	r9,r4,e3dc <__subdf3+0x2c0>
    e184:	39c0005c 	xori	r7,r7,1
    e188:	8245c83a 	sub	r2,r16,r9
    e18c:	3c807426 	beq	r7,r18,e360 <__subdf3+0x244>
    e190:	0080af0e 	bge	zero,r2,e450 <__subdf3+0x334>
    e194:	48002a1e 	bne	r9,zero,e240 <__subdf3+0x124>
    e198:	2988b03a 	or	r4,r5,r6
    e19c:	20009a1e 	bne	r4,zero,e408 <__subdf3+0x2ec>
    e1a0:	888001cc 	andi	r2,r17,7
    e1a4:	10000726 	beq	r2,zero,e1c4 <__subdf3+0xa8>
    e1a8:	888003cc 	andi	r2,r17,15
    e1ac:	01000104 	movi	r4,4
    e1b0:	11000426 	beq	r2,r4,e1c4 <__subdf3+0xa8>
    e1b4:	890b883a 	add	r5,r17,r4
    e1b8:	2c63803a 	cmpltu	r17,r5,r17
    e1bc:	1c47883a 	add	r3,r3,r17
    e1c0:	2823883a 	mov	r17,r5
    e1c4:	1880202c 	andhi	r2,r3,128
    e1c8:	10005926 	beq	r2,zero,e330 <__subdf3+0x214>
    e1cc:	84000044 	addi	r16,r16,1
    e1d0:	0081ffc4 	movi	r2,2047
    e1d4:	8080be26 	beq	r16,r2,e4d0 <__subdf3+0x3b4>
    e1d8:	017fe034 	movhi	r5,65408
    e1dc:	297fffc4 	addi	r5,r5,-1
    e1e0:	1946703a 	and	r3,r3,r5
    e1e4:	1804977a 	slli	r2,r3,29
    e1e8:	1806927a 	slli	r3,r3,9
    e1ec:	8822d0fa 	srli	r17,r17,3
    e1f0:	8401ffcc 	andi	r16,r16,2047
    e1f4:	180ad33a 	srli	r5,r3,12
    e1f8:	9100004c 	andi	r4,r18,1
    e1fc:	1444b03a 	or	r2,r2,r17
    e200:	80c1ffcc 	andi	r3,r16,2047
    e204:	1820953a 	slli	r16,r3,20
    e208:	20c03fcc 	andi	r3,r4,255
    e20c:	180897fa 	slli	r4,r3,31
    e210:	00c00434 	movhi	r3,16
    e214:	18ffffc4 	addi	r3,r3,-1
    e218:	28c6703a 	and	r3,r5,r3
    e21c:	1c06b03a 	or	r3,r3,r16
    e220:	1906b03a 	or	r3,r3,r4
    e224:	dfc00417 	ldw	ra,16(sp)
    e228:	dcc00317 	ldw	r19,12(sp)
    e22c:	dc800217 	ldw	r18,8(sp)
    e230:	dc400117 	ldw	r17,4(sp)
    e234:	dc000017 	ldw	r16,0(sp)
    e238:	dec00504 	addi	sp,sp,20
    e23c:	f800283a 	ret
    e240:	0101ffc4 	movi	r4,2047
    e244:	813fd626 	beq	r16,r4,e1a0 <__alt_data_end+0xff00e1a0>
    e248:	29402034 	orhi	r5,r5,128
    e24c:	01000e04 	movi	r4,56
    e250:	2080a316 	blt	r4,r2,e4e0 <__subdf3+0x3c4>
    e254:	010007c4 	movi	r4,31
    e258:	2080c616 	blt	r4,r2,e574 <__subdf3+0x458>
    e25c:	01000804 	movi	r4,32
    e260:	2089c83a 	sub	r4,r4,r2
    e264:	2910983a 	sll	r8,r5,r4
    e268:	308ed83a 	srl	r7,r6,r2
    e26c:	3108983a 	sll	r4,r6,r4
    e270:	2884d83a 	srl	r2,r5,r2
    e274:	41ccb03a 	or	r6,r8,r7
    e278:	2008c03a 	cmpne	r4,r4,zero
    e27c:	310cb03a 	or	r6,r6,r4
    e280:	898dc83a 	sub	r6,r17,r6
    e284:	89a3803a 	cmpltu	r17,r17,r6
    e288:	1887c83a 	sub	r3,r3,r2
    e28c:	1c47c83a 	sub	r3,r3,r17
    e290:	3023883a 	mov	r17,r6
    e294:	1880202c 	andhi	r2,r3,128
    e298:	10002326 	beq	r2,zero,e328 <__subdf3+0x20c>
    e29c:	04c02034 	movhi	r19,128
    e2a0:	9cffffc4 	addi	r19,r19,-1
    e2a4:	1ce6703a 	and	r19,r3,r19
    e2a8:	98007a26 	beq	r19,zero,e494 <__subdf3+0x378>
    e2ac:	9809883a 	mov	r4,r19
    e2b0:	000ec1c0 	call	ec1c <__clzsi2>
    e2b4:	113ffe04 	addi	r4,r2,-8
    e2b8:	00c007c4 	movi	r3,31
    e2bc:	19007b16 	blt	r3,r4,e4ac <__subdf3+0x390>
    e2c0:	00800804 	movi	r2,32
    e2c4:	1105c83a 	sub	r2,r2,r4
    e2c8:	8884d83a 	srl	r2,r17,r2
    e2cc:	9906983a 	sll	r3,r19,r4
    e2d0:	8922983a 	sll	r17,r17,r4
    e2d4:	10c4b03a 	or	r2,r2,r3
    e2d8:	24007816 	blt	r4,r16,e4bc <__subdf3+0x3a0>
    e2dc:	2421c83a 	sub	r16,r4,r16
    e2e0:	80c00044 	addi	r3,r16,1
    e2e4:	010007c4 	movi	r4,31
    e2e8:	20c09516 	blt	r4,r3,e540 <__subdf3+0x424>
    e2ec:	01400804 	movi	r5,32
    e2f0:	28cbc83a 	sub	r5,r5,r3
    e2f4:	88c8d83a 	srl	r4,r17,r3
    e2f8:	8962983a 	sll	r17,r17,r5
    e2fc:	114a983a 	sll	r5,r2,r5
    e300:	10c6d83a 	srl	r3,r2,r3
    e304:	8804c03a 	cmpne	r2,r17,zero
    e308:	290ab03a 	or	r5,r5,r4
    e30c:	28a2b03a 	or	r17,r5,r2
    e310:	0021883a 	mov	r16,zero
    e314:	003fa206 	br	e1a0 <__alt_data_end+0xff00e1a0>
    e318:	2090b03a 	or	r8,r4,r2
    e31c:	40018e26 	beq	r8,zero,e958 <__subdf3+0x83c>
    e320:	1007883a 	mov	r3,r2
    e324:	2023883a 	mov	r17,r4
    e328:	888001cc 	andi	r2,r17,7
    e32c:	103f9e1e 	bne	r2,zero,e1a8 <__alt_data_end+0xff00e1a8>
    e330:	1804977a 	slli	r2,r3,29
    e334:	8822d0fa 	srli	r17,r17,3
    e338:	1810d0fa 	srli	r8,r3,3
    e33c:	9100004c 	andi	r4,r18,1
    e340:	1444b03a 	or	r2,r2,r17
    e344:	00c1ffc4 	movi	r3,2047
    e348:	80c02826 	beq	r16,r3,e3ec <__subdf3+0x2d0>
    e34c:	01400434 	movhi	r5,16
    e350:	297fffc4 	addi	r5,r5,-1
    e354:	80e0703a 	and	r16,r16,r3
    e358:	414a703a 	and	r5,r8,r5
    e35c:	003fa806 	br	e200 <__alt_data_end+0xff00e200>
    e360:	0080630e 	bge	zero,r2,e4f0 <__subdf3+0x3d4>
    e364:	48003026 	beq	r9,zero,e428 <__subdf3+0x30c>
    e368:	0101ffc4 	movi	r4,2047
    e36c:	813f8c26 	beq	r16,r4,e1a0 <__alt_data_end+0xff00e1a0>
    e370:	29402034 	orhi	r5,r5,128
    e374:	01000e04 	movi	r4,56
    e378:	2080a90e 	bge	r4,r2,e620 <__subdf3+0x504>
    e37c:	298cb03a 	or	r6,r5,r6
    e380:	3012c03a 	cmpne	r9,r6,zero
    e384:	0005883a 	mov	r2,zero
    e388:	4c53883a 	add	r9,r9,r17
    e38c:	4c63803a 	cmpltu	r17,r9,r17
    e390:	10c7883a 	add	r3,r2,r3
    e394:	88c7883a 	add	r3,r17,r3
    e398:	4823883a 	mov	r17,r9
    e39c:	1880202c 	andhi	r2,r3,128
    e3a0:	1000d026 	beq	r2,zero,e6e4 <__subdf3+0x5c8>
    e3a4:	84000044 	addi	r16,r16,1
    e3a8:	0081ffc4 	movi	r2,2047
    e3ac:	8080fe26 	beq	r16,r2,e7a8 <__subdf3+0x68c>
    e3b0:	00bfe034 	movhi	r2,65408
    e3b4:	10bfffc4 	addi	r2,r2,-1
    e3b8:	1886703a 	and	r3,r3,r2
    e3bc:	880ad07a 	srli	r5,r17,1
    e3c0:	180497fa 	slli	r2,r3,31
    e3c4:	8900004c 	andi	r4,r17,1
    e3c8:	2922b03a 	or	r17,r5,r4
    e3cc:	1806d07a 	srli	r3,r3,1
    e3d0:	1462b03a 	or	r17,r2,r17
    e3d4:	3825883a 	mov	r18,r7
    e3d8:	003f7106 	br	e1a0 <__alt_data_end+0xff00e1a0>
    e3dc:	2984b03a 	or	r2,r5,r6
    e3e0:	103f6826 	beq	r2,zero,e184 <__alt_data_end+0xff00e184>
    e3e4:	39c03fcc 	andi	r7,r7,255
    e3e8:	003f6706 	br	e188 <__alt_data_end+0xff00e188>
    e3ec:	4086b03a 	or	r3,r8,r2
    e3f0:	18015226 	beq	r3,zero,e93c <__subdf3+0x820>
    e3f4:	00c00434 	movhi	r3,16
    e3f8:	41400234 	orhi	r5,r8,8
    e3fc:	18ffffc4 	addi	r3,r3,-1
    e400:	28ca703a 	and	r5,r5,r3
    e404:	003f7e06 	br	e200 <__alt_data_end+0xff00e200>
    e408:	10bfffc4 	addi	r2,r2,-1
    e40c:	1000491e 	bne	r2,zero,e534 <__subdf3+0x418>
    e410:	898fc83a 	sub	r7,r17,r6
    e414:	89e3803a 	cmpltu	r17,r17,r7
    e418:	1947c83a 	sub	r3,r3,r5
    e41c:	1c47c83a 	sub	r3,r3,r17
    e420:	3823883a 	mov	r17,r7
    e424:	003f9b06 	br	e294 <__alt_data_end+0xff00e294>
    e428:	2988b03a 	or	r4,r5,r6
    e42c:	203f5c26 	beq	r4,zero,e1a0 <__alt_data_end+0xff00e1a0>
    e430:	10bfffc4 	addi	r2,r2,-1
    e434:	1000931e 	bne	r2,zero,e684 <__subdf3+0x568>
    e438:	898d883a 	add	r6,r17,r6
    e43c:	3463803a 	cmpltu	r17,r6,r17
    e440:	1947883a 	add	r3,r3,r5
    e444:	88c7883a 	add	r3,r17,r3
    e448:	3023883a 	mov	r17,r6
    e44c:	003fd306 	br	e39c <__alt_data_end+0xff00e39c>
    e450:	1000541e 	bne	r2,zero,e5a4 <__subdf3+0x488>
    e454:	80800044 	addi	r2,r16,1
    e458:	1081ffcc 	andi	r2,r2,2047
    e45c:	01000044 	movi	r4,1
    e460:	2080a20e 	bge	r4,r2,e6ec <__subdf3+0x5d0>
    e464:	8989c83a 	sub	r4,r17,r6
    e468:	8905803a 	cmpltu	r2,r17,r4
    e46c:	1967c83a 	sub	r19,r3,r5
    e470:	98a7c83a 	sub	r19,r19,r2
    e474:	9880202c 	andhi	r2,r19,128
    e478:	10006326 	beq	r2,zero,e608 <__subdf3+0x4ec>
    e47c:	3463c83a 	sub	r17,r6,r17
    e480:	28c7c83a 	sub	r3,r5,r3
    e484:	344d803a 	cmpltu	r6,r6,r17
    e488:	19a7c83a 	sub	r19,r3,r6
    e48c:	3825883a 	mov	r18,r7
    e490:	983f861e 	bne	r19,zero,e2ac <__alt_data_end+0xff00e2ac>
    e494:	8809883a 	mov	r4,r17
    e498:	000ec1c0 	call	ec1c <__clzsi2>
    e49c:	10800804 	addi	r2,r2,32
    e4a0:	113ffe04 	addi	r4,r2,-8
    e4a4:	00c007c4 	movi	r3,31
    e4a8:	193f850e 	bge	r3,r4,e2c0 <__alt_data_end+0xff00e2c0>
    e4ac:	10bff604 	addi	r2,r2,-40
    e4b0:	8884983a 	sll	r2,r17,r2
    e4b4:	0023883a 	mov	r17,zero
    e4b8:	243f880e 	bge	r4,r16,e2dc <__alt_data_end+0xff00e2dc>
    e4bc:	00ffe034 	movhi	r3,65408
    e4c0:	18ffffc4 	addi	r3,r3,-1
    e4c4:	8121c83a 	sub	r16,r16,r4
    e4c8:	10c6703a 	and	r3,r2,r3
    e4cc:	003f3406 	br	e1a0 <__alt_data_end+0xff00e1a0>
    e4d0:	9100004c 	andi	r4,r18,1
    e4d4:	000b883a 	mov	r5,zero
    e4d8:	0005883a 	mov	r2,zero
    e4dc:	003f4806 	br	e200 <__alt_data_end+0xff00e200>
    e4e0:	298cb03a 	or	r6,r5,r6
    e4e4:	300cc03a 	cmpne	r6,r6,zero
    e4e8:	0005883a 	mov	r2,zero
    e4ec:	003f6406 	br	e280 <__alt_data_end+0xff00e280>
    e4f0:	10009a1e 	bne	r2,zero,e75c <__subdf3+0x640>
    e4f4:	82400044 	addi	r9,r16,1
    e4f8:	4881ffcc 	andi	r2,r9,2047
    e4fc:	02800044 	movi	r10,1
    e500:	5080670e 	bge	r10,r2,e6a0 <__subdf3+0x584>
    e504:	0081ffc4 	movi	r2,2047
    e508:	4880af26 	beq	r9,r2,e7c8 <__subdf3+0x6ac>
    e50c:	898d883a 	add	r6,r17,r6
    e510:	1945883a 	add	r2,r3,r5
    e514:	3447803a 	cmpltu	r3,r6,r17
    e518:	1887883a 	add	r3,r3,r2
    e51c:	182297fa 	slli	r17,r3,31
    e520:	300cd07a 	srli	r6,r6,1
    e524:	1806d07a 	srli	r3,r3,1
    e528:	4821883a 	mov	r16,r9
    e52c:	89a2b03a 	or	r17,r17,r6
    e530:	003f1b06 	br	e1a0 <__alt_data_end+0xff00e1a0>
    e534:	0101ffc4 	movi	r4,2047
    e538:	813f441e 	bne	r16,r4,e24c <__alt_data_end+0xff00e24c>
    e53c:	003f1806 	br	e1a0 <__alt_data_end+0xff00e1a0>
    e540:	843ff844 	addi	r16,r16,-31
    e544:	01400804 	movi	r5,32
    e548:	1408d83a 	srl	r4,r2,r16
    e54c:	19405026 	beq	r3,r5,e690 <__subdf3+0x574>
    e550:	01401004 	movi	r5,64
    e554:	28c7c83a 	sub	r3,r5,r3
    e558:	10c4983a 	sll	r2,r2,r3
    e55c:	88a2b03a 	or	r17,r17,r2
    e560:	8822c03a 	cmpne	r17,r17,zero
    e564:	2462b03a 	or	r17,r4,r17
    e568:	0007883a 	mov	r3,zero
    e56c:	0021883a 	mov	r16,zero
    e570:	003f6d06 	br	e328 <__alt_data_end+0xff00e328>
    e574:	11fff804 	addi	r7,r2,-32
    e578:	01000804 	movi	r4,32
    e57c:	29ced83a 	srl	r7,r5,r7
    e580:	11004526 	beq	r2,r4,e698 <__subdf3+0x57c>
    e584:	01001004 	movi	r4,64
    e588:	2089c83a 	sub	r4,r4,r2
    e58c:	2904983a 	sll	r2,r5,r4
    e590:	118cb03a 	or	r6,r2,r6
    e594:	300cc03a 	cmpne	r6,r6,zero
    e598:	398cb03a 	or	r6,r7,r6
    e59c:	0005883a 	mov	r2,zero
    e5a0:	003f3706 	br	e280 <__alt_data_end+0xff00e280>
    e5a4:	80002a26 	beq	r16,zero,e650 <__subdf3+0x534>
    e5a8:	0101ffc4 	movi	r4,2047
    e5ac:	49006626 	beq	r9,r4,e748 <__subdf3+0x62c>
    e5b0:	0085c83a 	sub	r2,zero,r2
    e5b4:	18c02034 	orhi	r3,r3,128
    e5b8:	01000e04 	movi	r4,56
    e5bc:	20807e16 	blt	r4,r2,e7b8 <__subdf3+0x69c>
    e5c0:	010007c4 	movi	r4,31
    e5c4:	2080e716 	blt	r4,r2,e964 <__subdf3+0x848>
    e5c8:	01000804 	movi	r4,32
    e5cc:	2089c83a 	sub	r4,r4,r2
    e5d0:	1914983a 	sll	r10,r3,r4
    e5d4:	8890d83a 	srl	r8,r17,r2
    e5d8:	8908983a 	sll	r4,r17,r4
    e5dc:	1884d83a 	srl	r2,r3,r2
    e5e0:	5222b03a 	or	r17,r10,r8
    e5e4:	2006c03a 	cmpne	r3,r4,zero
    e5e8:	88e2b03a 	or	r17,r17,r3
    e5ec:	3463c83a 	sub	r17,r6,r17
    e5f0:	2885c83a 	sub	r2,r5,r2
    e5f4:	344d803a 	cmpltu	r6,r6,r17
    e5f8:	1187c83a 	sub	r3,r2,r6
    e5fc:	4821883a 	mov	r16,r9
    e600:	3825883a 	mov	r18,r7
    e604:	003f2306 	br	e294 <__alt_data_end+0xff00e294>
    e608:	24d0b03a 	or	r8,r4,r19
    e60c:	40001b1e 	bne	r8,zero,e67c <__subdf3+0x560>
    e610:	0005883a 	mov	r2,zero
    e614:	0009883a 	mov	r4,zero
    e618:	0021883a 	mov	r16,zero
    e61c:	003f4906 	br	e344 <__alt_data_end+0xff00e344>
    e620:	010007c4 	movi	r4,31
    e624:	20803a16 	blt	r4,r2,e710 <__subdf3+0x5f4>
    e628:	01000804 	movi	r4,32
    e62c:	2089c83a 	sub	r4,r4,r2
    e630:	2912983a 	sll	r9,r5,r4
    e634:	3090d83a 	srl	r8,r6,r2
    e638:	3108983a 	sll	r4,r6,r4
    e63c:	2884d83a 	srl	r2,r5,r2
    e640:	4a12b03a 	or	r9,r9,r8
    e644:	2008c03a 	cmpne	r4,r4,zero
    e648:	4912b03a 	or	r9,r9,r4
    e64c:	003f4e06 	br	e388 <__alt_data_end+0xff00e388>
    e650:	1c48b03a 	or	r4,r3,r17
    e654:	20003c26 	beq	r4,zero,e748 <__subdf3+0x62c>
    e658:	0084303a 	nor	r2,zero,r2
    e65c:	1000381e 	bne	r2,zero,e740 <__subdf3+0x624>
    e660:	3463c83a 	sub	r17,r6,r17
    e664:	28c5c83a 	sub	r2,r5,r3
    e668:	344d803a 	cmpltu	r6,r6,r17
    e66c:	1187c83a 	sub	r3,r2,r6
    e670:	4821883a 	mov	r16,r9
    e674:	3825883a 	mov	r18,r7
    e678:	003f0606 	br	e294 <__alt_data_end+0xff00e294>
    e67c:	2023883a 	mov	r17,r4
    e680:	003f0906 	br	e2a8 <__alt_data_end+0xff00e2a8>
    e684:	0101ffc4 	movi	r4,2047
    e688:	813f3a1e 	bne	r16,r4,e374 <__alt_data_end+0xff00e374>
    e68c:	003ec406 	br	e1a0 <__alt_data_end+0xff00e1a0>
    e690:	0005883a 	mov	r2,zero
    e694:	003fb106 	br	e55c <__alt_data_end+0xff00e55c>
    e698:	0005883a 	mov	r2,zero
    e69c:	003fbc06 	br	e590 <__alt_data_end+0xff00e590>
    e6a0:	1c44b03a 	or	r2,r3,r17
    e6a4:	80008e1e 	bne	r16,zero,e8e0 <__subdf3+0x7c4>
    e6a8:	1000c826 	beq	r2,zero,e9cc <__subdf3+0x8b0>
    e6ac:	2984b03a 	or	r2,r5,r6
    e6b0:	103ebb26 	beq	r2,zero,e1a0 <__alt_data_end+0xff00e1a0>
    e6b4:	8989883a 	add	r4,r17,r6
    e6b8:	1945883a 	add	r2,r3,r5
    e6bc:	2447803a 	cmpltu	r3,r4,r17
    e6c0:	1887883a 	add	r3,r3,r2
    e6c4:	1880202c 	andhi	r2,r3,128
    e6c8:	2023883a 	mov	r17,r4
    e6cc:	103f1626 	beq	r2,zero,e328 <__alt_data_end+0xff00e328>
    e6d0:	00bfe034 	movhi	r2,65408
    e6d4:	10bfffc4 	addi	r2,r2,-1
    e6d8:	5021883a 	mov	r16,r10
    e6dc:	1886703a 	and	r3,r3,r2
    e6e0:	003eaf06 	br	e1a0 <__alt_data_end+0xff00e1a0>
    e6e4:	3825883a 	mov	r18,r7
    e6e8:	003f0f06 	br	e328 <__alt_data_end+0xff00e328>
    e6ec:	1c44b03a 	or	r2,r3,r17
    e6f0:	8000251e 	bne	r16,zero,e788 <__subdf3+0x66c>
    e6f4:	1000661e 	bne	r2,zero,e890 <__subdf3+0x774>
    e6f8:	2990b03a 	or	r8,r5,r6
    e6fc:	40009626 	beq	r8,zero,e958 <__subdf3+0x83c>
    e700:	2807883a 	mov	r3,r5
    e704:	3023883a 	mov	r17,r6
    e708:	3825883a 	mov	r18,r7
    e70c:	003ea406 	br	e1a0 <__alt_data_end+0xff00e1a0>
    e710:	127ff804 	addi	r9,r2,-32
    e714:	01000804 	movi	r4,32
    e718:	2a52d83a 	srl	r9,r5,r9
    e71c:	11008c26 	beq	r2,r4,e950 <__subdf3+0x834>
    e720:	01001004 	movi	r4,64
    e724:	2085c83a 	sub	r2,r4,r2
    e728:	2884983a 	sll	r2,r5,r2
    e72c:	118cb03a 	or	r6,r2,r6
    e730:	300cc03a 	cmpne	r6,r6,zero
    e734:	4992b03a 	or	r9,r9,r6
    e738:	0005883a 	mov	r2,zero
    e73c:	003f1206 	br	e388 <__alt_data_end+0xff00e388>
    e740:	0101ffc4 	movi	r4,2047
    e744:	493f9c1e 	bne	r9,r4,e5b8 <__alt_data_end+0xff00e5b8>
    e748:	2807883a 	mov	r3,r5
    e74c:	3023883a 	mov	r17,r6
    e750:	4821883a 	mov	r16,r9
    e754:	3825883a 	mov	r18,r7
    e758:	003e9106 	br	e1a0 <__alt_data_end+0xff00e1a0>
    e75c:	80001f1e 	bne	r16,zero,e7dc <__subdf3+0x6c0>
    e760:	1c48b03a 	or	r4,r3,r17
    e764:	20005a26 	beq	r4,zero,e8d0 <__subdf3+0x7b4>
    e768:	0084303a 	nor	r2,zero,r2
    e76c:	1000561e 	bne	r2,zero,e8c8 <__subdf3+0x7ac>
    e770:	89a3883a 	add	r17,r17,r6
    e774:	1945883a 	add	r2,r3,r5
    e778:	898d803a 	cmpltu	r6,r17,r6
    e77c:	3087883a 	add	r3,r6,r2
    e780:	4821883a 	mov	r16,r9
    e784:	003f0506 	br	e39c <__alt_data_end+0xff00e39c>
    e788:	10002b1e 	bne	r2,zero,e838 <__subdf3+0x71c>
    e78c:	2984b03a 	or	r2,r5,r6
    e790:	10008026 	beq	r2,zero,e994 <__subdf3+0x878>
    e794:	2807883a 	mov	r3,r5
    e798:	3023883a 	mov	r17,r6
    e79c:	3825883a 	mov	r18,r7
    e7a0:	0401ffc4 	movi	r16,2047
    e7a4:	003e7e06 	br	e1a0 <__alt_data_end+0xff00e1a0>
    e7a8:	3809883a 	mov	r4,r7
    e7ac:	0011883a 	mov	r8,zero
    e7b0:	0005883a 	mov	r2,zero
    e7b4:	003ee306 	br	e344 <__alt_data_end+0xff00e344>
    e7b8:	1c62b03a 	or	r17,r3,r17
    e7bc:	8822c03a 	cmpne	r17,r17,zero
    e7c0:	0005883a 	mov	r2,zero
    e7c4:	003f8906 	br	e5ec <__alt_data_end+0xff00e5ec>
    e7c8:	3809883a 	mov	r4,r7
    e7cc:	4821883a 	mov	r16,r9
    e7d0:	0011883a 	mov	r8,zero
    e7d4:	0005883a 	mov	r2,zero
    e7d8:	003eda06 	br	e344 <__alt_data_end+0xff00e344>
    e7dc:	0101ffc4 	movi	r4,2047
    e7e0:	49003b26 	beq	r9,r4,e8d0 <__subdf3+0x7b4>
    e7e4:	0085c83a 	sub	r2,zero,r2
    e7e8:	18c02034 	orhi	r3,r3,128
    e7ec:	01000e04 	movi	r4,56
    e7f0:	20806e16 	blt	r4,r2,e9ac <__subdf3+0x890>
    e7f4:	010007c4 	movi	r4,31
    e7f8:	20807716 	blt	r4,r2,e9d8 <__subdf3+0x8bc>
    e7fc:	01000804 	movi	r4,32
    e800:	2089c83a 	sub	r4,r4,r2
    e804:	1914983a 	sll	r10,r3,r4
    e808:	8890d83a 	srl	r8,r17,r2
    e80c:	8908983a 	sll	r4,r17,r4
    e810:	1884d83a 	srl	r2,r3,r2
    e814:	5222b03a 	or	r17,r10,r8
    e818:	2006c03a 	cmpne	r3,r4,zero
    e81c:	88e2b03a 	or	r17,r17,r3
    e820:	89a3883a 	add	r17,r17,r6
    e824:	1145883a 	add	r2,r2,r5
    e828:	898d803a 	cmpltu	r6,r17,r6
    e82c:	3087883a 	add	r3,r6,r2
    e830:	4821883a 	mov	r16,r9
    e834:	003ed906 	br	e39c <__alt_data_end+0xff00e39c>
    e838:	2984b03a 	or	r2,r5,r6
    e83c:	10004226 	beq	r2,zero,e948 <__subdf3+0x82c>
    e840:	1808d0fa 	srli	r4,r3,3
    e844:	8822d0fa 	srli	r17,r17,3
    e848:	1806977a 	slli	r3,r3,29
    e84c:	2080022c 	andhi	r2,r4,8
    e850:	1c62b03a 	or	r17,r3,r17
    e854:	10000826 	beq	r2,zero,e878 <__subdf3+0x75c>
    e858:	2812d0fa 	srli	r9,r5,3
    e85c:	4880022c 	andhi	r2,r9,8
    e860:	1000051e 	bne	r2,zero,e878 <__subdf3+0x75c>
    e864:	300cd0fa 	srli	r6,r6,3
    e868:	2804977a 	slli	r2,r5,29
    e86c:	4809883a 	mov	r4,r9
    e870:	3825883a 	mov	r18,r7
    e874:	11a2b03a 	or	r17,r2,r6
    e878:	8806d77a 	srli	r3,r17,29
    e87c:	200890fa 	slli	r4,r4,3
    e880:	882290fa 	slli	r17,r17,3
    e884:	0401ffc4 	movi	r16,2047
    e888:	1906b03a 	or	r3,r3,r4
    e88c:	003e4406 	br	e1a0 <__alt_data_end+0xff00e1a0>
    e890:	2984b03a 	or	r2,r5,r6
    e894:	103e4226 	beq	r2,zero,e1a0 <__alt_data_end+0xff00e1a0>
    e898:	8989c83a 	sub	r4,r17,r6
    e89c:	8911803a 	cmpltu	r8,r17,r4
    e8a0:	1945c83a 	sub	r2,r3,r5
    e8a4:	1205c83a 	sub	r2,r2,r8
    e8a8:	1200202c 	andhi	r8,r2,128
    e8ac:	403e9a26 	beq	r8,zero,e318 <__alt_data_end+0xff00e318>
    e8b0:	3463c83a 	sub	r17,r6,r17
    e8b4:	28c5c83a 	sub	r2,r5,r3
    e8b8:	344d803a 	cmpltu	r6,r6,r17
    e8bc:	1187c83a 	sub	r3,r2,r6
    e8c0:	3825883a 	mov	r18,r7
    e8c4:	003e3606 	br	e1a0 <__alt_data_end+0xff00e1a0>
    e8c8:	0101ffc4 	movi	r4,2047
    e8cc:	493fc71e 	bne	r9,r4,e7ec <__alt_data_end+0xff00e7ec>
    e8d0:	2807883a 	mov	r3,r5
    e8d4:	3023883a 	mov	r17,r6
    e8d8:	4821883a 	mov	r16,r9
    e8dc:	003e3006 	br	e1a0 <__alt_data_end+0xff00e1a0>
    e8e0:	10003626 	beq	r2,zero,e9bc <__subdf3+0x8a0>
    e8e4:	2984b03a 	or	r2,r5,r6
    e8e8:	10001726 	beq	r2,zero,e948 <__subdf3+0x82c>
    e8ec:	1808d0fa 	srli	r4,r3,3
    e8f0:	8822d0fa 	srli	r17,r17,3
    e8f4:	1806977a 	slli	r3,r3,29
    e8f8:	2080022c 	andhi	r2,r4,8
    e8fc:	1c62b03a 	or	r17,r3,r17
    e900:	10000726 	beq	r2,zero,e920 <__subdf3+0x804>
    e904:	2812d0fa 	srli	r9,r5,3
    e908:	4880022c 	andhi	r2,r9,8
    e90c:	1000041e 	bne	r2,zero,e920 <__subdf3+0x804>
    e910:	300cd0fa 	srli	r6,r6,3
    e914:	2804977a 	slli	r2,r5,29
    e918:	4809883a 	mov	r4,r9
    e91c:	11a2b03a 	or	r17,r2,r6
    e920:	8806d77a 	srli	r3,r17,29
    e924:	200890fa 	slli	r4,r4,3
    e928:	882290fa 	slli	r17,r17,3
    e92c:	3825883a 	mov	r18,r7
    e930:	1906b03a 	or	r3,r3,r4
    e934:	0401ffc4 	movi	r16,2047
    e938:	003e1906 	br	e1a0 <__alt_data_end+0xff00e1a0>
    e93c:	000b883a 	mov	r5,zero
    e940:	0005883a 	mov	r2,zero
    e944:	003e2e06 	br	e200 <__alt_data_end+0xff00e200>
    e948:	0401ffc4 	movi	r16,2047
    e94c:	003e1406 	br	e1a0 <__alt_data_end+0xff00e1a0>
    e950:	0005883a 	mov	r2,zero
    e954:	003f7506 	br	e72c <__alt_data_end+0xff00e72c>
    e958:	0005883a 	mov	r2,zero
    e95c:	0009883a 	mov	r4,zero
    e960:	003e7806 	br	e344 <__alt_data_end+0xff00e344>
    e964:	123ff804 	addi	r8,r2,-32
    e968:	01000804 	movi	r4,32
    e96c:	1a10d83a 	srl	r8,r3,r8
    e970:	11002526 	beq	r2,r4,ea08 <__subdf3+0x8ec>
    e974:	01001004 	movi	r4,64
    e978:	2085c83a 	sub	r2,r4,r2
    e97c:	1884983a 	sll	r2,r3,r2
    e980:	1444b03a 	or	r2,r2,r17
    e984:	1004c03a 	cmpne	r2,r2,zero
    e988:	40a2b03a 	or	r17,r8,r2
    e98c:	0005883a 	mov	r2,zero
    e990:	003f1606 	br	e5ec <__alt_data_end+0xff00e5ec>
    e994:	02000434 	movhi	r8,16
    e998:	0009883a 	mov	r4,zero
    e99c:	423fffc4 	addi	r8,r8,-1
    e9a0:	00bfffc4 	movi	r2,-1
    e9a4:	0401ffc4 	movi	r16,2047
    e9a8:	003e6606 	br	e344 <__alt_data_end+0xff00e344>
    e9ac:	1c62b03a 	or	r17,r3,r17
    e9b0:	8822c03a 	cmpne	r17,r17,zero
    e9b4:	0005883a 	mov	r2,zero
    e9b8:	003f9906 	br	e820 <__alt_data_end+0xff00e820>
    e9bc:	2807883a 	mov	r3,r5
    e9c0:	3023883a 	mov	r17,r6
    e9c4:	0401ffc4 	movi	r16,2047
    e9c8:	003df506 	br	e1a0 <__alt_data_end+0xff00e1a0>
    e9cc:	2807883a 	mov	r3,r5
    e9d0:	3023883a 	mov	r17,r6
    e9d4:	003df206 	br	e1a0 <__alt_data_end+0xff00e1a0>
    e9d8:	123ff804 	addi	r8,r2,-32
    e9dc:	01000804 	movi	r4,32
    e9e0:	1a10d83a 	srl	r8,r3,r8
    e9e4:	11000a26 	beq	r2,r4,ea10 <__subdf3+0x8f4>
    e9e8:	01001004 	movi	r4,64
    e9ec:	2085c83a 	sub	r2,r4,r2
    e9f0:	1884983a 	sll	r2,r3,r2
    e9f4:	1444b03a 	or	r2,r2,r17
    e9f8:	1004c03a 	cmpne	r2,r2,zero
    e9fc:	40a2b03a 	or	r17,r8,r2
    ea00:	0005883a 	mov	r2,zero
    ea04:	003f8606 	br	e820 <__alt_data_end+0xff00e820>
    ea08:	0005883a 	mov	r2,zero
    ea0c:	003fdc06 	br	e980 <__alt_data_end+0xff00e980>
    ea10:	0005883a 	mov	r2,zero
    ea14:	003ff706 	br	e9f4 <__alt_data_end+0xff00e9f4>

0000ea18 <__fixdfsi>:
    ea18:	280cd53a 	srli	r6,r5,20
    ea1c:	00c00434 	movhi	r3,16
    ea20:	18ffffc4 	addi	r3,r3,-1
    ea24:	3181ffcc 	andi	r6,r6,2047
    ea28:	01c0ff84 	movi	r7,1022
    ea2c:	28c6703a 	and	r3,r5,r3
    ea30:	280ad7fa 	srli	r5,r5,31
    ea34:	3980120e 	bge	r7,r6,ea80 <__fixdfsi+0x68>
    ea38:	00810744 	movi	r2,1053
    ea3c:	11800c16 	blt	r2,r6,ea70 <__fixdfsi+0x58>
    ea40:	00810cc4 	movi	r2,1075
    ea44:	1185c83a 	sub	r2,r2,r6
    ea48:	01c007c4 	movi	r7,31
    ea4c:	18c00434 	orhi	r3,r3,16
    ea50:	38800d16 	blt	r7,r2,ea88 <__fixdfsi+0x70>
    ea54:	31befb44 	addi	r6,r6,-1043
    ea58:	2084d83a 	srl	r2,r4,r2
    ea5c:	1986983a 	sll	r3,r3,r6
    ea60:	1884b03a 	or	r2,r3,r2
    ea64:	28000726 	beq	r5,zero,ea84 <__fixdfsi+0x6c>
    ea68:	0085c83a 	sub	r2,zero,r2
    ea6c:	f800283a 	ret
    ea70:	00a00034 	movhi	r2,32768
    ea74:	10bfffc4 	addi	r2,r2,-1
    ea78:	2885883a 	add	r2,r5,r2
    ea7c:	f800283a 	ret
    ea80:	0005883a 	mov	r2,zero
    ea84:	f800283a 	ret
    ea88:	008104c4 	movi	r2,1043
    ea8c:	1185c83a 	sub	r2,r2,r6
    ea90:	1884d83a 	srl	r2,r3,r2
    ea94:	003ff306 	br	ea64 <__alt_data_end+0xff00ea64>

0000ea98 <__floatsidf>:
    ea98:	defffd04 	addi	sp,sp,-12
    ea9c:	dfc00215 	stw	ra,8(sp)
    eaa0:	dc400115 	stw	r17,4(sp)
    eaa4:	dc000015 	stw	r16,0(sp)
    eaa8:	20002b26 	beq	r4,zero,eb58 <__floatsidf+0xc0>
    eaac:	2023883a 	mov	r17,r4
    eab0:	2020d7fa 	srli	r16,r4,31
    eab4:	20002d16 	blt	r4,zero,eb6c <__floatsidf+0xd4>
    eab8:	8809883a 	mov	r4,r17
    eabc:	000ec1c0 	call	ec1c <__clzsi2>
    eac0:	01410784 	movi	r5,1054
    eac4:	288bc83a 	sub	r5,r5,r2
    eac8:	01010cc4 	movi	r4,1075
    eacc:	2149c83a 	sub	r4,r4,r5
    ead0:	00c007c4 	movi	r3,31
    ead4:	1900160e 	bge	r3,r4,eb30 <__floatsidf+0x98>
    ead8:	00c104c4 	movi	r3,1043
    eadc:	1947c83a 	sub	r3,r3,r5
    eae0:	88c6983a 	sll	r3,r17,r3
    eae4:	00800434 	movhi	r2,16
    eae8:	10bfffc4 	addi	r2,r2,-1
    eaec:	1886703a 	and	r3,r3,r2
    eaf0:	2941ffcc 	andi	r5,r5,2047
    eaf4:	800d883a 	mov	r6,r16
    eaf8:	0005883a 	mov	r2,zero
    eafc:	280a953a 	slli	r5,r5,20
    eb00:	31803fcc 	andi	r6,r6,255
    eb04:	01000434 	movhi	r4,16
    eb08:	300c97fa 	slli	r6,r6,31
    eb0c:	213fffc4 	addi	r4,r4,-1
    eb10:	1906703a 	and	r3,r3,r4
    eb14:	1946b03a 	or	r3,r3,r5
    eb18:	1986b03a 	or	r3,r3,r6
    eb1c:	dfc00217 	ldw	ra,8(sp)
    eb20:	dc400117 	ldw	r17,4(sp)
    eb24:	dc000017 	ldw	r16,0(sp)
    eb28:	dec00304 	addi	sp,sp,12
    eb2c:	f800283a 	ret
    eb30:	00c002c4 	movi	r3,11
    eb34:	1887c83a 	sub	r3,r3,r2
    eb38:	88c6d83a 	srl	r3,r17,r3
    eb3c:	8904983a 	sll	r2,r17,r4
    eb40:	01000434 	movhi	r4,16
    eb44:	213fffc4 	addi	r4,r4,-1
    eb48:	2941ffcc 	andi	r5,r5,2047
    eb4c:	1906703a 	and	r3,r3,r4
    eb50:	800d883a 	mov	r6,r16
    eb54:	003fe906 	br	eafc <__alt_data_end+0xff00eafc>
    eb58:	000d883a 	mov	r6,zero
    eb5c:	000b883a 	mov	r5,zero
    eb60:	0007883a 	mov	r3,zero
    eb64:	0005883a 	mov	r2,zero
    eb68:	003fe406 	br	eafc <__alt_data_end+0xff00eafc>
    eb6c:	0123c83a 	sub	r17,zero,r4
    eb70:	003fd106 	br	eab8 <__alt_data_end+0xff00eab8>

0000eb74 <__floatunsidf>:
    eb74:	defffe04 	addi	sp,sp,-8
    eb78:	dc000015 	stw	r16,0(sp)
    eb7c:	dfc00115 	stw	ra,4(sp)
    eb80:	2021883a 	mov	r16,r4
    eb84:	20002226 	beq	r4,zero,ec10 <__floatunsidf+0x9c>
    eb88:	000ec1c0 	call	ec1c <__clzsi2>
    eb8c:	01010784 	movi	r4,1054
    eb90:	2089c83a 	sub	r4,r4,r2
    eb94:	01810cc4 	movi	r6,1075
    eb98:	310dc83a 	sub	r6,r6,r4
    eb9c:	00c007c4 	movi	r3,31
    eba0:	1980120e 	bge	r3,r6,ebec <__floatunsidf+0x78>
    eba4:	00c104c4 	movi	r3,1043
    eba8:	1907c83a 	sub	r3,r3,r4
    ebac:	80ca983a 	sll	r5,r16,r3
    ebb0:	00800434 	movhi	r2,16
    ebb4:	10bfffc4 	addi	r2,r2,-1
    ebb8:	2101ffcc 	andi	r4,r4,2047
    ebbc:	0021883a 	mov	r16,zero
    ebc0:	288a703a 	and	r5,r5,r2
    ebc4:	2008953a 	slli	r4,r4,20
    ebc8:	00c00434 	movhi	r3,16
    ebcc:	18ffffc4 	addi	r3,r3,-1
    ebd0:	28c6703a 	and	r3,r5,r3
    ebd4:	8005883a 	mov	r2,r16
    ebd8:	1906b03a 	or	r3,r3,r4
    ebdc:	dfc00117 	ldw	ra,4(sp)
    ebe0:	dc000017 	ldw	r16,0(sp)
    ebe4:	dec00204 	addi	sp,sp,8
    ebe8:	f800283a 	ret
    ebec:	00c002c4 	movi	r3,11
    ebf0:	188bc83a 	sub	r5,r3,r2
    ebf4:	814ad83a 	srl	r5,r16,r5
    ebf8:	00c00434 	movhi	r3,16
    ebfc:	18ffffc4 	addi	r3,r3,-1
    ec00:	81a0983a 	sll	r16,r16,r6
    ec04:	2101ffcc 	andi	r4,r4,2047
    ec08:	28ca703a 	and	r5,r5,r3
    ec0c:	003fed06 	br	ebc4 <__alt_data_end+0xff00ebc4>
    ec10:	0009883a 	mov	r4,zero
    ec14:	000b883a 	mov	r5,zero
    ec18:	003fea06 	br	ebc4 <__alt_data_end+0xff00ebc4>

0000ec1c <__clzsi2>:
    ec1c:	00bfffd4 	movui	r2,65535
    ec20:	11000536 	bltu	r2,r4,ec38 <__clzsi2+0x1c>
    ec24:	00803fc4 	movi	r2,255
    ec28:	11000f36 	bltu	r2,r4,ec68 <__clzsi2+0x4c>
    ec2c:	00800804 	movi	r2,32
    ec30:	0007883a 	mov	r3,zero
    ec34:	00000506 	br	ec4c <__clzsi2+0x30>
    ec38:	00804034 	movhi	r2,256
    ec3c:	10bfffc4 	addi	r2,r2,-1
    ec40:	11000c2e 	bgeu	r2,r4,ec74 <__clzsi2+0x58>
    ec44:	00800204 	movi	r2,8
    ec48:	00c00604 	movi	r3,24
    ec4c:	20c8d83a 	srl	r4,r4,r3
    ec50:	00c00074 	movhi	r3,1
    ec54:	18c75404 	addi	r3,r3,7504
    ec58:	1909883a 	add	r4,r3,r4
    ec5c:	20c00003 	ldbu	r3,0(r4)
    ec60:	10c5c83a 	sub	r2,r2,r3
    ec64:	f800283a 	ret
    ec68:	00800604 	movi	r2,24
    ec6c:	00c00204 	movi	r3,8
    ec70:	003ff606 	br	ec4c <__alt_data_end+0xff00ec4c>
    ec74:	00800404 	movi	r2,16
    ec78:	1007883a 	mov	r3,r2
    ec7c:	003ff306 	br	ec4c <__alt_data_end+0xff00ec4c>

0000ec80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ec80:	defffe04 	addi	sp,sp,-8
    ec84:	dfc00115 	stw	ra,4(sp)
    ec88:	df000015 	stw	fp,0(sp)
    ec8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ec90:	d0a00b17 	ldw	r2,-32724(gp)
    ec94:	10000326 	beq	r2,zero,eca4 <alt_get_errno+0x24>
    ec98:	d0a00b17 	ldw	r2,-32724(gp)
    ec9c:	103ee83a 	callr	r2
    eca0:	00000106 	br	eca8 <alt_get_errno+0x28>
    eca4:	d0a6d804 	addi	r2,gp,-25760
}
    eca8:	e037883a 	mov	sp,fp
    ecac:	dfc00117 	ldw	ra,4(sp)
    ecb0:	df000017 	ldw	fp,0(sp)
    ecb4:	dec00204 	addi	sp,sp,8
    ecb8:	f800283a 	ret

0000ecbc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    ecbc:	defffb04 	addi	sp,sp,-20
    ecc0:	dfc00415 	stw	ra,16(sp)
    ecc4:	df000315 	stw	fp,12(sp)
    ecc8:	df000304 	addi	fp,sp,12
    eccc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    ecd0:	e0bfff17 	ldw	r2,-4(fp)
    ecd4:	10000616 	blt	r2,zero,ecf0 <close+0x34>
    ecd8:	e0bfff17 	ldw	r2,-4(fp)
    ecdc:	10c00324 	muli	r3,r2,12
    ece0:	00800074 	movhi	r2,1
    ece4:	1089d204 	addi	r2,r2,10056
    ece8:	1885883a 	add	r2,r3,r2
    ecec:	00000106 	br	ecf4 <close+0x38>
    ecf0:	0005883a 	mov	r2,zero
    ecf4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    ecf8:	e0bffd17 	ldw	r2,-12(fp)
    ecfc:	10001926 	beq	r2,zero,ed64 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    ed00:	e0bffd17 	ldw	r2,-12(fp)
    ed04:	10800017 	ldw	r2,0(r2)
    ed08:	10800417 	ldw	r2,16(r2)
    ed0c:	10000626 	beq	r2,zero,ed28 <close+0x6c>
    ed10:	e0bffd17 	ldw	r2,-12(fp)
    ed14:	10800017 	ldw	r2,0(r2)
    ed18:	10800417 	ldw	r2,16(r2)
    ed1c:	e13ffd17 	ldw	r4,-12(fp)
    ed20:	103ee83a 	callr	r2
    ed24:	00000106 	br	ed2c <close+0x70>
    ed28:	0005883a 	mov	r2,zero
    ed2c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    ed30:	e13fff17 	ldw	r4,-4(fp)
    ed34:	000f37c0 	call	f37c <alt_release_fd>
    if (rval < 0)
    ed38:	e0bffe17 	ldw	r2,-8(fp)
    ed3c:	1000070e 	bge	r2,zero,ed5c <close+0xa0>
    {
      ALT_ERRNO = -rval;
    ed40:	000ec800 	call	ec80 <alt_get_errno>
    ed44:	1007883a 	mov	r3,r2
    ed48:	e0bffe17 	ldw	r2,-8(fp)
    ed4c:	0085c83a 	sub	r2,zero,r2
    ed50:	18800015 	stw	r2,0(r3)
      return -1;
    ed54:	00bfffc4 	movi	r2,-1
    ed58:	00000706 	br	ed78 <close+0xbc>
    }
    return 0;
    ed5c:	0005883a 	mov	r2,zero
    ed60:	00000506 	br	ed78 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ed64:	000ec800 	call	ec80 <alt_get_errno>
    ed68:	1007883a 	mov	r3,r2
    ed6c:	00801444 	movi	r2,81
    ed70:	18800015 	stw	r2,0(r3)
    return -1;
    ed74:	00bfffc4 	movi	r2,-1
  }
}
    ed78:	e037883a 	mov	sp,fp
    ed7c:	dfc00117 	ldw	ra,4(sp)
    ed80:	df000017 	ldw	fp,0(sp)
    ed84:	dec00204 	addi	sp,sp,8
    ed88:	f800283a 	ret

0000ed8c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    ed8c:	defffc04 	addi	sp,sp,-16
    ed90:	df000315 	stw	fp,12(sp)
    ed94:	df000304 	addi	fp,sp,12
    ed98:	e13ffd15 	stw	r4,-12(fp)
    ed9c:	e17ffe15 	stw	r5,-8(fp)
    eda0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    eda4:	e0bfff17 	ldw	r2,-4(fp)
}
    eda8:	e037883a 	mov	sp,fp
    edac:	df000017 	ldw	fp,0(sp)
    edb0:	dec00104 	addi	sp,sp,4
    edb4:	f800283a 	ret

0000edb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    edb8:	defffe04 	addi	sp,sp,-8
    edbc:	dfc00115 	stw	ra,4(sp)
    edc0:	df000015 	stw	fp,0(sp)
    edc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    edc8:	d0a00b17 	ldw	r2,-32724(gp)
    edcc:	10000326 	beq	r2,zero,eddc <alt_get_errno+0x24>
    edd0:	d0a00b17 	ldw	r2,-32724(gp)
    edd4:	103ee83a 	callr	r2
    edd8:	00000106 	br	ede0 <alt_get_errno+0x28>
    eddc:	d0a6d804 	addi	r2,gp,-25760
}
    ede0:	e037883a 	mov	sp,fp
    ede4:	dfc00117 	ldw	ra,4(sp)
    ede8:	df000017 	ldw	fp,0(sp)
    edec:	dec00204 	addi	sp,sp,8
    edf0:	f800283a 	ret

0000edf4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    edf4:	defffb04 	addi	sp,sp,-20
    edf8:	dfc00415 	stw	ra,16(sp)
    edfc:	df000315 	stw	fp,12(sp)
    ee00:	df000304 	addi	fp,sp,12
    ee04:	e13ffe15 	stw	r4,-8(fp)
    ee08:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ee0c:	e0bffe17 	ldw	r2,-8(fp)
    ee10:	10000616 	blt	r2,zero,ee2c <fstat+0x38>
    ee14:	e0bffe17 	ldw	r2,-8(fp)
    ee18:	10c00324 	muli	r3,r2,12
    ee1c:	00800074 	movhi	r2,1
    ee20:	1089d204 	addi	r2,r2,10056
    ee24:	1885883a 	add	r2,r3,r2
    ee28:	00000106 	br	ee30 <fstat+0x3c>
    ee2c:	0005883a 	mov	r2,zero
    ee30:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    ee34:	e0bffd17 	ldw	r2,-12(fp)
    ee38:	10001026 	beq	r2,zero,ee7c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    ee3c:	e0bffd17 	ldw	r2,-12(fp)
    ee40:	10800017 	ldw	r2,0(r2)
    ee44:	10800817 	ldw	r2,32(r2)
    ee48:	10000726 	beq	r2,zero,ee68 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    ee4c:	e0bffd17 	ldw	r2,-12(fp)
    ee50:	10800017 	ldw	r2,0(r2)
    ee54:	10800817 	ldw	r2,32(r2)
    ee58:	e17fff17 	ldw	r5,-4(fp)
    ee5c:	e13ffd17 	ldw	r4,-12(fp)
    ee60:	103ee83a 	callr	r2
    ee64:	00000a06 	br	ee90 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    ee68:	e0bfff17 	ldw	r2,-4(fp)
    ee6c:	00c80004 	movi	r3,8192
    ee70:	10c00115 	stw	r3,4(r2)
      return 0;
    ee74:	0005883a 	mov	r2,zero
    ee78:	00000506 	br	ee90 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ee7c:	000edb80 	call	edb8 <alt_get_errno>
    ee80:	1007883a 	mov	r3,r2
    ee84:	00801444 	movi	r2,81
    ee88:	18800015 	stw	r2,0(r3)
    return -1;
    ee8c:	00bfffc4 	movi	r2,-1
  }
}
    ee90:	e037883a 	mov	sp,fp
    ee94:	dfc00117 	ldw	ra,4(sp)
    ee98:	df000017 	ldw	fp,0(sp)
    ee9c:	dec00204 	addi	sp,sp,8
    eea0:	f800283a 	ret

0000eea4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    eea4:	defffe04 	addi	sp,sp,-8
    eea8:	dfc00115 	stw	ra,4(sp)
    eeac:	df000015 	stw	fp,0(sp)
    eeb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    eeb4:	d0a00b17 	ldw	r2,-32724(gp)
    eeb8:	10000326 	beq	r2,zero,eec8 <alt_get_errno+0x24>
    eebc:	d0a00b17 	ldw	r2,-32724(gp)
    eec0:	103ee83a 	callr	r2
    eec4:	00000106 	br	eecc <alt_get_errno+0x28>
    eec8:	d0a6d804 	addi	r2,gp,-25760
}
    eecc:	e037883a 	mov	sp,fp
    eed0:	dfc00117 	ldw	ra,4(sp)
    eed4:	df000017 	ldw	fp,0(sp)
    eed8:	dec00204 	addi	sp,sp,8
    eedc:	f800283a 	ret

0000eee0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    eee0:	deffed04 	addi	sp,sp,-76
    eee4:	dfc01215 	stw	ra,72(sp)
    eee8:	df001115 	stw	fp,68(sp)
    eeec:	df001104 	addi	fp,sp,68
    eef0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    eef4:	e0bfff17 	ldw	r2,-4(fp)
    eef8:	10000616 	blt	r2,zero,ef14 <isatty+0x34>
    eefc:	e0bfff17 	ldw	r2,-4(fp)
    ef00:	10c00324 	muli	r3,r2,12
    ef04:	00800074 	movhi	r2,1
    ef08:	1089d204 	addi	r2,r2,10056
    ef0c:	1885883a 	add	r2,r3,r2
    ef10:	00000106 	br	ef18 <isatty+0x38>
    ef14:	0005883a 	mov	r2,zero
    ef18:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    ef1c:	e0bfef17 	ldw	r2,-68(fp)
    ef20:	10000e26 	beq	r2,zero,ef5c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    ef24:	e0bfef17 	ldw	r2,-68(fp)
    ef28:	10800017 	ldw	r2,0(r2)
    ef2c:	10800817 	ldw	r2,32(r2)
    ef30:	1000021e 	bne	r2,zero,ef3c <isatty+0x5c>
    {
      return 1;
    ef34:	00800044 	movi	r2,1
    ef38:	00000d06 	br	ef70 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    ef3c:	e0bff004 	addi	r2,fp,-64
    ef40:	100b883a 	mov	r5,r2
    ef44:	e13fff17 	ldw	r4,-4(fp)
    ef48:	000edf40 	call	edf4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    ef4c:	e0bff117 	ldw	r2,-60(fp)
    ef50:	10880020 	cmpeqi	r2,r2,8192
    ef54:	10803fcc 	andi	r2,r2,255
    ef58:	00000506 	br	ef70 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ef5c:	000eea40 	call	eea4 <alt_get_errno>
    ef60:	1007883a 	mov	r3,r2
    ef64:	00801444 	movi	r2,81
    ef68:	18800015 	stw	r2,0(r3)
    return 0;
    ef6c:	0005883a 	mov	r2,zero
  }
}
    ef70:	e037883a 	mov	sp,fp
    ef74:	dfc00117 	ldw	ra,4(sp)
    ef78:	df000017 	ldw	fp,0(sp)
    ef7c:	dec00204 	addi	sp,sp,8
    ef80:	f800283a 	ret

0000ef84 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    ef84:	defffc04 	addi	sp,sp,-16
    ef88:	df000315 	stw	fp,12(sp)
    ef8c:	df000304 	addi	fp,sp,12
    ef90:	e13ffd15 	stw	r4,-12(fp)
    ef94:	e17ffe15 	stw	r5,-8(fp)
    ef98:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    ef9c:	e0fffe17 	ldw	r3,-8(fp)
    efa0:	e0bffd17 	ldw	r2,-12(fp)
    efa4:	18800c26 	beq	r3,r2,efd8 <alt_load_section+0x54>
  {
    while( to != end )
    efa8:	00000806 	br	efcc <alt_load_section+0x48>
    {
      *to++ = *from++;
    efac:	e0bffe17 	ldw	r2,-8(fp)
    efb0:	10c00104 	addi	r3,r2,4
    efb4:	e0fffe15 	stw	r3,-8(fp)
    efb8:	e0fffd17 	ldw	r3,-12(fp)
    efbc:	19000104 	addi	r4,r3,4
    efc0:	e13ffd15 	stw	r4,-12(fp)
    efc4:	18c00017 	ldw	r3,0(r3)
    efc8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    efcc:	e0fffe17 	ldw	r3,-8(fp)
    efd0:	e0bfff17 	ldw	r2,-4(fp)
    efd4:	18bff51e 	bne	r3,r2,efac <__alt_data_end+0xff00efac>
    {
      *to++ = *from++;
    }
  }
}
    efd8:	0001883a 	nop
    efdc:	e037883a 	mov	sp,fp
    efe0:	df000017 	ldw	fp,0(sp)
    efe4:	dec00104 	addi	sp,sp,4
    efe8:	f800283a 	ret

0000efec <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    efec:	defffe04 	addi	sp,sp,-8
    eff0:	dfc00115 	stw	ra,4(sp)
    eff4:	df000015 	stw	fp,0(sp)
    eff8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    effc:	01800074 	movhi	r6,1
    f000:	318e5a04 	addi	r6,r6,14696
    f004:	01400074 	movhi	r5,1
    f008:	29479f04 	addi	r5,r5,7804
    f00c:	01000074 	movhi	r4,1
    f010:	210e5a04 	addi	r4,r4,14696
    f014:	000ef840 	call	ef84 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    f018:	01800034 	movhi	r6,0
    f01c:	31809104 	addi	r6,r6,580
    f020:	01400034 	movhi	r5,0
    f024:	29400804 	addi	r5,r5,32
    f028:	01000034 	movhi	r4,0
    f02c:	21000804 	addi	r4,r4,32
    f030:	000ef840 	call	ef84 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    f034:	01800074 	movhi	r6,1
    f038:	31879f04 	addi	r6,r6,7804
    f03c:	01400074 	movhi	r5,1
    f040:	2945b004 	addi	r5,r5,5824
    f044:	01000074 	movhi	r4,1
    f048:	2105b004 	addi	r4,r4,5824
    f04c:	000ef840 	call	ef84 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    f050:	00105d40 	call	105d4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    f054:	00107940 	call	10794 <alt_icache_flush_all>
}
    f058:	0001883a 	nop
    f05c:	e037883a 	mov	sp,fp
    f060:	dfc00117 	ldw	ra,4(sp)
    f064:	df000017 	ldw	fp,0(sp)
    f068:	dec00204 	addi	sp,sp,8
    f06c:	f800283a 	ret

0000f070 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f070:	defffe04 	addi	sp,sp,-8
    f074:	dfc00115 	stw	ra,4(sp)
    f078:	df000015 	stw	fp,0(sp)
    f07c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f080:	d0a00b17 	ldw	r2,-32724(gp)
    f084:	10000326 	beq	r2,zero,f094 <alt_get_errno+0x24>
    f088:	d0a00b17 	ldw	r2,-32724(gp)
    f08c:	103ee83a 	callr	r2
    f090:	00000106 	br	f098 <alt_get_errno+0x28>
    f094:	d0a6d804 	addi	r2,gp,-25760
}
    f098:	e037883a 	mov	sp,fp
    f09c:	dfc00117 	ldw	ra,4(sp)
    f0a0:	df000017 	ldw	fp,0(sp)
    f0a4:	dec00204 	addi	sp,sp,8
    f0a8:	f800283a 	ret

0000f0ac <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    f0ac:	defff904 	addi	sp,sp,-28
    f0b0:	dfc00615 	stw	ra,24(sp)
    f0b4:	df000515 	stw	fp,20(sp)
    f0b8:	df000504 	addi	fp,sp,20
    f0bc:	e13ffd15 	stw	r4,-12(fp)
    f0c0:	e17ffe15 	stw	r5,-8(fp)
    f0c4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    f0c8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f0cc:	e0bffd17 	ldw	r2,-12(fp)
    f0d0:	10000616 	blt	r2,zero,f0ec <lseek+0x40>
    f0d4:	e0bffd17 	ldw	r2,-12(fp)
    f0d8:	10c00324 	muli	r3,r2,12
    f0dc:	00800074 	movhi	r2,1
    f0e0:	1089d204 	addi	r2,r2,10056
    f0e4:	1885883a 	add	r2,r3,r2
    f0e8:	00000106 	br	f0f0 <lseek+0x44>
    f0ec:	0005883a 	mov	r2,zero
    f0f0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    f0f4:	e0bffc17 	ldw	r2,-16(fp)
    f0f8:	10001026 	beq	r2,zero,f13c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    f0fc:	e0bffc17 	ldw	r2,-16(fp)
    f100:	10800017 	ldw	r2,0(r2)
    f104:	10800717 	ldw	r2,28(r2)
    f108:	10000926 	beq	r2,zero,f130 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    f10c:	e0bffc17 	ldw	r2,-16(fp)
    f110:	10800017 	ldw	r2,0(r2)
    f114:	10800717 	ldw	r2,28(r2)
    f118:	e1bfff17 	ldw	r6,-4(fp)
    f11c:	e17ffe17 	ldw	r5,-8(fp)
    f120:	e13ffc17 	ldw	r4,-16(fp)
    f124:	103ee83a 	callr	r2
    f128:	e0bffb15 	stw	r2,-20(fp)
    f12c:	00000506 	br	f144 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    f130:	00bfde84 	movi	r2,-134
    f134:	e0bffb15 	stw	r2,-20(fp)
    f138:	00000206 	br	f144 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    f13c:	00bfebc4 	movi	r2,-81
    f140:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    f144:	e0bffb17 	ldw	r2,-20(fp)
    f148:	1000070e 	bge	r2,zero,f168 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    f14c:	000f0700 	call	f070 <alt_get_errno>
    f150:	1007883a 	mov	r3,r2
    f154:	e0bffb17 	ldw	r2,-20(fp)
    f158:	0085c83a 	sub	r2,zero,r2
    f15c:	18800015 	stw	r2,0(r3)
    rc = -1;
    f160:	00bfffc4 	movi	r2,-1
    f164:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    f168:	e0bffb17 	ldw	r2,-20(fp)
}
    f16c:	e037883a 	mov	sp,fp
    f170:	dfc00117 	ldw	ra,4(sp)
    f174:	df000017 	ldw	fp,0(sp)
    f178:	dec00204 	addi	sp,sp,8
    f17c:	f800283a 	ret

0000f180 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f180:	defffd04 	addi	sp,sp,-12
    f184:	dfc00215 	stw	ra,8(sp)
    f188:	df000115 	stw	fp,4(sp)
    f18c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f190:	0009883a 	mov	r4,zero
    f194:	000f6280 	call	f628 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    f198:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f19c:	000f6600 	call	f660 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    f1a0:	01800074 	movhi	r6,1
    f1a4:	31879704 	addi	r6,r6,7772
    f1a8:	01400074 	movhi	r5,1
    f1ac:	29479704 	addi	r5,r5,7772
    f1b0:	01000074 	movhi	r4,1
    f1b4:	21079704 	addi	r4,r4,7772
    f1b8:	0010b2c0 	call	10b2c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    f1bc:	00106d40 	call	106d4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    f1c0:	01000074 	movhi	r4,1
    f1c4:	2101cd04 	addi	r4,r4,1844
    f1c8:	001132c0 	call	1132c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    f1cc:	d0a6dc17 	ldw	r2,-25744(gp)
    f1d0:	d0e6dd17 	ldw	r3,-25740(gp)
    f1d4:	d126de17 	ldw	r4,-25736(gp)
    f1d8:	200d883a 	mov	r6,r4
    f1dc:	180b883a 	mov	r5,r3
    f1e0:	1009883a 	mov	r4,r2
    f1e4:	00012d00 	call	12d0 <main>
    f1e8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    f1ec:	01000044 	movi	r4,1
    f1f0:	000ecbc0 	call	ecbc <close>
  exit (result);
    f1f4:	e13fff17 	ldw	r4,-4(fp)
    f1f8:	00113400 	call	11340 <exit>

0000f1fc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    f1fc:	defffe04 	addi	sp,sp,-8
    f200:	df000115 	stw	fp,4(sp)
    f204:	df000104 	addi	fp,sp,4
    f208:	e13fff15 	stw	r4,-4(fp)
}
    f20c:	0001883a 	nop
    f210:	e037883a 	mov	sp,fp
    f214:	df000017 	ldw	fp,0(sp)
    f218:	dec00104 	addi	sp,sp,4
    f21c:	f800283a 	ret

0000f220 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    f220:	defffe04 	addi	sp,sp,-8
    f224:	df000115 	stw	fp,4(sp)
    f228:	df000104 	addi	fp,sp,4
    f22c:	e13fff15 	stw	r4,-4(fp)
}
    f230:	0001883a 	nop
    f234:	e037883a 	mov	sp,fp
    f238:	df000017 	ldw	fp,0(sp)
    f23c:	dec00104 	addi	sp,sp,4
    f240:	f800283a 	ret

0000f244 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f244:	defffe04 	addi	sp,sp,-8
    f248:	dfc00115 	stw	ra,4(sp)
    f24c:	df000015 	stw	fp,0(sp)
    f250:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f254:	d0a00b17 	ldw	r2,-32724(gp)
    f258:	10000326 	beq	r2,zero,f268 <alt_get_errno+0x24>
    f25c:	d0a00b17 	ldw	r2,-32724(gp)
    f260:	103ee83a 	callr	r2
    f264:	00000106 	br	f26c <alt_get_errno+0x28>
    f268:	d0a6d804 	addi	r2,gp,-25760
}
    f26c:	e037883a 	mov	sp,fp
    f270:	dfc00117 	ldw	ra,4(sp)
    f274:	df000017 	ldw	fp,0(sp)
    f278:	dec00204 	addi	sp,sp,8
    f27c:	f800283a 	ret

0000f280 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    f280:	defff904 	addi	sp,sp,-28
    f284:	dfc00615 	stw	ra,24(sp)
    f288:	df000515 	stw	fp,20(sp)
    f28c:	df000504 	addi	fp,sp,20
    f290:	e13ffd15 	stw	r4,-12(fp)
    f294:	e17ffe15 	stw	r5,-8(fp)
    f298:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f29c:	e0bffd17 	ldw	r2,-12(fp)
    f2a0:	10000616 	blt	r2,zero,f2bc <read+0x3c>
    f2a4:	e0bffd17 	ldw	r2,-12(fp)
    f2a8:	10c00324 	muli	r3,r2,12
    f2ac:	00800074 	movhi	r2,1
    f2b0:	1089d204 	addi	r2,r2,10056
    f2b4:	1885883a 	add	r2,r3,r2
    f2b8:	00000106 	br	f2c0 <read+0x40>
    f2bc:	0005883a 	mov	r2,zero
    f2c0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f2c4:	e0bffb17 	ldw	r2,-20(fp)
    f2c8:	10002226 	beq	r2,zero,f354 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f2cc:	e0bffb17 	ldw	r2,-20(fp)
    f2d0:	10800217 	ldw	r2,8(r2)
    f2d4:	108000cc 	andi	r2,r2,3
    f2d8:	10800060 	cmpeqi	r2,r2,1
    f2dc:	1000181e 	bne	r2,zero,f340 <read+0xc0>
        (fd->dev->read))
    f2e0:	e0bffb17 	ldw	r2,-20(fp)
    f2e4:	10800017 	ldw	r2,0(r2)
    f2e8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f2ec:	10001426 	beq	r2,zero,f340 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    f2f0:	e0bffb17 	ldw	r2,-20(fp)
    f2f4:	10800017 	ldw	r2,0(r2)
    f2f8:	10800517 	ldw	r2,20(r2)
    f2fc:	e0ffff17 	ldw	r3,-4(fp)
    f300:	180d883a 	mov	r6,r3
    f304:	e17ffe17 	ldw	r5,-8(fp)
    f308:	e13ffb17 	ldw	r4,-20(fp)
    f30c:	103ee83a 	callr	r2
    f310:	e0bffc15 	stw	r2,-16(fp)
    f314:	e0bffc17 	ldw	r2,-16(fp)
    f318:	1000070e 	bge	r2,zero,f338 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    f31c:	000f2440 	call	f244 <alt_get_errno>
    f320:	1007883a 	mov	r3,r2
    f324:	e0bffc17 	ldw	r2,-16(fp)
    f328:	0085c83a 	sub	r2,zero,r2
    f32c:	18800015 	stw	r2,0(r3)
          return -1;
    f330:	00bfffc4 	movi	r2,-1
    f334:	00000c06 	br	f368 <read+0xe8>
        }
        return rval;
    f338:	e0bffc17 	ldw	r2,-16(fp)
    f33c:	00000a06 	br	f368 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    f340:	000f2440 	call	f244 <alt_get_errno>
    f344:	1007883a 	mov	r3,r2
    f348:	00800344 	movi	r2,13
    f34c:	18800015 	stw	r2,0(r3)
    f350:	00000406 	br	f364 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    f354:	000f2440 	call	f244 <alt_get_errno>
    f358:	1007883a 	mov	r3,r2
    f35c:	00801444 	movi	r2,81
    f360:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f364:	00bfffc4 	movi	r2,-1
}
    f368:	e037883a 	mov	sp,fp
    f36c:	dfc00117 	ldw	ra,4(sp)
    f370:	df000017 	ldw	fp,0(sp)
    f374:	dec00204 	addi	sp,sp,8
    f378:	f800283a 	ret

0000f37c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    f37c:	defffe04 	addi	sp,sp,-8
    f380:	df000115 	stw	fp,4(sp)
    f384:	df000104 	addi	fp,sp,4
    f388:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    f38c:	e0bfff17 	ldw	r2,-4(fp)
    f390:	108000d0 	cmplti	r2,r2,3
    f394:	10000d1e 	bne	r2,zero,f3cc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    f398:	00800074 	movhi	r2,1
    f39c:	1089d204 	addi	r2,r2,10056
    f3a0:	e0ffff17 	ldw	r3,-4(fp)
    f3a4:	18c00324 	muli	r3,r3,12
    f3a8:	10c5883a 	add	r2,r2,r3
    f3ac:	10800204 	addi	r2,r2,8
    f3b0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    f3b4:	00800074 	movhi	r2,1
    f3b8:	1089d204 	addi	r2,r2,10056
    f3bc:	e0ffff17 	ldw	r3,-4(fp)
    f3c0:	18c00324 	muli	r3,r3,12
    f3c4:	10c5883a 	add	r2,r2,r3
    f3c8:	10000015 	stw	zero,0(r2)
  }
}
    f3cc:	0001883a 	nop
    f3d0:	e037883a 	mov	sp,fp
    f3d4:	df000017 	ldw	fp,0(sp)
    f3d8:	dec00104 	addi	sp,sp,4
    f3dc:	f800283a 	ret

0000f3e0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    f3e0:	defff904 	addi	sp,sp,-28
    f3e4:	df000615 	stw	fp,24(sp)
    f3e8:	df000604 	addi	fp,sp,24
    f3ec:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f3f0:	0005303a 	rdctl	r2,status
    f3f4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f3f8:	e0fffe17 	ldw	r3,-8(fp)
    f3fc:	00bfff84 	movi	r2,-2
    f400:	1884703a 	and	r2,r3,r2
    f404:	1001703a 	wrctl	status,r2
  
  return context;
    f408:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    f40c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    f410:	d0a00c17 	ldw	r2,-32720(gp)
    f414:	10c000c4 	addi	r3,r2,3
    f418:	00bfff04 	movi	r2,-4
    f41c:	1884703a 	and	r2,r3,r2
    f420:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    f424:	d0e00c17 	ldw	r3,-32720(gp)
    f428:	e0bfff17 	ldw	r2,-4(fp)
    f42c:	1887883a 	add	r3,r3,r2
    f430:	00804034 	movhi	r2,256
    f434:	10800004 	addi	r2,r2,0
    f438:	10c0062e 	bgeu	r2,r3,f454 <sbrk+0x74>
    f43c:	e0bffb17 	ldw	r2,-20(fp)
    f440:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f444:	e0bffa17 	ldw	r2,-24(fp)
    f448:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    f44c:	00bfffc4 	movi	r2,-1
    f450:	00000b06 	br	f480 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    f454:	d0a00c17 	ldw	r2,-32720(gp)
    f458:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    f45c:	d0e00c17 	ldw	r3,-32720(gp)
    f460:	e0bfff17 	ldw	r2,-4(fp)
    f464:	1885883a 	add	r2,r3,r2
    f468:	d0a00c15 	stw	r2,-32720(gp)
    f46c:	e0bffb17 	ldw	r2,-20(fp)
    f470:	e0bffc15 	stw	r2,-16(fp)
    f474:	e0bffc17 	ldw	r2,-16(fp)
    f478:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    f47c:	e0bffd17 	ldw	r2,-12(fp)
} 
    f480:	e037883a 	mov	sp,fp
    f484:	df000017 	ldw	fp,0(sp)
    f488:	dec00104 	addi	sp,sp,4
    f48c:	f800283a 	ret

0000f490 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    f490:	defffd04 	addi	sp,sp,-12
    f494:	dfc00215 	stw	ra,8(sp)
    f498:	df000115 	stw	fp,4(sp)
    f49c:	df000104 	addi	fp,sp,4
    f4a0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    f4a4:	e13fff17 	ldw	r4,-4(fp)
    f4a8:	001047c0 	call	1047c <alt_busy_sleep>
}
    f4ac:	e037883a 	mov	sp,fp
    f4b0:	dfc00117 	ldw	ra,4(sp)
    f4b4:	df000017 	ldw	fp,0(sp)
    f4b8:	dec00204 	addi	sp,sp,8
    f4bc:	f800283a 	ret

0000f4c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f4c0:	defffe04 	addi	sp,sp,-8
    f4c4:	dfc00115 	stw	ra,4(sp)
    f4c8:	df000015 	stw	fp,0(sp)
    f4cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f4d0:	d0a00b17 	ldw	r2,-32724(gp)
    f4d4:	10000326 	beq	r2,zero,f4e4 <alt_get_errno+0x24>
    f4d8:	d0a00b17 	ldw	r2,-32724(gp)
    f4dc:	103ee83a 	callr	r2
    f4e0:	00000106 	br	f4e8 <alt_get_errno+0x28>
    f4e4:	d0a6d804 	addi	r2,gp,-25760
}
    f4e8:	e037883a 	mov	sp,fp
    f4ec:	dfc00117 	ldw	ra,4(sp)
    f4f0:	df000017 	ldw	fp,0(sp)
    f4f4:	dec00204 	addi	sp,sp,8
    f4f8:	f800283a 	ret

0000f4fc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    f4fc:	defff904 	addi	sp,sp,-28
    f500:	dfc00615 	stw	ra,24(sp)
    f504:	df000515 	stw	fp,20(sp)
    f508:	df000504 	addi	fp,sp,20
    f50c:	e13ffd15 	stw	r4,-12(fp)
    f510:	e17ffe15 	stw	r5,-8(fp)
    f514:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f518:	e0bffd17 	ldw	r2,-12(fp)
    f51c:	10000616 	blt	r2,zero,f538 <write+0x3c>
    f520:	e0bffd17 	ldw	r2,-12(fp)
    f524:	10c00324 	muli	r3,r2,12
    f528:	00800074 	movhi	r2,1
    f52c:	1089d204 	addi	r2,r2,10056
    f530:	1885883a 	add	r2,r3,r2
    f534:	00000106 	br	f53c <write+0x40>
    f538:	0005883a 	mov	r2,zero
    f53c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f540:	e0bffb17 	ldw	r2,-20(fp)
    f544:	10002126 	beq	r2,zero,f5cc <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    f548:	e0bffb17 	ldw	r2,-20(fp)
    f54c:	10800217 	ldw	r2,8(r2)
    f550:	108000cc 	andi	r2,r2,3
    f554:	10001826 	beq	r2,zero,f5b8 <write+0xbc>
    f558:	e0bffb17 	ldw	r2,-20(fp)
    f55c:	10800017 	ldw	r2,0(r2)
    f560:	10800617 	ldw	r2,24(r2)
    f564:	10001426 	beq	r2,zero,f5b8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    f568:	e0bffb17 	ldw	r2,-20(fp)
    f56c:	10800017 	ldw	r2,0(r2)
    f570:	10800617 	ldw	r2,24(r2)
    f574:	e0ffff17 	ldw	r3,-4(fp)
    f578:	180d883a 	mov	r6,r3
    f57c:	e17ffe17 	ldw	r5,-8(fp)
    f580:	e13ffb17 	ldw	r4,-20(fp)
    f584:	103ee83a 	callr	r2
    f588:	e0bffc15 	stw	r2,-16(fp)
    f58c:	e0bffc17 	ldw	r2,-16(fp)
    f590:	1000070e 	bge	r2,zero,f5b0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    f594:	000f4c00 	call	f4c0 <alt_get_errno>
    f598:	1007883a 	mov	r3,r2
    f59c:	e0bffc17 	ldw	r2,-16(fp)
    f5a0:	0085c83a 	sub	r2,zero,r2
    f5a4:	18800015 	stw	r2,0(r3)
        return -1;
    f5a8:	00bfffc4 	movi	r2,-1
    f5ac:	00000c06 	br	f5e0 <write+0xe4>
      }
      return rval;
    f5b0:	e0bffc17 	ldw	r2,-16(fp)
    f5b4:	00000a06 	br	f5e0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    f5b8:	000f4c00 	call	f4c0 <alt_get_errno>
    f5bc:	1007883a 	mov	r3,r2
    f5c0:	00800344 	movi	r2,13
    f5c4:	18800015 	stw	r2,0(r3)
    f5c8:	00000406 	br	f5dc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    f5cc:	000f4c00 	call	f4c0 <alt_get_errno>
    f5d0:	1007883a 	mov	r3,r2
    f5d4:	00801444 	movi	r2,81
    f5d8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f5dc:	00bfffc4 	movi	r2,-1
}
    f5e0:	e037883a 	mov	sp,fp
    f5e4:	dfc00117 	ldw	ra,4(sp)
    f5e8:	df000017 	ldw	fp,0(sp)
    f5ec:	dec00204 	addi	sp,sp,8
    f5f0:	f800283a 	ret

0000f5f4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    f5f4:	defffd04 	addi	sp,sp,-12
    f5f8:	dfc00215 	stw	ra,8(sp)
    f5fc:	df000115 	stw	fp,4(sp)
    f600:	df000104 	addi	fp,sp,4
    f604:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    f608:	d1600804 	addi	r5,gp,-32736
    f60c:	e13fff17 	ldw	r4,-4(fp)
    f610:	00106300 	call	10630 <alt_dev_llist_insert>
}
    f614:	e037883a 	mov	sp,fp
    f618:	dfc00117 	ldw	ra,4(sp)
    f61c:	df000017 	ldw	fp,0(sp)
    f620:	dec00204 	addi	sp,sp,8
    f624:	f800283a 	ret

0000f628 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    f628:	defffd04 	addi	sp,sp,-12
    f62c:	dfc00215 	stw	ra,8(sp)
    f630:	df000115 	stw	fp,4(sp)
    f634:	df000104 	addi	fp,sp,4
    f638:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    f63c:	0010fa00 	call	10fa0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    f640:	00800044 	movi	r2,1
    f644:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    f648:	0001883a 	nop
    f64c:	e037883a 	mov	sp,fp
    f650:	dfc00117 	ldw	ra,4(sp)
    f654:	df000017 	ldw	fp,0(sp)
    f658:	dec00204 	addi	sp,sp,8
    f65c:	f800283a 	ret

0000f660 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    f660:	defffe04 	addi	sp,sp,-8
    f664:	dfc00115 	stw	ra,4(sp)
    f668:	df000015 	stw	fp,0(sp)
    f66c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    f670:	00804034 	movhi	r2,256
    f674:	10840004 	addi	r2,r2,4096
    f678:	d0a6df15 	stw	r2,-25732(gp)
    f67c:	0080bef4 	movhi	r2,763
    f680:	10bc2004 	addi	r2,r2,-3968
    f684:	d0a6e015 	stw	r2,-25728(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    f688:	01c0fa04 	movi	r7,1000
    f68c:	01800104 	movi	r6,4
    f690:	000b883a 	mov	r5,zero
    f694:	01004034 	movhi	r4,256
    f698:	21040804 	addi	r4,r4,4128
    f69c:	00101bc0 	call	101bc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    f6a0:	000d883a 	mov	r6,zero
    f6a4:	000b883a 	mov	r5,zero
    f6a8:	01000074 	movhi	r4,1
    f6ac:	210a3c04 	addi	r4,r4,10480
    f6b0:	000f8400 	call	f840 <altera_avalon_jtag_uart_init>
    f6b4:	01000074 	movhi	r4,1
    f6b8:	210a3204 	addi	r4,r4,10440
    f6bc:	000f5f40 	call	f5f4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    f6c0:	0001883a 	nop
}
    f6c4:	0001883a 	nop
    f6c8:	e037883a 	mov	sp,fp
    f6cc:	dfc00117 	ldw	ra,4(sp)
    f6d0:	df000017 	ldw	fp,0(sp)
    f6d4:	dec00204 	addi	sp,sp,8
    f6d8:	f800283a 	ret

0000f6dc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    f6dc:	defffa04 	addi	sp,sp,-24
    f6e0:	dfc00515 	stw	ra,20(sp)
    f6e4:	df000415 	stw	fp,16(sp)
    f6e8:	df000404 	addi	fp,sp,16
    f6ec:	e13ffd15 	stw	r4,-12(fp)
    f6f0:	e17ffe15 	stw	r5,-8(fp)
    f6f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f6f8:	e0bffd17 	ldw	r2,-12(fp)
    f6fc:	10800017 	ldw	r2,0(r2)
    f700:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    f704:	e0bffc17 	ldw	r2,-16(fp)
    f708:	10c00a04 	addi	r3,r2,40
    f70c:	e0bffd17 	ldw	r2,-12(fp)
    f710:	10800217 	ldw	r2,8(r2)
    f714:	100f883a 	mov	r7,r2
    f718:	e1bfff17 	ldw	r6,-4(fp)
    f71c:	e17ffe17 	ldw	r5,-8(fp)
    f720:	1809883a 	mov	r4,r3
    f724:	000fd040 	call	fd04 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    f728:	e037883a 	mov	sp,fp
    f72c:	dfc00117 	ldw	ra,4(sp)
    f730:	df000017 	ldw	fp,0(sp)
    f734:	dec00204 	addi	sp,sp,8
    f738:	f800283a 	ret

0000f73c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    f73c:	defffa04 	addi	sp,sp,-24
    f740:	dfc00515 	stw	ra,20(sp)
    f744:	df000415 	stw	fp,16(sp)
    f748:	df000404 	addi	fp,sp,16
    f74c:	e13ffd15 	stw	r4,-12(fp)
    f750:	e17ffe15 	stw	r5,-8(fp)
    f754:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f758:	e0bffd17 	ldw	r2,-12(fp)
    f75c:	10800017 	ldw	r2,0(r2)
    f760:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    f764:	e0bffc17 	ldw	r2,-16(fp)
    f768:	10c00a04 	addi	r3,r2,40
    f76c:	e0bffd17 	ldw	r2,-12(fp)
    f770:	10800217 	ldw	r2,8(r2)
    f774:	100f883a 	mov	r7,r2
    f778:	e1bfff17 	ldw	r6,-4(fp)
    f77c:	e17ffe17 	ldw	r5,-8(fp)
    f780:	1809883a 	mov	r4,r3
    f784:	000ff200 	call	ff20 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    f788:	e037883a 	mov	sp,fp
    f78c:	dfc00117 	ldw	ra,4(sp)
    f790:	df000017 	ldw	fp,0(sp)
    f794:	dec00204 	addi	sp,sp,8
    f798:	f800283a 	ret

0000f79c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    f79c:	defffc04 	addi	sp,sp,-16
    f7a0:	dfc00315 	stw	ra,12(sp)
    f7a4:	df000215 	stw	fp,8(sp)
    f7a8:	df000204 	addi	fp,sp,8
    f7ac:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f7b0:	e0bfff17 	ldw	r2,-4(fp)
    f7b4:	10800017 	ldw	r2,0(r2)
    f7b8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    f7bc:	e0bffe17 	ldw	r2,-8(fp)
    f7c0:	10c00a04 	addi	r3,r2,40
    f7c4:	e0bfff17 	ldw	r2,-4(fp)
    f7c8:	10800217 	ldw	r2,8(r2)
    f7cc:	100b883a 	mov	r5,r2
    f7d0:	1809883a 	mov	r4,r3
    f7d4:	000fbac0 	call	fbac <altera_avalon_jtag_uart_close>
}
    f7d8:	e037883a 	mov	sp,fp
    f7dc:	dfc00117 	ldw	ra,4(sp)
    f7e0:	df000017 	ldw	fp,0(sp)
    f7e4:	dec00204 	addi	sp,sp,8
    f7e8:	f800283a 	ret

0000f7ec <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    f7ec:	defffa04 	addi	sp,sp,-24
    f7f0:	dfc00515 	stw	ra,20(sp)
    f7f4:	df000415 	stw	fp,16(sp)
    f7f8:	df000404 	addi	fp,sp,16
    f7fc:	e13ffd15 	stw	r4,-12(fp)
    f800:	e17ffe15 	stw	r5,-8(fp)
    f804:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    f808:	e0bffd17 	ldw	r2,-12(fp)
    f80c:	10800017 	ldw	r2,0(r2)
    f810:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    f814:	e0bffc17 	ldw	r2,-16(fp)
    f818:	10800a04 	addi	r2,r2,40
    f81c:	e1bfff17 	ldw	r6,-4(fp)
    f820:	e17ffe17 	ldw	r5,-8(fp)
    f824:	1009883a 	mov	r4,r2
    f828:	000fc140 	call	fc14 <altera_avalon_jtag_uart_ioctl>
}
    f82c:	e037883a 	mov	sp,fp
    f830:	dfc00117 	ldw	ra,4(sp)
    f834:	df000017 	ldw	fp,0(sp)
    f838:	dec00204 	addi	sp,sp,8
    f83c:	f800283a 	ret

0000f840 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f840:	defffa04 	addi	sp,sp,-24
    f844:	dfc00515 	stw	ra,20(sp)
    f848:	df000415 	stw	fp,16(sp)
    f84c:	df000404 	addi	fp,sp,16
    f850:	e13ffd15 	stw	r4,-12(fp)
    f854:	e17ffe15 	stw	r5,-8(fp)
    f858:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f85c:	e0bffd17 	ldw	r2,-12(fp)
    f860:	00c00044 	movi	r3,1
    f864:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f868:	e0bffd17 	ldw	r2,-12(fp)
    f86c:	10800017 	ldw	r2,0(r2)
    f870:	10800104 	addi	r2,r2,4
    f874:	1007883a 	mov	r3,r2
    f878:	e0bffd17 	ldw	r2,-12(fp)
    f87c:	10800817 	ldw	r2,32(r2)
    f880:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    f884:	e0bffe17 	ldw	r2,-8(fp)
    f888:	e0ffff17 	ldw	r3,-4(fp)
    f88c:	d8000015 	stw	zero,0(sp)
    f890:	e1fffd17 	ldw	r7,-12(fp)
    f894:	01800074 	movhi	r6,1
    f898:	31be4004 	addi	r6,r6,-1792
    f89c:	180b883a 	mov	r5,r3
    f8a0:	1009883a 	mov	r4,r2
    f8a4:	00107c80 	call	107c8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f8a8:	e0bffd17 	ldw	r2,-12(fp)
    f8ac:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f8b0:	e0bffd17 	ldw	r2,-12(fp)
    f8b4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f8b8:	d0e6e217 	ldw	r3,-25720(gp)
    f8bc:	e1fffd17 	ldw	r7,-12(fp)
    f8c0:	01800074 	movhi	r6,1
    f8c4:	31bec304 	addi	r6,r6,-1268
    f8c8:	180b883a 	mov	r5,r3
    f8cc:	1009883a 	mov	r4,r2
    f8d0:	00103500 	call	10350 <alt_alarm_start>
    f8d4:	1000040e 	bge	r2,zero,f8e8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    f8d8:	e0fffd17 	ldw	r3,-12(fp)
    f8dc:	00a00034 	movhi	r2,32768
    f8e0:	10bfffc4 	addi	r2,r2,-1
    f8e4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    f8e8:	0001883a 	nop
    f8ec:	e037883a 	mov	sp,fp
    f8f0:	dfc00117 	ldw	ra,4(sp)
    f8f4:	df000017 	ldw	fp,0(sp)
    f8f8:	dec00204 	addi	sp,sp,8
    f8fc:	f800283a 	ret

0000f900 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    f900:	defff804 	addi	sp,sp,-32
    f904:	df000715 	stw	fp,28(sp)
    f908:	df000704 	addi	fp,sp,28
    f90c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    f910:	e0bfff17 	ldw	r2,-4(fp)
    f914:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    f918:	e0bffb17 	ldw	r2,-20(fp)
    f91c:	10800017 	ldw	r2,0(r2)
    f920:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f924:	e0bffc17 	ldw	r2,-16(fp)
    f928:	10800104 	addi	r2,r2,4
    f92c:	10800037 	ldwio	r2,0(r2)
    f930:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    f934:	e0bffd17 	ldw	r2,-12(fp)
    f938:	1080c00c 	andi	r2,r2,768
    f93c:	10006d26 	beq	r2,zero,faf4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    f940:	e0bffd17 	ldw	r2,-12(fp)
    f944:	1080400c 	andi	r2,r2,256
    f948:	10003526 	beq	r2,zero,fa20 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    f94c:	00800074 	movhi	r2,1
    f950:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f954:	e0bffb17 	ldw	r2,-20(fp)
    f958:	10800a17 	ldw	r2,40(r2)
    f95c:	10800044 	addi	r2,r2,1
    f960:	1081ffcc 	andi	r2,r2,2047
    f964:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    f968:	e0bffb17 	ldw	r2,-20(fp)
    f96c:	10c00b17 	ldw	r3,44(r2)
    f970:	e0bffe17 	ldw	r2,-8(fp)
    f974:	18801526 	beq	r3,r2,f9cc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    f978:	e0bffc17 	ldw	r2,-16(fp)
    f97c:	10800037 	ldwio	r2,0(r2)
    f980:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    f984:	e0bff917 	ldw	r2,-28(fp)
    f988:	10a0000c 	andi	r2,r2,32768
    f98c:	10001126 	beq	r2,zero,f9d4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    f990:	e0bffb17 	ldw	r2,-20(fp)
    f994:	10800a17 	ldw	r2,40(r2)
    f998:	e0fff917 	ldw	r3,-28(fp)
    f99c:	1809883a 	mov	r4,r3
    f9a0:	e0fffb17 	ldw	r3,-20(fp)
    f9a4:	1885883a 	add	r2,r3,r2
    f9a8:	10800e04 	addi	r2,r2,56
    f9ac:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f9b0:	e0bffb17 	ldw	r2,-20(fp)
    f9b4:	10800a17 	ldw	r2,40(r2)
    f9b8:	10800044 	addi	r2,r2,1
    f9bc:	10c1ffcc 	andi	r3,r2,2047
    f9c0:	e0bffb17 	ldw	r2,-20(fp)
    f9c4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    f9c8:	003fe206 	br	f954 <__alt_data_end+0xff00f954>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    f9cc:	0001883a 	nop
    f9d0:	00000106 	br	f9d8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    f9d4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    f9d8:	e0bff917 	ldw	r2,-28(fp)
    f9dc:	10bfffec 	andhi	r2,r2,65535
    f9e0:	10000f26 	beq	r2,zero,fa20 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f9e4:	e0bffb17 	ldw	r2,-20(fp)
    f9e8:	10c00817 	ldw	r3,32(r2)
    f9ec:	00bfff84 	movi	r2,-2
    f9f0:	1886703a 	and	r3,r3,r2
    f9f4:	e0bffb17 	ldw	r2,-20(fp)
    f9f8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    f9fc:	e0bffc17 	ldw	r2,-16(fp)
    fa00:	10800104 	addi	r2,r2,4
    fa04:	1007883a 	mov	r3,r2
    fa08:	e0bffb17 	ldw	r2,-20(fp)
    fa0c:	10800817 	ldw	r2,32(r2)
    fa10:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    fa14:	e0bffc17 	ldw	r2,-16(fp)
    fa18:	10800104 	addi	r2,r2,4
    fa1c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    fa20:	e0bffd17 	ldw	r2,-12(fp)
    fa24:	1080800c 	andi	r2,r2,512
    fa28:	103fbe26 	beq	r2,zero,f924 <__alt_data_end+0xff00f924>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    fa2c:	e0bffd17 	ldw	r2,-12(fp)
    fa30:	1004d43a 	srli	r2,r2,16
    fa34:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    fa38:	00001406 	br	fa8c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    fa3c:	e0bffc17 	ldw	r2,-16(fp)
    fa40:	e0fffb17 	ldw	r3,-20(fp)
    fa44:	18c00d17 	ldw	r3,52(r3)
    fa48:	e13ffb17 	ldw	r4,-20(fp)
    fa4c:	20c7883a 	add	r3,r4,r3
    fa50:	18c20e04 	addi	r3,r3,2104
    fa54:	18c00003 	ldbu	r3,0(r3)
    fa58:	18c03fcc 	andi	r3,r3,255
    fa5c:	18c0201c 	xori	r3,r3,128
    fa60:	18ffe004 	addi	r3,r3,-128
    fa64:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fa68:	e0bffb17 	ldw	r2,-20(fp)
    fa6c:	10800d17 	ldw	r2,52(r2)
    fa70:	10800044 	addi	r2,r2,1
    fa74:	10c1ffcc 	andi	r3,r2,2047
    fa78:	e0bffb17 	ldw	r2,-20(fp)
    fa7c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    fa80:	e0bffa17 	ldw	r2,-24(fp)
    fa84:	10bfffc4 	addi	r2,r2,-1
    fa88:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    fa8c:	e0bffa17 	ldw	r2,-24(fp)
    fa90:	10000526 	beq	r2,zero,faa8 <altera_avalon_jtag_uart_irq+0x1a8>
    fa94:	e0bffb17 	ldw	r2,-20(fp)
    fa98:	10c00d17 	ldw	r3,52(r2)
    fa9c:	e0bffb17 	ldw	r2,-20(fp)
    faa0:	10800c17 	ldw	r2,48(r2)
    faa4:	18bfe51e 	bne	r3,r2,fa3c <__alt_data_end+0xff00fa3c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    faa8:	e0bffa17 	ldw	r2,-24(fp)
    faac:	103f9d26 	beq	r2,zero,f924 <__alt_data_end+0xff00f924>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    fab0:	e0bffb17 	ldw	r2,-20(fp)
    fab4:	10c00817 	ldw	r3,32(r2)
    fab8:	00bfff44 	movi	r2,-3
    fabc:	1886703a 	and	r3,r3,r2
    fac0:	e0bffb17 	ldw	r2,-20(fp)
    fac4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    fac8:	e0bffb17 	ldw	r2,-20(fp)
    facc:	10800017 	ldw	r2,0(r2)
    fad0:	10800104 	addi	r2,r2,4
    fad4:	1007883a 	mov	r3,r2
    fad8:	e0bffb17 	ldw	r2,-20(fp)
    fadc:	10800817 	ldw	r2,32(r2)
    fae0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    fae4:	e0bffc17 	ldw	r2,-16(fp)
    fae8:	10800104 	addi	r2,r2,4
    faec:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    faf0:	003f8c06 	br	f924 <__alt_data_end+0xff00f924>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    faf4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    faf8:	0001883a 	nop
    fafc:	e037883a 	mov	sp,fp
    fb00:	df000017 	ldw	fp,0(sp)
    fb04:	dec00104 	addi	sp,sp,4
    fb08:	f800283a 	ret

0000fb0c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    fb0c:	defff804 	addi	sp,sp,-32
    fb10:	df000715 	stw	fp,28(sp)
    fb14:	df000704 	addi	fp,sp,28
    fb18:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    fb1c:	e0bffb17 	ldw	r2,-20(fp)
    fb20:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    fb24:	e0bff917 	ldw	r2,-28(fp)
    fb28:	10800017 	ldw	r2,0(r2)
    fb2c:	10800104 	addi	r2,r2,4
    fb30:	10800037 	ldwio	r2,0(r2)
    fb34:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    fb38:	e0bffa17 	ldw	r2,-24(fp)
    fb3c:	1081000c 	andi	r2,r2,1024
    fb40:	10000b26 	beq	r2,zero,fb70 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    fb44:	e0bff917 	ldw	r2,-28(fp)
    fb48:	10800017 	ldw	r2,0(r2)
    fb4c:	10800104 	addi	r2,r2,4
    fb50:	1007883a 	mov	r3,r2
    fb54:	e0bff917 	ldw	r2,-28(fp)
    fb58:	10800817 	ldw	r2,32(r2)
    fb5c:	10810014 	ori	r2,r2,1024
    fb60:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    fb64:	e0bff917 	ldw	r2,-28(fp)
    fb68:	10000915 	stw	zero,36(r2)
    fb6c:	00000a06 	br	fb98 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    fb70:	e0bff917 	ldw	r2,-28(fp)
    fb74:	10c00917 	ldw	r3,36(r2)
    fb78:	00a00034 	movhi	r2,32768
    fb7c:	10bfff04 	addi	r2,r2,-4
    fb80:	10c00536 	bltu	r2,r3,fb98 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    fb84:	e0bff917 	ldw	r2,-28(fp)
    fb88:	10800917 	ldw	r2,36(r2)
    fb8c:	10c00044 	addi	r3,r2,1
    fb90:	e0bff917 	ldw	r2,-28(fp)
    fb94:	10c00915 	stw	r3,36(r2)
    fb98:	d0a6e217 	ldw	r2,-25720(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    fb9c:	e037883a 	mov	sp,fp
    fba0:	df000017 	ldw	fp,0(sp)
    fba4:	dec00104 	addi	sp,sp,4
    fba8:	f800283a 	ret

0000fbac <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    fbac:	defffd04 	addi	sp,sp,-12
    fbb0:	df000215 	stw	fp,8(sp)
    fbb4:	df000204 	addi	fp,sp,8
    fbb8:	e13ffe15 	stw	r4,-8(fp)
    fbbc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    fbc0:	00000506 	br	fbd8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    fbc4:	e0bfff17 	ldw	r2,-4(fp)
    fbc8:	1090000c 	andi	r2,r2,16384
    fbcc:	10000226 	beq	r2,zero,fbd8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    fbd0:	00bffd44 	movi	r2,-11
    fbd4:	00000b06 	br	fc04 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    fbd8:	e0bffe17 	ldw	r2,-8(fp)
    fbdc:	10c00d17 	ldw	r3,52(r2)
    fbe0:	e0bffe17 	ldw	r2,-8(fp)
    fbe4:	10800c17 	ldw	r2,48(r2)
    fbe8:	18800526 	beq	r3,r2,fc00 <altera_avalon_jtag_uart_close+0x54>
    fbec:	e0bffe17 	ldw	r2,-8(fp)
    fbf0:	10c00917 	ldw	r3,36(r2)
    fbf4:	e0bffe17 	ldw	r2,-8(fp)
    fbf8:	10800117 	ldw	r2,4(r2)
    fbfc:	18bff136 	bltu	r3,r2,fbc4 <__alt_data_end+0xff00fbc4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    fc00:	0005883a 	mov	r2,zero
}
    fc04:	e037883a 	mov	sp,fp
    fc08:	df000017 	ldw	fp,0(sp)
    fc0c:	dec00104 	addi	sp,sp,4
    fc10:	f800283a 	ret

0000fc14 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    fc14:	defffa04 	addi	sp,sp,-24
    fc18:	df000515 	stw	fp,20(sp)
    fc1c:	df000504 	addi	fp,sp,20
    fc20:	e13ffd15 	stw	r4,-12(fp)
    fc24:	e17ffe15 	stw	r5,-8(fp)
    fc28:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    fc2c:	00bff9c4 	movi	r2,-25
    fc30:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    fc34:	e0bffe17 	ldw	r2,-8(fp)
    fc38:	10da8060 	cmpeqi	r3,r2,27137
    fc3c:	1800031e 	bne	r3,zero,fc4c <altera_avalon_jtag_uart_ioctl+0x38>
    fc40:	109a80a0 	cmpeqi	r2,r2,27138
    fc44:	1000181e 	bne	r2,zero,fca8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    fc48:	00002906 	br	fcf0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    fc4c:	e0bffd17 	ldw	r2,-12(fp)
    fc50:	10c00117 	ldw	r3,4(r2)
    fc54:	00a00034 	movhi	r2,32768
    fc58:	10bfffc4 	addi	r2,r2,-1
    fc5c:	18802126 	beq	r3,r2,fce4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    fc60:	e0bfff17 	ldw	r2,-4(fp)
    fc64:	10800017 	ldw	r2,0(r2)
    fc68:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    fc6c:	e0bffc17 	ldw	r2,-16(fp)
    fc70:	10800090 	cmplti	r2,r2,2
    fc74:	1000061e 	bne	r2,zero,fc90 <altera_avalon_jtag_uart_ioctl+0x7c>
    fc78:	e0fffc17 	ldw	r3,-16(fp)
    fc7c:	00a00034 	movhi	r2,32768
    fc80:	10bfffc4 	addi	r2,r2,-1
    fc84:	18800226 	beq	r3,r2,fc90 <altera_avalon_jtag_uart_ioctl+0x7c>
    fc88:	e0bffc17 	ldw	r2,-16(fp)
    fc8c:	00000206 	br	fc98 <altera_avalon_jtag_uart_ioctl+0x84>
    fc90:	00a00034 	movhi	r2,32768
    fc94:	10bfff84 	addi	r2,r2,-2
    fc98:	e0fffd17 	ldw	r3,-12(fp)
    fc9c:	18800115 	stw	r2,4(r3)
      rc = 0;
    fca0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    fca4:	00000f06 	br	fce4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    fca8:	e0bffd17 	ldw	r2,-12(fp)
    fcac:	10c00117 	ldw	r3,4(r2)
    fcb0:	00a00034 	movhi	r2,32768
    fcb4:	10bfffc4 	addi	r2,r2,-1
    fcb8:	18800c26 	beq	r3,r2,fcec <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    fcbc:	e0bffd17 	ldw	r2,-12(fp)
    fcc0:	10c00917 	ldw	r3,36(r2)
    fcc4:	e0bffd17 	ldw	r2,-12(fp)
    fcc8:	10800117 	ldw	r2,4(r2)
    fccc:	1885803a 	cmpltu	r2,r3,r2
    fcd0:	10c03fcc 	andi	r3,r2,255
    fcd4:	e0bfff17 	ldw	r2,-4(fp)
    fcd8:	10c00015 	stw	r3,0(r2)
      rc = 0;
    fcdc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    fce0:	00000206 	br	fcec <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    fce4:	0001883a 	nop
    fce8:	00000106 	br	fcf0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    fcec:	0001883a 	nop

  default:
    break;
  }

  return rc;
    fcf0:	e0bffb17 	ldw	r2,-20(fp)
}
    fcf4:	e037883a 	mov	sp,fp
    fcf8:	df000017 	ldw	fp,0(sp)
    fcfc:	dec00104 	addi	sp,sp,4
    fd00:	f800283a 	ret

0000fd04 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    fd04:	defff304 	addi	sp,sp,-52
    fd08:	dfc00c15 	stw	ra,48(sp)
    fd0c:	df000b15 	stw	fp,44(sp)
    fd10:	df000b04 	addi	fp,sp,44
    fd14:	e13ffc15 	stw	r4,-16(fp)
    fd18:	e17ffd15 	stw	r5,-12(fp)
    fd1c:	e1bffe15 	stw	r6,-8(fp)
    fd20:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    fd24:	e0bffd17 	ldw	r2,-12(fp)
    fd28:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    fd2c:	00004706 	br	fe4c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    fd30:	e0bffc17 	ldw	r2,-16(fp)
    fd34:	10800a17 	ldw	r2,40(r2)
    fd38:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    fd3c:	e0bffc17 	ldw	r2,-16(fp)
    fd40:	10800b17 	ldw	r2,44(r2)
    fd44:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    fd48:	e0fff717 	ldw	r3,-36(fp)
    fd4c:	e0bff817 	ldw	r2,-32(fp)
    fd50:	18800536 	bltu	r3,r2,fd68 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    fd54:	e0fff717 	ldw	r3,-36(fp)
    fd58:	e0bff817 	ldw	r2,-32(fp)
    fd5c:	1885c83a 	sub	r2,r3,r2
    fd60:	e0bff615 	stw	r2,-40(fp)
    fd64:	00000406 	br	fd78 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    fd68:	00c20004 	movi	r3,2048
    fd6c:	e0bff817 	ldw	r2,-32(fp)
    fd70:	1885c83a 	sub	r2,r3,r2
    fd74:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    fd78:	e0bff617 	ldw	r2,-40(fp)
    fd7c:	10001e26 	beq	r2,zero,fdf8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    fd80:	e0fffe17 	ldw	r3,-8(fp)
    fd84:	e0bff617 	ldw	r2,-40(fp)
    fd88:	1880022e 	bgeu	r3,r2,fd94 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    fd8c:	e0bffe17 	ldw	r2,-8(fp)
    fd90:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    fd94:	e0bffc17 	ldw	r2,-16(fp)
    fd98:	10c00e04 	addi	r3,r2,56
    fd9c:	e0bff817 	ldw	r2,-32(fp)
    fda0:	1885883a 	add	r2,r3,r2
    fda4:	e1bff617 	ldw	r6,-40(fp)
    fda8:	100b883a 	mov	r5,r2
    fdac:	e13ff517 	ldw	r4,-44(fp)
    fdb0:	0007e800 	call	7e80 <memcpy>
      ptr   += n;
    fdb4:	e0fff517 	ldw	r3,-44(fp)
    fdb8:	e0bff617 	ldw	r2,-40(fp)
    fdbc:	1885883a 	add	r2,r3,r2
    fdc0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    fdc4:	e0fffe17 	ldw	r3,-8(fp)
    fdc8:	e0bff617 	ldw	r2,-40(fp)
    fdcc:	1885c83a 	sub	r2,r3,r2
    fdd0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fdd4:	e0fff817 	ldw	r3,-32(fp)
    fdd8:	e0bff617 	ldw	r2,-40(fp)
    fddc:	1885883a 	add	r2,r3,r2
    fde0:	10c1ffcc 	andi	r3,r2,2047
    fde4:	e0bffc17 	ldw	r2,-16(fp)
    fde8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    fdec:	e0bffe17 	ldw	r2,-8(fp)
    fdf0:	00bfcf16 	blt	zero,r2,fd30 <__alt_data_end+0xff00fd30>
    fdf4:	00000106 	br	fdfc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    fdf8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    fdfc:	e0fff517 	ldw	r3,-44(fp)
    fe00:	e0bffd17 	ldw	r2,-12(fp)
    fe04:	1880141e 	bne	r3,r2,fe58 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    fe08:	e0bfff17 	ldw	r2,-4(fp)
    fe0c:	1090000c 	andi	r2,r2,16384
    fe10:	1000131e 	bne	r2,zero,fe60 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    fe14:	0001883a 	nop
    fe18:	e0bffc17 	ldw	r2,-16(fp)
    fe1c:	10c00a17 	ldw	r3,40(r2)
    fe20:	e0bff717 	ldw	r2,-36(fp)
    fe24:	1880051e 	bne	r3,r2,fe3c <altera_avalon_jtag_uart_read+0x138>
    fe28:	e0bffc17 	ldw	r2,-16(fp)
    fe2c:	10c00917 	ldw	r3,36(r2)
    fe30:	e0bffc17 	ldw	r2,-16(fp)
    fe34:	10800117 	ldw	r2,4(r2)
    fe38:	18bff736 	bltu	r3,r2,fe18 <__alt_data_end+0xff00fe18>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    fe3c:	e0bffc17 	ldw	r2,-16(fp)
    fe40:	10c00a17 	ldw	r3,40(r2)
    fe44:	e0bff717 	ldw	r2,-36(fp)
    fe48:	18800726 	beq	r3,r2,fe68 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    fe4c:	e0bffe17 	ldw	r2,-8(fp)
    fe50:	00bfb716 	blt	zero,r2,fd30 <__alt_data_end+0xff00fd30>
    fe54:	00000506 	br	fe6c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    fe58:	0001883a 	nop
    fe5c:	00000306 	br	fe6c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    fe60:	0001883a 	nop
    fe64:	00000106 	br	fe6c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    fe68:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    fe6c:	e0fff517 	ldw	r3,-44(fp)
    fe70:	e0bffd17 	ldw	r2,-12(fp)
    fe74:	18801826 	beq	r3,r2,fed8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fe78:	0005303a 	rdctl	r2,status
    fe7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fe80:	e0fffb17 	ldw	r3,-20(fp)
    fe84:	00bfff84 	movi	r2,-2
    fe88:	1884703a 	and	r2,r3,r2
    fe8c:	1001703a 	wrctl	status,r2
  
  return context;
    fe90:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    fe94:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    fe98:	e0bffc17 	ldw	r2,-16(fp)
    fe9c:	10800817 	ldw	r2,32(r2)
    fea0:	10c00054 	ori	r3,r2,1
    fea4:	e0bffc17 	ldw	r2,-16(fp)
    fea8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    feac:	e0bffc17 	ldw	r2,-16(fp)
    feb0:	10800017 	ldw	r2,0(r2)
    feb4:	10800104 	addi	r2,r2,4
    feb8:	1007883a 	mov	r3,r2
    febc:	e0bffc17 	ldw	r2,-16(fp)
    fec0:	10800817 	ldw	r2,32(r2)
    fec4:	18800035 	stwio	r2,0(r3)
    fec8:	e0bffa17 	ldw	r2,-24(fp)
    fecc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fed0:	e0bff917 	ldw	r2,-28(fp)
    fed4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    fed8:	e0fff517 	ldw	r3,-44(fp)
    fedc:	e0bffd17 	ldw	r2,-12(fp)
    fee0:	18800426 	beq	r3,r2,fef4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    fee4:	e0fff517 	ldw	r3,-44(fp)
    fee8:	e0bffd17 	ldw	r2,-12(fp)
    feec:	1885c83a 	sub	r2,r3,r2
    fef0:	00000606 	br	ff0c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    fef4:	e0bfff17 	ldw	r2,-4(fp)
    fef8:	1090000c 	andi	r2,r2,16384
    fefc:	10000226 	beq	r2,zero,ff08 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    ff00:	00bffd44 	movi	r2,-11
    ff04:	00000106 	br	ff0c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    ff08:	00bffec4 	movi	r2,-5
}
    ff0c:	e037883a 	mov	sp,fp
    ff10:	dfc00117 	ldw	ra,4(sp)
    ff14:	df000017 	ldw	fp,0(sp)
    ff18:	dec00204 	addi	sp,sp,8
    ff1c:	f800283a 	ret

0000ff20 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    ff20:	defff304 	addi	sp,sp,-52
    ff24:	dfc00c15 	stw	ra,48(sp)
    ff28:	df000b15 	stw	fp,44(sp)
    ff2c:	df000b04 	addi	fp,sp,44
    ff30:	e13ffc15 	stw	r4,-16(fp)
    ff34:	e17ffd15 	stw	r5,-12(fp)
    ff38:	e1bffe15 	stw	r6,-8(fp)
    ff3c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    ff40:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    ff44:	e0bffd17 	ldw	r2,-12(fp)
    ff48:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    ff4c:	00003706 	br	1002c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    ff50:	e0bffc17 	ldw	r2,-16(fp)
    ff54:	10800c17 	ldw	r2,48(r2)
    ff58:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    ff5c:	e0bffc17 	ldw	r2,-16(fp)
    ff60:	10800d17 	ldw	r2,52(r2)
    ff64:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    ff68:	e0fff917 	ldw	r3,-28(fp)
    ff6c:	e0bff517 	ldw	r2,-44(fp)
    ff70:	1880062e 	bgeu	r3,r2,ff8c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    ff74:	e0fff517 	ldw	r3,-44(fp)
    ff78:	e0bff917 	ldw	r2,-28(fp)
    ff7c:	1885c83a 	sub	r2,r3,r2
    ff80:	10bfffc4 	addi	r2,r2,-1
    ff84:	e0bff615 	stw	r2,-40(fp)
    ff88:	00000b06 	br	ffb8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    ff8c:	e0bff517 	ldw	r2,-44(fp)
    ff90:	10000526 	beq	r2,zero,ffa8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    ff94:	00c20004 	movi	r3,2048
    ff98:	e0bff917 	ldw	r2,-28(fp)
    ff9c:	1885c83a 	sub	r2,r3,r2
    ffa0:	e0bff615 	stw	r2,-40(fp)
    ffa4:	00000406 	br	ffb8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    ffa8:	00c1ffc4 	movi	r3,2047
    ffac:	e0bff917 	ldw	r2,-28(fp)
    ffb0:	1885c83a 	sub	r2,r3,r2
    ffb4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    ffb8:	e0bff617 	ldw	r2,-40(fp)
    ffbc:	10001e26 	beq	r2,zero,10038 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    ffc0:	e0fffe17 	ldw	r3,-8(fp)
    ffc4:	e0bff617 	ldw	r2,-40(fp)
    ffc8:	1880022e 	bgeu	r3,r2,ffd4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    ffcc:	e0bffe17 	ldw	r2,-8(fp)
    ffd0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    ffd4:	e0bffc17 	ldw	r2,-16(fp)
    ffd8:	10c20e04 	addi	r3,r2,2104
    ffdc:	e0bff917 	ldw	r2,-28(fp)
    ffe0:	1885883a 	add	r2,r3,r2
    ffe4:	e1bff617 	ldw	r6,-40(fp)
    ffe8:	e17ffd17 	ldw	r5,-12(fp)
    ffec:	1009883a 	mov	r4,r2
    fff0:	0007e800 	call	7e80 <memcpy>
      ptr   += n;
    fff4:	e0fffd17 	ldw	r3,-12(fp)
    fff8:	e0bff617 	ldw	r2,-40(fp)
    fffc:	1885883a 	add	r2,r3,r2
   10000:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   10004:	e0fffe17 	ldw	r3,-8(fp)
   10008:	e0bff617 	ldw	r2,-40(fp)
   1000c:	1885c83a 	sub	r2,r3,r2
   10010:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10014:	e0fff917 	ldw	r3,-28(fp)
   10018:	e0bff617 	ldw	r2,-40(fp)
   1001c:	1885883a 	add	r2,r3,r2
   10020:	10c1ffcc 	andi	r3,r2,2047
   10024:	e0bffc17 	ldw	r2,-16(fp)
   10028:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1002c:	e0bffe17 	ldw	r2,-8(fp)
   10030:	00bfc716 	blt	zero,r2,ff50 <__alt_data_end+0xff00ff50>
   10034:	00000106 	br	1003c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   10038:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1003c:	0005303a 	rdctl	r2,status
   10040:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10044:	e0fffb17 	ldw	r3,-20(fp)
   10048:	00bfff84 	movi	r2,-2
   1004c:	1884703a 	and	r2,r3,r2
   10050:	1001703a 	wrctl	status,r2
  
  return context;
   10054:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   10058:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1005c:	e0bffc17 	ldw	r2,-16(fp)
   10060:	10800817 	ldw	r2,32(r2)
   10064:	10c00094 	ori	r3,r2,2
   10068:	e0bffc17 	ldw	r2,-16(fp)
   1006c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10070:	e0bffc17 	ldw	r2,-16(fp)
   10074:	10800017 	ldw	r2,0(r2)
   10078:	10800104 	addi	r2,r2,4
   1007c:	1007883a 	mov	r3,r2
   10080:	e0bffc17 	ldw	r2,-16(fp)
   10084:	10800817 	ldw	r2,32(r2)
   10088:	18800035 	stwio	r2,0(r3)
   1008c:	e0bffa17 	ldw	r2,-24(fp)
   10090:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10094:	e0bff817 	ldw	r2,-32(fp)
   10098:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1009c:	e0bffe17 	ldw	r2,-8(fp)
   100a0:	0080100e 	bge	zero,r2,100e4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   100a4:	e0bfff17 	ldw	r2,-4(fp)
   100a8:	1090000c 	andi	r2,r2,16384
   100ac:	1000101e 	bne	r2,zero,100f0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   100b0:	0001883a 	nop
   100b4:	e0bffc17 	ldw	r2,-16(fp)
   100b8:	10c00d17 	ldw	r3,52(r2)
   100bc:	e0bff517 	ldw	r2,-44(fp)
   100c0:	1880051e 	bne	r3,r2,100d8 <altera_avalon_jtag_uart_write+0x1b8>
   100c4:	e0bffc17 	ldw	r2,-16(fp)
   100c8:	10c00917 	ldw	r3,36(r2)
   100cc:	e0bffc17 	ldw	r2,-16(fp)
   100d0:	10800117 	ldw	r2,4(r2)
   100d4:	18bff736 	bltu	r3,r2,100b4 <__alt_data_end+0xff0100b4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   100d8:	e0bffc17 	ldw	r2,-16(fp)
   100dc:	10800917 	ldw	r2,36(r2)
   100e0:	1000051e 	bne	r2,zero,100f8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   100e4:	e0bffe17 	ldw	r2,-8(fp)
   100e8:	00bfd016 	blt	zero,r2,1002c <__alt_data_end+0xff01002c>
   100ec:	00000306 	br	100fc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   100f0:	0001883a 	nop
   100f4:	00000106 	br	100fc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   100f8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   100fc:	e0fffd17 	ldw	r3,-12(fp)
   10100:	e0bff717 	ldw	r2,-36(fp)
   10104:	18800426 	beq	r3,r2,10118 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   10108:	e0fffd17 	ldw	r3,-12(fp)
   1010c:	e0bff717 	ldw	r2,-36(fp)
   10110:	1885c83a 	sub	r2,r3,r2
   10114:	00000606 	br	10130 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   10118:	e0bfff17 	ldw	r2,-4(fp)
   1011c:	1090000c 	andi	r2,r2,16384
   10120:	10000226 	beq	r2,zero,1012c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   10124:	00bffd44 	movi	r2,-11
   10128:	00000106 	br	10130 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1012c:	00bffec4 	movi	r2,-5
}
   10130:	e037883a 	mov	sp,fp
   10134:	dfc00117 	ldw	ra,4(sp)
   10138:	df000017 	ldw	fp,0(sp)
   1013c:	dec00204 	addi	sp,sp,8
   10140:	f800283a 	ret

00010144 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   10144:	defffa04 	addi	sp,sp,-24
   10148:	dfc00515 	stw	ra,20(sp)
   1014c:	df000415 	stw	fp,16(sp)
   10150:	df000404 	addi	fp,sp,16
   10154:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   10158:	0007883a 	mov	r3,zero
   1015c:	e0bfff17 	ldw	r2,-4(fp)
   10160:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   10164:	e0bfff17 	ldw	r2,-4(fp)
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10170:	0005303a 	rdctl	r2,status
   10174:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10178:	e0fffd17 	ldw	r3,-12(fp)
   1017c:	00bfff84 	movi	r2,-2
   10180:	1884703a 	and	r2,r3,r2
   10184:	1001703a 	wrctl	status,r2
  
  return context;
   10188:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1018c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   10190:	0010e980 	call	10e98 <alt_tick>
   10194:	e0bffc17 	ldw	r2,-16(fp)
   10198:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1019c:	e0bffe17 	ldw	r2,-8(fp)
   101a0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   101a4:	0001883a 	nop
   101a8:	e037883a 	mov	sp,fp
   101ac:	dfc00117 	ldw	ra,4(sp)
   101b0:	df000017 	ldw	fp,0(sp)
   101b4:	dec00204 	addi	sp,sp,8
   101b8:	f800283a 	ret

000101bc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   101bc:	defff804 	addi	sp,sp,-32
   101c0:	dfc00715 	stw	ra,28(sp)
   101c4:	df000615 	stw	fp,24(sp)
   101c8:	df000604 	addi	fp,sp,24
   101cc:	e13ffc15 	stw	r4,-16(fp)
   101d0:	e17ffd15 	stw	r5,-12(fp)
   101d4:	e1bffe15 	stw	r6,-8(fp)
   101d8:	e1ffff15 	stw	r7,-4(fp)
   101dc:	e0bfff17 	ldw	r2,-4(fp)
   101e0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   101e4:	d0a6e217 	ldw	r2,-25720(gp)
   101e8:	1000021e 	bne	r2,zero,101f4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   101ec:	e0bffb17 	ldw	r2,-20(fp)
   101f0:	d0a6e215 	stw	r2,-25720(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   101f4:	e0bffc17 	ldw	r2,-16(fp)
   101f8:	10800104 	addi	r2,r2,4
   101fc:	00c001c4 	movi	r3,7
   10200:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   10204:	d8000015 	stw	zero,0(sp)
   10208:	e1fffc17 	ldw	r7,-16(fp)
   1020c:	01800074 	movhi	r6,1
   10210:	31805104 	addi	r6,r6,324
   10214:	e17ffe17 	ldw	r5,-8(fp)
   10218:	e13ffd17 	ldw	r4,-12(fp)
   1021c:	00107c80 	call	107c8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   10220:	0001883a 	nop
   10224:	e037883a 	mov	sp,fp
   10228:	dfc00117 	ldw	ra,4(sp)
   1022c:	df000017 	ldw	fp,0(sp)
   10230:	dec00204 	addi	sp,sp,8
   10234:	f800283a 	ret

00010238 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   10238:	defffe04 	addi	sp,sp,-8
   1023c:	df000115 	stw	fp,4(sp)
   10240:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
   10244:	d0a6df17 	ldw	r2,-25732(gp)
   10248:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
   1024c:	d0a6e017 	ldw	r2,-25728(gp)
   10250:	1000021e 	bne	r2,zero,1025c <alt_timestamp_start+0x24>
  {
    return -1;
   10254:	00bfffc4 	movi	r2,-1
   10258:	00001106 	br	102a0 <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   1025c:	e0bfff17 	ldw	r2,-4(fp)
   10260:	10800104 	addi	r2,r2,4
   10264:	00c00204 	movi	r3,8
   10268:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   1026c:	e0bfff17 	ldw	r2,-4(fp)
   10270:	10800204 	addi	r2,r2,8
   10274:	00ffffd4 	movui	r3,65535
   10278:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   1027c:	e0bfff17 	ldw	r2,-4(fp)
   10280:	10800304 	addi	r2,r2,12
   10284:	00ffffd4 	movui	r3,65535
   10288:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   1028c:	e0bfff17 	ldw	r2,-4(fp)
   10290:	10800104 	addi	r2,r2,4
   10294:	00c00104 	movi	r3,4
   10298:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
   1029c:	0005883a 	mov	r2,zero
}
   102a0:	e037883a 	mov	sp,fp
   102a4:	df000017 	ldw	fp,0(sp)
   102a8:	dec00104 	addi	sp,sp,4
   102ac:	f800283a 	ret

000102b0 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   102b0:	defffc04 	addi	sp,sp,-16
   102b4:	df000315 	stw	fp,12(sp)
   102b8:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
   102bc:	d0a6df17 	ldw	r2,-25732(gp)
   102c0:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
   102c4:	d0a6e017 	ldw	r2,-25728(gp)
   102c8:	1000021e 	bne	r2,zero,102d4 <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
   102cc:	00bfffc4 	movi	r2,-1
   102d0:	00001306 	br	10320 <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   102d4:	e0bffd17 	ldw	r2,-12(fp)
   102d8:	10800404 	addi	r2,r2,16
   102dc:	0007883a 	mov	r3,zero
   102e0:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   102e4:	e0bffd17 	ldw	r2,-12(fp)
   102e8:	10800404 	addi	r2,r2,16
   102ec:	10800037 	ldwio	r2,0(r2)
   102f0:	10bfffcc 	andi	r2,r2,65535
   102f4:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   102f8:	e0bffd17 	ldw	r2,-12(fp)
   102fc:	10800504 	addi	r2,r2,20
   10300:	10800037 	ldwio	r2,0(r2)
   10304:	10bfffcc 	andi	r2,r2,65535
   10308:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   1030c:	e0bfff17 	ldw	r2,-4(fp)
   10310:	1006943a 	slli	r3,r2,16
   10314:	e0bffe17 	ldw	r2,-8(fp)
   10318:	1884b03a 	or	r2,r3,r2
   1031c:	0084303a 	nor	r2,zero,r2
#endif
  }
}
   10320:	e037883a 	mov	sp,fp
   10324:	df000017 	ldw	fp,0(sp)
   10328:	dec00104 	addi	sp,sp,4
   1032c:	f800283a 	ret

00010330 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   10330:	deffff04 	addi	sp,sp,-4
   10334:	df000015 	stw	fp,0(sp)
   10338:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   1033c:	d0a6e017 	ldw	r2,-25728(gp)
}
   10340:	e037883a 	mov	sp,fp
   10344:	df000017 	ldw	fp,0(sp)
   10348:	dec00104 	addi	sp,sp,4
   1034c:	f800283a 	ret

00010350 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   10350:	defff504 	addi	sp,sp,-44
   10354:	df000a15 	stw	fp,40(sp)
   10358:	df000a04 	addi	fp,sp,40
   1035c:	e13ffc15 	stw	r4,-16(fp)
   10360:	e17ffd15 	stw	r5,-12(fp)
   10364:	e1bffe15 	stw	r6,-8(fp)
   10368:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1036c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10370:	d0a6e217 	ldw	r2,-25720(gp)
  
  if (alt_ticks_per_second ())
   10374:	10003c26 	beq	r2,zero,10468 <alt_alarm_start+0x118>
  {
    if (alarm)
   10378:	e0bffc17 	ldw	r2,-16(fp)
   1037c:	10003826 	beq	r2,zero,10460 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   10380:	e0bffc17 	ldw	r2,-16(fp)
   10384:	e0fffe17 	ldw	r3,-8(fp)
   10388:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1038c:	e0bffc17 	ldw	r2,-16(fp)
   10390:	e0ffff17 	ldw	r3,-4(fp)
   10394:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10398:	0005303a 	rdctl	r2,status
   1039c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   103a0:	e0fff917 	ldw	r3,-28(fp)
   103a4:	00bfff84 	movi	r2,-2
   103a8:	1884703a 	and	r2,r3,r2
   103ac:	1001703a 	wrctl	status,r2
  
  return context;
   103b0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   103b4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   103b8:	d0a6e317 	ldw	r2,-25716(gp)
      
      current_nticks = alt_nticks();
   103bc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   103c0:	e0fffd17 	ldw	r3,-12(fp)
   103c4:	e0bff617 	ldw	r2,-40(fp)
   103c8:	1885883a 	add	r2,r3,r2
   103cc:	10c00044 	addi	r3,r2,1
   103d0:	e0bffc17 	ldw	r2,-16(fp)
   103d4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   103d8:	e0bffc17 	ldw	r2,-16(fp)
   103dc:	10c00217 	ldw	r3,8(r2)
   103e0:	e0bff617 	ldw	r2,-40(fp)
   103e4:	1880042e 	bgeu	r3,r2,103f8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   103e8:	e0bffc17 	ldw	r2,-16(fp)
   103ec:	00c00044 	movi	r3,1
   103f0:	10c00405 	stb	r3,16(r2)
   103f4:	00000206 	br	10400 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   103f8:	e0bffc17 	ldw	r2,-16(fp)
   103fc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   10400:	e0bffc17 	ldw	r2,-16(fp)
   10404:	d0e00e04 	addi	r3,gp,-32712
   10408:	e0fffa15 	stw	r3,-24(fp)
   1040c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10410:	e0bffb17 	ldw	r2,-20(fp)
   10414:	e0fffa17 	ldw	r3,-24(fp)
   10418:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1041c:	e0bffa17 	ldw	r2,-24(fp)
   10420:	10c00017 	ldw	r3,0(r2)
   10424:	e0bffb17 	ldw	r2,-20(fp)
   10428:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1042c:	e0bffa17 	ldw	r2,-24(fp)
   10430:	10800017 	ldw	r2,0(r2)
   10434:	e0fffb17 	ldw	r3,-20(fp)
   10438:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1043c:	e0bffa17 	ldw	r2,-24(fp)
   10440:	e0fffb17 	ldw	r3,-20(fp)
   10444:	10c00015 	stw	r3,0(r2)
   10448:	e0bff817 	ldw	r2,-32(fp)
   1044c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10450:	e0bff717 	ldw	r2,-36(fp)
   10454:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   10458:	0005883a 	mov	r2,zero
   1045c:	00000306 	br	1046c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   10460:	00bffa84 	movi	r2,-22
   10464:	00000106 	br	1046c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   10468:	00bfde84 	movi	r2,-134
  }
}
   1046c:	e037883a 	mov	sp,fp
   10470:	df000017 	ldw	fp,0(sp)
   10474:	dec00104 	addi	sp,sp,4
   10478:	f800283a 	ret

0001047c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   1047c:	defffa04 	addi	sp,sp,-24
   10480:	dfc00515 	stw	ra,20(sp)
   10484:	df000415 	stw	fp,16(sp)
   10488:	df000404 	addi	fp,sp,16
   1048c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   10490:	008000c4 	movi	r2,3
   10494:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   10498:	e0fffd17 	ldw	r3,-12(fp)
   1049c:	008003f4 	movhi	r2,15
   104a0:	10909004 	addi	r2,r2,16960
   104a4:	1885383a 	mul	r2,r3,r2
   104a8:	100b883a 	mov	r5,r2
   104ac:	0100bef4 	movhi	r4,763
   104b0:	213c2004 	addi	r4,r4,-3968
   104b4:	000c55c0 	call	c55c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   104b8:	100b883a 	mov	r5,r2
   104bc:	01200034 	movhi	r4,32768
   104c0:	213fffc4 	addi	r4,r4,-1
   104c4:	000c55c0 	call	c55c <__udivsi3>
   104c8:	100b883a 	mov	r5,r2
   104cc:	e13fff17 	ldw	r4,-4(fp)
   104d0:	000c55c0 	call	c55c <__udivsi3>
   104d4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   104d8:	e0bffe17 	ldw	r2,-8(fp)
   104dc:	10002a26 	beq	r2,zero,10588 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   104e0:	e03ffc15 	stw	zero,-16(fp)
   104e4:	00001706 	br	10544 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   104e8:	00a00034 	movhi	r2,32768
   104ec:	10bfffc4 	addi	r2,r2,-1
   104f0:	10bfffc4 	addi	r2,r2,-1
   104f4:	103ffe1e 	bne	r2,zero,104f0 <__alt_data_end+0xff0104f0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   104f8:	e0fffd17 	ldw	r3,-12(fp)
   104fc:	008003f4 	movhi	r2,15
   10500:	10909004 	addi	r2,r2,16960
   10504:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10508:	100b883a 	mov	r5,r2
   1050c:	0100bef4 	movhi	r4,763
   10510:	213c2004 	addi	r4,r4,-3968
   10514:	000c55c0 	call	c55c <__udivsi3>
   10518:	100b883a 	mov	r5,r2
   1051c:	01200034 	movhi	r4,32768
   10520:	213fffc4 	addi	r4,r4,-1
   10524:	000c55c0 	call	c55c <__udivsi3>
   10528:	1007883a 	mov	r3,r2
   1052c:	e0bfff17 	ldw	r2,-4(fp)
   10530:	10c5c83a 	sub	r2,r2,r3
   10534:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   10538:	e0bffc17 	ldw	r2,-16(fp)
   1053c:	10800044 	addi	r2,r2,1
   10540:	e0bffc15 	stw	r2,-16(fp)
   10544:	e0fffc17 	ldw	r3,-16(fp)
   10548:	e0bffe17 	ldw	r2,-8(fp)
   1054c:	18bfe616 	blt	r3,r2,104e8 <__alt_data_end+0xff0104e8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10550:	e0fffd17 	ldw	r3,-12(fp)
   10554:	008003f4 	movhi	r2,15
   10558:	10909004 	addi	r2,r2,16960
   1055c:	1885383a 	mul	r2,r3,r2
   10560:	100b883a 	mov	r5,r2
   10564:	0100bef4 	movhi	r4,763
   10568:	213c2004 	addi	r4,r4,-3968
   1056c:	000c55c0 	call	c55c <__udivsi3>
   10570:	1007883a 	mov	r3,r2
   10574:	e0bfff17 	ldw	r2,-4(fp)
   10578:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1057c:	10bfffc4 	addi	r2,r2,-1
   10580:	103ffe1e 	bne	r2,zero,1057c <__alt_data_end+0xff01057c>
   10584:	00000d06 	br	105bc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10588:	e0fffd17 	ldw	r3,-12(fp)
   1058c:	008003f4 	movhi	r2,15
   10590:	10909004 	addi	r2,r2,16960
   10594:	1885383a 	mul	r2,r3,r2
   10598:	100b883a 	mov	r5,r2
   1059c:	0100bef4 	movhi	r4,763
   105a0:	213c2004 	addi	r4,r4,-3968
   105a4:	000c55c0 	call	c55c <__udivsi3>
   105a8:	1007883a 	mov	r3,r2
   105ac:	e0bfff17 	ldw	r2,-4(fp)
   105b0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   105b4:	10bfffc4 	addi	r2,r2,-1
   105b8:	00bffe16 	blt	zero,r2,105b4 <__alt_data_end+0xff0105b4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   105bc:	0005883a 	mov	r2,zero
}
   105c0:	e037883a 	mov	sp,fp
   105c4:	dfc00117 	ldw	ra,4(sp)
   105c8:	df000017 	ldw	fp,0(sp)
   105cc:	dec00204 	addi	sp,sp,8
   105d0:	f800283a 	ret

000105d4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   105d4:	deffff04 	addi	sp,sp,-4
   105d8:	df000015 	stw	fp,0(sp)
   105dc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   105e0:	0001883a 	nop
   105e4:	e037883a 	mov	sp,fp
   105e8:	df000017 	ldw	fp,0(sp)
   105ec:	dec00104 	addi	sp,sp,4
   105f0:	f800283a 	ret

000105f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   105f4:	defffe04 	addi	sp,sp,-8
   105f8:	dfc00115 	stw	ra,4(sp)
   105fc:	df000015 	stw	fp,0(sp)
   10600:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10604:	d0a00b17 	ldw	r2,-32724(gp)
   10608:	10000326 	beq	r2,zero,10618 <alt_get_errno+0x24>
   1060c:	d0a00b17 	ldw	r2,-32724(gp)
   10610:	103ee83a 	callr	r2
   10614:	00000106 	br	1061c <alt_get_errno+0x28>
   10618:	d0a6d804 	addi	r2,gp,-25760
}
   1061c:	e037883a 	mov	sp,fp
   10620:	dfc00117 	ldw	ra,4(sp)
   10624:	df000017 	ldw	fp,0(sp)
   10628:	dec00204 	addi	sp,sp,8
   1062c:	f800283a 	ret

00010630 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10630:	defffa04 	addi	sp,sp,-24
   10634:	dfc00515 	stw	ra,20(sp)
   10638:	df000415 	stw	fp,16(sp)
   1063c:	df000404 	addi	fp,sp,16
   10640:	e13ffe15 	stw	r4,-8(fp)
   10644:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10648:	e0bffe17 	ldw	r2,-8(fp)
   1064c:	10000326 	beq	r2,zero,1065c <alt_dev_llist_insert+0x2c>
   10650:	e0bffe17 	ldw	r2,-8(fp)
   10654:	10800217 	ldw	r2,8(r2)
   10658:	1000061e 	bne	r2,zero,10674 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1065c:	00105f40 	call	105f4 <alt_get_errno>
   10660:	1007883a 	mov	r3,r2
   10664:	00800584 	movi	r2,22
   10668:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1066c:	00bffa84 	movi	r2,-22
   10670:	00001306 	br	106c0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   10674:	e0bffe17 	ldw	r2,-8(fp)
   10678:	e0ffff17 	ldw	r3,-4(fp)
   1067c:	e0fffc15 	stw	r3,-16(fp)
   10680:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10684:	e0bffd17 	ldw	r2,-12(fp)
   10688:	e0fffc17 	ldw	r3,-16(fp)
   1068c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10690:	e0bffc17 	ldw	r2,-16(fp)
   10694:	10c00017 	ldw	r3,0(r2)
   10698:	e0bffd17 	ldw	r2,-12(fp)
   1069c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   106a0:	e0bffc17 	ldw	r2,-16(fp)
   106a4:	10800017 	ldw	r2,0(r2)
   106a8:	e0fffd17 	ldw	r3,-12(fp)
   106ac:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   106b0:	e0bffc17 	ldw	r2,-16(fp)
   106b4:	e0fffd17 	ldw	r3,-12(fp)
   106b8:	10c00015 	stw	r3,0(r2)

  return 0;  
   106bc:	0005883a 	mov	r2,zero
}
   106c0:	e037883a 	mov	sp,fp
   106c4:	dfc00117 	ldw	ra,4(sp)
   106c8:	df000017 	ldw	fp,0(sp)
   106cc:	dec00204 	addi	sp,sp,8
   106d0:	f800283a 	ret

000106d4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   106d4:	defffd04 	addi	sp,sp,-12
   106d8:	dfc00215 	stw	ra,8(sp)
   106dc:	df000115 	stw	fp,4(sp)
   106e0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   106e4:	00800074 	movhi	r2,1
   106e8:	1085af04 	addi	r2,r2,5820
   106ec:	e0bfff15 	stw	r2,-4(fp)
   106f0:	00000606 	br	1070c <_do_ctors+0x38>
        (*ctor) (); 
   106f4:	e0bfff17 	ldw	r2,-4(fp)
   106f8:	10800017 	ldw	r2,0(r2)
   106fc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10700:	e0bfff17 	ldw	r2,-4(fp)
   10704:	10bfff04 	addi	r2,r2,-4
   10708:	e0bfff15 	stw	r2,-4(fp)
   1070c:	e0ffff17 	ldw	r3,-4(fp)
   10710:	00800074 	movhi	r2,1
   10714:	1085b004 	addi	r2,r2,5824
   10718:	18bff62e 	bgeu	r3,r2,106f4 <__alt_data_end+0xff0106f4>
        (*ctor) (); 
}
   1071c:	0001883a 	nop
   10720:	e037883a 	mov	sp,fp
   10724:	dfc00117 	ldw	ra,4(sp)
   10728:	df000017 	ldw	fp,0(sp)
   1072c:	dec00204 	addi	sp,sp,8
   10730:	f800283a 	ret

00010734 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   10734:	defffd04 	addi	sp,sp,-12
   10738:	dfc00215 	stw	ra,8(sp)
   1073c:	df000115 	stw	fp,4(sp)
   10740:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10744:	00800074 	movhi	r2,1
   10748:	1085af04 	addi	r2,r2,5820
   1074c:	e0bfff15 	stw	r2,-4(fp)
   10750:	00000606 	br	1076c <_do_dtors+0x38>
        (*dtor) (); 
   10754:	e0bfff17 	ldw	r2,-4(fp)
   10758:	10800017 	ldw	r2,0(r2)
   1075c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10760:	e0bfff17 	ldw	r2,-4(fp)
   10764:	10bfff04 	addi	r2,r2,-4
   10768:	e0bfff15 	stw	r2,-4(fp)
   1076c:	e0ffff17 	ldw	r3,-4(fp)
   10770:	00800074 	movhi	r2,1
   10774:	1085b004 	addi	r2,r2,5824
   10778:	18bff62e 	bgeu	r3,r2,10754 <__alt_data_end+0xff010754>
        (*dtor) (); 
}
   1077c:	0001883a 	nop
   10780:	e037883a 	mov	sp,fp
   10784:	dfc00117 	ldw	ra,4(sp)
   10788:	df000017 	ldw	fp,0(sp)
   1078c:	dec00204 	addi	sp,sp,8
   10790:	f800283a 	ret

00010794 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10794:	defffe04 	addi	sp,sp,-8
   10798:	dfc00115 	stw	ra,4(sp)
   1079c:	df000015 	stw	fp,0(sp)
   107a0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   107a4:	01440004 	movi	r5,4096
   107a8:	0009883a 	mov	r4,zero
   107ac:	00112000 	call	11200 <alt_icache_flush>
#endif
}
   107b0:	0001883a 	nop
   107b4:	e037883a 	mov	sp,fp
   107b8:	dfc00117 	ldw	ra,4(sp)
   107bc:	df000017 	ldw	fp,0(sp)
   107c0:	dec00204 	addi	sp,sp,8
   107c4:	f800283a 	ret

000107c8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   107c8:	defff904 	addi	sp,sp,-28
   107cc:	dfc00615 	stw	ra,24(sp)
   107d0:	df000515 	stw	fp,20(sp)
   107d4:	df000504 	addi	fp,sp,20
   107d8:	e13ffc15 	stw	r4,-16(fp)
   107dc:	e17ffd15 	stw	r5,-12(fp)
   107e0:	e1bffe15 	stw	r6,-8(fp)
   107e4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   107e8:	e0800217 	ldw	r2,8(fp)
   107ec:	d8800015 	stw	r2,0(sp)
   107f0:	e1ffff17 	ldw	r7,-4(fp)
   107f4:	e1bffe17 	ldw	r6,-8(fp)
   107f8:	e17ffd17 	ldw	r5,-12(fp)
   107fc:	e13ffc17 	ldw	r4,-16(fp)
   10800:	00109780 	call	10978 <alt_iic_isr_register>
}  
   10804:	e037883a 	mov	sp,fp
   10808:	dfc00117 	ldw	ra,4(sp)
   1080c:	df000017 	ldw	fp,0(sp)
   10810:	dec00204 	addi	sp,sp,8
   10814:	f800283a 	ret

00010818 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10818:	defff904 	addi	sp,sp,-28
   1081c:	df000615 	stw	fp,24(sp)
   10820:	df000604 	addi	fp,sp,24
   10824:	e13ffe15 	stw	r4,-8(fp)
   10828:	e17fff15 	stw	r5,-4(fp)
   1082c:	e0bfff17 	ldw	r2,-4(fp)
   10830:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10834:	0005303a 	rdctl	r2,status
   10838:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1083c:	e0fffb17 	ldw	r3,-20(fp)
   10840:	00bfff84 	movi	r2,-2
   10844:	1884703a 	and	r2,r3,r2
   10848:	1001703a 	wrctl	status,r2
  
  return context;
   1084c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10850:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   10854:	00c00044 	movi	r3,1
   10858:	e0bffa17 	ldw	r2,-24(fp)
   1085c:	1884983a 	sll	r2,r3,r2
   10860:	1007883a 	mov	r3,r2
   10864:	d0a6e117 	ldw	r2,-25724(gp)
   10868:	1884b03a 	or	r2,r3,r2
   1086c:	d0a6e115 	stw	r2,-25724(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10870:	d0a6e117 	ldw	r2,-25724(gp)
   10874:	100170fa 	wrctl	ienable,r2
   10878:	e0bffc17 	ldw	r2,-16(fp)
   1087c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10880:	e0bffd17 	ldw	r2,-12(fp)
   10884:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10888:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   1088c:	0001883a 	nop
}
   10890:	e037883a 	mov	sp,fp
   10894:	df000017 	ldw	fp,0(sp)
   10898:	dec00104 	addi	sp,sp,4
   1089c:	f800283a 	ret

000108a0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   108a0:	defff904 	addi	sp,sp,-28
   108a4:	df000615 	stw	fp,24(sp)
   108a8:	df000604 	addi	fp,sp,24
   108ac:	e13ffe15 	stw	r4,-8(fp)
   108b0:	e17fff15 	stw	r5,-4(fp)
   108b4:	e0bfff17 	ldw	r2,-4(fp)
   108b8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   108bc:	0005303a 	rdctl	r2,status
   108c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   108c4:	e0fffb17 	ldw	r3,-20(fp)
   108c8:	00bfff84 	movi	r2,-2
   108cc:	1884703a 	and	r2,r3,r2
   108d0:	1001703a 	wrctl	status,r2
  
  return context;
   108d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   108d8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   108dc:	00c00044 	movi	r3,1
   108e0:	e0bffa17 	ldw	r2,-24(fp)
   108e4:	1884983a 	sll	r2,r3,r2
   108e8:	0084303a 	nor	r2,zero,r2
   108ec:	1007883a 	mov	r3,r2
   108f0:	d0a6e117 	ldw	r2,-25724(gp)
   108f4:	1884703a 	and	r2,r3,r2
   108f8:	d0a6e115 	stw	r2,-25724(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   108fc:	d0a6e117 	ldw	r2,-25724(gp)
   10900:	100170fa 	wrctl	ienable,r2
   10904:	e0bffc17 	ldw	r2,-16(fp)
   10908:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1090c:	e0bffd17 	ldw	r2,-12(fp)
   10910:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10914:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   10918:	0001883a 	nop
}
   1091c:	e037883a 	mov	sp,fp
   10920:	df000017 	ldw	fp,0(sp)
   10924:	dec00104 	addi	sp,sp,4
   10928:	f800283a 	ret

0001092c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   1092c:	defffc04 	addi	sp,sp,-16
   10930:	df000315 	stw	fp,12(sp)
   10934:	df000304 	addi	fp,sp,12
   10938:	e13ffe15 	stw	r4,-8(fp)
   1093c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10940:	000530fa 	rdctl	r2,ienable
   10944:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10948:	00c00044 	movi	r3,1
   1094c:	e0bfff17 	ldw	r2,-4(fp)
   10950:	1884983a 	sll	r2,r3,r2
   10954:	1007883a 	mov	r3,r2
   10958:	e0bffd17 	ldw	r2,-12(fp)
   1095c:	1884703a 	and	r2,r3,r2
   10960:	1004c03a 	cmpne	r2,r2,zero
   10964:	10803fcc 	andi	r2,r2,255
}
   10968:	e037883a 	mov	sp,fp
   1096c:	df000017 	ldw	fp,0(sp)
   10970:	dec00104 	addi	sp,sp,4
   10974:	f800283a 	ret

00010978 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10978:	defff504 	addi	sp,sp,-44
   1097c:	dfc00a15 	stw	ra,40(sp)
   10980:	df000915 	stw	fp,36(sp)
   10984:	df000904 	addi	fp,sp,36
   10988:	e13ffc15 	stw	r4,-16(fp)
   1098c:	e17ffd15 	stw	r5,-12(fp)
   10990:	e1bffe15 	stw	r6,-8(fp)
   10994:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   10998:	00bffa84 	movi	r2,-22
   1099c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   109a0:	e0bffd17 	ldw	r2,-12(fp)
   109a4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   109a8:	e0bff817 	ldw	r2,-32(fp)
   109ac:	10800808 	cmpgei	r2,r2,32
   109b0:	1000271e 	bne	r2,zero,10a50 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   109b4:	0005303a 	rdctl	r2,status
   109b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   109bc:	e0fffb17 	ldw	r3,-20(fp)
   109c0:	00bfff84 	movi	r2,-2
   109c4:	1884703a 	and	r2,r3,r2
   109c8:	1001703a 	wrctl	status,r2
  
  return context;
   109cc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   109d0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   109d4:	00800074 	movhi	r2,1
   109d8:	10953904 	addi	r2,r2,21732
   109dc:	e0fff817 	ldw	r3,-32(fp)
   109e0:	180690fa 	slli	r3,r3,3
   109e4:	10c5883a 	add	r2,r2,r3
   109e8:	e0fffe17 	ldw	r3,-8(fp)
   109ec:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   109f0:	00800074 	movhi	r2,1
   109f4:	10953904 	addi	r2,r2,21732
   109f8:	e0fff817 	ldw	r3,-32(fp)
   109fc:	180690fa 	slli	r3,r3,3
   10a00:	10c5883a 	add	r2,r2,r3
   10a04:	10800104 	addi	r2,r2,4
   10a08:	e0ffff17 	ldw	r3,-4(fp)
   10a0c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10a10:	e0bffe17 	ldw	r2,-8(fp)
   10a14:	10000526 	beq	r2,zero,10a2c <alt_iic_isr_register+0xb4>
   10a18:	e0bff817 	ldw	r2,-32(fp)
   10a1c:	100b883a 	mov	r5,r2
   10a20:	e13ffc17 	ldw	r4,-16(fp)
   10a24:	00108180 	call	10818 <alt_ic_irq_enable>
   10a28:	00000406 	br	10a3c <alt_iic_isr_register+0xc4>
   10a2c:	e0bff817 	ldw	r2,-32(fp)
   10a30:	100b883a 	mov	r5,r2
   10a34:	e13ffc17 	ldw	r4,-16(fp)
   10a38:	00108a00 	call	108a0 <alt_ic_irq_disable>
   10a3c:	e0bff715 	stw	r2,-36(fp)
   10a40:	e0bffa17 	ldw	r2,-24(fp)
   10a44:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10a48:	e0bff917 	ldw	r2,-28(fp)
   10a4c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   10a50:	e0bff717 	ldw	r2,-36(fp)
}
   10a54:	e037883a 	mov	sp,fp
   10a58:	dfc00117 	ldw	ra,4(sp)
   10a5c:	df000017 	ldw	fp,0(sp)
   10a60:	dec00204 	addi	sp,sp,8
   10a64:	f800283a 	ret

00010a68 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   10a68:	defff904 	addi	sp,sp,-28
   10a6c:	dfc00615 	stw	ra,24(sp)
   10a70:	df000515 	stw	fp,20(sp)
   10a74:	df000504 	addi	fp,sp,20
   10a78:	e13ffc15 	stw	r4,-16(fp)
   10a7c:	e17ffd15 	stw	r5,-12(fp)
   10a80:	e1bffe15 	stw	r6,-8(fp)
   10a84:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   10a88:	e1bfff17 	ldw	r6,-4(fp)
   10a8c:	e17ffe17 	ldw	r5,-8(fp)
   10a90:	e13ffd17 	ldw	r4,-12(fp)
   10a94:	0010ca80 	call	10ca8 <open>
   10a98:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   10a9c:	e0bffb17 	ldw	r2,-20(fp)
   10aa0:	10001c16 	blt	r2,zero,10b14 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   10aa4:	00800074 	movhi	r2,1
   10aa8:	1089d204 	addi	r2,r2,10056
   10aac:	e0fffb17 	ldw	r3,-20(fp)
   10ab0:	18c00324 	muli	r3,r3,12
   10ab4:	10c5883a 	add	r2,r2,r3
   10ab8:	10c00017 	ldw	r3,0(r2)
   10abc:	e0bffc17 	ldw	r2,-16(fp)
   10ac0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   10ac4:	00800074 	movhi	r2,1
   10ac8:	1089d204 	addi	r2,r2,10056
   10acc:	e0fffb17 	ldw	r3,-20(fp)
   10ad0:	18c00324 	muli	r3,r3,12
   10ad4:	10c5883a 	add	r2,r2,r3
   10ad8:	10800104 	addi	r2,r2,4
   10adc:	10c00017 	ldw	r3,0(r2)
   10ae0:	e0bffc17 	ldw	r2,-16(fp)
   10ae4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   10ae8:	00800074 	movhi	r2,1
   10aec:	1089d204 	addi	r2,r2,10056
   10af0:	e0fffb17 	ldw	r3,-20(fp)
   10af4:	18c00324 	muli	r3,r3,12
   10af8:	10c5883a 	add	r2,r2,r3
   10afc:	10800204 	addi	r2,r2,8
   10b00:	10c00017 	ldw	r3,0(r2)
   10b04:	e0bffc17 	ldw	r2,-16(fp)
   10b08:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   10b0c:	e13ffb17 	ldw	r4,-20(fp)
   10b10:	000f37c0 	call	f37c <alt_release_fd>
  }
} 
   10b14:	0001883a 	nop
   10b18:	e037883a 	mov	sp,fp
   10b1c:	dfc00117 	ldw	ra,4(sp)
   10b20:	df000017 	ldw	fp,0(sp)
   10b24:	dec00204 	addi	sp,sp,8
   10b28:	f800283a 	ret

00010b2c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10b2c:	defffb04 	addi	sp,sp,-20
   10b30:	dfc00415 	stw	ra,16(sp)
   10b34:	df000315 	stw	fp,12(sp)
   10b38:	df000304 	addi	fp,sp,12
   10b3c:	e13ffd15 	stw	r4,-12(fp)
   10b40:	e17ffe15 	stw	r5,-8(fp)
   10b44:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10b48:	01c07fc4 	movi	r7,511
   10b4c:	01800044 	movi	r6,1
   10b50:	e17ffd17 	ldw	r5,-12(fp)
   10b54:	01000074 	movhi	r4,1
   10b58:	2109d504 	addi	r4,r4,10068
   10b5c:	0010a680 	call	10a68 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10b60:	01c07fc4 	movi	r7,511
   10b64:	000d883a 	mov	r6,zero
   10b68:	e17ffe17 	ldw	r5,-8(fp)
   10b6c:	01000074 	movhi	r4,1
   10b70:	2109d204 	addi	r4,r4,10056
   10b74:	0010a680 	call	10a68 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10b78:	01c07fc4 	movi	r7,511
   10b7c:	01800044 	movi	r6,1
   10b80:	e17fff17 	ldw	r5,-4(fp)
   10b84:	01000074 	movhi	r4,1
   10b88:	2109d804 	addi	r4,r4,10080
   10b8c:	0010a680 	call	10a68 <alt_open_fd>
}  
   10b90:	0001883a 	nop
   10b94:	e037883a 	mov	sp,fp
   10b98:	dfc00117 	ldw	ra,4(sp)
   10b9c:	df000017 	ldw	fp,0(sp)
   10ba0:	dec00204 	addi	sp,sp,8
   10ba4:	f800283a 	ret

00010ba8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10ba8:	defffe04 	addi	sp,sp,-8
   10bac:	dfc00115 	stw	ra,4(sp)
   10bb0:	df000015 	stw	fp,0(sp)
   10bb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10bb8:	d0a00b17 	ldw	r2,-32724(gp)
   10bbc:	10000326 	beq	r2,zero,10bcc <alt_get_errno+0x24>
   10bc0:	d0a00b17 	ldw	r2,-32724(gp)
   10bc4:	103ee83a 	callr	r2
   10bc8:	00000106 	br	10bd0 <alt_get_errno+0x28>
   10bcc:	d0a6d804 	addi	r2,gp,-25760
}
   10bd0:	e037883a 	mov	sp,fp
   10bd4:	dfc00117 	ldw	ra,4(sp)
   10bd8:	df000017 	ldw	fp,0(sp)
   10bdc:	dec00204 	addi	sp,sp,8
   10be0:	f800283a 	ret

00010be4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   10be4:	defffd04 	addi	sp,sp,-12
   10be8:	df000215 	stw	fp,8(sp)
   10bec:	df000204 	addi	fp,sp,8
   10bf0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10bf4:	e0bfff17 	ldw	r2,-4(fp)
   10bf8:	10800217 	ldw	r2,8(r2)
   10bfc:	10d00034 	orhi	r3,r2,16384
   10c00:	e0bfff17 	ldw	r2,-4(fp)
   10c04:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10c08:	e03ffe15 	stw	zero,-8(fp)
   10c0c:	00001d06 	br	10c84 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10c10:	00800074 	movhi	r2,1
   10c14:	1089d204 	addi	r2,r2,10056
   10c18:	e0fffe17 	ldw	r3,-8(fp)
   10c1c:	18c00324 	muli	r3,r3,12
   10c20:	10c5883a 	add	r2,r2,r3
   10c24:	10c00017 	ldw	r3,0(r2)
   10c28:	e0bfff17 	ldw	r2,-4(fp)
   10c2c:	10800017 	ldw	r2,0(r2)
   10c30:	1880111e 	bne	r3,r2,10c78 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10c34:	00800074 	movhi	r2,1
   10c38:	1089d204 	addi	r2,r2,10056
   10c3c:	e0fffe17 	ldw	r3,-8(fp)
   10c40:	18c00324 	muli	r3,r3,12
   10c44:	10c5883a 	add	r2,r2,r3
   10c48:	10800204 	addi	r2,r2,8
   10c4c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10c50:	1000090e 	bge	r2,zero,10c78 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   10c54:	e0bffe17 	ldw	r2,-8(fp)
   10c58:	10c00324 	muli	r3,r2,12
   10c5c:	00800074 	movhi	r2,1
   10c60:	1089d204 	addi	r2,r2,10056
   10c64:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10c68:	e0bfff17 	ldw	r2,-4(fp)
   10c6c:	18800226 	beq	r3,r2,10c78 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   10c70:	00bffcc4 	movi	r2,-13
   10c74:	00000806 	br	10c98 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10c78:	e0bffe17 	ldw	r2,-8(fp)
   10c7c:	10800044 	addi	r2,r2,1
   10c80:	e0bffe15 	stw	r2,-8(fp)
   10c84:	d0a00a17 	ldw	r2,-32728(gp)
   10c88:	1007883a 	mov	r3,r2
   10c8c:	e0bffe17 	ldw	r2,-8(fp)
   10c90:	18bfdf2e 	bgeu	r3,r2,10c10 <__alt_data_end+0xff010c10>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   10c94:	0005883a 	mov	r2,zero
}
   10c98:	e037883a 	mov	sp,fp
   10c9c:	df000017 	ldw	fp,0(sp)
   10ca0:	dec00104 	addi	sp,sp,4
   10ca4:	f800283a 	ret

00010ca8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   10ca8:	defff604 	addi	sp,sp,-40
   10cac:	dfc00915 	stw	ra,36(sp)
   10cb0:	df000815 	stw	fp,32(sp)
   10cb4:	df000804 	addi	fp,sp,32
   10cb8:	e13ffd15 	stw	r4,-12(fp)
   10cbc:	e17ffe15 	stw	r5,-8(fp)
   10cc0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   10cc4:	00bfffc4 	movi	r2,-1
   10cc8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   10ccc:	00bffb44 	movi	r2,-19
   10cd0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   10cd4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   10cd8:	d1600804 	addi	r5,gp,-32736
   10cdc:	e13ffd17 	ldw	r4,-12(fp)
   10ce0:	0010fc40 	call	10fc4 <alt_find_dev>
   10ce4:	e0bff815 	stw	r2,-32(fp)
   10ce8:	e0bff817 	ldw	r2,-32(fp)
   10cec:	1000051e 	bne	r2,zero,10d04 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   10cf0:	e13ffd17 	ldw	r4,-12(fp)
   10cf4:	00110540 	call	11054 <alt_find_file>
   10cf8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   10cfc:	00800044 	movi	r2,1
   10d00:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   10d04:	e0bff817 	ldw	r2,-32(fp)
   10d08:	10002926 	beq	r2,zero,10db0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   10d0c:	e13ff817 	ldw	r4,-32(fp)
   10d10:	001115c0 	call	1115c <alt_get_fd>
   10d14:	e0bff915 	stw	r2,-28(fp)
   10d18:	e0bff917 	ldw	r2,-28(fp)
   10d1c:	1000030e 	bge	r2,zero,10d2c <open+0x84>
    {
      status = index;
   10d20:	e0bff917 	ldw	r2,-28(fp)
   10d24:	e0bffa15 	stw	r2,-24(fp)
   10d28:	00002306 	br	10db8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   10d2c:	e0bff917 	ldw	r2,-28(fp)
   10d30:	10c00324 	muli	r3,r2,12
   10d34:	00800074 	movhi	r2,1
   10d38:	1089d204 	addi	r2,r2,10056
   10d3c:	1885883a 	add	r2,r3,r2
   10d40:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   10d44:	e0fffe17 	ldw	r3,-8(fp)
   10d48:	00900034 	movhi	r2,16384
   10d4c:	10bfffc4 	addi	r2,r2,-1
   10d50:	1886703a 	and	r3,r3,r2
   10d54:	e0bffc17 	ldw	r2,-16(fp)
   10d58:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   10d5c:	e0bffb17 	ldw	r2,-20(fp)
   10d60:	1000051e 	bne	r2,zero,10d78 <open+0xd0>
   10d64:	e13ffc17 	ldw	r4,-16(fp)
   10d68:	0010be40 	call	10be4 <alt_file_locked>
   10d6c:	e0bffa15 	stw	r2,-24(fp)
   10d70:	e0bffa17 	ldw	r2,-24(fp)
   10d74:	10001016 	blt	r2,zero,10db8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   10d78:	e0bff817 	ldw	r2,-32(fp)
   10d7c:	10800317 	ldw	r2,12(r2)
   10d80:	10000826 	beq	r2,zero,10da4 <open+0xfc>
   10d84:	e0bff817 	ldw	r2,-32(fp)
   10d88:	10800317 	ldw	r2,12(r2)
   10d8c:	e1ffff17 	ldw	r7,-4(fp)
   10d90:	e1bffe17 	ldw	r6,-8(fp)
   10d94:	e17ffd17 	ldw	r5,-12(fp)
   10d98:	e13ffc17 	ldw	r4,-16(fp)
   10d9c:	103ee83a 	callr	r2
   10da0:	00000106 	br	10da8 <open+0x100>
   10da4:	0005883a 	mov	r2,zero
   10da8:	e0bffa15 	stw	r2,-24(fp)
   10dac:	00000206 	br	10db8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   10db0:	00bffb44 	movi	r2,-19
   10db4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   10db8:	e0bffa17 	ldw	r2,-24(fp)
   10dbc:	1000090e 	bge	r2,zero,10de4 <open+0x13c>
  {
    alt_release_fd (index);  
   10dc0:	e13ff917 	ldw	r4,-28(fp)
   10dc4:	000f37c0 	call	f37c <alt_release_fd>
    ALT_ERRNO = -status;
   10dc8:	0010ba80 	call	10ba8 <alt_get_errno>
   10dcc:	1007883a 	mov	r3,r2
   10dd0:	e0bffa17 	ldw	r2,-24(fp)
   10dd4:	0085c83a 	sub	r2,zero,r2
   10dd8:	18800015 	stw	r2,0(r3)
    return -1;
   10ddc:	00bfffc4 	movi	r2,-1
   10de0:	00000106 	br	10de8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   10de4:	e0bff917 	ldw	r2,-28(fp)
}
   10de8:	e037883a 	mov	sp,fp
   10dec:	dfc00117 	ldw	ra,4(sp)
   10df0:	df000017 	ldw	fp,0(sp)
   10df4:	dec00204 	addi	sp,sp,8
   10df8:	f800283a 	ret

00010dfc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   10dfc:	defffa04 	addi	sp,sp,-24
   10e00:	df000515 	stw	fp,20(sp)
   10e04:	df000504 	addi	fp,sp,20
   10e08:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10e0c:	0005303a 	rdctl	r2,status
   10e10:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e14:	e0fffc17 	ldw	r3,-16(fp)
   10e18:	00bfff84 	movi	r2,-2
   10e1c:	1884703a 	and	r2,r3,r2
   10e20:	1001703a 	wrctl	status,r2
  
  return context;
   10e24:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   10e28:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   10e2c:	e0bfff17 	ldw	r2,-4(fp)
   10e30:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   10e34:	e0bffd17 	ldw	r2,-12(fp)
   10e38:	10800017 	ldw	r2,0(r2)
   10e3c:	e0fffd17 	ldw	r3,-12(fp)
   10e40:	18c00117 	ldw	r3,4(r3)
   10e44:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   10e48:	e0bffd17 	ldw	r2,-12(fp)
   10e4c:	10800117 	ldw	r2,4(r2)
   10e50:	e0fffd17 	ldw	r3,-12(fp)
   10e54:	18c00017 	ldw	r3,0(r3)
   10e58:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   10e5c:	e0bffd17 	ldw	r2,-12(fp)
   10e60:	e0fffd17 	ldw	r3,-12(fp)
   10e64:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   10e68:	e0bffd17 	ldw	r2,-12(fp)
   10e6c:	e0fffd17 	ldw	r3,-12(fp)
   10e70:	10c00015 	stw	r3,0(r2)
   10e74:	e0bffb17 	ldw	r2,-20(fp)
   10e78:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10e7c:	e0bffe17 	ldw	r2,-8(fp)
   10e80:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   10e84:	0001883a 	nop
   10e88:	e037883a 	mov	sp,fp
   10e8c:	df000017 	ldw	fp,0(sp)
   10e90:	dec00104 	addi	sp,sp,4
   10e94:	f800283a 	ret

00010e98 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10e98:	defffb04 	addi	sp,sp,-20
   10e9c:	dfc00415 	stw	ra,16(sp)
   10ea0:	df000315 	stw	fp,12(sp)
   10ea4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   10ea8:	d0a00e17 	ldw	r2,-32712(gp)
   10eac:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10eb0:	d0a6e317 	ldw	r2,-25716(gp)
   10eb4:	10800044 	addi	r2,r2,1
   10eb8:	d0a6e315 	stw	r2,-25716(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10ebc:	00002e06 	br	10f78 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   10ec0:	e0bffd17 	ldw	r2,-12(fp)
   10ec4:	10800017 	ldw	r2,0(r2)
   10ec8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10ecc:	e0bffd17 	ldw	r2,-12(fp)
   10ed0:	10800403 	ldbu	r2,16(r2)
   10ed4:	10803fcc 	andi	r2,r2,255
   10ed8:	10000426 	beq	r2,zero,10eec <alt_tick+0x54>
   10edc:	d0a6e317 	ldw	r2,-25716(gp)
   10ee0:	1000021e 	bne	r2,zero,10eec <alt_tick+0x54>
    {
      alarm->rollover = 0;
   10ee4:	e0bffd17 	ldw	r2,-12(fp)
   10ee8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   10eec:	e0bffd17 	ldw	r2,-12(fp)
   10ef0:	10800217 	ldw	r2,8(r2)
   10ef4:	d0e6e317 	ldw	r3,-25716(gp)
   10ef8:	18801d36 	bltu	r3,r2,10f70 <alt_tick+0xd8>
   10efc:	e0bffd17 	ldw	r2,-12(fp)
   10f00:	10800403 	ldbu	r2,16(r2)
   10f04:	10803fcc 	andi	r2,r2,255
   10f08:	1000191e 	bne	r2,zero,10f70 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   10f0c:	e0bffd17 	ldw	r2,-12(fp)
   10f10:	10800317 	ldw	r2,12(r2)
   10f14:	e0fffd17 	ldw	r3,-12(fp)
   10f18:	18c00517 	ldw	r3,20(r3)
   10f1c:	1809883a 	mov	r4,r3
   10f20:	103ee83a 	callr	r2
   10f24:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   10f28:	e0bfff17 	ldw	r2,-4(fp)
   10f2c:	1000031e 	bne	r2,zero,10f3c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   10f30:	e13ffd17 	ldw	r4,-12(fp)
   10f34:	0010dfc0 	call	10dfc <alt_alarm_stop>
   10f38:	00000d06 	br	10f70 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   10f3c:	e0bffd17 	ldw	r2,-12(fp)
   10f40:	10c00217 	ldw	r3,8(r2)
   10f44:	e0bfff17 	ldw	r2,-4(fp)
   10f48:	1887883a 	add	r3,r3,r2
   10f4c:	e0bffd17 	ldw	r2,-12(fp)
   10f50:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   10f54:	e0bffd17 	ldw	r2,-12(fp)
   10f58:	10c00217 	ldw	r3,8(r2)
   10f5c:	d0a6e317 	ldw	r2,-25716(gp)
   10f60:	1880032e 	bgeu	r3,r2,10f70 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   10f64:	e0bffd17 	ldw	r2,-12(fp)
   10f68:	00c00044 	movi	r3,1
   10f6c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   10f70:	e0bffe17 	ldw	r2,-8(fp)
   10f74:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10f78:	e0fffd17 	ldw	r3,-12(fp)
   10f7c:	d0a00e04 	addi	r2,gp,-32712
   10f80:	18bfcf1e 	bne	r3,r2,10ec0 <__alt_data_end+0xff010ec0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   10f84:	0001883a 	nop
}
   10f88:	0001883a 	nop
   10f8c:	e037883a 	mov	sp,fp
   10f90:	dfc00117 	ldw	ra,4(sp)
   10f94:	df000017 	ldw	fp,0(sp)
   10f98:	dec00204 	addi	sp,sp,8
   10f9c:	f800283a 	ret

00010fa0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   10fa0:	deffff04 	addi	sp,sp,-4
   10fa4:	df000015 	stw	fp,0(sp)
   10fa8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   10fac:	000170fa 	wrctl	ienable,zero
}
   10fb0:	0001883a 	nop
   10fb4:	e037883a 	mov	sp,fp
   10fb8:	df000017 	ldw	fp,0(sp)
   10fbc:	dec00104 	addi	sp,sp,4
   10fc0:	f800283a 	ret

00010fc4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10fc4:	defffa04 	addi	sp,sp,-24
   10fc8:	dfc00515 	stw	ra,20(sp)
   10fcc:	df000415 	stw	fp,16(sp)
   10fd0:	df000404 	addi	fp,sp,16
   10fd4:	e13ffe15 	stw	r4,-8(fp)
   10fd8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   10fdc:	e0bfff17 	ldw	r2,-4(fp)
   10fe0:	10800017 	ldw	r2,0(r2)
   10fe4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   10fe8:	e13ffe17 	ldw	r4,-8(fp)
   10fec:	0002d000 	call	2d00 <strlen>
   10ff0:	10800044 	addi	r2,r2,1
   10ff4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10ff8:	00000d06 	br	11030 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10ffc:	e0bffc17 	ldw	r2,-16(fp)
   11000:	10800217 	ldw	r2,8(r2)
   11004:	e0fffd17 	ldw	r3,-12(fp)
   11008:	180d883a 	mov	r6,r3
   1100c:	e17ffe17 	ldw	r5,-8(fp)
   11010:	1009883a 	mov	r4,r2
   11014:	00113780 	call	11378 <memcmp>
   11018:	1000021e 	bne	r2,zero,11024 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1101c:	e0bffc17 	ldw	r2,-16(fp)
   11020:	00000706 	br	11040 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   11024:	e0bffc17 	ldw	r2,-16(fp)
   11028:	10800017 	ldw	r2,0(r2)
   1102c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11030:	e0fffc17 	ldw	r3,-16(fp)
   11034:	e0bfff17 	ldw	r2,-4(fp)
   11038:	18bff01e 	bne	r3,r2,10ffc <__alt_data_end+0xff010ffc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1103c:	0005883a 	mov	r2,zero
}
   11040:	e037883a 	mov	sp,fp
   11044:	dfc00117 	ldw	ra,4(sp)
   11048:	df000017 	ldw	fp,0(sp)
   1104c:	dec00204 	addi	sp,sp,8
   11050:	f800283a 	ret

00011054 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11054:	defffb04 	addi	sp,sp,-20
   11058:	dfc00415 	stw	ra,16(sp)
   1105c:	df000315 	stw	fp,12(sp)
   11060:	df000304 	addi	fp,sp,12
   11064:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   11068:	d0a00617 	ldw	r2,-32744(gp)
   1106c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11070:	00003106 	br	11138 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   11074:	e0bffd17 	ldw	r2,-12(fp)
   11078:	10800217 	ldw	r2,8(r2)
   1107c:	1009883a 	mov	r4,r2
   11080:	0002d000 	call	2d00 <strlen>
   11084:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   11088:	e0bffd17 	ldw	r2,-12(fp)
   1108c:	10c00217 	ldw	r3,8(r2)
   11090:	e0bffe17 	ldw	r2,-8(fp)
   11094:	10bfffc4 	addi	r2,r2,-1
   11098:	1885883a 	add	r2,r3,r2
   1109c:	10800003 	ldbu	r2,0(r2)
   110a0:	10803fcc 	andi	r2,r2,255
   110a4:	1080201c 	xori	r2,r2,128
   110a8:	10bfe004 	addi	r2,r2,-128
   110ac:	10800bd8 	cmpnei	r2,r2,47
   110b0:	1000031e 	bne	r2,zero,110c0 <alt_find_file+0x6c>
    {
      len -= 1;
   110b4:	e0bffe17 	ldw	r2,-8(fp)
   110b8:	10bfffc4 	addi	r2,r2,-1
   110bc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   110c0:	e0bffe17 	ldw	r2,-8(fp)
   110c4:	e0ffff17 	ldw	r3,-4(fp)
   110c8:	1885883a 	add	r2,r3,r2
   110cc:	10800003 	ldbu	r2,0(r2)
   110d0:	10803fcc 	andi	r2,r2,255
   110d4:	1080201c 	xori	r2,r2,128
   110d8:	10bfe004 	addi	r2,r2,-128
   110dc:	10800be0 	cmpeqi	r2,r2,47
   110e0:	1000081e 	bne	r2,zero,11104 <alt_find_file+0xb0>
   110e4:	e0bffe17 	ldw	r2,-8(fp)
   110e8:	e0ffff17 	ldw	r3,-4(fp)
   110ec:	1885883a 	add	r2,r3,r2
   110f0:	10800003 	ldbu	r2,0(r2)
   110f4:	10803fcc 	andi	r2,r2,255
   110f8:	1080201c 	xori	r2,r2,128
   110fc:	10bfe004 	addi	r2,r2,-128
   11100:	10000a1e 	bne	r2,zero,1112c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   11104:	e0bffd17 	ldw	r2,-12(fp)
   11108:	10800217 	ldw	r2,8(r2)
   1110c:	e0fffe17 	ldw	r3,-8(fp)
   11110:	180d883a 	mov	r6,r3
   11114:	e17fff17 	ldw	r5,-4(fp)
   11118:	1009883a 	mov	r4,r2
   1111c:	00113780 	call	11378 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11120:	1000021e 	bne	r2,zero,1112c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   11124:	e0bffd17 	ldw	r2,-12(fp)
   11128:	00000706 	br	11148 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1112c:	e0bffd17 	ldw	r2,-12(fp)
   11130:	10800017 	ldw	r2,0(r2)
   11134:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11138:	e0fffd17 	ldw	r3,-12(fp)
   1113c:	d0a00604 	addi	r2,gp,-32744
   11140:	18bfcc1e 	bne	r3,r2,11074 <__alt_data_end+0xff011074>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   11144:	0005883a 	mov	r2,zero
}
   11148:	e037883a 	mov	sp,fp
   1114c:	dfc00117 	ldw	ra,4(sp)
   11150:	df000017 	ldw	fp,0(sp)
   11154:	dec00204 	addi	sp,sp,8
   11158:	f800283a 	ret

0001115c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1115c:	defffc04 	addi	sp,sp,-16
   11160:	df000315 	stw	fp,12(sp)
   11164:	df000304 	addi	fp,sp,12
   11168:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1116c:	00bffa04 	movi	r2,-24
   11170:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11174:	e03ffd15 	stw	zero,-12(fp)
   11178:	00001906 	br	111e0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   1117c:	00800074 	movhi	r2,1
   11180:	1089d204 	addi	r2,r2,10056
   11184:	e0fffd17 	ldw	r3,-12(fp)
   11188:	18c00324 	muli	r3,r3,12
   1118c:	10c5883a 	add	r2,r2,r3
   11190:	10800017 	ldw	r2,0(r2)
   11194:	10000f1e 	bne	r2,zero,111d4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   11198:	00800074 	movhi	r2,1
   1119c:	1089d204 	addi	r2,r2,10056
   111a0:	e0fffd17 	ldw	r3,-12(fp)
   111a4:	18c00324 	muli	r3,r3,12
   111a8:	10c5883a 	add	r2,r2,r3
   111ac:	e0ffff17 	ldw	r3,-4(fp)
   111b0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   111b4:	d0e00a17 	ldw	r3,-32728(gp)
   111b8:	e0bffd17 	ldw	r2,-12(fp)
   111bc:	1880020e 	bge	r3,r2,111c8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   111c0:	e0bffd17 	ldw	r2,-12(fp)
   111c4:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   111c8:	e0bffd17 	ldw	r2,-12(fp)
   111cc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   111d0:	00000606 	br	111ec <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   111d4:	e0bffd17 	ldw	r2,-12(fp)
   111d8:	10800044 	addi	r2,r2,1
   111dc:	e0bffd15 	stw	r2,-12(fp)
   111e0:	e0bffd17 	ldw	r2,-12(fp)
   111e4:	10800810 	cmplti	r2,r2,32
   111e8:	103fe41e 	bne	r2,zero,1117c <__alt_data_end+0xff01117c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   111ec:	e0bffe17 	ldw	r2,-8(fp)
}
   111f0:	e037883a 	mov	sp,fp
   111f4:	df000017 	ldw	fp,0(sp)
   111f8:	dec00104 	addi	sp,sp,4
   111fc:	f800283a 	ret

00011200 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   11200:	defffb04 	addi	sp,sp,-20
   11204:	df000415 	stw	fp,16(sp)
   11208:	df000404 	addi	fp,sp,16
   1120c:	e13ffe15 	stw	r4,-8(fp)
   11210:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   11214:	e0bfff17 	ldw	r2,-4(fp)
   11218:	10840070 	cmpltui	r2,r2,4097
   1121c:	1000021e 	bne	r2,zero,11228 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   11220:	00840004 	movi	r2,4096
   11224:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   11228:	e0fffe17 	ldw	r3,-8(fp)
   1122c:	e0bfff17 	ldw	r2,-4(fp)
   11230:	1885883a 	add	r2,r3,r2
   11234:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11238:	e0bffe17 	ldw	r2,-8(fp)
   1123c:	e0bffc15 	stw	r2,-16(fp)
   11240:	00000506 	br	11258 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   11244:	e0bffc17 	ldw	r2,-16(fp)
   11248:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1124c:	e0bffc17 	ldw	r2,-16(fp)
   11250:	10800804 	addi	r2,r2,32
   11254:	e0bffc15 	stw	r2,-16(fp)
   11258:	e0fffc17 	ldw	r3,-16(fp)
   1125c:	e0bffd17 	ldw	r2,-12(fp)
   11260:	18bff836 	bltu	r3,r2,11244 <__alt_data_end+0xff011244>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   11264:	e0bffe17 	ldw	r2,-8(fp)
   11268:	108007cc 	andi	r2,r2,31
   1126c:	10000226 	beq	r2,zero,11278 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   11270:	e0bffc17 	ldw	r2,-16(fp)
   11274:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   11278:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1127c:	0001883a 	nop
   11280:	e037883a 	mov	sp,fp
   11284:	df000017 	ldw	fp,0(sp)
   11288:	dec00104 	addi	sp,sp,4
   1128c:	f800283a 	ret

00011290 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   11290:	defffe04 	addi	sp,sp,-8
   11294:	df000115 	stw	fp,4(sp)
   11298:	df000104 	addi	fp,sp,4
   1129c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   112a0:	e0bfff17 	ldw	r2,-4(fp)
   112a4:	10bffe84 	addi	r2,r2,-6
   112a8:	10c00428 	cmpgeui	r3,r2,16
   112ac:	18001a1e 	bne	r3,zero,11318 <alt_exception_cause_generated_bad_addr+0x88>
   112b0:	100690ba 	slli	r3,r2,2
   112b4:	00800074 	movhi	r2,1
   112b8:	1084b204 	addi	r2,r2,4808
   112bc:	1885883a 	add	r2,r3,r2
   112c0:	10800017 	ldw	r2,0(r2)
   112c4:	1000683a 	jmp	r2
   112c8:	00011308 	cmpgei	zero,zero,1100
   112cc:	00011308 	cmpgei	zero,zero,1100
   112d0:	00011318 	cmpnei	zero,zero,1100
   112d4:	00011318 	cmpnei	zero,zero,1100
   112d8:	00011318 	cmpnei	zero,zero,1100
   112dc:	00011308 	cmpgei	zero,zero,1100
   112e0:	00011310 	cmplti	zero,zero,1100
   112e4:	00011318 	cmpnei	zero,zero,1100
   112e8:	00011308 	cmpgei	zero,zero,1100
   112ec:	00011308 	cmpgei	zero,zero,1100
   112f0:	00011318 	cmpnei	zero,zero,1100
   112f4:	00011308 	cmpgei	zero,zero,1100
   112f8:	00011310 	cmplti	zero,zero,1100
   112fc:	00011318 	cmpnei	zero,zero,1100
   11300:	00011318 	cmpnei	zero,zero,1100
   11304:	00011308 	cmpgei	zero,zero,1100
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11308:	00800044 	movi	r2,1
   1130c:	00000306 	br	1131c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11310:	0005883a 	mov	r2,zero
   11314:	00000106 	br	1131c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   11318:	0005883a 	mov	r2,zero
  }
}
   1131c:	e037883a 	mov	sp,fp
   11320:	df000017 	ldw	fp,0(sp)
   11324:	dec00104 	addi	sp,sp,4
   11328:	f800283a 	ret

0001132c <atexit>:
   1132c:	200b883a 	mov	r5,r4
   11330:	000f883a 	mov	r7,zero
   11334:	000d883a 	mov	r6,zero
   11338:	0009883a 	mov	r4,zero
   1133c:	00113f41 	jmpi	113f4 <__register_exitproc>

00011340 <exit>:
   11340:	defffe04 	addi	sp,sp,-8
   11344:	000b883a 	mov	r5,zero
   11348:	dc000015 	stw	r16,0(sp)
   1134c:	dfc00115 	stw	ra,4(sp)
   11350:	2021883a 	mov	r16,r4
   11354:	001150c0 	call	1150c <__call_exitprocs>
   11358:	00800074 	movhi	r2,1
   1135c:	108e4c04 	addi	r2,r2,14640
   11360:	11000017 	ldw	r4,0(r2)
   11364:	20800f17 	ldw	r2,60(r4)
   11368:	10000126 	beq	r2,zero,11370 <exit+0x30>
   1136c:	103ee83a 	callr	r2
   11370:	8009883a 	mov	r4,r16
   11374:	001168c0 	call	1168c <_exit>

00011378 <memcmp>:
   11378:	01c000c4 	movi	r7,3
   1137c:	3980192e 	bgeu	r7,r6,113e4 <memcmp+0x6c>
   11380:	2144b03a 	or	r2,r4,r5
   11384:	11c4703a 	and	r2,r2,r7
   11388:	10000f26 	beq	r2,zero,113c8 <memcmp+0x50>
   1138c:	20800003 	ldbu	r2,0(r4)
   11390:	28c00003 	ldbu	r3,0(r5)
   11394:	10c0151e 	bne	r2,r3,113ec <memcmp+0x74>
   11398:	31bfff84 	addi	r6,r6,-2
   1139c:	01ffffc4 	movi	r7,-1
   113a0:	00000406 	br	113b4 <memcmp+0x3c>
   113a4:	20800003 	ldbu	r2,0(r4)
   113a8:	28c00003 	ldbu	r3,0(r5)
   113ac:	31bfffc4 	addi	r6,r6,-1
   113b0:	10c00e1e 	bne	r2,r3,113ec <memcmp+0x74>
   113b4:	21000044 	addi	r4,r4,1
   113b8:	29400044 	addi	r5,r5,1
   113bc:	31fff91e 	bne	r6,r7,113a4 <__alt_data_end+0xff0113a4>
   113c0:	0005883a 	mov	r2,zero
   113c4:	f800283a 	ret
   113c8:	20c00017 	ldw	r3,0(r4)
   113cc:	28800017 	ldw	r2,0(r5)
   113d0:	18bfee1e 	bne	r3,r2,1138c <__alt_data_end+0xff01138c>
   113d4:	31bfff04 	addi	r6,r6,-4
   113d8:	21000104 	addi	r4,r4,4
   113dc:	29400104 	addi	r5,r5,4
   113e0:	39bff936 	bltu	r7,r6,113c8 <__alt_data_end+0xff0113c8>
   113e4:	303fe91e 	bne	r6,zero,1138c <__alt_data_end+0xff01138c>
   113e8:	003ff506 	br	113c0 <__alt_data_end+0xff0113c0>
   113ec:	10c5c83a 	sub	r2,r2,r3
   113f0:	f800283a 	ret

000113f4 <__register_exitproc>:
   113f4:	defffa04 	addi	sp,sp,-24
   113f8:	dc000315 	stw	r16,12(sp)
   113fc:	04000074 	movhi	r16,1
   11400:	840e4c04 	addi	r16,r16,14640
   11404:	80c00017 	ldw	r3,0(r16)
   11408:	dc400415 	stw	r17,16(sp)
   1140c:	dfc00515 	stw	ra,20(sp)
   11410:	18805217 	ldw	r2,328(r3)
   11414:	2023883a 	mov	r17,r4
   11418:	10003726 	beq	r2,zero,114f8 <__register_exitproc+0x104>
   1141c:	10c00117 	ldw	r3,4(r2)
   11420:	010007c4 	movi	r4,31
   11424:	20c00e16 	blt	r4,r3,11460 <__register_exitproc+0x6c>
   11428:	1a000044 	addi	r8,r3,1
   1142c:	8800221e 	bne	r17,zero,114b8 <__register_exitproc+0xc4>
   11430:	18c00084 	addi	r3,r3,2
   11434:	18c7883a 	add	r3,r3,r3
   11438:	18c7883a 	add	r3,r3,r3
   1143c:	12000115 	stw	r8,4(r2)
   11440:	10c7883a 	add	r3,r2,r3
   11444:	19400015 	stw	r5,0(r3)
   11448:	0005883a 	mov	r2,zero
   1144c:	dfc00517 	ldw	ra,20(sp)
   11450:	dc400417 	ldw	r17,16(sp)
   11454:	dc000317 	ldw	r16,12(sp)
   11458:	dec00604 	addi	sp,sp,24
   1145c:	f800283a 	ret
   11460:	00800034 	movhi	r2,0
   11464:	1088ce04 	addi	r2,r2,9016
   11468:	10002626 	beq	r2,zero,11504 <__register_exitproc+0x110>
   1146c:	01006404 	movi	r4,400
   11470:	d9400015 	stw	r5,0(sp)
   11474:	d9800115 	stw	r6,4(sp)
   11478:	d9c00215 	stw	r7,8(sp)
   1147c:	00023380 	call	2338 <malloc>
   11480:	d9400017 	ldw	r5,0(sp)
   11484:	d9800117 	ldw	r6,4(sp)
   11488:	d9c00217 	ldw	r7,8(sp)
   1148c:	10001d26 	beq	r2,zero,11504 <__register_exitproc+0x110>
   11490:	81000017 	ldw	r4,0(r16)
   11494:	10000115 	stw	zero,4(r2)
   11498:	02000044 	movi	r8,1
   1149c:	22405217 	ldw	r9,328(r4)
   114a0:	0007883a 	mov	r3,zero
   114a4:	12400015 	stw	r9,0(r2)
   114a8:	20805215 	stw	r2,328(r4)
   114ac:	10006215 	stw	zero,392(r2)
   114b0:	10006315 	stw	zero,396(r2)
   114b4:	883fde26 	beq	r17,zero,11430 <__alt_data_end+0xff011430>
   114b8:	18c9883a 	add	r4,r3,r3
   114bc:	2109883a 	add	r4,r4,r4
   114c0:	1109883a 	add	r4,r2,r4
   114c4:	21802215 	stw	r6,136(r4)
   114c8:	01800044 	movi	r6,1
   114cc:	12406217 	ldw	r9,392(r2)
   114d0:	30cc983a 	sll	r6,r6,r3
   114d4:	4992b03a 	or	r9,r9,r6
   114d8:	12406215 	stw	r9,392(r2)
   114dc:	21c04215 	stw	r7,264(r4)
   114e0:	01000084 	movi	r4,2
   114e4:	893fd21e 	bne	r17,r4,11430 <__alt_data_end+0xff011430>
   114e8:	11006317 	ldw	r4,396(r2)
   114ec:	218cb03a 	or	r6,r4,r6
   114f0:	11806315 	stw	r6,396(r2)
   114f4:	003fce06 	br	11430 <__alt_data_end+0xff011430>
   114f8:	18805304 	addi	r2,r3,332
   114fc:	18805215 	stw	r2,328(r3)
   11500:	003fc606 	br	1141c <__alt_data_end+0xff01141c>
   11504:	00bfffc4 	movi	r2,-1
   11508:	003fd006 	br	1144c <__alt_data_end+0xff01144c>

0001150c <__call_exitprocs>:
   1150c:	defff504 	addi	sp,sp,-44
   11510:	df000915 	stw	fp,36(sp)
   11514:	dd400615 	stw	r21,24(sp)
   11518:	dc800315 	stw	r18,12(sp)
   1151c:	dfc00a15 	stw	ra,40(sp)
   11520:	ddc00815 	stw	r23,32(sp)
   11524:	dd800715 	stw	r22,28(sp)
   11528:	dd000515 	stw	r20,20(sp)
   1152c:	dcc00415 	stw	r19,16(sp)
   11530:	dc400215 	stw	r17,8(sp)
   11534:	dc000115 	stw	r16,4(sp)
   11538:	d9000015 	stw	r4,0(sp)
   1153c:	2839883a 	mov	fp,r5
   11540:	04800044 	movi	r18,1
   11544:	057fffc4 	movi	r21,-1
   11548:	00800074 	movhi	r2,1
   1154c:	108e4c04 	addi	r2,r2,14640
   11550:	12000017 	ldw	r8,0(r2)
   11554:	45005217 	ldw	r20,328(r8)
   11558:	44c05204 	addi	r19,r8,328
   1155c:	a0001c26 	beq	r20,zero,115d0 <__call_exitprocs+0xc4>
   11560:	a0800117 	ldw	r2,4(r20)
   11564:	15ffffc4 	addi	r23,r2,-1
   11568:	b8000d16 	blt	r23,zero,115a0 <__call_exitprocs+0x94>
   1156c:	14000044 	addi	r16,r2,1
   11570:	8421883a 	add	r16,r16,r16
   11574:	8421883a 	add	r16,r16,r16
   11578:	84402004 	addi	r17,r16,128
   1157c:	a463883a 	add	r17,r20,r17
   11580:	a421883a 	add	r16,r20,r16
   11584:	e0001e26 	beq	fp,zero,11600 <__call_exitprocs+0xf4>
   11588:	80804017 	ldw	r2,256(r16)
   1158c:	e0801c26 	beq	fp,r2,11600 <__call_exitprocs+0xf4>
   11590:	bdffffc4 	addi	r23,r23,-1
   11594:	843fff04 	addi	r16,r16,-4
   11598:	8c7fff04 	addi	r17,r17,-4
   1159c:	bd7ff91e 	bne	r23,r21,11584 <__alt_data_end+0xff011584>
   115a0:	00800034 	movhi	r2,0
   115a4:	1088d304 	addi	r2,r2,9036
   115a8:	10000926 	beq	r2,zero,115d0 <__call_exitprocs+0xc4>
   115ac:	a0800117 	ldw	r2,4(r20)
   115b0:	1000301e 	bne	r2,zero,11674 <__call_exitprocs+0x168>
   115b4:	a0800017 	ldw	r2,0(r20)
   115b8:	10003226 	beq	r2,zero,11684 <__call_exitprocs+0x178>
   115bc:	a009883a 	mov	r4,r20
   115c0:	98800015 	stw	r2,0(r19)
   115c4:	000234c0 	call	234c <free>
   115c8:	9d000017 	ldw	r20,0(r19)
   115cc:	a03fe41e 	bne	r20,zero,11560 <__alt_data_end+0xff011560>
   115d0:	dfc00a17 	ldw	ra,40(sp)
   115d4:	df000917 	ldw	fp,36(sp)
   115d8:	ddc00817 	ldw	r23,32(sp)
   115dc:	dd800717 	ldw	r22,28(sp)
   115e0:	dd400617 	ldw	r21,24(sp)
   115e4:	dd000517 	ldw	r20,20(sp)
   115e8:	dcc00417 	ldw	r19,16(sp)
   115ec:	dc800317 	ldw	r18,12(sp)
   115f0:	dc400217 	ldw	r17,8(sp)
   115f4:	dc000117 	ldw	r16,4(sp)
   115f8:	dec00b04 	addi	sp,sp,44
   115fc:	f800283a 	ret
   11600:	a0800117 	ldw	r2,4(r20)
   11604:	80c00017 	ldw	r3,0(r16)
   11608:	10bfffc4 	addi	r2,r2,-1
   1160c:	15c01426 	beq	r2,r23,11660 <__call_exitprocs+0x154>
   11610:	80000015 	stw	zero,0(r16)
   11614:	183fde26 	beq	r3,zero,11590 <__alt_data_end+0xff011590>
   11618:	95c8983a 	sll	r4,r18,r23
   1161c:	a0806217 	ldw	r2,392(r20)
   11620:	a5800117 	ldw	r22,4(r20)
   11624:	2084703a 	and	r2,r4,r2
   11628:	10000b26 	beq	r2,zero,11658 <__call_exitprocs+0x14c>
   1162c:	a0806317 	ldw	r2,396(r20)
   11630:	2088703a 	and	r4,r4,r2
   11634:	20000c1e 	bne	r4,zero,11668 <__call_exitprocs+0x15c>
   11638:	89400017 	ldw	r5,0(r17)
   1163c:	d9000017 	ldw	r4,0(sp)
   11640:	183ee83a 	callr	r3
   11644:	a0800117 	ldw	r2,4(r20)
   11648:	15bfbf1e 	bne	r2,r22,11548 <__alt_data_end+0xff011548>
   1164c:	98800017 	ldw	r2,0(r19)
   11650:	153fcf26 	beq	r2,r20,11590 <__alt_data_end+0xff011590>
   11654:	003fbc06 	br	11548 <__alt_data_end+0xff011548>
   11658:	183ee83a 	callr	r3
   1165c:	003ff906 	br	11644 <__alt_data_end+0xff011644>
   11660:	a5c00115 	stw	r23,4(r20)
   11664:	003feb06 	br	11614 <__alt_data_end+0xff011614>
   11668:	89000017 	ldw	r4,0(r17)
   1166c:	183ee83a 	callr	r3
   11670:	003ff406 	br	11644 <__alt_data_end+0xff011644>
   11674:	a0800017 	ldw	r2,0(r20)
   11678:	a027883a 	mov	r19,r20
   1167c:	1029883a 	mov	r20,r2
   11680:	003fb606 	br	1155c <__alt_data_end+0xff01155c>
   11684:	0005883a 	mov	r2,zero
   11688:	003ffb06 	br	11678 <__alt_data_end+0xff011678>

0001168c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1168c:	defffd04 	addi	sp,sp,-12
   11690:	df000215 	stw	fp,8(sp)
   11694:	df000204 	addi	fp,sp,8
   11698:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1169c:	0001883a 	nop
   116a0:	e0bfff17 	ldw	r2,-4(fp)
   116a4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   116a8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   116ac:	10000226 	beq	r2,zero,116b8 <_exit+0x2c>
    ALT_SIM_FAIL();
   116b0:	002af070 	cmpltui	zero,zero,43969
   116b4:	00000106 	br	116bc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   116b8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   116bc:	003fff06 	br	116bc <__alt_data_end+0xff0116bc>
